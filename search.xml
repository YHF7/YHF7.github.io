<?xml version="1.0" encoding="utf-8"?>
<search> 
  
    
    <entry>
      <title>电话面试总结</title>
      <link href="/2019/09/30/%E8%85%BE%E8%AE%AF%E7%94%B5%E9%9D%A2%E8%AE%B0%E5%BD%95/"/>
      <url>/2019/09/30/%E8%85%BE%E8%AE%AF%E7%94%B5%E9%9D%A2%E8%AE%B0%E5%BD%95/</url>
      
        <content type="html"><![CDATA[<link rel="stylesheet" class="aplayer-secondary-style-marker" href="/assets/css/APlayer.min.css"><script src="/assets/js/APlayer.min.js" class="aplayer-secondary-script-marker"></script><h1 id="前言"><a href="#前言" class="headerlink" title="前言"></a>前言</h1><ul><li>这个面试的电话来的非常的突然似的我触不及防</li><li>但是也只好应战，在电面的过程中，我的状态非常的糟糕</li><li>很多基础知识遗忘，很多都没答上来，感觉自己这次是 gg 了</li><li>但是没关系总结问过的问题，虽然有些不记得但是把记得的记录下来</li><li>不过也是收获满满，知道自己那些方面需要努力做好准备迎接新的挑战</li></ul><h1 id="开始"><a href="#开始" class="headerlink" title="开始"></a>开始</h1><h3 id="如何在原生中绑定一个-DOM"><a href="#如何在原生中绑定一个-DOM" class="headerlink" title="如何在原生中绑定一个 DOM"></a>如何在原生中绑定一个 DOM</h3><ul><li>我第一想法就是 onclick ondouble 等这些鼠标事件，但是我并没有说出口我不知道如何的去诉说</li><li>当我回来查阅发现 js 事件绑定有 3 种方法</li></ul><h4 id="一、在-DOM-元素中直接绑定（就是在-html-中直接写上去）"><a href="#一、在-DOM-元素中直接绑定（就是在-html-中直接写上去）" class="headerlink" title="一、在 DOM 元素中直接绑定（就是在 html 中直接写上去）"></a>一、在 DOM 元素中直接绑定（就是在 html 中直接写上去）</h4><ul><li>JavaScript 支持在标签中直接绑定事件 ，语法为： onXXX=”JavaScript Code”</li><li><ol><li>onXXX 为事件名称。例如，鼠标单击事件 onclick ，鼠标双击事件 ondouble，鼠标移入事件 onmouseover，鼠标移出事件 onmouseout 等</li></ol></li><li><ol start="2"><li>JavaScript Code 为处理事件的 JavaScript 代码，一般是函数</li></ol></li></ul><figure class="highlight html"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">&lt;!-- 1. 直接把函数写在html里面，onclick --&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">input</span> <span class="attr">onclick</span>=<span class="string">"alert('谢谢支持')"</span> <span class="attr">type</span>=<span class="string">"button"</span> <span class="attr">value</span>=<span class="string">"点击我，弹出警告框"</span> /&gt;</span></span><br><span class="line"><span class="comment">&lt;!-- 2. 把函数写在js中调用--&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">input</span> <span class="attr">onclick</span>=<span class="string">"myAlert()"</span> <span class="attr">type</span>=<span class="string">"button"</span> <span class="attr">value</span>=<span class="string">"点击我，弹出警告框"</span> /&gt;</span></span><br><span class="line"></span><br><span class="line"><span class="tag">&lt;<span class="name">script</span>&gt;</span><span class="undefined"></span></span><br><span class="line"><span class="undefined">  function myAlert() &#123;</span></span><br><span class="line"><span class="undefined">    alert("你点击了按钮");</span></span><br><span class="line"><span class="undefined">  &#125;</span></span><br><span class="line"><span class="undefined"></span><span class="tag">&lt;/<span class="name">script</span>&gt;</span></span><br></pre></td></tr></table></figure><h4 id="二、在-js-代码中绑定（就是直接在-js-中获取并操作-dom）"><a href="#二、在-js-代码中绑定（就是直接在-js-中获取并操作-dom）" class="headerlink" title="二、在 js 代码中绑定（就是直接在 js 中获取并操作 dom）"></a>二、在 js 代码中绑定（就是直接在 js 中获取并操作 dom）</h4><ul><li>在 JavaScript 代码中绑定事件可以使 JavaScript 代码与 HTML 标签分离，文档结构清晰，便于管理和开发。</li><li>在 JavaScript 代码中绑定事件的语法为：<br>elementObject.onXXX=function(){<br>// 事件处理代码<br>}</li><li><ol><li>elementObject 为 DOM 对象，即 DOM 元素。</li></ol></li><li><ol start="2"><li>onXXX 为事件名称。</li></ol></li></ul><figure class="highlight html"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">input</span> <span class="attr">id</span>=<span class="string">"demo"</span> <span class="attr">type</span>=<span class="string">"button"</span> <span class="attr">value</span>=<span class="string">"点我显示，dom"</span> /&gt;</span></span><br><span class="line"></span><br><span class="line"><span class="tag">&lt;<span class="name">script</span>&gt;</span><span class="undefined"></span></span><br><span class="line"><span class="undefined">  // dom.getid 通过id的方式来获取到input的dom元素并挂在一个点击事件</span></span><br><span class="line"><span class="undefined">  document.getElementById("demo").onclick = function() &#123;</span></span><br><span class="line"><span class="xml">    alert(this.getAttribute("type")); // this 指当前发生事件的HTML元素，这里是<span class="tag">&lt;<span class="name">div</span>&gt;</span>标签</span></span><br><span class="line"><span class="undefined">  &#125;;</span></span><br><span class="line"><span class="undefined"></span><span class="tag">&lt;/<span class="name">script</span>&gt;</span></span><br></pre></td></tr></table></figure><h4 id="三、绑定事件监听函数-这个学习的时候用过之后再也没有用过了，用过-jq-的可能感觉熟悉一些"><a href="#三、绑定事件监听函数-这个学习的时候用过之后再也没有用过了，用过-jq-的可能感觉熟悉一些" class="headerlink" title="三、绑定事件监听函数(这个学习的时候用过之后再也没有用过了，用过 jq 的可能感觉熟悉一些)"></a>三、绑定事件监听函数(这个学习的时候用过之后再也没有用过了，用过 jq 的可能感觉熟悉一些)</h4><ul><li>绑定事件的另一种方法是用 addEventListener() 或 attachEvent() 来绑定事件监听</li></ul><h5 id="addEventListener-函数语法："><a href="#addEventListener-函数语法：" class="headerlink" title="addEventListener()函数语法："></a>addEventListener()函数语法：</h5><ul><li>elementObject.addEventListener(eventName,handle,useCapture);</li></ul><table><thead><tr><th>参数</th><th>说明</th></tr></thead><tbody><tr><td>elementObject</td><td>DOM 对象（即 DOM 元素）。</td></tr><tr><td>eventName</td><td>事件名称。注意，这里的事件名称没有“ on ”，如鼠标单击事件 click ，鼠标双击事件 doublethink ，鼠标移入事件 mouseover，鼠标移出事件 mouseout 等。</td></tr><tr><td>handle</td><td>事件句柄函数，即用来处理事件的函数。</td></tr><tr><td>useCapture</td><td>Boolean 类型，是否使用捕获，一般用 false 。这里涉及到 JavaScript 事件流的概念，后续章节将会详细讲解。</td></tr></tbody></table><h5 id="attachEvent-函数语法："><a href="#attachEvent-函数语法：" class="headerlink" title="attachEvent()函数语法："></a>attachEvent()函数语法：</h5><ul><li>elementObject.attachEvent(eventName,handle);</li></ul><table><thead><tr><th>参数</th><th>说明</th></tr></thead><tbody><tr><td>elementObject</td><td>DOM 对象（即 DOM 元素）。</td></tr><tr><td>eventName</td><td>事件名称。注意，与 addEventListener()不同，这里的事件名称有“ on ”，如鼠标单击事件 onclick ，鼠标双击事件 ondoubleclick ，鼠标移入事件 onmouseover，鼠标移出事件 onmouseout 等。</td></tr><tr><td>handle</td><td>事件句柄函数，即用来处理事件的函数。</td></tr></tbody></table><h4 id="这是一个兼容-ie8-以下版本的兼容代码"><a href="#这是一个兼容-ie8-以下版本的兼容代码" class="headerlink" title="这是一个兼容 ie8 以下版本的兼容代码"></a>这是一个兼容 ie8 以下版本的兼容代码</h4><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">// 兼容代码</span></span><br><span class="line"><span class="function"><span class="keyword">function</span> <span class="title">addEvent</span>(<span class="params">obj, type, handle</span>) </span>&#123;</span><br><span class="line">  <span class="keyword">try</span> &#123;</span><br><span class="line">    <span class="comment">// Chrome、FireFox、Opera、Safari、IE9.0及其以上版本</span></span><br><span class="line">    obj.addEventListener(type, handle, <span class="literal">false</span>);</span><br><span class="line">  &#125; <span class="keyword">catch</span> (e) &#123;</span><br><span class="line">    <span class="keyword">try</span> &#123;</span><br><span class="line">      <span class="comment">// IE8.0及其以下版本</span></span><br><span class="line">      obj.attachEvent(<span class="string">"on"</span> + type, handle);</span><br><span class="line">    &#125; <span class="keyword">catch</span> (e) &#123;</span><br><span class="line">      <span class="comment">// 早期浏览器</span></span><br><span class="line">      obj[<span class="string">"on"</span> + type] = handle;</span><br><span class="line">    &#125;</span><br><span class="line">  &#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="comment">// 使用</span></span><br><span class="line"></span><br><span class="line">addEvent(<span class="built_in">document</span>.getElementById(<span class="string">"demo"</span>), <span class="string">"click"</span>, myAlert);</span><br><span class="line"><span class="function"><span class="keyword">function</span> <span class="title">myAlert</span>(<span class="params"></span>) </span>&#123;</span><br><span class="line">  alert(<span class="string">"又是一个警告框"</span>);</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h3 id="如何在原生中获取-dom-元素"><a href="#如何在原生中获取-dom-元素" class="headerlink" title="如何在原生中获取 dom 元素"></a>如何在原生中获取 dom 元素</h3><ul><li>获取 dom 的方法其实有很多种，在我脑海里第一个出现的是 byid byclass ，然而我并不会拼读这也太尴尬了</li></ul><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><span class="line">通过ID获取（getElementById）</span><br><span class="line">通过name属性（getElementsByName）</span><br><span class="line">通过标签名（getElementsByTagName）</span><br><span class="line">通过类名（getElementsByClassName）</span><br><span class="line">通过选择器获取一个元素（querySelector）</span><br><span class="line">通过选择器获取一组元素（querySelectorAll）</span><br><span class="line">获取html的方法（document.documentElement） document.documentElement是专门获取html这个标签的</span><br><span class="line">获取body的方法（document.body）document.body是专门获取body这个标签的。</span><br></pre></td></tr></table></figure><ol><li>通过 ID 获取（getElementById）</li></ol><ul><li>通过 document 调用 getElementById 的方法传入一个 string 类型的 id</li><li>它如果获取到了就会返回一个元素而且是只会返回一个，如果没有找到那就返回 null</li></ul><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line"><span class="built_in">document</span>.getElementById(<span class="string">"id"</span>);</span><br></pre></td></tr></table></figure><ol start="2"><li>通过 name 属性（getElementsByName）</li></ol><ul><li>通过 document 调用 getElementByName 的方法传入一个 string 类型的 name</li><li>这个 name 是啥呢，例如： input 中 <input type="hidden" name="up">，这里 name 就是这个 up</li><li>一般这个多用于一些表单中的元素获取上比较多</li><li>这个返回的是一个数组，如果没有那就是空数组</li></ul><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line"><span class="built_in">document</span>.getElementsByName(<span class="string">"name"</span>);</span><br></pre></td></tr></table></figure><ol start="3"><li>通过标签名（getElementsByTagName）</li></ol><ul><li>通过 document 调用 getElementsByTagName 的方法传入一个 string 类型的 元素名（不分大小写）</li><li>得到的也是一个数组，没有依然是返回空数组</li></ul><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">// 这是一个通过类型名称div给所有的div添加点击事件的操作</span></span><br><span class="line"><span class="keyword">var</span> obj = <span class="built_in">document</span>.getElementsByTagName(<span class="string">"div"</span>);</span><br><span class="line"><span class="keyword">for</span> (<span class="keyword">let</span> i = <span class="number">0</span>; i &lt; obj.length; i++) &#123;</span><br><span class="line">  obj[i].onclick = <span class="function"><span class="keyword">function</span>(<span class="params">e</span>) </span>&#123;</span><br><span class="line">    <span class="built_in">console</span>.log(i);</span><br><span class="line">  &#125;;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><ol start="4"><li>通过类名（getElementsByClassName）</li></ol><ul><li>通过 document 调用 getElementsByClassName 的方法传入一个 string 类型的 类名（也就是 class）</li><li>也可以写连锁的类型 着么为连锁呢， div.nav.abc div 下的类名下的类名为 abc 的元素</li><li>得到的也是一个数组，没有依然是返回空数组</li></ul><figure class="highlight html"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">div</span> <span class="attr">class</span>=<span class="string">"abc"</span>&gt;</span><span class="tag">&lt;/<span class="name">div</span>&gt;</span></span><br><span class="line"></span><br><span class="line"><span class="tag">&lt;<span class="name">script</span>&gt;</span><span class="undefined"></span></span><br><span class="line"><span class="javascript">  <span class="keyword">let</span> dv = <span class="built_in">document</span>.getElementsByClassName(<span class="string">"animated"</span>);</span></span><br><span class="line"><span class="undefined"></span><span class="tag">&lt;/<span class="name">script</span>&gt;</span></span><br></pre></td></tr></table></figure><ol start="5"><li>通过选择器获取一个元素（querySelector）</li></ol><ul><li>这是我最常用也是最喜欢的，因为别的我都记不住就记住了这个</li><li>他就好像 css 一样去写变量就可以了，非常的好用</li><li>通过 document 调用 querySelector 的方法传入一个 string 的值可以是 id 可以是类也可以是元素名，只要是 css 可以的它都可以</li><li>它会返回它所找到的第一个元素</li></ul><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line"><span class="built_in">document</span>.querySelector(<span class="string">".abc"</span>);</span><br><span class="line"><span class="built_in">document</span>.querySelector(<span class="string">"#abc"</span>);</span><br><span class="line"><span class="built_in">document</span>.querySelector(<span class="string">"div"</span>);</span><br></pre></td></tr></table></figure><ol start="6"><li>通过选择器获取一组元素（querySelectorAll）</li></ol><ul><li>这个和上面第五那个一样只不过这个是返回找到的所有元素</li><li>返回值是一个类数组。</li></ul><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line"><span class="built_in">document</span>.querySelectorAll(<span class="string">".abc"</span>);</span><br><span class="line"><span class="built_in">document</span>.querySelectorAll(<span class="string">"#abc"</span>);</span><br><span class="line"><span class="built_in">document</span>.querySelectorAll(<span class="string">"div"</span>);</span><br></pre></td></tr></table></figure><h3 id="ajax-的原理以及原生如何使用"><a href="#ajax-的原理以及原生如何使用" class="headerlink" title="ajax 的原理以及原生如何使用"></a>ajax 的原理以及原生如何使用</h3><ul><li>ajax 的出现,刚好解决了传统方法的缺陷。AJAX 是一种用于创建快速动态网页的技术。通过在后台与服务器进行少量数据交换，AJAX 可以使网页实现异步更新。这意味着可以在不重新加载整个网页的情况下，对网页的某部分进行更新。</li><li>XMLHttpRequest 对象: XMLHttpRequest 对象是 ajax 的基础,XMLHttpRequest 用于在后台与服务器交换数据。这意味着可以在不重新加载整个网页的情况下，对网页的某部分进行更新。目前所有浏览器都支持 XMLHttpRequest</li></ul><table><thead><tr><th>方 法</th><th>描 述</th></tr></thead><tbody><tr><td>abort()</td><td>停止当前请求</td></tr><tr><td>getAllResponseHeaders()</td><td>把 HTTP 请求的所有响应首部作为键/值对返回</td></tr><tr><td>getResponseHeader(“header”)</td><td>返回指定首部的串值</td></tr><tr><td>open(“method”,”URL”,[asyncFlag],[“userName”],[“password”])</td><td>建立对服务器的调用。method 参数可以是 GET、POST 或 PUT。url 参数可以是相对 URL 或绝对 URL。这个方法还包括 3 个可选的参数，是否异步，用户名，密码</td></tr><tr><td>send(content)</td><td>向服务器发送请求</td></tr><tr><td>setRequestHeader(“header”, “value”)</td><td>把指定首部设置为所提供的值。在设置任何首部之前必须先调用 open()。设置 header 并和请求一起发送 (‘post’方法一定要 )</td></tr></tbody></table><ul><li>在原生中 就是通过 XMLHttpRequest 来请求 ajax 的</li></ul><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">// get 请求</span></span><br><span class="line"><span class="comment">//步骤一:创建异步对象</span></span><br><span class="line"><span class="keyword">var</span> ajax = <span class="keyword">new</span> XMLHttpRequest();</span><br><span class="line"><span class="comment">//步骤二:设置请求的url参数,参数一是请求的类型,参数二是请求的url,可以带参数,动态的传递参数starName到服务端</span></span><br><span class="line">ajax.open(<span class="string">"get"</span>, <span class="string">"getStar.php?starName="</span> + name);</span><br><span class="line"><span class="comment">//步骤三:发送请求</span></span><br><span class="line">ajax.send();</span><br><span class="line"><span class="comment">//步骤四:注册事件 onreadystatechange 状态改变就会调用</span></span><br><span class="line">ajax.onreadystatechange = <span class="function"><span class="keyword">function</span>(<span class="params"></span>) </span>&#123;</span><br><span class="line">  <span class="keyword">if</span> (ajax.readyState == <span class="number">4</span> &amp;&amp; ajax.status == <span class="number">200</span>) &#123;</span><br><span class="line">    <span class="comment">//步骤五 如果能够进到这个判断 说明 数据 完美的回来了,并且请求的页面是存在的</span></span><br><span class="line">    <span class="built_in">console</span>.log(ajax.responseText); <span class="comment">//输入相应的内容</span></span><br><span class="line">  &#125;</span><br><span class="line">&#125;;</span><br><span class="line"></span><br><span class="line"><span class="comment">// post 请求</span></span><br><span class="line"><span class="comment">//创建异步对象</span></span><br><span class="line"><span class="keyword">var</span> xhr = <span class="keyword">new</span> XMLHttpRequest();</span><br><span class="line"><span class="comment">//设置请求的类型及url</span></span><br><span class="line"><span class="comment">//post请求一定要添加请求头才行不然会报错</span></span><br><span class="line">xhr.setRequestHeader(<span class="string">"Content-type"</span>, <span class="string">"application/x-www-form-urlencoded"</span>);</span><br><span class="line">xhr.open(<span class="string">"post"</span>, <span class="string">"02.post.php"</span>);</span><br><span class="line"><span class="comment">//发送请求</span></span><br><span class="line">xhr.send(<span class="string">"name=fox&amp;age=18"</span>);</span><br><span class="line">xhr.onreadystatechange = <span class="function"><span class="keyword">function</span>(<span class="params"></span>) </span>&#123;</span><br><span class="line">  <span class="comment">// 这步为判断服务器是否正确响应</span></span><br><span class="line">  <span class="keyword">if</span> (xhr.readyState == <span class="number">4</span> &amp;&amp; xhr.status == <span class="number">200</span>) &#123;</span><br><span class="line">    <span class="built_in">console</span>.log(xhr.responseText);</span><br><span class="line">  &#125;</span><br><span class="line">&#125;;</span><br></pre></td></tr></table></figure><h3 id="jsonp"><a href="#jsonp" class="headerlink" title="jsonp"></a>jsonp</h3><ul><li>JSONP(JSON with Padding) 是一种跨域请求方式。主要原理是利用了 script 标签可以跨域请求的特点，由其 src 属性发送请求到服务器，服务器返回 js 代码，网页端接受响应，然后就直接执行了，这和通过 script 标签引用外部文件的原理是一样的。</li><li>JSONP 由两部分组成：回调函数和数据，回调函数一般是由网页端控制，作为参数发往服务器端，服务器端把要返回的数据拼成字符串作为函数的参数传入。</li><li>比如网页端创建一个 script 标签，并给其 src 赋值为 <a href="http://www.example.com/json/?callback=process，" target="_blank" rel="noopener">http://www.example.com/json/?callback=process，</a> 此时网页端就发起一个请求。服务端将要返回的数据拼好最为函数的参数传入，服务端返回的数据格式类似”process({‘name’:’example’})”，网页端接收到了响应值，因为请求者是 script，所以相当于直接调用 process 方法，并且传入了一个参数。</li><li>单看响应返回的数据，JSONP 比 ajax 方式就多了一个回调函数。</li></ul><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br></pre></td><td class="code"><pre><span class="line"><span class="function"><span class="keyword">function</span> <span class="title">myjsonp</span>(<span class="params">URL, callback, callbackname</span>) </span>&#123;</span><br><span class="line">  <span class="comment">//给系统中创建一个全局变量，叫做callbackname，指向callback函数</span></span><br><span class="line">  <span class="comment">//定义</span></span><br><span class="line">  <span class="built_in">window</span>[callbackname] = callback;</span><br><span class="line">  <span class="comment">//创建一个script节点</span></span><br><span class="line">  <span class="keyword">var</span> oscript = <span class="built_in">document</span>.createElement(<span class="string">"script"</span>);</span><br><span class="line">  <span class="comment">//和image不一样，设置src并不会发出HTTP请求</span></span><br><span class="line">  oscript.src = URL;</span><br><span class="line">  oscript.type = <span class="string">"text/javascript"</span>;</span><br><span class="line">  <span class="comment">//script标签的请求是在上树的时候发出，请求的是一个函数的执行语句</span></span><br><span class="line">  <span class="built_in">document</span>.head.appendChild(oscript);</span><br><span class="line">  <span class="comment">//为了不污染页面，瞬间把script拿掉</span></span><br><span class="line">  <span class="built_in">document</span>.head.removeChild(oscript);</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="comment">//使用</span></span><br><span class="line">myjsonp(</span><br><span class="line">  <span class="string">"http://sclub.jd.com/productpage/p-1217508-s-0-t-3-p-1.html?callback=abcdefg"</span>,</span><br><span class="line">  <span class="function"><span class="keyword">function</span>(<span class="params">data</span>) </span>&#123;</span><br><span class="line">    <span class="built_in">console</span>.log(data);</span><br><span class="line">  &#125;,</span><br><span class="line">  <span class="string">"abcdefg"</span></span><br><span class="line">);</span><br><span class="line"></span><br><span class="line"><span class="comment">// 如果是在jq中使用就方便很多了</span></span><br><span class="line">$.ajax(<span class="string">"test.txt"</span>, &#123;</span><br><span class="line">  <span class="comment">//JSON跨域的时候要写一个dataType，注意不是type而是dataType</span></span><br><span class="line">  dataType: <span class="string">"jsonp"</span>,</span><br><span class="line">  <span class="comment">//要定义的函数名字，因为JSONP不缺执行，缺定义</span></span><br><span class="line">  jsonpCallback: <span class="string">"fun"</span>,</span><br><span class="line">  <span class="comment">//信息回来之后执行的事情</span></span><br><span class="line">  success: <span class="function"><span class="keyword">function</span>(<span class="params">data</span>) </span>&#123;</span><br><span class="line">    <span class="built_in">console</span>.log(data); <span class="comment">//这里得到了请求的数据</span></span><br><span class="line">  &#125;</span><br><span class="line">&#125;);</span><br></pre></td></tr></table></figure><h3 id="node-能获取到前端传过来的什么东西"><a href="#node-能获取到前端传过来的什么东西" class="headerlink" title="node 能获取到前端传过来的什么东西"></a>node 能获取到前端传过来的什么东西</h3><p>好累今晚在写</p>]]></content>
      
      
      <categories>
          
          <category> 面试 </category>
          
      </categories>
      
      
        <tags>
            
            <tag> 面试 </tag>
            
        </tags>
      
    </entry>
    
    <entry>
      <title>React+TypeScript+Antd+Mock 后台管理系统</title>
      <link href="/2019/09/25/React+TypeScript/"/>
      <url>/2019/09/25/React+TypeScript/</url>
      
        <content type="html"><![CDATA[<link rel="stylesheet" class="aplayer-secondary-style-marker" href="/assets/css/APlayer.min.css"><script src="/assets/js/APlayer.min.js" class="aplayer-secondary-script-marker"></script><h1 id="前言"><a href="#前言" class="headerlink" title="前言"></a>前言</h1><ul><li>在近段时间中Ts在互联网时代大热起来</li><li>在前段时间我学习了Ts，对于写过java的人来说ts其实学起来得心应手</li><li>但是把Ts和前端项目结合在一起是不是得心应手呢，非也</li><li>对于我这样没有经验只是简单的学习了官网以及对官网对例子进行编写执行</li><li>这其实是一次挑战，对自己技术对一个突破</li><li>我就拿到了前面刚做好的一个react项目来改成Ts的项目</li><li>与其说是改应该说是重构，从项目的搭建都是从头开始</li><li><a href="https://gitee.com/yhf7/ReactTypescriptAntdBackstage" target="_blank" rel="noopener">项目地址：</a><a href="https://gitee.com/yhf7/ReactTypescriptAntdBackstage" target="_blank" rel="noopener">https://gitee.com/yhf7/ReactTypescriptAntdBackstage</a></li></ul><h1 id="工具-资料"><a href="#工具-资料" class="headerlink" title="工具/资料"></a>工具/资料</h1><ul><li>系统 macOS 10.14.5</li><li>yarn 1.17.3 cnpm 6.0.0  npm 6.4.1  node 10.13.0</li><li>编辑器 vs code 开发版</li><li>脚手架 create-react-app</li><li>npm插件 <a href="https://www.npmjs.com/" target="_blank" rel="noopener">https://www.npmjs.com/</a></li><li>ts <a href="https://www.tslang.cn/docs/home.html" target="_blank" rel="noopener">https://www.tslang.cn/docs/home.html</a></li></ul><h1 id="实现功能树图"><a href="#实现功能树图" class="headerlink" title="实现功能树图"></a>实现功能树图</h1><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br></pre></td><td class="code"><pre><span class="line">├── Mock // 模拟数据</span><br><span class="line">│   ├── user</span><br><span class="line">│   ├── oreder</span><br><span class="line">│   └── 等</span><br><span class="line">├── 页面 //</span><br><span class="line">│   ├── UI ├── 按钮、弹框、Loading、通知提醒、全局Message、Tab、标签、图片画廊（流式布局）、轮播图 // antd我们常用的抽取</span><br><span class="line">│   ├── 表单 ├── 登录、注册(注册常用组合)</span><br><span class="line">│   ├── 表格 ├── 基础表格（常用的表格） 高级表格（在基础表格上添加的一些表格属性）</span><br><span class="line">│   ├── 富文本 这个其实平时也是很常用到的 （插件很多挑自己喜欢的）</span><br><span class="line">│   ├── 城市管理 ├── 实现表格数据 开通城市 以及一些查询</span><br><span class="line">│   ├── 订单管理 ├── 实现表格数据 结束订单 查询订单  订单详情 </span><br><span class="line">│   │                                                  ├── （订单详情页面）通过订单详情跳转 展示地图以及订单详情</span><br><span class="line">│   ├── 员工管理 ├── 实现表格数据以及 增删改查的组件弹框操作</span><br><span class="line">│   ├── 车辆地图 实现地图以及车辆信息</span><br><span class="line">│   ├── 图表 ├──  饼图、柱状图、折线图</span><br><span class="line">│   ├── 权限设置 ├── 创建角色 设置权限 用户授权</span><br></pre></td></tr></table></figure><h1 id="起步"><a href="#起步" class="headerlink" title="起步"></a>起步</h1><h4 id="1-起一个ts项目"><a href="#1-起一个ts项目" class="headerlink" title="1. 起一个ts项目"></a>1. 起一个ts项目</h4><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">$ create-react-app react-ts-demo --typescript</span><br></pre></td></tr></table></figure><h4 id="2-安装-配置-antd等插件"><a href="#2-安装-配置-antd等插件" class="headerlink" title="2. 安装/配置 antd等插件"></a>2. 安装/配置 antd等插件</h4><ul><li>安装了很多我也不太记得具体看package<figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">$ sudo cnpm i antd axios less less-loader mockjs koa koa2-cors react-router-dom redux react-redux -S</span><br></pre></td></tr></table></figure></li></ul><h4 id="3-搭建mock"><a href="#3-搭建mock" class="headerlink" title="3. 搭建mock"></a>3. 搭建mock</h4><ul><li>利用koa和mockjs构建：具体看文件中的mock文件吧</li></ul><h4 id="4-变更js为tsx和建立ts的接口等"><a href="#4-变更js为tsx和建立ts的接口等" class="headerlink" title="4. 变更js为tsx和建立ts的接口等"></a>4. 变更js为tsx和建立ts的接口等</h4><ul><li>这个说起来我也不知道着么说直接去看项目吧</li></ul><h4 id="5-封装API接口，以及组件等"><a href="#5-封装API接口，以及组件等" class="headerlink" title="5. 封装API接口，以及组件等"></a>5. 封装API接口，以及组件等</h4><h1 id="部分效果图"><a href="#部分效果图" class="headerlink" title="部分效果图"></a>部分效果图</h1><ul><li>前面几个列表里面的都是antd的一些组件把常用的抽取出来</li></ul><ol><li>登录页面<br><img src="/React/ts/r1.png" alt="react"></li><li>主页面<br><img src="/React/ts/r2.png" alt="react"></li><li>ui界面其中一个<br><img src="/React/ts/r7.png" alt="react"></li><li>城市管理<br><img src="/React/ts/r3.png" alt="react"></li><li>订单管理<br><img src="/React/ts/r4.png" alt="react"></li><li>图表<br><img src="/React/ts/r5.png" alt="react"></li><li>员工管理<br><img src="/React/ts/r6.png" alt="react"></li></ol>]]></content>
      
      
      <categories>
          
          <category> React </category>
          
          <category> TypeScript </category>
          
      </categories>
      
      
        <tags>
            
            <tag> React </tag>
            
            <tag> TypeScript </tag>
            
        </tags>
      
    </entry>
    
    <entry>
      <title>如何使用react-native创建自己的的第一个ios App</title>
      <link href="/2019/09/08/react-native%E7%AC%AC%E4%B8%80%E4%B8%AA/"/>
      <url>/2019/09/08/react-native%E7%AC%AC%E4%B8%80%E4%B8%AA/</url>
      
        <content type="html"><![CDATA[<link rel="stylesheet" class="aplayer-secondary-style-marker" href="/assets/css/APlayer.min.css"><script src="/assets/js/APlayer.min.js" class="aplayer-secondary-script-marker"></script><h1 id="前言"><a href="#前言" class="headerlink" title="前言"></a>前言</h1><ul><li>写完了项目突然好闲，而且学习了react</li><li>哪学习了react着能不去尝尝鲜rn火了很久热潮，新的热潮也来了</li><li>我现在才开始想要进军rn的念头</li><li>面对原生开发ios的人来说rn这种东西其实就是伪app</li><li>但是作为一个前端来说rn是我们离app最近的距离</li><li>我也想尝尝鲜爽一把</li><li>搞了几个小时，晚上一直出问题跑不了早上起来继续死磕最后还是成了</li><li>试过了很多方法 重置pod 设置pod源</li></ul><h1 id="工具-资料"><a href="#工具-资料" class="headerlink" title="工具/资料"></a>工具/资料</h1><ol><li>系统 macOS 10.14.5</li><li>控制台 科学上网工具</li><li>Homebrew brew 2.1.8 （这个安装工具自己查）</li><li>node 10.13.0  npm 6.11.3  yarn 1.17.3</li><li><a href="https://reactnative.cn/docs/getting-started.html" target="_blank" rel="noopener">ReactNative官网</a></li><li><a href="https://guides.cocoapods.org/using/getting-started.html" target="_blank" rel="noopener">cocoapods界面官网</a></li><li><a href="https://gems.ruby-china.com/" target="_blank" rel="noopener">ruby</a></li><li><a href="https://mirror.tuna.tsinghua.edu.cn/help/CocoaPods/" target="_blank" rel="noopener">cocoapods改源</a></li></ol><h1 id="开始"><a href="#开始" class="headerlink" title="开始"></a>开始</h1><h3 id="安装环境"><a href="#安装环境" class="headerlink" title="安装环境"></a>安装环境</h3><ol><li><p>安装 node、watchman、flow</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line">$ brew install node</span><br><span class="line">$ brew install watchman</span><br><span class="line">$ brew install flow</span><br><span class="line">$ sudo npm install -g yarn react-native-cli</span><br><span class="line">$</span><br></pre></td></tr></table></figure></li><li><p>去苹果的app store 下载 Xcode</p></li></ol><h3 id="创建项目"><a href="#创建项目" class="headerlink" title="创建项目"></a>创建项目</h3><ol><li>创建(最好挂v)<figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">$ react-native init AwesomeProject</span><br></pre></td></tr></table></figure></li></ol><p><img src="/ReactNative/h1.png" alt="rn"></p><ol start="2"><li>发现错误</li></ol><ul><li>我自己是遇到了pod安装不上的错误</li><li>如图这个就是pod没装上环境需要自己手动去安装</li><li>这个pod install 是为了构建原生ios app 代理node_modules地址用的<br><img src="/ReactNative/h2.png" alt="rn"></li><li>尝试安装 pod install<figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">$ <span class="built_in">cd</span> ./AwesomeProject/ios &amp;&amp; pod install</span><br></pre></td></tr></table></figure></li></ul><p><img src="/ReactNative/h3.png" alt="rn"></p><h4 id="错误情况-一"><a href="#错误情况-一" class="headerlink" title="错误情况 一"></a>错误情况 一</h4><ul><li>fatal: unable to access ‘http://…/spring-mvc.git/‘: Failed to connect to 127.0.0.1 port 1080: Connection refused</li><li>如果是遇到了无法代理1080端口的设置一下git代理<figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br></pre></td><td class="code"><pre><span class="line">$ git config --global https.proxy http://127.0.0.1:1080</span><br><span class="line"></span><br><span class="line">$ git config --global https.proxy https://127.0.0.1:1080</span><br><span class="line"></span><br><span class="line">$ git config --global --<span class="built_in">unset</span> http.proxy</span><br><span class="line"></span><br><span class="line">$ git config --global --<span class="built_in">unset</span> https.proxy</span><br><span class="line"></span><br><span class="line">$ sudo npm config delete proxy</span><br></pre></td></tr></table></figure></li></ul><h4 id="错误情况-二"><a href="#错误情况-二" class="headerlink" title="错误情况 二"></a>错误情况 二</h4><ul><li>无法代理到 pod<br><img src="/ReactNative/h4.png" alt="rn"></li><li>我这里是下载包放进去 链接:<a href="https://pan.baidu.com/s/158fJx1fm3iKzxTE2mkwLXA" target="_blank" rel="noopener">https://pan.baidu.com/s/158fJx1fm3iKzxTE2mkwLXA</a>  密码:8vrp</li></ul><ol><li>解压 master包改名为master放到 ~/.cocoapods/repos 文件下（这个解压可能需要一定的时间）</li><li>解压.git文件 放到 ~/.cocoapods/repos/master文件夹下就是刚才解压的文件夹里面</li><li>回到ios文件夹 pod install</li></ol><h4 id="错误情况-三"><a href="#错误情况-三" class="headerlink" title="错误情况 三"></a>错误情况 三</h4><ul><li>这个问题是权限问题是文件里面的那个ios文件夹权限不够</li><li>应该mac才会遇到的问题，把ios以及ios里面的所有文件放大权限即可<br><img src="/ReactNative/h5.png" alt="rn"></li></ul><h4 id="pod-install成功的样子"><a href="#pod-install成功的样子" class="headerlink" title="pod install成功的样子"></a>pod install成功的样子</h4><p><img src="/ReactNative/h9.png" alt="rn"></p><h4 id="一次安装成功的结果"><a href="#一次安装成功的结果" class="headerlink" title="一次安装成功的结果"></a>一次安装成功的结果</h4><ul><li>如果看到如图恭喜你一次就安装成功了<br><img src="/ReactNative/h6.png" alt="rn"></li></ul><h3 id="运行项目"><a href="#运行项目" class="headerlink" title="运行项目"></a>运行项目</h3><ul><li><p>在项目根目录运行</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">$ <span class="built_in">cd</span> AwesomeProject</span><br><span class="line">$ react-native run-ios</span><br></pre></td></tr></table></figure></li><li><p>第一次跑不行第二次跑没问题了</p></li><li>如果中途断开了十有八九是pod的问题磕pod就可以了</li><li>图一显示的 success Successfully launched the app on the simulator </li><li>弹出图二 的样子就是成功了只是弹图二没有绿色部分还是不成</li></ul><p><img src="/ReactNative/h7.png" alt="rn"><br><img src="/ReactNative/h8.png" alt="rn"></p><h3 id="效果图"><a href="#效果图" class="headerlink" title="效果图"></a>效果图</h3><p><img src="/ReactNative/h10.png" alt="rn"></p><ul><li>修改app.js 然后在模拟器 command + r就可以了<br><img src="/ReactNative/h11.png" alt="rn"></li></ul><h3 id="运行命令总结"><a href="#运行命令总结" class="headerlink" title="运行命令总结"></a>运行命令总结</h3><ul><li><p>运行ios</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line">$ react-native run-ios <span class="comment"># 第一次跑需要用此命令</span></span><br><span class="line">$ react-native start <span class="comment"># 后面的这样运行就好了</span></span><br><span class="line">$ sudo npm run start <span class="comment"># 或者这样用node运行</span></span><br></pre></td></tr></table></figure></li><li><p>安装的也是一样的</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">$ react-native run-android <span class="comment"># 第一次</span></span><br></pre></td></tr></table></figure></li></ul><h1 id="后记"><a href="#后记" class="headerlink" title="后记"></a>后记</h1><ul><li>这就是我的第一个rn hello world 项目</li><li>死磕了好几个小时最后睡了一觉起来继续死磕就可以了哈哈哈</li><li>有什么不对或者有更好的方法可以提出来加微信我们交流交流</li><li><a href="https://yhf7.top/" target="_blank" rel="noopener">欢迎进入我的博客</a>：<a href="https://yhf7.github.io/" target="_blank" rel="noopener">https://yhf7.github.io/</a> 或 <a href="https://yhf7.top" target="_blank" rel="noopener">https://yhf7.top</a></li><li>如果有什么侵权的话，请及时添加小编微信以及 qq 也可以来告诉小编（905477376 微信 qq 通用），谢谢！</li></ul>]]></content>
      
      
      <categories>
          
          <category> ReactNative </category>
          
      </categories>
      
      
        <tags>
            
            <tag> ReactNative </tag>
            
        </tags>
      
    </entry>
    
    <entry>
      <title>create-react-app 项目中如何部署使用redux</title>
      <link href="/2019/09/05/React-redux%E9%A1%B9%E7%9B%AE%E9%83%A8%E7%BD%B2/"/>
      <url>/2019/09/05/React-redux%E9%A1%B9%E7%9B%AE%E9%83%A8%E7%BD%B2/</url>
      
        <content type="html"><![CDATA[<link rel="stylesheet" class="aplayer-secondary-style-marker" href="/assets/css/APlayer.min.css"><script src="/assets/js/APlayer.min.js" class="aplayer-secondary-script-marker"></script><h1 id="前言"><a href="#前言" class="headerlink" title="前言"></a>前言</h1><ul><li>为什么写一篇这个呢？</li><li>是我觉得它应该被单独拿出来记录一下</li><li>其实redux和vuex项目构建非常相似，可以用几乎一样来形容</li><li>之前用过vuex感觉是一挺不错的全局状态管理</li><li>最近在学习以及使用react编写了一个后台管理系统</li><li>我问过了很多的前端老大哥他们都说redux这个东西不常用，看项目需求</li><li>不过用到的时候你也是的要懂这就尴尬了那到底用不用呢？好不好用呢？如何用呢？</li><li>这里我是使用插件去部署的，原生的部署之前在react小书的那个评论组件写过了，项目中还是用插件比较好，除非大神</li><li>那就跟着我的步伐来试试使用插件来给react项目部署redux</li></ul><h1 id="工具-资料"><a href="#工具-资料" class="headerlink" title="工具/资料"></a>工具/资料</h1><ul><li>系统 macOS 10.14.5</li><li>编辑器 vs code</li><li>项目架构 create-react-app</li><li>node 10.13.0  yarn 1.17.3  cnpm 6.0  webpack 4.29.6</li><li>react 16.8.6  redux 4.0.4</li><li><a href="https://gitee.com/yhf7/ReactAntdBackstage" target="_blank" rel="noopener">项目传送门</a></li><li><a href="https://yhf7.top:5000" target="_blank" rel="noopener">项目体验传送门</a></li></ul><h1 id="开始"><a href="#开始" class="headerlink" title="开始"></a>开始</h1><h3 id="一、安装插件"><a href="#一、安装插件" class="headerlink" title="一、安装插件"></a>一、安装插件</h3><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">$ sudo yarn add redux react-redux -S</span><br></pre></td></tr></table></figure><h3 id="二、-构建-action、reducer、store层"><a href="#二、-构建-action、reducer、store层" class="headerlink" title="二、 构建 action、reducer、store层"></a>二、 构建 action、reducer、store层</h3><p><img src="/React/redux.png" alt="redux"></p><ul><li>在src目录下创建redux文件夹，里面在分别建立action、reducer、store三个文件夹<h4 id="action-（事件触发行为层）"><a href="#action-（事件触发行为层）" class="headerlink" title="action （事件触发行为层）"></a>action （事件触发行为层）</h4></li><li>redux/action/index.js</li><li>用来干嘛呢，其实就是定义给组件调用函数</li><li>通过调用这里面的函数方法来执行数据的操作<figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">/**</span></span><br><span class="line"><span class="comment"> * Action 类型</span></span><br><span class="line"><span class="comment"> */</span></span><br><span class="line"><span class="comment">// 这里我们是把方法名抽离出来方便后期代码的管理</span></span><br><span class="line"><span class="keyword">export</span> <span class="keyword">const</span> type = &#123;</span><br><span class="line">  SWITCH_MENU: <span class="string">'SWITCH_MENU'</span></span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="comment">/**</span></span><br><span class="line"><span class="comment"> * 切换菜单类型</span></span><br><span class="line"><span class="comment"> * @param &#123;*&#125; menuName 菜单名称</span></span><br><span class="line"><span class="comment"> * type 为调用哪一个方法</span></span><br><span class="line"><span class="comment"> */</span></span><br><span class="line"><span class="keyword">export</span> <span class="function"><span class="keyword">function</span> <span class="title">switchMenu</span>(<span class="params">menuName</span>) </span>&#123;</span><br><span class="line">  <span class="keyword">return</span> &#123;</span><br><span class="line">    type: type.SWITCH_MENU,</span><br><span class="line">    menuName</span><br><span class="line">  &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure></li></ul><h4 id="reducer-（数据处理层依赖着action）"><a href="#reducer-（数据处理层依赖着action）" class="headerlink" title="reducer （数据处理层依赖着action）"></a>reducer （数据处理层依赖着action）</h4><ul><li>/redux/reducer/index.js</li><li>这里呢就是用了修改编辑数据的<figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">/**</span></span><br><span class="line"><span class="comment"> * Reducer 数据处理</span></span><br><span class="line"><span class="comment"> */</span></span><br><span class="line"><span class="comment">// 导入action</span></span><br><span class="line"> <span class="keyword">import</span> &#123;type&#125; <span class="keyword">from</span> <span class="string">'../action'</span></span><br><span class="line"></span><br><span class="line"><span class="comment">/**</span></span><br><span class="line"><span class="comment"> * @param state 为状态管理存储的数据，第一个是默认数据redux会传的不需要管</span></span><br><span class="line"><span class="comment"> * @parm action 为传进来的数据</span></span><br><span class="line"><span class="comment"> * 通过action.type来判断调用的是那个方法</span></span><br><span class="line"><span class="comment"> * */</span></span><br><span class="line"><span class="keyword">export</span> <span class="keyword">default</span> (state,action) =&gt; &#123;</span><br><span class="line">  <span class="keyword">switch</span> (action.type) &#123;</span><br><span class="line">    <span class="keyword">case</span> type.SWITCH_MENU:</span><br><span class="line">      <span class="keyword">return</span> &#123;</span><br><span class="line">        ...state,<span class="comment">/// es6解构保留原数据</span></span><br><span class="line">        menuName: action.menuName</span><br><span class="line">      &#125;;</span><br><span class="line">    <span class="keyword">default</span>:</span><br><span class="line">      <span class="keyword">return</span> &#123; ...state &#125;;</span><br><span class="line">  &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure></li></ul><h4 id="store-（引入createStore构建redux-依赖着reducer层）"><a href="#store-（引入createStore构建redux-依赖着reducer层）" class="headerlink" title="store （引入createStore构建redux,依赖着reducer层）"></a>store （引入createStore构建redux,依赖着reducer层）</h4><ul><li>/redux/store/index.js</li><li>构建初始化redux<figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">// 引入</span></span><br><span class="line"><span class="keyword">import</span> &#123; createStore &#125; <span class="keyword">from</span> <span class="string">'redux'</span></span><br><span class="line"><span class="comment">// 引入reducer层</span></span><br><span class="line"><span class="keyword">import</span> reducer <span class="keyword">from</span> <span class="string">'./../reducer'</span></span><br><span class="line"><span class="comment">// 初始化redux数据</span></span><br><span class="line"><span class="keyword">const</span> initialState = &#123;</span><br><span class="line">  menuName: <span class="string">'首页'</span></span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="comment">// 默认函数返回createStore函数，传入reducer层和初始化数据</span></span><br><span class="line"><span class="keyword">export</span> <span class="keyword">default</span> () =&gt; createStore(reducer, initialState)</span><br></pre></td></tr></table></figure></li></ul><h3 id="三、在组件中调用redux中定义的方法"><a href="#三、在组件中调用redux中定义的方法" class="headerlink" title="三、在组件中调用redux中定义的方法"></a>三、在组件中调用redux中定义的方法</h3><ul><li>调用定义的方法来改变状态中的数据</li><li>这里只是显示调用的过程具体可以查看项目<figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">import</span> React, &#123; Component &#125; <span class="keyword">from</span> <span class="string">'react'</span></span><br><span class="line"><span class="comment">// 引入redux中的语法</span></span><br><span class="line"><span class="keyword">import</span> &#123; connect &#125; <span class="keyword">from</span> <span class="string">'react-redux'</span></span><br><span class="line"><span class="comment">// 引入方法自定义的action层中的方法</span></span><br><span class="line"><span class="keyword">import</span> &#123; switchMenu &#125; <span class="keyword">from</span> <span class="string">'./../../redux/action'</span></span><br><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">NavLeft</span> <span class="keyword">extends</span> <span class="title">Component</span> </span>&#123;</span><br><span class="line">  <span class="comment">/**</span></span><br><span class="line"><span class="comment">   * 菜单点击</span></span><br><span class="line"><span class="comment">   */</span></span><br><span class="line">  handleClick = <span class="function"><span class="params">()</span> =&gt;</span> &#123;</span><br><span class="line">    <span class="comment">// 1. 获取方法，这个是redux中的语法</span></span><br><span class="line">    <span class="comment">// 犹豫我们以及把组件套入redux，所以我们就可以向父级拿方法</span></span><br><span class="line">    <span class="keyword">const</span> &#123; dispatch &#125; = <span class="keyword">this</span>.props;</span><br><span class="line"></span><br><span class="line">    <span class="comment">// 2. 调用action,把数据传入</span></span><br><span class="line">    dispatch(switchMenu(item.props.title))</span><br><span class="line">  &#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="comment">// 这一步比较关键,把组件套入redux中</span></span><br><span class="line"><span class="keyword">export</span> <span class="keyword">default</span> connect()(NavLeft);</span><br></pre></td></tr></table></figure></li></ul><hr><h5 id="调用方法的一个执行流程-switchMunu-action-gt-reducer-gt-store-gt-Component-gt-action…-这样循环下去"><a href="#调用方法的一个执行流程-switchMunu-action-gt-reducer-gt-store-gt-Component-gt-action…-这样循环下去" class="headerlink" title="调用方法的一个执行流程 switchMunu(action)-&gt;reducer-&gt;store-&gt;Component-&gt;action….这样循环下去"></a>调用方法的一个执行流程 switchMunu(action)-&gt;reducer-&gt;store-&gt;Component-&gt;action….这样循环下去</h5><p><img src="/React/redux2.png" alt="redux"></p><h3 id="四、在组件中调用redux中的存储的数据"><a href="#四、在组件中调用redux中的存储的数据" class="headerlink" title="四、在组件中调用redux中的存储的数据"></a>四、在组件中调用redux中的存储的数据</h3><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">import</span> React, &#123; Component &#125; <span class="keyword">from</span> <span class="string">'react'</span></span><br><span class="line"><span class="comment">// 引入redux</span></span><br><span class="line"><span class="keyword">import</span> &#123; connect &#125; <span class="keyword">from</span> <span class="string">'react-redux'</span></span><br><span class="line"></span><br><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">Header</span> <span class="keyword">extends</span> <span class="title">Component</span> </span>&#123;</span><br><span class="line">  render () &#123;</span><br><span class="line">    <span class="keyword">return</span> (</span><br><span class="line">      &lt;div&gt;</span><br><span class="line">        <span class="comment">// 直接向父级拿即可</span></span><br><span class="line">        <span class="keyword">this</span>.props.menuName</span><br><span class="line">      &lt;<span class="regexp">/div&gt;</span></span><br><span class="line"><span class="regexp">    )</span></span><br><span class="line"><span class="regexp">  &#125;</span></span><br><span class="line"><span class="regexp">&#125;</span></span><br><span class="line"><span class="regexp"></span></span><br><span class="line"><span class="regexp">/</span><span class="regexp">/ 定义一个函数传入state返回值</span></span><br><span class="line"><span class="regexp">/</span><span class="regexp">/ 这个函数可以直接写在connect里面这样为了方便看</span></span><br><span class="line"><span class="regexp">const mapStateToProps = state =&gt; &#123;</span></span><br><span class="line"><span class="regexp">  return &#123;</span></span><br><span class="line"><span class="regexp">    menuName: state.menuName</span></span><br><span class="line"><span class="regexp">  &#125;</span></span><br><span class="line"><span class="regexp">&#125;</span></span><br><span class="line"><span class="regexp"></span></span><br><span class="line"><span class="regexp">/</span><span class="regexp">/ 同样绑定以及传入数据定义函数</span></span><br><span class="line"><span class="regexp">export default connect(mapStateToProps)(Header);</span></span><br></pre></td></tr></table></figure><h1 id="效果图"><a href="#效果图" class="headerlink" title="效果图"></a>效果图</h1><p><img src="/React/redux3.png" alt="redux"><br><img src="/React/redux4.png" alt="redux"></p><h1 id="后记"><a href="#后记" class="headerlink" title="后记"></a>后记</h1><ul><li>学习react和编写后台系统到时候用到了redux然后发现和vue方法差不多然后就想记录下来</li><li>有什么不对或者有更好的方法可以提出来加微信我们交流交流</li><li><a href="https://yhf7.top/" target="_blank" rel="noopener">欢迎进入我的博客</a>：<a href="https://yhf7.github.io/" target="_blank" rel="noopener">https://yhf7.github.io/</a> 或 <a href="https://yhf7.top" target="_blank" rel="noopener">https://yhf7.top</a></li><li>如果有什么侵权的话，请及时添加小编微信以及 qq 也可以来告诉小编（905477376 微信 qq 通用），谢谢！</li></ul>]]></content>
      
      
      <categories>
          
          <category> React </category>
          
      </categories>
      
      
        <tags>
            
            <tag> React </tag>
            
        </tags>
      
    </entry>
    
    <entry>
      <title>React学习笔记</title>
      <link href="/2019/08/03/React%E9%A1%B9%E7%9B%AE%E5%AD%A6%E4%B9%A0%E7%AC%94%E8%AE%B0/"/>
      <url>/2019/08/03/React%E9%A1%B9%E7%9B%AE%E5%AD%A6%E4%B9%A0%E7%AC%94%E8%AE%B0/</url>
      
        <content type="html"><![CDATA[<link rel="stylesheet" class="aplayer-secondary-style-marker" href="/assets/css/APlayer.min.css"><script src="/assets/js/APlayer.min.js" class="aplayer-secondary-script-marker"></script><h1 id="前言"><a href="#前言" class="headerlink" title="前言"></a>前言</h1><ul><li>这是一个带项目的学习笔记</li><li>编写了一个单车后台管理系统</li><li>边学习边去写期间学习到了很多，也对react越来越热爱了</li><li>从项目搭起到一点点完善花了一定的时间</li><li>但是这只是react生涯的前沿</li><li><a href="https://gitee.com/yhf7/ReactAntdBackstage" target="_blank" rel="noopener">项目码云传送门</a></li></ul><h1 id="React-生命周期"><a href="#React-生命周期" class="headerlink" title="React 生命周期"></a>React 生命周期</h1><ol><li>getDefaultProps 初始化Props属性(props父组件传过来的属性)</li><li>getInitialState 初始化当前组件的状态(state变量数据)</li><li>componentWillMount 组件初始化之前触发的生命周期（就是一开始就执行的函数）（用的比较多）</li><li>render 渲染界面（必有的）</li><li>componentDidMount 组件Dom调用完之后触发的生命周期 （用的比较多）</li><li>componentWillReceiveProps 父组件数据传递调用的方法 （用的比较多）</li><li>shouldComponentUpdate 组件更新时调用的方法</li><li>componentWillUpdate 组件更新之前</li><li>componentDidUpdate 组件更新之后</li><li>componentWillUnmount 组件销毁</li></ol><p><img src="/React/smzq1.png" alt="react"> </p><h1 id="知识储备"><a href="#知识储备" class="headerlink" title="知识储备"></a>知识储备</h1><h2 id="静态资源"><a href="#静态资源" class="headerlink" title="静态资源"></a>静态资源</h2><ul><li>静态资源是什么？</li><li>我们在项目开发时如何存放以及使用呢？</li></ul><hr><ul><li>静态资源就比如是图片素材等</li><li>因为是静态的需要配置到服务器的</li><li>所以我们一般直接放在public文件夹里面用的时候直接/调用即可</li><li>例：放在public/img/1.png</li><li>调用的时候直接 <img src="/img/1.png" alt="">这样就可以了</li></ul><h2 id="css"><a href="#css" class="headerlink" title="css"></a>css</h2><h3 id="calc-css计算属性-动态计算"><a href="#calc-css计算属性-动态计算" class="headerlink" title="calc css计算属性(动态计算)"></a>calc css计算属性(动态计算)</h3><ul><li>calc()函数用一个表达式作为它的参数，用这个表达式的结果作为值。这个表达式可以是任何如下操作符的组合，采用标准操作符处理法则的简单表达式。<figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><span class="line">+</span><br><span class="line">加法</span><br><span class="line">-</span><br><span class="line">减法</span><br><span class="line">*</span><br><span class="line">乘法，乘数中至少要有一个是 &lt;number&gt; 类型的</span><br><span class="line">/</span><br><span class="line">除法，除数（/右面的数）必须是 &lt;number&gt; 类型的</span><br></pre></td></tr></table></figure></li></ul><h3 id="vh-计算单位"><a href="#vh-计算单位" class="headerlink" title="vh 计算单位"></a>vh 计算单位</h3><ul><li>1vh 等于百分之1</li></ul><h1 id="项目工程配置"><a href="#项目工程配置" class="headerlink" title="项目工程配置"></a>项目工程配置</h1><h2 id="插件列表"><a href="#插件列表" class="headerlink" title="插件列表"></a>插件列表</h2><ol><li>react路由5.x版本 （react-router-dom）</li><li>api请求 (axios)</li><li>less样式预处理(less 和 less-loader)</li><li>antd 支付宝开发的一个ui组件库</li><li>babel-plugin-import 给antd库配置按需加载使用</li><li>jsonp 解决api请求跨越</li><li>react-draft-wysiwyg draft-js draftjs-to-html 富文本</li><li>moment 时间格式化</li><li>redux react-redux</li><li>redux-devtools-extension redux的调试插件</li></ol><h2 id="插件使用"><a href="#插件使用" class="headerlink" title="插件使用"></a>插件使用</h2><h3 id="jsonp-封装"><a href="#jsonp-封装" class="headerlink" title="jsonp 封装"></a>jsonp 封装</h3><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">/**</span></span><br><span class="line"><span class="comment">//  1. 引入封装</span></span><br><span class="line"><span class="comment">import Jsonp from 'jsonp'</span></span><br><span class="line"><span class="comment">export default class Axios &#123;</span></span><br><span class="line"><span class="comment">  /**</span></span><br><span class="line"><span class="comment">   * jsonp请求封装</span></span><br><span class="line"><span class="comment">   * @param &#123;*&#125; options 传入对象，url等</span></span><br><span class="line"><span class="comment">   */</span></span><br><span class="line">  <span class="keyword">static</span> jsonp (options) &#123;</span><br><span class="line">    <span class="keyword">return</span> <span class="keyword">new</span> <span class="built_in">Promise</span>(<span class="function">(<span class="params">res, rej</span>) =&gt;</span> &#123;</span><br><span class="line">        Jsonp(options.url,&#123;</span><br><span class="line">          param:<span class="string">'callback'</span></span><br><span class="line">        &#125;,(err,response) =&gt; &#123;</span><br><span class="line">          <span class="keyword">if</span> (response.status === <span class="string">'success'</span>) &#123;</span><br><span class="line">            res(response)</span><br><span class="line">          &#125;<span class="keyword">else</span> &#123;</span><br><span class="line">            rej(response)</span><br><span class="line">          &#125;</span><br><span class="line">        &#125;)</span><br><span class="line">    &#125;)</span><br><span class="line">  &#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="comment">// 2. 使用</span></span><br><span class="line"><span class="keyword">import</span> axios <span class="keyword">from</span> <span class="string">'../../axios'</span></span><br><span class="line"></span><br><span class="line">getWeatherAPIData () &#123;</span><br><span class="line">    <span class="keyword">let</span> city = <span class="string">'dongguan'</span></span><br><span class="line">    axios.jsonp(&#123;</span><br><span class="line">      url: <span class="string">'http://api.map.baidu.com/telematics/v3/weather?location='</span> + <span class="built_in">encodeURIComponent</span>(city)+<span class="string">'&amp;output=json&amp;ak=3p49MVra6urFRGOT9s8UBWr2'</span></span><br><span class="line">    &#125;).then(<span class="function"><span class="params">res</span> =&gt;</span> &#123;</span><br><span class="line">      <span class="keyword">if</span> (res.status === <span class="string">'success'</span>) &#123;</span><br><span class="line">        <span class="keyword">let</span> data = res.results[<span class="number">0</span>].weather_data[<span class="number">1</span>]</span><br><span class="line">        <span class="keyword">this</span>.setState(&#123;</span><br><span class="line">          dayPictureUrl: data.dayPictureUrl,</span><br><span class="line">          weather: data.weather</span><br><span class="line">        &#125;)</span><br><span class="line">      &#125;</span><br><span class="line">    &#125;)</span><br><span class="line">  &#125;</span><br></pre></td></tr></table></figure><h2 id="Redux-调试工具-两步都需要"><a href="#Redux-调试工具-两步都需要" class="headerlink" title="Redux 调试工具(两步都需要)"></a>Redux 调试工具(两步都需要)</h2><ol><li>在Chrome 中安装Redux Devtools扩展</li><li>yarn add redux-devtools-extension<h2 id="配置webpack"><a href="#配置webpack" class="headerlink" title="配置webpack"></a>配置webpack</h2><h3 id="暴露webpack配置"><a href="#暴露webpack配置" class="headerlink" title="暴露webpack配置"></a>暴露webpack配置</h3></li><li><p>react脚手架有一个eject的可以用来暴露webpack的</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">$ yarn eject</span><br></pre></td></tr></table></figure></li><li><p>这里插播一个坑</p><ul><li>坑一、直接运行eject会报错的，这个时候呢有两个解决方法（处理完运行eject就可以了）</li><li><ol><li>直接清除.git</li></ol></li><li><ol start="2"><li>git add . 和 git commit -m “”更新一下即可</li></ol></li><li>坑二、运行完eject有的同学就会发现为啥运行项目会报错，报的是./src/index.js里面的错(包缺损)</li><li>如何解决把node_modules删除重新安装即可</li></ul></li><li>查看package.json文件会多了很多东西以及多了 scripts和config文件（配置都在里面config）</li></ol><h3 id="安装-配置less预处理"><a href="#安装-配置less预处理" class="headerlink" title="安装/配置less预处理"></a>安装/配置less预处理</h3><ol><li><p>安装less</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">$ yarn add less less-loader</span><br></pre></td></tr></table></figure></li><li><p>配置less</p></li></ol><ul><li>找到config/webpack.config.js（执行了eject才会有这个文件）<figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">// 1. 添加less的名头（大概41行左右学着css那个来）</span></span><br><span class="line"><span class="comment">// style files regexes 找到这句话就找到了</span></span><br><span class="line"><span class="comment">// 添加 less 解析规则</span></span><br><span class="line"><span class="keyword">const</span> lessRegex = <span class="regexp">/\.less$/</span>;</span><br><span class="line"><span class="keyword">const</span> lessModuleRegex = <span class="regexp">/\.module\.less$/</span>;</span><br><span class="line"></span><br><span class="line"><span class="comment">// 2. 添加解析配置 (大概404行左右跟在css的配置后面放)</span></span><br><span class="line"><span class="comment">// Less 解析配置</span></span><br><span class="line">&#123;</span><br><span class="line">  test: lessRegex,</span><br><span class="line">  exclude: lessModuleRegex,</span><br><span class="line">  use: getStyleLoaders(</span><br><span class="line">    &#123;</span><br><span class="line">      importLoaders: <span class="number">2</span>,</span><br><span class="line">      sourceMap: isEnvProduction &amp;&amp; shouldUseSourceMap,</span><br><span class="line">    &#125;,</span><br><span class="line">    <span class="string">'less-loader'</span></span><br><span class="line">  ),</span><br><span class="line">  sideEffects: <span class="literal">true</span>,</span><br><span class="line">&#125;,</span><br><span class="line">&#123;</span><br><span class="line">  test: lessModuleRegex,</span><br><span class="line">  use: getStyleLoaders(</span><br><span class="line">    &#123;</span><br><span class="line">      importLoaders: <span class="number">2</span>,</span><br><span class="line">      sourceMap: isEnvProduction &amp;&amp; shouldUseSourceMap,</span><br><span class="line">      modules: <span class="literal">true</span>,</span><br><span class="line">      getLocalIdent: getCSSModuleLocalIdent,</span><br><span class="line">    &#125;,</span><br><span class="line">    <span class="string">'less-loader'</span></span><br><span class="line">  )</span><br><span class="line">&#125;,</span><br></pre></td></tr></table></figure></li></ul><ol start="3"><li>测试是否成功（看到图标下面的文件变红为成功）</li></ol><ul><li><p>编写一个test.less文件(写一段变红的样式)</p><figure class="highlight less"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line"><span class="selector-class">.test</span> &#123;</span><br><span class="line">  <span class="attribute">color</span>: red;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure></li><li><p>在App.js引入测试(这里只是修改代码其他的我删了你不要删)</p><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">import</span> <span class="string">'./test.less'</span></span><br><span class="line"></span><br><span class="line">&lt;p className=<span class="string">"test"</span>&gt;</span><br><span class="line">  Edit &lt;code&gt;src/App.js&lt;<span class="regexp">/code&gt; and save to reload.</span></span><br><span class="line"><span class="regexp">&lt;/</span>p&gt;</span><br></pre></td></tr></table></figure></li></ul><h3 id="安装-配置antd"><a href="#安装-配置antd" class="headerlink" title="安装/配置antd"></a>安装/配置antd</h3><ol><li><p>安装 antd、babel-plugin-import(配置按需加载)</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">$ sudo cnpm i antd babel-plugin-import -s</span><br></pre></td></tr></table></figure></li><li><p>配置自动引入antd样式（暴露代码后webpack 4.19版本）<br>注：如果在package.json中没有看到上面的形式，则需要先 reject项目。</p><figure class="highlight"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br></pre></td><td class="code"><pre><span class="line">// 找到babel改成这样即可</span><br><span class="line"> "babel": &#123;</span><br><span class="line">    "presets": [</span><br><span class="line">      <span class="string">"react-app"</span></span><br><span class="line">    ],</span><br><span class="line">    "plugins": [</span><br><span class="line">      [</span><br><span class="line">        <span class="string">"import"</span>,</span><br><span class="line">        &#123;</span><br><span class="line">          <span class="attr">"libraryName"</span>: <span class="string">"antd"</span>,</span><br><span class="line">          <span class="attr">"style"</span>: <span class="string">"css"</span></span><br><span class="line">        &#125;</span><br><span class="line">      ]</span><br><span class="line">    ]</span><br><span class="line">  &#125;</span><br></pre></td></tr></table></figure></li><li><p>引入调用 (没报错看到蓝色的按钮为正确)</p><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">import</span> React,&#123;Component&#125; <span class="keyword">from</span> <span class="string">'react'</span></span><br><span class="line"><span class="keyword">import</span> &#123;Button&#125; <span class="keyword">from</span> <span class="string">'antd'</span>;</span><br><span class="line"></span><br><span class="line"><span class="keyword">export</span> <span class="keyword">default</span> <span class="class"><span class="keyword">class</span> <span class="title">Test</span> <span class="keyword">extends</span> <span class="title">Component</span> </span>&#123;</span><br><span class="line">  testclick = <span class="function"><span class="params">()</span> =&gt;</span> &#123;</span><br><span class="line">    <span class="built_in">console</span>.log(<span class="string">'a'</span>)</span><br><span class="line">  &#125;</span><br><span class="line">  render () &#123;</span><br><span class="line">   <span class="keyword">return</span> (</span><br><span class="line">      &lt;div&gt;</span><br><span class="line">        test</span><br><span class="line">        &lt;Button type=<span class="string">"primary"</span> onClick=&#123;<span class="keyword">this</span>.testclick&#125;&gt;Button&lt;<span class="regexp">/Button&gt;</span></span><br><span class="line"><span class="regexp">      &lt;/</span>div&gt;</span><br><span class="line">    )</span><br><span class="line">  &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure></li></ol><h3 id="antd自定义主题-（确保less已经配置好以及webapck暴露，需要less才可以）"><a href="#antd自定义主题-（确保less已经配置好以及webapck暴露，需要less才可以）" class="headerlink" title="antd自定义主题 （确保less已经配置好以及webapck暴露，需要less才可以）"></a>antd自定义主题 （确保less已经配置好以及webapck暴露，需要less才可以）</h3><ol><li><p>加入主题 (./config/webpack.config.js)</p><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">// 修改配置，配置好less的 大概在110行左右，页面搜preProcessor即可最后那两个的位置哪里</span></span><br><span class="line"><span class="comment">// 把整个if替换成我这样就可以了，主题里面的颜色可以自己改</span></span><br><span class="line"><span class="keyword">if</span> (preProcessor === <span class="string">"less-loader"</span>) &#123;</span><br><span class="line">    loaders.push(&#123;</span><br><span class="line">      loader: <span class="built_in">require</span>.resolve(preProcessor),</span><br><span class="line">      options: &#123;</span><br><span class="line">        sourceMap: isEnvProduction &amp;&amp; shouldUseSourceMap,</span><br><span class="line">        modifyVars: &#123; <span class="comment">//自定义主题</span></span><br><span class="line">          <span class="string">'primary-color'</span>: <span class="string">'red'</span>,</span><br><span class="line">        &#125;,</span><br><span class="line">        javascriptEnabled: <span class="literal">true</span>,</span><br><span class="line">      &#125;,</span><br><span class="line">    &#125;);</span><br><span class="line">  &#125;</span><br></pre></td></tr></table></figure></li><li><p>修改package.json(刚才配置的时候是css，切换主题需要使用true才可以)</p><figure class="highlight"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br></pre></td><td class="code"><pre><span class="line">"babel": &#123;</span><br><span class="line">  "presets": [</span><br><span class="line">    <span class="string">"react-app"</span></span><br><span class="line">  ],</span><br><span class="line">  "plugins": [</span><br><span class="line">    [</span><br><span class="line">      <span class="string">"import"</span>,</span><br><span class="line">      &#123;</span><br><span class="line">        <span class="attr">"libraryName"</span>: <span class="string">"antd"</span>,</span><br><span class="line">        - "style": "css", // 去除</span><br><span class="line">        + "style": true</span><br><span class="line">      &#125;</span><br><span class="line">    ]</span><br><span class="line">  ]</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure></li></ol><h3 id="配置eslint"><a href="#配置eslint" class="headerlink" title="配置eslint"></a>配置eslint</h3><ol><li><p>查阅官网<br><a href="https://eslint.org/docs/2.0.0/rules/eqeqeq" target="_blank" rel="noopener">https://eslint.org/docs/2.0.0/rules/eqeqeq</a></p></li><li><p>修改想修改的配置（必须eject暴露了的）</p></li></ol><ul><li>我这里是关闭eqeqeq 这个规则是限制必须使用=== 不能用== 我使用off关闭了<figure class="highlight"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line">"eslintConfig": &#123; // 找到这个然后添加自己想要添加的配置</span><br><span class="line">    "extends": "react-app",</span><br><span class="line">    "rules": &#123;</span><br><span class="line">      "eqeqeq": "off"</span><br><span class="line">    &#125;</span><br><span class="line">  &#125;</span><br></pre></td></tr></table></figure></li></ul><h2 id="项目工程化"><a href="#项目工程化" class="headerlink" title="项目工程化"></a>项目工程化</h2><ul><li>项目架构设计</li><li>目录结构配置</li><li>制定开发规范（ESLint）</li><li>模块化、组件化</li><li>前后端接口规范</li><li>性能优化、自动化部署 </li></ul>]]></content>
      
      
      <categories>
          
          <category> React </category>
          
      </categories>
      
      
        <tags>
            
            <tag> React </tag>
            
        </tags>
      
    </entry>
    
    <entry>
      <title>阿里云 Centos7 Node（koa2、express） + Vue (history)路由模式 线上部署，手动刷新页面出错解决</title>
      <link href="/2019/07/29/koa-vue-history%E6%A8%A1%E5%BC%8F%E4%B8%8A%E7%BA%BF%E9%83%A8%E7%BD%B2/"/>
      <url>/2019/07/29/koa-vue-history%E6%A8%A1%E5%BC%8F%E4%B8%8A%E7%BA%BF%E9%83%A8%E7%BD%B2/</url>
      
        <content type="html"><![CDATA[<link rel="stylesheet" class="aplayer-secondary-style-marker" href="/assets/css/APlayer.min.css"><script src="/assets/js/APlayer.min.js" class="aplayer-secondary-script-marker"></script><h1 id="前言"><a href="#前言" class="headerlink" title="前言"></a>前言</h1><ul><li>昨日在群里有人问 express + vue（history）路由模式线上部署，手动刷新会出问题</li><li>我记得我以前弄过但是一直先不起来在哪里弄过，也没有记录在博客里面所以是找不到的</li><li>弄了好久依然不行，花了很长的时间最后还是考网上的方法弄好了</li><li>我自己也做了小小的修改</li></ul><h1 id="工具-资料"><a href="#工具-资料" class="headerlink" title="工具/资料"></a>工具/资料</h1><h3 id="线下"><a href="#线下" class="headerlink" title="线下"></a>线下</h3><ul><li>系统 mac Os 10.14.5</li><li>node v10.13.0</li><li>npm 6.10.1</li><li>vs code 开发版(远程控制修改线上代码)</li><li>webpack 4.36.1</li></ul><h3 id="线上"><a href="#线上" class="headerlink" title="线上"></a>线上</h3><ul><li>系统 Centos7 64 </li><li>node v8.0.0</li><li>npm 6.9.0</li></ul><h3 id="资料"><a href="#资料" class="headerlink" title="资料"></a>资料</h3><ul><li><a href="https://router.vuejs.org/zh/guide/essentials/history-mode.html" target="_blank" rel="noopener">vue-router路由模式</a>：<a href="https://router.vuejs.org/zh/guide/essentials/history-mode.html" target="_blank" rel="noopener">https://router.vuejs.org/zh/guide/essentials/history-mode.html</a></li><li>插件 koa-static (公共文件共享)</li><li><a href="https://www.npmjs.com/package/connect-history-api-fallback" target="_blank" rel="noopener">node koa/express 插件connect-history-api-fallback</a>：<a href="https://www.npmjs.com/package/connect-history-api-fallback" target="_blank" rel="noopener">https://www.npmjs.com/package/connect-history-api-fallback</a></li></ul><h1 id="开始"><a href="#开始" class="headerlink" title="开始"></a>开始</h1><h3 id="一、配置前端路由"><a href="#一、配置前端路由" class="headerlink" title="一、配置前端路由"></a>一、配置前端路由</h3><ul><li>和正常的路由写法一致，只是改变mode路由模式就可以了<figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">let</span> router = <span class="keyword">new</span> Router(&#123;</span><br><span class="line">    mode: <span class="string">'history'</span>,<span class="comment">// 真路由，去除多余的#号</span></span><br><span class="line">    routes: [</span><br><span class="line">        ...Routers</span><br><span class="line">    ],</span><br><span class="line">    base: <span class="string">'/page/'</span> <span class="comment">// 给路由前端补page为了区分路由用的可以加可以不加</span></span><br><span class="line">&#125;)</span><br></pre></td></tr></table></figure></li></ul><h3 id="二、安装后端插件（koa项目中安装）"><a href="#二、安装后端插件（koa项目中安装）" class="headerlink" title="二、安装后端插件（koa项目中安装）"></a>二、安装后端插件（koa项目中安装）</h3><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">$ cnpm install --save connect-history-api-fallback</span><br></pre></td></tr></table></figure><h3 id="三、配置与引用"><a href="#三、配置与引用" class="headerlink" title="三、配置与引用"></a>三、配置与引用</h3><h4 id="1-在工具文件夹中建立一个插件文件-config-koa2-connect-history-api-fallback-js（这个名字自己起就可以了）"><a href="#1-在工具文件夹中建立一个插件文件-config-koa2-connect-history-api-fallback-js（这个名字自己起就可以了）" class="headerlink" title="1. 在工具文件夹中建立一个插件文件 /config/koa2-connect-history-api-fallback.js（这个名字自己起就可以了）"></a>1. 在工具文件夹中建立一个插件文件 /config/koa2-connect-history-api-fallback.js（这个名字自己起就可以了）</h4><ul><li>写入以下封装的代码<figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">const</span> history = <span class="built_in">require</span>(<span class="string">'connect-history-api-fallback'</span>);</span><br><span class="line"><span class="built_in">module</span>.exports = <span class="function"><span class="params">options</span> =&gt;</span> &#123;</span><br><span class="line">  <span class="keyword">const</span> middleware = history(options);</span><br><span class="line">  <span class="keyword">const</span> noop = <span class="function"><span class="params">()</span> =&gt;</span> &#123;</span><br><span class="line">  &#125;;</span><br><span class="line"></span><br><span class="line">  <span class="keyword">return</span> <span class="keyword">async</span> (ctx, next) =&gt; &#123;</span><br><span class="line">    middleware(ctx, <span class="literal">null</span>, noop);</span><br><span class="line">    <span class="keyword">await</span> next();</span><br><span class="line">  &#125;;</span><br><span class="line">&#125;;</span><br></pre></td></tr></table></figure></li></ul><h4 id="2-在app-js文件中引入此文件并调用"><a href="#2-在app-js文件中引入此文件并调用" class="headerlink" title="2. 在app.js文件中引入此文件并调用"></a>2. 在app.js文件中引入此文件并调用</h4><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">const</span> history = <span class="built_in">require</span>(<span class="string">'./config/koa2-connect-history-api-fallback'</span>);</span><br><span class="line"></span><br><span class="line"><span class="comment">// 这一段尽量放在最高，避免引起错误</span></span><br><span class="line">app.use(history(&#123;</span><br><span class="line">  verbose: <span class="literal">true</span><span class="comment">//打出转发日志</span></span><br><span class="line">&#125;));</span><br></pre></td></tr></table></figure><h3 id="三、配置公共路由-使用插件koa-static"><a href="#三、配置公共路由-使用插件koa-static" class="headerlink" title="三、配置公共路由(使用插件koa-static)"></a>三、配置公共路由(使用插件koa-static)</h3><ol><li><p>简单安装以下插件引入即可</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">$ cnpm i koa-static -S</span><br></pre></td></tr></table></figure></li><li><p>引入配置（app.js文件）</p></li></ol><ul><li>这里的意思是只要进入根路径自动导向/page，page为公共文件夹（打包的代码也放进去就可以了）<figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">app.use(<span class="built_in">require</span>(<span class="string">'koa-static'</span>)(__dirname + <span class="string">'/page'</span>))</span><br></pre></td></tr></table></figure></li></ul><h3 id="四、开启项目查看效果（vue-cli打包放在page文件夹里面，自己配置的那个公共文件夹就放哪里）"><a href="#四、开启项目查看效果（vue-cli打包放在page文件夹里面，自己配置的那个公共文件夹就放哪里）" class="headerlink" title="四、开启项目查看效果（vue-cli打包放在page文件夹里面，自己配置的那个公共文件夹就放哪里）"></a>四、开启项目查看效果（vue-cli打包放在page文件夹里面，自己配置的那个公共文件夹就放哪里）</h3><p><img src="/vue-cli/koa-hostory1.png" alt="hostory"></p><h3 id="五、简单的说一下express-，express根据不需要弄什么只是安装引入即可（看图就可以了）"><a href="#五、简单的说一下express-，express根据不需要弄什么只是安装引入即可（看图就可以了）" class="headerlink" title="五、简单的说一下express ，express根据不需要弄什么只是安装引入即可（看图就可以了）"></a>五、简单的说一下express ，express根据不需要弄什么只是安装引入即可（看图就可以了）</h3><ul><li>这个没有在路由色泽page所以就看不到page在前面（公路由的文件夹名字是会隐藏掉的）<br><img src="/vue-cli/express-hostory1.png" alt="hostory"></li></ul><h1 id="后记"><a href="#后记" class="headerlink" title="后记"></a>后记</h1><ul><li>每一个问题，都是一次成长，没解决一个问题经验也随之丰富，我的方法可能不是最好的但是能解决问题</li><li>如果你有更好的方法请告诉我谢谢</li><li><a href="https://yhf7.top/" target="_blank" rel="noopener">欢迎进入我的博客</a>：<a href="https://yhf7.github.io/" target="_blank" rel="noopener">https://yhf7.github.io/</a> 或 <a href="https://yhf7.top" target="_blank" rel="noopener">https://yhf7.top</a></li><li>如果有什么侵权的话，请及时添加小编微信以及 qq 也可以来告诉小编（905477376 微信 qq 通用），谢谢！</li></ul>]]></content>
      
      
      <categories>
          
          <category> 服务器 </category>
          
      </categories>
      
      
        <tags>
            
            <tag> 服务器 </tag>
            
        </tags>
      
    </entry>
    
    <entry>
      <title>React 评论功能案例</title>
      <link href="/2019/07/26/React%20%E8%AF%84%E8%AE%BA%E5%8A%9F%E8%83%BD%E6%A1%88%E4%BE%8B/"/>
      <url>/2019/07/26/React%20%E8%AF%84%E8%AE%BA%E5%8A%9F%E8%83%BD%E6%A1%88%E4%BE%8B/</url>
      
        <content type="html"><![CDATA[<link rel="stylesheet" class="aplayer-secondary-style-marker" href="/assets/css/APlayer.min.css"><script src="/assets/js/APlayer.min.js" class="aplayer-secondary-script-marker"></script><h1 id="前言"><a href="#前言" class="headerlink" title="前言"></a>前言</h1><ul><li>第二天学习React，看的是react小书朋友推荐的</li><li>感觉还不错，通过第一天的学习已经大概了解了react</li><li>react小书让我知道了更多的react的智商，生命周期等</li><li>所以跟着react小书做了这么一个评论功能的案例</li><li>三个部分都练完了，最后使用redux的时候会比较绕</li></ul><h1 id="工具-资料"><a href="#工具-资料" class="headerlink" title="工具/资料"></a>工具/资料</h1><ul><li>系统 mac Os 10.14.5</li><li>vs code 开发版</li><li>node v10.13.0</li><li>npm 6.10.1</li><li>yarn 1.13.0</li><li>webpack 4.36.1 (必须要4.26.9以上，不然无法开启react项目)</li><li>浏览器插件  React Devtools 查看react树结构</li><li>npm插件 prop-types 验证数据</li><li><a href="http://huziketang.mangojuice.top/books/react/lesson5" target="_blank" rel="noopener">React 小书</a></li><li><a href="https://gitee.com/yhf7/reactliuyanban" target="_blank" rel="noopener">代码地址：</a></li></ul><h1 id="重点"><a href="#重点" class="headerlink" title="重点"></a>重点</h1><ul><li>组件嵌套</li><li>state 和 setState</li><li>props 传值，map循环渲染</li><li>状态提升</li><li>生命周期函数</li><li>ref操作dom，控制输入焦点</li><li><p>props.children和容器(react的灵活之处)</p><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br></pre></td><td class="code"><pre><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">Card</span> <span class="keyword">extends</span> <span class="title">Component</span> </span>&#123;</span><br><span class="line">  render () &#123;</span><br><span class="line">    <span class="keyword">return</span> (</span><br><span class="line">      &lt;div className=<span class="string">'card'</span>&gt;</span><br><span class="line">        &lt;div className=<span class="string">'card-content'</span>&gt;</span><br><span class="line">          &#123;<span class="keyword">this</span>.props.content&#125;</span><br><span class="line">        &lt;<span class="regexp">/div&gt;</span></span><br><span class="line"><span class="regexp">      &lt;/</span>div&gt;</span><br><span class="line">    )</span><br><span class="line">  &#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line">ReactDOM.render(</span><br><span class="line">  &lt;Card content=&#123;</span><br><span class="line">    &lt;div&gt;</span><br><span class="line">      &lt;h2&gt;React.js 小书&lt;<span class="regexp">/h2&gt;</span></span><br><span class="line"><span class="regexp">       &lt;div&gt;开源、免费、专业、简单&lt;/</span>div&gt;</span><br><span class="line">      订阅：&lt;input /&gt;</span><br><span class="line">    &lt;<span class="regexp">/div&gt;</span></span><br><span class="line"><span class="regexp">  &#125; /</span>&gt;,</span><br><span class="line">  <span class="built_in">document</span>.getElementById(<span class="string">'root'</span>)</span><br><span class="line">)</span><br></pre></td></tr></table></figure></li><li><p>dangerouslySetHTML html属性框， style需要写成对象形式（对象命名驼峰命名法），例：font-size  react里 fontSize</p></li><li>propTypes 子接收属性验证插件</li><li>redux \ react-redux 使用起来还是有点绕需要点时间消化</li></ul><h1 id="功能"><a href="#功能" class="headerlink" title="功能"></a>功能</h1><h3 id="第一阶段"><a href="#第一阶段" class="headerlink" title="第一阶段"></a>第一阶段</h3><ul><li style="list-style: none"><input type="checkbox" checked> 用户，评论输入框</li><li style="list-style: none"><input type="checkbox" checked> 实现发布</li><li style="list-style: none"><input type="checkbox" checked> 实现内容列表</li></ul><h3 id="第二阶段"><a href="#第二阶段" class="headerlink" title="第二阶段"></a>第二阶段</h3><ul><li style="list-style: none"><input type="checkbox" checked> 页面加载完成自动聚焦到评论输入框。</li><li style="list-style: none"><input type="checkbox" checked> 把用户名持久化，存放到浏览器的 LocalStorage 中。页面加载时会把用户名加载出来显示到输入框，用户就不需要重新输入用户名了。</li><li style="list-style: none"><input type="checkbox" checked> 把已经发布的评论持久化，存放到浏览器的 LocalStorage 中。页面加载时会把已经保存的评论加载出来，显示到页面的评论列表上。</li><li style="list-style: none"><input type="checkbox" checked> 评论显示发布日期，如“1 秒前”，”30 分钟前”，并且会每隔 5 秒更新发布日期。</li><li style="list-style: none"><input type="checkbox" checked> 评论可以被删除。</li><li style="list-style: none"><input type="checkbox" checked> 类似 Markdown 的行内代码块显示功能，用户输入的用 <code></code> 包含起来的内容都会被处理成用 <code> 元素包含。例如输入 <code>console.log</code> 就会处理成 <code>console.log</code> 再显示到页面上。</code></li></ul><h3 id="第三阶段"><a href="#第三阶段" class="headerlink" title="第三阶段"></a>第三阶段</h3><ul><li style="list-style: none"><input type="checkbox" checked> 分开 reducers \ Dumb \ Smart</li><li>使用 Redux 和 react-redux 重构</li></ul><h1 id="插件使用-prop-types"><a href="#插件使用-prop-types" class="headerlink" title="插件使用 (prop-types)"></a>插件使用 (prop-types)</h1><ol><li><p>安装</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">$ sudo cnpm i prop-types -S</span><br></pre></td></tr></table></figure></li><li><p>使用</p><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">// 1. 引入</span></span><br><span class="line"><span class="keyword">import</span> PropTypes <span class="keyword">from</span> <span class="string">'prop-types'</span></span><br><span class="line"></span><br><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">Comment</span> <span class="keyword">extends</span> <span class="title">Component</span> </span>&#123;</span><br><span class="line">  <span class="comment">// 2. 定义propTypes 对象，需要验证的那些对象值即可</span></span><br><span class="line">  <span class="keyword">static</span> propTypes = &#123;</span><br><span class="line">      comment: PropTypes.object.isRequired,</span><br><span class="line">      onDeleteComment: PropTypes.func,</span><br><span class="line">      index: PropTypes.number</span><br><span class="line">    &#125;</span><br><span class="line">  render() &#123;</span><br><span class="line">    <span class="keyword">const</span> comment = <span class="keyword">this</span>.props.comment;</span><br><span class="line">    <span class="keyword">return</span> (</span><br><span class="line">      &lt;div&gt;<span class="xml"><span class="tag">&lt;/<span class="name">div</span>&gt;</span></span></span><br><span class="line">    )</span><br><span class="line">  &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure></li></ol><h1 id="效果图"><a href="#效果图" class="headerlink" title="效果图"></a>效果图</h1><p><img src="/React/comapp1.png" alt="git"></p><h1 id="后记"><a href="#后记" class="headerlink" title="后记"></a>后记</h1><ul><li>跟着react小书学react，感觉挺不错的学到了很多，了解了更多实用性知识</li><li><a href="https://yhf7.top/" target="_blank" rel="noopener">欢迎进入我的博客</a>：<a href="https://yhf7.github.io/" target="_blank" rel="noopener">https://yhf7.github.io/</a> 或 <a href="https://yhf7.top" target="_blank" rel="noopener">https://yhf7.top</a></li><li>如果有什么侵权的话，请及时添加小编微信以及 qq 也可以来告诉小编（905477376 微信 qq 通用），谢谢！</li></ul>]]></content>
      
      
      <categories>
          
          <category> React 案例 </category>
          
      </categories>
      
      
        <tags>
            
            <tag> React </tag>
            
        </tags>
      
    </entry>
    
    <entry>
      <title>第一个React</title>
      <link href="/2019/07/23/%E7%AC%AC%E4%B8%80%E4%B8%AAreact/"/>
      <url>/2019/07/23/%E7%AC%AC%E4%B8%80%E4%B8%AAreact/</url>
      
        <content type="html"><![CDATA[<link rel="stylesheet" class="aplayer-secondary-style-marker" href="/assets/css/APlayer.min.css"><script src="/assets/js/APlayer.min.js" class="aplayer-secondary-script-marker"></script><h1 id="前言"><a href="#前言" class="headerlink" title="前言"></a>前言</h1><ul><li>写完项目现在开始踏入React的学习</li><li>Vue写了好久了，想试试react</li><li>第一次写react给我的感觉是灵活，只要js好简直就是可以为所欲为</li></ul><h1 id="工具-资料"><a href="#工具-资料" class="headerlink" title="工具/资料"></a>工具/资料</h1><ul><li>系统 mac Os 10.14.5</li><li>vs code 开发版</li><li>node v10.13.0</li><li>npm 6.10.1</li><li>yarn 1.13.0</li><li>webpack 4.36.1 (必须要4.26.9以上，不然无法开启react项目)</li><li>浏览器插件  React Devtools 查看react树结构</li><li><a href="https://zh-hans.reactjs.org/tutorial/tutorial.html#making-an-interactive-component" target="_blank" rel="noopener">官方网址</a></li><li><a href="https://gitee.com/yhf7/ReactSanZiQi" target="_blank" rel="noopener">代码地址：</a></li></ul><h1 id="实现功能"><a href="#实现功能" class="headerlink" title="实现功能"></a>实现功能</h1><ul><li style="list-style: none"><input type="checkbox" checked> 父子传值</li><li style="list-style: none"><input type="checkbox" checked> 函数组件</li><li style="list-style: none"><input type="checkbox" checked> 轮流落子</li><li style="list-style: none"><input type="checkbox" checked> 判断胜负</li><li style="list-style: none"><input type="checkbox" checked> 历史记录</li><li style="list-style: none"><input type="checkbox" checked> 时间旅游<ul><li>拓展</li></ul></li><li style="list-style: none"><input type="checkbox" checked> 历史记录中显示每部步棋子的坐标，格式（列号，行号）</li><li style="list-style: none"><input type="checkbox" checked> 历史记录当前选择项目变红</li><li style="list-style: none"><input type="checkbox" checked> 循环渲染出棋盘中的格子</li><li style="list-style: none"><input type="checkbox" checked> 添加升序降序按钮</li><li style="list-style: none"><input type="checkbox" checked> 当有人获胜时获胜者三棋子变红高亮</li><li style="list-style: none"><input type="checkbox" checked> 无人获胜时显示平局</li></ul><h1 id="配置React环境-还有一个react-cli的"><a href="#配置React环境-还有一个react-cli的" class="headerlink" title="配置React环境 (还有一个react-cli的)"></a>配置React环境 (还有一个react-cli的)</h1><ul><li>配置安装node那些就不说了</li></ul><ol><li><p>安装react说一下</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">$ npm install -g create-react-app</span><br></pre></td></tr></table></figure></li><li><p>开启react项目</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">$ npx create-react-app my-app</span><br></pre></td></tr></table></figure></li></ol><p><img src="/React/r1.png" alt="react"></p><ol start="3"><li>启动项目<figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line">$ yarn start</span><br><span class="line">$ npm start</span><br><span class="line">$ cnpm start</span><br></pre></td></tr></table></figure></li></ol><p><img src="/React/r2.png" alt="react"></p><h1 id="跟着官网来写第一个React案例（9格3子棋，拓展代码这里没有想看拓展的去看源码）"><a href="#跟着官网来写第一个React案例（9格3子棋，拓展代码这里没有想看拓展的去看源码）" class="headerlink" title="跟着官网来写第一个React案例（9格3子棋，拓展代码这里没有想看拓展的去看源码）"></a>跟着官网来写第一个React案例（9格3子棋，拓展代码这里没有想看拓展的去看源码）</h1><ul><li>清空原来项目中的src里面的所有文件放入新的代码文件<h3 id="js"><a href="#js" class="headerlink" title="js"></a>js</h3><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br><span class="line">64</span><br><span class="line">65</span><br><span class="line">66</span><br><span class="line">67</span><br><span class="line">68</span><br><span class="line">69</span><br><span class="line">70</span><br><span class="line">71</span><br><span class="line">72</span><br><span class="line">73</span><br><span class="line">74</span><br><span class="line">75</span><br><span class="line">76</span><br><span class="line">77</span><br><span class="line">78</span><br><span class="line">79</span><br><span class="line">80</span><br><span class="line">81</span><br><span class="line">82</span><br><span class="line">83</span><br><span class="line">84</span><br><span class="line">85</span><br><span class="line">86</span><br><span class="line">87</span><br><span class="line">88</span><br><span class="line">89</span><br><span class="line">90</span><br><span class="line">91</span><br><span class="line">92</span><br><span class="line">93</span><br><span class="line">94</span><br><span class="line">95</span><br><span class="line">96</span><br><span class="line">97</span><br><span class="line">98</span><br><span class="line">99</span><br><span class="line">100</span><br><span class="line">101</span><br><span class="line">102</span><br><span class="line">103</span><br><span class="line">104</span><br><span class="line">105</span><br><span class="line">106</span><br><span class="line">107</span><br><span class="line">108</span><br><span class="line">109</span><br><span class="line">110</span><br><span class="line">111</span><br><span class="line">112</span><br><span class="line">113</span><br><span class="line">114</span><br><span class="line">115</span><br><span class="line">116</span><br><span class="line">117</span><br><span class="line">118</span><br><span class="line">119</span><br><span class="line">120</span><br><span class="line">121</span><br><span class="line">122</span><br><span class="line">123</span><br><span class="line">124</span><br><span class="line">125</span><br><span class="line">126</span><br><span class="line">127</span><br><span class="line">128</span><br><span class="line">129</span><br><span class="line">130</span><br><span class="line">131</span><br><span class="line">132</span><br><span class="line">133</span><br><span class="line">134</span><br><span class="line">135</span><br><span class="line">136</span><br><span class="line">137</span><br><span class="line">138</span><br><span class="line">139</span><br><span class="line">140</span><br><span class="line">141</span><br><span class="line">142</span><br><span class="line">143</span><br><span class="line">144</span><br><span class="line">145</span><br><span class="line">146</span><br><span class="line">147</span><br><span class="line">148</span><br><span class="line">149</span><br><span class="line">150</span><br><span class="line">151</span><br><span class="line">152</span><br><span class="line">153</span><br><span class="line">154</span><br><span class="line">155</span><br><span class="line">156</span><br><span class="line">157</span><br><span class="line">158</span><br><span class="line">159</span><br><span class="line">160</span><br><span class="line">161</span><br><span class="line">162</span><br><span class="line">163</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">import</span> React <span class="keyword">from</span> <span class="string">'react'</span>;</span><br><span class="line"><span class="keyword">import</span> ReactDOM <span class="keyword">from</span> <span class="string">'react-dom'</span>;</span><br><span class="line"><span class="keyword">import</span> <span class="string">'./index.css'</span>;</span><br><span class="line"></span><br><span class="line"><span class="comment">// 单个格子，函数</span></span><br><span class="line"><span class="function"><span class="keyword">function</span> <span class="title">Square</span>(<span class="params">props</span>) </span>&#123;</span><br><span class="line">  <span class="keyword">return</span> (</span><br><span class="line">    <span class="comment">/**接受输出 */</span></span><br><span class="line">    &lt;button className=<span class="string">"square"</span> onClick=&#123; props.onClick &#125;&gt;</span><br><span class="line">      &#123; props.value &#125;</span><br><span class="line">    &lt;<span class="regexp">/button&gt;</span></span><br><span class="line"><span class="regexp">  );</span></span><br><span class="line"><span class="regexp">&#125;</span></span><br><span class="line"><span class="regexp"></span></span><br><span class="line"><span class="regexp">/</span><span class="regexp">/ 格子父级类</span></span><br><span class="line"><span class="regexp">class Board extends React.Component &#123;</span></span><br><span class="line"><span class="regexp">  /</span><span class="regexp">/ 内部调用函数</span></span><br><span class="line"><span class="regexp">  renderSquare(i) &#123;</span></span><br><span class="line"><span class="regexp">    return ( /</span><span class="regexp">/ 返回单格子航速以及方法</span></span><br><span class="line"><span class="regexp">      /</span><span class="regexp">/ 接受父组件输出文字</span></span><br><span class="line"><span class="regexp">      &lt;Square</span></span><br><span class="line"><span class="regexp">        value=&#123; this.props.squares[i] &#125;</span></span><br><span class="line"><span class="regexp">        onClick=&#123; () =&gt; this.props.onClick(i) &#125;</span></span><br><span class="line"><span class="regexp">      /</span>&gt;</span><br><span class="line">    );</span><br><span class="line">  &#125;</span><br><span class="line">  <span class="comment">// 方法返回值，呈现于屏幕上的东西</span></span><br><span class="line">  render() &#123;</span><br><span class="line">    <span class="keyword">return</span> (</span><br><span class="line">      &lt;div&gt;</span><br><span class="line">        &lt;div className=<span class="string">"board-row"</span>&gt;</span><br><span class="line">          &#123; <span class="keyword">this</span>.renderSquare(<span class="number">0</span>) &#125;</span><br><span class="line">          &#123; <span class="keyword">this</span>.renderSquare(<span class="number">1</span>) &#125;</span><br><span class="line">          &#123; <span class="keyword">this</span>.renderSquare(<span class="number">2</span>) &#125;</span><br><span class="line">        &lt;<span class="regexp">/div&gt;</span></span><br><span class="line"><span class="regexp">        &lt;div className="board-row"&gt;</span></span><br><span class="line"><span class="regexp">          &#123; this.renderSquare(3) &#125;</span></span><br><span class="line"><span class="regexp">          &#123; this.renderSquare(4) &#125;</span></span><br><span class="line"><span class="regexp">          &#123; this.renderSquare(5) &#125;</span></span><br><span class="line"><span class="regexp">        &lt;/</span>div&gt;</span><br><span class="line">        &lt;div className=<span class="string">"board-row"</span>&gt;</span><br><span class="line">          &#123; <span class="keyword">this</span>.renderSquare(<span class="number">6</span>) &#125;·</span><br><span class="line">          &#123; <span class="keyword">this</span>.renderSquare(<span class="number">7</span>) &#125;</span><br><span class="line">          &#123; <span class="keyword">this</span>.renderSquare(<span class="number">8</span>) &#125;</span><br><span class="line">        &lt;<span class="regexp">/div&gt;</span></span><br><span class="line"><span class="regexp">      &lt;/</span>div&gt;</span><br><span class="line">    );</span><br><span class="line">  &#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="comment">// 最高父级类（react.component是子集的意思）</span></span><br><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">Game</span> <span class="keyword">extends</span> <span class="title">React</span>.<span class="title">Component</span> </span>&#123;</span><br><span class="line">  <span class="comment">// 构造函数</span></span><br><span class="line">  <span class="keyword">constructor</span>(props) &#123;</span><br><span class="line">    <span class="keyword">super</span>(props);</span><br><span class="line">    <span class="keyword">this</span>.state = &#123;</span><br><span class="line">      history: [</span><br><span class="line">        &#123;</span><br><span class="line">          squares: <span class="built_in">Array</span>(<span class="number">9</span>).fill(<span class="literal">null</span>)</span><br><span class="line">        &#125;</span><br><span class="line">      ],</span><br><span class="line">      stepNumber: <span class="number">0</span>,</span><br><span class="line">      xIsNext: <span class="literal">true</span></span><br><span class="line">    &#125;;</span><br><span class="line">  &#125;</span><br><span class="line"></span><br><span class="line">  <span class="comment">// 点击函数</span></span><br><span class="line">  handleClick(i) &#123;</span><br><span class="line">    <span class="comment">// 获取数据</span></span><br><span class="line">    <span class="keyword">const</span> history = <span class="keyword">this</span>.state.history.slice(<span class="number">0</span>, <span class="keyword">this</span>.state.stepNumber + <span class="number">1</span>);</span><br><span class="line">    <span class="keyword">const</span> current = history[history.length - <span class="number">1</span>];</span><br><span class="line">    <span class="keyword">const</span> squares = current.squares.slice();</span><br><span class="line">    <span class="keyword">if</span> (calculateWinner(squares) || squares[i]) &#123;</span><br><span class="line">      <span class="keyword">return</span>;</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="comment">// 角色判断</span></span><br><span class="line">    squares[i] = <span class="keyword">this</span>.state.xIsNext ? <span class="string">"X"</span> : <span class="string">"O"</span>;</span><br><span class="line">    <span class="keyword">this</span>.setState(&#123;</span><br><span class="line">      history: history.concat([</span><br><span class="line">        &#123;</span><br><span class="line">          squares: squares</span><br><span class="line">        &#125;</span><br><span class="line">      ]),</span><br><span class="line">      stepNumber: history.length,</span><br><span class="line">      xIsNext: !<span class="keyword">this</span>.state.xIsNext</span><br><span class="line">    &#125;);</span><br><span class="line">  &#125;</span><br><span class="line"></span><br><span class="line">  <span class="comment">// 数据变更函数</span></span><br><span class="line">  jumpTo(step) &#123;</span><br><span class="line">    <span class="keyword">this</span>.setState(&#123;</span><br><span class="line">      stepNumber: step,</span><br><span class="line">      xIsNext: (step % <span class="number">2</span>) === <span class="number">0</span></span><br><span class="line">    &#125;);</span><br><span class="line">  &#125;</span><br><span class="line"></span><br><span class="line">  render() &#123;</span><br><span class="line">    <span class="keyword">const</span> history = <span class="keyword">this</span>.state.history;</span><br><span class="line">    <span class="keyword">const</span> current = history[<span class="keyword">this</span>.state.stepNumber];</span><br><span class="line">    <span class="keyword">const</span> winner = calculateWinner(current.squares);</span><br><span class="line"></span><br><span class="line">    <span class="comment">// 时间记忆</span></span><br><span class="line">    <span class="keyword">const</span> moves = history.map(<span class="function">(<span class="params">step, move</span>) =&gt;</span> &#123;</span><br><span class="line">      <span class="keyword">const</span> desc = move ?</span><br><span class="line">        <span class="string">'Go to move #'</span> + move :</span><br><span class="line">        <span class="string">'Go to game start'</span>;</span><br><span class="line">      <span class="keyword">return</span> (</span><br><span class="line">        &lt;li key=&#123; move &#125;&gt;</span><br><span class="line">          &lt;button onClick=&#123; () =&gt; <span class="keyword">this</span>.jumpTo(move) &#125;&gt;&#123; desc &#125;&lt;<span class="regexp">/button&gt;</span></span><br><span class="line"><span class="regexp">        &lt;/</span>li&gt;</span><br><span class="line">      );</span><br><span class="line">    &#125;);</span><br><span class="line"></span><br><span class="line">    <span class="keyword">let</span> status;</span><br><span class="line">    <span class="comment">// 判断是否已有胜者，没有继续显示下一位</span></span><br><span class="line">    <span class="keyword">if</span> (winner) &#123;</span><br><span class="line">      status = <span class="string">"Winner: "</span> + winner;</span><br><span class="line">    &#125; <span class="keyword">else</span> &#123;</span><br><span class="line">      status = <span class="string">"Next player: "</span> + (<span class="keyword">this</span>.state.xIsNext ? <span class="string">"X"</span> : <span class="string">"O"</span>);</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="comment">// 调用board组件 传入数据 点击事件</span></span><br><span class="line">    <span class="keyword">return</span> (</span><br><span class="line">      &lt;div className=<span class="string">"game"</span>&gt;</span><br><span class="line">        &lt;div className=<span class="string">"game-board"</span>&gt;</span><br><span class="line">          &lt;Board</span><br><span class="line">            squares=&#123; current.squares &#125;</span><br><span class="line">            onClick=&#123; i =&gt; <span class="keyword">this</span>.handleClick(i) &#125;</span><br><span class="line">          /&gt;</span><br><span class="line">        &lt;<span class="regexp">/div&gt;</span></span><br><span class="line"><span class="regexp">        &lt;div className="game-info"&gt;</span></span><br><span class="line"><span class="regexp">          &lt;div&gt;&#123; status &#125;&lt;/</span>div&gt;</span><br><span class="line">          &lt;ol&gt;&#123; moves &#125;&lt;<span class="regexp">/ol&gt;</span></span><br><span class="line"><span class="regexp">        &lt;/</span>div&gt;</span><br><span class="line">      &lt;<span class="regexp">/div&gt;</span></span><br><span class="line"><span class="regexp">    );</span></span><br><span class="line"><span class="regexp">  &#125;</span></span><br><span class="line"><span class="regexp">&#125;</span></span><br><span class="line"><span class="regexp"></span></span><br><span class="line"><span class="regexp">/</span><span class="regexp">/ ========================================</span></span><br><span class="line"><span class="regexp"></span></span><br><span class="line"><span class="regexp">ReactDOM.render(&lt;Game /</span>&gt;, <span class="built_in">document</span>.getElementById(<span class="string">"root"</span>));</span><br><span class="line"></span><br><span class="line"><span class="comment">// 判断胜负</span></span><br><span class="line"><span class="function"><span class="keyword">function</span> <span class="title">calculateWinner</span>(<span class="params">squares</span>) </span>&#123;</span><br><span class="line">  <span class="keyword">const</span> lines = [</span><br><span class="line">    [<span class="number">0</span>, <span class="number">1</span>, <span class="number">2</span>],</span><br><span class="line">    [<span class="number">3</span>, <span class="number">4</span>, <span class="number">5</span>],</span><br><span class="line">    [<span class="number">6</span>, <span class="number">7</span>, <span class="number">8</span>],</span><br><span class="line">    [<span class="number">0</span>, <span class="number">3</span>, <span class="number">6</span>],</span><br><span class="line">    [<span class="number">1</span>, <span class="number">4</span>, <span class="number">7</span>],</span><br><span class="line">    [<span class="number">2</span>, <span class="number">5</span>, <span class="number">8</span>],</span><br><span class="line">    [<span class="number">0</span>, <span class="number">4</span>, <span class="number">8</span>],</span><br><span class="line">    [<span class="number">2</span>, <span class="number">4</span>, <span class="number">6</span>]</span><br><span class="line">  ];</span><br><span class="line">  <span class="keyword">for</span> (<span class="keyword">let</span> i = <span class="number">0</span>; i &lt; lines.length; i++) &#123;</span><br><span class="line">    <span class="keyword">const</span> [a, b, c] = lines[i];</span><br><span class="line">    <span class="keyword">if</span> (squares[a] &amp;&amp; squares[a] === squares[b] &amp;&amp; squares[a] === squares[c]) &#123;</span><br><span class="line">      <span class="keyword">return</span> squares[a];</span><br><span class="line">    &#125;</span><br><span class="line">  &#125;</span><br><span class="line">  <span class="keyword">return</span> <span class="literal">null</span>;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure></li></ul><h1 id="效果图"><a href="#效果图" class="headerlink" title="效果图"></a>效果图</h1><ul><li>原效果<br><img src="/React/r3.png" alt="react"></li><li>加入拓展后效果<br><img src="/React/r4.png" alt="react"></li></ul><h1 id="后记"><a href="#后记" class="headerlink" title="后记"></a>后记</h1><ul><li>跟着官网写的第一个react，感觉挺不错的学到了很多</li><li><a href="https://yhf7.top/" target="_blank" rel="noopener">欢迎进入我的博客</a>：<a href="https://yhf7.github.io/" target="_blank" rel="noopener">https://yhf7.github.io/</a> 或 <a href="https://yhf7.top" target="_blank" rel="noopener">https://yhf7.top</a></li><li>如果有什么侵权的话，请及时添加小编微信以及 qq 也可以来告诉小编（905477376 微信 qq 通用），谢谢！</li></ul>]]></content>
      
      
      <categories>
          
          <category> React 案例 </category>
          
      </categories>
      
      
        <tags>
            
            <tag> React </tag>
            
        </tags>
      
    </entry>
    
    <entry>
      <title>xcode git出错重装git</title>
      <link href="/2019/07/23/git%20xcode%E9%94%99%E8%AF%AF%E9%87%8D%E8%A3%85%E4%BF%AE%E5%A4%8D/"/>
      <url>/2019/07/23/git%20xcode%E9%94%99%E8%AF%AF%E9%87%8D%E8%A3%85%E4%BF%AE%E5%A4%8D/</url>
      
        <content type="html"><![CDATA[<link rel="stylesheet" class="aplayer-secondary-style-marker" href="/assets/css/APlayer.min.css"><script src="/assets/js/APlayer.min.js" class="aplayer-secondary-script-marker"></script><h1 id="前言"><a href="#前言" class="headerlink" title="前言"></a>前言</h1><ul><li>更改项目准备更新的时候发现无法git到状态报错</li><li>我以为是本地git有问题，git网上到的地址</li><li>但是发现还是报相同的错误问了一下大哥</li><li>发现是xcode和git的问题要重新安装</li></ul><h1 id="解决"><a href="#解决" class="headerlink" title="解决"></a>解决</h1><ul><li><p>重装xcode 更新 brew 重装git</p></li><li><p>报错图<br><img src="/git/err1.png" alt="git"></p></li></ul><ol><li><p>安装xcode-select –install（根目录安装,弹出框选择安装即可）</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">$ xcode-select --install</span><br></pre></td></tr></table></figure></li><li><p>更新 brew(需要等待一段时间)</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">$ brew update</span><br></pre></td></tr></table></figure></li></ol><p><img src="/git/err4.png" alt="git"></p><ol start="3"><li>重装git<figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">$ brew install git</span><br></pre></td></tr></table></figure></li></ol><p><img src="/git/err3.png" alt="git"></p><ol start="4"><li>查看是否可以继续使用<br><img src="/git/err2.png" alt="git"></li></ol><h1 id="后记"><a href="#后记" class="headerlink" title="后记"></a>后记</h1><ul><li>修复git就是如此简单粗暴</li><li><a href="https://yhf7.top/" target="_blank" rel="noopener">欢迎进入我的博客</a>：<a href="https://yhf7.github.io/" target="_blank" rel="noopener">https://yhf7.github.io/</a> 或 <a href="https://yhf7.top" target="_blank" rel="noopener">https://yhf7.top</a></li><li>如果有什么侵权的话，请及时添加小编微信以及 qq 也可以来告诉小编（905477376 微信 qq 通用），谢谢！</li></ul>]]></content>
      
      
      <categories>
          
          <category> Git </category>
          
      </categories>
      
      
        <tags>
            
            <tag> Git </tag>
            
        </tags>
      
    </entry>
    
    <entry>
      <title>如何在 hexo 搭建的博客中 显示自己的pdf简历</title>
      <link href="/2019/06/15/%E5%A6%82%E4%BD%95%E5%9C%A8%E5%8D%9A%E5%AE%A2%E6%BD%9C%E5%85%A5pdf/"/>
      <url>/2019/06/15/%E5%A6%82%E4%BD%95%E5%9C%A8%E5%8D%9A%E5%AE%A2%E6%BD%9C%E5%85%A5pdf/</url>
      
        <content type="html"><![CDATA[<link rel="stylesheet" class="aplayer-secondary-style-marker" href="/assets/css/APlayer.min.css"><script src="/assets/js/APlayer.min.js" class="aplayer-secondary-script-marker"></script><h1 id="前言"><a href="#前言" class="headerlink" title="前言"></a>前言</h1><ul><li>嗯其实我就是想把自己的简历放上来能让人看的</li><li>所以就上网查方法就发现了有个插件叫hexo-pdf</li><li>嗯真香这插件用的是真的方便</li></ul><h1 id="开始"><a href="#开始" class="headerlink" title="开始"></a>开始</h1><h3 id="1-安装插件"><a href="#1-安装插件" class="headerlink" title="1. 安装插件"></a>1. 安装插件</h3><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">$ sudo cnpm i hexo-pdf -S</span><br></pre></td></tr></table></figure><h3 id="2-直接使用"><a href="#2-直接使用" class="headerlink" title="2. 直接使用"></a>2. 直接使用</h3><ul><li>在md文件引入就好（如果是网上的pdf那就不需要放在本地）</li><li>本地的pdf需要写对路径<figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">&#123;% pdf \about\叶浩锋-一年半-web前端开发.pdf %&#125;</span><br></pre></td></tr></table></figure></li></ul><p><img src="/hexo/pdf1.png" alt="pdf"></p><h3 id="3-效果"><a href="#3-效果" class="headerlink" title="3. 效果"></a>3. 效果</h3><p><img src="/hexo/pdf2.png" alt="pdf"></p><h1 id="后记"><a href="#后记" class="headerlink" title="后记"></a>后记</h1><ul><li>添加pdf 就是这么简单快点试试吧</li><li><a href="https://yhf7.top/" target="_blank" rel="noopener">欢迎进入我的博客</a>：<a href="https://yhf7.github.io/" target="_blank" rel="noopener">https://yhf7.github.io/</a> 或 <a href="https://yhf7.top" target="_blank" rel="noopener">https://yhf7.top</a></li><li>如果有什么侵权的话，请及时添加小编微信以及 qq 也可以来告诉小编（905477376 微信 qq 通用），谢谢！</li></ul>]]></content>
      
      
      <categories>
          
          <category> Hexo </category>
          
      </categories>
      
      
        <tags>
            
            <tag> Hexo笔记 </tag>
            
        </tags>
      
    </entry>
    
    <entry>
      <title>利用 better-scroll 滚动插件实现，城市与A-Z侧边栏联动（左滑动右跟随，右点击左跟随）</title>
      <link href="/2019/06/12/%E5%88%A9%E7%94%A8better-scroll%E5%AE%9E%E7%8E%B0%E5%9F%8E%E5%B8%82%E5%AD%97%E6%AF%8D%E8%81%94%E5%8A%A8/"/>
      <url>/2019/06/12/%E5%88%A9%E7%94%A8better-scroll%E5%AE%9E%E7%8E%B0%E5%9F%8E%E5%B8%82%E5%AD%97%E6%AF%8D%E8%81%94%E5%8A%A8/</url>
      
        <content type="html"><![CDATA[<link rel="stylesheet" class="aplayer-secondary-style-marker" href="/assets/css/APlayer.min.css"><script src="/assets/js/APlayer.min.js" class="aplayer-secondary-script-marker"></script><h1 id="前言"><a href="#前言" class="headerlink" title="前言"></a>前言</h1><ul><li>最近没什么事做，用vue仿写elm</li><li>写完了城市定位选择页面，感觉其他好像都有字母侧边栏可以选择联动</li><li>我想嗯我也要弄一个城市联动的，然后就开始写</li><li>但是这个并不是一个简单的过程，因为一个小小的失误导致花费了很长的时间</li><li>搞了好久搞到烦，最后还是睡了一觉在梦里解决的</li></ul><h1 id="工具-资料"><a href="#工具-资料" class="headerlink" title="工具/资料"></a>工具/资料</h1><ul><li>系统 macOs 10.13.3</li><li>工具 vs code</li><li>开发语言 js vue</li><li>插件 better-scroll，<a href="https://www.npmjs.com/package/better-scroll" target="_blank" rel="noopener">插件地址</a></li><li>城市数据接口： <a href="http://yhf7.top:3000/api/v1/cities?type=group" target="_blank" rel="noopener">http://yhf7.top:3000/api/v1/cities?type=group</a></li></ul><h1 id="注意事项"><a href="#注意事项" class="headerlink" title="注意事项"></a>注意事项</h1><ol><li>axios是我自己封装的需要阅读清楚，使用自己封装的也是可以的，api请求里面的loadding我没有放出来</li><li>better-scroll我使用的是1.x的版本，也是1.x的写法，不知道2.x能不能套用没试过</li><li>固定好父级高度，不要让子撑开父，这样使得父级和子级高度一样无法获取x，y导致无法滚动（本人就是在这个问题弄了好久最后才发现的）</li><li>有时候第一次进入插件没有加载好需要刷新才能滚动的这个我也不知道着么破要是你解决的请告诉我</li><li>数据获取好才初始化结构</li></ol><h1 id="开始"><a href="#开始" class="headerlink" title="开始"></a>开始</h1><h3 id="1-获取数据（这里面的代码需要的可以私聊我发这里就不贴出来了）"><a href="#1-获取数据（这里面的代码需要的可以私聊我发这里就不贴出来了）" class="headerlink" title="1. 获取数据（这里面的代码需要的可以私聊我发这里就不贴出来了）"></a>1. 获取数据（这里面的代码需要的可以私聊我发这里就不贴出来了）</h3><ul><li>这里我vue里面使用的是axios封装的获取函数,我可以给你们看看和我配置的结构</li></ul><ol><li><p>安装axios、better-scroll</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">$ sudo cnpm i axios better-scroll  -S</span><br></pre></td></tr></table></figure></li><li><p>配置封装axios与接口<br><img src="/js/scroll1.png" alt=""></p></li><li>调用<br><img src="/js/scroll2.png" alt=""></li><li>查看数据效果<br><img src="/js/scroll3.png" alt=""></li></ol><h3 id="2-编写界面-（这里必须是要把需要滚动的父级高度限制小于需要滚动的高度）"><a href="#2-编写界面-（这里必须是要把需要滚动的父级高度限制小于需要滚动的高度）" class="headerlink" title="2. 编写界面 （这里必须是要把需要滚动的父级高度限制小于需要滚动的高度）"></a>2. 编写界面 （这里必须是要把需要滚动的父级高度限制小于需要滚动的高度）</h3><ul><li>拿到了数据当然是要把界面编辑处来的啦</li><li>由于我们是城市而且是所有的按照A-Z排序输出的</li><li>城市：使用一个ul包裹着li里面嵌套的是一个标题和城市的ul列表</li><li>侧边栏： 就是一个ul里面li循环所有城市的字母</li><li>ref: 为需要滚动的父级名称，自定义的用来获取元素用的</li></ul><ol><li><p>html</p><figure class="highlight html"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">&lt;!-- 所有城市 --&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">div</span> <span class="attr">class</span>=<span class="string">"group_city_container mr2"</span> <span class="attr">ref</span>=<span class="string">"foodsWrapper"</span>&gt;</span></span><br><span class="line">  <span class="tag">&lt;<span class="name">ul</span> <span class="attr">class</span>=<span class="string">"letter_classify"</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">li</span></span></span><br><span class="line"><span class="tag">      <span class="attr">v-for</span>=<span class="string">"(value,key,index) in sortgroupcity"</span></span></span><br><span class="line"><span class="tag">      <span class="attr">:key</span>=<span class="string">"key"</span></span></span><br><span class="line"><span class="tag">      <span class="attr">class</span>=<span class="string">"letter_classify_li food-list-hook"</span></span></span><br><span class="line"><span class="tag">    &gt;</span></span><br><span class="line">      <span class="tag">&lt;<span class="name">h4</span> <span class="attr">class</span>=<span class="string">"city_title"</span>&gt;</span></span><br><span class="line">        &#123;&#123;key&#125;&#125;</span><br><span class="line">        <span class="tag">&lt;<span class="name">span</span> <span class="attr">v-if</span>=<span class="string">"index == 0"</span>&gt;</span>（按字母排序可滚动）<span class="tag">&lt;/<span class="name">span</span>&gt;</span></span><br><span class="line">      <span class="tag">&lt;/<span class="name">h4</span>&gt;</span></span><br><span class="line">      <span class="tag">&lt;<span class="name">ul</span> <span class="attr">class</span>=<span class="string">"groupcity_name_container citylistul clear"</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">router-link</span></span></span><br><span class="line"><span class="tag">          <span class="attr">tag</span>=<span class="string">"li"</span></span></span><br><span class="line"><span class="tag">          <span class="attr">v-for</span>=<span class="string">"item in value"</span></span></span><br><span class="line"><span class="tag">          <span class="attr">:to</span>=<span class="string">"'/city/' + item.id"</span></span></span><br><span class="line"><span class="tag">          <span class="attr">:key</span>=<span class="string">"item.id"</span></span></span><br><span class="line"><span class="tag">          <span class="attr">class</span>=<span class="string">"ellipsis"</span></span></span><br><span class="line"><span class="tag">        &gt;</span>&#123;&#123;item.name&#125;&#125;<span class="tag">&lt;/<span class="name">router-link</span>&gt;</span></span><br><span class="line">      <span class="tag">&lt;/<span class="name">ul</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;/<span class="name">li</span>&gt;</span></span><br><span class="line">  <span class="tag">&lt;/<span class="name">ul</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">div</span>&gt;</span></span><br><span class="line"><span class="comment">&lt;!-- A-Z右边框列表 --&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">div</span> <span class="attr">class</span>=<span class="string">"alphabet"</span> <span class="attr">ref</span>=<span class="string">"menuWrapper"</span>&gt;</span></span><br><span class="line">  <span class="tag">&lt;<span class="name">ul</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">li</span></span></span><br><span class="line"><span class="tag">      <span class="attr">class</span>=<span class="string">"item"</span></span></span><br><span class="line"><span class="tag">      <span class="attr">v-for</span>=<span class="string">"(item,i) in letters"</span></span></span><br><span class="line"><span class="tag">      <span class="attr">:key</span>=<span class="string">"i"</span></span></span><br><span class="line"><span class="tag">      <span class="attr">:class</span>=<span class="string">"&#123;'current':currentIndex === i&#125;"</span></span></span><br><span class="line"><span class="tag">      @<span class="attr">click</span>=<span class="string">"selectMenu(i)"</span></span></span><br><span class="line"><span class="tag">    &gt;</span>&#123;&#123;item&#125;&#125;<span class="tag">&lt;/<span class="name">li</span>&gt;</span></span><br><span class="line">  <span class="tag">&lt;/<span class="name">ul</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">div</span>&gt;</span></span><br></pre></td></tr></table></figure></li><li><p>scss</p><figure class="highlight scss"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br><span class="line">64</span><br><span class="line">65</span><br><span class="line">66</span><br><span class="line">67</span><br><span class="line">68</span><br></pre></td><td class="code"><pre><span class="line"><span class="selector-class">.city_title</span> &#123;</span><br><span class="line">  <span class="attribute">color</span>: <span class="number">#666</span>;</span><br><span class="line">  <span class="attribute">font-weight</span>: <span class="number">400</span>;</span><br><span class="line">  <span class="attribute">text-indent</span>: <span class="number">0.45rem</span>;</span><br><span class="line">  <span class="attribute">border</span>: <span class="number">2px</span> solid <span class="variable">$bc</span>;</span><br><span class="line">  <span class="attribute">border-width</span>: <span class="number">2px</span> <span class="number">0</span> <span class="number">1px</span> <span class="number">0</span>;</span><br><span class="line">  @<span class="keyword">include</span> font(<span class="number">0.55rem</span>, 1.45rem, <span class="string">"Helvetica Neue"</span>);</span><br><span class="line">  <span class="selector-tag">span</span> &#123;</span><br><span class="line">    @<span class="keyword">include</span> sc(<span class="number">0.475rem</span>, <span class="number">#999</span>);</span><br><span class="line">  &#125;</span><br><span class="line">&#125;</span><br><span class="line"><span class="selector-class">.citylistul</span> &#123;</span><br><span class="line">  <span class="selector-tag">li</span> &#123;</span><br><span class="line">    <span class="attribute">float</span>: left;</span><br><span class="line">    <span class="attribute">text-align</span>: center;</span><br><span class="line">    <span class="attribute">color</span>: <span class="variable">$blue</span>;</span><br><span class="line">    <span class="attribute">border</span>: <span class="number">2px</span> solid <span class="variable">$bc</span>;</span><br><span class="line">    <span class="attribute">border-width</span>: <span class="number">0</span> <span class="number">1px</span> <span class="number">1px</span> <span class="number">0</span>;</span><br><span class="line">    @<span class="keyword">include</span> wh(<span class="number">25%</span>, 1.75rem);</span><br><span class="line">    @<span class="keyword">include</span> font(<span class="number">0.6rem</span>, 1.75rem);</span><br><span class="line">  &#125;</span><br><span class="line">  <span class="selector-tag">li</span>:nth-of-type(4n) &#123;</span><br><span class="line">    <span class="attribute">border-right</span>: none;</span><br><span class="line">  &#125;</span><br><span class="line">&#125;</span><br><span class="line"><span class="selector-class">.letter_classify_li</span> &#123;</span><br><span class="line">  <span class="attribute">margin-bottom</span>: <span class="number">0.4rem</span>;</span><br><span class="line">  <span class="attribute">background-color</span>: <span class="number">#fff</span>;</span><br><span class="line">  <span class="attribute">border-bottom</span>: <span class="number">1px</span> solid <span class="variable">$bc</span>;</span><br><span class="line">  <span class="selector-class">.groupcity_name_container</span> &#123;</span><br><span class="line">    <span class="selector-tag">li</span> &#123;</span><br><span class="line">      <span class="attribute">color</span>: <span class="number">#666</span>;</span><br><span class="line">    &#125;</span><br><span class="line">  &#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="comment">// 所有城市</span></span><br><span class="line"><span class="selector-class">.group_city_container</span> &#123;</span><br><span class="line">  <span class="attribute">height</span>: <span class="number">23.1rem</span>;</span><br><span class="line">  <span class="attribute">overflow</span>: hidden;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="comment">// A-z</span></span><br><span class="line"><span class="selector-class">.alphabet</span> &#123;</span><br><span class="line">  <span class="attribute">display</span>: flex;</span><br><span class="line">  <span class="attribute">justify-content</span>: center;</span><br><span class="line">  <span class="attribute">align-items</span>: center;</span><br><span class="line">  <span class="attribute">position</span>: fixed;</span><br><span class="line">  <span class="attribute">top</span>: <span class="number">40px</span>;</span><br><span class="line">  <span class="attribute">width</span>: <span class="number">20px</span>;</span><br><span class="line">  <span class="attribute">right</span>: <span class="number">0</span>;</span><br><span class="line">  <span class="attribute">bottom</span>: <span class="number">0</span>;</span><br><span class="line">  <span class="attribute">background</span>: <span class="number">#a5dff9</span>;</span><br><span class="line">  <span class="attribute">z-index</span>: <span class="number">1</span>;</span><br><span class="line">  <span class="selector-class">.item</span> &#123;</span><br><span class="line">    <span class="attribute">text-align</span>: center;</span><br><span class="line">    <span class="attribute">line-height</span>: <span class="number">20px</span>;</span><br><span class="line">    <span class="attribute">font-size</span>: <span class="number">12px</span>;</span><br><span class="line">  &#125;</span><br><span class="line">  <span class="selector-class">.current</span> &#123;</span><br><span class="line">    <span class="attribute">color</span>: red;</span><br><span class="line">  &#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="comment">// 公共右margin 20</span></span><br><span class="line"><span class="selector-class">.mr2</span> &#123;</span><br><span class="line">  <span class="attribute">margin-right</span>: <span class="number">20px</span>;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure></li></ol><h3 id="3-相关的js代码-配置滚动"><a href="#3-相关的js代码-配置滚动" class="headerlink" title="3. 相关的js代码,配置滚动"></a>3. 相关的js代码,配置滚动</h3><ul><li>获取添加所有的城市的字母</li><li>将获取的数据按照A-Z字母开头排序</li><li>配置插件<figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br><span class="line">64</span><br><span class="line">65</span><br><span class="line">66</span><br><span class="line">67</span><br><span class="line">68</span><br><span class="line">69</span><br><span class="line">70</span><br><span class="line">71</span><br><span class="line">72</span><br><span class="line">73</span><br><span class="line">74</span><br><span class="line">75</span><br><span class="line">76</span><br><span class="line">77</span><br><span class="line">78</span><br><span class="line">79</span><br><span class="line">80</span><br><span class="line">81</span><br><span class="line">82</span><br><span class="line">83</span><br><span class="line">84</span><br><span class="line">85</span><br><span class="line">86</span><br><span class="line">87</span><br><span class="line">88</span><br><span class="line">89</span><br><span class="line">90</span><br><span class="line">91</span><br><span class="line">92</span><br><span class="line">93</span><br><span class="line">94</span><br><span class="line">95</span><br><span class="line">96</span><br><span class="line">97</span><br><span class="line">98</span><br><span class="line">99</span><br><span class="line">100</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">// 引入插件</span></span><br><span class="line"><span class="keyword">import</span> BScroll <span class="keyword">from</span> <span class="string">"better-scroll"</span>;</span><br><span class="line"><span class="keyword">import</span> API <span class="keyword">from</span> <span class="string">"@/api/"</span>;</span><br><span class="line"><span class="keyword">export</span> <span class="keyword">default</span> &#123;</span><br><span class="line">  data() &#123;</span><br><span class="line">    <span class="keyword">return</span> &#123;</span><br><span class="line">      groupcity: &#123;&#125;, <span class="comment">// 所有城市列表</span></span><br><span class="line">      scrolly: <span class="number">0</span>, <span class="comment">// 记录滑动位置</span></span><br><span class="line">      listHeight: [], <span class="comment">// 存储滑动高度总表</span></span><br><span class="line">      letters: [] <span class="comment">// 记录所有城市的字母（右边框）</span></span><br><span class="line">    &#125;;</span><br><span class="line">  &#125;,</span><br><span class="line">  mounted() &#123;</span><br><span class="line">    <span class="comment">// 获取所有城市的数据</span></span><br><span class="line">    API.cityGroup().then(<span class="function"><span class="params">res</span> =&gt;</span> &#123;</span><br><span class="line">      <span class="keyword">this</span>.groupcity = res;</span><br><span class="line">      <span class="comment">// 获取数据后开启滚动</span></span><br><span class="line">      <span class="keyword">this</span>.$nextTick(<span class="function"><span class="params">()</span> =&gt;</span> &#123;</span><br><span class="line">        <span class="keyword">this</span>._initScroll();</span><br><span class="line">        <span class="keyword">this</span>._calculateHeight();</span><br><span class="line">      &#125;);</span><br><span class="line">    &#125;);</span><br><span class="line">  &#125;</span><br><span class="line">  computed: &#123;</span><br><span class="line">    <span class="comment">//将获取的数据按照A-Z字母开头排序</span></span><br><span class="line">    sortgroupcity() &#123;</span><br><span class="line">      <span class="keyword">let</span> sortobj = &#123;&#125;;</span><br><span class="line">      <span class="keyword">var</span> letters = [];</span><br><span class="line">      <span class="keyword">for</span> (<span class="keyword">let</span> i = <span class="number">65</span>; i &lt;= <span class="number">90</span>; i++) &#123;</span><br><span class="line">        <span class="keyword">if</span> (<span class="keyword">this</span>.groupcity[<span class="built_in">String</span>.fromCharCode(i)]) &#123;</span><br><span class="line">          sortobj[<span class="built_in">String</span>.fromCharCode(i)] = <span class="keyword">this</span>.groupcity[</span><br><span class="line">            <span class="built_in">String</span>.fromCharCode(i)</span><br><span class="line">          ];</span><br><span class="line">          <span class="comment">// 添加城市字母</span></span><br><span class="line">          letters.push(<span class="built_in">String</span>.fromCharCode(i));</span><br><span class="line">        &#125;</span><br><span class="line">      &#125;</span><br><span class="line">      <span class="comment">// 动态设置到data</span></span><br><span class="line">      <span class="keyword">this</span>.$set(<span class="keyword">this</span>, <span class="string">"letters"</span>, letters);</span><br><span class="line">      <span class="comment">// 返回排序好的城市数据</span></span><br><span class="line">      <span class="keyword">return</span> sortobj;</span><br><span class="line">    &#125;,</span><br><span class="line">    <span class="comment">// 监听滚动改变选中的侧边栏位置</span></span><br><span class="line">    currentIndex() &#123;</span><br><span class="line">      <span class="keyword">for</span> (<span class="keyword">let</span> i = <span class="number">0</span>; i &lt; <span class="keyword">this</span>.listHeight.length; i++) &#123;</span><br><span class="line">        <span class="keyword">const</span> height1 = <span class="keyword">this</span>.listHeight[i];</span><br><span class="line">        <span class="keyword">const</span> height2 = <span class="keyword">this</span>.listHeight[i + <span class="number">1</span>];</span><br><span class="line"></span><br><span class="line">        <span class="keyword">if</span> (!height2 || (<span class="keyword">this</span>.scrolly &gt;= height1 &amp;&amp; <span class="keyword">this</span>.scrolly &lt; height2)) &#123;</span><br><span class="line">          <span class="keyword">return</span> i;</span><br><span class="line">        &#125;</span><br><span class="line">      &#125;</span><br><span class="line">      <span class="keyword">return</span> <span class="number">0</span>;</span><br><span class="line">    &#125;</span><br><span class="line">  &#125;,</span><br><span class="line">  methods: &#123;</span><br><span class="line">    <span class="comment">/**</span></span><br><span class="line"><span class="comment">     * 点击侧边栏改变左侧移动位置</span></span><br><span class="line"><span class="comment">     * @param 当前选中的字母位置</span></span><br><span class="line"><span class="comment">     * */</span></span><br><span class="line">    selectMenu(i) &#123;</span><br><span class="line">      <span class="comment">// 获取左侧城市li</span></span><br><span class="line">      <span class="keyword">let</span> foodList = <span class="keyword">this</span>.$refs.foodsWrapper.getElementsByClassName(</span><br><span class="line">        <span class="string">"food-list-hook"</span></span><br><span class="line">      );</span><br><span class="line">      <span class="comment">// 选取相应的位置</span></span><br><span class="line">      <span class="keyword">let</span> el = foodList[i];</span><br><span class="line">      <span class="comment">// 滚动到当前</span></span><br><span class="line">      <span class="keyword">this</span>.foodsScroll.scrollToElement(el, <span class="number">300</span>);</span><br><span class="line">    &#125;,</span><br><span class="line">    <span class="comment">// 初始化滚动</span></span><br><span class="line">    _initScroll() &#123;</span><br><span class="line">      <span class="keyword">this</span>.meunScroll = <span class="keyword">new</span> BScroll(<span class="keyword">this</span>.$refs.menuWrapper, &#123; <span class="attr">click</span>: <span class="literal">true</span> &#125;);</span><br><span class="line">      <span class="keyword">this</span>.foodsScroll = <span class="keyword">new</span> BScroll(<span class="keyword">this</span>.$refs.foodsWrapper, &#123;</span><br><span class="line">        click: <span class="literal">true</span>,</span><br><span class="line">        probeType: <span class="number">3</span></span><br><span class="line">      &#125;);</span><br><span class="line"></span><br><span class="line">      <span class="keyword">this</span>.foodsScroll.on(<span class="string">"scroll"</span>, pos =&gt; &#123;</span><br><span class="line">        <span class="built_in">console</span>.log(<span class="keyword">this</span>.foodsScroll);</span><br><span class="line">        <span class="keyword">this</span>.scrolly = <span class="built_in">Math</span>.abs(<span class="built_in">Math</span>.round(pos.y));</span><br><span class="line">      &#125;);</span><br><span class="line">    &#125;,</span><br><span class="line">    <span class="comment">// 记录所有滚动的高度数据</span></span><br><span class="line">    _calculateHeight() &#123;</span><br><span class="line">      <span class="keyword">let</span> foodList = <span class="keyword">this</span>.$refs.foodsWrapper.getElementsByClassName(</span><br><span class="line">        <span class="string">"food-list-hook"</span></span><br><span class="line">      );</span><br><span class="line"></span><br><span class="line">      <span class="keyword">let</span> height = <span class="number">0</span>;</span><br><span class="line">      <span class="keyword">this</span>.listHeight.push(height);</span><br><span class="line"></span><br><span class="line">      <span class="keyword">for</span> (<span class="keyword">let</span> i = <span class="number">0</span>; i &lt; foodList.length; i++) &#123;</span><br><span class="line">        <span class="keyword">const</span> item = foodList[i];</span><br><span class="line">        height += item.clientHeight;</span><br><span class="line">        <span class="keyword">this</span>.listHeight.push(height);</span><br><span class="line">      &#125;</span><br><span class="line">    &#125;</span><br><span class="line">  &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure></li></ul><h3 id="4-查验是否配置成功（把项目跑起来）"><a href="#4-查验是否配置成功（把项目跑起来）" class="headerlink" title="4. 查验是否配置成功（把项目跑起来）"></a>4. 查验是否配置成功（把项目跑起来）</h3><ol><li>查验是否挂载了滚动<br><img src="/js/scroll4.png" alt=""></li><li>检查bs参数<br><img src="/js/scroll5.png" alt=""></li></ol><h1 id="后记"><a href="#后记" class="headerlink" title="后记"></a>后记</h1><ul><li>vue 左右滚动联动，就说到这了还有其他的问题欢迎添加好友详聊</li><li><a href="https://yhf7.top/" target="_blank" rel="noopener">欢迎进入我的博客</a>：<a href="https://yhf7.github.io/" target="_blank" rel="noopener">https://yhf7.github.io/</a> 或 <a href="https://yhf7.top" target="_blank" rel="noopener">https://yhf7.top</a></li><li>如果有什么侵权的话，请及时添加小编微信以及 qq 也可以来告诉小编（905477376 微信 qq 通用），谢谢！</li></ul>]]></content>
      
      
      <categories>
          
          <category> Vue </category>
          
      </categories>
      
      
        <tags>
            
            <tag> Vue 案例 </tag>
            
        </tags>
      
    </entry>
    
    <entry>
      <title>vue-cli3 使用svg 方法</title>
      <link href="/2019/06/09/vue-cli3%E4%BD%BF%E7%94%A8svg/"/>
      <url>/2019/06/09/vue-cli3%E4%BD%BF%E7%94%A8svg/</url>
      
        <content type="html"><![CDATA[<link rel="stylesheet" class="aplayer-secondary-style-marker" href="/assets/css/APlayer.min.css"><script src="/assets/js/APlayer.min.js" class="aplayer-secondary-script-marker"></script><h1 id="前言"><a href="#前言" class="headerlink" title="前言"></a>前言</h1><ul><li>写项目遇到使用 svg 很久之前在 html 上用过</li><li>在 vue 上使用还是第一次弄了好久，最后找到了两种方法</li><li>第一种是官网上的还有一直是基于 webpack 的</li><li>svg 好处还是很多的,可随意变更图片颜色</li><li>第二种方法封装了使得用起来更加的方便,不过配置的时候稍微有一点点麻烦</li></ul><h1 id="工具-资料"><a href="#工具-资料" class="headerlink" title="工具/资料"></a>工具/资料</h1><ul><li>系统 macOs 10.13.3</li><li>开发工具 vs code</li><li>文档 npmjs.com</li><li><a href="https://www.iconfont.cn/" target="_blank" rel="noopener">svg</a>: <a href="https://www.iconfont.cn/" target="_blank" rel="noopener">https://www.iconfont.cn/</a></li><li>vue-cli3 项目</li><li>webpack 4.0 以上</li><li>npm cnpm yarn 其中一种</li><li>第一方法插件 vue-svg-loader vue-template-compiler</li><li>第二方法插件 svg-sprite-loader</li></ul><h1 id="开始"><a href="#开始" class="headerlink" title="开始"></a>开始</h1><h3 id="1-第一种方法官网默认（vue-svg-loader）"><a href="#1-第一种方法官网默认（vue-svg-loader）" class="headerlink" title="1. 第一种方法官网默认（vue-svg-loader）"></a>1. 第一种方法官网默认（vue-svg-loader）</h3><ol><li>安装插件（sudo 非苹果系统不需要加）</li></ol><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">$ sudo cnpm i -D vue-svg-loader vue-template-compiler</span><br></pre></td></tr></table></figure><ol start="2"><li>配置 webpack（vue.config.js）</li></ol><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br></pre></td><td class="code"><pre><span class="line"><span class="built_in">module</span>.exports = &#123;</span><br><span class="line">  chainWebpack: <span class="function">(<span class="params">config</span>) =&gt;</span> &#123;</span><br><span class="line">        <span class="keyword">const</span> svgRule = config.module.rule(<span class="string">'svg'</span>);</span><br><span class="line"></span><br><span class="line">        svgRule.uses.clear();</span><br><span class="line"></span><br><span class="line">        svgRule</span><br><span class="line">            .use(<span class="string">'vue-svg-loader'</span>)</span><br><span class="line">            .loader(<span class="string">'vue-svg-loader'</span>);</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p><img src="/Vue/svg1.png" alt="svg"></p><ol start="3"><li>引入 svg 使用(和用组件一样)</li></ol><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br></pre></td><td class="code"><pre><span class="line">&lt;template&gt;</span><br><span class="line">  &lt;div&gt;</span><br><span class="line">    &lt;test /&gt;</span><br><span class="line">  &lt;<span class="regexp">/div&gt;</span></span><br><span class="line"><span class="regexp">&lt;/</span>template&gt;</span><br><span class="line"></span><br><span class="line">&lt;script&gt;</span><br><span class="line"><span class="keyword">import</span> test <span class="keyword">from</span> <span class="string">'../../assets/icons/rightArrow.svg'</span></span><br><span class="line">components: &#123;</span><br><span class="line">    test</span><br><span class="line">  &#125;</span><br><span class="line">&lt;<span class="regexp">/script&gt;</span></span><br><span class="line"><span class="regexp"></span></span><br><span class="line"><span class="regexp">&lt;style lang="scss" scoped&gt;</span></span><br><span class="line"><span class="regexp">.arrow_right &#123;</span></span><br><span class="line"><span class="regexp">  @include wh(0.6rem, 0.6rem);</span></span><br><span class="line"><span class="regexp">  path &#123; /</span><span class="regexp">/ 在path改变颜色，通过fill属性</span></span><br><span class="line"><span class="regexp">    fill: red;</span></span><br><span class="line"><span class="regexp">  &#125;</span></span><br><span class="line"><span class="regexp">&#125;</span></span><br><span class="line"><span class="regexp">&lt;/</span>style&gt;</span><br></pre></td></tr></table></figure><p><img src="/Vue/svg2.png" alt="svg"></p><ol start="4"><li>查看效果（这里我写了 css 的）<br><img src="/Vue/svg3.png" alt="svg"></li></ol><h3 id="2-第二种方法在网上找到的别人封装了的（svg-sprite-loader）"><a href="#2-第二种方法在网上找到的别人封装了的（svg-sprite-loader）" class="headerlink" title="2. 第二种方法在网上找到的别人封装了的（svg-sprite-loader）"></a>2. 第二种方法在网上找到的别人封装了的（svg-sprite-loader）</h3><ol><li>安装插件</li></ol><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">$ sudo cnpm i svg-sprite-loader -S</span><br></pre></td></tr></table></figure><ol start="2"><li>配置 vue.config.js</li></ol><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">const</span> path = <span class="built_in">require</span>(<span class="string">"path"</span>);</span><br><span class="line"><span class="function"><span class="keyword">function</span> <span class="title">resolve</span>(<span class="params">dir</span>) </span>&#123;</span><br><span class="line">  <span class="keyword">return</span> path.join(__dirname, dir);</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="built_in">module</span>.exports = &#123;</span><br><span class="line">  chainWebpack(config) &#123;</span><br><span class="line">    config.module</span><br><span class="line">      .rule(<span class="string">"svg"</span>)</span><br><span class="line">      .exclude.add(resolve(<span class="string">"src/assets/icons"</span>)) <span class="comment">// icons存放地（svg放的地方）</span></span><br><span class="line">      .end();</span><br><span class="line">    config.module</span><br><span class="line">      .rule(<span class="string">"icons"</span>)</span><br><span class="line">      .test(<span class="regexp">/\.svg$/</span>)</span><br><span class="line">      .include.add(resolve(<span class="string">"src/assets/icons"</span>)) <span class="comment">// icons存放地（svg放的地方）</span></span><br><span class="line">      .end()</span><br><span class="line">      .use(<span class="string">"svg-sprite-loader"</span>)</span><br><span class="line">      .loader(<span class="string">"svg-sprite-loader"</span>)</span><br><span class="line">      .options(&#123;</span><br><span class="line">        symbolId: <span class="string">"icon-[name]"</span></span><br><span class="line">      &#125;)</span><br><span class="line">      .end();</span><br><span class="line">  &#125;</span><br><span class="line">&#125;;</span><br></pre></td></tr></table></figure><ol start="3"><li>配置封装 svg 组件</li></ol><ul><li>在 components 创建组件 （/SvgIcon/index.vue）</li></ul><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br></pre></td><td class="code"><pre><span class="line">&lt;template&gt;</span><br><span class="line">  &lt;svg v-<span class="keyword">else</span> :<span class="class"><span class="keyword">class</span></span>=<span class="string">"svgClass"</span> aria-hidden=<span class="string">"true"</span> v-on=<span class="string">"$listeners"</span>&gt;</span><br><span class="line">    &lt;use :xlink:href=<span class="string">"iconName"</span> /&gt;</span><br><span class="line">  &lt;<span class="regexp">/svg&gt;</span></span><br><span class="line"><span class="regexp">&lt;/</span>template&gt;</span><br><span class="line"></span><br><span class="line">&lt;script&gt;</span><br><span class="line"></span><br><span class="line"><span class="keyword">export</span> <span class="keyword">default</span> &#123;</span><br><span class="line">  name: <span class="string">'SvgIcon'</span>,</span><br><span class="line">  props: &#123;</span><br><span class="line">    iconClass: &#123;</span><br><span class="line">      type: <span class="built_in">String</span>,</span><br><span class="line">      required: <span class="literal">true</span></span><br><span class="line">    &#125;,</span><br><span class="line">    className: &#123;</span><br><span class="line">      type: <span class="built_in">String</span>,</span><br><span class="line">      <span class="keyword">default</span>: <span class="string">''</span></span><br><span class="line">    &#125;</span><br><span class="line">  &#125;,</span><br><span class="line">  computed: &#123;</span><br><span class="line">    iconName() &#123;</span><br><span class="line">      <span class="keyword">return</span> <span class="string">`#icon-<span class="subst">$&#123;<span class="keyword">this</span>.iconClass&#125;</span>`</span></span><br><span class="line">    &#125;,</span><br><span class="line">    svgClass() &#123;</span><br><span class="line">      <span class="keyword">if</span> (<span class="keyword">this</span>.className) &#123;</span><br><span class="line">        <span class="keyword">return</span> <span class="string">'svg-icon '</span> + <span class="keyword">this</span>.className</span><br><span class="line">      &#125; <span class="keyword">else</span> &#123;</span><br><span class="line">        <span class="keyword">return</span> <span class="string">'svg-icon'</span></span><br><span class="line">      &#125;</span><br><span class="line">    &#125;,</span><br><span class="line">    styleExternalIcon() &#123;</span><br><span class="line">      <span class="keyword">return</span> &#123;</span><br><span class="line">        mask: <span class="string">`url(<span class="subst">$&#123;<span class="keyword">this</span>.iconClass&#125;</span>) no-repeat 50% 50%`</span>,</span><br><span class="line">        <span class="string">'-webkit-mask'</span>: <span class="string">`url(<span class="subst">$&#123;<span class="keyword">this</span>.iconClass&#125;</span>) no-repeat 50% 50%`</span></span><br><span class="line">      &#125;</span><br><span class="line">    &#125;</span><br><span class="line">  &#125;</span><br><span class="line">&#125;</span><br><span class="line">&lt;<span class="regexp">/script&gt;</span></span><br></pre></td></tr></table></figure><ol start="4"><li>配置引入组件（icons 目录下建立 index.js 文件）</li></ol><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">import</span> Vue <span class="keyword">from</span> <span class="string">"vue"</span>;</span><br><span class="line"><span class="keyword">import</span> SvgIcon <span class="keyword">from</span> <span class="string">"@/components/SvgIcon"</span>; <span class="comment">// svg component</span></span><br><span class="line"></span><br><span class="line"><span class="comment">// register globally</span></span><br><span class="line">Vue.component(<span class="string">"svg-icon"</span>, SvgIcon);</span><br><span class="line"></span><br><span class="line"><span class="keyword">const</span> req = <span class="built_in">require</span>.context(<span class="string">"./svg"</span>, <span class="literal">false</span>, /\.svg$/);</span><br><span class="line"><span class="keyword">const</span> requireAll = <span class="function"><span class="params">requireContext</span> =&gt;</span> requireContext.keys().map(requireContext);</span><br><span class="line">requireAll(req);</span><br></pre></td></tr></table></figure><p><img src="/Vue/svg4.png" alt="svg"></p><ol start="5"><li>引入 svg 配置文件（main 引入）</li></ol><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">import</span> <span class="string">"@/assets/icons"</span>;</span><br></pre></td></tr></table></figure><ol start="6"><li>使用 svg (无需引入只需要用 svg-icon 标签即可)</li></ol><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br></pre></td><td class="code"><pre><span class="line">&lt;template&gt;</span><br><span class="line">  &lt;svg-icon <span class="class"><span class="keyword">class</span></span>=<span class="string">"arrow_right"</span> icon-<span class="class"><span class="keyword">class</span></span>=<span class="string">"rightArrow"</span> /&gt;<span class="comment">// 这里icon-class写的就是svg文件的名字</span></span><br><span class="line">&lt;<span class="regexp">/template&gt;</span></span><br><span class="line"><span class="regexp"></span></span><br><span class="line"><span class="regexp">&lt;style lang="scss" scoped&gt;</span></span><br><span class="line"><span class="regexp">.arrow_right &#123;</span></span><br><span class="line"><span class="regexp">      @include wh(0.6rem, 0.6rem); /</span><span class="regexp">/ 控制大小</span></span><br><span class="line"><span class="regexp">      fill: red; /</span><span class="regexp">/ 控制颜色</span></span><br><span class="line"><span class="regexp">    &#125;</span></span><br><span class="line"><span class="regexp">&lt;/</span>style&gt;</span><br></pre></td></tr></table></figure><h1 id="后记"><a href="#后记" class="headerlink" title="后记"></a>后记</h1><ul><li>这就是我所使用的两种 svg 的方法，个人感觉第二种用起来更加便捷</li><li><a href="https://yhf7.top/" target="_blank" rel="noopener">欢迎进入我的博客</a>：<a href="https://yhf7.github.io/" target="_blank" rel="noopener">https://yhf7.github.io/</a> 或 <a href="https://yhf7.top" target="_blank" rel="noopener">https://yhf7.top</a></li><li>如果有什么侵权的话，请及时添加小编微信以及 qq 也可以来告诉小编（905477376 微信 qq 通用），谢谢！</li></ul>]]></content>
      
      
      <categories>
          
          <category> Vue </category>
          
      </categories>
      
      
        <tags>
            
            <tag> Vue笔记 </tag>
            
        </tags>
      
    </entry>
    
    <entry>
      <title>记录几种js 去重案例</title>
      <link href="/2019/05/31/%E8%AE%B0%E5%BD%95js%E5%A4%9A%E7%A7%8D%E5%8E%BB%E9%87%8D%E5%A4%8D%E5%86%99%E6%B3%95/"/>
      <url>/2019/05/31/%E8%AE%B0%E5%BD%95js%E5%A4%9A%E7%A7%8D%E5%8E%BB%E9%87%8D%E5%A4%8D%E5%86%99%E6%B3%95/</url>
      
        <content type="html"><![CDATA[<link rel="stylesheet" class="aplayer-secondary-style-marker" href="/assets/css/APlayer.min.css"><script src="/assets/js/APlayer.min.js" class="aplayer-secondary-script-marker"></script><h1 id="前言"><a href="#前言" class="headerlink" title="前言"></a>前言</h1><ul><li>在编程中去重还是很常见的</li><li>最近被一个朋友发来的需求蒙住了，花了很多时间查阅思考解决</li><li>可能是我本来实力不强吧</li><li>js去重有好几个方法我之前记录过了，这篇只是记录这两个新的案例</li><li>如果要看的可以去点击  标签-&gt;Js笔记-&gt;Js回顾 温故知新 可以为师矣</li></ul><h1 id="工具-资料"><a href="#工具-资料" class="headerlink" title="工具/资料"></a>工具/资料</h1><ul><li>系统 Mac Os 10.13.3</li><li>工具 vs code</li><li>资料借阅网上的一篇去重案例改成需求</li></ul><h1 id="开始"><a href="#开始" class="headerlink" title="开始"></a>开始</h1><h3 id="1-数组对象中判断出现重复的子项都清空（重复的子项也清除不保留）"><a href="#1-数组对象中判断出现重复的子项都清空（重复的子项也清除不保留）" class="headerlink" title="1. 数组对象中判断出现重复的子项都清空（重复的子项也清除不保留）"></a>1. 数组对象中判断出现重复的子项都清空（重复的子项也清除不保留）</h3><ol><li><p>案例</p><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">var</span> arr = [&#123;</span><br><span class="line">  <span class="string">"name"</span>: <span class="string">"ZYTX"</span>,</span><br><span class="line">  <span class="string">"age"</span>: <span class="string">"Y13xG_4wQnOWK1QwJLgg11d0pS4hewePU95UHtpMl3eE81uS74NC-6zu-Rtnw4Ix"</span>,</span><br><span class="line">  <span class="string">"gender"</span>: <span class="string">"AAAAAA.doc"</span></span><br><span class="line">&#125;, &#123;</span><br><span class="line">  <span class="string">"name"</span>: <span class="string">"ZYTA"</span>,</span><br><span class="line">  <span class="string">"age"</span>: <span class="string">"Y13xG_4wQnOWK1QwJLgg11d0pS4hewePU95UHtpMl3eE81uS74NC-6zu-Rtnw4Ix"</span>,</span><br><span class="line">  <span class="string">"gender"</span>: <span class="string">"BBBBBB.doc"</span></span><br><span class="line">&#125;, &#123;</span><br><span class="line">  <span class="string">"name"</span>: <span class="string">"ZDTX"</span>,</span><br><span class="line">  <span class="string">"age"</span>: <span class="string">"Y13xG_4wQnOWK1QwJLgg11d0pS4hewePU95UHtpMl3eE81uS74NC-6zu-Rtnw4Ix"</span>,</span><br><span class="line">  <span class="string">"gender"</span>: <span class="string">"CCCCCC.doc"</span></span><br><span class="line">&#125;, &#123;</span><br><span class="line">  <span class="string">"name"</span>: <span class="string">"ZYTX"</span>,</span><br><span class="line">  <span class="string">"age"</span>: <span class="string">"Y13xG_4wQnOWK1QwJLgg11d0pS4hewePU95UHtpMl3eE81uS74NC-6zu-Rtnw4Ix"</span>,</span><br><span class="line">  <span class="string">"gender"</span>: <span class="string">"AAAAAA.doc"</span></span><br><span class="line">&#125;];</span><br></pre></td></tr></table></figure></li><li><p>需求效果 (重复的都清空)</p><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">var</span> arr = [&#123;</span><br><span class="line">  <span class="string">"name"</span>: <span class="string">"ZYTA"</span>,</span><br><span class="line">  <span class="string">"age"</span>: <span class="string">"Y13xG_4wQnOWK1QwJLgg11d0pS4hewePU95UHtpMl3eE81uS74NC-6zu-Rtnw4Ix"</span>,</span><br><span class="line">  <span class="string">"gender"</span>: <span class="string">"BBBBBB.doc"</span></span><br><span class="line">&#125;, &#123;</span><br><span class="line">  <span class="string">"name"</span>: <span class="string">"ZDTX"</span>,</span><br><span class="line">  <span class="string">"age"</span>: <span class="string">"Y13xG_4wQnOWK1QwJLgg11d0pS4hewePU95UHtpMl3eE81uS74NC-6zu-Rtnw4Ix"</span>,</span><br><span class="line">  <span class="string">"gender"</span>: <span class="string">"CCCCCC.doc"</span></span><br><span class="line">&#125;;</span><br></pre></td></tr></table></figure></li><li><p>解决思路</p></li></ol><ul><li>先去重复，记录重复子项</li><li>提取非重复项输出</li></ul><ol start="4"><li><p>编码</p><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">var</span> arr = [&#123;</span><br><span class="line">  <span class="string">"name"</span>: <span class="string">"ZYTX"</span>,</span><br><span class="line">  <span class="string">"age"</span>: <span class="string">"Y13xG_4wQnOWK1QwJLgg11d0pS4hewePU95UHtpMl3eE81uS74NC-6zu-Rtnw4Ix"</span>,</span><br><span class="line">  <span class="string">"gender"</span>: <span class="string">"AAAAAA.doc"</span></span><br><span class="line">&#125;, &#123;</span><br><span class="line">  <span class="string">"name"</span>: <span class="string">"ZYTA"</span>,</span><br><span class="line">  <span class="string">"age"</span>: <span class="string">"Y13xG_4wQnOWK1QwJLgg11d0pS4hewePU95UHtpMl3eE81uS74NC-6zu-Rtnw4Ix"</span>,</span><br><span class="line">  <span class="string">"gender"</span>: <span class="string">"BBBBBB.doc"</span></span><br><span class="line">&#125;, &#123;</span><br><span class="line">  <span class="string">"name"</span>: <span class="string">"ZDTX"</span>,</span><br><span class="line">  <span class="string">"age"</span>: <span class="string">"Y13xG_4wQnOWK1QwJLgg11d0pS4hewePU95UHtpMl3eE81uS74NC-6zu-Rtnw4Ix"</span>,</span><br><span class="line">  <span class="string">"gender"</span>: <span class="string">"CCCCCC.doc"</span></span><br><span class="line">&#125;, &#123;</span><br><span class="line">  <span class="string">"name"</span>: <span class="string">"ZYTX"</span>,</span><br><span class="line">  <span class="string">"age"</span>: <span class="string">"Y13xG_4wQnOWK1QwJLgg11d0pS4hewePU95UHtpMl3eE81uS74NC-6zu-Rtnw4Ix"</span>,</span><br><span class="line">  <span class="string">"gender"</span>: <span class="string">"AAAAAA.doc"</span></span><br><span class="line">  &#125;, &#123;</span><br><span class="line">    <span class="string">"name"</span>: <span class="string">"ZYTX"</span>,</span><br><span class="line">    <span class="string">"age"</span>: <span class="string">"Y13xG_4wQnOWK1QwJLgg11d0pS4hewePU95UHtpMl3eE81uS74NC-6zu-Rtnw4Ix"</span>,</span><br><span class="line">    <span class="string">"gender"</span>: <span class="string">"AAAAAA.doc"</span></span><br><span class="line">  &#125;];</span><br><span class="line"></span><br><span class="line"><span class="keyword">var</span> hash = &#123;&#125;; <span class="comment">// 记载以出现项</span></span><br><span class="line"><span class="keyword">var</span> min = &#123;&#125;; <span class="comment">// 记载重复项</span></span><br><span class="line"></span><br><span class="line"><span class="comment">// 1. 去重记载（如果单一的去重第二步就不用做了）</span></span><br><span class="line">arr = arr.reduce(<span class="function"><span class="keyword">function</span> (<span class="params">item, next</span>) </span>&#123;</span><br><span class="line">  hash[next.name] ? min[next.name] = <span class="literal">true</span> : hash[next.name] = <span class="literal">true</span> &amp;&amp; item.push(next);</span><br><span class="line">  <span class="keyword">return</span> item</span><br><span class="line">&#125;, [])</span><br><span class="line"></span><br><span class="line"><span class="comment">// 2. 再次去重（清除之前去重留下的重复项）</span></span><br><span class="line">arr = arr.reduce(<span class="function"><span class="keyword">function</span> (<span class="params">item, next</span>) </span>&#123;</span><br><span class="line">  min[next.name] ? <span class="string">''</span> : min[next.name] = <span class="literal">true</span> &amp;&amp; item.push(next);</span><br><span class="line">  <span class="keyword">return</span> item</span><br><span class="line">&#125;, [])</span><br><span class="line"></span><br><span class="line"><span class="built_in">console</span>.log(arr);</span><br></pre></td></tr></table></figure></li><li><p>运行查看效果</p><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><span class="line">[ &#123; <span class="attr">name</span>: <span class="string">'ZYTA'</span>,</span><br><span class="line">    age:</span><br><span class="line">     <span class="string">'Y13xG_4wQnOWK1QwJLgg11d0pS4hewePU95UHtpMl3eE81uS74NC-6zu-Rtnw4Ix'</span>,</span><br><span class="line">    gender: <span class="string">'BBBBBB.doc'</span> &#125;,</span><br><span class="line">  &#123; <span class="attr">name</span>: <span class="string">'ZDTX'</span>,</span><br><span class="line">    age:</span><br><span class="line">     <span class="string">'Y13xG_4wQnOWK1QwJLgg11d0pS4hewePU95UHtpMl3eE81uS74NC-6zu-Rtnw4Ix'</span>,</span><br><span class="line">    gender: <span class="string">'CCCCCC.doc'</span> &#125; ]</span><br></pre></td></tr></table></figure></li></ol><h3 id="2-数组对象中判断相同id中的某一项去重"><a href="#2-数组对象中判断相同id中的某一项去重" class="headerlink" title="2. 数组对象中判断相同id中的某一项去重"></a>2. 数组对象中判断相同id中的某一项去重</h3><ol><li><p>案例</p><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">var</span> arr = [&#123; <span class="attr">id</span>: <span class="number">1</span>, <span class="attr">type</span>: <span class="string">'倒2'</span>, <span class="attr">name</span>: <span class="string">'广东'</span> &#125;, &#123; <span class="attr">id</span>: <span class="number">1</span>, <span class="attr">type</span>: <span class="string">'倒1'</span>, <span class="attr">name</span>: <span class="string">'广东'</span> &#125;, &#123; <span class="attr">id</span>: <span class="number">1</span>, <span class="attr">type</span>: <span class="string">'倒2'</span>, <span class="attr">name</span>: <span class="string">'广东'</span> &#125;, &#123; <span class="attr">id</span>: <span class="number">1</span>, <span class="attr">type</span>: <span class="string">'倒1'</span>, <span class="attr">name</span>: <span class="string">'广东'</span> &#125;, &#123; <span class="attr">id</span>: <span class="number">2</span>, <span class="attr">type</span>: <span class="string">'倒1'</span>, <span class="attr">name</span>: <span class="string">'广东'</span> &#125;, &#123; <span class="attr">id</span>: <span class="number">2</span>, <span class="attr">type</span>: <span class="string">'倒2'</span>, <span class="attr">name</span>: <span class="string">'广东'</span> &#125;, &#123; <span class="attr">id</span>: <span class="number">2</span>, <span class="attr">type</span>: <span class="string">'倒2'</span>, <span class="attr">name</span>: <span class="string">'广东'</span> &#125;, &#123; <span class="attr">id</span>: <span class="number">2</span>, <span class="attr">type</span>: <span class="string">'倒5'</span>, <span class="attr">name</span>: <span class="string">'广东'</span> &#125;];</span><br></pre></td></tr></table></figure></li><li><p>需求效果 (保留单一重复项)</p><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line">[ &#123; <span class="attr">id</span>: <span class="number">1</span>, <span class="attr">type</span>: <span class="string">'倒2'</span>, <span class="attr">name</span>: <span class="string">'广东'</span> &#125;,</span><br><span class="line">  &#123; <span class="attr">id</span>: <span class="number">1</span>, <span class="attr">type</span>: <span class="string">'倒1'</span>, <span class="attr">name</span>: <span class="string">'广东'</span> &#125;,</span><br><span class="line">  &#123; <span class="attr">id</span>: <span class="number">2</span>, <span class="attr">type</span>: <span class="string">'倒1'</span>, <span class="attr">name</span>: <span class="string">'广东'</span> &#125;,</span><br><span class="line">  &#123; <span class="attr">id</span>: <span class="number">2</span>, <span class="attr">type</span>: <span class="string">'倒2'</span>, <span class="attr">name</span>: <span class="string">'广东'</span> &#125;,</span><br><span class="line">  &#123; <span class="attr">id</span>: <span class="number">2</span>, <span class="attr">type</span>: <span class="string">'倒5'</span>, <span class="attr">name</span>: <span class="string">'广东'</span> &#125; ]</span><br></pre></td></tr></table></figure></li><li><p>解决思路</p></li></ol><ul><li>提取id，与type子项</li><li>这里用了一个小技巧在重复子项上面加上id这样就好判断很多了</li></ul><ol start="4"><li><p>编码</p><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">var</span> hash = &#123;&#125;;</span><br><span class="line"><span class="keyword">var</span> min = &#123;&#125;;</span><br><span class="line">arr = arr.reduce(<span class="function"><span class="keyword">function</span> (<span class="params">item, next</span>) </span>&#123;</span><br><span class="line">  <span class="comment">// 记录当id为true 和 子项+id相同才为真</span></span><br><span class="line">  <span class="comment">// 这里+id主要是为了好判断</span></span><br><span class="line">  hash[next.id] &amp;&amp; hash[next.type + next.id] == next.type ? <span class="string">""</span> : (hash[next.id] = <span class="literal">true</span>) &amp;&amp; (hash[next.type+next.id] = next.type) &amp;&amp; item.push(next);</span><br><span class="line">  <span class="keyword">return</span> item</span><br><span class="line">&#125;, [])</span><br><span class="line"></span><br><span class="line"><span class="built_in">console</span>.log(arr);</span><br></pre></td></tr></table></figure></li><li><p>运行查看效果</p><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line">[ &#123; <span class="attr">id</span>: <span class="number">1</span>, <span class="attr">type</span>: <span class="string">'倒2'</span>, <span class="attr">name</span>: <span class="string">'广东'</span> &#125;,</span><br><span class="line">  &#123; <span class="attr">id</span>: <span class="number">1</span>, <span class="attr">type</span>: <span class="string">'倒1'</span>, <span class="attr">name</span>: <span class="string">'广东'</span> &#125;,</span><br><span class="line">  &#123; <span class="attr">id</span>: <span class="number">2</span>, <span class="attr">type</span>: <span class="string">'倒1'</span>, <span class="attr">name</span>: <span class="string">'广东'</span> &#125;,</span><br><span class="line">  &#123; <span class="attr">id</span>: <span class="number">2</span>, <span class="attr">type</span>: <span class="string">'倒2'</span>, <span class="attr">name</span>: <span class="string">'广东'</span> &#125;,</span><br><span class="line">  &#123; <span class="attr">id</span>: <span class="number">2</span>, <span class="attr">type</span>: <span class="string">'倒5'</span>, <span class="attr">name</span>: <span class="string">'广东'</span> &#125; ]</span><br></pre></td></tr></table></figure></li></ol><h1 id="后记"><a href="#后记" class="headerlink" title="后记"></a>后记</h1><ul><li>记录两个去重小案例，吐槽一下这个老哥1w工资真的不知道着么骗回来的，欢迎更多的同行大哥指导交流</li><li><a href="https://yhf7.github.io/" target="_blank" rel="noopener">欢迎进入我的博客</a>：<a href="https://yhf7.github.io/" target="_blank" rel="noopener">https://yhf7.github.io/</a></li><li>如果有什么侵权的话，请及时添加小编微信以及qq也可以来告诉小编（905477376微信qq通用），谢谢！</li></ul>]]></content>
      
      
      <categories>
          
          <category> JavaScript </category>
          
      </categories>
      
      
        <tags>
            
            <tag> js笔记 </tag>
            
        </tags>
      
    </entry>
    
    <entry>
      <title>koa 开发插件记录</title>
      <link href="/2019/05/27/koa%E5%BC%80%E5%8F%91%E6%8F%92%E4%BB%B6/"/>
      <url>/2019/05/27/koa%E5%BC%80%E5%8F%91%E6%8F%92%E4%BB%B6/</url>
      
        <content type="html"><![CDATA[<link rel="stylesheet" class="aplayer-secondary-style-marker" href="/assets/css/APlayer.min.css"><script src="/assets/js/APlayer.min.js" class="aplayer-secondary-script-marker"></script><h1 id="前言"><a href="#前言" class="headerlink" title="前言"></a>前言</h1><ul><li>这几天着手使用koa搭建后端服务器</li><li>使用的一些插件记录下来以后方便使用</li><li>使用 koa的框架所以路由等插件我也不写了</li><li>有一些之前express用过的就不写了</li></ul><h1 id="工具-资料"><a href="#工具-资料" class="headerlink" title="工具/资料"></a>工具/资料</h1><ul><li>开发环境 mac os 10.13.3 node 10 npm 6.4</li><li>部署环境 阿里云 Centos 7 64位</li><li><a href="https://www.npmjs.com/" target="_blank" rel="noopener">参考网址NPM:</a> <a href="https://www.npmjs.com/" target="_blank" rel="noopener">https://www.npmjs.com/</a></li><li>node 8.0.0 / npm 6.9.0 / cnpm 6.0.0 </li></ul><h1 id="开始"><a href="#开始" class="headerlink" title="开始"></a>开始</h1><h3 id="解决跨域问题（koa2-cors）"><a href="#解决跨域问题（koa2-cors）" class="headerlink" title="解决跨域问题（koa2-cors）"></a>解决跨域问题（koa2-cors）</h3><ul><li><p>插件轻松解决跨域问题</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">$ cnpm i koa2-cors -S</span><br></pre></td></tr></table></figure></li><li><p>配置（括号里面的对象可写可不写）</p><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">const</span> cors = <span class="built_in">require</span>(<span class="string">'koa2-cors'</span>)</span><br><span class="line"><span class="comment">// 处理跨域问题</span></span><br><span class="line">app.use(cors(&#123;</span><br><span class="line">  exposeHeaders: [<span class="string">'WWW-Authenticate'</span>, <span class="string">'Server-Authorization'</span>, <span class="string">'Date'</span>],</span><br><span class="line">  maxAge: <span class="number">100</span>,</span><br><span class="line">  credentials: <span class="literal">true</span>,</span><br><span class="line">  allowMethods: [<span class="string">'GET'</span>, <span class="string">'POST'</span>, <span class="string">'OPTIONS'</span>],</span><br><span class="line">  allowHeaders: [<span class="string">'Content-Type'</span>, <span class="string">'Authorization'</span>, <span class="string">'Accept'</span>, <span class="string">'X-Custom-Header'</span>, <span class="string">'anonymous'</span>],</span><br><span class="line">&#125;));</span><br></pre></td></tr></table></figure></li></ul><h3 id="es6转es5"><a href="#es6转es5" class="headerlink" title="es6转es5"></a>es6转es5</h3><ol><li><p>插件加配置解决es6烦恼（node9以上的就没有这个烦恼）</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">$ cnpm i babel-plugin-transform-es2015-modules-commonjs babel-register -S</span><br></pre></td></tr></table></figure></li><li><p>配置(引入插件输出入口文件,新建start.js文件)</p><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><span class="line"><span class="built_in">require</span>(<span class="string">'babel-register'</span>)</span><br><span class="line">  (</span><br><span class="line">    &#123;</span><br><span class="line">      plugins: [<span class="string">'babel-plugin-transform-es2015-modules-commonjs'</span>],</span><br><span class="line">    &#125;</span><br><span class="line">  )</span><br><span class="line"></span><br><span class="line"><span class="built_in">module</span>.exports = <span class="built_in">require</span>(<span class="string">'./www.js'</span>)</span><br></pre></td></tr></table></figure></li><li><p>改变启动package.json文件<br><img src="/koa/p1.png" alt="koa"></p></li></ol><h3 id="处理原生node还是koa都无法解析request的body（post传值解析）"><a href="#处理原生node还是koa都无法解析request的body（post传值解析）" class="headerlink" title="处理原生node还是koa都无法解析request的body（post传值解析）"></a>处理原生node还是koa都无法解析request的body（post传值解析）</h3><ol><li><p>安装插件</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">$ cnpm i koa-body koa-bodyparser -S</span><br></pre></td></tr></table></figure></li><li><p>配置</p><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">const</span> koaBody = <span class="built_in">require</span>(<span class="string">'koa-body'</span>)</span><br><span class="line"><span class="keyword">const</span> bodyparser = <span class="built_in">require</span>(<span class="string">'koa-bodyparser'</span>)</span><br><span class="line"></span><br><span class="line">app.use(koaBody()).use(bodyparser(&#123;</span><br><span class="line">  enableTypes:[<span class="string">'json'</span>, <span class="string">'form'</span>, <span class="string">'text'</span>]</span><br><span class="line">&#125;))</span><br></pre></td></tr></table></figure></li><li><p>使用 (直接请求request里面的body就可以了，会以json格式输出)</p><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line">router.get(<span class="string">'/'</span>, <span class="keyword">async</span> (ctx, next) =&gt; &#123;</span><br><span class="line">    ctx.body = &#123;</span><br><span class="line">      <span class="string">"body"</span>: ctx.request.body</span><br><span class="line">    &#125;</span><br><span class="line">  &#125;)</span><br></pre></td></tr></table></figure></li></ol><h3 id="session-数据缓存-mongodb"><a href="#session-数据缓存-mongodb" class="headerlink" title="session 数据缓存(mongodb)"></a>session 数据缓存(mongodb)</h3><ol><li><p>安装插件 </p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">$ sudo cnpm i koa-session-minimal koa-mongo-session -S</span><br></pre></td></tr></table></figure></li><li><p>配置</p></li></ol><ul><li><p>config/default.js</p><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">'use strict'</span>;</span><br><span class="line"></span><br><span class="line"><span class="built_in">module</span>.exports = &#123;</span><br><span class="line">  <span class="comment">// port: normalizePort(process.env.PORT || '3000'),</span></span><br><span class="line">  port: <span class="built_in">parseInt</span>(process.env.PORT, <span class="number">10</span>) || <span class="number">3000</span>,</span><br><span class="line">  url: <span class="string">'mongodb://localhost:27017/koa-elm'</span>,</span><br><span class="line">  session: &#123;</span><br><span class="line">    name: <span class="string">'SID'</span>,</span><br><span class="line">    secret: <span class="string">'SID'</span>,</span><br><span class="line">    cookie: &#123;</span><br><span class="line">      httpOnly: <span class="literal">true</span>,</span><br><span class="line">      secure: <span class="literal">false</span>,</span><br><span class="line">      maxAge: <span class="number">365</span> * <span class="number">24</span> * <span class="number">60</span> * <span class="number">60</span> * <span class="number">1000</span>,</span><br><span class="line">    &#125;</span><br><span class="line">  &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure></li><li><p>app.js</p><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">// 配置文件</span></span><br><span class="line"><span class="keyword">import</span> config <span class="keyword">from</span> <span class="string">'./config/default'</span></span><br><span class="line"><span class="keyword">var</span> session = <span class="built_in">require</span>(<span class="string">'koa-session-minimal'</span>);</span><br><span class="line"><span class="keyword">var</span> mongoStore = <span class="built_in">require</span>(<span class="string">'koa-mongo-session'</span>);</span><br><span class="line"></span><br><span class="line">app.use(session(&#123;</span><br><span class="line">  name: config.session.name,</span><br><span class="line">  secret: config.session.secret,</span><br><span class="line">  resave: <span class="literal">true</span>,</span><br><span class="line">  saveUninitialized: <span class="literal">false</span>,</span><br><span class="line">  cookie: config.session.cookie,</span><br><span class="line">  store: mongoStore(&#123;</span><br><span class="line">    mongo: config.url,</span><br><span class="line">    expiration: <span class="number">1000</span> * <span class="number">60</span> * <span class="number">60</span> * <span class="number">24</span> * <span class="number">14</span></span><br><span class="line">  &#125;) </span><br><span class="line">&#125;))</span><br></pre></td></tr></table></figure></li></ul><ol start="3"><li>使用<figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line">router.get(<span class="string">'/'</span>, <span class="keyword">async</span> (ctx, next) =&gt; &#123;</span><br><span class="line">  <span class="built_in">console</span>.log(ctx.session.admin_id) <span class="comment">// 取</span></span><br><span class="line">    ctx.session.admin_id = <span class="string">'2'</span> <span class="comment">// 存</span></span><br><span class="line">  &#125;)</span><br></pre></td></tr></table></figure></li></ol><p><img src="/koa/p2.png" alt="koa"></p>]]></content>
      
      
      <categories>
          
          <category> Nodejs </category>
          
      </categories>
      
      
        <tags>
            
            <tag> Nodejs笔记 </tag>
            
        </tags>
      
    </entry>
    
    <entry>
      <title>koa 快速形成开发环境(koa-generator)</title>
      <link href="/2019/05/24/koa%E5%BF%AB%E9%80%9F%E5%BD%A2%E6%88%90%E5%BC%80%E5%8F%91%E7%8E%AF%E5%A2%83/"/>
      <url>/2019/05/24/koa%E5%BF%AB%E9%80%9F%E5%BD%A2%E6%88%90%E5%BC%80%E5%8F%91%E7%8E%AF%E5%A2%83/</url>
      
        <content type="html"><![CDATA[<link rel="stylesheet" class="aplayer-secondary-style-marker" href="/assets/css/APlayer.min.css"><script src="/assets/js/APlayer.min.js" class="aplayer-secondary-script-marker"></script><h1 id="前言"><a href="#前言" class="headerlink" title="前言"></a>前言</h1><ul><li>写过node的人都知道，express这个轻量级web框架</li><li>但是koa是express原班人马打造，更轻量更容易拓展的流行框架</li><li>集成了一些 express 风格的中间件，不需要手动去写，省时省力</li><li>支持es6，7语法等</li><li>如何快速搭建开发环境呢？</li><li>vue有vue-cli ，koa也有koa-generator脚手架</li><li>我是mac 所以每次都加sudo 这个权限问题 win不用加</li></ul><h1 id="工具-资料"><a href="#工具-资料" class="headerlink" title="工具/资料"></a>工具/资料</h1><ul><li>系统 Mac Os 10.13.3</li><li>npm 6.4.1</li><li>node 10.13.0</li></ul><h1 id="开始"><a href="#开始" class="headerlink" title="开始"></a>开始</h1><h3 id="1-全局安装脚手架"><a href="#1-全局安装脚手架" class="headerlink" title="1. 全局安装脚手架"></a>1. 全局安装脚手架</h3><ul><li>npm cnpm yarn都可以<figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">$ sudo cnpm i -g koa-generator</span><br></pre></td></tr></table></figure></li></ul><p><img src="/koa/k1.png" alt="koa"></p><h3 id="2-搭建项目"><a href="#2-搭建项目" class="headerlink" title="2. 搭建项目"></a>2. 搭建项目</h3><ul><li>由于koa有两个版本所以生成的用法也不一样的,同样我们生成个项目明叫koaPro的看看(这里我直接连写了)<h4 id="koa-v1-开启命令："><a href="#koa-v1-开启命令：" class="headerlink" title="koa v1 开启命令："></a>koa v1 开启命令：</h4><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">$ sudo koa koaPro &amp;&amp; <span class="built_in">cd</span> koaPro &amp;&amp; sudo cnpm i</span><br></pre></td></tr></table></figure></li></ul><h4 id="koa-v2-开启命令："><a href="#koa-v2-开启命令：" class="headerlink" title="koa v2 开启命令："></a>koa v2 开启命令：</h4><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">$ sudo koa2 koaPro &amp;&amp; <span class="built_in">cd</span> koaPro &amp;&amp; sudo cnpm i</span><br></pre></td></tr></table></figure><p><img src="/koa/k2.png" alt="koa"></p><h3 id="3-启动koa"><a href="#3-启动koa" class="headerlink" title="3. 启动koa"></a>3. 启动koa</h3><ul><li>默认3000端口<figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">$ sudo npm run start</span><br></pre></td></tr></table></figure></li></ul><p><img src="/koa/k3.png" alt="koa"></p><h1 id="后记"><a href="#后记" class="headerlink" title="后记"></a>后记</h1><ul><li>koa 快速开启项目就说到这了，这几天会使用koa搭后端服务，欢迎业界大佬交流学习</li><li><a href="https://yhf7.github.io/" target="_blank" rel="noopener">欢迎进入我的博客</a>：<a href="https://yhf7.github.io/" target="_blank" rel="noopener">https://yhf7.github.io/</a></li><li>如果有什么侵权的话，请及时添加小编微信以及qq也可以来告诉小编（905477376微信qq通用），谢谢！</li></ul>]]></content>
      
      
      <categories>
          
          <category> Nodejs </category>
          
      </categories>
      
      
        <tags>
            
            <tag> Nodejs笔记 </tag>
            
        </tags>
      
    </entry>
    
    <entry>
      <title>Vue 阻止浏览器点击回退</title>
      <link href="/2019/05/19/vue%E9%98%BB%E6%AD%A2%E6%B5%8F%E8%A7%88%E5%99%A8%E5%9B%9E%E9%80%80/"/>
      <url>/2019/05/19/vue%E9%98%BB%E6%AD%A2%E6%B5%8F%E8%A7%88%E5%99%A8%E5%9B%9E%E9%80%80/</url>
      
        <content type="html"><![CDATA[<link rel="stylesheet" class="aplayer-secondary-style-marker" href="/assets/css/APlayer.min.css"><script src="/assets/js/APlayer.min.js" class="aplayer-secondary-script-marker"></script><h1 id="前言"><a href="#前言" class="headerlink" title="前言"></a>前言</h1><ul><li>在我们的开发过程中有时候一些页面并不喜欢被回退</li><li>也不希望被退出去其他页面，比如登录了等就不给回退到登录页面等</li><li>这时候我们应该着么做呢？第一时间我想起了路由守护</li><li>每一次的切换都会进入到路由，但是具体着么做呢？我也借鉴了网上别人的方法</li><li>现在实现了我把它记录下来</li></ul><h1 id="工具-资料"><a href="#工具-资料" class="headerlink" title="工具/资料"></a>工具/资料</h1><ul><li>系统 Mac os 10.13.3</li><li>开发工具 vs code</li><li>开发项目 vue</li></ul><h1 id="开始"><a href="#开始" class="headerlink" title="开始"></a>开始</h1><h3 id="第一步、锁定需要禁止回退的路由页面"><a href="#第一步、锁定需要禁止回退的路由页面" class="headerlink" title="第一步、锁定需要禁止回退的路由页面"></a>第一步、锁定需要禁止回退的路由页面</h3><ul><li>给需要守护的路由在 meta 添加 allowBack</li><li>只要你那个页面不想让他回退了那你就添加就可以了</li></ul><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">const</span> Login = <span class="function"><span class="params">()</span>=&gt;</span> <span class="keyword">import</span>( <span class="comment">/* webpackChunkName: "login-page" */</span> <span class="string">'@/pages/Login'</span>)<span class="comment">//登录</span></span><br><span class="line"></span><br><span class="line"><span class="keyword">export</span> <span class="keyword">default</span> [</span><br><span class="line">    &#123;</span><br><span class="line">        path: <span class="string">'/'</span>,</span><br><span class="line">        name: <span class="string">'Login'</span>,</span><br><span class="line">        component: Login,</span><br><span class="line">        meta: &#123; <span class="attr">allowBack</span>: <span class="literal">false</span> &#125;</span><br><span class="line">    &#125;</span><br><span class="line">]</span><br></pre></td></tr></table></figure><p><img src="/Vue/zz1.png" alt="zz"></p><h3 id="第二步、配置全局路由守护"><a href="#第二步、配置全局路由守护" class="headerlink" title="第二步、配置全局路由守护"></a>第二步、配置全局路由守护</h3><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">// 全局路由守护</span></span><br><span class="line">router.beforeEach(<span class="function">(<span class="params">to,<span class="keyword">from</span>,next</span>) =&gt;</span> &#123;</span><br><span class="line">    <span class="keyword">let</span> allowBack = <span class="literal">true</span>    <span class="comment">//    给个默认值true</span></span><br><span class="line">    <span class="comment">// 有定义的就走路由定义了的数据</span></span><br><span class="line">    <span class="keyword">if</span> (to.meta.allowBack !== <span class="literal">undefined</span>) &#123;</span><br><span class="line">        allowBack = to.meta.allowBack</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">if</span> (!allowBack) &#123;</span><br><span class="line">        history.pushState(<span class="literal">null</span>, <span class="literal">null</span>, location.href)</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="comment">// vuex存储数据</span></span><br><span class="line">    store.dispatch(<span class="string">'updateAppSetting'</span>, &#123;     <span class="comment">//   updateAppSetting 只是store里面的一个action， 用来改变store里的allowBack的值的，具体怎么改这个值 要根据各位的实际情况而定</span></span><br><span class="line">        allowBack: allowBack</span><br><span class="line">    &#125;)</span><br><span class="line"></span><br><span class="line">    <span class="comment">// 登录守护</span></span><br><span class="line">    <span class="keyword">if</span> (to.name != <span class="string">'Login'</span> &amp;&amp; (vuex.getters.getLoginKey()) != <span class="string">'yhfkey'</span>) &#123;</span><br><span class="line">        next(&#123;<span class="attr">name</span>: <span class="string">'Login'</span>&#125;)</span><br><span class="line">    &#125;</span><br><span class="line">    next()</span><br><span class="line">&#125;)</span><br></pre></td></tr></table></figure><h3 id="第三步、编写-vuex"><a href="#第三步、编写-vuex" class="headerlink" title="第三步、编写 vuex"></a>第三步、编写 vuex</h3><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">import</span> Vue <span class="keyword">from</span> <span class="string">'vue'</span></span><br><span class="line"><span class="keyword">import</span> Vuex <span class="keyword">from</span> <span class="string">'vuex'</span></span><br><span class="line">Vue.use(Vuex)</span><br><span class="line"></span><br><span class="line"><span class="keyword">const</span> state = &#123;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="comment">// mutations</span></span><br><span class="line"><span class="keyword">const</span> mutations = &#123;</span><br><span class="line">    updateAppSetting(state,status) &#123;</span><br><span class="line">        state.allowBack = status.allowBack</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="comment">// actions</span></span><br><span class="line"><span class="keyword">const</span> actions = &#123;</span><br><span class="line">    updateAppSetting(&#123;commit&#125;, status)&#123;</span><br><span class="line">        commit(<span class="string">'updateAppSetting'</span>, status)</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="keyword">export</span> <span class="keyword">default</span> <span class="keyword">new</span> Vuex.Store(&#123;</span><br><span class="line">    state,</span><br><span class="line">    mutations,</span><br><span class="line">    actions</span><br><span class="line">&#125;)</span><br></pre></td></tr></table></figure><h3 id="第四步、在-App-vue-编写最后的守护"><a href="#第四步、在-App-vue-编写最后的守护" class="headerlink" title="第四步、在 App.vue 编写最后的守护"></a>第四步、在 App.vue 编写最后的守护</h3><ul><li>在 app 的 mouted 编写 onpopstate</li></ul><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><span class="line">mounted() &#123;</span><br><span class="line">  <span class="built_in">window</span>.onpopstate = <span class="function"><span class="params">()</span> =&gt;</span> &#123;</span><br><span class="line">    <span class="keyword">if</span> (!<span class="keyword">this</span>.allowBack) &#123;</span><br><span class="line">      <span class="comment">//    这个allowBack 是存在vuex里面的变量</span></span><br><span class="line">      history.go(<span class="number">1</span>);</span><br><span class="line">    &#125;</span><br><span class="line">  &#125;;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h1 id="后记"><a href="#后记" class="headerlink" title="后记"></a>后记</h1><ul><li>全局路由守护拒绝浏览器回退就说到这里了，欢迎更多的同行大哥指导交流</li><li><a href="https://yhf7.github.io/" target="_blank" rel="noopener">欢迎进入我的博客</a>：<a href="https://yhf7.github.io/" target="_blank" rel="noopener">https://yhf7.github.io/</a></li><li>如果有什么侵权的话，请及时添加小编微信以及qq也可以来告诉小编（905477376微信qq通用），谢谢！</li></ul>]]></content>
      
      
      <categories>
          
          <category> Vue </category>
          
      </categories>
      
      
        <tags>
            
            <tag> Vue笔记 </tag>
            
        </tags>
      
    </entry>
    
    <entry>
      <title>2019年5月开发心得</title>
      <link href="/2019/05/14/2019-05-14%E5%BC%80%E5%8F%91%E5%BF%83%E5%BE%97/"/>
      <url>/2019/05/14/2019-05-14%E5%BC%80%E5%8F%91%E5%BF%83%E5%BE%97/</url>
      
        <content type="html"><![CDATA[<link rel="stylesheet" class="aplayer-secondary-style-marker" href="/assets/css/APlayer.min.css"><script src="/assets/js/APlayer.min.js" class="aplayer-secondary-script-marker"></script><h3 id="近期开发汇总"><a href="#近期开发汇总" class="headerlink" title="近期开发汇总"></a>近期开发汇总</h3><p>最近都是在写程序测试程序修复bug，在不断的写代码的过程中确实慢慢的成长起来了，遇到了很多让我很苦恼的问题随着时间的流逝搜索引擎的强大朋友的经验，都能把问题迎刃而解，<br>项目重构结束测试也接近尾声了，项目交付当被用户发现bug发来一声声质疑时，我真的无地自容作为一个第一次跟着团队做项目，真正的让用户使用自己的产品，当我看到别人对我的质疑<br>时我是非常的愤怒，不是愤怒别人是愤怒自己为什么那么疏忽，为什么没有认真的检查好为什么为出现这样的错误，一声声的为什么映入我的心中，当我收到这一份质疑时我感到非常的耻辱<br>并不是实力不过关完全就是态度的问题，没有很细心很认真的去测试遗留残缺bug流入客户手中，感动非常的抱歉！自我检讨自我反省以后不再出现这样的事情，这种感觉真的非常不爽！<br>还好有那么包容的团队，出现问题都没有责怪我也只是说大家都疏忽了尽快解决就好，团队大哥也安慰我习惯就会这样的事常有发生的，不辜负大家的期望得继续努力！</p><h3 id="今日总结"><a href="#今日总结" class="headerlink" title="今日总结"></a>今日总结</h3><p>今天很开心也很伤心，在编写投票系统时，我的服务器和数据库出问题了，迫不得已重置数据库最后数据库的数据都没了得重新搭起来，服务器也受到了代理地址影响起了一些错误，<br>通过2小时的奋斗终于解决了这个问题，另外很开心的是仿写elm后台系统，投票系统，签到系统今天都完成了，当我正开心的时候又发现了bug，一天天的就不让我好过啊，这不是我应该<br>承受的一天哎，作为一个开发人员只能默默的接受这一切那就去修复bug以免又被一声声的质疑，当我觉得我的服务器可能不行时今晚给了我很大的惊喜，同时间几百人使用我的小程序<br>测试我的投票系统，服务器显示还是可以的，虽然高峰期还是有点压力起码没有崩溃还是很棒棒的，这是我第一次向那么多人展示我的作品，虽然很简易，但是我很开心大家都愿意点开<br>为我投一票测试一下，最后是有接近1000人访问了我的程序，我已经很满足了</p><h3 id="后续计划"><a href="#后续计划" class="headerlink" title="后续计划"></a>后续计划</h3><ol><li>优化签到程序</li><li>完成elm 后端编写</li><li>重构签到程序后台</li><li>坚持阅读JavaScript高级程序设计3</li><li>注意身体健康，不熬夜，中午午休（尽力完成这个比看书还难的任务）</li></ol>]]></content>
      
      
      <categories>
          
          <category> 个人 </category>
          
      </categories>
      
      
        <tags>
            
            <tag> 个人 </tag>
            
        </tags>
      
    </entry>
    
    <entry>
      <title>实现简易 投票系统 （小程序+Tp5+vue）</title>
      <link href="/2019/05/14/%E5%B0%8F%E7%A8%8B%E5%BA%8F+tp5+vue/"/>
      <url>/2019/05/14/%E5%B0%8F%E7%A8%8B%E5%BA%8F+tp5+vue/</url>
      
        <content type="html"><![CDATA[<link rel="stylesheet" class="aplayer-secondary-style-marker" href="/assets/css/APlayer.min.css"><script src="/assets/js/APlayer.min.js" class="aplayer-secondary-script-marker"></script><h1 id="前言"><a href="#前言" class="headerlink" title="前言"></a>前言</h1><ul><li>好久没有更新博客</li><li>一直忙于项目测试修复bug</li><li>今日收到我哥的需求，想做一个现场投票系统</li><li>我就想着做个简单的小程序再用vue配合插件做个实时图标就可以了</li><li>在这期间真的是一波三折啊，数据库报错被迫重置，服务器出问题，还好都解决了</li><li>废话不多说进入今天的简易投票系统</li></ul><h1 id="工具-材料"><a href="#工具-材料" class="headerlink" title="工具/材料"></a>工具/材料</h1><ul><li>开发系统 Mac OS 10.13.3</li><li>开发工具 Vs code 、phpStorm、MySQL、Postman、微信开发者工具</li><li>线上系统 阿里云 Centos 7 64位</li><li>线上 apache环境 php 、mysql环境搭建</li><li>nginx反向代理 https</li><li>域名以及备案</li><li>Vue-cli 、 Tp5</li><li>图标插件 echarts <a href="https://echarts.baidu.com/examples/" target="_blank" rel="noopener">https://echarts.baidu.com/examples/</a></li><li>源码 <a href="https://gitee.com/yhf7" target="_blank" rel="noopener">https://gitee.com/yhf7</a> </li></ul><h1 id="开始"><a href="#开始" class="headerlink" title="开始"></a>开始</h1><h3 id="TP5编写后端api-（没啥说的直接下源码看源码：）"><a href="#TP5编写后端api-（没啥说的直接下源码看源码：）" class="headerlink" title="TP5编写后端api （没啥说的直接下源码看源码：）"></a><a href="https://gitee.com/yhf7/voting_system_tp5_backend" target="_blank" rel="noopener">TP5编写后端api</a> （没啥说的直接下源码看<a href="https://gitee.com/yhf7" target="_blank" rel="noopener">源码：</a>）</h3><h4 id="业务"><a href="#业务" class="headerlink" title="业务"></a>业务</h4><ol><li>编写token、验证token</li><li>验证是否投票，投票</li></ol><hr><h4 id="使用tp5做了什么"><a href="#使用tp5做了什么" class="headerlink" title="使用tp5做了什么"></a>使用tp5做了什么</h4><ol><li>验证数据层</li><li>模型操作数据库</li><li>业务逻辑层</li><li>全局异常处理机制</li><li>挂载后台页面</li><li>数据存储</li></ol><h3 id="小程序"><a href="#小程序" class="headerlink" title="小程序"></a><a href="https://gitee.com/yhf7/small_procedure_voting_system" target="_blank" rel="noopener">小程序</a></h3><ul><li>简单的单选以及api请求</li><li>页面<br><img src="/qz/x1.png" alt="qz"></li><li>api请求封装<figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">/**</span></span><br><span class="line"><span class="comment">   * 请求封装</span></span><br><span class="line"><span class="comment">   * 当 noRefech 为 true， 不做未授权重做机制</span></span><br><span class="line"><span class="comment">   */</span></span><br><span class="line">  request (params,noRefetch) &#123;</span><br><span class="line">    <span class="keyword">var</span> that = <span class="keyword">this</span>;</span><br><span class="line">    <span class="comment">// url内外拼接</span></span><br><span class="line">    <span class="keyword">var</span> url = <span class="keyword">this</span>.baseRequestUrl + params.url;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">if</span> (!params.type) &#123;</span><br><span class="line">      params.type = <span class="string">'GET'</span></span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    wx.request(&#123;</span><br><span class="line">      url: url,</span><br><span class="line">      data: params.data,</span><br><span class="line">      method: params.type,</span><br><span class="line">      header: &#123;</span><br><span class="line">        <span class="string">'content-type'</span>:<span class="string">'application/json'</span>,</span><br><span class="line">        <span class="string">'token'</span>: wx.getStorageSync(<span class="string">'token'</span>)</span><br><span class="line">      &#125;,</span><br><span class="line">      success: <span class="function"><span class="params">res</span> =&gt;</span> &#123;</span><br><span class="line">        <span class="keyword">var</span> code = res.statusCode.toString();</span><br><span class="line">        <span class="keyword">var</span> startChar = code.charAt(<span class="number">0</span>);</span><br><span class="line">        <span class="keyword">if</span> (startChar == <span class="string">'2'</span>) &#123;</span><br><span class="line">          <span class="comment">// 判断函数，存在才调用</span></span><br><span class="line">          params.sCallback &amp;&amp; params.sCallback(res.data);</span><br><span class="line">        &#125; <span class="keyword">else</span> &#123;</span><br><span class="line">            <span class="comment">// AOP</span></span><br><span class="line">            <span class="comment">// 401 无token，重新调用</span></span><br><span class="line">            <span class="keyword">if</span> (code == <span class="string">'401'</span>) &#123;</span><br><span class="line">              <span class="comment">// 避免无限循环，默认false进入，第二次调用时返回ture就不会再次去调用死循环</span></span><br><span class="line">              <span class="keyword">if</span> (!noRefetch) &#123;</span><br><span class="line">                that._refetch(params);</span><br><span class="line">              &#125;</span><br><span class="line">            &#125;</span><br><span class="line">          <span class="keyword">if</span> (noRefetch) &#123;</span><br><span class="line">            params.eCallback &amp;&amp; params.eCallback(res.data);</span><br><span class="line">          &#125;</span><br><span class="line">        &#125;</span><br><span class="line">      &#125;,</span><br><span class="line">      fail: <span class="function"><span class="params">err</span> =&gt;</span> &#123;</span><br><span class="line">        <span class="built_in">console</span>.log(err);</span><br><span class="line">      &#125;</span><br><span class="line">    &#125;)</span><br><span class="line">  &#125;</span><br></pre></td></tr></table></figure></li></ul><p><img src="/qz/x2.png" alt="qz"></p><ul><li>api调用以及单选业务处理<br><img src="/qz/x3.png" alt="qz"></li></ul><h3 id="vue后台"><a href="#vue后台" class="headerlink" title="vue后台"></a><a href="https://gitee.com/yhf7/vue_voting_system_background" target="_blank" rel="noopener">vue后台</a></h3><ul><li>就是简单的图标实时获取投票数据</li><li><p>安装插件</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">$ sudo cnpm i echarts -S</span><br></pre></td></tr></table></figure></li><li><p>页面源码</p><figure class="highlight html"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br></pre></td><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">template</span>&gt;</span></span><br><span class="line">  <span class="tag">&lt;<span class="name">div</span> <span class="attr">class</span>=<span class="string">"visitorpie"</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">div</span> <span class="attr">id</span>=<span class="string">"visitorpie"</span> <span class="attr">class</span> <span class="attr">style</span>=<span class="string">"width: 90%;height:450px;"</span>&gt;</span><span class="tag">&lt;/<span class="name">div</span>&gt;</span></span><br><span class="line">  <span class="tag">&lt;/<span class="name">div</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">template</span>&gt;</span></span><br><span class="line"></span><br><span class="line"><span class="tag">&lt;<span class="name">script</span>&gt;</span><span class="undefined"></span></span><br><span class="line"><span class="javascript"><span class="keyword">var</span> echarts = <span class="built_in">require</span>(<span class="string">'echarts'</span>);</span></span><br><span class="line"><span class="javascript"><span class="keyword">import</span> API <span class="keyword">from</span> <span class="string">'@/api'</span></span></span><br><span class="line"><span class="javascript"><span class="keyword">export</span> <span class="keyword">default</span> &#123;</span></span><br><span class="line"><span class="undefined">  mounted() &#123;</span></span><br><span class="line"><span class="javascript">    <span class="keyword">this</span>.myChart = echarts.init(<span class="built_in">document</span>.getElementById(<span class="string">"visitorpie"</span>));</span></span><br><span class="line"><span class="javascript">    <span class="keyword">this</span>.initData();</span></span><br><span class="line"><span class="javascript">    setInterval(<span class="function"><span class="params">()</span> =&gt;</span> &#123;</span></span><br><span class="line"><span class="javascript">      API.geDate().then(<span class="function"><span class="params">res</span> =&gt;</span> &#123;</span></span><br><span class="line"><span class="javascript">      <span class="keyword">let</span> arr = []</span></span><br><span class="line"><span class="javascript">      <span class="keyword">for</span> (<span class="keyword">const</span> key <span class="keyword">in</span> res) &#123;</span></span><br><span class="line"><span class="undefined">        arr.push(res[key]);</span></span><br><span class="line"><span class="undefined">      &#125;</span></span><br><span class="line"><span class="javascript">      <span class="keyword">this</span>.initData(arr)</span></span><br><span class="line"><span class="undefined">    &#125;)</span></span><br><span class="line"><span class="undefined">    &#125;, 3000);</span></span><br><span class="line"><span class="undefined">  &#125;,</span></span><br><span class="line"><span class="undefined">  methods: &#123;</span></span><br><span class="line"><span class="undefined">    initData(arr) &#123;</span></span><br><span class="line"><span class="javascript">      <span class="keyword">var</span> option = &#123;</span></span><br><span class="line"><span class="undefined">            title: &#123;</span></span><br><span class="line"><span class="javascript">                text: <span class="string">'第八届广东文艺职业学院美术系班服大赛最佳人气榜'</span></span></span><br><span class="line"><span class="undefined">            &#125;,</span></span><br><span class="line"><span class="undefined">            tooltip: &#123;&#125;,</span></span><br><span class="line"><span class="undefined">            legend: &#123;</span></span><br><span class="line"><span class="javascript">                data:[<span class="string">'票数'</span>]</span></span><br><span class="line"><span class="undefined">            &#125;,</span></span><br><span class="line"><span class="undefined">            xAxis: &#123;</span></span><br><span class="line"><span class="javascript">                data: [<span class="string">"18会展班"</span>,<span class="string">"18工艺班"</span>,<span class="string">"18计美1班"</span>,<span class="string">"18计美2班"</span>,<span class="string">"18配饰班"</span>,<span class="string">"18陶艺班"</span>]</span></span><br><span class="line"><span class="undefined">            &#125;,</span></span><br><span class="line"><span class="undefined">            yAxis: &#123;&#125;,</span></span><br><span class="line"><span class="undefined">            series: [&#123;</span></span><br><span class="line"><span class="javascript">                name: <span class="string">'票数'</span>,</span></span><br><span class="line"><span class="javascript">                type: <span class="string">'bar'</span>,</span></span><br><span class="line"><span class="undefined">                data: arr</span></span><br><span class="line"><span class="undefined">            &#125;]</span></span><br><span class="line"><span class="undefined">        &#125;;</span></span><br><span class="line"><span class="undefined"></span></span><br><span class="line"><span class="javascript">      <span class="keyword">this</span>.myChart.setOption(option);</span></span><br><span class="line"><span class="undefined">    &#125;</span></span><br><span class="line"><span class="undefined">  &#125;</span></span><br><span class="line"><span class="undefined">&#125;;</span></span><br><span class="line"><span class="undefined"></span><span class="tag">&lt;/<span class="name">script</span>&gt;</span></span><br><span class="line"></span><br><span class="line"><span class="tag">&lt;<span class="name">style</span> <span class="attr">lang</span>=<span class="string">"less"</span>&gt;</span><span class="undefined"></span></span><br><span class="line"><span class="css">@<span class="keyword">import</span> <span class="string">"../assets/styles/mixin.less"</span>;</span></span><br><span class="line"><span class="css"><span class="selector-class">.visitorpie</span> &#123;</span></span><br><span class="line"><span class="css">  <span class="selector-class">.fj</span>("<span class="selector-tag">centeer</span>");</span></span><br><span class="line"><span class="undefined">  margin-top: 20px;</span></span><br><span class="line"><span class="undefined">&#125;</span></span><br><span class="line"><span class="undefined"></span><span class="tag">&lt;/<span class="name">style</span>&gt;</span></span><br></pre></td></tr></table></figure></li><li><p>效果图<br><img src="/qz/h1.png" alt="qz"></p></li></ul><h4 id="打包放在tp5的public里面即可"><a href="#打包放在tp5的public里面即可" class="headerlink" title="打包放在tp5的public里面即可"></a>打包放在tp5的public里面即可</h4><h3 id="服务器-小程序后台数据效果图"><a href="#服务器-小程序后台数据效果图" class="headerlink" title="服务器/小程序后台数据效果图"></a>服务器/小程序后台数据效果图</h3><p><img src="/qz/h2.jpg" alt="qz"><br><img src="/qz/h3.jpg" alt="qz"><br><img src="/qz/h4.jpg" alt="qz"></p><h1 id="后记"><a href="#后记" class="headerlink" title="后记"></a>后记</h1><ul><li>这就是我帮我哥做的简易实时投票系统，望大家多多指教</li><li><a href="https://yhf7.github.io/" target="_blank" rel="noopener">欢迎进入我的博客</a>：<a href="https://yhf7.github.io/" target="_blank" rel="noopener">https://yhf7.github.io/</a></li><li>如果有什么侵权的话，请及时添加小编微信以及qq也可以来告诉小编（905477376微信qq通用），谢谢！</li></ul>]]></content>
      
      
      <categories>
          
          <category> 全栈案例 </category>
          
      </categories>
      
      
        <tags>
            
            <tag> 全栈案例 </tag>
            
        </tags>
      
    </entry>
    
    <entry>
      <title>VS Code 远程管理Linux文件（Remote Development）</title>
      <link href="/2019/05/04/VS%20Code%E8%BF%9C%E7%A8%8B%E7%AE%A1%E7%90%86%E8%BF%9C%E7%AB%AF%E6%96%87%E4%BB%B6%E5%A4%B9/"/>
      <url>/2019/05/04/VS%20Code%E8%BF%9C%E7%A8%8B%E7%AE%A1%E7%90%86%E8%BF%9C%E7%AB%AF%E6%96%87%E4%BB%B6%E5%A4%B9/</url>
      
        <content type="html"><![CDATA[<link rel="stylesheet" class="aplayer-secondary-style-marker" href="/assets/css/APlayer.min.css"><script src="/assets/js/APlayer.min.js" class="aplayer-secondary-script-marker"></script><h1 id="前言"><a href="#前言" class="headerlink" title="前言"></a>前言</h1><ul><li>老实说我个人比较喜欢命令行多过界面化，所以我购买的服务器是CentOS7真的纯命令行</li><li>我也只是用了部署项目也没有说在上面开发，有时候使用vim小改一下</li><li>但是频繁大量的改就觉得第一个麻烦切来切去，第二个就是用起来真的没有那么方便</li><li>刚好看见vscode出了这么个插件</li><li>这个插件分为两个的 Remote Development 和 Remote VS Code （两个我都下了第二个没有第一个那么方便）</li><li>那我们就来走入远端控制的配置与享受中</li></ul><h1 id="工具"><a href="#工具" class="headerlink" title="工具"></a>工具</h1><ul><li>系统 Mac Os 10.13.3</li><li>服务器 CentOS 7 （阿里云学生机买的）</li><li>软件 VS Code insiders 这个正式版有没有具体我不清楚，Remote vs code这个是肯定都有的</li></ul><h1 id="开始"><a href="#开始" class="headerlink" title="开始"></a>开始</h1><h3 id="第一步、安装插件"><a href="#第一步、安装插件" class="headerlink" title="第一步、安装插件"></a>第一步、安装插件</h3><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">$ Remote Development <span class="comment"># (插件名称)</span></span><br></pre></td></tr></table></figure><p><img src="/ssh/s1.png" alt="ssh"></p><h3 id="第二步、配置插件"><a href="#第二步、配置插件" class="headerlink" title="第二步、配置插件"></a>第二步、配置插件</h3><p><img src="/ssh/s2.png" alt="ssh"><br><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment"># Read more about SSH config files: https://linux.die.net/man/5/ssh_config</span></span><br><span class="line">Host Cenos7 </span><br><span class="line">    HostName 119.23.75.150 <span class="comment"># 要连接服务器的地址</span></span><br><span class="line">    User root <span class="comment"># 连接服务器的名称</span></span><br><span class="line">    ForwardAgent yes</span><br><span class="line">    RemoteForward 52698 127.0.0.1:52698 <span class="comment"># 前面的是远端的端口 后面的是本地的，设置防火墙的要给端口权限</span></span><br><span class="line">    IdentityFile /Users/yhf/yhf.pem <span class="comment"># 密钥没有可以不写</span></span><br></pre></td></tr></table></figure></p><p><img src="/ssh/s3.png" alt="ssh"></p><h3 id="第三步、配置服务器-Linux"><a href="#第三步、配置服务器-Linux" class="headerlink" title="第三步、配置服务器(Linux)"></a>第三步、配置服务器(Linux)</h3><h4 id="重点：安装配置好重启一下vs-code"><a href="#重点：安装配置好重启一下vs-code" class="headerlink" title="重点：安装配置好重启一下vs code"></a>重点：安装配置好重启一下vs code</h4><hr><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line">$ wget https://raw.githubusercontent.com/sclukey/rmate-python/master/bin/rmate</span><br><span class="line"></span><br><span class="line">$ chmod +x ./rmate</span><br><span class="line"></span><br><span class="line">$ mv ./rmate /usr/<span class="built_in">local</span>/bin/rmate</span><br></pre></td></tr></table></figure><h3 id="第四步、启动连接"><a href="#第四步、启动连接" class="headerlink" title="第四步、启动连接"></a>第四步、启动连接</h3><ul><li>这个过程中会需要多次输入密码的</li><li>后面选择自己需要编辑的文件夹或文件<br><img src="/ssh/s4.png" alt="ssh"></li></ul><h3 id="第五步、编辑查看效果"><a href="#第五步、编辑查看效果" class="headerlink" title="第五步、编辑查看效果"></a>第五步、编辑查看效果</h3><p><img src="/ssh/s5.png" alt="ssh"><br><img src="/ssh/s6.png" alt="ssh"></p><h1 id="后记"><a href="#后记" class="headerlink" title="后记"></a>后记</h1><ul><li>vs code 管理远端文件就说到这了,整体来说还是不错的，就是密码输的有点多，希望能帮到有缘人</li><li><a href="https://yhf7.github.io/" target="_blank" rel="noopener">欢迎进入我的博客</a>：<a href="https://yhf7.github.io/" target="_blank" rel="noopener">https://yhf7.github.io/</a></li><li>如果有什么侵权的话，请及时添加小编微信以及qq也可以来告诉小编（905477376微信qq通用），谢谢！</li></ul>]]></content>
      
      
      <categories>
          
          <category> 插件 </category>
          
      </categories>
      
      
        <tags>
            
            <tag> 插件 </tag>
            
        </tags>
      
    </entry>
    
    <entry>
      <title>阿里云 Centos 7 安装/配置 Nginx  https</title>
      <link href="/2019/04/26/%E9%98%BF%E9%87%8C%E4%BA%91%E5%AE%89%E8%A3%85%E9%85%8D%E7%BD%AEnginx/"/>
      <url>/2019/04/26/%E9%98%BF%E9%87%8C%E4%BA%91%E5%AE%89%E8%A3%85%E9%85%8D%E7%BD%AEnginx/</url>
      
        <content type="html"><![CDATA[<link rel="stylesheet" class="aplayer-secondary-style-marker" href="/assets/css/APlayer.min.css"><script src="/assets/js/APlayer.min.js" class="aplayer-secondary-script-marker"></script><h1 id="前言"><a href="#前言" class="headerlink" title="前言"></a>前言</h1><ul><li>前段时间配置了php环境的https，但是我的服务器不只是有php还有其他的后端</li><li>所以只好用nginx做一个全局的配置，而且配置的时候一直出问题</li><li>一开始我也是被多个代理卡了好久，事实证明nginx配置比单个配置方便很多的，因为Apache只可以给php等使用，但是如果我要给个node那就不行了</li><li>今天花了点时间把之前的删除了重新安装配置</li><li>不看我的看官网也是可以的：<a href="https://help.aliyun.com/knowledge_detail/95491.html?spm=a2c4g.11186623.2.9.678d4c07Jh6m7U" target="_blank" rel="noopener">点击前往</a></li></ul><h1 id="注意"><a href="#注意" class="headerlink" title="注意"></a>注意</h1><ol><li>如果你安装了的，可以选择清空再安装配置</li><li>如果配置了其他的https请关闭，我就是配置了apache的https所以关闭了</li><li>我这里是做了端口重定向，100端口是我Apache php的应用你们按需配置就好</li><li>关闭Apache 的方法是找到配置https 和ssl文件把443端口关闭，和80端口重定向关闭了</li><li>密钥放在nginx文件夹下的cert文件下自己创建的，这个如果不会看我之前php配置的那个<a href="https://yhf7.github.io/2019/04/18/%E9%98%BF%E9%87%8C%E4%BA%91Apache%E9%85%8D%E7%BD%AEhttps/" target="_blank" rel="noopener">php配置https</a></li></ol><h1 id="开始"><a href="#开始" class="headerlink" title="开始"></a>开始</h1><h3 id="查看并清除nginx-（未安装的不需要看）"><a href="#查看并清除nginx-（未安装的不需要看）" class="headerlink" title="查看并清除nginx （未安装的不需要看）"></a>查看并清除nginx （未安装的不需要看）</h3><ol><li>查看安装<figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">$ rpm -ql nginx</span><br></pre></td></tr></table></figure></li></ol><p><img src="/aly/ng1.png" alt="nginx"></p><ol start="2"><li>清除nginx<figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">$ yum remove nginx</span><br></pre></td></tr></table></figure></li></ol><p><img src="/aly/ng2.png" alt="nginx"></p><h3 id="安装"><a href="#安装" class="headerlink" title="安装"></a>安装</h3><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">$ yum -y install nginx</span><br></pre></td></tr></table></figure><p><img src="/aly/ng3.png" alt="nginx"></p><h3 id="配置-https-证书自己下不会的找我之前的php配置的去看-如果像我一样配置了apache的https的请自行关闭"><a href="#配置-https-证书自己下不会的找我之前的php配置的去看-如果像我一样配置了apache的https的请自行关闭" class="headerlink" title="配置 https (证书自己下不会的找我之前的php配置的去看,如果像我一样配置了apache的https的请自行关闭)"></a>配置 https (证书自己下不会的找我之前的php配置的去看,如果像我一样配置了apache的https的请自行关闭)</h3><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br><span class="line">64</span><br><span class="line">65</span><br><span class="line">66</span><br><span class="line">67</span><br><span class="line">68</span><br></pre></td><td class="code"><pre><span class="line">$ vim /etc/nginx/nginx.conf</span><br><span class="line"></span><br><span class="line">------------</span><br><span class="line">http &#123;</span><br><span class="line">    log_format  main  <span class="string">'$remote_addr - $remote_user [$time_local] "$request" '</span></span><br><span class="line">                      <span class="string">'$status $body_bytes_sent "$http_referer" '</span></span><br><span class="line">                      <span class="string">'"$http_user_agent" "$http_x_forwarded_for"'</span>;</span><br><span class="line"></span><br><span class="line">    access_log  /var/<span class="built_in">log</span>/nginx/access.log  main;</span><br><span class="line"></span><br><span class="line">    sendfile            on;</span><br><span class="line">    tcp_nopush          on;</span><br><span class="line">    tcp_nodelay         on;</span><br><span class="line">    keepalive_timeout   65;</span><br><span class="line">    types_hash_max_size 2048;</span><br><span class="line"></span><br><span class="line">    include             /etc/nginx/mime.types;</span><br><span class="line">    default_type        application/octet-stream;</span><br><span class="line"></span><br><span class="line">    include /etc/nginx/conf.d/*.conf;</span><br><span class="line"></span><br><span class="line"><span class="comment"># 多端口使用https 代理8888 挂载node</span></span><br><span class="line">server &#123;</span><br><span class="line">        listen       8888 ssl;</span><br><span class="line">        server_name  yhf7.top; <span class="comment"># 域名</span></span><br><span class="line">        ssl on;</span><br><span class="line">        root         html;</span><br><span class="line"></span><br><span class="line">        index index.html index.htm;</span><br><span class="line">        ssl_certificate <span class="string">"cert/yhf7.top.pem"</span>; <span class="comment"># 密钥</span></span><br><span class="line">        ssl_certificate_key <span class="string">"cert/yhf7.top.key"</span>;<span class="comment"># 密钥</span></span><br><span class="line">        ssl_session_cache shared:SSL:1m;</span><br><span class="line">        ssl_session_timeout  5m;</span><br><span class="line">        ssl_ciphers ECDHE-RSA-AES128-GCM-SHA256:ECDHE:ECDH:AES:HIGH:!NULL:!aNULL:!MD5:!ADH:!RC4;<span class="comment"># 加密</span></span><br><span class="line">        ssl_protocols TLSv1 TLSv1.1 TLSv1.2;</span><br><span class="line">        ssl_prefer_server_ciphers on;</span><br><span class="line"></span><br><span class="line">        location / &#123;</span><br><span class="line">                root html;</span><br><span class="line">                index index.html index.htm;</span><br><span class="line">                proxy_pass http://yhf7.top:3000; <span class="comment"># 端口默认指向地</span></span><br><span class="line">        &#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="comment"># https 配置 80 443</span></span><br><span class="line">    server &#123;</span><br><span class="line">        listen 80;</span><br><span class="line">        listen       443 ssl;</span><br><span class="line">        server_name  yhf7.top; <span class="comment"># 域名</span></span><br><span class="line">        ssl on;</span><br><span class="line">        root         html;</span><br><span class="line"></span><br><span class="line">        index index.html index.htm;</span><br><span class="line">        ssl_certificate <span class="string">"cert/yhf7.top.pem"</span>; <span class="comment"># 密钥</span></span><br><span class="line">        ssl_certificate_key <span class="string">"cert/yhf7.top.key"</span>;<span class="comment"># 密钥</span></span><br><span class="line">        ssl_session_cache shared:SSL:1m;</span><br><span class="line">        ssl_session_timeout  5m;</span><br><span class="line">        ssl_ciphers ECDHE-RSA-AES128-GCM-SHA256:ECDHE:ECDH:AES:HIGH:!NULL:!aNULL:!MD5:!ADH:!RC4;<span class="comment"># 加密</span></span><br><span class="line">        ssl_protocols TLSv1 TLSv1.1 TLSv1.2;</span><br><span class="line">        ssl_prefer_server_ciphers on;</span><br><span class="line"></span><br><span class="line">        location / &#123;</span><br><span class="line">                root html;</span><br><span class="line">                index index.html index.htm;</span><br><span class="line">                proxy_pass http://yhf7.top:100; <span class="comment"># 端口默认指向地</span></span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p><img src="/aly/ng4.png" alt="nginx"></p><h4 id="nginx重定向apache的应用-（Apache的默认80端口必须改变不然就和nginx冲突了）"><a href="#nginx重定向apache的应用-（Apache的默认80端口必须改变不然就和nginx冲突了）" class="headerlink" title="nginx重定向apache的应用 （Apache的默认80端口必须改变不然就和nginx冲突了）"></a>nginx重定向apache的应用 （Apache的默认80端口必须改变不然就和nginx冲突了）</h4><ul><li>由于前面配置了默认进入，所以改变端口 就可以了<figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">$ vim /etc/httpd/conf/httpd.conf</span><br></pre></td></tr></table></figure></li></ul><p><img src="/aly/ng6.png" alt="nginx"></p><h3 id="查看效果"><a href="#查看效果" class="headerlink" title="查看效果"></a>查看效果</h3><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line">$ nginx 开启</span><br><span class="line">$ nginx -s reload 重启</span><br><span class="line">$ nginx -s stop 关闭</span><br></pre></td></tr></table></figure><p><img src="/aly/ng5.png" alt="nginx"><br><img src="/aly/ng8.png" alt="nginx"></p><h3 id="预防不会关闭Apache-https"><a href="#预防不会关闭Apache-https" class="headerlink" title="预防不会关闭Apache https"></a>预防不会关闭Apache https</h3><ol><li>关闭httpd重定向<figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">$ vim /etc/httpd/conf/httpd.conf</span><br></pre></td></tr></table></figure></li></ol><p><img src="/aly/ng7.png" alt="nginx"></p><ol start="2"><li><p>关闭httpd ssl 端口</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">$ vim /etc/httpd/conf.d/ssl.conf</span><br></pre></td></tr></table></figure></li><li><p>重启httpd</p></li></ol><h1 id="后记"><a href="#后记" class="headerlink" title="后记"></a>后记</h1><ul><li>这就是我踩很多坑最后配置出来的笔记，希望能帮到有缘人，欢迎同行加微信交流学习！</li><li><a href="https://yhf7.github.io/" target="_blank" rel="noopener">欢迎进入我的博客</a>：<a href="https://yhf7.github.io/" target="_blank" rel="noopener">https://yhf7.github.io/</a></li><li>如果有什么侵权的话，请及时添加小编微信以及qq也可以来告诉小编（905477376微信qq通用），谢谢！</li></ul>]]></content>
      
      
      <categories>
          
          <category> 服务器 </category>
          
      </categories>
      
      
        <tags>
            
            <tag> 反向代理 </tag>
            
        </tags>
      
    </entry>
    
    <entry>
      <title>vue-cli3 部局多页面开发/模块化</title>
      <link href="/2019/04/26/vue-cli3-%E5%A4%9A%E9%A1%B5%E9%9D%A2%E5%BC%80%E5%8F%91/"/>
      <url>/2019/04/26/vue-cli3-%E5%A4%9A%E9%A1%B5%E9%9D%A2%E5%BC%80%E5%8F%91/</url>
      
        <content type="html"><![CDATA[<link rel="stylesheet" class="aplayer-secondary-style-marker" href="/assets/css/APlayer.min.css"><script src="/assets/js/APlayer.min.js" class="aplayer-secondary-script-marker"></script><h1 id="前言"><a href="#前言" class="headerlink" title="前言"></a>前言</h1><ul><li>vue我们众所周知的是单页面开发，那么我们想把它多页面化模块化呢</li><li>那该如何来个改才能达到多页面多模块的效果呢</li><li>如何可以模块之间无关联无污染呢</li><li>为什么要这样去写呢？有什么好处呢？</li><li>第一、一个项目中有两端同的业务可以很好的区分两个项目之间无污染无关联</li><li>第二、公共资源共享公共组件视图多项目共用</li><li>第三、打包方便一次打包就可以了不需要分开多次去打包配置也只是需要配置一次</li><li>那我们就来走入vue多页面开发系列吧跟着我一步一步的配置多页面</li></ul><h1 id="开始"><a href="#开始" class="headerlink" title="开始"></a>开始</h1><ul><li>先看一下目录图<br><img src="/vue-cli/vue3-cli-1.png" alt="vue-cli"><br><img src="/vue-cli/vue3-cli-2.png" alt="vue-cli"></li></ul><h3 id="配置"><a href="#配置" class="headerlink" title="配置"></a>配置</h3><ul><li>文件的创建那些就不多说了不懂你私我好吧</li><li>直接配置一目了然<figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br></pre></td><td class="code"><pre><span class="line"><span class="built_in">module</span>.exports = &#123;</span><br><span class="line">    pages: &#123;</span><br><span class="line">        main: &#123;</span><br><span class="line">            entry: <span class="string">'src/module/index/main.js'</span>, <span class="comment">// 模块加载文件</span></span><br><span class="line">            <span class="comment">// 模板来源</span></span><br><span class="line">            template: <span class="string">'public/index.html'</span>,<span class="comment">// 模块入口文件, 默认进入文件（因为是放在根目录所以就会默认进入，如果不想可以改其他）</span></span><br><span class="line">            filename: <span class="string">'index.html'</span>,     </span><br><span class="line">            <span class="comment">// 当使用 title 选项时，</span></span><br><span class="line">            <span class="comment">// template 中的 title 标签需要是 &lt;title&gt;&lt;%= htmlWebpackPlugin.options.title %&gt;&lt;/title&gt;</span></span><br><span class="line">            title: <span class="string">''</span></span><br><span class="line">        &#125;,</span><br><span class="line">        login: &#123;</span><br><span class="line">            entry: <span class="string">'src/module/login/main.js'</span>, <span class="comment">// 第二个页面的模版加载文件地址</span></span><br><span class="line">            <span class="comment">// 模板来源</span></span><br><span class="line">            template: <span class="string">'public/login/index.html'</span>, <span class="comment">// 入口文件</span></span><br><span class="line">            filename: <span class="string">'login/index.html'</span>,</span><br><span class="line">            <span class="comment">// 当使用 title 选项时，</span></span><br><span class="line">            <span class="comment">// template 中的 title 标签需要是 &lt;title&gt;&lt;%= htmlWebpackPlugin.options.title %&gt;&lt;/title&gt;</span></span><br><span class="line">            title: <span class="string">''</span></span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure></li></ul><p><img src="/vue-cli/vue3-cli-3.png" alt="vue-cli"></p><h3 id="查看结果"><a href="#查看结果" class="headerlink" title="查看结果"></a>查看结果</h3><p><img src="/vue-cli/vue3-cli-4.png" alt="vue-cli"></p><h2 id=""><a href="#" class="headerlink" title=""></a><img src="/vue-cli/vue3-cli-5.png" alt="vue-cli"></h2><h4 id="注意：-不是默认进入必须和我那样写，你也可以不需要默认进入，可以改成和login那样也是可以的只是改一下入口文件，吧index-html和login一样放到文件夹里面就可以了"><a href="#注意：-不是默认进入必须和我那样写，你也可以不需要默认进入，可以改成和login那样也是可以的只是改一下入口文件，吧index-html和login一样放到文件夹里面就可以了" class="headerlink" title="注意： 不是默认进入必须和我那样写，你也可以不需要默认进入，可以改成和login那样也是可以的只是改一下入口文件，吧index.html和login一样放到文件夹里面就可以了"></a>注意： 不是默认进入必须和我那样写，你也可以不需要默认进入，可以改成和login那样也是可以的只是改一下入口文件，吧index.html和login一样放到文件夹里面就可以了</h4><h1 id="后记"><a href="#后记" class="headerlink" title="后记"></a>后记</h1><ul><li>这就是vue多页面开发，是不是觉得很简单啊</li><li><a href="https://yhf7.github.io/" target="_blank" rel="noopener">欢迎进入我的博客</a>：<a href="https://yhf7.github.io/" target="_blank" rel="noopener">https://yhf7.github.io/</a></li><li>如果有什么侵权的话，请及时添加小编微信以及qq也可以来告诉小编（905477376微信qq通用），谢谢！</li></ul>]]></content>
      
      
      <categories>
          
          <category> Vue </category>
          
      </categories>
      
      
        <tags>
            
            <tag> Vue 案例 </tag>
            
        </tags>
      
    </entry>
    
    <entry>
      <title>TypeScript 自学笔记9 高级类型</title>
      <link href="/2019/04/25/TypeScript%E7%AC%94%E8%AE%B09/"/>
      <url>/2019/04/25/TypeScript%E7%AC%94%E8%AE%B09/</url>
      
        <content type="html"><![CDATA[<link rel="stylesheet" class="aplayer-secondary-style-marker" href="/assets/css/APlayer.min.css"><script src="/assets/js/APlayer.min.js" class="aplayer-secondary-script-marker"></script><h1 id="前言"><a href="#前言" class="headerlink" title="前言"></a>前言</h1><ul><li>断断续续还是不忘想把ts学习完</li><li>终于忙完可以继续学习了</li><li>今天学习高级类型</li></ul><h1 id="高级类型"><a href="#高级类型" class="headerlink" title="高级类型"></a>高级类型</h1><h3 id="交叉类型（Intersection-Types）"><a href="#交叉类型（Intersection-Types）" class="headerlink" title="交叉类型（Intersection Types）"></a>交叉类型（Intersection Types）</h3><ul><li>简单的说就是把多个类中的所以方法和变量都集中在一个类型里面</li><li>交叉类型是将多个类型合并为一个类型。 这让我们可以把现有的多种类型叠加到一起成为一种类型，它包含了所需的所有类型的特性。 例如， Person &amp; Serializable &amp; Loggable同时是 Person 和 Serializable 和 Loggable。 就是说这个类型的对象同时拥有了这三种类型的成员。</li><li>我们大多是在混入（mixins）或其它不适合典型面向对象模型的地方看到交叉类型的使用。 （在JavaScript里发生这种情况的场合很多！） 下面是如何创建混入的一个简单例子：</li></ul><figure class="highlight typescript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">// 交叉类型函数</span></span><br><span class="line"><span class="comment">/**</span></span><br><span class="line"><span class="comment"> * @param</span></span><br><span class="line"><span class="comment"> * T、U 两个都是外传的方法（ts函数自检测类型）</span></span><br><span class="line"><span class="comment"> * */</span></span><br><span class="line"><span class="function"><span class="keyword">function</span> <span class="title">extend</span>&lt;<span class="title">T</span>, <span class="title">U</span>&gt;(<span class="params">first: T, second: U</span>): <span class="title">T</span> &amp; <span class="title">U</span> </span>&#123;</span><br><span class="line">  <span class="comment">// 创建这两个类型合集的对象</span></span><br><span class="line">  <span class="keyword">let</span> result = &lt;T &amp; U&gt;&#123;&#125;;</span><br><span class="line">  <span class="comment">// 遍历把数据存储到新的对象中</span></span><br><span class="line">  <span class="keyword">for</span> (<span class="keyword">let</span> id <span class="keyword">in</span> first) &#123;</span><br><span class="line">      (&lt;<span class="built_in">any</span>&gt;result)[id] = (&lt;<span class="built_in">any</span>&gt;first)[id];</span><br><span class="line">  &#125;</span><br><span class="line">  <span class="comment">// 输出查看</span></span><br><span class="line">  <span class="built_in">console</span>.log(result) <span class="comment">//1</span></span><br><span class="line">  <span class="comment">// 遍历第二个参赛</span></span><br><span class="line">  <span class="keyword">for</span> (<span class="keyword">let</span> id <span class="keyword">in</span> second) &#123;</span><br><span class="line">      <span class="keyword">if</span> (!result.hasOwnProperty(id)) &#123;</span><br><span class="line">          (&lt;<span class="built_in">any</span>&gt;result)[id] = (&lt;<span class="built_in">any</span>&gt;second)[id];</span><br><span class="line">      &#125;</span><br><span class="line">  &#125;</span><br><span class="line">  <span class="built_in">console</span>.log(result)<span class="comment">//2</span></span><br><span class="line">  <span class="comment">// 返回</span></span><br><span class="line">  <span class="keyword">return</span> result;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="comment">// 定义一个类，实现构造函数和一个方法</span></span><br><span class="line"><span class="keyword">class</span> Person &#123;</span><br><span class="line">  <span class="keyword">constructor</span>(<span class="params"><span class="keyword">public</span> name: <span class="built_in">string</span></span>) &#123; &#125;</span><br><span class="line">  test() &#123;</span><br><span class="line">    <span class="comment">// ...</span></span><br><span class="line">    <span class="built_in">console</span>.log(<span class="string">'hello, '</span>+<span class="keyword">this</span>.name) <span class="comment">//5</span></span><br><span class="line">  &#125;</span><br><span class="line">&#125;</span><br><span class="line"><span class="comment">// 抽象类</span></span><br><span class="line"><span class="keyword">interface</span> Loggable &#123;</span><br><span class="line">  log(): <span class="built_in">void</span>;</span><br><span class="line">&#125;</span><br><span class="line"><span class="comment">// 实现抽象类</span></span><br><span class="line"><span class="keyword">class</span> ConsoleLogger <span class="keyword">implements</span> Loggable &#123;</span><br><span class="line">  log() &#123;</span><br><span class="line">      <span class="comment">// ...</span></span><br><span class="line">     <span class="built_in">console</span>.log(<span class="string">'你好'</span>)  <span class="comment">//4</span></span><br><span class="line">  &#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="comment">// 这里调用extend函数传入两个不同的类型，一个是类，一个是抽象类</span></span><br><span class="line"><span class="keyword">var</span> jim = extend(<span class="keyword">new</span> Person(<span class="string">"Jim"</span>), <span class="keyword">new</span> ConsoleLogger());</span><br><span class="line"><span class="comment">// 接受name</span></span><br><span class="line"><span class="keyword">var</span> n = jim.name;</span><br><span class="line"><span class="built_in">console</span>.log(n) <span class="comment">//3</span></span><br><span class="line"><span class="comment">// 调用方法</span></span><br><span class="line">jim.log();</span><br><span class="line">jim.test();</span><br><span class="line"></span><br><span class="line"><span class="comment">// 最后输出的值(后面的号码对应上面的log)</span></span><br><span class="line"><span class="comment">// &#123; name: 'Jim', test: [Function] &#125; //1</span></span><br><span class="line"><span class="comment">// &#123; name: 'Jim', test: [Function], log: [Function] &#125;//2</span></span><br><span class="line"><span class="comment">// Jim //3</span></span><br><span class="line"><span class="comment">// 你好 //4</span></span><br><span class="line"><span class="comment">// hello, Jim //5</span></span><br></pre></td></tr></table></figure><h3 id="联合类型（Union-Types）"><a href="#联合类型（Union-Types）" class="headerlink" title="联合类型（Union Types）"></a>联合类型（Union Types）</h3><ul><li>这个理解起来不难，其实就是说通过数字或字符串的判断来区分判断修改</li><li>联合类型与交叉类型很有关联，但是使用上却完全不同。 偶尔你会遇到这种情况，一个代码库希望传入 number或 string类型的参数。 例如下面的函数：<figure class="highlight typescript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">/**</span></span><br><span class="line"><span class="comment"> * 模仿联合类型</span></span><br><span class="line"><span class="comment"> * @param</span></span><br><span class="line"><span class="comment"> * value &#123;string&#125; 字符串</span></span><br><span class="line"><span class="comment"> * padding &#123;any&#125; 任意类型</span></span><br><span class="line"><span class="comment"> * */</span></span><br><span class="line"><span class="function"><span class="keyword">function</span> <span class="title">padLeft</span>(<span class="params">value: <span class="built_in">string</span>, padding: <span class="built_in">any</span></span>) </span>&#123;</span><br><span class="line">  <span class="comment">// 判断是数字类型在前面加数字多个空格</span></span><br><span class="line">  <span class="keyword">if</span> (<span class="keyword">typeof</span> padding === <span class="string">"number"</span>) &#123;</span><br><span class="line">      <span class="keyword">return</span> <span class="built_in">Array</span>(padding + <span class="number">1</span>).join(<span class="string">" "</span>) + value;</span><br><span class="line">  &#125;</span><br><span class="line">  <span class="comment">// 如果是字符串就直接加在前面</span></span><br><span class="line">  <span class="keyword">if</span> (<span class="keyword">typeof</span> padding === <span class="string">"string"</span>) &#123;</span><br><span class="line">      <span class="keyword">return</span> padding + value;</span><br><span class="line">  &#125;</span><br><span class="line">  <span class="keyword">throw</span> <span class="keyword">new</span> <span class="built_in">Error</span>(<span class="string">`Expected string or number, got '<span class="subst">$&#123;padding&#125;</span>'.`</span>);</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="comment">// 数字</span></span><br><span class="line">padLeft(<span class="string">"Hello world"</span>, <span class="number">4</span>); <span class="comment">// returns "    Hello world"</span></span><br><span class="line"><span class="comment">// 字符串</span></span><br><span class="line">padLeft(<span class="string">"Hello world"</span>, <span class="string">"4"</span>); <span class="comment">// returns "4Hello world"</span></span><br></pre></td></tr></table></figure></li></ul><hr><ul><li>padLeft存在一个问题， padding参数的类型指定成了 any。 这就是说我们可以传入一个既不是 number也不是 string类型的参数，但是TypeScript却不报错。</li><li>let indentedString = padLeft(“Hello world”, true); // 编译阶段通过，运行时报错</li><li>这时候联合类型就派上用场了,代替any从源头上解决问题 （并不是只有string和number，boolean等也是可以使用的）<figure class="highlight typescript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line"><span class="function"><span class="keyword">function</span> <span class="title">padLeft</span>(<span class="params">value: <span class="built_in">string</span>, padding: <span class="built_in">string</span> | <span class="built_in">number</span></span>) </span>&#123;</span><br><span class="line">    <span class="comment">// ...</span></span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="keyword">let</span> indentedString = padLeft(<span class="string">"Hello world"</span>, <span class="literal">true</span>);<span class="comment">// errors during compilation</span></span><br></pre></td></tr></table></figure></li></ul><hr><ul><li>如果一个值是联合类型，我们只能访问此联合类型的所有类型里共有的成员。</li><li>这个在前面一章算数哪里已经验证过了</li><li>这里的联合类型可能有点复杂，但是你很容易就习惯了。 如果一个值的类型是 A | B，我们能够 确定的是它包含了 A 和 B中共有的成员。 这个例子里， Bird具有一个 fly成员。 我们不能确定一个 Bird | Fish类型的变量是否有 fly方法。 如果变量在运行时是 Fish类型，那么调用 pet.fly()就出错了。<figure class="highlight typescript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">interface</span> Bird &#123;</span><br><span class="line">  fly();</span><br><span class="line">  layEggs();</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="keyword">interface</span> Fish &#123;</span><br><span class="line">  swim();</span><br><span class="line">  layEggs();</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="keyword">class</span> Bird1 <span class="keyword">implements</span> Bird &#123;</span><br><span class="line">  fly() &#123;</span><br><span class="line">    <span class="built_in">console</span>.log(<span class="string">'fly'</span>)</span><br><span class="line">  &#125;</span><br><span class="line">  layEggs() &#123;</span><br><span class="line">    <span class="built_in">console</span>.log(<span class="string">'layEggs'</span>)</span><br><span class="line">  &#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="keyword">class</span> Fish1 <span class="keyword">implements</span> Fish &#123;</span><br><span class="line">  swim() &#123;</span><br><span class="line">    <span class="built_in">console</span>.log(<span class="string">'swim'</span>)</span><br><span class="line">  &#125;</span><br><span class="line">  layEggs() &#123;</span><br><span class="line">    <span class="built_in">console</span>.log(<span class="string">'layEggs'</span>)</span><br><span class="line">  &#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">function</span> <span class="title">getSmallPet</span>(<span class="params"></span>): <span class="title">Fish</span> | <span class="title">Bird</span> </span>&#123;</span><br><span class="line">  <span class="keyword">if</span> (<span class="built_in">Math</span>.random() &gt; <span class="number">0.5</span>) &#123;</span><br><span class="line">    <span class="keyword">return</span> <span class="keyword">new</span> Fish1()</span><br><span class="line">  &#125; <span class="keyword">else</span> &#123;</span><br><span class="line">    <span class="keyword">return</span> <span class="keyword">new</span> Bird1()</span><br><span class="line">  &#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="keyword">let</span> pet = getSmallPet();</span><br><span class="line">pet.layEggs(); <span class="comment">// layEggs</span></span><br><span class="line">pet.swim();   <span class="comment">// errors</span></span><br></pre></td></tr></table></figure></li></ul><h3 id="类型保护与区分类型（Type-Guards-and-Differentiating-Types）"><a href="#类型保护与区分类型（Type-Guards-and-Differentiating-Types）" class="headerlink" title="类型保护与区分类型（Type Guards and Differentiating Types）"></a>类型保护与区分类型（Type Guards and Differentiating Types）</h3><ul><li>联合类型适合于那些值可以为不同类型的情况。 但当我们想确切地了解是否为 Fish时怎么办？ JavaScript里常用来区分2个可能值的方法是检查成员是否存在。 如之前提及的，我们只能访问联合类型中共同拥有的成员。<figure class="highlight typescript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">let</span> pet = getSmallPet();</span><br><span class="line"></span><br><span class="line"><span class="comment">// 每一个成员访问都会报错</span></span><br><span class="line"><span class="keyword">if</span> (pet.swim) &#123;</span><br><span class="line">    pet.swim();</span><br><span class="line">&#125;</span><br><span class="line"><span class="keyword">else</span> <span class="keyword">if</span> (pet.fly) &#123;</span><br><span class="line">    pet.fly();</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="comment">// 正确解法</span></span><br><span class="line"><span class="keyword">if</span> ((&lt;Fish&gt;pet).swim) &#123;</span><br><span class="line">    (&lt;Fish&gt;pet).swim();</span><br><span class="line">&#125;</span><br><span class="line"><span class="keyword">else</span> &#123;</span><br><span class="line">    (&lt;Bird&gt;pet).fly();</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="comment">// 联合上面的代码一起执行，输出的结果会有两种情况（随机的）</span></span><br><span class="line"><span class="comment">//1 </span></span><br><span class="line">layEggs</span><br><span class="line">swim</span><br><span class="line"><span class="comment">//2</span></span><br><span class="line">layEggs</span><br><span class="line">fly</span><br></pre></td></tr></table></figure></li></ul><h4 id="用户自定义的类型保护"><a href="#用户自定义的类型保护" class="headerlink" title="用户自定义的类型保护"></a>用户自定义的类型保护</h4><ul><li>这里可以注意到我们不得不多次使用类型断言。 假若我们一旦检查过类型，就能在之后的每个分支里清楚地知道 pet的类型的话就好了。</li><li><p>TypeScript里的 类型保护机制让它成为了现实。 类型保护就是一些表达式，它们会在运行时检查以确保在某个作用域里的类型。 要定义一个类型保护，我们只要简单地定义一个函数，它的返回值是一个 类型谓词：</p><figure class="highlight typescript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line"><span class="function"><span class="keyword">function</span> <span class="title">isFish</span>(<span class="params">pet: Fish | Bird</span>): <span class="title">pet</span> <span class="title">is</span> <span class="title">Fish</span> </span>&#123;</span><br><span class="line">  <span class="keyword">return</span> (&lt;Fish&gt;pet).swim !== <span class="literal">undefined</span>;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure></li><li><p>每当使用一些变量调用 isFish时，TypeScript会将变量缩减为那个具体的类型，只要这个类型与变量的原始类型是兼容的。</p><figure class="highlight typescript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">// 'swim' 和 'fly' 调用都没有问题了</span></span><br><span class="line"></span><br><span class="line"><span class="keyword">if</span> (isFish(pet)) &#123;</span><br><span class="line">    pet.swim();</span><br><span class="line">&#125;</span><br><span class="line"><span class="keyword">else</span> &#123;</span><br><span class="line">    pet.fly();</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure></li><li><p>注意TypeScript不仅知道在 if分支里 pet是 Fish类型； 它还清楚在 else分支里，一定 不是 Fish类型，一定是 Bird类型</p></li></ul><h4 id="typeof类型保护"><a href="#typeof类型保护" class="headerlink" title="typeof类型保护"></a>typeof类型保护</h4><ul><li>现在我们回过头来看看怎么使用联合类型书写 padLeft代码。 我们可以像下面这样利用类型断言来写：</li><li>然而，必须要定义一个函数来判断类型是否是原始类型，这太痛苦了。 幸运的是，现在我们不必将 typeof x === “number”抽象成一个函数，因为TypeScript可以将它识别为一个类型保护。 也就是说我们可以直接在代码里检查类型了。</li></ul><figure class="highlight typescript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br></pre></td><td class="code"><pre><span class="line"><span class="function"><span class="keyword">function</span> <span class="title">isNumber</span>(<span class="params">x: <span class="built_in">any</span></span>): <span class="title">x</span> <span class="title">is</span> <span class="title">number</span> </span>&#123;</span><br><span class="line">    <span class="keyword">return</span> <span class="keyword">typeof</span> x === <span class="string">"number"</span>;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">function</span> <span class="title">isString</span>(<span class="params">x: <span class="built_in">any</span></span>): <span class="title">x</span> <span class="title">is</span> <span class="title">string</span> </span>&#123;</span><br><span class="line">    <span class="keyword">return</span> <span class="keyword">typeof</span> x === <span class="string">"string"</span>;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">function</span> <span class="title">padLeft</span>(<span class="params">value: <span class="built_in">string</span>, padding: <span class="built_in">string</span> | <span class="built_in">number</span></span>) </span>&#123;</span><br><span class="line">    <span class="keyword">if</span> (isNumber(padding)) &#123;</span><br><span class="line">        <span class="keyword">return</span> <span class="built_in">Array</span>(padding + <span class="number">1</span>).join(<span class="string">" "</span>) + value;</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">if</span> (isString(padding)) &#123;</span><br><span class="line">        <span class="keyword">return</span> padding + value;</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">throw</span> <span class="keyword">new</span> <span class="built_in">Error</span>(<span class="string">`Expected string or number, got '<span class="subst">$&#123;padding&#125;</span>'.`</span>);</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><ul><li>这些<em> typeof类型保护</em>只有两种形式能被识别： typeof v === “typename”和 typeof v !== “typename”， “typename”必须是 “number”， “string”， “boolean”或 “symbol”。 但是TypeScript并不会阻止你与其它字符串比较，语言不会把那些表达式识别为类型保护。<figure class="highlight typescript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br></pre></td><td class="code"><pre><span class="line"><span class="function"><span class="keyword">function</span> <span class="title">padLeft</span>(<span class="params">value: <span class="built_in">string</span>, padding: <span class="built_in">string</span> | <span class="built_in">number</span></span>) </span>&#123;</span><br><span class="line">    <span class="keyword">if</span> (<span class="keyword">typeof</span> padding === <span class="string">"number"</span>) &#123;</span><br><span class="line">        <span class="keyword">return</span> <span class="built_in">Array</span>(padding + <span class="number">1</span>).join(<span class="string">" "</span>) + value;</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">if</span> (<span class="keyword">typeof</span> padding === <span class="string">"string"</span>) &#123;</span><br><span class="line">        <span class="keyword">return</span> padding + value;</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">throw</span> <span class="keyword">new</span> <span class="built_in">Error</span>(<span class="string">`Expected string or number, got '<span class="subst">$&#123;padding&#125;</span>'.`</span>);</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure></li></ul><h3 id="instanceof类型保护"><a href="#instanceof类型保护" class="headerlink" title="instanceof类型保护"></a>instanceof类型保护</h3><ul><li><p>如果你已经阅读了 typeof类型保护并且对JavaScript里的 instanceof操作符熟悉的话，你可能已经猜到了这节要讲的内容。</p></li><li><p>instanceof类型保护是通过构造函数来细化类型的一种方式。 比如，我们借鉴一下之前字符串填充的例子：</p><figure class="highlight typescript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">interface</span> Padder &#123;</span><br><span class="line">    getPaddingString(): <span class="built_in">string</span></span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="keyword">class</span> SpaceRepeatingPadder <span class="keyword">implements</span> Padder &#123;</span><br><span class="line">    <span class="keyword">constructor</span>(<span class="params"><span class="keyword">private</span> numSpaces: <span class="built_in">number</span></span>) &#123; &#125;</span><br><span class="line">    getPaddingString() &#123;</span><br><span class="line">        <span class="keyword">return</span> <span class="built_in">Array</span>(<span class="keyword">this</span>.numSpaces + <span class="number">1</span>).join(<span class="string">" "</span>);</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="keyword">class</span> StringPadder <span class="keyword">implements</span> Padder &#123;</span><br><span class="line">    <span class="keyword">constructor</span>(<span class="params"><span class="keyword">private</span> value: <span class="built_in">string</span></span>) &#123; &#125;</span><br><span class="line">    getPaddingString() &#123;</span><br><span class="line">        <span class="keyword">return</span> <span class="keyword">this</span>.value;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">function</span> <span class="title">getRandomPadder</span>(<span class="params"></span>) </span>&#123;</span><br><span class="line">    <span class="keyword">return</span> <span class="built_in">Math</span>.random() &lt; <span class="number">0.5</span> ?</span><br><span class="line">        <span class="keyword">new</span> SpaceRepeatingPadder(<span class="number">4</span>) :</span><br><span class="line">        <span class="keyword">new</span> StringPadder(<span class="string">"  "</span>);</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="comment">// 类型为SpaceRepeatingPadder | StringPadder</span></span><br><span class="line"><span class="keyword">let</span> padder: Padder = getRandomPadder();</span><br><span class="line"></span><br><span class="line"><span class="keyword">if</span> (padder <span class="keyword">instanceof</span> SpaceRepeatingPadder) &#123;</span><br><span class="line">    padder; <span class="comment">// 类型细化为'SpaceRepeatingPadder'</span></span><br><span class="line">&#125;</span><br><span class="line"><span class="keyword">if</span> (padder <span class="keyword">instanceof</span> StringPadder) &#123;</span><br><span class="line">    padder; <span class="comment">// 类型细化为'StringPadder'</span></span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure></li><li><p>instanceof的右侧要求是一个构造函数，TypeScript将细化为：</p><ol><li>此构造函数的 prototype属性的类型，如果它的类型不为 any的话</li><li>构造签名所返回的类型的联合</li></ol></li></ul><h3 id="可以为null的类型"><a href="#可以为null的类型" class="headerlink" title="可以为null的类型"></a>可以为null的类型</h3><ul><li><p>TypeScript具有两种特殊的类型， null和 undefined，它们分别具有值null和undefined. 我们在<a href="./Basic Types.md">基础类型</a>一节里已经做过简要说明。 默认情况下，类型检查器认为 null与 undefined可以赋值给任何类型。 null与 undefined是所有其它类型的一个有效值。 这也意味着，你阻止不了将它们赋值给其它类型，就算是你想要阻止这种情况也不行。 null的发明者，Tony Hoare，称它为 价值亿万美金的错误。</p></li><li><p>–strictNullChecks标记可以解决此错误：当你声明一个变量时，它不会自动地包含 null或 undefined。 你可以使用联合类型明确的包含它们：</p></li><li><p>当是我们自己去赋值的时候其实都是可以的并没有报错</p><figure class="highlight typescript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">let</span> s = <span class="string">"foo"</span>;</span><br><span class="line">s = <span class="literal">null</span>; <span class="comment">// 错误, 'null'不能赋值给'string'</span></span><br><span class="line"><span class="keyword">let</span> sn: <span class="built_in">string</span> | <span class="literal">null</span> = <span class="string">"bar"</span>;</span><br><span class="line">sn = <span class="literal">null</span>; <span class="comment">// 可以</span></span><br><span class="line"></span><br><span class="line">sn = <span class="literal">undefined</span>; <span class="comment">// error, 'undefined'不能赋值给'string | null'</span></span><br></pre></td></tr></table></figure></li><li><p>注意，按照JavaScript的语义，TypeScript会把 null和 undefined区别对待。 string | null， string | undefined和 string | undefined | null是不同的类型。</p></li></ul><h4 id="可选参数和可选属性"><a href="#可选参数和可选属性" class="headerlink" title="可选参数和可选属性"></a>可选参数和可选属性</h4><ul><li>使用了 –strictNullChecks，可选参数会被自动地加上 | undefined:</li><li>然而这个也是无报错的<figure class="highlight typescript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br></pre></td><td class="code"><pre><span class="line"><span class="function"><span class="keyword">function</span> <span class="title">f</span>(<span class="params">x: <span class="built_in">number</span>, y?: <span class="built_in">number</span></span>) </span>&#123;</span><br><span class="line">    <span class="keyword">return</span> x + (y || <span class="number">0</span>);</span><br><span class="line">&#125;</span><br><span class="line">f(<span class="number">1</span>, <span class="number">2</span>);</span><br><span class="line">f(<span class="number">1</span>);</span><br><span class="line">f(<span class="number">1</span>, <span class="literal">undefined</span>);</span><br><span class="line">f(<span class="number">1</span>, <span class="literal">null</span>); <span class="comment">// error, 'null' is not assignable to 'number | undefined'</span></span><br><span class="line"></span><br><span class="line"><span class="comment">// 类的也是一样没有报错正常执行</span></span><br><span class="line"><span class="keyword">class</span> C &#123;</span><br><span class="line">    a: <span class="built_in">number</span>;</span><br><span class="line">    b?: <span class="built_in">number</span>;</span><br><span class="line">&#125;</span><br><span class="line"><span class="keyword">let</span> c = <span class="keyword">new</span> C();</span><br><span class="line">c.a = <span class="number">12</span>;</span><br><span class="line">c.a = <span class="literal">undefined</span>; <span class="comment">// error, 'undefined' is not assignable to 'number'</span></span><br><span class="line">c.b = <span class="number">13</span>;</span><br><span class="line">c.b = <span class="literal">undefined</span>; <span class="comment">// ok</span></span><br><span class="line">c.b = <span class="literal">null</span>; <span class="comment">// error, 'null' is not assignable to 'number | undefined'</span></span><br></pre></td></tr></table></figure></li></ul><h4 id="类型保护和类型断言"><a href="#类型保护和类型断言" class="headerlink" title="类型保护和类型断言"></a>类型保护和类型断言</h4><ul><li><p>由于可以为null的类型是通过联合类型实现，那么你需要使用类型保护来去除 null。 幸运地是这与在JavaScript里写的代码一致：</p><figure class="highlight typescript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line"><span class="function"><span class="keyword">function</span> <span class="title">f</span>(<span class="params">sn: <span class="built_in">string</span> | <span class="literal">null</span></span>): <span class="title">string</span> </span>&#123;</span><br><span class="line">  <span class="keyword">return</span> sn || <span class="string">"default"</span>;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="built_in">console</span>.log(f(<span class="string">"default1"</span>)); <span class="comment">//default1</span></span><br><span class="line"><span class="built_in">console</span>.log(f(<span class="literal">null</span>))<span class="comment">// default</span></span><br></pre></td></tr></table></figure></li><li><p>如果编译器不能够去除 null或 undefined，你可以使用类型断言手动去除。 语法是添加 !后缀： identifier!从 identifier的类型里去除了 null和 undefined：(我的支持并没有报错)</p><figure class="highlight typescript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br></pre></td><td class="code"><pre><span class="line"><span class="function"><span class="keyword">function</span> <span class="title">broken</span>(<span class="params">name: <span class="built_in">string</span> | <span class="literal">null</span></span>): <span class="title">string</span> </span>&#123;</span><br><span class="line">  <span class="function"><span class="keyword">function</span> <span class="title">postfix</span>(<span class="params">epithet: <span class="built_in">string</span></span>) </span>&#123;</span><br><span class="line">    <span class="keyword">return</span> name.charAt(<span class="number">0</span>) + <span class="string">'.  the '</span> + epithet; <span class="comment">// error, 'name' is possibly null</span></span><br><span class="line">  &#125;</span><br><span class="line">  name = name || <span class="string">"Bob"</span>;</span><br><span class="line">  <span class="keyword">return</span> postfix(<span class="string">"great"</span>);</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">function</span> <span class="title">fixed</span>(<span class="params">name: <span class="built_in">string</span> | <span class="literal">null</span></span>): <span class="title">string</span> </span>&#123;</span><br><span class="line">  <span class="function"><span class="keyword">function</span> <span class="title">postfix</span>(<span class="params">epithet: <span class="built_in">string</span></span>) </span>&#123;</span><br><span class="line">    <span class="keyword">return</span> name!.charAt(<span class="number">0</span>) + <span class="string">'.  the '</span> + epithet; <span class="comment">// ok</span></span><br><span class="line">  &#125;</span><br><span class="line">  name = name || <span class="string">"Bob"</span>;</span><br><span class="line">  <span class="keyword">return</span> postfix(<span class="string">"great"</span>);</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure></li></ul><h3 id="类型别名"><a href="#类型别名" class="headerlink" title="类型别名"></a>类型别名</h3><ul><li>类型别名会给一个类型起个新名字。 类型别名有时和接口很像，但是可以作用于原始值，联合类型，元组以及其它任何你需要手写的类型。</li></ul><figure class="highlight typescript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">type</span> Name = <span class="built_in">string</span>;</span><br><span class="line"><span class="keyword">type</span> NameResolver = <span class="function"><span class="params">()</span> =&gt;</span> <span class="built_in">string</span>;</span><br><span class="line"><span class="keyword">type</span> NameOrResolver = Name | NameResolver;</span><br><span class="line"><span class="function"><span class="keyword">function</span> <span class="title">getName</span>(<span class="params">n: NameOrResolver</span>): <span class="title">Name</span> </span>&#123;</span><br><span class="line">    <span class="keyword">if</span> (<span class="keyword">typeof</span> n === <span class="string">'string'</span>) &#123;</span><br><span class="line">        <span class="keyword">return</span> n;</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">else</span> &#123;</span><br><span class="line">        <span class="keyword">return</span> n();</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><ul><li>起别名不会新建一个类型 - 它创建了一个新 名字来引用那个类型。 给原始类型起别名通常没什么用，尽管可以做为文档的一种形式使用。</li><li><p>同接口一样，类型别名也可以是泛型 - 我们可以添加类型参数并且在别名声明的右侧传入：</p><figure class="highlight typescript"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">type</span> Container&lt;T&gt; = &#123; value: T &#125;;</span><br></pre></td></tr></table></figure></li><li><p>我们也可以使用类型别名来在属性里引用自己：</p><figure class="highlight typescript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">type</span> Tree&lt;T&gt; = &#123;</span><br><span class="line">    value: T;</span><br><span class="line">    left: Tree&lt;T&gt;;</span><br><span class="line">    right: Tree&lt;T&gt;;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure></li><li><p>与交叉类型一起使用，我们可以创建出一些十分稀奇古怪的类型</p><figure class="highlight typescript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">type</span> LinkedList&lt;T&gt; = T &amp; &#123; next: LinkedList&lt;T&gt; &#125;;</span><br><span class="line"></span><br><span class="line"><span class="keyword">interface</span> Person &#123;</span><br><span class="line">    name: <span class="built_in">string</span>;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="keyword">var</span> people: LinkedList&lt;Person&gt;;</span><br><span class="line"><span class="keyword">var</span> s = people.name;</span><br><span class="line"><span class="keyword">var</span> s = people.next.name;</span><br><span class="line"><span class="keyword">var</span> s = people.next.next.name;</span><br><span class="line"><span class="keyword">var</span> s = people.next.next.next.name;</span><br></pre></td></tr></table></figure></li><li><p>然而，类型别名不能出现在声明右侧的任何地方。</p><figure class="highlight typescript"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">type</span> Yikes = <span class="built_in">Array</span>&lt;Yikes&gt;; <span class="comment">// error</span></span><br></pre></td></tr></table></figure></li></ul><h4 id="接口-vs-类型别名"><a href="#接口-vs-类型别名" class="headerlink" title="接口 vs. 类型别名"></a>接口 vs. 类型别名</h4><ul><li><p>像我们提到的，类型别名可以像接口一样；然而，仍有一些细微差别。</p></li><li><p>其一，接口创建了一个新的名字，可以在其它任何地方使用。 类型别名并不创建新名字—比如，错误信息就不会使用别名。 在下面的示例代码里，在编译器中将鼠标悬停在 interfaced上，显示它返回的是 Interface，但悬停在 aliased上时，显示的却是对象字面量类型。</p></li><li>另一个重要区别是类型别名不能被 extends和 implements（自己也不能 extends和 implements其它类型）。 因为 软件中的对象应该对于扩展是开放的，但是对于修改是封闭的，你应该尽量去使用接口代替类型别名。</li><li>另一方面，如果你无法通过接口来描述一个类型并且需要使用联合类型或元组类型，这时通常会使用类型别名。<figure class="highlight typescript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">type</span> Alias = &#123; num: <span class="built_in">number</span> &#125;</span><br><span class="line"><span class="keyword">interface</span> Interface &#123;</span><br><span class="line">    num: <span class="built_in">number</span>;</span><br><span class="line">&#125;</span><br><span class="line"><span class="keyword">declare</span> <span class="function"><span class="keyword">function</span> <span class="title">aliased</span>(<span class="params">arg: Alias</span>): <span class="title">Alias</span></span>;</span><br><span class="line"><span class="keyword">declare</span> <span class="function"><span class="keyword">function</span> <span class="title">interfaced</span>(<span class="params">arg: Interface</span>): <span class="title">Interface</span></span>;</span><br></pre></td></tr></table></figure></li></ul><h3 id="字符串字面量类型"><a href="#字符串字面量类型" class="headerlink" title="字符串字面量类型"></a>字符串字面量类型</h3><ul><li>字符串字面量类型允许你指定字符串必须的固定值。 在实际应用中，字符串字面量类型可以与联合类型，类型保护和类型别名很好的配合。 通过结合使用这些特性，你可以实现类似枚举类型的字符串。</li><li><p>这样就可以很明确的去限定输入的字符面量，只可以输入限定的那结果字符串否则就是错误的</p><figure class="highlight typescript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">type</span> Easing = <span class="string">"ease-in"</span> | <span class="string">"ease-out"</span> | <span class="string">"ease-in-out"</span>;</span><br><span class="line"><span class="keyword">class</span> UIElement &#123;</span><br><span class="line">    animate(dx: <span class="built_in">number</span>, dy: <span class="built_in">number</span>, easing: Easing) &#123;</span><br><span class="line">        <span class="keyword">if</span> (easing === <span class="string">"ease-in"</span>) &#123;</span><br><span class="line">            <span class="comment">// ...</span></span><br><span class="line">        &#125;</span><br><span class="line">        <span class="keyword">else</span> <span class="keyword">if</span> (easing === <span class="string">"ease-out"</span>) &#123;</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="keyword">else</span> <span class="keyword">if</span> (easing === <span class="string">"ease-in-out"</span>) &#123;</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="keyword">else</span> &#123;</span><br><span class="line">            <span class="comment">// error! should not pass null or undefined.</span></span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="keyword">let</span> button = <span class="keyword">new</span> UIElement();</span><br><span class="line">button.animate(<span class="number">0</span>, <span class="number">0</span>, <span class="string">"ease-in"</span>);</span><br><span class="line">button.animate(<span class="number">0</span>, <span class="number">0</span>, <span class="string">"uneasy"</span>); <span class="comment">// error: "uneasy" is not allowed here</span></span><br><span class="line">Argument of <span class="keyword">type</span> <span class="string">'"uneasy"'</span> is not assignable to parameter of <span class="keyword">type</span> <span class="string">'"ease-in" | "ease-out" | "ease-in-out"'</span></span><br></pre></td></tr></table></figure></li><li><p>字符串字面量类型还可以用于区分函数重载：</p></li><li>就是说会检测重载时的变量和返回类型<figure class="highlight typescript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line">function createElement(tagName: "img"): HTMLImageElement;</span><br><span class="line">function createElement(tagName: "input"): HTMLInputElement;</span><br><span class="line"><span class="comment">// ... more overloads ...</span></span><br><span class="line"><span class="function"><span class="keyword">function</span> <span class="title">createElement</span>(<span class="params">tagName: <span class="built_in">string</span></span>): <span class="title">Element</span> </span>&#123;</span><br><span class="line">    <span class="comment">// ... code goes here ...</span></span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure></li></ul><h3 id="数字字面量类型"><a href="#数字字面量类型" class="headerlink" title="数字字面量类型"></a>数字字面量类型</h3><figure class="highlight typescript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br></pre></td><td class="code"><pre><span class="line"><span class="function"><span class="keyword">function</span> <span class="title">rollDie</span>(<span class="params"></span>): 1 | 2 | 3 | 4 | 5 | 6 </span>&#123;</span><br><span class="line">    <span class="comment">// ...</span></span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">function</span> <span class="title">foo</span>(<span class="params">x: <span class="built_in">number</span></span>) </span>&#123;</span><br><span class="line">    <span class="keyword">if</span> (x !== <span class="number">1</span> || x !== <span class="number">2</span>) &#123;</span><br><span class="line">        <span class="comment">//         ~~~~~~~</span></span><br><span class="line">        <span class="comment">// Operator '!==' cannot be applied to types '1' and '2'.</span></span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><ul><li>换句话说，当 x与 2进行比较的时候，它的值必须为 1，这就意味着上面的比较检查是非法的。</li></ul><h3 id="可辨识联合（Discriminated-Unions）"><a href="#可辨识联合（Discriminated-Unions）" class="headerlink" title="可辨识联合（Discriminated Unions）"></a>可辨识联合（Discriminated Unions）</h3><ul><li><p>你可以合并单例类型，联合类型，类型保护和类型别名来创建一个叫做 可辨识联合的高级模式，它也称做 标签联合或 代数数据类型。 可辨识联合在函数式编程很有用处。 一些语言会自动地为你辨识联合；而TypeScript则基于已有的JavaScript模式。 它具有3个要素：</p><ol><li>具有普通的单例类型属性— 可辨识的特征。</li><li>一个类型别名包含了那些类型的联合— 联合。</li><li>此属性上的类型保护。<figure class="highlight typescript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">interface</span> Square &#123;</span><br><span class="line">  kind: <span class="string">"square"</span>;</span><br><span class="line">  size: <span class="built_in">number</span>;</span><br><span class="line">&#125;</span><br><span class="line"><span class="keyword">interface</span> Rectangle &#123;</span><br><span class="line">  kind: <span class="string">"rectangle"</span>;</span><br><span class="line">  width: <span class="built_in">number</span>;</span><br><span class="line">  height: <span class="built_in">number</span>;</span><br><span class="line">&#125;</span><br><span class="line"><span class="keyword">interface</span> Circle &#123;</span><br><span class="line">  kind: <span class="string">"circle"</span>;</span><br><span class="line">  radius: <span class="built_in">number</span>;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="keyword">type</span> Shape = Square | Rectangle | Circle;</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">function</span> <span class="title">area</span>(<span class="params">s: Shape</span>) </span>&#123;</span><br><span class="line">  <span class="keyword">switch</span> (s.kind) &#123;</span><br><span class="line">      <span class="keyword">case</span> <span class="string">"square"</span>: <span class="keyword">return</span> s.size * s.size;</span><br><span class="line">      <span class="keyword">case</span> <span class="string">"rectangle"</span>: <span class="keyword">return</span> s.height * s.width;</span><br><span class="line">      <span class="keyword">case</span> <span class="string">"circle"</span>: <span class="keyword">return</span> <span class="built_in">Math</span>.PI * s.radius ** <span class="number">2</span>;</span><br><span class="line">      <span class="keyword">default</span>: <span class="keyword">return</span> assertNever(s); <span class="comment">// error here if there are missing cases</span></span><br><span class="line">    &#125;</span><br><span class="line">  &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure></li></ol></li><li><p>这里， assertNever检查 s是否为 never类型—即为除去所有可能情况后剩下的类型。 如果你忘记了某个case，那么 s将具有一个真实的类型并且你会得到一个错误。 这种方式需要你定义一个额外的函数，但是在你忘记某个case的时候也更加明显。</p></li></ul><h3 id="多态的-this类型"><a href="#多态的-this类型" class="headerlink" title="多态的 this类型"></a>多态的 this类型</h3><ul><li>多态的 this类型表示的是某个包含类或接口的 子类型。 这被称做 F-bounded多态性。 它能很容易的表现连贯接口间的继承，比如。 在计算器的例子里，在每个操作之后都返回 this类型：</li><li><p>这里this指向的就是数据</p><figure class="highlight typescript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">class</span> BasicCalculator &#123;</span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">constructor</span>(<span class="params"><span class="keyword">protected</span> value: <span class="built_in">number</span> = 0</span>) &#123; &#125;</span><br><span class="line">    <span class="keyword">public</span> currentValue(): <span class="built_in">number</span> &#123;</span><br><span class="line">        <span class="keyword">return</span> <span class="keyword">this</span>.value;</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">public</span> add(operand: <span class="built_in">number</span>): <span class="keyword">this</span> &#123;</span><br><span class="line">        <span class="keyword">this</span>.value += operand;</span><br><span class="line">        <span class="keyword">return</span> <span class="keyword">this</span>;</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">public</span> multiply(operand: <span class="built_in">number</span>): <span class="keyword">this</span> &#123;</span><br><span class="line">        <span class="keyword">this</span>.value *= operand;</span><br><span class="line">        <span class="keyword">return</span> <span class="keyword">this</span>;</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="comment">// ... other operations go here ...</span></span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="keyword">let</span> v = <span class="keyword">new</span> BasicCalculator(<span class="number">2</span>)</span><br><span class="line">            .multiply(<span class="number">5</span>)</span><br><span class="line">            .add(<span class="number">1</span>)</span><br><span class="line">            .currentValue();</span><br><span class="line">            <span class="comment">// 11</span></span><br></pre></td></tr></table></figure></li><li><p>由于这个类使用了 this类型，你可以继承它，新的类可以直接使用之前的方法，不需要做任何的改变。</p><figure class="highlight typescript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">class</span> ScientificCalculator <span class="keyword">extends</span> BasicCalculator &#123;</span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">constructor</span>(<span class="params">value = 0</span>) &#123;</span><br><span class="line">        <span class="keyword">super</span>(value);</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">public</span> sin() &#123;</span><br><span class="line">        <span class="keyword">this</span>.value = <span class="built_in">Math</span>.sin(<span class="keyword">this</span>.value);</span><br><span class="line">        <span class="keyword">return</span> <span class="keyword">this</span>;</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="comment">// ... other operations go here ...</span></span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="keyword">let</span> v = <span class="keyword">new</span> ScientificCalculator(<span class="number">2</span>)</span><br><span class="line">        .multiply(<span class="number">5</span>)</span><br><span class="line">        .sin()</span><br><span class="line">        .add(<span class="number">1</span>)</span><br><span class="line">        .currentValue(); <span class="comment">// 0.4559788891106302</span></span><br></pre></td></tr></table></figure></li><li><p>如果没有 this类型， ScientificCalculator就不能够在继承 BasicCalculator的同时还保持接口的连贯性。 multiply将会返回 BasicCalculator，它并没有 sin方法。 然而，使用 this类型， multiply会返回 this，在这里就是 ScientificCalculator。</p></li></ul><h3 id="索引类型（Index-types）"><a href="#索引类型（Index-types）" class="headerlink" title="索引类型（Index types）"></a>索引类型（Index types）</h3><ul><li>使用索引类型，编译器就能够检查使用了动态属性名的代码。 例如，一个常见的JavaScript模式是从对象中选取属性的子集。</li><li><p>下面是如何在TypeScript里使用此函数，通过 索引类型查询和 索引访问操作符：</p><figure class="highlight typescript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br></pre></td><td class="code"><pre><span class="line"><span class="function"><span class="keyword">function</span> <span class="title">pluck</span>&lt;<span class="title">T</span>, <span class="title">K</span> <span class="title">extends</span> <span class="title">keyof</span> <span class="title">T</span>&gt;(<span class="params">o: T, names: K[]</span>): <span class="title">T</span>[<span class="title">K</span>][] </span>&#123;</span><br><span class="line">  <span class="keyword">return</span> names.map(<span class="function"><span class="params">n</span> =&gt;</span> o[n]);</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="keyword">interface</span> Person &#123;</span><br><span class="line">    name: <span class="built_in">string</span>;</span><br><span class="line">    age: <span class="built_in">number</span>;</span><br><span class="line">&#125;</span><br><span class="line"><span class="keyword">let</span> person: Person = &#123;</span><br><span class="line">    name: <span class="string">'Jarid'</span>,</span><br><span class="line">    age: <span class="number">35</span></span><br><span class="line">&#125;;</span><br><span class="line"><span class="keyword">let</span> strings: <span class="built_in">string</span>[] = pluck(person, [<span class="string">'name'</span>]); <span class="comment">// ok, string[]</span></span><br></pre></td></tr></table></figure></li><li><p>编译器会检查 name是否真的是 Person的一个属性。 本例还引入了几个新的类型操作符。 首先是 keyof T， 索引类型查询操作符。 对于任何类型 T， keyof T的结果为 T上已知的公共属性名的联合。 例如：</p></li><li><p>keyof 就是检测类型里面是否拥有</p><figure class="highlight typescript"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">let</span> personProps: keyof Person; <span class="comment">// 'name' | 'age'</span></span><br></pre></td></tr></table></figure></li><li><p>keyof Person是完全可以与 ‘name’ | ‘age’互相替换的。 不同的是如果你添加了其它的属性到 Person，例如 address: string，那么 keyof Person会自动变为 ‘name’ | ‘age’ | ‘address’。 你可以在像 pluck函数这类上下文里使用 keyof，因为在使用之前你并不清楚可能出现的属性名。 但编译器会检查你是否传入了正确的属性名给 pluck：</p><figure class="highlight typescript"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">pluck(person, [<span class="string">'age'</span>, <span class="string">'unknown'</span>]); <span class="comment">// error, 'unknown' is not in 'name' | 'age'</span></span><br></pre></td></tr></table></figure></li><li><p>第二个操作符是 T[K]， 索引访问操作符。 在这里，类型语法反映了表达式语法。 这意味着 person[‘name’]具有类型 Person[‘name’] — 在我们的例子里则为 string类型。 然而，就像索引类型查询一样，你可以在普通的上下文里使用 T[K]，这正是它的强大所在。 你只要确保类型变量 K extends keyof T就可以了。 例如下面 getProperty函数的例子：</p><figure class="highlight typescript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line"><span class="function"><span class="keyword">function</span> <span class="title">getProperty</span>&lt;<span class="title">T</span>, <span class="title">K</span> <span class="title">extends</span> <span class="title">keyof</span> <span class="title">T</span>&gt;(<span class="params">o: T, name: K</span>): <span class="title">T</span>[<span class="title">K</span>] </span>&#123;</span><br><span class="line">    <span class="keyword">return</span> o[name]; <span class="comment">// o[name] is of type T[K]</span></span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure></li><li><p>getProperty里的 o: T和 name: K，意味着 o[name]: T[K]。 当你返回 T[K]的结果，编译器会实例化键的真实类型，因此 getProperty的返回值类型会随着你需要的属性改变。</p><figure class="highlight typescript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">let</span> name: <span class="built_in">string</span> = getProperty(person, <span class="string">'name'</span>);</span><br><span class="line"><span class="keyword">let</span> age: <span class="built_in">number</span> = getProperty(person, <span class="string">'age'</span>);</span><br><span class="line"><span class="keyword">let</span> unknown = getProperty(person, <span class="string">'unknown'</span>); <span class="comment">// error, 'unknown' is not in 'name' | 'age'</span></span><br></pre></td></tr></table></figure></li></ul><h4 id="索引类型和字符串索引签名"><a href="#索引类型和字符串索引签名" class="headerlink" title="索引类型和字符串索引签名"></a>索引类型和字符串索引签名</h4><ul><li>keyof和 T[K]与字符串索引签名进行交互。 如果你有一个带有字符串索引签名的类型，那么 keyof T会是 string。 并且 T[string]为索引签名的类型：<figure class="highlight typescript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">interface</span> Map&lt;T&gt; &#123;</span><br><span class="line">    [key: <span class="built_in">string</span>]: T;</span><br><span class="line">&#125;</span><br><span class="line"><span class="keyword">let</span> keys: keyof Map&lt;<span class="built_in">number</span>&gt;; <span class="comment">// string</span></span><br><span class="line"><span class="keyword">let</span> value: Map&lt;<span class="built_in">number</span>&gt;[<span class="string">'foo'</span>]; <span class="comment">// number</span></span><br></pre></td></tr></table></figure></li></ul><h3 id="映射类型"><a href="#映射类型" class="headerlink" title="映射类型"></a>映射类型</h3><ul><li><p>一个常见的任务是将一个已知的类型每个属性都变为可选的/或只读</p><figure class="highlight typescript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">interface</span> PersonPartial &#123;</span><br><span class="line">    name?: <span class="built_in">string</span>;</span><br><span class="line">    age?: <span class="built_in">number</span>;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="keyword">interface</span> PersonReadonly &#123;</span><br><span class="line">    readonly name: <span class="built_in">string</span>;</span><br><span class="line">    readonly age: <span class="built_in">number</span>;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure></li><li><p>这在JavaScript里经常出现，TypeScript提供了从旧类型中创建新类型的一种方式 — 映射类型。 在映射类型里，新类型以相同的形式去转换旧类型里每个属性。 例如，你可以令每个属性成为 readonly类型或可选的。 下面是一些例子：</p><figure class="highlight typescript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">type</span> Readonly&lt;T&gt; = &#123;</span><br><span class="line">    readonly [P <span class="keyword">in</span> keyof T]: T[P];</span><br><span class="line">&#125;</span><br><span class="line"><span class="keyword">type</span> Partial&lt;T&gt; = &#123;</span><br><span class="line">    [P <span class="keyword">in</span> keyof T]?: T[P];</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="comment">// 使用</span></span><br><span class="line"><span class="keyword">type</span> PersonPartial = Partial&lt;Person&gt;;</span><br><span class="line"><span class="keyword">type</span> ReadonlyPerson = Readonly&lt;Person&gt;;</span><br></pre></td></tr></table></figure></li><li><p>下面来看看最简单的映射类型和它的组成部分：</p><figure class="highlight typescript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">type</span> Keys = <span class="string">'option1'</span> | <span class="string">'option2'</span>;</span><br><span class="line"><span class="keyword">type</span> Flags = &#123; [K <span class="keyword">in</span> Keys]: <span class="built_in">boolean</span> &#125;;</span><br></pre></td></tr></table></figure></li><li><p>它的语法与索引签名的语法类型，内部使用了 for .. in。 具有三个部分：</p><ol><li>类型变量 K，它会依次绑定到每个属性。</li><li>字符串字面量联合的 Keys，它包含了要迭代的属性名的集合。</li><li>属性的结果类型。</li></ol></li><li><p>在个简单的例子里， Keys是硬编码的的属性名列表并且属性类型永远是 boolean，因此这个映射类型等同于：</p><figure class="highlight typescript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">type</span> Flags = &#123;</span><br><span class="line">    option1: <span class="built_in">boolean</span>;</span><br><span class="line">    option2: <span class="built_in">boolean</span>;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure></li><li><p>在真正的应用里，可能不同于上面的 Readonly或 Partial。 它们会基于一些已存在的类型，且按照一定的方式转换字段。 这就是 keyof和索引访问类型要做的事情：</p><figure class="highlight typescript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">type</span> Nullable&lt;T&gt; = &#123; [P <span class="keyword">in</span> keyof T]: T[P] | <span class="literal">null</span> &#125;</span><br><span class="line"><span class="keyword">type</span> Partial&lt;T&gt; = &#123; [P <span class="keyword">in</span> keyof T]?: T[P] &#125;</span><br></pre></td></tr></table></figure></li><li><p>在这些例子里，属性列表是 keyof T且结果类型是 T[P]的变体。 这是使用通用映射类型的一个好模版。 因为这类转换是 同态的，映射只作用于 T的属性而没有其它的。 编译器知道在添加任何新属性之前可以拷贝所有存在的属性修饰符。 例如，假设 Person.name是只读的，那么 Partial<person>.name也将是只读的且为可选的。</person></p></li></ul><p>下面是另一个例子， T[P]被包装在 Proxy<t>类里：<br><figure class="highlight typescript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">type</span> Proxy&lt;T&gt; = &#123;</span><br><span class="line">    <span class="keyword">get</span>(): T;</span><br><span class="line">    <span class="keyword">set</span>(value: T): <span class="built_in">void</span>;</span><br><span class="line">&#125;</span><br><span class="line"><span class="keyword">type</span> Proxify&lt;T&gt; = &#123;</span><br><span class="line">    [P <span class="keyword">in</span> keyof T]: Proxy&lt;T[P]&gt;;</span><br><span class="line">&#125;</span><br><span class="line"><span class="function"><span class="keyword">function</span> <span class="title">proxify</span>&lt;<span class="title">T</span>&gt;(<span class="params">o: T</span>): <span class="title">Proxify</span>&lt;<span class="title">T</span>&gt; </span>&#123;</span><br><span class="line">   <span class="comment">// ... wrap proxies ...</span></span><br><span class="line">&#125;</span><br><span class="line"><span class="keyword">let</span> proxyProps = proxify(props);</span><br></pre></td></tr></table></figure></t></p><ul><li><p>注意 Readonly<t>和 Partial<t>用处不小，因此它们与 Pick和 Record一同被包含进了TypeScript的标准库里：</t></t></p><figure class="highlight typescript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">type</span> Pick&lt;T, K <span class="keyword">extends</span> keyof T&gt; = &#123;</span><br><span class="line">    [P <span class="keyword">in</span> K]: T[P];</span><br><span class="line">&#125;</span><br><span class="line"><span class="keyword">type</span> Record&lt;K <span class="keyword">extends</span> <span class="built_in">string</span>, T&gt; = &#123;</span><br><span class="line">    [P <span class="keyword">in</span> K]: T;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure></li><li><p>Readonly， Partial和 Pick是同态的，但 Record不是。 因为 Record并不需要输入类型来拷贝属性，所以它不属于同态：</p></li><li>非同态类型本质上会创建新的属性，因此它们不会从它处拷贝属性修饰符。<figure class="highlight typescript"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">type</span> ThreeStringProps = Record&lt;<span class="string">'prop1'</span> | <span class="string">'prop2'</span> | <span class="string">'prop3'</span>, <span class="built_in">string</span>&gt;</span><br></pre></td></tr></table></figure></li></ul><h4 id="由映射类型进行推断"><a href="#由映射类型进行推断" class="headerlink" title="由映射类型进行推断"></a>由映射类型进行推断</h4><ul><li><p>现在你了解了如何包装一个类型的属性，那么接下来就是如何拆包。 其实这也非常容易：</p><figure class="highlight typescript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br></pre></td><td class="code"><pre><span class="line"><span class="function"><span class="keyword">function</span> <span class="title">unproxify</span>&lt;<span class="title">T</span>&gt;(<span class="params">t: Proxify&lt;T&gt;</span>): <span class="title">T</span> </span>&#123;</span><br><span class="line">    <span class="keyword">let</span> result = &#123;&#125; <span class="keyword">as</span> T;</span><br><span class="line">    <span class="keyword">for</span> (<span class="keyword">const</span> k <span class="keyword">in</span> t) &#123;</span><br><span class="line">        result[k] = t[k].get();</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">return</span> result;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="keyword">let</span> originalProps = unproxify(proxyProps);</span><br></pre></td></tr></table></figure></li><li><p>注意这个拆包推断只适用于同态的映射类型。 如果映射类型不是同态的，那么需要给拆包函数一个明确的类型参数。</p></li></ul><h1 id="后记"><a href="#后记" class="headerlink" title="后记"></a>后记</h1><ul><li>这个就是我学习Ts的第九天的笔记，欢迎更多的同行大哥指导交流</li><li><a href="https://yhf7.github.io/" target="_blank" rel="noopener">欢迎进入我的博客</a>：<a href="https://yhf7.github.io/" target="_blank" rel="noopener">https://yhf7.github.io/</a></li><li>如果有什么侵权的话，请及时添加小编微信以及qq也可以来告诉小编（905477376微信qq通用），谢谢！</li></ul>]]></content>
      
      
      <categories>
          
          <category> TypeScript </category>
          
      </categories>
      
      
        <tags>
            
            <tag> TypeScript 笔记 </tag>
            
        </tags>
      
    </entry>
    
    <entry>
      <title>2019年2-4月开发心得</title>
      <link href="/2019/04/23/2019-04-23%E5%BF%83%E5%BE%97/"/>
      <url>/2019/04/23/2019-04-23%E5%BF%83%E5%BE%97/</url>
      
        <content type="html"><![CDATA[<link rel="stylesheet" class="aplayer-secondary-style-marker" href="/assets/css/APlayer.min.css"><script src="/assets/js/APlayer.min.js" class="aplayer-secondary-script-marker"></script><h3 id="开发心得"><a href="#开发心得" class="headerlink" title="开发心得"></a>开发心得</h3><p>这段时间，参与了一些实战项目的开发，个人开发、多人协同开发都有经历，个人开发主要是自己一个人去开发，有问题解决问题但是解决问题的方法比较局限与自己的解决方法，这里多人开发优势可能会比较好，多人都会有解决问题的方案这样就可以择选更优的解决方式更有利提高，<br>在实战开发的过程中，遇到很多自己没有尝试过的写法很多自己不懂得都得一点点的去查去理解，观看别人的源码时需要一点一点的去梳理阅读特别是那些没有注释的最为过分，与人开发比较重要的是相互的沟通，彼此包容这样才能更好的协同开发，现在终于把两个项目都写完了，确实<br>通过项目的洗礼成长了很多，再次使用php编写后台api就显得得心应手了、小程序也熟悉了很多，使用后端常用的断点调试在前后端都是查错的好帮手，终于可以再次继续TypeScript的学习了，并完成我的elm计划（仿完整的elm前后台+后端）</p><p>半个月前买了个阿里服务器，也花了点时间备案部署网站，安装环境熟悉了node上线部署，php上线部署，并记录方法</p><p>忙碌的时候，所有的时间都用来做事，一旦闲下来好想你</p>]]></content>
      
      
      <categories>
          
          <category> 个人 </category>
          
      </categories>
      
      
        <tags>
            
            <tag> 个人 </tag>
            
        </tags>
      
    </entry>
    
    <entry>
      <title>阿里云 Centos 7 Apache 配置https</title>
      <link href="/2019/04/18/%E9%98%BF%E9%87%8C%E4%BA%91Apache%E9%85%8D%E7%BD%AEhttps/"/>
      <url>/2019/04/18/%E9%98%BF%E9%87%8C%E4%BA%91Apache%E9%85%8D%E7%BD%AEhttps/</url>
      
        <content type="html"><![CDATA[<link rel="stylesheet" class="aplayer-secondary-style-marker" href="/assets/css/APlayer.min.css"><script src="/assets/js/APlayer.min.js" class="aplayer-secondary-script-marker"></script><h1 id="前言"><a href="#前言" class="headerlink" title="前言"></a>前言</h1><ul><li>当我们购买了服务器各种环境都搭建php都搭好项目都放上去了</li><li>为了在小程序中使用所以需要配置https，在这之前申请证书是需要域名的所以我购买了域名</li><li>经过一系列的备案，是真的麻烦，告诫各位备案信息一定要看清楚不然也会和我一样弄好久</li><li>虽然今天备案成功但是信息通信还是需要时间不能马上就配置进入小程序</li><li>弄了一下午终于弄好，后来想吧nginx也配置了但是遇到了麻烦也没有找到安装包在哪里暂时放弃</li><li>先把这个记录下来，后面有时间再去攻破nginx的配置</li></ul><h1 id="配置-工具"><a href="#配置-工具" class="headerlink" title="配置/工具"></a>配置/工具</h1><ul><li>阿里云服务器等</li><li>Apache环境安装</li><li>已购买域名，并且备案通过</li><li>熟悉vim为佳</li></ul><h1 id="开始"><a href="#开始" class="headerlink" title="开始"></a>开始</h1><h3 id="申请证书"><a href="#申请证书" class="headerlink" title="申请证书"></a>申请证书</h3><ol><li><a href="https://common-buy.aliyun.com/?spm=5176.2020520163.cas.1.2af3uTHfuTHfVa&amp;commodityCode=cas#/buy" target="_blank" rel="noopener">购买免费ssl证书地址</a></li></ol><ul><li>没钱的直接买免费，有钱的可以自行选配<br><img src="/aly/ssl1.png" alt="ssl"></li></ul><ol start="2"><li>跟着指示到ssl证书申请验证<br><img src="/aly/ssl2.png" alt="ssl"></li></ol><h3 id="申请验证通过后下载证书"><a href="#申请验证通过后下载证书" class="headerlink" title="申请验证通过后下载证书"></a>申请验证通过后下载证书</h3><ul><li>下载apache证书<br><img src="/aly/ssl3.png" alt="ssl"><br><img src="/aly/ssl4.png" alt="ssl"></li></ul><h3 id="上传证书"><a href="#上传证书" class="headerlink" title="上传证书"></a>上传证书</h3><ol><li><p>创建存放证书目录</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">$ mkdir /etc/httpd/cert</span><br></pre></td></tr></table></figure></li><li><p>把所以证书放上去（先进入下载解压的路径）</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">$ scp -r ./zerg.zip root@yhf7.top:/etc/httpd/cert</span><br></pre></td></tr></table></figure></li></ol><p><img src="/aly/ssl5.png" alt="ssl"></p><h3 id="安装-配置mod-ssl"><a href="#安装-配置mod-ssl" class="headerlink" title="安装/配置mod_ssl"></a>安装/配置mod_ssl</h3><ol><li><p>安装</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">$ yum install mod_ssl openssl</span><br></pre></td></tr></table></figure></li><li><p>配置(更加图片改)</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">$ vim /etc/httpd/conf.d/ssl.conf</span><br></pre></td></tr></table></figure></li></ol><p><img src="/aly/ssl7.png" alt="ssl"><br><img src="/aly/ssl6.png" alt="ssl"></p><h3 id="端口重定向-设置好就重启服务器"><a href="#端口重定向-设置好就重启服务器" class="headerlink" title="端口重定向(设置好就重启服务器)"></a>端口重定向(设置好就重启服务器)</h3><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><span class="line">$ vim /etc/httpd/conf/httpd.conf</span><br><span class="line"></span><br><span class="line">&lt;VirtualHost *:80&gt; </span><br><span class="line">ServerName yhf7.top  //自己的域名：</span><br><span class="line">RewriteEngine on </span><br><span class="line">RewriteCond %&#123;SERVER_PORT&#125; !^443$ </span><br><span class="line">RewriteRule ^/?(.*)$ https://%&#123;SERVER_NAME&#125;/<span class="variable">$1</span> [L,R] </span><br><span class="line">&lt;/VirtualHost&gt;</span><br></pre></td></tr></table></figure><p><img src="/aly/ssl8.png" alt="ssl"></p><h3 id="查看效果"><a href="#查看效果" class="headerlink" title="查看效果"></a>查看效果</h3><p><img src="/aly/ssl9.png" alt="ssl"></p><h1 id="后记"><a href="#后记" class="headerlink" title="后记"></a>后记</h1><ul><li>配置apache服务器https就说到这里了，下一次部署nginx，有问题欢迎私聊我</li><li><a href="https://yhf7.github.io/" target="_blank" rel="noopener">欢迎进入我的博客</a>：<a href="https://yhf7.github.io/" target="_blank" rel="noopener">https://yhf7.github.io/</a></li><li>如果有什么侵权的话，请及时添加小编微信以及qq也可以来告诉小编（905477376微信qq通用），谢谢！</li></ul>]]></content>
      
      
      <categories>
          
          <category> 服务器 </category>
          
      </categories>
      
      
        <tags>
            
            <tag> 服务器 </tag>
            
        </tags>
      
    </entry>
    
    <entry>
      <title>TypeScript 自学笔记8 类型兼容性</title>
      <link href="/2019/04/16/TypeScript%E7%AC%94%E8%AE%B08/"/>
      <url>/2019/04/16/TypeScript%E7%AC%94%E8%AE%B08/</url>
      
        <content type="html"><![CDATA[<link rel="stylesheet" class="aplayer-secondary-style-marker" href="/assets/css/APlayer.min.css"><script src="/assets/js/APlayer.min.js" class="aplayer-secondary-script-marker"></script><h1 id="介绍"><a href="#介绍" class="headerlink" title="介绍"></a>介绍</h1><ul><li><p>TypeScript里的类型兼容性是基于结构子类型的。 结构类型是一种只使用其成员来描述类型的方式。 它正好与名义（nominal）类型形成对比。（译者注：在基于名义类型的类型系统中，数据类型的兼容性或等价性是通过明确的声明和/或类型的名称来决定的。这与结构性类型系统不同，它是基于类型的组成结构，且不要求明确地声明。）</p><figure class="highlight typescript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">interface</span> Named &#123;</span><br><span class="line">    name: <span class="built_in">string</span>;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="keyword">class</span> Person &#123;</span><br><span class="line">    name: <span class="built_in">string</span>;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="keyword">let</span> p: Named;</span><br><span class="line"><span class="comment">// OK, because of structural typing</span></span><br><span class="line">p = <span class="keyword">new</span> Person();</span><br></pre></td></tr></table></figure></li><li><p>TypeScript的类型系统允许某些在编译阶段无法确认其安全性的操作。当一个类型系统具此属性时，被当做是“不可靠”的。TypeScript允许这种不可靠行为的发生是经过仔细考虑的。通过这篇文章，我们会解释什么时候会发生这种情况和其有利的一面。</p></li></ul><h1 id="开始"><a href="#开始" class="headerlink" title="开始"></a>开始</h1><h3 id="属性赋值"><a href="#属性赋值" class="headerlink" title="属性赋值"></a>属性赋值</h3><ul><li>TypeScript结构化类型系统的基本规则是，如果x要兼容y，那么y至少具有与x相同的属性</li><li>这里要检查y是否能赋值给x，编译器检查x中的每个属性，看是否能在y中也找到对应属性。 在这个例子中，y必须包含名字是name的string类型成员。y满足条件，因此赋值正确<figure class="highlight typescript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">// 接口</span></span><br><span class="line"><span class="keyword">interface</span> Named &#123;</span><br><span class="line">  name: <span class="built_in">string</span>;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="keyword">let</span> x: Named;</span><br><span class="line"><span class="comment">// y's inferred type is &#123; name: string; location: string; &#125;</span></span><br><span class="line"><span class="keyword">let</span> y = &#123; name: <span class="string">'Alice'</span>, location: <span class="string">'Seattle'</span> &#125;;</span><br><span class="line">x = y;</span><br><span class="line"></span><br><span class="line"><span class="built_in">console</span>.log(x)</span><br><span class="line"><span class="comment">// &#123; name: 'Alice', location: 'Seattle' &#125;</span></span><br></pre></td></tr></table></figure></li></ul><hr><ul><li>检查函数参数</li><li>y有个额外的location属性，但这不会引发错误。 只有目标类型（这里是Named）的成员会被一一检查是否兼容</li><li>只有相同给规则才会被提取出来</li><li>这个比较过程是递归进行的，检查每个成员及子成员<figure class="highlight typescript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line"><span class="function"><span class="keyword">function</span> <span class="title">greet</span>(<span class="params">n: Named</span>) </span>&#123;</span><br><span class="line">  <span class="built_in">console</span>.log(<span class="string">'Hello, '</span> + n.name);</span><br><span class="line">  <span class="built_in">console</span>.log(<span class="string">'test'</span>, + n.location)<span class="comment">// error</span></span><br><span class="line">&#125;</span><br><span class="line">greet(y);</span><br></pre></td></tr></table></figure></li></ul><h3 id="比较两个函数"><a href="#比较两个函数" class="headerlink" title="比较两个函数"></a>比较两个函数</h3><ul><li>相对来讲，在比较原始类型和对象类型的时候是比较容易理解的，问题是如何判断两个函数是兼容的。 下面我们从两个简单的函数入手</li><li><p>要赋值首先要判断参数个数和参数类型，查看赋值中的参数是否被赋值中都有对于都参数存在</p><figure class="highlight typescript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">let</span> x = <span class="function">(<span class="params">a: <span class="built_in">number</span></span>) =&gt;</span> <span class="number">0</span>;</span><br><span class="line"><span class="keyword">let</span> y = <span class="function">(<span class="params">b: <span class="built_in">number</span>, s: <span class="built_in">string</span></span>) =&gt;</span> <span class="number">0</span>;</span><br><span class="line"></span><br><span class="line">y = x; <span class="comment">// OK</span></span><br><span class="line">x = y; <span class="comment">// Error</span></span><br></pre></td></tr></table></figure></li><li><p>要查看x是否能赋值给y，首先看它们的参数列表。 x的每个参数必须能在y里找到对应类型的参数。 注意的是参数的名字相同与否无所谓，只看它们的类型。 这里，x的每个参数在y中都能找到对应的参数，所以允许赋值。</p></li><li>第二个赋值错误，因为y有个必需的第二个参数，但是x并没有，所以不允许赋值。</li><li>你可能会疑惑为什么允许忽略参数，像例子y = x中那样。 原因是忽略额外的参数在JavaScript里是很常见的。 例如，Array#forEach给回调函数传3个参数：数组元素，索引和整个数组。 尽管如此，传入一个只使用第一个参数的回调函数也是很有用的<figure class="highlight typescript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">let</span> items = [<span class="number">1</span>, <span class="number">2</span>, <span class="number">3</span>];</span><br><span class="line"></span><br><span class="line"><span class="comment">// Don't force these extra arguments</span></span><br><span class="line">items.forEach(<span class="function">(<span class="params">item, index, array</span>) =&gt;</span> <span class="built_in">console</span>.log(item));</span><br><span class="line"></span><br><span class="line"><span class="comment">// Should be OK!</span></span><br><span class="line">items.forEach(<span class="function">(<span class="params">item</span>) =&gt;</span> <span class="built_in">console</span>.log(item));</span><br><span class="line"><span class="comment">// 123123</span></span><br></pre></td></tr></table></figure></li></ul><hr><ul><li>下面来看看如何处理返回值类型，创建两个仅是返回值类型不同的函数</li><li><p>依然结果还是一样的</p><figure class="highlight typescript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">let</span> x = <span class="function"><span class="params">()</span> =&gt;</span> (&#123;name: <span class="string">'Alice'</span>&#125;);</span><br><span class="line"><span class="keyword">let</span> y = <span class="function"><span class="params">()</span> =&gt;</span> (&#123;name: <span class="string">'Alice'</span>, location: <span class="string">'Seattle'</span>&#125;);</span><br><span class="line">x = y; <span class="comment">// OK</span></span><br><span class="line">y = x; <span class="comment">// Error, because x() lacks a location property</span></span><br></pre></td></tr></table></figure></li><li><p>类型系统强制源函数的返回值类型必须是目标函数返回值类型的子类型</p></li></ul><h4 id="函数参数双向协变"><a href="#函数参数双向协变" class="headerlink" title="函数参数双向协变"></a>函数参数双向协变</h4><ul><li>当比较函数参数类型时，只有当源函数参数能够赋值给目标函数或者反过来时才能赋值成功。 这是不稳定的，因为调用者可能传入了一个具有更精确类型信息的函数，但是调用这个传入的函数的时候却使用了不是那么精确的类型信息。 实际上，这极少会发生错误，并且能够实现很多JavaScript里的常见模式</li><li>下面的例子都是指定着一些不安全的写法不允许的写法<figure class="highlight typescript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">enum</span> EventType &#123; Mouse, Keyboard &#125;</span><br><span class="line"></span><br><span class="line"><span class="keyword">interface</span> Event &#123; timestamp: <span class="built_in">number</span>; &#125;</span><br><span class="line"><span class="keyword">interface</span> MouseEvent <span class="keyword">extends</span> Event &#123; x: <span class="built_in">number</span>; y: <span class="built_in">number</span> &#125;</span><br><span class="line"><span class="keyword">interface</span> KeyEvent <span class="keyword">extends</span> Event &#123; keyCode: <span class="built_in">number</span> &#125;</span><br><span class="line"></span><br><span class="line">function listenEvent(eventType: EventType, handler: (n: Event) =&gt; void) &#123;</span><br><span class="line">    <span class="comment">/* ... */</span></span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="comment">// Unsound, but useful and common</span></span><br><span class="line">listenEvent(EventType.Mouse, <span class="function">(<span class="params">e: MouseEvent</span>) =&gt;</span> <span class="built_in">console</span>.log(e.x + <span class="string">','</span> + e.y));</span><br><span class="line"></span><br><span class="line"><span class="comment">// Undesirable alternatives in presence of soundness</span></span><br><span class="line">listenEvent(EventType.Mouse, <span class="function">(<span class="params">e: Event</span>) =&gt;</span> <span class="built_in">console</span>.log((&lt;MouseEvent&gt;e).x + <span class="string">','</span> + (&lt;MouseEvent&gt;e).y));</span><br><span class="line">listenEvent(EventType.Mouse, &lt;<span class="function">(<span class="params">e: Event</span>) =&gt;</span> <span class="built_in">void</span>&gt;<span class="function">(<span class="params">(<span class="params">e: MouseEvent</span>) =&gt; <span class="built_in">console</span>.log(<span class="params">e.x + ',' + e.y</span>)</span>));</span></span><br><span class="line"><span class="function"></span></span><br><span class="line"><span class="function">// <span class="params">Still</span> <span class="params">disallowed</span> (<span class="params">clear error</span>). <span class="params">Type</span> <span class="params">safety</span> <span class="params">enforced</span> <span class="params">for</span> <span class="params">wholly</span> <span class="params">incompatible</span> <span class="params">types</span></span></span><br><span class="line"><span class="function"><span class="params">listenEvent</span>(<span class="params">EventType.Mouse, (<span class="params">e: <span class="built_in">number</span></span>) =&gt; <span class="built_in">console</span>.log(<span class="params">e</span>)</span>);</span></span><br></pre></td></tr></table></figure></li></ul><h4 id="可选参数及剩余参数"><a href="#可选参数及剩余参数" class="headerlink" title="可选参数及剩余参数"></a>可选参数及剩余参数</h4><ul><li>比较函数兼容性的时候，可选参数与必须参数是可互换的。 源类型上有额外的可选参数不是错误，目标类型的可选参数在源类型里没有对应的参数也不是错误</li><li>当一个函数有剩余参数时，它被当做无限个可选参数</li><li>这对于类型系统来说是不稳定的，但从运行时的角度来看，可选参数一般来说是不强制的，因为对于大多数函数来说相当于传递了一些undefinded</li><li>其实用可选和不用是一样的<figure class="highlight typescript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br></pre></td><td class="code"><pre><span class="line">function invokeLater(args: any[], callback: (...args: any[]) =&gt; void) &#123;</span><br><span class="line">    <span class="comment">/* ... Invoke callback with 'args' ... */</span></span><br><span class="line">    <span class="comment">// 调用1</span></span><br><span class="line">    callback(args)</span><br><span class="line">    <span class="comment">// 1,2, undefined</span></span><br><span class="line">    <span class="comment">// 1,2, undefined</span></span><br><span class="line">    <span class="comment">// 调用2</span></span><br><span class="line">    callback(...args)</span><br><span class="line">    <span class="comment">// 1,2</span></span><br><span class="line">    <span class="comment">// 1,2</span></span><br><span class="line">    <span class="comment">// 调用3</span></span><br><span class="line">    callback()</span><br><span class="line">    <span class="comment">// undefined,undefined</span></span><br><span class="line">    <span class="comment">// undefined,undefined</span></span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="comment">// Unsound - invokeLater "might" provide any number of arguments</span></span><br><span class="line">invokeLater([<span class="number">1</span>, <span class="number">2</span>], <span class="function">(<span class="params">x, y</span>) =&gt;</span> <span class="built_in">console</span>.log(x + <span class="string">', '</span> + y));</span><br><span class="line"></span><br><span class="line"><span class="comment">// Confusing (x and y are actually required) and undiscoverable</span></span><br><span class="line">invokeLater([<span class="number">1</span>, <span class="number">2</span>], <span class="function">(<span class="params">x?, y?</span>) =&gt;</span> <span class="built_in">console</span>.log(x + <span class="string">', '</span> + y));</span><br></pre></td></tr></table></figure></li></ul><h3 id="枚举"><a href="#枚举" class="headerlink" title="枚举"></a>枚举</h3><ul><li>枚举类型与数字类型兼容，并且数字类型与枚举类型兼容。不同枚举类型之间是不兼容的<figure class="highlight typescript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">enum</span> Status &#123; Ready, Waiting &#125;;</span><br><span class="line"><span class="keyword">enum</span> Color &#123; Red, Blue, Green &#125;;</span><br><span class="line"></span><br><span class="line"><span class="comment">// 这里如果使用status的命名接收也是会报错的</span></span><br><span class="line"><span class="keyword">let</span> test = Status.Ready; <span class="comment">//0</span></span><br><span class="line">test = Color.Green;  <span class="comment">// Error ，虽然报错但是执行js文件是可以输出2的</span></span><br><span class="line"></span><br><span class="line"><span class="built_in">console</span>.log(test)</span><br></pre></td></tr></table></figure></li></ul><h3 id="类"><a href="#类" class="headerlink" title="类"></a>类</h3><ul><li>类与对象字面量和接口差不多，但有一点不同：类有静态部分和实例部分的类型。 比较两个类类型的对象时，只有实例的成员会被比较。 静态成员和构造函数不在比较的范围内<figure class="highlight typescript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">class</span> Animal &#123;</span><br><span class="line">    feet: <span class="built_in">number</span>;</span><br><span class="line">    <span class="keyword">constructor</span>(<span class="params">name: <span class="built_in">string</span>, numFeet: <span class="built_in">number</span></span>) &#123; &#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="keyword">class</span> Size &#123;</span><br><span class="line">    feet: <span class="built_in">number</span>;</span><br><span class="line">    <span class="comment">// 1.如果加入一个string在这里</span></span><br><span class="line">    test: <span class="built_in">string</span></span><br><span class="line">    <span class="keyword">constructor</span>(<span class="params">numFeet: <span class="built_in">number</span></span>) &#123; &#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="keyword">let</span> a: Animal;</span><br><span class="line"><span class="keyword">let</span> s: Size;</span><br><span class="line"></span><br><span class="line">a = s;  <span class="comment">// OK</span></span><br><span class="line">s = a;  <span class="comment">// OK , 2.这里就无法赋值了</span></span><br></pre></td></tr></table></figure></li></ul><h4 id="类的私有成员和受保护成员"><a href="#类的私有成员和受保护成员" class="headerlink" title="类的私有成员和受保护成员"></a>类的私有成员和受保护成员</h4><ul><li>的私有成员和受保护成员会影响兼容性。 当检查类实例的兼容时，如果目标类型包含一个私有成员，那么源类型必须包含来自同一个类的这个私有成员。 同样地，这条规则也适用于包含受保护成员实例的类型检查。 这允许子类赋值给父类，但是不能赋值给其它有同样类型的类。<figure class="highlight typescript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">class</span> Animal &#123;</span><br><span class="line">  feet: <span class="built_in">number</span>;</span><br><span class="line">  <span class="keyword">constructor</span>(<span class="params">name: <span class="built_in">string</span>, numFeet: <span class="built_in">number</span></span>) &#123; &#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="keyword">class</span> Size &#123;</span><br><span class="line"> <span class="keyword">private</span> feet: <span class="built_in">number</span></span><br><span class="line">  <span class="keyword">constructor</span>(<span class="params">numFeet: <span class="built_in">number</span></span>) &#123; &#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="keyword">let</span> a: Animal;</span><br><span class="line"><span class="keyword">let</span> s: Size;</span><br><span class="line"></span><br><span class="line">a = s;  <span class="comment">// error</span></span><br><span class="line">s = a;  <span class="comment">// error</span></span><br></pre></td></tr></table></figure></li></ul><h3 id="泛型"><a href="#泛型" class="headerlink" title="泛型"></a>泛型</h3><ul><li><p>因为TypeScript是结构性的类型系统，类型参数只影响使用其做为类型一部分的结果类型</p><figure class="highlight typescript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">interface</span> Empty&lt;T&gt; &#123;</span><br><span class="line">&#125;</span><br><span class="line"><span class="keyword">let</span> x: Empty&lt;<span class="built_in">number</span>&gt;;</span><br><span class="line"><span class="keyword">let</span> y: Empty&lt;<span class="built_in">string</span>&gt;;</span><br><span class="line"></span><br><span class="line">x = y; <span class="comment">//0k</span></span><br></pre></td></tr></table></figure></li><li><p>上面代码里，x和y是兼容的，因为它们的结构使用类型参数时并没有什么不同。 把这个例子改变一下，增加一个成员，就能看出是如何工作的了</p><figure class="highlight typescript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">interface</span> Empty&lt;T&gt; &#123;</span><br><span class="line">  data: T</span><br><span class="line">&#125;</span><br><span class="line"><span class="keyword">let</span> x: Empty&lt;<span class="built_in">number</span>&gt;;</span><br><span class="line"><span class="keyword">let</span> y: Empty&lt;<span class="built_in">string</span>&gt;;</span><br><span class="line"></span><br><span class="line">x = y; <span class="comment">//error</span></span><br><span class="line"><span class="comment">// 因为用到了具体实例上，就不再是范型就存在差异了</span></span><br></pre></td></tr></table></figure></li></ul><hr><ul><li>对于没指定泛型类型的泛型参数时，会把所有泛型参数当成any比较。 然后用结果类型进行比较，就像上面第一个例子<figure class="highlight typescript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">let</span> identity = <span class="function"><span class="keyword">function</span>&lt;<span class="title">T</span>&gt;(<span class="params">x: T</span>): <span class="title">T</span> </span>&#123;</span><br><span class="line">    <span class="comment">// ...</span></span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="keyword">let</span> reverse = <span class="function"><span class="keyword">function</span>&lt;<span class="title">U</span>&gt;(<span class="params">y: U</span>): <span class="title">U</span> </span>&#123;</span><br><span class="line">    <span class="comment">// ...</span></span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line">identity = reverse;</span><br></pre></td></tr></table></figure></li></ul><h1 id="后记"><a href="#后记" class="headerlink" title="后记"></a>后记</h1><ul><li>这个就是我学习Ts的第八天的笔记，后面学习ts的高级类型，欢迎更多的同行大哥指导交流</li><li><a href="https://yhf7.github.io/" target="_blank" rel="noopener">欢迎进入我的博客</a>：<a href="https://yhf7.github.io/" target="_blank" rel="noopener">https://yhf7.github.io/</a></li><li>如果有什么侵权的话，请及时添加小编微信以及qq也可以来告诉小编（905477376微信qq通用），谢谢！</li></ul>]]></content>
      
      
      <categories>
          
          <category> TypeScript </category>
          
      </categories>
      
      
        <tags>
            
            <tag> TypeScript 笔记 </tag>
            
        </tags>
      
    </entry>
    
    <entry>
      <title>TypeScript 自学笔记7 枚举</title>
      <link href="/2019/04/15/TypeScript%E7%AC%94%E8%AE%B07/"/>
      <url>/2019/04/15/TypeScript%E7%AC%94%E8%AE%B07/</url>
      
        <content type="html"><![CDATA[<link rel="stylesheet" class="aplayer-secondary-style-marker" href="/assets/css/APlayer.min.css"><script src="/assets/js/APlayer.min.js" class="aplayer-secondary-script-marker"></script><h1 id="前言"><a href="#前言" class="headerlink" title="前言"></a>前言</h1><ul><li>近来花了大量时间在做项目重构忽略了ts的学习，今天已经完成了工作</li><li>接着之前的学习，继续学习我们的ts，今天学枚举</li></ul><h1 id="介绍"><a href="#介绍" class="headerlink" title="介绍"></a>介绍</h1><ul><li>使用枚举我们可以定义一些带名字的常量。 使用枚举可以清晰地表达意图或创建一组有区别的用例。 TypeScript支持数字的和基于字符串的枚举。</li></ul><h1 id="枚举"><a href="#枚举" class="headerlink" title="枚举"></a>枚举</h1><h3 id="数字枚举"><a href="#数字枚举" class="headerlink" title="数字枚举"></a>数字枚举</h3><ul><li>我们定义了一个数字枚举， Up使用初始化为 1。 其余的成员会从 1开始自动增长。 换句话说， Direction.Up的值为 1， Down为 2， Left为 3， Right为 4。</li><li>如果不定义1 那就从0开始递增<figure class="highlight typescript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">enum</span> Direction &#123;</span><br><span class="line">    Up = <span class="number">1</span>,</span><br><span class="line">    Down,</span><br><span class="line">    Left,</span><br><span class="line">    Right</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="keyword">enum</span> Direction &#123;</span><br><span class="line">    Up,<span class="comment">//0</span></span><br><span class="line">    Down,<span class="comment">//1</span></span><br><span class="line">    Left,<span class="comment">//2</span></span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure></li></ul><hr><ul><li>简单的通过枚举的属性来访问枚举成员</li><li>可能会有一些报错提醒，直接运行node跑js就好了<figure class="highlight typescript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">enum</span> Response &#123;</span><br><span class="line">  No = <span class="number">0</span>,</span><br><span class="line">  Yes = <span class="number">1</span>,</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">function</span> <span class="title">respond</span>(<span class="params">recipient: <span class="built_in">string</span>, message: Response</span>): <span class="title">void</span> </span>&#123;</span><br><span class="line">  <span class="built_in">console</span>.log(<span class="string">'Yes'</span>, message) <span class="comment">// 输出 Yes 1</span></span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line">respond(<span class="string">"Princess Caroline"</span>, Response.Yes)</span><br></pre></td></tr></table></figure></li></ul><hr><ul><li>数字枚举可以被混入到 计算过的和常量成员（如下所示）。 简短地说，不带初始化器的枚举或者被放在第一的位置，或者被放在使用了数字常量或其它常量初始化了的枚举后面。 换句话说，下面的情况是不被允许的：</li><li>就是说可以用但是不能放在前面<figure class="highlight typescript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">enum</span> E &#123;</span><br><span class="line">    A = getSomeValue(),</span><br><span class="line">    B, <span class="comment">// error! 'A' is not constant-initialized, so 'B' needs an initializer</span></span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure></li></ul><h3 id="字符串枚举"><a href="#字符串枚举" class="headerlink" title="字符串枚举"></a>字符串枚举</h3><ul><li>字符串枚举的概念很简单，但是有细微的 运行时的差别。 在一个字符串枚举里，每个成员都必须用字符串字面量，或另外一个字符串枚举成员进行初始化。</li><li>由于字符串枚举没有自增长的行为，字符串枚举可以很好的序列化。 换句话说，如果你正在调试并且必须要读一个数字枚举的运行时的值，这个值通常是很难读的 - 它并不能表达有用的信息（尽管 反向映射会有所帮助），字符串枚举允许你提供一个运行时有意义的并且可读的值，独立于枚举成员的名字。<figure class="highlight typescript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">enum</span> Direction &#123;</span><br><span class="line">    Up = <span class="string">"UP"</span>,</span><br><span class="line">    Down = <span class="string">"DOWN"</span>,</span><br><span class="line">    Left = <span class="string">"LEFT"</span>,</span><br><span class="line">    Right = <span class="string">"RIGHT"</span>,</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure></li></ul><h3 id="异构枚举"><a href="#异构枚举" class="headerlink" title="异构枚举"></a>异构枚举</h3><ul><li>从技术的角度来说，枚举可以混合字符串和数字成员，但是似乎你并不会这么做：</li><li>除非你真的想要利用JavaScript运行时的行为，否则我们不建议这样做。<figure class="highlight typescript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">enum</span> BooleanLikeHeterogeneousEnum &#123;</span><br><span class="line">    No = <span class="number">0</span>,</span><br><span class="line">    Yes = <span class="string">"YES"</span>,</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure></li></ul><h3 id="计算的和常量成员"><a href="#计算的和常量成员" class="headerlink" title="计算的和常量成员"></a>计算的和常量成员</h3><ul><li>每个枚举成员都带有一个值，它可以是 常量或 计算出来的。 当满足如下条件时，枚举成员被当作是常量：<figure class="highlight typescript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">// 默认为数字常量 0</span></span><br><span class="line"><span class="keyword">enum</span> E &#123; X &#125;</span><br><span class="line"></span><br><span class="line"><span class="comment">// 默认为数字常量 当前是上一位的+1 , 0,1,2</span></span><br><span class="line"><span class="keyword">enum</span> E1 &#123; X, Y, Z &#125;</span><br><span class="line"></span><br><span class="line"><span class="keyword">enum</span> E2 &#123; <span class="comment">// 1,2,3</span></span><br><span class="line">    A = <span class="number">1</span>, B, C</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure></li></ul><hr><ul><li><p>枚举成员使用 常量枚举表达式初始化。 常数枚举表达式是TypeScript表达式的子集，它可以在编译阶段求值。 当一个表达式满足下面条件之一时，它就是一个常量枚举表达式：</p><ul><li>一个枚举表达式字面量（主要是字符串字面量或数字字面量）</li><li>一个对之前定义的常量枚举成员的引用（可以是在不同的枚举类型中定义的）</li><li>带括号的常量枚举表达式</li><li>一元运算符 +, -, ~其中之一应用在了常量枚举表达式<br>常量枚举表达式做为二元运算符 +, -, *, /, %, &lt;&lt;, &gt;&gt;, &gt;&gt;&gt;, &amp;, |, ^的操作对象。 若常数枚举表达式求值后为 NaN或 Infinity，则会在编译阶段报错。</li></ul></li></ul><h4 id="运算符-（字符串无法使用）"><a href="#运算符-（字符串无法使用）" class="headerlink" title="运算符 （字符串无法使用）"></a>运算符 （字符串无法使用）</h4><ul><li>| 表示两边求并集（元素相加，相同元素只出现一次）<figure class="highlight typescript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">// 数字例子</span></span><br><span class="line"><span class="keyword">enum</span> Test &#123;</span><br><span class="line">    A = <span class="number">1</span>,</span><br><span class="line">    B = <span class="number">1</span>,</span><br><span class="line">    C = A | B</span><br><span class="line">&#125;</span><br><span class="line"><span class="comment">// 由于两个相等所以只会保留两个</span></span><br><span class="line"><span class="comment">// C = 1 = A = B</span></span><br><span class="line"><span class="keyword">enum</span> Test &#123;</span><br><span class="line">    A = <span class="number">1</span>,</span><br><span class="line">    B = <span class="number">2</span>,</span><br><span class="line">    C = A | B</span><br><span class="line">&#125;</span><br><span class="line"><span class="comment">// C = 3 = A+B</span></span><br><span class="line"></span><br><span class="line"><span class="comment">// 字符串例子 x</span></span><br><span class="line"><span class="keyword">enum</span> Test &#123;</span><br><span class="line">    A = <span class="string">"abc"</span>,</span><br><span class="line">    B = <span class="string">"bcd"</span>,</span><br><span class="line">    C = A | B</span><br><span class="line">&#125;</span><br><span class="line"><span class="comment">// 这样是错误的 字符串是不允许用计算属性的</span></span><br></pre></td></tr></table></figure></li></ul><hr><figure class="highlight typescript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">enum</span> AnimalFlags &#123;</span><br><span class="line">  None        = <span class="number">0</span>,</span><br><span class="line">  HasClaws    = <span class="number">1</span> &lt;&lt; <span class="number">0</span>, <span class="comment">// 1 x 2的0次方</span></span><br><span class="line">  CanFly      = <span class="number">1</span> &lt;&lt; <span class="number">1</span>, <span class="comment">// 1 x 2的1次方</span></span><br><span class="line">  EatsFish    = <span class="number">1</span> &lt;&lt; <span class="number">2</span>, <span class="comment">// 1 x 2的2次方</span></span><br><span class="line">  Endangered  = <span class="number">1</span> &lt;&lt; <span class="number">3</span> <span class="comment">// 1 x 2的3次方</span></span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><ul><li>其实可以理解为前面的数乘以后面的数的2次方倍</li><li>我们使用了左移的位运算符，将数字 1 的二进制向左移动位置得到数字 0001、0010、0100 和 1000（换成十进制结果是：1, 2, 4, 8）。当你在使用这种标记的时候，这些位运算符 | (或)、&amp; （和）、~ （非）将会是你最好的朋友</li><li>其余的用个例子来说</li><li>&amp;:表示两边是否其中一个是另外一个的子集，如果是返回子集，否则返回0（如果其中一个包含另外一个，返回被包含的，否则返回0）</li><li>^：表示从两者的并集中去除两者的交集（把两个的元素合并到一起，如果两个中有公共元素，要将这个公共元素从合并的结果中去除）</li><li>～：表示取反，返回的结果我还不知道应该是什么，以后再查一下。用法主要和“&amp;”一起使用，例如：去除其中的某个元素<figure class="highlight typescript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">// 枚举</span></span><br><span class="line"><span class="keyword">enum</span> AnimalFlags &#123;</span><br><span class="line">  None        = <span class="number">0</span>,</span><br><span class="line">  HasClaws    = <span class="number">1</span> &lt;&lt; <span class="number">0</span>,<span class="comment">// 1</span></span><br><span class="line">  CanFly      = <span class="number">1</span> &lt;&lt; <span class="number">1</span> <span class="comment">// 2</span></span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="comment">// 接口</span></span><br><span class="line"><span class="keyword">interface</span> Animal &#123;</span><br><span class="line">  flags: AnimalFlags; <span class="comment">// &#123;None:0,HasClaws:1,CanFly:2&#125;</span></span><br><span class="line">  [key: <span class="built_in">string</span>]: <span class="built_in">any</span>;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">function</span> <span class="title">printAnimalAbilities</span>(<span class="params">animal: Animal</span>) </span>&#123;</span><br><span class="line">  <span class="built_in">console</span>.log(<span class="string">'+'</span>,animal)</span><br><span class="line">  <span class="keyword">var</span> animalFlags = animal.flags;</span><br><span class="line">  <span class="keyword">if</span> (animalFlags &amp; AnimalFlags.HasClaws) &#123;</span><br><span class="line">    <span class="built_in">console</span>.log(<span class="string">'animal has claws'</span>);</span><br><span class="line">  &#125;</span><br><span class="line">  <span class="keyword">if</span> (animalFlags &amp; AnimalFlags.CanFly) &#123;</span><br><span class="line">    <span class="built_in">console</span>.log(<span class="string">'animal can fly'</span>);</span><br><span class="line">  &#125;</span><br><span class="line">  <span class="keyword">if</span> (animalFlags == AnimalFlags.None) &#123;</span><br><span class="line">    <span class="built_in">console</span>.log(<span class="string">'nothing'</span>);</span><br><span class="line">  &#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="comment">// 赋值</span></span><br><span class="line"><span class="keyword">var</span> animal = &#123; flags: AnimalFlags.None &#125;;<span class="comment">// 0</span></span><br><span class="line">printAnimalAbilities(animal); <span class="comment">// nothing</span></span><br><span class="line"><span class="comment">// 两个相加，相同的不加</span></span><br><span class="line">animal.flags |= AnimalFlags.HasClaws; <span class="comment">// 1</span></span><br><span class="line">printAnimalAbilities(animal); <span class="comment">// animal has claws</span></span><br><span class="line"><span class="comment">// 清除</span></span><br><span class="line">animal.flags &amp;= ~AnimalFlags.HasClaws; <span class="comment">//0</span></span><br><span class="line">printAnimalAbilities(animal); <span class="comment">// nothing</span></span><br><span class="line"><span class="comment">// 和 = 两个的和</span></span><br><span class="line">animal.flags |= AnimalFlags.HasClaws | AnimalFlags.CanFly; <span class="comment">// 3</span></span><br><span class="line">printAnimalAbilities(animal); <span class="comment">// animal has claws, animal can fly</span></span><br><span class="line"></span><br><span class="line"><span class="comment">// 结果</span></span><br><span class="line">+ &#123; flags: <span class="number">0</span> &#125;</span><br><span class="line">nothing1</span><br><span class="line">+ &#123; flags: <span class="number">1</span> &#125;</span><br><span class="line">animal has claws</span><br><span class="line">+ &#123; flags: <span class="number">0</span> &#125;</span><br><span class="line">nothing1</span><br><span class="line">+ &#123; flags: <span class="number">3</span> &#125;</span><br><span class="line">animal has claws</span><br><span class="line">animal can fly</span><br></pre></td></tr></table></figure></li></ul><h3 id="联合枚举与枚举成员的类型"><a href="#联合枚举与枚举成员的类型" class="headerlink" title="联合枚举与枚举成员的类型"></a>联合枚举与枚举成员的类型</h3><ul><li>存在一种特殊的非计算的常量枚举成员的子集：字面量枚举成员。 字面量枚举成员是指不带有初始值的常量枚举成员，或者是值被初始化为<ul><li>任何字符串字面量（例如： “foo”， “bar”， “baz”）</li><li>任何数字字面量（例如： 1, 100）</li><li>应用了一元 -符号的数字字面量（例如： -1, -100）</li></ul></li><li><p>首先，枚举成员成为了类型！ 例如，我们可以说某些成员 只能是枚举成员的值</p><figure class="highlight typescript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">enum</span> ShapeKind &#123;</span><br><span class="line">    Circle,</span><br><span class="line">    Square,</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="keyword">interface</span> Circle &#123;</span><br><span class="line">    kind: ShapeKind.Circle;</span><br><span class="line">    radius: <span class="built_in">number</span>;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="keyword">interface</span> Square &#123;</span><br><span class="line">    kind: ShapeKind.Square;</span><br><span class="line">    sideLength: <span class="built_in">number</span>;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="keyword">let</span> c: Circle = &#123;</span><br><span class="line">    kind: ShapeKind.Square,</span><br><span class="line">    <span class="comment">//    ~~~~~~~~~~~~~~~~ Error!</span></span><br><span class="line">    radius: <span class="number">100</span>,</span><br><span class="line">&#125;</span><br><span class="line"><span class="comment">// 改</span></span><br><span class="line"><span class="keyword">let</span> c: Circle = &#123;</span><br><span class="line">  kind: <span class="number">100</span>, <span class="comment">// 默认数字类型写个数字</span></span><br><span class="line">  <span class="comment">//    ~~~~~~~~~~~~~~~~ Error!</span></span><br><span class="line">  radius: <span class="number">100</span>,</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="built_in">console</span>.log(c)</span><br><span class="line"><span class="comment">// &#123; kind: 100, radius: 100 &#125;</span></span><br></pre></td></tr></table></figure></li><li><p>另一个变化是枚举类型本身变成了每个枚举成员的 联合。 虽然我们还没有讨论<a href="./Advanced Types.md#union-types">联合类型</a>，但你只要知道通过联合枚举，类型系统能够利用这样一个事实，它可以知道枚举里的值的集合。 因此，TypeScript能够捕获在比较值的时候犯的愚蠢的错误。 例如：</p><figure class="highlight typescript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">enum</span> E &#123;</span><br><span class="line">    Foo,</span><br><span class="line">    Bar,</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">function</span> <span class="title">f</span>(<span class="params">x: E</span>) </span>&#123;</span><br><span class="line">    <span class="keyword">if</span> (x !== E.Foo || x !== E.Bar) &#123; <span class="comment">// 其实就是说第一个都没有了还判断第二个干嘛是不是傻</span></span><br><span class="line"></span><br><span class="line">        <span class="comment">//             ~~~~~~~~~~~</span></span><br><span class="line">        <span class="comment">// Error! Operator '!==' cannot be applied to types 'E.Foo' and 'E.Bar'.</span></span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure></li><li><p>这个例子里，我们先检查 x是否不是 E.Foo。 如果通过了这个检查，然后 ||会发生短路效果， if语句体里的内容会被执行。 然而，这个检查没有通过，那么 x则 只能为 E.Foo，因此没理由再去检查它是否为 E.Bar。</p></li></ul><h3 id="运行时的枚举"><a href="#运行时的枚举" class="headerlink" title="运行时的枚举"></a>运行时的枚举</h3><ul><li>枚举是在运行时真正存在的对象。 例如下面的枚举：<figure class="highlight typescript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">enum</span> E &#123;</span><br><span class="line">    X, Y, Z</span><br><span class="line">&#125;</span><br><span class="line"><span class="function"><span class="keyword">function</span> <span class="title">f</span>(<span class="params">obj: &#123; X: <span class="built_in">number</span> &#125;</span>) </span>&#123;</span><br><span class="line">    <span class="keyword">return</span> obj.X;</span><br><span class="line">&#125;</span><br><span class="line"><span class="comment">// 改</span></span><br><span class="line"><span class="function"><span class="keyword">function</span> <span class="title">f</span>(<span class="params">obj: &#123; Y: <span class="built_in">number</span> &#125;</span>) </span>&#123;</span><br><span class="line">    <span class="keyword">return</span> obj.Y;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="comment">// Works, since 'E' has a property named 'X' which is a number.</span></span><br><span class="line"><span class="built_in">console</span>.log(f(E));</span><br><span class="line"><span class="comment">// 0</span></span><br><span class="line"><span class="comment">// 1 改后</span></span><br></pre></td></tr></table></figure></li></ul><h3 id="反向映射"><a href="#反向映射" class="headerlink" title="反向映射"></a>反向映射</h3><ul><li><p>除了创建一个以属性名做为对象成员的对象之外，数字枚举成员还具有了 反向映射，从枚举值到枚举名字。 例如，在下面的例子中：</p><figure class="highlight typescript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">// 1</span></span><br><span class="line"><span class="keyword">enum</span> Enum &#123;</span><br><span class="line">    A</span><br><span class="line">&#125;</span><br><span class="line"><span class="keyword">let</span> a = Enum.A;</span><br><span class="line"><span class="keyword">let</span> nameOfA = Enum[a]; <span class="comment">// "A"</span></span><br><span class="line"></span><br><span class="line"><span class="comment">// 2</span></span><br><span class="line"><span class="keyword">var</span> Enum;</span><br><span class="line">(<span class="function"><span class="keyword">function</span> (<span class="params">Enum</span>) </span>&#123;</span><br><span class="line">    Enum[Enum[<span class="string">"A"</span>] = <span class="number">0</span>] = <span class="string">"A"</span>;</span><br><span class="line">&#125;)(Enum || (Enum = &#123;&#125;));</span><br><span class="line"><span class="keyword">var</span> a = Enum.A;</span><br><span class="line"><span class="keyword">var</span> nameOfA = Enum[a]; <span class="comment">// "A"</span></span><br></pre></td></tr></table></figure></li><li><p>生成的代码中，枚举类型被编译成一个对象，它包含了正向映射（ name -&gt; value）和反向映射（ value -&gt; name）。 引用枚举成员总会生成为对属性访问并且永远也不会内联代码。</p></li></ul><h3 id="const枚举"><a href="#const枚举" class="headerlink" title="const枚举"></a>const枚举</h3><ul><li>大多数情况下，枚举是十分有效的方案。 然而在某些情况下需求很严格。 为了避免在额外生成的代码上的开销和额外的非直接的对枚举成员的访问，我们可以使用 const枚举。 常量枚举通过在枚举上使用 const修饰符来定义。</li><li>常量枚举只能使用常量枚举表达式，并且不同于常规的枚举，它们在编译阶段会被删除。 常量枚举成员在使用的地方会被内联进来。 之所以可以这么做是因为，常量枚举不允许包含计算成员。<figure class="highlight typescript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">const</span> <span class="keyword">enum</span> Enum &#123;</span><br><span class="line">    A = <span class="number">1</span>,</span><br><span class="line">    B = A * <span class="number">2</span></span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="keyword">const</span> <span class="keyword">enum</span> Directions &#123;</span><br><span class="line">    Up,</span><br><span class="line">    Down,</span><br><span class="line">    Left,</span><br><span class="line">    Right</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="keyword">let</span> directions = [Directions.Up, Directions.Down, Directions.Left, Directions.Right]</span><br><span class="line"></span><br><span class="line"><span class="keyword">var</span> directions = [<span class="number">0</span> <span class="comment">/* Up */</span>, <span class="number">1</span> <span class="comment">/* Down */</span>, <span class="number">2</span> <span class="comment">/* Left */</span>, <span class="number">3</span> <span class="comment">/* Right */</span>];</span><br></pre></td></tr></table></figure></li></ul><h3 id="外部枚举"><a href="#外部枚举" class="headerlink" title="外部枚举"></a>外部枚举</h3><ul><li><p>外部枚举用来描述已经存在的枚举类型的形状。</p><figure class="highlight typescript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">declare</span> <span class="keyword">enum</span> Enum &#123;</span><br><span class="line">    A = <span class="number">1</span>,</span><br><span class="line">    B,</span><br><span class="line">    C = <span class="number">2</span></span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure></li><li><p>外部枚举和非外部枚举之间有一个重要的区别，在正常的枚举里，没有初始化方法的成员被当成常数成员。 对于非常数的外部枚举而言，没有初始化方法时被当做需要经过计算的。</p></li></ul><h1 id="后记"><a href="#后记" class="headerlink" title="后记"></a>后记</h1><ul><li>时隔多日我又回来了，这个就是我学习Ts的第七天的笔记，欢迎更多的同行大哥指导交流</li><li><a href="https://yhf7.github.io/" target="_blank" rel="noopener">欢迎进入我的博客</a>：<a href="https://yhf7.github.io/" target="_blank" rel="noopener">https://yhf7.github.io/</a></li><li>如果有什么侵权的话，请及时添加小编微信以及qq也可以来告诉小编（905477376微信qq通用），谢谢！</li></ul>]]></content>
      
      
      <categories>
          
          <category> TypeScript </category>
          
      </categories>
      
      
        <tags>
            
            <tag> TypeScript 笔记 </tag>
            
        </tags>
      
    </entry>
    
    <entry>
      <title>阿里云 Linux 与本地之间如何用命令传输文件和文件夹</title>
      <link href="/2019/04/09/%E9%98%BF%E9%87%8C%E4%BA%91%20Linux%20%E4%B8%8E%E6%9C%AC%E5%9C%B0%20%E6%96%87%E4%BB%B6%E4%BC%A0%E8%BE%93/"/>
      <url>/2019/04/09/%E9%98%BF%E9%87%8C%E4%BA%91%20Linux%20%E4%B8%8E%E6%9C%AC%E5%9C%B0%20%E6%96%87%E4%BB%B6%E4%BC%A0%E8%BE%93/</url>
      
        <content type="html"><![CDATA[<link rel="stylesheet" class="aplayer-secondary-style-marker" href="/assets/css/APlayer.min.css"><script src="/assets/js/APlayer.min.js" class="aplayer-secondary-script-marker"></script><h1 id="前言"><a href="#前言" class="headerlink" title="前言"></a>前言</h1><ul><li>记录一下线上和线下是如何传输的</li><li>买了服务器以来一直都是使用命令链接服务器</li><li>如果想使用界面化工具的话宝塔那些也是不错的，很多人推荐不过没用过</li><li>之前我说传文件夹不好传，应该是我那时候路径写的有问题导致的其实是可以传的</li></ul><h1 id="开始"><a href="#开始" class="headerlink" title="开始"></a>开始</h1><h3 id="在本地向服务器传文件"><a href="#在本地向服务器传文件" class="headerlink" title="在本地向服务器传文件"></a>在本地向服务器传文件</h3><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line"># scp【本地文件的路径】【服务器用户名】@【服务器地址】：【服务器上存放文件的路径】</span><br><span class="line"></span><br><span class="line">$ scp ./scp1.png root@119.23.75.150:/home/admin/</span><br></pre></td></tr></table></figure><p><img src="/aly/scp1.png" alt="tcp"><br><img src="/aly/scp2.png" alt="tcp"></p><h3 id="在本地向服务器传文件夹"><a href="#在本地向服务器传文件夹" class="headerlink" title="在本地向服务器传文件夹"></a>在本地向服务器传文件夹</h3><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line"># scp -r【本地文件夹的路径】【服务器用户名】@【服务器地址】：【服务器上存放文件夹的路径】</span><br><span class="line"></span><br><span class="line">$ scp -r ./html root@119.23.75.150:/home/admin/</span><br></pre></td></tr></table></figure><p><img src="/aly/scp3.png" alt="tcp"></p><h3 id="本地下载服务器文件"><a href="#本地下载服务器文件" class="headerlink" title="本地下载服务器文件"></a>本地下载服务器文件</h3><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line"># scp【服务器用户名】@【服务器地址】：【服务器上存放文件的路径】 【本地文件的路径】</span><br><span class="line"></span><br><span class="line">$ scp root@119.23.75.150:/home/admin/scp1.png ./</span><br></pre></td></tr></table></figure><p><img src="/aly/scp4.png" alt="tcp"></p><h3 id="本地下载服务器文件夹-不加-r会报错"><a href="#本地下载服务器文件夹-不加-r会报错" class="headerlink" title="本地下载服务器文件夹(不加-r会报错)"></a>本地下载服务器文件夹(不加-r会报错)</h3><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line"># scp -r【服务器用户名】@【服务器地址】：【服务器上存放文件夹的路径】 【本地文件夹的路径】</span><br><span class="line"></span><br><span class="line">$ scp -r root@119.23.75.150:/home/admin/html ./</span><br></pre></td></tr></table></figure><p><img src="/aly/scp5.png" alt="tcp"></p><h1 id="后记"><a href="#后记" class="headerlink" title="后记"></a>后记</h1><ul><li>linux的文件和文件夹下载与上传</li><li><a href="https://yhf7.github.io/" target="_blank" rel="noopener">欢迎进入我的博客</a>：<a href="https://yhf7.github.io/" target="_blank" rel="noopener">https://yhf7.github.io/</a></li><li>如果有什么侵权的话，请及时添加小编微信以及qq也可以来告诉小编（905477376微信qq通用），谢谢！</li></ul>]]></content>
      
      
      <categories>
          
          <category> 服务器 </category>
          
      </categories>
      
      
        <tags>
            
            <tag> 服务器 </tag>
            
        </tags>
      
    </entry>
    
    <entry>
      <title>阿里云 Centos7 Node + Vue + Mysql + 自定义webapck打包 线上部署七步走</title>
      <link href="/2019/04/08/%E9%98%BF%E9%87%8C%E4%BA%91node+vue%E6%88%98%E5%B8%83/"/>
      <url>/2019/04/08/%E9%98%BF%E9%87%8C%E4%BA%91node+vue%E6%88%98%E5%B8%83/</url>
      
        <content type="html"><![CDATA[<link rel="stylesheet" class="aplayer-secondary-style-marker" href="/assets/css/APlayer.min.css"><script src="/assets/js/APlayer.min.js" class="aplayer-secondary-script-marker"></script><h1 id="前言"><a href="#前言" class="headerlink" title="前言"></a>前言</h1><ul><li>买服务器就是为了尝试线上战布项目</li><li>前期我们已经把所有的环境都已经准备好了</li><li>买的是轻量级服务器自带配有node环境（node自带4.6我升到了8.0）和mongodb，不过我这个案例用的是mysql</li><li>所以我昨天安装了一下mysql，都准备好了今天就来把我之前的小案例放上来实现实战</li><li>我的整个案例原来完全是线下的，所以要把数据库迁移后台迁移再上前端</li></ul><h1 id="工具"><a href="#工具" class="headerlink" title="工具"></a>工具</h1><ul><li>线上 Centose7 服务器（这个系统无差的都可以）</li><li>Node + Mysql 环境 （不懂的看我前面文章）</li><li>Node + Vue + Mysql 小案例一个(我用vue-cli打包比较方便你们随意着么高兴着么来) </li><li>Navicat for MySQL 数据库迁移</li><li>全局安装 node 8.0 以上版本</li><li>vs code 修改代码（软件一个自己喜欢）</li><li>熟悉vim</li><li>熟悉控制台操作为佳</li></ul><h1 id="开始"><a href="#开始" class="headerlink" title="开始"></a>开始</h1><h2 id="第一步把本地数据库表迁移到线上数据库"><a href="#第一步把本地数据库表迁移到线上数据库" class="headerlink" title="第一步把本地数据库表迁移到线上数据库"></a>第一步把本地数据库表迁移到线上数据库</h2><ol><li><p>使用navicat 导出数据库数据表</p><p><img src="/aly/nv1.png" alt="npm"></p></li><li><p>在阿里云的服务器mysql导入数据库</p><p><img src="/aly/nv2.png" alt="npm"></p><p><img src="/aly/nv3.png" alt="npm"></p></li></ol><h2 id="第二步更改后端数据库连接方式与端口号"><a href="#第二步更改后端数据库连接方式与端口号" class="headerlink" title="第二步更改后端数据库连接方式与端口号"></a>第二步更改后端数据库连接方式与端口号</h2><ul><li><p>进入node后端案例mysql连接配置文件</p><p><img src="/aly/nv4.png" alt="npm"></p></li><li><p>检查端口是否占用了（如果修改了端口请记得到后台防火墙开启权限）</p><p><img src="/aly/nv5.png" alt="npm"></p></li></ul><h2 id="第三步传输到服务器"><a href="#第三步传输到服务器" class="headerlink" title="第三步传输到服务器"></a>第三步传输到服务器</h2><ul><li><p>我说过传文件夹不好传所以我们要打包传</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">$ scp 上传文件的地址 root@ip地址:上传到服务器什么位置</span><br></pre></td></tr></table></figure><p><img src="/aly/nv6.png" alt="npm"></p></li><li><p>进入到文件夹解压包文件</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">$ unzip 文件夹名.zip</span><br><span class="line">$ rm -rf 文件夹名.zip 清除压缩包</span><br></pre></td></tr></table></figure></li></ul><h2 id="第四步开启服务"><a href="#第四步开启服务" class="headerlink" title="第四步开启服务"></a>第四步开启服务</h2><ul><li><p>开启后端服务</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment"># 进入文件夹</span></span><br><span class="line">$ <span class="built_in">cd</span> node_server</span><br><span class="line"><span class="comment"># 查看文件</span></span><br><span class="line">$ ls</span><br><span class="line"><span class="comment"># 安装依赖包(我安装了cnpm，如果没有的用npm安装包)</span></span><br><span class="line">$ cnpm i</span><br><span class="line"><span class="comment"># 跑项目</span></span><br><span class="line">$ node app.js</span><br></pre></td></tr></table></figure><p><img src="/aly/nv7.png" alt="npm"></p><p><img src="/aly/nv8.png" alt="npm"></p></li></ul><h2 id="第五步变更vue信息-打包-上传"><a href="#第五步变更vue信息-打包-上传" class="headerlink" title="第五步变更vue信息/打包/上传"></a>第五步变更vue信息/打包/上传</h2><h3 id="1-信息变更"><a href="#1-信息变更" class="headerlink" title="1. 信息变更"></a>1. 信息变更</h3><ul><li><p>变更请求地址，因为本来我是前后分离开发使用的是axios的请求所以默认用了vuecli的代理跨域</p></li><li><p>在线上放在服务区里面应该是不存在跨域的但是本来就是这样写了我改一下地址和端口算了其他就不做修改</p><p><img src="/aly/nv9.png" alt="npm"></p><h3 id="2-打包方法（vue-cli-webpack自定义）"><a href="#2-打包方法（vue-cli-webpack自定义）" class="headerlink" title="2.打包方法（vue-cli/webpack自定义）"></a>2.打包方法（vue-cli/webpack自定义）</h3><h4 id="打包方法一-vue-cli打包方法打包文件-得到dist文件夹"><a href="#打包方法一-vue-cli打包方法打包文件-得到dist文件夹" class="headerlink" title="打包方法一 vue-cli打包方法打包文件(得到dist文件夹)"></a>打包方法一 vue-cli打包方法打包文件(得到dist文件夹)</h4><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">$ npm run build</span><br></pre></td></tr></table></figure></li></ul><h5 id="打包方法二-自定义配置webpack（非vue-cli构建的项目才使用）"><a href="#打包方法二-自定义配置webpack（非vue-cli构建的项目才使用）" class="headerlink" title="打包方法二 自定义配置webpack（非vue-cli构建的项目才使用）"></a>打包方法二 自定义配置webpack（非vue-cli构建的项目才使用）</h5><ol><li>安装依赖（全局安装是我的个人习惯）<figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment"># 由于现在安装的都是4.29.0以上的版本了所以要一并安装webpack-cli</span></span><br><span class="line">$ cnpm i webpack webpack-cli -g</span><br></pre></td></tr></table></figure></li></ol><p><img src="/aly/w1.png" alt="webpack"></p><ol start="2"><li>配置打包文件（在项目的根目录建立webpack.config.js文件）<figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br></pre></td><td class="code"><pre><span class="line">const path = require(<span class="string">'path'</span>);</span><br><span class="line"></span><br><span class="line">module.exports = &#123;</span><br><span class="line">  entry: <span class="string">'./src/main.js'</span>,</span><br><span class="line">  output: &#123;</span><br><span class="line">    filename: <span class="string">'bundle.js'</span>,</span><br><span class="line">    path: path.resolve(__dirname, <span class="string">'dist'</span>)</span><br><span class="line">  &#125;</span><br><span class="line">&#125;;</span><br></pre></td></tr></table></figure></li></ol><p><img src="/aly/w2.png" alt="webpack"></p><ol start="3"><li>打包<figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">$ npx webpack --config webpack.config.js</span><br></pre></td></tr></table></figure></li></ol><p><img src="/aly/w3.png" alt="webpack"><br><img src="/aly/w4.png" alt="webpack"></p><ol start="4"><li>如果你不希望在控制它输入着么多想npm run dev这样多方式打开也是可以的<figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">$ npm run build</span><br></pre></td></tr></table></figure></li></ol><p><img src="/aly/w5.png" alt="webpack"></p><h3 id="3-上传打包文件（我们只是需要里面的文件其他都不需要）"><a href="#3-上传打包文件（我们只是需要里面的文件其他都不需要）" class="headerlink" title="3. 上传打包文件（我们只是需要里面的文件其他都不需要）"></a>3. 上传打包文件（我们只是需要里面的文件其他都不需要）</h3><ul><li>这里按照相同的方法传到线上的public文件夹里面</li></ul><p><img src="/aly/nv10.png" alt="npm"></p><h2 id="第六步变更后端路由"><a href="#第六步变更后端路由" class="headerlink" title="第六步变更后端路由"></a>第六步变更后端路由</h2><ul><li><p>配置静态资源库</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">$ vim app.js</span><br></pre></td></tr></table></figure><p><img src="/aly/nv11.png" alt="npm"></p></li></ul><h2 id="第七步开启服务查看线上网页-持久化开启"><a href="#第七步开启服务查看线上网页-持久化开启" class="headerlink" title="第七步开启服务查看线上网页/持久化开启"></a>第七步开启服务查看线上网页/持久化开启</h2><ul><li>开启服务</li></ul><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">$ node app.js</span><br></pre></td></tr></table></figure><p><img src="/aly/nv12.png" alt="npm"></p><ul><li>持久化管理</li></ul><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line">$ pm2 start app.js</span><br><span class="line"><span class="comment"># 加名字</span></span><br><span class="line">$ pm2 start app.js --name 名字</span><br><span class="line"><span class="comment"># 使用npm run 启动</span></span><br><span class="line">$ pm2 start npm --name 名字 -- run serve</span><br></pre></td></tr></table></figure><h1 id="后记"><a href="#后记" class="headerlink" title="后记"></a>后记</h1><ul><li>阿里云node+vue+mysql战部记录，不知道对不对但是我觉得是成功的</li><li><a href="https://yhf7.github.io/" target="_blank" rel="noopener">欢迎进入我的博客</a>：<a href="https://yhf7.github.io/" target="_blank" rel="noopener">https://yhf7.github.io/</a></li><li>如果有什么侵权的话，请及时添加小编微信以及qq也可以来告诉小编（905477376微信qq通用），谢谢！</li></ul>]]></content>
      
      
      <categories>
          
          <category> 服务器 </category>
          
      </categories>
      
      
        <tags>
            
            <tag> 服务器 </tag>
            
        </tags>
      
    </entry>
    
    <entry>
      <title>阿里云 Centos 7 安装 PHP开发环境 Apache/PHP</title>
      <link href="/2019/04/08/%E9%98%BF%E9%87%8C%E4%BA%91%E5%AE%89%E8%A3%85PHP%E5%BC%80%E5%8F%91%E7%8E%AF%E5%A2%83/"/>
      <url>/2019/04/08/%E9%98%BF%E9%87%8C%E4%BA%91%E5%AE%89%E8%A3%85PHP%E5%BC%80%E5%8F%91%E7%8E%AF%E5%A2%83/</url>
      
        <content type="html"><![CDATA[<link rel="stylesheet" class="aplayer-secondary-style-marker" href="/assets/css/APlayer.min.css"><script src="/assets/js/APlayer.min.js" class="aplayer-secondary-script-marker"></script><h1 id="前言"><a href="#前言" class="headerlink" title="前言"></a>前言</h1><ul><li>既然搭了mysql，为什么不把php也布置上来呢</li><li>这就安装Apache，弄了一晚上也是出现了一些错误弄了几次最后战胜了它</li></ul><h1 id="安装-Apache"><a href="#安装-Apache" class="headerlink" title="安装 Apache"></a>安装 Apache</h1><h2 id="检查环境"><a href="#检查环境" class="headerlink" title="检查环境"></a>检查环境</h2><ol><li>查看系统是否已经安装,我已经安装了所以会已经存在 （如果没有的直接看后面安装就好）<figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">$ rpm -qa | grep httpd</span><br></pre></td></tr></table></figure></li></ol><p><img src="/aly/p1.png" alt="php"></p><ol start="2"><li><p>停止服务器运行</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">$ /usr/sbin/httpd -k stop</span><br></pre></td></tr></table></figure></li><li><p>清空原有点安装包</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">$ yum -y erase httpd.x86_64</span><br></pre></td></tr></table></figure></li><li><p>再次查看是否已经清空(如果没有请继续清除)</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">$ yum list | grep httpd</span><br></pre></td></tr></table></figure></li></ol><h2 id="yum命令安装http"><a href="#yum命令安装http" class="headerlink" title="yum命令安装http"></a>yum命令安装http</h2><ol><li>安装httpd<figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">$  yum -y install httpd</span><br></pre></td></tr></table></figure></li></ol><p><img src="/aly/p2.png" alt="php"></p><ol start="2"><li><p>删除默认的欢迎页面(这个没有截图)</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">$ rm -f /etc/httpd/conf.d/welcome.conf</span><br></pre></td></tr></table></figure></li><li><p>配置httpd，将服务器名称替换为您自己的环境 （默认的80端口最好别动）</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br></pre></td><td class="code"><pre><span class="line">$ vim /etc/httpd/conf/httpd.conf</span><br><span class="line"></span><br><span class="line">------------------------</span><br><span class="line"><span class="comment"># line 86: 改变管理员的邮箱地址</span></span><br><span class="line">ServerAdmin root@905477376@qq.com</span><br><span class="line"><span class="comment"># line 95: 改变域名信息 (域名还没批先用公网ip代替着)</span></span><br><span class="line">ServerName 119.23.75.150:80</span><br><span class="line"><span class="comment"># line 151: none变成All</span></span><br><span class="line">AllowOverride All</span><br><span class="line"><span class="comment"># line 164: 添加只能使用目录名称访问的文件名</span></span><br><span class="line">DirectoryIndex index.html index.cgi index.php</span><br></pre></td></tr></table></figure></li></ol><hr><p><img src="/aly/p3.png" alt="php"><br><img src="/aly/p6.png" alt="php"><br><img src="/aly/p7.png" alt="php"><br><img src="/aly/p8.png" alt="php"></p><ol start="4"><li>开启服务器 (如果用的是阿里轻量级安装有nginx的这里要注意了)<figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">$ systemctl start httpd(这个开启也可以)</span><br><span class="line">$ httpd（我个人喜欢直接用这个开启服务）</span><br></pre></td></tr></table></figure></li></ol><p><img src="/aly/p4.png" alt="php"></p><ol start="5"><li>假如出现上图那个98的那个错误其实就是端口被占用（nginx引起的错误）</li></ol><ul><li>解决方法1按照上面图片说的改一个端口就好了</li><li>解决方法2：屏蔽反向代理<figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment"># 1.修改配置</span></span><br><span class="line">$ vim /usr/<span class="built_in">local</span>/nginx/conf/nginx.conf</span><br><span class="line"><span class="comment"># 2.检查修改是否合法</span></span><br><span class="line">$ /usr/<span class="built_in">local</span>/nginx/sbin/nginx -t</span><br><span class="line"><span class="comment"># 出现下面这两句表示正确</span></span><br><span class="line"><span class="comment"># the configuration file /usr/local/nginx/conf/nginx.conf syntax is ok</span></span><br><span class="line"><span class="comment"># configuration file /usr/local/nginx/conf/nginx.conf test is successful</span></span><br><span class="line"><span class="comment"># 3.重启nginx</span></span><br><span class="line">$ /usr/<span class="built_in">local</span>/nginx/sbin/nginx -s reload</span><br></pre></td></tr></table></figure></li></ul><p><img src="/aly/p5.png" alt="php"></p><ol start="6"><li><p>设置默认启动httpd</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">$ systemctl <span class="built_in">enable</span> httpd</span><br></pre></td></tr></table></figure></li><li><p>如果开启了防火墙的指向下面的命令开启（阿里轻量级不需要，在后台设置就好不过默认就是80）</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line">$ firewall-cmd --add-service=http --permanent</span><br><span class="line"><span class="comment"># 出现 success 成功</span></span><br><span class="line">$ firewall-cmd --reload</span><br><span class="line"><span class="comment"># 出现 success 成功</span></span><br></pre></td></tr></table></figure></li><li><p>第一个服务器页面（刚才一开始被我们删了）</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">$ vim /var/www/html/index.html</span><br></pre></td></tr></table></figure></li></ol><ul><li>写入这一段进去保存<figure class="highlight html"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">html</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">body</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">div</span> <span class="attr">style</span>=<span class="string">"width: 100%; font-size: 40px; font-weight: bold; text-align: center;"</span>&gt;</span></span><br><span class="line">Welcome access LinuxProbe.org,This is Test Page!</span><br><span class="line"><span class="tag">&lt;/<span class="name">div</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">body</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">html</span>&gt;</span></span><br></pre></td></tr></table></figure></li></ul><ol start="9"><li>查看第一个服务器页面</li></ol><ul><li>网页打开输入自己的域名或者ip，能出现图片中的样子就是配置成功了<br><img src="/aly/p9.png" alt="php"></li></ul><h2 id="Apache-常用命令"><a href="#Apache-常用命令" class="headerlink" title="Apache 常用命令"></a>Apache 常用命令</h2><ul><li>开机和关闭命令中有多个，选其一使用就好<figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment"># 开启</span></span><br><span class="line">$ httpd</span><br><span class="line">$ /usr/sbin/httpd -k start</span><br><span class="line">$ systemctl start httpd.service</span><br><span class="line"></span><br><span class="line"><span class="comment"># 关闭</span></span><br><span class="line">$ /usr/sbin/httpd -k stop</span><br><span class="line">$ systemctl stop httpd.service</span><br><span class="line"></span><br><span class="line"><span class="comment"># 重启</span></span><br><span class="line">$ /usr/sbin/httpd -k restart</span><br><span class="line"></span><br><span class="line"><span class="comment"># 开机启动/关闭</span></span><br><span class="line">systemctl <span class="built_in">enable</span> httpd.service <span class="comment">#开机启动</span></span><br><span class="line">systemctl <span class="built_in">disable</span> httpd.service <span class="comment">#开机不启动</span></span><br><span class="line"></span><br><span class="line"><span class="comment"># 状态检查</span></span><br><span class="line">$ systemctl status httpd.service</span><br></pre></td></tr></table></figure></li></ul><h1 id="安装PHP"><a href="#安装PHP" class="headerlink" title="安装PHP"></a>安装PHP</h1><ol><li>安装<figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">$ yum -y install php php-mbstring php-pear</span><br></pre></td></tr></table></figure></li></ol><p><img src="/aly/php1.png" alt="php"></p><ol start="2"><li>设置时区<figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line">$ vim /etc/php.ini</span><br><span class="line"><span class="comment"># line 878: 取消注释，设置时区</span></span><br><span class="line">date.timezone = <span class="string">"Asia/Shanghai"</span></span><br></pre></td></tr></table></figure></li></ol><p><img src="/aly/php2.png" alt="php"></p><ol start="3"><li>创建一个PHP测试页面，并使用Web浏览器从客户端PC访问它。如果显示以下页面，它是确定。(ip+index.php)<figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">$ vim /var/www/html/index.php</span><br></pre></td></tr></table></figure></li></ol><figure class="highlight html"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br></pre></td><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">html</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">body</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">div</span> <span class="attr">style</span>=<span class="string">"width: 100%; font-size: 40px; font-weight: bold; text-align: center;"</span>&gt;</span></span><br><span class="line">&lt;?php</span><br><span class="line">   print Date("Y/m/d");</span><br><span class="line">?&gt;</span><br><span class="line"><span class="tag">&lt;/<span class="name">div</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">body</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">html</span>&gt;</span></span><br></pre></td></tr></table></figure><p><img src="/aly/php3.png" alt="php"></p><ol start="4"><li>创建phpinfo测试页，确认是都开启php支持<figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">$ <span class="built_in">echo</span> <span class="string">"&lt;?php phpinfo(); ?&gt;"</span> &gt; /var/www/html/phpinfo.php</span><br></pre></td></tr></table></figure></li></ol><p><img src="/aly/php4.png" alt="php"></p><ol start="5"><li>安装常用拓展依赖(由于linux中php的源包把安装依赖去除了为了后续开发方便要把常用依赖安装了)<figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">$ yum -y install php-mysql php-gd php-ldap php-odbc php-pear php-xml php-xmlrpc php-mbstring php-soap curl curl-devel</span><br></pre></td></tr></table></figure></li></ol><p><img src="/aly/php5.png" alt="php"></p><ol start="6"><li>链接数据库测试(创建test.php,也可以下载阿里云的测试mysql)</li></ol><ul><li><a href="https://help.aliyun.com/knowledge_detail/36302.html" target="_blank" rel="noopener">阿里云mysql测试代码地址</a><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><span class="line">&lt;?php</span><br><span class="line">$conn = @mysqli_connect(&quot;端口号&quot;,&quot;用户名&quot;,&quot;密码&quot;,&quot;数据库名&quot;);</span><br><span class="line">if (!$conn) &#123;</span><br><span class="line">        die(&quot;连接失败&quot;);</span><br><span class="line">&#125;</span><br><span class="line"> echo &quot;连接成功&quot;;</span><br><span class="line">?&gt;</span><br></pre></td></tr></table></figure></li></ul><p><img src="/aly/php6.png" alt="php"><br><img src="/aly/php7.png" alt="php"></p><h1 id="后记"><a href="#后记" class="headerlink" title="后记"></a>后记</h1><ul><li>安装了mysql当然也要试试PHP啦，这就是我安装apache和php的方法和解决错误方法，下一个说node+vue战布</li><li><a href="https://yhf7.github.io/" target="_blank" rel="noopener">欢迎进入我的博客</a>：<a href="https://yhf7.github.io/" target="_blank" rel="noopener">https://yhf7.github.io/</a></li><li>如果有什么侵权的话，请及时添加小编微信以及qq也可以来告诉小编（905477376微信qq通用），谢谢！</li></ul>]]></content>
      
      
      <categories>
          
          <category> 服务器 </category>
          
      </categories>
      
      
        <tags>
            
            <tag> 数据库 </tag>
            
        </tags>
      
    </entry>
    
    <entry>
      <title>阿里云 Centos 7 安装5.6mysql</title>
      <link href="/2019/04/07/%E9%98%BF%E9%87%8C%E4%BA%91%E5%AE%89%E8%A3%855.6mysql/"/>
      <url>/2019/04/07/%E9%98%BF%E9%87%8C%E4%BA%91%E5%AE%89%E8%A3%855.6mysql/</url>
      
        <content type="html"><![CDATA[<link rel="stylesheet" class="aplayer-secondary-style-marker" href="/assets/css/APlayer.min.css"><script src="/assets/js/APlayer.min.js" class="aplayer-secondary-script-marker"></script><h1 id="前言"><a href="#前言" class="headerlink" title="前言"></a>前言</h1><ul><li>买了服务器当然要尽情的糟蹋它，给了钱的不能浪费啊</li><li>昨天开启了默认的mongodb然后把之前弄的mongodb的项目放了上去</li><li>我就想mysql的能不能放上去呢，虽然是轻量级应用但是他也是服务器啊只是默认会安装一种语言而已</li><li>那我就想把mysql装上去，为了避免新版与旧版起冲突我就安装了5.6版的我本地好像是5.6还是5.5忘记了</li><li>自己安装是个巨坑希望能帮到你</li></ul><h1 id="工具"><a href="#工具" class="headerlink" title="工具"></a>工具</h1><ul><li>Centos 7 服务器</li><li>熟悉vim</li><li>本地 Navicat of Mysql 测试连接</li></ul><h1 id="开始"><a href="#开始" class="headerlink" title="开始"></a>开始</h1><h2 id="安装配置"><a href="#安装配置" class="headerlink" title="安装配置"></a>安装配置</h2><ol><li><p>检查服务器是否自带有mysql(用别人镜像的需要注意)</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">$ yum list installed | grep mysql</span><br></pre></td></tr></table></figure></li><li><p>如果发现有系统自带mysql，果断这么干</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">$ yum -y remove mysql-libs.x86_64</span><br></pre></td></tr></table></figure></li><li><p>随便在你存放文件的目录下执行，mysql的yum源服务器在国外的，会比较慢不过我有梯子我不怕哈哈哈</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">$ wget http://repo.mysql.com/mysql-community-release-el6-5.noarch.rpm</span><br></pre></td></tr></table></figure></li><li><p>这个rpm还不是mysql的安装文件，只是两个yum源文件，执行后，在/etc/yum.repos.d/ 这个目录下多出mysql-community-source.repo和mysql-community.repo</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">$ rpm -ivh mysql-community-release-el6-5.noarch.rpm</span><br></pre></td></tr></table></figure></li><li><p>这个时候，可以用yum repolist mysql这个命令查看一下是否已经有mysql可安装文件</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">$ yum repolist all | grep mysql</span><br></pre></td></tr></table></figure></li><li><p>安装mysql 服务器命令（一路yes）</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">$ yum install mysql-community-server</span><br></pre></td></tr></table></figure></li></ol><p><img src="/aly/sql9.png" alt="sql"><br><img src="/aly/sql1.png" alt="sql"><br><img src="/aly/sql1=2.png" alt="sql"></p><ol start="7"><li>安装成功后开启sql（默认没有密码）<figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">$ service mysqld start</span><br></pre></td></tr></table></figure></li></ol><p><img src="/aly/sql3.png" alt="sql"></p><ol start="8"><li>由于mysql刚刚安装完的时候，mysql的root用户的密码默认是空的，所以我们需要及时用mysql的root用户登录（第一次回车键，不用输入密码），并修改密码(注意看我上面的图我是用mysql进来了的)<figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">$ update user <span class="built_in">set</span> password=PASSWORD(<span class="string">"这里输入root用户密码"</span>) <span class="built_in">where</span> User=<span class="string">'root'</span>;</span><br></pre></td></tr></table></figure></li></ol><p><img src="/aly/sql4.png" alt="sql"></p><ol start="9"><li><p>查看mysql是否自启动,并且设置开启自启动命令</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">$ chkconfig --list | grep mysqld</span><br><span class="line">$ chkconfig mysqld on</span><br></pre></td></tr></table></figure></li><li><p>清除安装包</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">$ rm -rf mysql-community-release-el6-5.noarch.rpm</span><br></pre></td></tr></table></figure></li></ol><p><img src="/aly/sql12.png" alt="sql"></p><h2 id="案例测试连接数据库"><a href="#案例测试连接数据库" class="headerlink" title="案例测试连接数据库"></a>案例测试连接数据库</h2><ol><li>生产开发环境<figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment"># 一个mysql的文件夹</span></span><br><span class="line">$ mkdir mysql</span><br><span class="line"><span class="comment"># 进入文件假</span></span><br><span class="line">$ <span class="built_in">cd</span> mysql</span><br><span class="line"><span class="comment">#  初始化项目</span></span><br><span class="line">$ npm init -y</span><br><span class="line"><span class="comment"># 安装mysql依赖包</span></span><br><span class="line">$ npm i mysql</span><br><span class="line"><span class="comment"># 建立一个文件写代码</span></span><br><span class="line">$ touch app.js</span><br><span class="line"><span class="comment"># vim编写app.js</span></span><br><span class="line">$ vim app.js</span><br></pre></td></tr></table></figure></li></ol><p><img src="/aly/sql6.png" alt="sql"></p><ol start="2"><li>编写app.js<figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">var</span> mysql = <span class="built_in">require</span>(<span class="string">"mysql"</span>);</span><br><span class="line"><span class="keyword">var</span> conn = mysql.createConnection(&#123;</span><br><span class="line">    host:<span class="string">'127.0.0.1'</span>, <span class="comment">// ip</span></span><br><span class="line">    user:<span class="string">'root'</span>, <span class="comment">// 用户名</span></span><br><span class="line">    password:<span class="string">'xxxxx'</span>, <span class="comment">// 密码</span></span><br><span class="line">    database:<span class="string">'test'</span>  <span class="comment">// 数据库名</span></span><br><span class="line">&#125;);</span><br><span class="line"></span><br><span class="line">conn.connect(<span class="function"><span class="keyword">function</span>(<span class="params">err</span>)</span>&#123;</span><br><span class="line">    <span class="keyword">if</span>(err)&#123;</span><br><span class="line">        <span class="built_in">console</span>.log(<span class="string">"连接失败"</span>);</span><br><span class="line">    &#125;<span class="keyword">else</span>&#123;</span><br><span class="line">        <span class="built_in">console</span>.log(<span class="string">"连接成功"</span>);</span><br><span class="line">    &#125;</span><br><span class="line">&#125;);</span><br></pre></td></tr></table></figure></li></ol><p><img src="/aly/sql5.png" alt="sql"></p><ul><li>用node app.js 跑起来<br>看到如图就是正确连接到数据库了<br><img src="/aly/sql7.png" alt="sql"></li></ul><h2 id="设置权限外网连接数据库"><a href="#设置权限外网连接数据库" class="headerlink" title="设置权限外网连接数据库"></a>设置权限外网连接数据库</h2><ol><li>设置权限<figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line">$ mysql -uroot -p</span><br><span class="line">$ use mysql;</span><br><span class="line">$ Grant all privileges on *.* to <span class="string">'root'</span>@<span class="string">'%'</span> identified by <span class="string">'密码'</span> with grant option;  </span><br><span class="line">$ flush privileges;</span><br></pre></td></tr></table></figure></li></ol><p><img src="/aly/sql8.png" alt="sql"></p><ol start="2"><li>本地连接测试</li></ol><ul><li>使用navicat mysql<br><img src="/aly/sql10.png" alt="sql"></li><li>点击测试<br><img src="/aly/sql11.png" alt="sql"></li></ul><h2 id="安装后使用命令出现1044报错-处理"><a href="#安装后使用命令出现1044报错-处理" class="headerlink" title="安装后使用命令出现1044报错 处理"></a>安装后使用命令出现1044报错 处理</h2><ol><li><p>停掉数据库</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">$ /etc/init.d/mysqld stop</span><br></pre></td></tr></table></figure></li><li><p>进入数据库安全模式</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">$ mysqld_safe --skip-grant-tables &amp;</span><br></pre></td></tr></table></figure></li><li><p>切入到mysql然后操作修改密码</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><span class="line">$ mysql</span><br><span class="line"></span><br><span class="line"><span class="comment"># 要看见mysql&gt; 才去执行后面的代表已经进入了数据库 (test123哪里是写密码自己喜欢什么写什么)</span></span><br><span class="line">$ use mysql;</span><br><span class="line">$ UPDATE user SET password=password(<span class="string">"test123"</span>) WHERE user=<span class="string">'root'</span>;   </span><br><span class="line">$ flush privileges;</span><br><span class="line">$ <span class="built_in">exit</span>;</span><br></pre></td></tr></table></figure></li><li><p>再次进入测试</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">$ mysql -uroot -p</span><br><span class="line">$ 输入刚才设置的密码</span><br></pre></td></tr></table></figure></li></ol><h1 id="后记"><a href="#后记" class="headerlink" title="后记"></a>后记</h1><ul><li>阿里云安装mysql以及连接测试，花了几个小时时间，一开始报错1044弄了好久后来弄好了，测外连接也报错后面也弄好了</li><li><a href="https://yhf7.github.io/" target="_blank" rel="noopener">欢迎进入我的博客</a>：<a href="https://yhf7.github.io/" target="_blank" rel="noopener">https://yhf7.github.io/</a></li><li>如果有什么侵权的话，请及时添加小编微信以及qq也可以来告诉小编（905477376微信qq通用），谢谢！</li></ul>]]></content>
      
      
      <categories>
          
          <category> 服务器 </category>
          
      </categories>
      
      
        <tags>
            
            <tag> 数据库 </tag>
            
        </tags>
      
    </entry>
    
    <entry>
      <title>本地向阿里云服务器传文件/简单的nginx端口代理</title>
      <link href="/2019/04/05/%E9%98%BF%E9%87%8C%E4%BA%91zip/"/>
      <url>/2019/04/05/%E9%98%BF%E9%87%8C%E4%BA%91zip/</url>
      
        <content type="html"><![CDATA[<link rel="stylesheet" class="aplayer-secondary-style-marker" href="/assets/css/APlayer.min.css"><script src="/assets/js/APlayer.min.js" class="aplayer-secondary-script-marker"></script><h1 id="前言"><a href="#前言" class="headerlink" title="前言"></a>前言</h1><ul><li>既然线上已经可以跑了，那就看看着么把本地的项目放上去跑</li></ul><h1 id="工具"><a href="#工具" class="headerlink" title="工具"></a>工具</h1><ul><li>mac</li><li>已经写好的一个例子</li></ul><h1 id="开始"><a href="#开始" class="headerlink" title="开始"></a>开始</h1><h2 id="使用scp传文件到服务器"><a href="#使用scp传文件到服务器" class="headerlink" title="使用scp传文件到服务器"></a>使用scp传文件到服务器</h2><ul><li>本地做好的一个小案例，linux不支持传文件夹我们只好打包成zip传上去<figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">$ scp 要传的文件路径 用户@端口号:传到系统的那个位置</span><br></pre></td></tr></table></figure></li></ul><p><img src="/aly/z1.png" alt="选配"></p><h2 id="安装插件解压zip"><a href="#安装插件解压zip" class="headerlink" title="安装插件解压zip"></a>安装插件解压zip</h2><ul><li>直接这样我们是无法查看zip的</li><li>所以我们只好借助里面的插件来帮助我们<br>Linux(CentOS7)安装zip、unzip命令<figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">$ yum install -y unzip zip</span><br></pre></td></tr></table></figure></li></ul><p><img src="/aly/z2.png" alt="选配"></p><h2 id="解压运行项目"><a href="#解压运行项目" class="headerlink" title="解压运行项目"></a>解压运行项目</h2><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">$ unzip 要解压的文件</span><br></pre></td></tr></table></figure><p><img src="/aly/z3.png" alt="选配"><br><img src="/aly/z4.png" alt="选配"><br><img src="/aly/z5.png" alt="选配"></p><h2 id="nginx端口代理"><a href="#nginx端口代理" class="headerlink" title="nginx端口代理"></a>nginx端口代理</h2><ul><li>配置文件,添加代理<figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">$ vim /usr/<span class="built_in">local</span>/nginx/conf/nginx.conf</span><br></pre></td></tr></table></figure></li></ul><p><img src="/aly/n1.png" alt="选配"><br><img src="/aly/n2.png" alt="选配"></p><ul><li>重启nginx服务<figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">$ /usr/<span class="built_in">local</span>/nginx/sbin/nginx -s reload</span><br></pre></td></tr></table></figure></li></ul><p><img src="/aly/n3.png" alt="选配"><br><img src="/aly/n4.png" alt="选配"></p><h1 id="后记"><a href="#后记" class="headerlink" title="后记"></a>后记</h1><ul><li>阿里云上传文件已经nginx端口代理</li><li><a href="https://yhf7.github.io/" target="_blank" rel="noopener">欢迎进入我的博客</a>：<a href="https://yhf7.github.io/" target="_blank" rel="noopener">https://yhf7.github.io/</a></li><li>如果有什么侵权的话，请及时添加小编微信以及qq也可以来告诉小编（905477376微信qq通用），谢谢！</li></ul>]]></content>
      
      
      <categories>
          
          <category> 服务器 </category>
          
      </categories>
      
      
        <tags>
            
            <tag> 服务器 </tag>
            
        </tags>
      
    </entry>
    
    <entry>
      <title>阿里云 Centos7 node第一个项目</title>
      <link href="/2019/04/05/%E9%98%BF%E9%87%8C%E4%BA%91hello/"/>
      <url>/2019/04/05/%E9%98%BF%E9%87%8C%E4%BA%91hello/</url>
      
        <content type="html"><![CDATA[<link rel="stylesheet" class="aplayer-secondary-style-marker" href="/assets/css/APlayer.min.css"><script src="/assets/js/APlayer.min.js" class="aplayer-secondary-script-marker"></script><h1 id="前言"><a href="#前言" class="headerlink" title="前言"></a>前言</h1><ul><li>试过很多地方的战部，没有买过阿里腾讯的服务器，今天就想自己买个服务器玩一下</li><li>趁着还是学生可以以学生价格买个便宜一点服务器自己玩一下</li><li>买了下来当然是第一个Hello world那是必须的啦！</li></ul><h1 id="工具"><a href="#工具" class="headerlink" title="工具"></a>工具</h1><ul><li>Mac os 系统</li><li>控制台</li><li>阿里云Centos7服务器</li><li>由于我直接买的是应用程序不需要我自己去安装node那我说了</li><li>懂得vim使用，Linux命令</li></ul><h1 id="开始"><a href="#开始" class="headerlink" title="开始"></a>开始</h1><h2 id="购买服务器-（是学生就去把学生认证做了）"><a href="#购买服务器-（是学生就去把学生认证做了）" class="headerlink" title="购买服务器 （是学生就去把学生认证做了）"></a>购买服务器 （是学生就去把学生认证做了）</h2><ul><li><a href="https://promotion.aliyun.com/ntms/act/campus2018.html" target="_blank" rel="noopener">云计划</a><br><img src="/aly/x1.png" alt="选配"></li><li>控制台查看<br><img src="/aly/x2.png" alt="控制台"></li></ul><h2 id="本地连接服务器-激活nvm"><a href="#本地连接服务器-激活nvm" class="headerlink" title="本地连接服务器/激活nvm"></a>本地连接服务器/激活nvm</h2><ol><li>连接服务器</li></ol><ul><li>这个ip号就是公网的ip地址在控制台哪里可以看到的</li><li>ssh 登录用户@ip号<br><img src="/aly/x3.png" alt="连接服务器"></li></ul><ol start="2"><li>激活nvm</li></ol><ul><li>虽然内置已经安装了node等但是一开始是无法使用的<br><img src="/aly/x4.png" alt="vnm未激活"></li><li><p>使用命令激活nvm</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line">$ <span class="built_in">echo</span> <span class="string">". ~/.nvm/nvm.sh"</span> &gt;&gt; /etc/profile</span><br><span class="line"></span><br><span class="line">$ <span class="built_in">source</span> /etc/profile</span><br></pre></td></tr></table></figure></li><li><p>成功激活<br><img src="/aly/x5.png" alt="激活成功"></p></li></ul><ol start="3"><li>安装全局生成器<figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">$ npm install –g express-generator</span><br></pre></td></tr></table></figure></li></ol><h2 id="vim编写第一个Hello-wrold"><a href="#vim编写第一个Hello-wrold" class="headerlink" title="vim编写第一个Hello wrold"></a>vim编写第一个Hello wrold</h2><ol><li>项目初始化</li></ol><ul><li>本来就是在～了，直接创建一个text文件夹初始化项目<br><img src="/aly/x6.png" alt="文件夹"></li></ul><ol start="2"><li>安装web插件（express）</li></ol><ul><li>为了写起来更加的方便安装的一个web插件<figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">$ npm i express</span><br></pre></td></tr></table></figure></li></ul><p><img src="/aly/x9.png" alt="文件夹"></p><ol start="3"><li>创建文件并编写文件<br><img src="/aly/x7.png" alt="文件夹"></li></ol><ul><li>vim编辑文件<figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">// vim语法</span></span><br><span class="line">i: 写入</span><br><span class="line">esc: 退出编辑</span><br><span class="line">:wq 保存并登录</span><br><span class="line"></span><br><span class="line"><span class="comment">// 程序</span></span><br><span class="line"><span class="keyword">const</span> express = <span class="built_in">require</span>(<span class="string">'express'</span>);</span><br><span class="line"><span class="keyword">const</span> app = express();</span><br><span class="line"></span><br><span class="line">app.get(<span class="string">'/'</span>,<span class="function"><span class="keyword">function</span> (<span class="params">req,res</span>) </span>&#123;</span><br><span class="line"> res.send(<span class="string">'Hello World'</span>);</span><br><span class="line"> <span class="built_in">console</span>.log(<span class="string">'test'</span>);</span><br><span class="line">&#125;)</span><br><span class="line"></span><br><span class="line"><span class="built_in">console</span>.log(<span class="string">'test2'</span>);</span><br><span class="line">app.listen(<span class="number">8080</span>);</span><br></pre></td></tr></table></figure></li></ul><p><img src="/aly/x8.png" alt="文件夹"></p><ol start="4"><li>项目跑起来<figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">$ node app.js</span><br></pre></td></tr></table></figure></li></ol><p><img src="/aly/x10.png" alt="文件夹"><br><img src="/aly/x11.png" alt="文件夹"></p><ol start="5"><li>解决无法显示页面</li></ol><ul><li>其实不是页面无法显示是防火墙挡住了</li><li>回到阿里云控制台把端口添加进入，再回来看页面<br><img src="/aly/x12.png" alt="文件夹"><br><img src="/aly/x13.png" alt="文件夹"></li></ul><h2 id="持久化运行项目"><a href="#持久化运行项目" class="headerlink" title="持久化运行项目"></a>持久化运行项目</h2><ul><li>我们虽然是把项目跑起来了但是我们断开连接就无法访问了</li><li>默认我们系统给我们安装了pm2 那就好好的利用<br><img src="/aly/x14.png" alt="文件夹"></li></ul><h2 id="一次可以允许多少个项目？"><a href="#一次可以允许多少个项目？" class="headerlink" title="一次可以允许多少个项目？"></a>一次可以允许多少个项目？</h2><ul><li>其实只要你服务器承受的住开多少个都可以<br><img src="/aly/x15.png" alt="文件夹"></li></ul><h1 id="后记"><a href="#后记" class="headerlink" title="后记"></a>后记</h1><ul><li>阿里云第一个hello项目记录</li><li><a href="https://yhf7.github.io/" target="_blank" rel="noopener">欢迎进入我的博客</a>：<a href="https://yhf7.github.io/" target="_blank" rel="noopener">https://yhf7.github.io/</a></li><li>如果有什么侵权的话，请及时添加小编微信以及qq也可以来告诉小编（905477376微信qq通用），谢谢！</li></ul>]]></content>
      
      
      <categories>
          
          <category> 服务器 </category>
          
      </categories>
      
      
        <tags>
            
            <tag> 服务器 </tag>
            
        </tags>
      
    </entry>
    
    <entry>
      <title>Flex 编写100度网页</title>
      <link href="/2019/04/03/flex%E5%86%99100%E5%BA%A6/"/>
      <url>/2019/04/03/flex%E5%86%99100%E5%BA%A6/</url>
      
        <content type="html"><![CDATA[<link rel="stylesheet" class="aplayer-secondary-style-marker" href="/assets/css/APlayer.min.css"><script src="/assets/js/APlayer.min.js" class="aplayer-secondary-script-marker"></script><h1 id="前言"><a href="#前言" class="headerlink" title="前言"></a>前言</h1><ul><li>最近都没什么时间更新博客</li><li>flex不是很会，特意花了两天时间用flex重写之前写过的一个网页界面</li><li>有利有弊，整体来说还是挺方便的</li></ul><h1 id="案例地址"><a href="#案例地址" class="headerlink" title="案例地址"></a>案例地址</h1><ul><li><a href="https://gitee.com/yhf7/100duhtml" target="_blank" rel="noopener">码云</a></li></ul><h1 id="效果图"><a href="#效果图" class="headerlink" title="效果图"></a>效果图</h1><p><img src="/flex/l1.png" alt="img"><br><img src="/flex/l2.png" alt="img"><br><img src="/flex/l3.png" alt="img"></p>]]></content>
      
      
      <categories>
          
          <category> Css </category>
          
      </categories>
      
      
        <tags>
            
            <tag> Css案例 </tag>
            
        </tags>
      
    </entry>
    
    <entry>
      <title>mpvue 开发插件</title>
      <link href="/2019/03/27/mpvue%E5%BC%80%E5%8F%91%E6%8F%92%E4%BB%B6/"/>
      <url>/2019/03/27/mpvue%E5%BC%80%E5%8F%91%E6%8F%92%E4%BB%B6/</url>
      
        <content type="html"><![CDATA[<link rel="stylesheet" class="aplayer-secondary-style-marker" href="/assets/css/APlayer.min.css"><script src="/assets/js/APlayer.min.js" class="aplayer-secondary-script-marker"></script><h1 id="前言"><a href="#前言" class="headerlink" title="前言"></a>前言</h1><ul><li>刚踏入mpvue这个坑</li><li>有些属性还是和vue不一样的，使用一些插件来方便开发</li></ul><h1 id="开始"><a href="#开始" class="headerlink" title="开始"></a>开始</h1><h2 id="wxapp-api-interceptors-微信api拦截器-（请求拦截axios）"><a href="#wxapp-api-interceptors-微信api拦截器-（请求拦截axios）" class="headerlink" title="wxapp-api-interceptors 微信api拦截器 （请求拦截axios）"></a>wxapp-api-interceptors 微信api拦截器 （请求拦截axios）</h2><ul><li>这个插件是用来拦截微信的api的使得运用可以像axios一样使用</li><li><a href="https://www.npmjs.com/package/wxapp-api-interceptors" target="_blank" rel="noopener">https://www.npmjs.com/package/wxapp-api-interceptors</a></li></ul><ol><li><p>安装</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">$ npm install wxapp-api-interceptors --save</span><br></pre></td></tr></table></figure></li><li><p>mpvue引用</p><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">import</span> wxApiInterceptors <span class="keyword">from</span> <span class="string">'wxapp-api-interceptors'</span>;</span><br><span class="line"> </span><br><span class="line">wxApiInterceptors(); <span class="comment">// 必须在调用小程序api之前调用</span></span><br></pre></td></tr></table></figure></li><li><p>设置请求拦截处理(返回拦截也是可以的)</p><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br></pre></td><td class="code"><pre><span class="line">wxApiInterceptors(&#123;</span><br><span class="line">    request: &#123;</span><br><span class="line">        request(params) &#123;</span><br><span class="line">            <span class="keyword">const</span> host = <span class="string">'https://test.com'</span></span><br><span class="line">            <span class="keyword">if</span> (!<span class="regexp">/^(http|\/\/)/</span>.test(params.url)) &#123;</span><br><span class="line">                params.url = host + params.url;</span><br><span class="line">            &#125;</span><br><span class="line">            <span class="keyword">return</span> params;</span><br><span class="line">        &#125;,</span><br><span class="line">    &#125;,</span><br><span class="line">&#125;);</span><br></pre></td></tr></table></figure></li></ol><h2 id="vuex持久化存储"><a href="#vuex持久化存储" class="headerlink" title="vuex持久化存储"></a>vuex持久化存储</h2><ul><li>在项目开发时使用vuex在刷新后是不会存储的</li><li><a href="https://github.com/robinvdvleuten/vuex-persistedstate" target="_blank" rel="noopener">https://github.com/robinvdvleuten/vuex-persistedstate</a></li></ul><ol><li><p>安装</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">$ npm install --save vuex-persistedstate</span><br></pre></td></tr></table></figure></li><li><p>配置</p><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">import</span> &#123; Store &#125; <span class="keyword">from</span> <span class="string">'vuex'</span></span><br><span class="line"><span class="keyword">import</span> createPersistedState <span class="keyword">from</span> <span class="string">'vuex-persistedstate'</span></span><br><span class="line"><span class="keyword">import</span> * <span class="keyword">as</span> Cookies <span class="keyword">from</span> <span class="string">'js-cookie'</span></span><br><span class="line"></span><br><span class="line"><span class="keyword">const</span> store = <span class="keyword">new</span> Store(&#123;</span><br><span class="line">  <span class="comment">// ...</span></span><br><span class="line">  plugins: [</span><br><span class="line">    createPersistedState(&#123;</span><br><span class="line">      storage: &#123;</span><br><span class="line">        getItem: <span class="function"><span class="params">key</span> =&gt;</span> Cookies.get(key),</span><br><span class="line">        <span class="comment">// Please see https://github.com/js-cookie/js-cookie#json, on how to handle JSON.</span></span><br><span class="line">        setItem: <span class="function">(<span class="params">key, value</span>) =&gt;</span></span><br><span class="line">          Cookies.set(key, value, &#123; <span class="attr">expires</span>: <span class="number">3</span>, <span class="attr">secure</span>: <span class="literal">true</span> &#125;),</span><br><span class="line">        removeItem: <span class="function"><span class="params">key</span> =&gt;</span> Cookies.remove(key),</span><br><span class="line">      &#125;,</span><br><span class="line">    &#125;),</span><br><span class="line">  ],</span><br><span class="line">&#125;)</span><br></pre></td></tr></table></figure></li></ol>]]></content>
      
      
      <categories>
          
          <category> 小程序 </category>
          
      </categories>
      
      
        <tags>
            
            <tag> 小程序 </tag>
            
        </tags>
      
    </entry>
    
    <entry>
      <title>mpvue 实现获取用户信息</title>
      <link href="/2019/03/21/myvue-%E8%8E%B7%E5%8F%96%E7%94%A8%E6%88%B7%E4%BF%A1%E6%81%AF/"/>
      <url>/2019/03/21/myvue-%E8%8E%B7%E5%8F%96%E7%94%A8%E6%88%B7%E4%BF%A1%E6%81%AF/</url>
      
        <content type="html"><![CDATA[<link rel="stylesheet" class="aplayer-secondary-style-marker" href="/assets/css/APlayer.min.css"><script src="/assets/js/APlayer.min.js" class="aplayer-secondary-script-marker"></script><h1 id="前言"><a href="#前言" class="headerlink" title="前言"></a>前言</h1><ul><li>因开发需求，先来躺mpvue这个坑</li><li>首先先从获取用户信息开始吧</li><li>一开始就已经被Eslint掠得体无完肤</li></ul><h1 id="准备"><a href="#准备" class="headerlink" title="准备"></a>准备</h1><ul><li>mac os 10.13.3</li><li>vue-cli </li><li>mpvue项目初始化 <a href="https://yhf7.github.io/2018/11/24/%E6%90%AD%E5%BB%BA%E5%B0%8F%E7%A8%8B%E5%BA%8F/" target="_blank" rel="noopener">mpvue搭建</a></li><li>vs code （工具个人喜欢就好）</li><li>熟悉编写vue <a href="https://yhf7.github.io/categories/Vue/" target="_blank" rel="noopener">不懂得可以看看我的这些笔记</a></li><li>熟悉小程序编写</li><li><a href="https://developers.weixin.qq.com/miniprogram/dev/api/wx.getUserInfo.html?search-key=getUserInfo" target="_blank" rel="noopener">获取用户信息微信官网</a></li></ul><h1 id="开始"><a href="#开始" class="headerlink" title="开始"></a>开始</h1><ul><li>其实也是很简单的操作，熟悉vue和熟悉小程序的写起来就会比较方便</li><li>绑定按钮使用open-type属性</li><li>我是在src/pages 里面建立了my来编写你们随意</li><li>mpvue和写vue没什么区别,mpvue支持小程序写法</li></ul><hr><ol><li>模版编写</li></ol><ul><li>定义按钮<figure class="highlight html"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br></pre></td><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">template</span>&gt;</span></span><br><span class="line">  <span class="tag">&lt;<span class="name">div</span>&gt;</span></span><br><span class="line">    <span class="comment">&lt;!-- 定义一个按钮点击拉起授权 --&gt;</span></span><br><span class="line">    <span class="comment">&lt;!-- 使用vue的绑定语法绑定getuserinfo用来接收用户的操作返回值 --&gt;</span></span><br><span class="line">    <span class="comment">&lt;!-- 定义点击用来判断用户版本是否适用 --&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">button</span> <span class="attr">open-type</span>=<span class="string">"getUserInfo"</span> @<span class="attr">getuserinfo</span>=<span class="string">"bindGetUserInfo"</span> @<span class="attr">click</span>=<span class="string">"getUserInfo1"</span>&gt;</span>获取权限<span class="tag">&lt;/<span class="name">button</span>&gt;</span></span><br><span class="line">    <span class="comment">&lt;!-- 获取用户信息 --&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">button</span> @<span class="attr">click</span>=<span class="string">"getSetting"</span>&gt;</span>获取用户信息<span class="tag">&lt;/<span class="name">button</span>&gt;</span></span><br><span class="line">  <span class="tag">&lt;/<span class="name">div</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">template</span>&gt;</span></span><br></pre></td></tr></table></figure></li></ul><ol start="2"><li>编写srcipt</li></ol><ul><li>基本和官网写法可以一直，只是要注意的是绑定方法要使用vue的语法</li><li>注意操作细节<figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br></pre></td><td class="code"><pre><span class="line">&lt;script&gt;</span><br><span class="line"><span class="keyword">export</span> <span class="keyword">default</span> &#123;</span><br><span class="line">    <span class="comment">// 编写方法</span></span><br><span class="line">  methods: &#123;</span><br><span class="line">    <span class="comment">/* 判断微信版本是否适用 */</span></span><br><span class="line">    getUserInfo1 () &#123;</span><br><span class="line">      <span class="built_in">console</span>.log(<span class="string">'click事件首先触发'</span>)</span><br><span class="line">      <span class="comment">// 判断小程序的API，回调，参数，组件等是否在当前版本可用。  为false 提醒用户升级微信版本</span></span><br><span class="line">      <span class="comment">// console.log(wx.canIUse('button.open-type.getUserInfo'))</span></span><br><span class="line">      <span class="keyword">if</span> (wx.canIUse(<span class="string">'button.open-type.getUserInfo'</span>)) &#123;</span><br><span class="line">        <span class="comment">// 用户版本可用</span></span><br><span class="line">      &#125; <span class="keyword">else</span> &#123;</span><br><span class="line">        <span class="built_in">console</span>.log(<span class="string">'请升级微信版本'</span>)</span><br><span class="line">      &#125;</span><br><span class="line">    &#125;,</span><br><span class="line">    <span class="comment">// 监听用户点击触发</span></span><br><span class="line">    bindGetUserInfo (e) &#123;</span><br><span class="line">      <span class="comment">// console.log(e.mp.detail.rawData)</span></span><br><span class="line">      <span class="keyword">if</span> (e.mp.detail.rawData) &#123;</span><br><span class="line">        <span class="comment">// 用户按了允许授权按钮</span></span><br><span class="line">        <span class="built_in">console</span>.log(<span class="string">'用户按了允许授权按钮'</span>)</span><br><span class="line">      &#125; <span class="keyword">else</span> &#123;</span><br><span class="line">        <span class="comment">// 用户按了拒绝按钮</span></span><br><span class="line">        <span class="built_in">console</span>.log(<span class="string">'用户按了拒绝按钮'</span>)</span><br><span class="line">      &#125;</span><br><span class="line">    &#125;,</span><br><span class="line">    <span class="comment">// 获取用户信息</span></span><br><span class="line">    getSetting () &#123;</span><br><span class="line">        <span class="comment">// 拉取信息</span></span><br><span class="line">      wx.getSetting(&#123;</span><br><span class="line">        success: <span class="function"><span class="keyword">function</span> (<span class="params">res</span>) </span>&#123;</span><br><span class="line">            <span class="comment">// 判断是否拥有权限</span></span><br><span class="line">          <span class="keyword">if</span> (res.authSetting[<span class="string">'scope.userInfo'</span>]) &#123;</span><br><span class="line">            wx.getUserInfo(&#123;</span><br><span class="line">              success: <span class="function"><span class="keyword">function</span> (<span class="params">res</span>) </span>&#123;</span><br><span class="line">                <span class="built_in">console</span>.log(res.userInfo)</span><br><span class="line">                <span class="built_in">console</span>.log(res)</span><br><span class="line">                <span class="comment">// 用户已经授权过</span></span><br><span class="line">                <span class="built_in">console</span>.log(<span class="string">'用户已经授权过'</span>)</span><br><span class="line">              &#125;</span><br><span class="line">            &#125;)</span><br><span class="line">          &#125; <span class="keyword">else</span> &#123;</span><br><span class="line">            <span class="built_in">console</span>.log(<span class="string">'用户还未授权过'</span>)</span><br><span class="line">          &#125;</span><br><span class="line">        &#125;</span><br><span class="line">      &#125;)</span><br><span class="line">    &#125;,</span><br><span class="line">  &#125;</span><br><span class="line">&#125;</span><br><span class="line">&lt;<span class="regexp">/script&gt;</span></span><br></pre></td></tr></table></figure></li></ul><h1 id="效果展示"><a href="#效果展示" class="headerlink" title="效果展示"></a>效果展示</h1><ul><li>写完代码当然要看看效果的啦</li></ul><ol><li>按钮<br><img src="/xcx/mv1.png" alt="mpvue"></li><li>初次测试小程序默认已经拥有了权限，这时点击是已经授权的<br><img src="/xcx/mv2.png" alt="mpvue"></li><li>点击授权<br><img src="/xcx/mv3.png" alt="mpvue"></li><li>拒绝授权<br><img src="/xcx/mv4.png" alt="mpvue"></li><li>未授权获取用户信息<br><img src="/xcx/mv5.png" alt="mpvue"></li><li>再次触发点击授权，允许后再次获取用户数据<br><img src="/xcx/mv6.png" alt="mpvue"></li></ol><h1 id="后记"><a href="#后记" class="headerlink" title="后记"></a>后记</h1><ul><li>从搭建好mpvue到踏入它其实是第二次，但是真正开始写业务还是第一次，这就是我的第一次使用mpvue获取用户信息，写的不好仅供参考，欢迎添加微信qq交流学习</li><li><a href="https://yhf7.github.io/" target="_blank" rel="noopener">欢迎进入我的博客</a>：<a href="https://yhf7.github.io/" target="_blank" rel="noopener">https://yhf7.github.io/</a></li><li>如果有什么侵权的话，请及时添加小编微信以及qq也可以来告诉小编（905477376微信qq通用），谢谢！</li></ul>]]></content>
      
      
      <categories>
          
          <category> 小程序 </category>
          
      </categories>
      
      
        <tags>
            
            <tag> 小程序 </tag>
            
        </tags>
      
    </entry>
    
    <entry>
      <title>Android button点击事件/附加题</title>
      <link href="/2019/03/20/%E5%A4%A7%E4%BA%8C%E4%B8%8BAndroid%20%E7%82%B9%E5%87%BB%E4%BA%8B%E4%BB%B6%E7%BB%91%E5%AE%9A/"/>
      <url>/2019/03/20/%E5%A4%A7%E4%BA%8C%E4%B8%8BAndroid%20%E7%82%B9%E5%87%BB%E4%BA%8B%E4%BB%B6%E7%BB%91%E5%AE%9A/</url>
      
        <content type="html"><![CDATA[<link rel="stylesheet" class="aplayer-secondary-style-marker" href="/assets/css/APlayer.min.css"><script src="/assets/js/APlayer.min.js" class="aplayer-secondary-script-marker"></script><h1 id="前言"><a href="#前言" class="headerlink" title="前言"></a>前言</h1><ul><li>每一门语音开发的时候都会有点击的业务</li><li>点击按钮弹出什么，点击按钮输出什么</li><li>今天的课程就学了按钮点击绑定</li><li>记录起来</li></ul><h1 id="实现button点击事件的方法"><a href="#实现button点击事件的方法" class="headerlink" title="实现button点击事件的方法"></a>实现button点击事件的方法</h1><ul><li>Button类主要的事件为android：onclick。但也可以通使用了OnclickListener监听器来监听事件，并在onClick()方法中响应。</li><li>实现button点击事件的监听方法有很多种，这里总结了常用的四种方法：<br>　　1、匿名内部类<br>　　2、外部类（独立类）<br>　　3、实现OnClickListener接口<br>　　4、添加XML属性</li></ul><h1 id="具体实现"><a href="#具体实现" class="headerlink" title="具体实现"></a>具体实现</h1><ol><li>匿名内部类：<br>　　在Android开发中我们会经常看到各种匿名内部类的使用，那么在实现button点击事件的时候也可以用匿名内部类。<br>　　这样使用的好处是：1）不需要重新写一个类，直接在new的时候去实现想实现的方法，很方便。<br>　　　　　　　　　　　2）当别的地方都用不到这个方法的时候使用匿名内部类<br>　　　　　　　　　　　3）高内聚，高内聚是设计原则之一，匿名内部类的特性之一就是拥有高内聚。<br>　　但是也有不足的地方：1）当别的地方也需要同样的一个方法时还要重新再在那个地方写一次匿名内部类，这样使得代码的冗余性很高。<br>　　　　　　　　　　　　2）不方便后期的维护</li><li><p>独立类（外部类）：<br>　　重新写一个独立的类来实现业务逻辑或是想要的效<br>　　这样写的好处是：1）一定情况下可以方便维护<br>　　　　　　　　　　2）可以降低代码的冗余性，可以同时使用到多个地方<br>　　不足的地方是：1）当只使用一次时浪费资源，程序的性能不高<br>　　　　　　　　　2）当有很多个方法时代码的可读性不高，此时不方便维护</p></li><li><p>实现OnClickListener接口：<br>　　与独立类实现的原理是一样的，优点和缺陷也是大径相同的，实现OnClickListener接口的时候实现它其中的onClick方法</p></li><li><p>添加XML属性：<br>　　我们可以给XML添加一个onClick属性来实现点击事件的监控<br>　　这样的好处是：更加便捷，代码量能够减少<br>　　但是不足的地方是：每一次维护的时候都要去XML里面改源码，很不好维护很麻烦</p></li></ol><h1 id="总结："><a href="#总结：" class="headerlink" title="总结："></a>总结：</h1><ol><li>在实现监听的时候都是需要两步走：<br>　　　　1）绑定button按钮 setOnClickListener<br>　　　　2）监听button事件 onclick() </li><li><p>具体使用什么方法去实现button按钮点击事件的监听要看具体的需求，都各有各的好处和不足。<br> 如果只使用一次则推荐使用内部类的方法；<br> 如果多次使用则使用外部类的方法；<br> 实现接口的方法可以在原本的类中实现；<br> 但是在XML里面添加属性的方法时不推荐的，毕竟很不好去维护。</p></li><li><p>内部类的使用在Android开发中是经常用到的，所以非常的重要，</p></li><li><p>Android开发中有很多按钮，但是监听的方法常用的都是这几种</p></li></ol><h1 id="开始写代码"><a href="#开始写代码" class="headerlink" title="开始写代码"></a>开始写代码</h1><ul><li>前面看完长长的笔记现在来敲代码了</li></ul><h3 id="XML属性（监听button事件-onclick（））"><a href="#XML属性（监听button事件-onclick（））" class="headerlink" title="XML属性（监听button事件 onclick（））"></a>XML属性（监听button事件 onclick（））</h3><ul><li>要求：点击按钮控制台输出文字</li><li>页面：线性布局</li><li>一个按钮，一个文本框</li><li>其实很简单就只是两步，定义了然后实例化点击函数就可以了<figure class="highlight xml"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br></pre></td><td class="code"><pre><span class="line">&lt;?xml version="1.0" encoding="utf-8"?&gt;</span><br><span class="line"><span class="tag">&lt;<span class="name">LinearLayout</span> <span class="attr">xmlns:android</span>=<span class="string">"http://schemas.android.com/apk/res/android"</span></span></span><br><span class="line"><span class="tag">    <span class="attr">xmlns:app</span>=<span class="string">"http://schemas.android.com/apk/res-auto"</span></span></span><br><span class="line"><span class="tag">    <span class="attr">xmlns:tools</span>=<span class="string">"http://schemas.android.com/tools"</span></span></span><br><span class="line"><span class="tag">    <span class="attr">android:layout_width</span>=<span class="string">"match_parent"</span></span></span><br><span class="line"><span class="tag">    <span class="attr">android:layout_height</span>=<span class="string">"match_parent"</span></span></span><br><span class="line"><span class="tag">    <span class="attr">tools:context</span>=<span class="string">".Buttom_Demo"</span></span></span><br><span class="line"><span class="tag">    <span class="attr">android:orientation</span>=<span class="string">"vertical"</span>&gt;</span></span><br><span class="line"></span><br><span class="line">    // 1. 绑定id,指定点击函数名</span><br><span class="line">    <span class="tag">&lt;<span class="name">Button</span></span></span><br><span class="line"><span class="tag">        <span class="attr">android:id</span>=<span class="string">"@+id/button01"</span></span></span><br><span class="line"><span class="tag">        <span class="attr">android:layout_width</span>=<span class="string">"match_parent"</span></span></span><br><span class="line"><span class="tag">        <span class="attr">android:layout_height</span>=<span class="string">"wrap_content"</span></span></span><br><span class="line"><span class="tag">        <span class="attr">android:onClick</span>=<span class="string">"sss"</span></span></span><br><span class="line"><span class="tag">        <span class="attr">android:text</span>=<span class="string">"切换"</span>/&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">TextView</span></span></span><br><span class="line"><span class="tag">        <span class="attr">android:id</span>=<span class="string">"@+id/text1"</span></span></span><br><span class="line"><span class="tag">        <span class="attr">android:layout_width</span>=<span class="string">"match_parent"</span></span></span><br><span class="line"><span class="tag">        <span class="attr">android:layout_height</span>=<span class="string">"wrap_content"</span></span></span><br><span class="line"><span class="tag">        <span class="attr">android:text</span>=<span class="string">"adggegege"</span>/&gt;</span></span><br><span class="line"></span><br><span class="line"><span class="tag">&lt;/<span class="name">LinearLayout</span>&gt;</span></span><br></pre></td></tr></table></figure></li></ul><hr><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">package</span> com.example.yhf.button_demo;</span><br><span class="line"></span><br><span class="line"><span class="keyword">import</span> android.graphics.Color;</span><br><span class="line"><span class="keyword">import</span> android.support.v7.app.AppCompatActivity;</span><br><span class="line"><span class="keyword">import</span> android.os.Bundle;</span><br><span class="line"></span><br><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">Buttom_Demo</span> <span class="keyword">extends</span> <span class="title">AppCompatActivity</span> </span>&#123;</span><br><span class="line"></span><br><span class="line">    <span class="meta">@Override</span></span><br><span class="line">    <span class="function"><span class="keyword">protected</span> <span class="keyword">void</span> <span class="title">onCreate</span><span class="params">(Bundle savedInstanceState)</span> </span>&#123;</span><br><span class="line">        <span class="keyword">super</span>.onCreate(savedInstanceState);</span><br><span class="line">        setContentView(R.layout.buttom__demo);</span><br><span class="line"></span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="comment">//  2. 实例化点击函数</span></span><br><span class="line">   <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">sss</span><span class="params">(View view)</span> </span>&#123;</span><br><span class="line">       System.out.println(<span class="string">"--------------------该按钮是对的控制------------"</span>);</span><br><span class="line">   &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h3 id="OnClickListener接口方法"><a href="#OnClickListener接口方法" class="headerlink" title="OnClickListener接口方法"></a>OnClickListener接口方法</h3><ul><li>我们这次就不输出控制台了，我改变文本内容</li><li>这个就比较复杂一点</li><li>纯属定义一个按钮和文本就可以，定义id<figure class="highlight xml"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br></pre></td><td class="code"><pre><span class="line">// 1. 绑定id,指定点击函数名</span><br><span class="line"><span class="tag">&lt;<span class="name">Button</span></span></span><br><span class="line"><span class="tag">    <span class="attr">android:id</span>=<span class="string">"@+id/button01"</span></span></span><br><span class="line"><span class="tag">    <span class="attr">android:layout_width</span>=<span class="string">"match_parent"</span></span></span><br><span class="line"><span class="tag">    <span class="attr">android:layout_height</span>=<span class="string">"wrap_content"</span></span></span><br><span class="line"><span class="tag">    <span class="attr">android:text</span>=<span class="string">"切换"</span>/&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">TextView</span></span></span><br><span class="line"><span class="tag">    <span class="attr">android:id</span>=<span class="string">"@+id/text1"</span></span></span><br><span class="line"><span class="tag">    <span class="attr">android:layout_width</span>=<span class="string">"match_parent"</span></span></span><br><span class="line"><span class="tag">    <span class="attr">android:layout_height</span>=<span class="string">"wrap_content"</span></span></span><br><span class="line"><span class="tag">    <span class="attr">android:text</span>=<span class="string">"adggegege"</span>/&gt;</span></span><br></pre></td></tr></table></figure></li></ul><hr><ul><li>接下来就是重点了认真看<figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">package</span> com.example.yhf.button_demo;</span><br><span class="line"></span><br><span class="line"><span class="comment">// 引包输入组件的时候软件自动导入如果没有自己手打</span></span><br><span class="line"><span class="keyword">import</span> android.graphics.Color;</span><br><span class="line"><span class="keyword">import</span> android.support.v7.app.AppCompatActivity;</span><br><span class="line"><span class="keyword">import</span> android.os.Bundle;</span><br><span class="line"><span class="keyword">import</span> android.view.View;</span><br><span class="line"><span class="keyword">import</span> android.widget.Button;</span><br><span class="line"><span class="keyword">import</span> android.widget.TextView;</span><br><span class="line"></span><br><span class="line"><span class="comment">//4  抽象方法 OnClickListener</span></span><br><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">Buttom_Demo</span> <span class="keyword">extends</span> <span class="title">AppCompatActivity</span> <span class="keyword">implements</span> <span class="title">View</span>.<span class="title">OnClickListener</span> </span>&#123;</span><br><span class="line"></span><br><span class="line">    <span class="comment">// 2. 声明变量</span></span><br><span class="line">    Button bt1;</span><br><span class="line">    TextView t1;</span><br><span class="line"></span><br><span class="line">    <span class="meta">@Override</span></span><br><span class="line">    <span class="function"><span class="keyword">protected</span> <span class="keyword">void</span> <span class="title">onCreate</span><span class="params">(Bundle savedInstanceState)</span> </span>&#123;</span><br><span class="line">        <span class="keyword">super</span>.onCreate(savedInstanceState);</span><br><span class="line">        setContentView(R.layout.buttom__demo);</span><br><span class="line"></span><br><span class="line">        <span class="comment">// 3. 这里是给变量绑定组件</span></span><br><span class="line">        <span class="comment">// 通过id来绑定</span></span><br><span class="line">        bt1 = (Button)findViewById(R.id.button01);</span><br><span class="line">        t1 = (TextView)findViewById(R.id.text1);</span><br><span class="line"></span><br><span class="line">        <span class="comment">// 6. 设定点击绑定到bt1也就是按钮</span></span><br><span class="line">        <span class="comment">// 使用setOnClickListener绑定</span></span><br><span class="line">        bt1.setOnClickListener(<span class="keyword">this</span>);</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="comment">// 5. 实例化抽象方法</span></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">onClick</span><span class="params">(View view)</span> </span>&#123;</span><br><span class="line">        t1.setText(<span class="string">"嘿，你好"</span>);</span><br><span class="line">        t1.setTextColor(Color.BLUE);</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure></li></ul><h1 id="拓展题"><a href="#拓展题" class="headerlink" title="拓展题"></a>拓展题</h1><ul><li>按照上面的改成，可以多次点击切换不同的值，不是点了后写死了</li><li>分析一下如何做：我的第一想法是给他一个数组写好很多个文字，每一次切换就获取数组中不同的值<figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">package</span> com.example.yhf.button_demo;</span><br><span class="line"></span><br><span class="line"><span class="keyword">import</span> android.graphics.Color;</span><br><span class="line"><span class="keyword">import</span> android.support.v7.app.AppCompatActivity;</span><br><span class="line"><span class="keyword">import</span> android.os.Bundle;</span><br><span class="line"><span class="keyword">import</span> android.view.View;</span><br><span class="line"><span class="keyword">import</span> android.widget.Button;</span><br><span class="line"><span class="keyword">import</span> android.widget.TextView;</span><br><span class="line"></span><br><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">Buttom_Demo</span> <span class="keyword">extends</span> <span class="title">AppCompatActivity</span> <span class="keyword">implements</span> <span class="title">View</span>.<span class="title">OnClickListener</span> </span>&#123;</span><br><span class="line"></span><br><span class="line">    Button bt1;</span><br><span class="line">    TextView t1;</span><br><span class="line"></span><br><span class="line">    <span class="comment">// 1. 定义一个i用了判断是数据的第几个</span></span><br><span class="line">    <span class="keyword">int</span> i = <span class="number">0</span>;</span><br><span class="line">    <span class="comment">// 2. 数据数组</span></span><br><span class="line">    String[] str = &#123;<span class="string">"a"</span>,<span class="string">"b"</span>,<span class="string">"c"</span>,<span class="string">"d"</span>,<span class="string">"e"</span>&#125;;</span><br><span class="line"></span><br><span class="line">    <span class="meta">@Override</span></span><br><span class="line">    <span class="function"><span class="keyword">protected</span> <span class="keyword">void</span> <span class="title">onCreate</span><span class="params">(Bundle savedInstanceState)</span> </span>&#123;</span><br><span class="line">        <span class="keyword">super</span>.onCreate(savedInstanceState);</span><br><span class="line">        setContentView(R.layout.buttom__demo);</span><br><span class="line"></span><br><span class="line">        bt1 = (Button)findViewById(R.id.button01);</span><br><span class="line">        t1 = (TextView)findViewById(R.id.text1);</span><br><span class="line"></span><br><span class="line">        bt1.setOnClickListener(<span class="keyword">this</span>);</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">onClick</span><span class="params">(View view)</span> </span>&#123;</span><br><span class="line">        <span class="comment">// 3. 判断大于后又回到0继续从0输出，不然超出会报错的</span></span><br><span class="line">        <span class="keyword">if</span> (i&gt;str.length-<span class="number">1</span>) &#123;i=<span class="number">0</span>;&#125;</span><br><span class="line">        <span class="comment">// 4. 输出的时候拿数组的值</span></span><br><span class="line">        t1.setText(str[i]);</span><br><span class="line">        t1.setTextColor(Color.BLUE);</span><br><span class="line">        <span class="comment">// 每点击一次一个数</span></span><br><span class="line">        i++;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure></li></ul><h1 id="补充其余用法"><a href="#补充其余用法" class="headerlink" title="补充其余用法"></a>补充其余用法</h1><ul><li>还有两种用法就是绑定外部类和内部类</li><li>和拓展题同样的业务，不同的实现方法</li><li>要注意引包</li><li>其实也是挺简单的用法都差不多只是地方不同<figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br><span class="line">64</span><br><span class="line">65</span><br><span class="line">66</span><br><span class="line">67</span><br><span class="line">68</span><br><span class="line">69</span><br><span class="line">70</span><br><span class="line">71</span><br><span class="line">72</span><br><span class="line">73</span><br><span class="line">74</span><br><span class="line">75</span><br><span class="line">76</span><br><span class="line">77</span><br><span class="line">78</span><br><span class="line">79</span><br><span class="line">80</span><br><span class="line">81</span><br><span class="line">82</span><br><span class="line">83</span><br><span class="line">84</span><br><span class="line">85</span><br><span class="line">86</span><br><span class="line">87</span><br><span class="line">88</span><br><span class="line">89</span><br><span class="line">90</span><br><span class="line">91</span><br><span class="line">92</span><br><span class="line">93</span><br><span class="line">94</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">package</span> com.example.yhf.button_demo;</span><br><span class="line"></span><br><span class="line"><span class="keyword">import</span> android.graphics.Color;</span><br><span class="line"><span class="keyword">import</span> android.support.v7.app.AppCompatActivity;</span><br><span class="line"><span class="keyword">import</span> android.os.Bundle;</span><br><span class="line"><span class="keyword">import</span> android.view.View;</span><br><span class="line"><span class="keyword">import</span> android.widget.Button;</span><br><span class="line"><span class="keyword">import</span> android.widget.TextView;</span><br><span class="line"></span><br><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">Buttom_Demo</span> <span class="keyword">extends</span> <span class="title">AppCompatActivity</span> </span>&#123;</span><br><span class="line"></span><br><span class="line">    <span class="comment">//    Button bt1,bt2;</span></span><br><span class="line"></span><br><span class="line">    Button bt1;</span><br><span class="line">    TextView t1;</span><br><span class="line">    <span class="keyword">int</span> i = <span class="number">0</span>;</span><br><span class="line">    String[] str = &#123;<span class="string">"a"</span>,<span class="string">"b"</span>,<span class="string">"c"</span>,<span class="string">"d"</span>,<span class="string">"e"</span>&#125;;</span><br><span class="line"></span><br><span class="line">    <span class="meta">@Override</span></span><br><span class="line">    <span class="function"><span class="keyword">protected</span> <span class="keyword">void</span> <span class="title">onCreate</span><span class="params">(Bundle savedInstanceState)</span> </span>&#123;</span><br><span class="line">        <span class="keyword">super</span>.onCreate(savedInstanceState);</span><br><span class="line">        setContentView(R.layout.buttom__demo);</span><br><span class="line"></span><br><span class="line">        bt1 = (Button)findViewById(R.id.button01);</span><br><span class="line">        t1 = (TextView)findViewById(R.id.text1);</span><br><span class="line"></span><br><span class="line">        <span class="comment">// 2。 外部类onclik，new 外面的类</span></span><br><span class="line">       bt1.setOnClickListener(<span class="keyword">new</span> listener());</span><br><span class="line"></span><br><span class="line">        <span class="comment">// 3. 内部类onclick</span></span><br><span class="line">       bt1.setOnClickListener(<span class="keyword">new</span> View.OnClickListener() &#123;</span><br><span class="line">           <span class="meta">@Override</span></span><br><span class="line">           <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">onClick</span><span class="params">(View v)</span> </span>&#123;</span><br><span class="line">               System.out.println(<span class="string">"test"</span>);</span><br><span class="line">           &#125;</span><br><span class="line">       &#125;);</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="comment">// 外部类</span></span><br><span class="line">    <span class="class"><span class="keyword">class</span> <span class="title">listener</span> <span class="keyword">implements</span> <span class="title">View</span>.<span class="title">OnClickListener</span> </span>&#123;</span><br><span class="line">        <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">onClick</span><span class="params">(View view)</span> </span>&#123;</span><br><span class="line">            <span class="keyword">if</span> (i&gt;str.length-<span class="number">1</span>) &#123;i=<span class="number">0</span>;&#125;</span><br><span class="line">            t1.setText(str[i]);</span><br><span class="line">            t1.setTextColor(Color.BLUE);</span><br><span class="line">            i++;</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line">### 外部类小案例</span><br><span class="line">- 多按钮绑定同一点击事件，控制id改变文本</span><br><span class="line">- 定义了三个按钮，一个文本框</span><br><span class="line">``` Java</span><br><span class="line"><span class="keyword">package</span> com.example.yhf.button_demo;</span><br><span class="line"></span><br><span class="line"><span class="keyword">import</span> android.graphics.Color;</span><br><span class="line"><span class="keyword">import</span> android.support.v7.app.AppCompatActivity;</span><br><span class="line"><span class="keyword">import</span> android.os.Bundle;</span><br><span class="line"><span class="keyword">import</span> android.view.View;</span><br><span class="line"><span class="keyword">import</span> android.widget.Button;</span><br><span class="line"><span class="keyword">import</span> android.widget.TextView;</span><br><span class="line"></span><br><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">Buttom_Demo</span> <span class="keyword">extends</span> <span class="title">AppCompatActivity</span> </span>&#123;</span><br><span class="line"></span><br><span class="line">    Button bt1,bt2,bt3;</span><br><span class="line">    TextView t1;</span><br><span class="line"></span><br><span class="line">    <span class="meta">@Override</span></span><br><span class="line">    <span class="function"><span class="keyword">protected</span> <span class="keyword">void</span> <span class="title">onCreate</span><span class="params">(Bundle savedInstanceState)</span> </span>&#123;</span><br><span class="line">        <span class="keyword">super</span>.onCreate(savedInstanceState);</span><br><span class="line">        setContentView(R.layout.demo);</span><br><span class="line"></span><br><span class="line">        bt1 = (Button)findViewById(R.id.bt1);</span><br><span class="line">        bt2 = (Button)findViewById(R.id.bt2);</span><br><span class="line">        bt3 = (Button)findViewById(R.id.bt3);</span><br><span class="line">        t1 = (TextView)findViewById(R.id.text1);</span><br><span class="line"></span><br><span class="line">        <span class="comment">// 2。 外部类onclik</span></span><br><span class="line">        bt1.setOnClickListener(<span class="keyword">new</span> listener());</span><br><span class="line">        bt2.setOnClickListener(<span class="keyword">new</span> listener());</span><br><span class="line">        bt3.setOnClickListener(<span class="keyword">new</span> listener());</span><br><span class="line">    &#125;</span><br><span class="line"><span class="comment">// 外部类</span></span><br><span class="line">    <span class="class"><span class="keyword">class</span> <span class="title">listener</span> <span class="keyword">implements</span> <span class="title">View</span>.<span class="title">OnClickListener</span> </span>&#123;</span><br><span class="line">        <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">onClick</span><span class="params">(View v)</span> </span>&#123;</span><br><span class="line">            <span class="comment">// 通过判断 引子是getId,点击后会返回一个view的参数</span></span><br><span class="line">            <span class="keyword">switch</span> (v.getId()) &#123;</span><br><span class="line">                <span class="keyword">case</span> R.id.bt1: t1.setText(<span class="string">"你爸1"</span>); t1.setTextColor(Color.BLUE); <span class="keyword">break</span>;</span><br><span class="line">                <span class="keyword">case</span> R.id.bt2: t1.setText(<span class="string">"你爸2"</span>); t1.setTextColor(Color.RED); <span class="keyword">break</span>;</span><br><span class="line">                <span class="keyword">case</span> R.id.bt3: t1.setText(<span class="string">"你爸3"</span>); t1.setTextColor(Color.YELLOW); <span class="keyword">break</span>;</span><br><span class="line">            &#125;</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure></li></ul><h1 id="后记"><a href="#后记" class="headerlink" title="后记"></a>后记</h1><ul><li>今日上课的练习和笔记都记录在这里了，欢迎更多的同行大哥指导交流</li><li><a href="https://yhf7.github.io/" target="_blank" rel="noopener">欢迎进入我的博客</a>：<a href="https://yhf7.github.io/" target="_blank" rel="noopener">https://yhf7.github.io/</a></li><li>如果有什么侵权的话，请及时添加小编微信以及qq也可以来告诉小编（905477376微信qq通用），谢谢！</li></ul>]]></content>
      
      
      <categories>
          
          <category> Android </category>
          
      </categories>
      
      
        <tags>
            
            <tag> Android 笔记 </tag>
            
        </tags>
      
    </entry>
    
    <entry>
      <title>TypeScript 自学笔记6 范型</title>
      <link href="/2019/03/19/TypeScript%E7%AC%94%E8%AE%B06/"/>
      <url>/2019/03/19/TypeScript%E7%AC%94%E8%AE%B06/</url>
      
        <content type="html"><![CDATA[<link rel="stylesheet" class="aplayer-secondary-style-marker" href="/assets/css/APlayer.min.css"><script src="/assets/js/APlayer.min.js" class="aplayer-secondary-script-marker"></script><h1 id="前言"><a href="#前言" class="headerlink" title="前言"></a>前言</h1><ul><li>今日继续学习ts</li><li>等待大哥确认的时间我们继续看看ts范型</li></ul><h1 id="介绍"><a href="#介绍" class="headerlink" title="介绍"></a>介绍</h1><ul><li>软件工程中，我们不仅要创建一致的定义良好的API，同时也要考虑可重用性。 组件不仅能够支持当前的数据类型，同时也能支持未来的数据类型，这在创建大型系统时为你提供了十分灵活的功能。</li><li>在像C#和Java这样的语言中，可以使用泛型来创建可重用的组件，一个组件可以支持多种类型的数据。 这样用户就可以以自己的数据类型来使用组件。</li><li>其实很简单，这就是为了方便复用而设立的，以前在看java的时候对范型就不是学的很好，现在看文档感觉清晰很多了</li><li>那我们继续走入ts，范型</li></ul><h1 id="范型-Hello-World"><a href="#范型-Hello-World" class="headerlink" title="范型-Hello World"></a>范型-Hello World</h1><ul><li><p>下面来创建第一个使用泛型的例子：identity函数。 这个函数会返回任何传入它的值。 你可以把这个函数当成是 echo命令。</p><figure class="highlight typescript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line"><span class="function"><span class="keyword">function</span> <span class="title">identity</span>(<span class="params">arg: <span class="built_in">number</span></span>): <span class="title">number</span> </span>&#123;</span><br><span class="line">    <span class="keyword">return</span> arg;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure></li><li><p>这个例子建立的是一个参数和返回值为数字类型的</p></li><li>但是我们后续想切换类型着么办？很多人说使用any任意类型啊<br>来看看any</li></ul><hr><ol><li>建立范型<figure class="highlight typescript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line"><span class="function"><span class="keyword">function</span> <span class="title">identity</span>(<span class="params">arg: <span class="built_in">any</span></span>): <span class="title">any</span> </span>&#123;</span><br><span class="line">    <span class="keyword">return</span> arg;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure></li></ol><ul><li>确实达到了预期的效果</li><li>但是发现了没有，无论什么类型都可以输入，什么类型的值都可以返回</li><li>这个和之前的js有什么区别，何必还要写呢所以我们需要一个方法去控制住参数和返回值类型相同</li></ul><hr><ul><li>我们给函数添加了一个类型变量T，当我们给这个t赋值了number，他就会自动捕获到，然后赋值到参数和返回值类型当中</li><li>这样到函数叫做范型（官网这么说的）不同于使用 any，它不会丢失信息，像第一个例子那像保持准确性，传入数值类型并返回数值类型。<figure class="highlight typescript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line"><span class="function"><span class="keyword">function</span> <span class="title">identity</span>&lt;<span class="title">T</span>&gt;(<span class="params">arg: T</span>): <span class="title">T</span> </span>&#123;</span><br><span class="line">    <span class="keyword">return</span> arg;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure></li></ul><hr><ol start="2"><li>使用范型</li></ol><ul><li>第一种是，传入所有的参数，包含类型参数</li><li>第二种方法更普遍。利用了类型推论 – 即编译器会根据传入的参数自动地帮助我们确定T的类型</li><li>这里我们明确的指定了T是string类型，并做为一个参数传给函数，使用了&lt;&gt;括起来而不是()。（重点）<figure class="highlight typescript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">// 传入参数</span></span><br><span class="line"><span class="keyword">let</span> output = identity&lt;<span class="built_in">string</span>&gt;(<span class="string">"myString"</span>);  <span class="comment">// type of output will be 'string'</span></span><br><span class="line"></span><br><span class="line"><span class="comment">// 自动推断</span></span><br><span class="line"><span class="keyword">let</span> output = identity(<span class="string">"myString"</span>);  <span class="comment">// type of output will be 'string'</span></span><br></pre></td></tr></table></figure></li></ul><hr><h4 id="注意我们没必要使用尖括号（-lt-gt-）来明确地传入类型；编译器可以查看myString的值，然后把T设置为它的类型。-类型推论帮助我们保持代码精简和高可读性。如果编译器不能够自动地推断出类型的话，只能像上面那样明确的传入T的类型，在一些复杂的情况下，这是可能出现的。（这个要注意）"><a href="#注意我们没必要使用尖括号（-lt-gt-）来明确地传入类型；编译器可以查看myString的值，然后把T设置为它的类型。-类型推论帮助我们保持代码精简和高可读性。如果编译器不能够自动地推断出类型的话，只能像上面那样明确的传入T的类型，在一些复杂的情况下，这是可能出现的。（这个要注意）" class="headerlink" title="注意我们没必要使用尖括号（&lt;&gt;）来明确地传入类型；编译器可以查看myString的值，然后把T设置为它的类型。 类型推论帮助我们保持代码精简和高可读性。如果编译器不能够自动地推断出类型的话，只能像上面那样明确的传入T的类型，在一些复杂的情况下，这是可能出现的。（这个要注意）"></a>注意我们没必要使用尖括号（&lt;&gt;）来明确地传入类型；编译器可以查看myString的值，然后把T设置为它的类型。 类型推论帮助我们保持代码精简和高可读性。如果编译器不能够自动地推断出类型的话，只能像上面那样明确的传入T的类型，在一些复杂的情况下，这是可能出现的。（这个要注意）</h4><h1 id="使用范型变量"><a href="#使用范型变量" class="headerlink" title="使用范型变量"></a>使用范型变量</h1><ul><li>使用泛型创建像identity这样的泛型函数时，编译器要求你在函数体必须正确的使用这个通用的类型。 换句话说，你必须把这些参数当做是任意或所有类型。</li><li>如果这么做，编译器会报错说我们使用了arg的.length属性，但是没有地方指明arg具有这个属性。 记住，这些类型变量代表的是任意类型，所以使用这个函数的人可能传入的是个数字，而数字是没有 .length属性的。</li><li><p>所以是错误的不能输出</p><figure class="highlight typescript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line"><span class="function"><span class="keyword">function</span> <span class="title">loggingIdentity</span>&lt;<span class="title">T</span>&gt;(<span class="params">arg: T</span>): <span class="title">T</span> </span>&#123;</span><br><span class="line">    <span class="built_in">console</span>.log(arg.length);  <span class="comment">// Error: T doesn't have .length</span></span><br><span class="line">    <span class="keyword">return</span> arg;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure></li><li><p>现在假设我们想操作T类型的数组而不直接是T。由于我们操作的是数组，所以.length属性是应该存在的。 我们可以像创建其它数组一样创建这个数组</p></li><li>他把参数设立成是一个类型的数组了</li><li>相当于我吧t定义为number</li><li>arg是number类型的数组</li><li>返回值也是一个number的数组</li><li><p>数组是拥有.length的属性的</p><figure class="highlight typescript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">// number</span></span><br><span class="line"><span class="function"><span class="keyword">function</span> <span class="title">loggingIdentity</span>&lt;<span class="title">T</span>&gt;(<span class="params">arg: T[]</span>): <span class="title">T</span>[] </span>&#123;</span><br><span class="line">    <span class="built_in">console</span>.log(arg.length);  <span class="comment">// Array has a .length, so no more error</span></span><br><span class="line">    <span class="keyword">return</span> arg;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="keyword">let</span> output = loggingIdentity&lt;<span class="built_in">number</span>&gt;([<span class="number">1</span>,<span class="number">2</span>]);  <span class="comment">// type of output will be 'string'</span></span><br><span class="line"></span><br><span class="line"><span class="built_in">console</span>.log(output);</span><br><span class="line"></span><br><span class="line"></span><br><span class="line"><span class="comment">// String</span></span><br><span class="line"><span class="function"><span class="keyword">function</span> <span class="title">loggingIdentity</span>&lt;<span class="title">T</span>&gt;(<span class="params">arg: T[]</span>): <span class="title">T</span>[] </span>&#123;</span><br><span class="line">    <span class="built_in">console</span>.log(arg.length);  <span class="comment">// Array has a .length, so no more error</span></span><br><span class="line">    <span class="keyword">return</span> arg;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="keyword">let</span> output = loggingIdentity&lt;<span class="built_in">String</span>&gt;([<span class="string">"a"</span>]);  <span class="comment">// type of output will be 'string'</span></span><br><span class="line"></span><br><span class="line"><span class="built_in">console</span>.log(output);</span><br></pre></td></tr></table></figure></li><li><p>你可以这样理解loggingIdentity的类型：泛型函数loggingIdentity，接收类型参数T和参数arg，它是个元素类型是T的数组，并返回元素类型是T的数组。 如果我们传入数字数组，将返回一个数字数组，因为此时 T的的类型为number。 这可以让我们把泛型变量T当做类型的一部分使用，而不是整个类型，增加了灵活性。</p></li></ul><p>—————————-</p><ul><li>还有一种写法可以更加规范上面的写法</li><li>在里面在写一次范型，直接定义数组类型<figure class="highlight typescript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><span class="line"><span class="function"><span class="keyword">function</span> <span class="title">loggingIdentity</span>&lt;<span class="title">T</span>&gt;(<span class="params">arg: <span class="built_in">Array</span>&lt;T&gt;</span>): <span class="title">Array</span>&lt;<span class="title">T</span>&gt; </span>&#123;</span><br><span class="line">    <span class="built_in">console</span>.log(arg.length);  <span class="comment">// Array has a .length, so no more error</span></span><br><span class="line">    <span class="keyword">return</span> arg;</span><br><span class="line">&#125;</span><br><span class="line"><span class="comment">// 输出结果</span></span><br><span class="line"><span class="number">1</span></span><br><span class="line">[ <span class="string">'a'</span> ]</span><br></pre></td></tr></table></figure></li></ul><h1 id="泛型类型"><a href="#泛型类型" class="headerlink" title="泛型类型"></a>泛型类型</h1><ul><li>我们创建了identity通用函数，可以适用于不同的类型。 在这节，我们研究一下函数本身的类型，以及如何创建泛型接口。</li><li>我们也可以使用不同的泛型参数名，只要在数量上和使用方式上能对应上就可以。<figure class="highlight typescript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line"><span class="function"><span class="keyword">function</span> <span class="title">identity</span>&lt;<span class="title">T</span>&gt;(<span class="params">arg: T</span>): <span class="title">T</span> </span>&#123;</span><br><span class="line">    <span class="keyword">return</span> arg;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="keyword">let</span> myIdentity: &lt;U&gt;<span class="function">(<span class="params">arg: U</span>) =&gt;</span> U = identity;</span><br></pre></td></tr></table></figure></li></ul><h4 id="我们还可以使用带有调用签名的对象字面量来定义泛型函数：（对签名还是带有疑惑）"><a href="#我们还可以使用带有调用签名的对象字面量来定义泛型函数：（对签名还是带有疑惑）" class="headerlink" title="我们还可以使用带有调用签名的对象字面量来定义泛型函数：（对签名还是带有疑惑）"></a>我们还可以使用带有调用签名的对象字面量来定义泛型函数：（对签名还是带有疑惑）</h4><figure class="highlight typescript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line"><span class="function"><span class="keyword">function</span> <span class="title">identity</span>&lt;<span class="title">T</span>&gt;(<span class="params">arg: T</span>): <span class="title">T</span> </span>&#123;</span><br><span class="line">    <span class="keyword">return</span> arg;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="keyword">let</span> myIdentity: &#123;&lt;T&gt;(arg: T): T&#125; = identity;</span><br></pre></td></tr></table></figure><h3 id="第一个范型接口"><a href="#第一个范型接口" class="headerlink" title="第一个范型接口"></a>第一个范型接口</h3><figure class="highlight typescript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">interface</span> GenericIdentityFn &#123;</span><br><span class="line">    &lt;T&gt;(arg: T): T;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">function</span> <span class="title">identity</span>&lt;<span class="title">T</span>&gt;(<span class="params">arg: T</span>): <span class="title">T</span> </span>&#123;</span><br><span class="line">    <span class="keyword">return</span> arg;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="keyword">let</span> myIdentity: GenericIdentityFn = identity;</span><br><span class="line"></span><br><span class="line"><span class="built_in">console</span>.log(myIdentity&lt;<span class="built_in">String</span>&gt;(<span class="string">"abc"</span>));</span><br><span class="line"><span class="built_in">console</span>.log(myIdentitys(<span class="string">"cba"</span>));<span class="comment">// 如果写了接口后我们还用这样的类型推断法是不可以的 error</span></span><br></pre></td></tr></table></figure><hr><ul><li>接口变形</li><li>我们的示例做了少许改动。 不再描述泛型函数，而是把非泛型函数签名作为泛型类型一部分。 当我们使用 GenericIdentityFn的时候，还得传入一个类型参数来指定泛型类型（这里是：number），锁定了之后代码里使用的类型。 对于描述哪部分类型属于泛型部分来说，理解何时把参数放在调用签名里和何时放在接口上是很有帮助的。</li><li>很直接的改变就是给接口做了范型，在初始化的时候就要传入类型了</li><li>在使用的时候不再需要去指定范型<figure class="highlight typescript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">interface</span> GenericIdentityFn&lt;T&gt; &#123;</span><br><span class="line">    (arg: T): T;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">function</span> <span class="title">identity</span>&lt;<span class="title">T</span>&gt;(<span class="params">arg: T</span>): <span class="title">T</span> </span>&#123;</span><br><span class="line">    <span class="keyword">return</span> arg;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="keyword">let</span> myIdentity: GenericIdentityFn&lt;<span class="built_in">number</span>&gt; = identity;</span><br><span class="line"><span class="built_in">console</span>.log(myIdentity(<span class="number">1</span>)); <span class="comment">//1</span></span><br><span class="line"></span><br><span class="line"></span><br><span class="line"><span class="keyword">let</span> myIdentity2: GenericIdentityFn&lt;<span class="built_in">string</span>&gt; = identity;</span><br><span class="line"><span class="built_in">console</span>.log(myIdentity2(<span class="string">"abc"</span>); <span class="comment">//abc</span></span><br></pre></td></tr></table></figure></li></ul><h1 id="范型类"><a href="#范型类" class="headerlink" title="范型类"></a>范型类</h1><ul><li>泛型类看上去与泛型接口差不多。 泛型类使用（ &lt;&gt;）括起泛型类型，跟在类名后面。</li><li><p>这个理解起来还是挺好理解的</p><figure class="highlight typescript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">class</span> GenericNumber&lt;T&gt; &#123;</span><br><span class="line">    zeroValue: T;</span><br><span class="line">    add: <span class="function">(<span class="params">x: T, y: T</span>) =&gt;</span> T;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="keyword">let</span> myGenericNumber = <span class="keyword">new</span> GenericNumber&lt;<span class="built_in">number</span>&gt;();</span><br><span class="line">myGenericNumber.zeroValue = <span class="number">0</span>;</span><br><span class="line">myGenericNumber.add = <span class="function"><span class="keyword">function</span>(<span class="params">x, y</span>) </span>&#123; <span class="keyword">return</span> x + y; &#125;;</span><br><span class="line"><span class="built_in">console</span>.log(myGenericNumber.add(<span class="number">3</span>,<span class="number">4</span>)) <span class="comment">// 7</span></span><br></pre></td></tr></table></figure></li><li><p>GenericNumber类的使用是十分直观的，并且你可能已经注意到了，没有什么去限制它只能使用number类型。 也可以使用字符串或其它更复杂的类型</p></li></ul><hr><ul><li>与接口一样，直接把泛型类型放在类后面，可以帮助我们确认类的所有属性都在使用相同的类型。</li><li>我们在类那节说过，类有两部分：静态部分和实例部分。 泛型类指的是实例部分的类型，所以类的静态属性不能使用这个泛型类型。<figure class="highlight typescript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">let</span> stringNumeric = <span class="keyword">new</span> GenericNumber&lt;<span class="built_in">string</span>&gt;();</span><br><span class="line">stringNumeric.zeroValue = <span class="string">""</span>;</span><br><span class="line">stringNumeric.add = <span class="function"><span class="keyword">function</span>(<span class="params">x, y</span>) </span>&#123; <span class="keyword">return</span> x + y; &#125;;</span><br><span class="line"></span><br><span class="line"><span class="built_in">console</span>.log(stringNumeric.add(stringNumeric.zeroValue, <span class="string">"test"</span>));</span><br></pre></td></tr></table></figure></li></ul><h1 id="泛型约束"><a href="#泛型约束" class="headerlink" title="泛型约束"></a>泛型约束</h1><p><img src="/TypeScript/T1.png" alt="t1"></p><ul><li>意思就是说使用extends 这个关键字来约束必须每一次都要输入一个带有length的属性，不然就是错的</li><li><figure class="highlight typescript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">interface</span> Lengthwise &#123;</span><br><span class="line">    length: <span class="built_in">number</span>;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">function</span> <span class="title">loggingIdentity</span>&lt;<span class="title">T</span> <span class="title">extends</span> <span class="title">Lengthwise</span>&gt;(<span class="params">arg: T</span>): <span class="title">T</span> </span>&#123;</span><br><span class="line">    <span class="built_in">console</span>.log(arg.length);  <span class="comment">// Now we know it has a .length property, so no more error</span></span><br><span class="line">    <span class="keyword">return</span> arg;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line">loggingIdentity(<span class="number">3</span>);  <span class="comment">// Error</span></span><br><span class="line">loggingIdentity(&#123;length: <span class="number">10</span>, value: <span class="number">3</span>&#125;); <span class="comment">// 这样才是对的</span></span><br></pre></td></tr></table></figure></li></ul><h3 id="在泛型约束中使用类型参数"><a href="#在泛型约束中使用类型参数" class="headerlink" title="在泛型约束中使用类型参数"></a>在泛型约束中使用类型参数</h3><ul><li>你可以声明一个类型参数，且它被另一个类型参数所约束。 比如，现在我们想要用属性名从对象里获取这个属性。 并且我们想要确保这个属性存在于对象 obj上，因此我们需要在这两个类型之间使用约束。</li><li>编译器运行的时候会报错但是js文件可以运行的，估计是我没有指定类型不过官网也是这样用的<figure class="highlight typescript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><span class="line"><span class="function"><span class="keyword">function</span> <span class="title">getProperty</span>(<span class="params">obj: T, key: K</span>) </span>&#123;</span><br><span class="line">    <span class="keyword">return</span> obj[key];</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="keyword">let</span> x = &#123; a: <span class="number">1</span>, b: <span class="number">2</span>, c: <span class="number">3</span>, d: <span class="number">4</span> &#125;;</span><br><span class="line"></span><br><span class="line"><span class="comment">// getProperty(x, "m"); // error: Argument of type 'm' isn't assignable to 'a' | 'b' | 'c' | 'd'.</span></span><br><span class="line"><span class="built_in">console</span>.log(getProperty(x, <span class="string">"a"</span>););</span><br></pre></td></tr></table></figure></li></ul><h3 id="在泛型里使用类类型-不是很懂-懂了"><a href="#在泛型里使用类类型-不是很懂-懂了" class="headerlink" title="在泛型里使用类类型 (不是很懂,懂了)"></a>在泛型里使用类类型 (不是很懂,懂了)</h3><ul><li>当我再回头盯上你，你必是我囊中之物</li><li>其实呢我是在实例它的时候不太懂</li><li>经过查阅资料慢慢的弄懂了，要定义一个类把类放进入</li><li><p>在TypeScript使用泛型创建工厂函数时，需要引用构造函数的类类型。比如，</p><figure class="highlight typescript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">// 这里是需要构建一个类 ，函数范型了类， 传入值是类，返回值也是类</span></span><br><span class="line"><span class="comment">// 参数是一个可以new的参数那就是类啦</span></span><br><span class="line">function create&lt;T&gt;(c: &#123;new(): T; &#125;): T &#123;</span><br><span class="line">    <span class="keyword">return</span> <span class="keyword">new</span> c();</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="comment">// 构建一个类</span></span><br><span class="line"><span class="keyword">class</span> Student &#123;</span><br><span class="line">    <span class="keyword">constructor</span> (<span class="params"></span>) &#123;</span><br><span class="line"></span><br><span class="line">    &#125;</span><br><span class="line">    <span class="comment">// 写一个方法</span></span><br><span class="line">    say () &#123;</span><br><span class="line">        <span class="built_in">console</span>.log(<span class="string">"student say"</span>)</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="comment">// 实例化create</span></span><br><span class="line"><span class="comment">// 传入范型值和参数</span></span><br><span class="line"><span class="keyword">let</span> stu = create&lt;Student&gt;(Student)</span><br><span class="line">stu.say()</span><br></pre></td></tr></table></figure></li><li><p>一个更高级的例子，使用原型属性推断并约束构造函数与类实例的关系。</p></li><li>再去看这个升级例子，需要一定的编程基础</li><li>官网上面的还是自己去构建完整的体系<figure class="highlight typescript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br></pre></td><td class="code"><pre><span class="line"></span><br><span class="line"><span class="keyword">class</span> BeeKeeper &#123;</span><br><span class="line">    hasMask: <span class="built_in">boolean</span>;</span><br><span class="line">    <span class="keyword">constructor</span> (<span class="params">hasMask:<span class="built_in">boolean</span></span>) &#123;</span><br><span class="line">        <span class="keyword">this</span>.hasMask = hasMask;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="keyword">class</span> ZooKeeper &#123;</span><br><span class="line">    nametag: <span class="built_in">string</span>;</span><br><span class="line">    <span class="keyword">constructor</span> (<span class="params">nametag: <span class="built_in">string</span></span>) &#123;</span><br><span class="line">        <span class="keyword">this</span>.nametag = nametag;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="comment">// 主类</span></span><br><span class="line"><span class="keyword">class</span> Animal &#123;</span><br><span class="line">    numLegs: <span class="built_in">number</span>;</span><br><span class="line">    <span class="keyword">constructor</span> (<span class="params">numLegs: <span class="built_in">number</span></span>) &#123;</span><br><span class="line">        <span class="keyword">this</span>.numLegs = numLegs;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="comment">// 定义继承类</span></span><br><span class="line"><span class="keyword">class</span> Bee <span class="keyword">extends</span> Animal &#123;</span><br><span class="line">    <span class="comment">// 内部元素声明的是其他的类</span></span><br><span class="line">    keeper: BeeKeeper;</span><br><span class="line">    <span class="comment">// 需要构造函数去实例化</span></span><br><span class="line">    <span class="keyword">constructor</span> (<span class="params"></span>) &#123;</span><br><span class="line">        <span class="keyword">super</span>(<span class="number">4</span>)</span><br><span class="line">        <span class="keyword">this</span>.keeper = <span class="keyword">new</span> BeeKeeper(<span class="literal">true</span>);</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="keyword">class</span> Lion <span class="keyword">extends</span> Animal &#123;</span><br><span class="line">    keeper: ZooKeeper;</span><br><span class="line">    <span class="keyword">constructor</span> (<span class="params"></span>) &#123;</span><br><span class="line">        <span class="keyword">super</span>(<span class="number">4</span>)</span><br><span class="line">        <span class="keyword">this</span>.keeper = <span class="keyword">new</span> ZooKeeper(<span class="string">"YHF"</span>);</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="comment">// A的约束类型是Animal，这里不是继承是约束,需要拥有约束类型的元素，要不自己写要不继承它，这里的操作只是约束不是继承</span></span><br><span class="line">function createInstance&lt;A extends Animal&gt;(c: new () =&gt; A): A &#123;</span><br><span class="line">    <span class="keyword">return</span> <span class="keyword">new</span> c();</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="built_in">console</span>.log(createInstance(Lion).keeper.nametag);  <span class="comment">// YHF</span></span><br><span class="line"><span class="built_in">console</span>.log(createInstance(Bee).keeper.hasMask);   <span class="comment">// true</span></span><br><span class="line"><span class="built_in">console</span>.log(createInstance(Lion).numLegs); <span class="comment">// 4</span></span><br></pre></td></tr></table></figure></li></ul><h1 id="在泛型里使用类类型-（理解后自定义练习）"><a href="#在泛型里使用类类型-（理解后自定义练习）" class="headerlink" title="在泛型里使用类类型 （理解后自定义练习）"></a>在泛型里使用类类型 （理解后自定义练习）</h1><ul><li>使用类不同的声明类型</li><li>添加判断，深刻理解<figure class="highlight typescript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">class</span> Student &#123;</span><br><span class="line">    aa: <span class="built_in">string</span></span><br><span class="line">    <span class="keyword">constructor</span> (<span class="params">aa: <span class="built_in">string</span></span>) &#123;</span><br><span class="line">        <span class="keyword">this</span>.aa = aa</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="keyword">class</span> Test &#123;</span><br><span class="line">    bb: <span class="built_in">number</span></span><br><span class="line">    <span class="keyword">constructor</span> (<span class="params">bb: <span class="built_in">number</span></span>) &#123;</span><br><span class="line">        <span class="keyword">this</span>.bb = bb</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="keyword">class</span> cat &#123;</span><br><span class="line">    cc: <span class="built_in">boolean</span></span><br><span class="line">    <span class="keyword">constructor</span> (<span class="params">cc: <span class="built_in">boolean</span></span>) &#123;</span><br><span class="line">        <span class="keyword">this</span>.cc = cc</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="keyword">class</span> A1 <span class="keyword">extends</span> cat &#123;</span><br><span class="line">    dd: Student</span><br><span class="line">    <span class="keyword">constructor</span> (<span class="params">g : <span class="built_in">boolean</span></span>) &#123;</span><br><span class="line">        <span class="keyword">if</span> (g) &#123;</span><br><span class="line">            <span class="keyword">super</span>(g)</span><br><span class="line">            <span class="keyword">this</span>.dd = <span class="keyword">new</span> Student(<span class="string">"YHF"</span>);</span><br><span class="line">        &#125; <span class="keyword">else</span> &#123;</span><br><span class="line">            <span class="keyword">super</span>(g)</span><br><span class="line">            <span class="keyword">this</span>.dd = <span class="keyword">new</span> Student(<span class="string">"err"</span>);</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line">    test (aa: <span class="built_in">string</span>) &#123;</span><br><span class="line">        <span class="keyword">let</span> sum = <span class="keyword">new</span> Student(aa)</span><br><span class="line">        <span class="keyword">return</span> sum.aa</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="keyword">class</span> A2 <span class="keyword">extends</span> cat &#123;</span><br><span class="line">    ee: Test</span><br><span class="line">    <span class="keyword">constructor</span> (<span class="params">g : <span class="built_in">boolean</span></span>) &#123;</span><br><span class="line">        <span class="keyword">if</span> (g) &#123;</span><br><span class="line">            <span class="keyword">super</span>(g)</span><br><span class="line">            <span class="keyword">this</span>.ee = <span class="keyword">new</span> Test(<span class="number">1</span>);</span><br><span class="line">        &#125; <span class="keyword">else</span> &#123;</span><br><span class="line">            <span class="keyword">super</span>(g)</span><br><span class="line">            <span class="keyword">this</span>.ee = <span class="keyword">new</span> Test(<span class="number">2</span>);</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line">function abc&lt;T extends cat&gt;(c: new (g) =&gt; T,g: boolean): T &#123;</span><br><span class="line">    <span class="keyword">return</span> <span class="keyword">new</span> c(g);</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="keyword">let</span> test1 = abc(A1,<span class="literal">true</span>);</span><br><span class="line"></span><br><span class="line"><span class="built_in">console</span>.log(test1.dd.aa) <span class="comment">// YHF</span></span><br><span class="line"><span class="built_in">console</span>.log(test1.cc) <span class="comment">// true</span></span><br><span class="line"><span class="built_in">console</span>.log(test1.test(<span class="string">"改变YHF,我叫你爸爸"</span>)); <span class="comment">// 改变YHF,我叫你爸爸</span></span><br><span class="line"></span><br><span class="line"><span class="built_in">console</span>.log(abc(A2,<span class="literal">false</span>).ee.bb); <span class="comment">// 2</span></span><br></pre></td></tr></table></figure></li></ul><h1 id="后记"><a href="#后记" class="headerlink" title="后记"></a>后记</h1><ul><li>这个就是我学习Ts的第六天的笔记，欢迎更多的同行大哥指导交流</li><li><a href="https://yhf7.github.io/" target="_blank" rel="noopener">欢迎进入我的博客</a>：<a href="https://yhf7.github.io/" target="_blank" rel="noopener">https://yhf7.github.io/</a></li><li>如果有什么侵权的话，请及时添加小编微信以及qq也可以来告诉小编（905477376微信qq通用），谢谢！</li></ul>]]></content>
      
      
      <categories>
          
          <category> TypeScript </category>
          
      </categories>
      
      
        <tags>
            
            <tag> TypeScript 笔记 </tag>
            
        </tags>
      
    </entry>
    
    <entry>
      <title>TypeScript 自学笔记5 函数</title>
      <link href="/2019/03/18/TypeScript%E7%AC%94%E8%AE%B05/"/>
      <url>/2019/03/18/TypeScript%E7%AC%94%E8%AE%B05/</url>
      
        <content type="html"><![CDATA[<link rel="stylesheet" class="aplayer-secondary-style-marker" href="/assets/css/APlayer.min.css"><script src="/assets/js/APlayer.min.js" class="aplayer-secondary-script-marker"></script><h1 id="前言"><a href="#前言" class="headerlink" title="前言"></a>前言</h1><ul><li>时隔多天，今天的需求配色出了点问题等处理，我就又来继续我的Ts之旅</li><li>继续看文档学习Ts直到学完为止</li><li>今天是记录ts的第五天</li><li>今天学习ts的函数，上一次学的是类这一次到函数了</li><li>等到全部过一遍再重新回头看看</li></ul><h1 id="介绍"><a href="#介绍" class="headerlink" title="介绍"></a>介绍</h1><p>函数是JavaScript应用程序的基础。 它帮助你实现抽象层，模拟类，信息隐藏和模块。 在TypeScript里，虽然已经支持类，命名空间和模块，但函数仍然是主要的定义 行为的地方。 TypeScript为JavaScript函数添加了额外的功能，让我们可以更容易地使用。</p><h1 id="函数"><a href="#函数" class="headerlink" title="函数"></a>函数</h1><ul><li>其实简单的来说和js没有什么区别</li><li>没错使用js的这两种监理方式在ts上是可以跑的<figure class="highlight typescript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br></pre></td><td class="code"><pre><span class="line"><span class="function"><span class="keyword">function</span> <span class="title">add</span>(<span class="params">x,y</span>) </span>&#123;</span><br><span class="line">    <span class="keyword">return</span> x + y;</span><br><span class="line">&#125;</span><br><span class="line"><span class="built_in">console</span>.log(add(<span class="number">3</span>,<span class="number">4</span>));</span><br><span class="line"></span><br><span class="line"><span class="keyword">let</span> myAdd = <span class="function"><span class="keyword">function</span> (<span class="params">x,y</span>) </span>&#123;</span><br><span class="line">    <span class="keyword">return</span> x + y;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="built_in">console</span>.log(myAdd(<span class="number">5</span>,<span class="number">6</span>));</span><br></pre></td></tr></table></figure></li></ul><h1 id="函数类型"><a href="#函数类型" class="headerlink" title="函数类型"></a>函数类型</h1><h3 id="为函数定义类型"><a href="#为函数定义类型" class="headerlink" title="为函数定义类型"></a>为函数定义类型</h3><ul><li>这个其实在前面的例子里面已经遇到过了。不过还是要练一下</li><li>升级上一个例子</li><li>写入参数类型和返回类型后还是运行没问题的<figure class="highlight typescript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br></pre></td><td class="code"><pre><span class="line"><span class="function"><span class="keyword">function</span> <span class="title">add</span>(<span class="params">x: <span class="built_in">number</span>,y: <span class="built_in">number</span></span>): <span class="title">number</span> </span>&#123;</span><br><span class="line">    <span class="keyword">return</span> x + y;</span><br><span class="line">&#125;</span><br><span class="line"><span class="built_in">console</span>.log(add(<span class="number">3</span>,<span class="number">4</span>));</span><br><span class="line"></span><br><span class="line"><span class="keyword">let</span> myAdd = <span class="function"><span class="keyword">function</span> (<span class="params">x: <span class="built_in">number</span>,y: <span class="built_in">number</span></span>): <span class="title">number</span> </span>&#123;</span><br><span class="line">    <span class="keyword">return</span> x + y;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="built_in">console</span>.log(myAdd(<span class="number">5</span>,<span class="number">6</span>));</span><br></pre></td></tr></table></figure></li></ul><h3 id="书写完整函数类型"><a href="#书写完整函数类型" class="headerlink" title="书写完整函数类型"></a>书写完整函数类型</h3><ul><li>简单来说就是吧整个函数的参数和返回类型在声明时就指定声明好</li><li>函数类型包含两部分：参数类型和返回值类型。 当写出完整函数类型的时候，这两部分都是需要的。 我们以参数列表的形式写出参数类型，为每个参数指定一个名字和类型</li><li>参数名称只是为了易读性，名字可以不用一样</li></ul><hr><figure class="highlight typescript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">// 1.</span></span><br><span class="line"><span class="keyword">let</span> myAdd: <span class="function">(<span class="params">x: <span class="built_in">number</span>, y: <span class="built_in">number</span></span>) =&gt;</span> <span class="built_in">number</span> = <span class="function"><span class="keyword">function</span>(<span class="params">x: <span class="built_in">number</span>, y: <span class="built_in">number</span></span>): <span class="title">number</span> </span>&#123; <span class="keyword">return</span> x + y; &#125;;</span><br><span class="line"></span><br><span class="line"><span class="comment">// 参数名不同版本</span></span><br><span class="line"><span class="keyword">let</span> myAdd: <span class="function">(<span class="params">baseValue: <span class="built_in">number</span>, increment: <span class="built_in">number</span></span>) =&gt;</span> <span class="built_in">number</span> = <span class="function"><span class="keyword">function</span>(<span class="params">x: <span class="built_in">number</span>, y: <span class="built_in">number</span></span>): <span class="title">number</span> </span>&#123; <span class="keyword">return</span> x + y; &#125;;</span><br></pre></td></tr></table></figure><ul><li>当我第一次看到这样写的时候我也是比较疑惑，前面的参数声明我是知道的</li><li>但是那个箭头指向我就不是很懂，大概猜是返回值类型的指定</li><li>不太确定着么办呢？想知道是不是那我改变一下它的属性不就知道了</li><li><p>我就改变了声明为字符串，我们来看看升级版</p><figure class="highlight typescript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">let</span> myAdd: <span class="function">(<span class="params">x: <span class="built_in">number</span>, y: <span class="built_in">number</span></span>) =&gt;</span> <span class="built_in">String</span> = <span class="function"><span class="keyword">function</span>(<span class="params">x: <span class="built_in">number</span>, y: <span class="built_in">number</span></span>): <span class="title">String</span> </span>&#123; <span class="keyword">return</span> (x + y) &gt; <span class="number">10</span> ? <span class="string">"true"</span> : <span class="string">"false"</span>; &#125;;</span><br><span class="line"><span class="built_in">console</span>.log(myAdd(<span class="number">5</span>,<span class="number">6</span>)); <span class="comment">// true</span></span><br></pre></td></tr></table></figure></li><li><p>这样来看我的理解是对的，确实是用了指定返回值类型的</p></li><li>后面看到官网也有写解释</li><li>第二部分是返回值类型。 对于返回值，我们在函数和返回值类型之前使用( =&gt;)符号，使之清晰明了。 如之前提到的，返回值类型是函数类型的必要部分，如果函数没有返回任何值，你也必须指定返回值类型为 void而不能留空。</li><li>如果使用外部的变量是不用在构建函数的时候声明的</li></ul><h3 id="推断类型"><a href="#推断类型" class="headerlink" title="推断类型"></a>推断类型</h3><ul><li>其实是ts自身的识别</li><li>当你前面声明并赋值的时候，编译器会自动识别出类型意思就是说不写类型也可以</li><li>官网说这叫</li><li>直接上例子一看就懂<figure class="highlight typescript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">// myAdd has the full function type</span></span><br><span class="line"><span class="keyword">let</span> myAdd = <span class="function"><span class="keyword">function</span>(<span class="params">x: <span class="built_in">number</span>, y: <span class="built_in">number</span></span>): <span class="title">number</span> </span>&#123; <span class="keyword">return</span> x + y; &#125;;</span><br><span class="line"></span><br><span class="line"><span class="comment">// The parameters `x` and `y` have the type number</span></span><br><span class="line"><span class="keyword">let</span> myAdd: <span class="function">(<span class="params">baseValue: <span class="built_in">number</span>, increment: <span class="built_in">number</span></span>) =&gt;</span> <span class="built_in">number</span> =</span><br><span class="line">    <span class="function"><span class="keyword">function</span>(<span class="params">x, y</span>) </span>&#123; <span class="keyword">return</span> x + y; &#125;;</span><br></pre></td></tr></table></figure></li></ul><h1 id="可选参数和默认参数"><a href="#可选参数和默认参数" class="headerlink" title="可选参数和默认参数"></a>可选参数和默认参数</h1><h3 id="参数"><a href="#参数" class="headerlink" title="参数"></a>参数</h3><ul><li>这个可选类型我们前面也是学过的那看看例子</li><li>其实就是说设定的参数和传入的参数必须一致，对一个不可以少一个不可以</li><li>这个和js不一样，这个写了多少就是多少<figure class="highlight typescript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><span class="line"><span class="function"><span class="keyword">function</span> <span class="title">buildName</span>(<span class="params">firstName: <span class="built_in">string</span>, lastName: <span class="built_in">string</span></span>) </span>&#123;</span><br><span class="line">    <span class="keyword">return</span> firstName + <span class="string">" "</span> + lastName;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="keyword">let</span> result1 = buildName(<span class="string">"Bob"</span>);                  <span class="comment">// error, too few parameters</span></span><br><span class="line"><span class="keyword">let</span> result2 = buildName(<span class="string">"Bob"</span>, <span class="string">"Adams"</span>, <span class="string">"Sr."</span>);  <span class="comment">// error, too many parameters</span></span><br><span class="line"><span class="keyword">let</span> result3 = buildName(<span class="string">"Bob"</span>, <span class="string">"Adams"</span>);         <span class="comment">// ah, just right</span></span><br></pre></td></tr></table></figure></li></ul><h3 id="可选参数"><a href="#可选参数" class="headerlink" title="可选参数"></a>可选参数</h3><ul><li>可选参数呢就是可以输入也可以不输入的</li><li>定义了的可以少写，不传入默认值就是undefined</li><li>当是还是不可以多输入多输入还是会报错的</li><li>假如想前面的这个数为可选参数呢，那就把它放在第二位</li><li>因为可选参数必须跟在必须输入参数的后面，之前我就遇到过这样的错误</li><li>当时还不知道是为什么现在终于明白了<figure class="highlight typescript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br></pre></td><td class="code"><pre><span class="line"><span class="function"><span class="keyword">function</span> <span class="title">buildName</span>(<span class="params">firstName: <span class="built_in">string</span>, lastName?: <span class="built_in">string</span></span>) </span>&#123;</span><br><span class="line">    <span class="keyword">if</span> (lastName)</span><br><span class="line">        <span class="keyword">return</span> firstName + <span class="string">" "</span> + lastName;</span><br><span class="line">    <span class="keyword">else</span></span><br><span class="line">        <span class="keyword">return</span> firstName;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="keyword">let</span> result1 = buildName(<span class="string">"Bob"</span>);  <span class="comment">// works correctly now</span></span><br><span class="line"><span class="keyword">let</span> result2 = buildName(<span class="string">"Bob"</span>, <span class="string">"Adams"</span>, <span class="string">"Sr."</span>);  <span class="comment">// error, too many parameters</span></span><br><span class="line"><span class="keyword">let</span> result3 = buildName(<span class="string">"Bob"</span>, <span class="string">"Adams"</span>);  <span class="comment">// ah, just right</span></span><br></pre></td></tr></table></figure></li></ul><h3 id="默认值"><a href="#默认值" class="headerlink" title="默认值"></a>默认值</h3><ul><li>当我们可选参数不输入是默认是undefined</li><li>那我们可以去改变它的默认值，很简单就是在参数后面加入</li><li>传入的是undefined的时候也是会启动这个默认值的<figure class="highlight typescript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><span class="line">function buildName(firstName: string, lastName = "Smith") &#123;</span><br><span class="line">    <span class="keyword">return</span> firstName + <span class="string">" "</span> + lastName;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="keyword">let</span> result1 = buildName(<span class="string">"Bob"</span>);                  <span class="comment">// works correctly now, returns "Bob Smith"</span></span><br><span class="line"><span class="keyword">let</span> result2 = buildName(<span class="string">"Bob"</span>, <span class="literal">undefined</span>);       <span class="comment">// still works, also returns "Bob Smith"</span></span><br><span class="line"><span class="keyword">let</span> result3 = buildName(<span class="string">"Bob"</span>, <span class="string">"Adams"</span>, <span class="string">"Sr."</span>);  <span class="comment">// error, too many parameters</span></span><br><span class="line"><span class="keyword">let</span> result4 = buildName(<span class="string">"Bob"</span>, <span class="string">"Adams"</span>);         <span class="comment">// ah, just right</span></span><br></pre></td></tr></table></figure></li></ul><hr><ul><li>这样看起来 默认参数和可选参数其实是共享的</li><li>默认的参数其实就是可选的参数啊，可选的参数也带有默认参数啊</li><li>这样就可以解决我们想把可选参数放在前面的问题</li><li>我在前面放入默认参数不就是相当于变成了可选参数</li><li>启动的时候输入undefined就可以了</li><li>果然是个很不错的方法，不过既然这样为啥我不直接放在后面呢哈哈哈<figure class="highlight typescript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><span class="line">function buildName(firstName = "Will", lastName: string) &#123;</span><br><span class="line">    <span class="keyword">return</span> firstName + <span class="string">" "</span> + lastName;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="keyword">let</span> result1 = buildName(<span class="string">"Bob"</span>); <span class="comment">// 默认参数位于默认参数前面这样是调用不到默认参数的</span></span><br><span class="line"><span class="keyword">let</span> result2 = buildName(<span class="string">"Bob"</span>, <span class="string">"Adams"</span>, <span class="string">"Sr."</span>);  <span class="comment">// error, too many parameters</span></span><br><span class="line"><span class="keyword">let</span> result3 = buildName(<span class="string">"Bob"</span>, <span class="string">"Adams"</span>);         <span class="comment">// okay and returns "Bob Adams"</span></span><br><span class="line"><span class="keyword">let</span> result4 = buildName(<span class="literal">undefined</span>, <span class="string">"Adams"</span>);     <span class="comment">// okay and returns "Will Adams"</span></span><br></pre></td></tr></table></figure></li></ul><h1 id="剩余参数"><a href="#剩余参数" class="headerlink" title="剩余参数"></a>剩余参数</h1><ul><li>必要参数，默认参数和可选参数有个共同点：它们表示某一个参数。 有时，你想同时操作多个参数，或者你并不知道会有多少参数传递进来。 在JavaScript里，你可以使用 arguments来访问所有传入的参数。</li><li>在TypeScript里，你可以把所有参数收集到一个变量里</li><li>这个…其实就是es6的语法学过的都应该懂得</li><li><p>然后使用数组方法合并返回，不错的方法</p><figure class="highlight typescript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line"><span class="function"><span class="keyword">function</span> <span class="title">buildName</span>(<span class="params">firstName: <span class="built_in">string</span>, ...restOfName: <span class="built_in">string</span>[]</span>) </span>&#123;</span><br><span class="line">  <span class="keyword">return</span> firstName + <span class="string">" "</span> + restOfName.join(<span class="string">" "</span>);</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="keyword">let</span> employeeName = buildName(<span class="string">"Joseph"</span>, <span class="string">"Samuel"</span>, <span class="string">"Lucas"</span>, <span class="string">"MacKinzie"</span>);</span><br></pre></td></tr></table></figure></li><li><p>剩余参数会被当做个数不限的可选参数。 可以一个都没有，同样也可以有任意个。 编译器创建参数数组，名字是你在省略号（ …）后面给定的名字，你可以在函数体内使用这个数组。</p></li></ul><hr><ul><li>官网还给出了函数类型定义时的用法<figure class="highlight typescript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line"><span class="function"><span class="keyword">function</span> <span class="title">buildName</span>(<span class="params">firstName: <span class="built_in">string</span>, ...restOfName: <span class="built_in">string</span>[]</span>) </span>&#123;</span><br><span class="line">  <span class="keyword">return</span> firstName + <span class="string">" "</span> + restOfName.join(<span class="string">" "</span>);</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="keyword">let</span> buildNameFun: <span class="function">(<span class="params">fname: <span class="built_in">string</span>, ...rest: <span class="built_in">string</span>[]</span>) =&gt;</span> <span class="built_in">string</span> = buildName;</span><br></pre></td></tr></table></figure></li></ul><h1 id="This-（重点）"><a href="#This-（重点）" class="headerlink" title="This （重点）"></a>This （重点）</h1><ul><li>学习如何在JavaScript里正确使用this就好比一场成年礼。 由于TypeScript是JavaScript的超集，TypeScript程序员也需要弄清 this工作机制并且当有bug的时候能够找出错误所在。 幸运的是，TypeScript能通知你错误地使用了 this的地方。（挺认可的）</li></ul><h1 id="this-和尖头函数"><a href="#this-和尖头函数" class="headerlink" title="this 和尖头函数"></a>this 和尖头函数</h1><h3 id="js-this"><a href="#js-this" class="headerlink" title="js this"></a>js this</h3><ul><li>JavaScript里，this的值在函数被调用的时候才会指定。 这是个既强大又灵活的特点，但是你需要花点时间弄清楚函数调用的上下文是什么。 但众所周知，这不是一件很简单的事，尤其是在返回一个函数或将函数当做参数传递的时候。</li><li><p>在js里面 this 是一个很麻烦的家伙，没有理解好会引起很多bug</p><figure class="highlight typescript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">let</span> deck = &#123;</span><br><span class="line">    suits: [<span class="string">"hearts"</span>, <span class="string">"spades"</span>, <span class="string">"clubs"</span>, <span class="string">"diamonds"</span>],</span><br><span class="line">    cards: <span class="built_in">Array</span>(<span class="number">52</span>),</span><br><span class="line">    createCardPicker: <span class="function"><span class="keyword">function</span>(<span class="params"></span>) </span>&#123;</span><br><span class="line">        <span class="keyword">return</span> <span class="function"><span class="keyword">function</span>(<span class="params"></span>) </span>&#123;</span><br><span class="line">            <span class="keyword">let</span> pickedCard = <span class="built_in">Math</span>.floor(<span class="built_in">Math</span>.random() * <span class="number">52</span>);</span><br><span class="line">            <span class="keyword">let</span> pickedSuit = <span class="built_in">Math</span>.floor(pickedCard / <span class="number">13</span>);</span><br><span class="line"></span><br><span class="line">            <span class="keyword">return</span> &#123;suit: <span class="keyword">this</span>.suits[pickedSuit], card: pickedCard % <span class="number">13</span>&#125;;</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="keyword">let</span> cardPicker = deck.createCardPicker();</span><br><span class="line"><span class="keyword">let</span> pickedCard = cardPicker();</span><br><span class="line"></span><br><span class="line"><span class="built_in">console</span>.log(<span class="string">"card: "</span> + pickedCard.card + <span class="string">" of "</span> + pickedCard.suit);</span><br></pre></td></tr></table></figure></li><li><p>可以看到createCardPicker是个函数，并且它又返回了一个函数。 如果我们尝试运行这个程序，会发现它并没有输出结果而是报错了。 因为 createCardPicker返回的函数里的this被设置成了window而不是deck对象。 因为我们只是独立的调用了 cardPicker()。 顶级的非方法式调用会将 this视为window。 （注意：在严格模式下， this为undefined而不是window）。</p></li></ul><h3 id="解决上面的问题"><a href="#解决上面的问题" class="headerlink" title="解决上面的问题"></a>解决上面的问题</h3><ul><li>熟悉Es6语法的应该会想到箭头函数，因为箭头函数可以绑定this，而不是使用时的this</li><li>为了解决这个问题，我们可以在函数被返回时就绑好正确的this。 这样的话，无论之后怎么使用它，都会引用绑定的‘deck’对象。 我们需要改变函数表达式来使用ECMAScript 6箭头语法。 箭头函数能保存函数创建时的 this值，而不是调用时的值：</li><li>这个真的完美的解决了问题</li><li>其实箭头函数是绑定当时自身最高级的父类为this（个人理解）<figure class="highlight typescript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">let</span> deck = &#123;</span><br><span class="line">    suits: [<span class="string">"hearts"</span>, <span class="string">"spades"</span>, <span class="string">"clubs"</span>, <span class="string">"diamonds"</span>],</span><br><span class="line">    cards: <span class="built_in">Array</span>(<span class="number">52</span>),</span><br><span class="line">    createCardPicker: <span class="function"><span class="keyword">function</span>(<span class="params"></span>) </span>&#123;</span><br><span class="line">        <span class="comment">// <span class="doctag">NOTE:</span> the line below is now an arrow function, allowing us to capture 'this' right here</span></span><br><span class="line">        <span class="keyword">return</span> <span class="function"><span class="params">()</span> =&gt;</span> &#123;</span><br><span class="line">            <span class="keyword">let</span> pickedCard = <span class="built_in">Math</span>.floor(<span class="built_in">Math</span>.random() * <span class="number">52</span>);</span><br><span class="line">            <span class="keyword">let</span> pickedSuit = <span class="built_in">Math</span>.floor(pickedCard / <span class="number">13</span>);</span><br><span class="line"></span><br><span class="line">            <span class="keyword">return</span> &#123;suit: <span class="keyword">this</span>.suits[pickedSuit], card: pickedCard % <span class="number">13</span>&#125;;</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="keyword">let</span> cardPicker = deck.createCardPicker();</span><br><span class="line"><span class="keyword">let</span> pickedCard = cardPicker();</span><br><span class="line"></span><br><span class="line"><span class="built_in">console</span>.log(<span class="string">"card: "</span> + pickedCard.card + <span class="string">" of "</span> + pickedCard.suit);<span class="comment">// card: 11 of hearts</span></span><br></pre></td></tr></table></figure></li></ul><hr><ul><li>除了es6的箭头函数我们也可以使用bind来绑定this的指向</li><li>现在我们就绑定为deck也就是我们的对象<figure class="highlight typescript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">let</span> deck = &#123;</span><br><span class="line">    suits: [<span class="string">"hearts"</span>, <span class="string">"spades"</span>, <span class="string">"clubs"</span>, <span class="string">"diamonds"</span>],</span><br><span class="line">    cards: <span class="built_in">Array</span>(<span class="number">52</span>),</span><br><span class="line">    createCardPicker: <span class="function"><span class="keyword">function</span>(<span class="params"></span>) </span>&#123;</span><br><span class="line">        <span class="keyword">let</span> picker =  <span class="function"><span class="keyword">function</span>(<span class="params"></span>) </span>&#123;</span><br><span class="line">            <span class="keyword">let</span> pickedCard = <span class="built_in">Math</span>.floor(<span class="built_in">Math</span>.random() * <span class="number">52</span>);</span><br><span class="line">            <span class="keyword">let</span> pickedSuit = <span class="built_in">Math</span>.floor(pickedCard / <span class="number">13</span>);</span><br><span class="line"></span><br><span class="line">            <span class="keyword">return</span> &#123;suit: <span class="keyword">this</span>.suits[pickedSuit], card: pickedCard % <span class="number">13</span>&#125;;</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="keyword">return</span> picker.bind(deck)</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="keyword">let</span> cardPicker = deck.createCardPicker();</span><br><span class="line"><span class="keyword">let</span> pickedCard = cardPicker();</span><br><span class="line"></span><br><span class="line"><span class="built_in">console</span>.log(<span class="string">"card: "</span> + pickedCard.card + <span class="string">" of "</span> + pickedCard.suit);</span><br></pre></td></tr></table></figure></li></ul><h1 id="this-参数"><a href="#this-参数" class="headerlink" title="this 参数"></a>this 参数</h1><ul><li>不幸的是，this.suits[pickedSuit]的类型依旧为any。 这是因为 this来自对象字面量里的函数表达式。 修改的方法是，提供一个显式的 this参数。 this参数是个假的参数，（这个我没有所以看不出是不是）<figure class="highlight typescript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line"><span class="function"><span class="keyword">function</span> <span class="title">f</span>(<span class="params"><span class="keyword">this</span>: <span class="built_in">void</span></span>) </span>&#123;</span><br><span class="line">    <span class="comment">// make sure `this` is unusable in this standalone function</span></span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure></li></ul><hr><ul><li>让我们往例子里添加一些接口，Card 和 Deck，让类型重用能够变得清晰简单些：</li><li>这个例子对于我这个初学者来说有点绕要花点时间理解</li><li>为什么在里面的this指定Deck呢，其实就是这一步指定的声明</li><li>把这个声明放入到函数里面 使得this执行的参数类型被指定<figure class="highlight typescript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">interface</span> Card &#123;</span><br><span class="line">    suit: <span class="built_in">string</span>;</span><br><span class="line">    card: <span class="built_in">number</span>;</span><br><span class="line">&#125;</span><br><span class="line"><span class="keyword">interface</span> Deck &#123;</span><br><span class="line">    suits: <span class="built_in">string</span>[];</span><br><span class="line">    cards: <span class="built_in">number</span>[];</span><br><span class="line">    createCardPicker(<span class="keyword">this</span>: Deck): <span class="function"><span class="params">()</span> =&gt;</span> Card;</span><br><span class="line">&#125;</span><br><span class="line"><span class="keyword">let</span> deck: Deck = &#123;</span><br><span class="line">    suits: [<span class="string">"hearts"</span>, <span class="string">"spades"</span>, <span class="string">"clubs"</span>, <span class="string">"diamonds"</span>],</span><br><span class="line">    cards: <span class="built_in">Array</span>(<span class="number">52</span>),</span><br><span class="line">    <span class="comment">// <span class="doctag">NOTE:</span> The function now explicitly specifies that its callee must be of type Deck</span></span><br><span class="line">    createCardPicker: <span class="function"><span class="keyword">function</span>(<span class="params"><span class="keyword">this</span>: Deck</span>) </span>&#123;</span><br><span class="line">        <span class="keyword">return</span> <span class="function"><span class="params">()</span> =&gt;</span> &#123;</span><br><span class="line">            <span class="keyword">let</span> pickedCard = <span class="built_in">Math</span>.floor(<span class="built_in">Math</span>.random() * <span class="number">52</span>);</span><br><span class="line">            <span class="keyword">let</span> pickedSuit = <span class="built_in">Math</span>.floor(pickedCard / <span class="number">13</span>);</span><br><span class="line"></span><br><span class="line">            <span class="keyword">return</span> &#123;suit: <span class="keyword">this</span>.suits[pickedSuit], card: pickedCard % <span class="number">13</span>&#125;;</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="keyword">let</span> cardPicker = deck.createCardPicker();</span><br><span class="line"><span class="keyword">let</span> pickedCard = cardPicker();</span><br><span class="line"></span><br><span class="line">alert(<span class="string">"card: "</span> + pickedCard.card + <span class="string">" of "</span> + pickedCard.suit);</span><br></pre></td></tr></table></figure></li></ul><hr><ul><li>现在TypeScript知道createCardPicker期望在某个Deck对象上调用。 也就是说 this是Deck类型的，而非any，因此–noImplicitThis不会报错了。（官网说的我不知道着么去证实）</li></ul><h1 id="this参数在回调函数里-这个有点不太好理解，死磕了好久"><a href="#this参数在回调函数里-这个有点不太好理解，死磕了好久" class="headerlink" title="this参数在回调函数里 (这个有点不太好理解，死磕了好久)"></a>this参数在回调函数里 (这个有点不太好理解，死磕了好久)</h1><ul><li>你可以也看到过在回调函数里的this报错，当你将一个函数传递到某个库函数里稍后会被调用时。 因为当回调被调用的时候，它们会被当成一个普通函数调用， this将为undefined。 稍做改动，你就可以通过 this参数来避免错误。 首先，库函数的作者要指定 this的类型</li><li><ul><li>这个暂时无法实现的，只是学习原理<figure class="highlight typescript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">interface</span> UIElement &#123;</span><br><span class="line">  addClickListener(onclick: <span class="function">(<span class="params"><span class="keyword">this</span>: <span class="built_in">void</span>, e: Event</span>) =&gt;</span> <span class="built_in">void</span>): <span class="built_in">void</span>;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure></li></ul></li></ul><hr><ul><li>指定了this类型后，你显式声明onClickBad必须在Handler的实例上调用。 然后TypeScript会检测到 addClickListener要求函数带有this: void<figure class="highlight typescript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">interface</span> UIElement &#123;</span><br><span class="line">  addClickListener(onclick: <span class="function">(<span class="params"><span class="keyword">this</span>: <span class="built_in">void</span>, e: Event</span>) =&gt;</span> <span class="built_in">void</span>): <span class="built_in">void</span>;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="comment">// UIElementd的类</span></span><br><span class="line"><span class="keyword">class</span> UIButton <span class="keyword">implements</span> UIElement &#123;</span><br><span class="line">    addClickListener(onclick: <span class="function">(<span class="params"><span class="keyword">this</span>: <span class="built_in">void</span>, e: Event</span>) =&gt;</span> <span class="built_in">void</span>): <span class="built_in">void</span> &#123;</span><br><span class="line">        <span class="keyword">let</span> event = <span class="keyword">new</span> Event(<span class="string">"click"</span>, &#123;<span class="string">"bubbles"</span>:<span class="literal">true</span>, <span class="string">"cancelable"</span>:<span class="literal">false</span>&#125;)</span><br><span class="line">        onclick(event)</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="keyword">class</span> Handler &#123;</span><br><span class="line">    info: <span class="built_in">string</span>;</span><br><span class="line">    onClickBad(<span class="keyword">this</span>: Handler, e: Event) &#123;</span><br><span class="line">        <span class="comment">// oops, used this here. using this callback would crash at runtime</span></span><br><span class="line">        <span class="keyword">this</span>.info = <span class="string">"Bad Clicked"</span>;</span><br><span class="line">    &#125;</span><br><span class="line">    onClickGood(<span class="keyword">this</span>:<span class="built_in">void</span>,e:Event) &#123;</span><br><span class="line">        <span class="built_in">console</span>.log(<span class="string">"Good Clicked"</span>)</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br><span class="line"><span class="keyword">let</span> h = <span class="keyword">new</span> Handler();</span><br><span class="line"><span class="keyword">let</span> uiElement: UIElement = <span class="keyword">new</span> UIButton();</span><br><span class="line">uiElement.addClickListener(h.onClickGood);</span><br></pre></td></tr></table></figure></li></ul><hr><ul><li>修复错误<figure class="highlight typescript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">class</span> Handler &#123;</span><br><span class="line">    info: <span class="built_in">string</span>;</span><br><span class="line">    onClickGood(<span class="keyword">this</span>: <span class="built_in">void</span>, e: Event) &#123;</span><br><span class="line">        <span class="comment">// can't use this here because it's of type void!</span></span><br><span class="line">        <span class="built_in">console</span>.log(<span class="string">'clicked!'</span>);</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br><span class="line"><span class="keyword">let</span> h = <span class="keyword">new</span> Handler();</span><br><span class="line">uiElement.addClickListener(h.onClickGood);</span><br></pre></td></tr></table></figure></li></ul><hr><ul><li><p>因为onClickGood指定了this类型为void，因此传递addClickListener是合法的。 当然了，这也意味着不能使用 this.info. 如果你两者都想要，你不得不使用箭头函数了：</p><figure class="highlight typescript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">class</span> Handler &#123;</span><br><span class="line">    info: <span class="built_in">string</span>;</span><br><span class="line">    onClickGood = <span class="function">(<span class="params">e: Event</span>) =&gt;</span> &#123; <span class="keyword">this</span>.info = e.message &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure></li><li><p>这是可行的因为箭头函数不会捕获this，所以你总是可以把它们传给期望this: void的函数。 缺点是每个 Handler对象都会创建一个箭头函数。 另一方面，方法只会被创建一次，添加到 Handler的原型链上。 它们在不同 Handler对象间是共享的。</p></li></ul><h1 id="重载"><a href="#重载" class="headerlink" title="重载"></a>重载</h1><ul><li>JavaScript本身是个动态语言。 JavaScript里函数根据传入不同的参数而返回不同类型的数据是很常见的。</li><li>这样的写法在我们平时也是会经常遇到的<figure class="highlight typescript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">let</span> suits = [<span class="string">"hearts"</span>, <span class="string">"spades"</span>, <span class="string">"clubs"</span>, <span class="string">"diamonds"</span>];</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">function</span> <span class="title">pickCard</span>(<span class="params">x</span>): <span class="title">any</span> </span>&#123;</span><br><span class="line">    <span class="comment">// Check to see if we're working with an object/array</span></span><br><span class="line">    <span class="comment">// if so, they gave us the deck and we'll pick the card</span></span><br><span class="line">    <span class="keyword">if</span> (<span class="keyword">typeof</span> x == <span class="string">"object"</span>) &#123;</span><br><span class="line">        <span class="keyword">let</span> pickedCard = <span class="built_in">Math</span>.floor(<span class="built_in">Math</span>.random() * x.length);</span><br><span class="line">        <span class="keyword">return</span> pickedCard;</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="comment">// Otherwise just let them pick the card</span></span><br><span class="line">    <span class="keyword">else</span> <span class="keyword">if</span> (<span class="keyword">typeof</span> x == <span class="string">"number"</span>) &#123;</span><br><span class="line">        <span class="keyword">let</span> pickedSuit = <span class="built_in">Math</span>.floor(x / <span class="number">13</span>);</span><br><span class="line">        <span class="keyword">return</span> &#123; suit: suits[pickedSuit], card: x % <span class="number">13</span> &#125;;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="keyword">let</span> myDeck = [&#123; suit: <span class="string">"diamonds"</span>, card: <span class="number">2</span> &#125;, &#123; suit: <span class="string">"spades"</span>, card: <span class="number">10</span> &#125;, &#123; suit: <span class="string">"hearts"</span>, card: <span class="number">4</span> &#125;];</span><br><span class="line"><span class="keyword">let</span> pickedCard1 = myDeck[pickCard(myDeck)];</span><br><span class="line"><span class="built_in">console</span>.log(<span class="string">"card: "</span> + pickedCard1.card + <span class="string">" of "</span> + pickedCard1.suit);</span><br><span class="line"></span><br><span class="line"><span class="keyword">let</span> pickedCard2 = pickCard(<span class="number">15</span>);</span><br><span class="line"><span class="built_in">console</span>.log(<span class="string">"card: "</span> + pickedCard2.card + <span class="string">" of "</span> + pickedCard2.suit);</span><br></pre></td></tr></table></figure></li></ul><p>pickCard方法根据传入参数的不同会返回两种不同的类型。 如果传入的是代表纸牌的对象，函数作用是从中抓一张牌。 如果用户想抓牌，我们告诉他抓到了什么牌。 但是这怎么在类型系统里表示呢。</p><hr><ul><li>方法是为同一个函数提供多个函数类型定义来进行函数重载。 编译器会根据这个列表去处理函数的调用。 下面我们来重载 pickCard函数。</li><li>学习多版本的控制<figure class="highlight typescript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">let</span> suits = [<span class="string">"hearts"</span>, <span class="string">"spades"</span>, <span class="string">"clubs"</span>, <span class="string">"diamonds"</span>];</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">function</span> <span class="title">pickCard</span>(<span class="params">x: &#123;suit: <span class="built_in">string</span>; card: <span class="built_in">number</span>; &#125;[]</span>): <span class="title">number</span></span>;</span><br><span class="line"><span class="function"><span class="keyword">function</span> <span class="title">pickCard</span>(<span class="params">x: <span class="built_in">number</span></span>): </span>&#123;suit: <span class="built_in">string</span>; card: <span class="built_in">number</span>; &#125;;</span><br><span class="line"><span class="function"><span class="keyword">function</span> <span class="title">pickCard</span>(<span class="params">x</span>): <span class="title">any</span> </span>&#123;</span><br><span class="line">    <span class="comment">// Check to see if we're working with an object/array</span></span><br><span class="line">    <span class="comment">// if so, they gave us the deck and we'll pick the card</span></span><br><span class="line">    <span class="keyword">if</span> (<span class="keyword">typeof</span> x == <span class="string">"object"</span>) &#123;</span><br><span class="line">        <span class="keyword">let</span> pickedCard = <span class="built_in">Math</span>.floor(<span class="built_in">Math</span>.random() * x.length);</span><br><span class="line">        <span class="keyword">return</span> pickedCard;</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="comment">// Otherwise just let them pick the card</span></span><br><span class="line">    <span class="keyword">else</span> <span class="keyword">if</span> (<span class="keyword">typeof</span> x == <span class="string">"number"</span>) &#123;</span><br><span class="line">        <span class="keyword">let</span> pickedSuit = <span class="built_in">Math</span>.floor(x / <span class="number">13</span>);</span><br><span class="line">        <span class="keyword">return</span> &#123; suit: suits[pickedSuit], card: x % <span class="number">13</span> &#125;;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="keyword">let</span> myDeck = [&#123; suit: <span class="string">"diamonds"</span>, card: <span class="number">2</span> &#125;, &#123; suit: <span class="string">"spades"</span>, card: <span class="number">10</span> &#125;, &#123; suit: <span class="string">"hearts"</span>, card: <span class="number">4</span> &#125;];</span><br><span class="line"><span class="keyword">let</span> pickedCard1 = myDeck[pickCard(myDeck)];</span><br><span class="line"><span class="built_in">console</span>.log(<span class="string">"card: "</span> + pickedCard1.card + <span class="string">" of "</span> + pickedCard1.suit);</span><br><span class="line"></span><br><span class="line"><span class="keyword">let</span> pickedCard2 = pickCard(<span class="number">15</span>);</span><br><span class="line"><span class="built_in">console</span>.log(<span class="string">"card: "</span> + pickedCard2.card + <span class="string">" of "</span> + pickedCard2.suit);</span><br></pre></td></tr></table></figure></li></ul><p>这样改变后，重载的pickCard函数在调用的时候会进行正确的类型检查。</p><p>为了让编译器能够选择正确的检查类型，它与JavaScript里的处理流程相似。 它查找重载列表，尝试使用第一个重载定义。 如果匹配的话就使用这个。 因此，在定义重载的时候，一定要把最精确的定义放在最前面。</p><p>注意，function pickCard(x): any并不是重载列表的一部分，因此这里只有两个重载：一个是接收对象另一个接收数字。 以其它参数调用 pickCard会产生错误。</p><h1 id="后记"><a href="#后记" class="headerlink" title="后记"></a>后记</h1><ul><li>这个就是我学习Ts的第五天的笔记，欢迎更多的同行大哥指导交流</li><li><a href="https://yhf7.github.io/" target="_blank" rel="noopener">欢迎进入我的博客</a>：<a href="https://yhf7.github.io/" target="_blank" rel="noopener">https://yhf7.github.io/</a></li><li>如果有什么侵权的话，请及时添加小编微信以及qq也可以来告诉小编（905477376微信qq通用），谢谢！</li></ul>]]></content>
      
      
      <categories>
          
          <category> TypeScript </category>
          
      </categories>
      
      
        <tags>
            
            <tag> TypeScript 笔记 </tag>
            
        </tags>
      
    </entry>
    
    <entry>
      <title>色表/色彩搭配网址大全</title>
      <link href="/2019/03/18/%E9%A2%9C%E8%89%B2%E6%90%9C%E9%9B%86/"/>
      <url>/2019/03/18/%E9%A2%9C%E8%89%B2%E6%90%9C%E9%9B%86/</url>
      
        <content type="html"><![CDATA[<link rel="stylesheet" class="aplayer-secondary-style-marker" href="/assets/css/APlayer.min.css"><script src="/assets/js/APlayer.min.js" class="aplayer-secondary-script-marker"></script><h2 id="十六进制色表1-https-blog-csdn-net-jockerscolor-article-details-69255346"><a href="#十六进制色表1-https-blog-csdn-net-jockerscolor-article-details-69255346" class="headerlink" title="十六进制色表1:https://blog.csdn.net/jockerscolor/article/details/69255346"></a><a href="https://blog.csdn.net/jockerscolor/article/details/69255346" target="_blank" rel="noopener">十六进制色表1</a>:<a href="https://blog.csdn.net/jockerscolor/article/details/69255346" target="_blank" rel="noopener">https://blog.csdn.net/jockerscolor/article/details/69255346</a></h2><h2 id="十六进制色表2-https-blog-csdn-net-binglan520-article-details-56288524"><a href="#十六进制色表2-https-blog-csdn-net-binglan520-article-details-56288524" class="headerlink" title="十六进制色表2:https://blog.csdn.net/binglan520/article/details/56288524"></a><a href="https://blog.csdn.net/binglan520/article/details/56288524" target="_blank" rel="noopener">十六进制色表2</a>:<a href="https://blog.csdn.net/binglan520/article/details/56288524" target="_blank" rel="noopener">https://blog.csdn.net/binglan520/article/details/56288524</a></h2><h2 id="十六进制颜色码表图-https-encycolorpedia-cn"><a href="#十六进制颜色码表图-https-encycolorpedia-cn" class="headerlink" title="十六进制颜色码表图:https://encycolorpedia.cn/"></a><a href="https://encycolorpedia.cn/" target="_blank" rel="noopener">十六进制颜色码表图</a>:<a href="https://encycolorpedia.cn/" target="_blank" rel="noopener">https://encycolorpedia.cn/</a></h2><h2 id="颜色渐变-https-uigradients-com-Snapchat"><a href="#颜色渐变-https-uigradients-com-Snapchat" class="headerlink" title="颜色渐变:https://uigradients.com/#Snapchat"></a><a href="https://uigradients.com/#Snapchat" target="_blank" rel="noopener">颜色渐变</a>:<a href="https://uigradients.com/#Snapchat" target="_blank" rel="noopener">https://uigradients.com/#Snapchat</a></h2><h2 id="色彩搭配-https-www-webdesignrankings-com-resources-lolcolors"><a href="#色彩搭配-https-www-webdesignrankings-com-resources-lolcolors" class="headerlink" title="色彩搭配:https://www.webdesignrankings.com/resources/lolcolors/"></a><a href="https://www.webdesignrankings.com/resources/lolcolors/" target="_blank" rel="noopener">色彩搭配</a>:<a href="https://www.webdesignrankings.com/resources/lolcolors/" target="_blank" rel="noopener">https://www.webdesignrankings.com/resources/lolcolors/</a></h2>]]></content>
      
      
      <categories>
          
          <category> Css </category>
          
      </categories>
      
      
        <tags>
            
            <tag> 色彩搭配 </tag>
            
        </tags>
      
    </entry>
    
    <entry>
      <title>今日份实战笔记</title>
      <link href="/2019/03/17/2019-03-17/"/>
      <url>/2019/03/17/2019-03-17/</url>
      
        <content type="html"><![CDATA[<link rel="stylesheet" class="aplayer-secondary-style-marker" href="/assets/css/APlayer.min.css"><script src="/assets/js/APlayer.min.js" class="aplayer-secondary-script-marker"></script><h1 id="前言"><a href="#前言" class="headerlink" title="前言"></a>前言</h1><ul><li>小程序课程表的一些需求</li><li>实现它所用到的一些知识</li><li>实现方案的决择</li><li>数组的截取/对象的对比/时间的封装/随机函数的运用</li></ul><h1 id="记录"><a href="#记录" class="headerlink" title="记录"></a>记录</h1><h2 id="动态生成颜色"><a href="#动态生成颜色" class="headerlink" title="动态生成颜色"></a>动态生成颜色</h2><ul><li>随机颜色生成有两种方法，一种是写一个数组把颜色放进去随机输出，另外一种就是用js动态生成</li><li>在数量不能控制时选择第二个</li><li>但是生成的颜色不好控制，有些不好看，最后我还是选择了方法一<h3 id="js实现随机生成颜色"><a href="#js实现随机生成颜色" class="headerlink" title="js实现随机生成颜色"></a>js实现随机生成颜色</h3></li><li>这个是本来想做一个课程表课程的变色</li><li>先看看收集了几个封装好的js函数</li><li>我比较喜欢方法3<figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">//颜色对象,方法1 rgba</span></span><br><span class="line"><span class="function"><span class="keyword">function</span> <span class="title">Color</span>(<span class="params"></span>)</span>&#123;</span><br><span class="line">    <span class="keyword">this</span>.r = <span class="built_in">Math</span>.floor(<span class="built_in">Math</span>.random()*<span class="number">255</span>);</span><br><span class="line">    <span class="keyword">this</span>.g = <span class="built_in">Math</span>.floor(<span class="built_in">Math</span>.random()*<span class="number">255</span>);</span><br><span class="line">    <span class="keyword">this</span>.b = <span class="built_in">Math</span>.floor(<span class="built_in">Math</span>.random()*<span class="number">255</span>);</span><br><span class="line">    <span class="keyword">this</span>.color = <span class="string">'rgba('</span>+ <span class="keyword">this</span>.r +<span class="string">','</span>+ <span class="keyword">this</span>.g +<span class="string">','</span>+ <span class="keyword">this</span>.b +<span class="string">',0.8)'</span>;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="comment">// 方法2 十六进制</span></span><br><span class="line"><span class="comment">// arguments这个在es5开始不能用了</span></span><br><span class="line"><span class="keyword">var</span> getRandomColor = <span class="function"><span class="keyword">function</span>(<span class="params"></span>)</span>&#123;    </span><br><span class="line">    <span class="keyword">return</span>  <span class="string">'#'</span> + (<span class="function"><span class="keyword">function</span>(<span class="params">color</span>)</span>&#123;    </span><br><span class="line">         <span class="keyword">return</span> (color +=  <span class="string">'0123456789abcdef'</span>[<span class="built_in">Math</span>.floor(<span class="built_in">Math</span>.random()*<span class="number">16</span>)])    </span><br><span class="line">         &amp;&amp; (color.length == <span class="number">6</span>) ?  color : <span class="built_in">arguments</span>.callee(color);    </span><br><span class="line">    &#125;)(<span class="string">''</span>);    </span><br><span class="line"> &#125; </span><br><span class="line"></span><br><span class="line"><span class="comment">// 方法3 还是十六进制</span></span><br><span class="line"><span class="keyword">var</span> getRandomColor = <span class="function"><span class="keyword">function</span>(<span class="params"></span>)</span>&#123;</span><br><span class="line">  <span class="keyword">return</span> <span class="string">'#'</span>+(<span class="string">'00000'</span>+ (<span class="built_in">Math</span>.random()*<span class="number">0x1000000</span>&lt;&lt;<span class="number">0</span>).toString(<span class="number">16</span>)).substr(<span class="number">-6</span>); </span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure></li></ul><hr><ul><li>当我配置到小程序里面我发现我自己错了，并不是说方法不好是生成出来的颜色并不是很好看</li></ul><h3 id="数组法动态生成颜色-数组截取-随机数"><a href="#数组法动态生成颜色-数组截取-随机数" class="headerlink" title="数组法动态生成颜色/数组截取/随机数"></a>数组法动态生成颜色/数组截取/随机数</h3><ul><li>平时都会用的比较多的Math数学方法，然而我还是不记得着么写随机数最后也是看js的案例</li><li>定义数组，随机获取，随机数，数组的截取，对象的比对，三目的运用<figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">// 记录颜色匹配对象</span></span><br><span class="line"><span class="keyword">let</span> colorObj = &#123;&#125;;</span><br><span class="line"><span class="comment">// 颜色</span></span><br><span class="line"><span class="keyword">let</span> orArrays = [<span class="string">"#FF3399"</span>, <span class="string">"#CC33FF"</span>, <span class="string">"#33CCFF"</span>, <span class="string">"#ff8936"</span>, <span class="string">"#00e500"</span>, <span class="string">"#1bd1a5"</span>, <span class="string">"#ff4e20"</span>, <span class="string">"#789262"</span>, <span class="string">"#70f3ff"</span>, <span class="string">"#c9dd22"</span>];</span><br><span class="line"><span class="comment">// 判断添加颜色,二维数组，使用两次foreach</span></span><br><span class="line">dCourse.forEach(<span class="function">(<span class="params">e</span>) =&gt;</span> &#123;</span><br><span class="line">    e.forEach(<span class="function">(<span class="params">data</span>) =&gt;</span> &#123;</span><br><span class="line">    <span class="keyword">if</span> (data.sites != <span class="string">""</span>) &#123;</span><br><span class="line">        <span class="comment">// 通过对象的判断，没有出现过的给一个随机颜色，相同的课程使用相同的颜色</span></span><br><span class="line">        <span class="comment">// 这里使用了随机数也是用了数组的截取splice</span></span><br><span class="line">        colorObj[data.name] ? data.Color = colorObj[data.name] : data.Color = colorObj[data.name] = orArrays.splice(<span class="built_in">Math</span>.round(<span class="built_in">Math</span>.random() * orArrays.length - <span class="number">1</span>), <span class="number">1</span>);</span><br><span class="line">    &#125;</span><br><span class="line">    &#125;)</span><br><span class="line">&#125;)</span><br></pre></td></tr></table></figure></li></ul><h2 id="使用封装好的时间函数写业务"><a href="#使用封装好的时间函数写业务" class="headerlink" title="使用封装好的时间函数写业务"></a>使用封装好的时间函数写业务</h2><ul><li>动态随机生成颜色每一次都替换，影响体验</li><li>所以把它固定起来给个限定时间</li><li>想要比对首先要把时间获取出来才好比对<figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br></pre></td><td class="code"><pre><span class="line"></span><br><span class="line"><span class="comment">/*</span></span><br><span class="line"><span class="comment">业务实现</span></span><br><span class="line"><span class="comment">*/</span></span><br><span class="line">get () &#123;</span><br><span class="line">    <span class="comment">// 今天</span></span><br><span class="line">    <span class="keyword">let</span> date = <span class="keyword">this</span>.GetDateStr(<span class="number">0</span>)</span><br><span class="line">    <span class="comment">// 缓存期限</span></span><br><span class="line">    <span class="keyword">let</span> time = wx.getStorageSync(<span class="string">"d_time"</span>)</span><br><span class="line">    </span><br><span class="line">    <span class="comment">// 判断第一次和过期清空颜色对象和过期时间</span></span><br><span class="line">    <span class="keyword">if</span> (time == <span class="string">""</span> || time &lt; date) &#123;</span><br><span class="line">        <span class="keyword">let</span> d_time = <span class="keyword">this</span>.GetDateStr(<span class="number">6</span>)</span><br><span class="line">        wx.setStorageSync(<span class="string">"colorObj"</span>, &#123;&#125;)</span><br><span class="line">        wx.setStorageSync(<span class="string">"d_time"</span>, d_time)</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="comment">// 记录颜色匹配对象，获取缓存中的数据</span></span><br><span class="line">    <span class="keyword">let</span> colorObj = wx.getStorageSync(<span class="string">"colorObj"</span>);</span><br><span class="line"></span><br><span class="line">    <span class="comment">// 判断添加颜色</span></span><br><span class="line">    dCourse.forEach(<span class="function">(<span class="params">e</span>) =&gt;</span> &#123;</span><br><span class="line">        e.forEach(<span class="function">(<span class="params">data</span>) =&gt;</span> &#123;</span><br><span class="line">        <span class="keyword">if</span> (data.sites != <span class="string">""</span>) &#123;</span><br><span class="line">            colorObj[data.name] ? data.Color = colorObj[data.name] : data.Color = colorObj[data.name] = orArrays.splice(<span class="built_in">Math</span>.round(<span class="built_in">Math</span>.random() * orArrays.length - <span class="number">1</span>), <span class="number">1</span>);</span><br><span class="line">        &#125;</span><br><span class="line">        &#125;)</span><br><span class="line">    &#125;)</span><br><span class="line"></span><br><span class="line">    <span class="comment">// 最后无论改没改都更新一下数据，也可以实在只要过期更新</span></span><br><span class="line">    wx.setStorageSync(<span class="string">"colorObj"</span>, colorObj);</span><br><span class="line">&#125;,</span><br><span class="line">    <span class="comment">/**</span></span><br><span class="line"><span class="comment">   * 时间封装</span></span><br><span class="line"><span class="comment">   * @param:</span></span><br><span class="line"><span class="comment">   * AddDayCount &#123;Number&#125; 天数 -1为昨日  0为今日 1为明日 以此类推</span></span><br><span class="line"><span class="comment">   * return y-m-d</span></span><br><span class="line"><span class="comment">   */</span></span><br><span class="line">  GetDateStr (AddDayCount) &#123;</span><br><span class="line">    <span class="keyword">var</span> dd = <span class="keyword">new</span> <span class="built_in">Date</span>();</span><br><span class="line">    dd.setDate(dd.getDate() + AddDayCount);<span class="comment">//获取AddDayCount天后的日期</span></span><br><span class="line">    <span class="keyword">var</span> y = dd.getFullYear();</span><br><span class="line">    <span class="keyword">var</span> m = dd.getMonth() + <span class="number">1</span>;<span class="comment">//获取当前月份的日期</span></span><br><span class="line">    <span class="keyword">var</span> d = dd.getDate();</span><br><span class="line">    <span class="keyword">return</span> y + <span class="string">"-"</span> + m + <span class="string">"-"</span> + d;</span><br><span class="line">  &#125;</span><br></pre></td></tr></table></figure></li></ul><h1 id="后记"><a href="#后记" class="headerlink" title="后记"></a>后记</h1><ul><li>这就是我今天的实战笔记，欢迎添加微信qq交流学习</li><li><a href="https://yhf7.github.io/" target="_blank" rel="noopener">欢迎进入我的博客</a>：<a href="https://yhf7.github.io/" target="_blank" rel="noopener">https://yhf7.github.io/</a></li><li>如果有什么侵权的话，请及时添加小编微信以及qq也可以来告诉小编（905477376微信qq通用），谢谢！</li></ul>]]></content>
      
      
      <categories>
          
          <category> JavaScript </category>
          
      </categories>
      
      
        <tags>
            
            <tag> js笔记 </tag>
            
        </tags>
      
    </entry>
    
    <entry>
      <title>解决朋友问的拖拽文件后拖拽图片无法显示</title>
      <link href="/2019/03/17/h5%E5%A4%9A%E6%AC%A1%E6%8B%96%E6%8B%BD%E6%98%BE%E7%A4%BA/"/>
      <url>/2019/03/17/h5%E5%A4%9A%E6%AC%A1%E6%8B%96%E6%8B%BD%E6%98%BE%E7%A4%BA/</url>
      
        <content type="html"><![CDATA[<link rel="stylesheet" class="aplayer-secondary-style-marker" href="/assets/css/APlayer.min.css"><script src="/assets/js/APlayer.min.js" class="aplayer-secondary-script-marker"></script><h1 id="前言"><a href="#前言" class="headerlink" title="前言"></a>前言</h1><ul><li>这是一个朋友的作业，做一个图片与文件拖拽显示页面的案例</li><li>主要问题是拖了文字后再拖拽图片报错无法显示</li></ul><h1 id="bug-ko之旅"><a href="#bug-ko之旅" class="headerlink" title="bug ko之旅"></a>bug ko之旅</h1><h3 id="错误排查-（看报错）"><a href="#错误排查-（看报错）" class="headerlink" title="错误排查 （看报错）"></a>错误排查 （看报错）</h3><ul><li>知道有报错我们就直接操作拖文本再拖图片</li><li>果然出现了错误，具体看图片：<br><img src="/js/t1.png" alt="错1"></li></ul><hr><ul><li>查看结构（证实经验论证）<br><img src="/js/t2.png" alt="错2"></li></ul><h3 id="代码排查-（找出错误源）"><a href="#代码排查-（找出错误源）" class="headerlink" title="代码排查 （找出错误源）"></a>代码排查 （找出错误源）</h3><ul><li>打开代码先找到文本的代码，因为是文本后出错的</li><li>为什么不是看img的操作先，因为连续的图片赋值是没有问题</li><li>是在文件后才会出错，所以查看一下文本的操作</li></ul><p><img src="/js/t3.png" alt="错3"></p><h3 id="解决方案"><a href="#解决方案" class="headerlink" title="解决方案"></a>解决方案</h3><ul><li>本来是想直接改变文本的赋值的，但是想到还是需要覆盖所有的内容所以我改变了</li><li>选择改变img的赋值那一段</li></ul><hr><h4 id="解决1"><a href="#解决1" class="headerlink" title="解决1"></a>解决1</h4><ul><li>清空div内容，创建添加节点<br><img src="/js/t4.png" alt="解1"></li></ul><hr><h4 id="解决2"><a href="#解决2" class="headerlink" title="解决2"></a>解决2</h4><ul><li>对第一版的升级</li><li>个人觉得这样可以提升性能</li><li>避免每一次都操作dom创建节点<br><img src="/js/t5.png" alt="解2"></li></ul><h1 id="后记"><a href="#后记" class="headerlink" title="后记"></a>后记</h1><ul><li>这就是我对h5案例编写报错的查看、排查、解决，或许我这个不是最优的办法你的比我更好，欢迎添加微信qq交流学习</li><li><a href="https://yhf7.github.io/" target="_blank" rel="noopener">欢迎进入我的博客</a>：<a href="https://yhf7.github.io/" target="_blank" rel="noopener">https://yhf7.github.io/</a></li><li>如果有什么侵权的话，请及时添加小编微信以及qq也可以来告诉小编（905477376微信qq通用），谢谢！</li></ul>]]></content>
      
      
      <categories>
          
          <category> JavaScript </category>
          
      </categories>
      
      
        <tags>
            
            <tag> js笔记/案例 </tag>
            
        </tags>
      
    </entry>
    
    <entry>
      <title>Android 学习笔记 组件/用法/绑定（学校课程）</title>
      <link href="/2019/03/16/%E5%A4%A7%E4%BA%8C%E4%B8%8BAndroid%20%E7%BB%84%E4%BB%B6/"/>
      <url>/2019/03/16/%E5%A4%A7%E4%BA%8C%E4%B8%8BAndroid%20%E7%BB%84%E4%BB%B6/</url>
      
        <content type="html"><![CDATA[<link rel="stylesheet" class="aplayer-secondary-style-marker" href="/assets/css/APlayer.min.css"><script src="/assets/js/APlayer.min.js" class="aplayer-secondary-script-marker"></script><h1 id="前言"><a href="#前言" class="headerlink" title="前言"></a>前言</h1><ul><li><a href="https://github.com/YHF7/Android" target="_blank" rel="noopener">案例存放地</a>:<a href="https://github.com/YHF7/Android" target="_blank" rel="noopener">https://github.com/YHF7/Android</a></li><li>使用的软件是 Android Studio</li></ul><h1 id="组件"><a href="#组件" class="headerlink" title="组件"></a>组件</h1><h2 id="Button-TextView"><a href="#Button-TextView" class="headerlink" title="Button/TextView"></a>Button/TextView</h2><ul><li>id</li><li>text 文本</li><li>textSize 大小</li><li>dp 为单位</li><li>background 背景色<figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><span class="line">&lt;Button</span><br><span class="line">        android:id=<span class="string">"@+id/btn1"</span></span><br><span class="line">        android:layout_width=<span class="string">"wrap_content"</span></span><br><span class="line">        android:layout_height=<span class="string">"wrap_content"</span></span><br><span class="line">        android:textSize=<span class="string">"30dp"</span></span><br><span class="line">        android:background=<span class="string">"#00f"</span></span><br><span class="line">        android:text=<span class="string">"2"</span>/&gt;</span><br></pre></td></tr></table></figure></li></ul><h2 id="EditText-文本字段"><a href="#EditText-文本字段" class="headerlink" title="EditText 文本字段"></a>EditText 文本字段</h2><ul><li>这个用法和上面的都是一样</li><li>这里输入文字是用hint不是text</li><li>不过可以使用inputType属性控制 <figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line">&lt;EditText</span><br><span class="line">    android:id=<span class="string">"@+id/edit1"</span></span><br><span class="line">    android:layout_width=<span class="string">"wrap_content"</span></span><br><span class="line">    android:layout_height=<span class="string">"wrap_content"</span></span><br><span class="line">    android:hint=<span class="string">"请输入密码"</span></span><br><span class="line">    android:inputType=<span class="string">"textPassword"</span>/&gt;</span><br></pre></td></tr></table></figure></li></ul><h2 id="AutoCompleteTextView-自动提示"><a href="#AutoCompleteTextView-自动提示" class="headerlink" title="AutoCompleteTextView 自动提示"></a>AutoCompleteTextView 自动提示</h2><ul><li>用法基本相同</li><li>completionHint 默认显示</li><li>completionThreshold 最少输入多少个字开始搜索<figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><span class="line">&lt;AutoCompleteTextView</span><br><span class="line">        android:id=<span class="string">"@+id/act"</span></span><br><span class="line">        android:layout_width=<span class="string">"150dp"</span></span><br><span class="line">        android:layout_height=<span class="string">"wrap_content"</span></span><br><span class="line">        android:completionHint=<span class="string">"请输入搜索内容"</span></span><br><span class="line">        android:completionThreshold=<span class="string">"1"</span></span><br><span class="line">        /&gt;</span><br></pre></td></tr></table></figure></li></ul><h1 id="绑定组件属性控制-（app-src-main-java-com-example-yhf-tablelayout-TableLayout）后面那一段就很的项目名有关联了"><a href="#绑定组件属性控制-（app-src-main-java-com-example-yhf-tablelayout-TableLayout）后面那一段就很的项目名有关联了" class="headerlink" title="绑定组件属性控制 （app/src/main/java/com.example.yhf.tablelayout/TableLayout）后面那一段就很的项目名有关联了"></a>绑定组件属性控制 （app/src/main/java/com.example.yhf.tablelayout/TableLayout）后面那一段就很的项目名有关联了</h1><ul><li>每一个项目里面都会有一个控制这个程序的</li><li>我们现在来吧上面几个定义的组件给他绑定一下</li></ul><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br></pre></td><td class="code"><pre><span class="line"></span><br><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">TableLayout</span> <span class="keyword">extends</span> <span class="title">AppCompatActivity</span> </span>&#123;</span><br><span class="line"></span><br><span class="line">    <span class="comment">// 1. 声明控件对象 最好是和自己定义的id相同</span></span><br><span class="line">    TextView text1;</span><br><span class="line">    EditText edit1;</span><br><span class="line">    AutoCompleteTextView act;</span><br><span class="line"></span><br><span class="line">    <span class="meta">@Override</span></span><br><span class="line">    <span class="function"><span class="keyword">protected</span> <span class="keyword">void</span> <span class="title">onCreate</span><span class="params">(Bundle savedInstanceState)</span> </span>&#123;</span><br><span class="line">        <span class="keyword">super</span>.onCreate(savedInstanceState);</span><br><span class="line"></span><br><span class="line">        <span class="comment">// 这个也很关键，这个表示设置拿一个视图文件</span></span><br><span class="line">        <span class="comment">// 我这个就是app/src/main/res/layout.dem03.xml</span></span><br><span class="line">        <span class="comment">// R为res，省去了前面的部分</span></span><br><span class="line">        setContentView(R.layout.demo03);</span><br><span class="line"></span><br><span class="line">        <span class="comment">//2. 通过id建立关系</span></span><br><span class="line">        <span class="comment">// 组件名通过id搜索 R里面的id名为text1</span></span><br><span class="line">        <span class="comment">// R说的就是res</span></span><br><span class="line">        text1=(TextView)findViewById(R.id.text1);</span><br><span class="line">        edit1=(EditText)findViewById(R.id.edit1);</span><br><span class="line">        act=(AutoCompleteTextView)findViewById(R.id.act);</span><br><span class="line"></span><br><span class="line">        <span class="comment">// 定义一个数组</span></span><br><span class="line">        String[] data = <span class="keyword">new</span> String[]&#123;<span class="string">"China"</span>,<span class="string">"Chiness"</span>,<span class="string">"Check"</span>&#125;;</span><br><span class="line">        <span class="comment">// 遍历到这个组件里面</span></span><br><span class="line">        ArrayAdapter&lt;String&gt; adapter = <span class="keyword">new</span> ArrayAdapter&lt;String&gt;(<span class="keyword">this</span>,android.R.layout.simple_list_item_1,data);</span><br><span class="line">        <span class="comment">// 最后添加到id里面</span></span><br><span class="line">        act.setAdapter(adapter);</span><br><span class="line"></span><br><span class="line"><span class="comment">//        edit1.setText("我是输入的数据");</span></span><br><span class="line">        <span class="comment">// 测试输出用的</span></span><br><span class="line">        Log.i(<span class="string">"abc"</span>, <span class="string">"onCreate: dddd"</span>);</span><br><span class="line"></span><br><span class="line">        <span class="comment">// 改变text1的文本，背景色，字体大小</span></span><br><span class="line">        text1.setText(<span class="string">"你个菜逼"</span>);</span><br><span class="line">        text1.setTextColor(Color.CYAN);</span><br><span class="line">        text1.setTextSize(<span class="number">30</span>);</span><br><span class="line">        </span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h1 id="CheckBox复选框"><a href="#CheckBox复选框" class="headerlink" title="CheckBox复选框"></a>CheckBox复选框</h1><ul><li>CheckBox和Button一样，也是一种古老的控件，它的优点在于，不用用户去填写具体的信息，只需轻轻点击，缺点在于只有“是”和“否”两种情况，</li><li>Checked属性是CheckBox最重要的属性之一，改变它的方式有三种：<br>1、XML中申明 2、代码动态改变 3、用户触摸<figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><span class="line">&lt;CheckBox </span><br><span class="line">       android:id=<span class="string">"@+id/cb"</span></span><br><span class="line">       android:layout_width=<span class="string">"wrap_content"</span> </span><br><span class="line">       android:layout_height=<span class="string">"wrap_content"</span></span><br><span class="line">       android:checked=<span class="string">"false"</span></span><br><span class="line">       android:text=<span class="string">"已婚"</span></span><br><span class="line">       /&gt;</span><br></pre></td></tr></table></figure></li></ul><hr><p>它的改变将会触发OnCheckedChange事件，而您可以对应的使用OnCheckedChangeListener监听器来监听这个事件，<br><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">//获取CheckBox实例</span></span><br><span class="line">CheckBox cb = (CheckBox)<span class="keyword">this</span>.findViewById(R.id.cb);</span><br><span class="line"><span class="comment">//绑定监听器</span></span><br><span class="line">cb.setOnCheckedChangeListener(<span class="keyword">new</span> OnCheckedChangeListener() &#123;</span><br><span class="line">            </span><br><span class="line">            <span class="meta">@Override</span></span><br><span class="line">            <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">onCheckedChanged</span><span class="params">(CompoundButton arg0, <span class="keyword">boolean</span> arg1)</span> </span>&#123;</span><br><span class="line">                <span class="comment">// TODO Auto-generated method stub</span></span><br><span class="line">                Toast.makeText(MyActivity.<span class="keyword">this</span>, <span class="string">"选中了"</span>:<span class="string">"取消了选中"</span> , Toast.LENGTH_LONG).show();</span><br><span class="line">            &#125;</span><br><span class="line">        &#125;);</span><br></pre></td></tr></table></figure></p><h3 id="选择显示小案例"><a href="#选择显示小案例" class="headerlink" title="选择显示小案例"></a>选择显示小案例</h3><ul><li>页面<br><img src="/Android/a2.png" alt="/Android"></li><li>控制<br><img src="/Android/a3.png" alt="/Android"></li><li>效果<br><img src="/Android/a1.png" alt="/Android"></li></ul>]]></content>
      
      
      <categories>
          
          <category> Android </category>
          
      </categories>
      
      
        <tags>
            
            <tag> Android 笔记 </tag>
            
        </tags>
      
    </entry>
    
    <entry>
      <title>Js回顾 温故而知新 可以为师矣</title>
      <link href="/2019/03/16/%E5%9B%9E%E9%A1%BEjs/"/>
      <url>/2019/03/16/%E5%9B%9E%E9%A1%BEjs/</url>
      
        <content type="html"><![CDATA[<link rel="stylesheet" class="aplayer-secondary-style-marker" href="/assets/css/APlayer.min.css"><script src="/assets/js/APlayer.min.js" class="aplayer-secondary-script-marker"></script><h1 id="前言"><a href="#前言" class="headerlink" title="前言"></a>前言</h1><ul><li>每一次的回头从会看到不同的东西</li><li>不同的体会，更加深入的理解</li></ul><h1 id="先看看-定时器延时每一秒输出一个数字0-4-（看到别人的公众号发过）"><a href="#先看看-定时器延时每一秒输出一个数字0-4-（看到别人的公众号发过）" class="headerlink" title="先看看 定时器延时每一秒输出一个数字0-4 （看到别人的公众号发过）"></a>先看看 定时器延时每一秒输出一个数字0-4 （看到别人的公众号发过）</h1><ul><li>setTimeout 是一个延时执行的定时器（异步）</li><li>在var中使用，因为作用域相同所以最后赋值都是一样</li><li>let的好处体现</li><li>闭包</li><li>async await （异步中使用同步方法）</li></ul><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">// 错误用例</span></span><br><span class="line"><span class="comment">// 计算机的执行速度是非常快的，延时1秒早全部执行完了</span></span><br><span class="line"><span class="comment">// var 作用域相同，循环完后i的值为6，最后才输出所以为6</span></span><br><span class="line"><span class="keyword">for</span> (<span class="keyword">var</span> i = <span class="number">0</span>; i &lt; <span class="number">5</span>; i++) &#123;</span><br><span class="line">    setTimeout(<span class="function"><span class="params">()</span> =&gt;</span> &#123;</span><br><span class="line">        <span class="built_in">console</span>.log(<span class="keyword">new</span> <span class="built_in">Date</span>,i)</span><br><span class="line">    &#125;, <span class="number">1000</span>);</span><br><span class="line">&#125;</span><br><span class="line"><span class="comment">// 执行结果</span></span><br><span class="line"><span class="number">2019</span><span class="number">-03</span><span class="number">-15</span>T07:<span class="number">18</span>:<span class="number">30.917</span>Z <span class="number">5</span></span><br><span class="line"><span class="number">2019</span><span class="number">-03</span><span class="number">-15</span>T07:<span class="number">18</span>:<span class="number">30.921</span>Z <span class="number">5</span></span><br><span class="line"><span class="number">2019</span><span class="number">-03</span><span class="number">-15</span>T07:<span class="number">18</span>:<span class="number">30.922</span>Z <span class="number">5</span></span><br><span class="line"><span class="number">2019</span><span class="number">-03</span><span class="number">-15</span>T07:<span class="number">18</span>:<span class="number">30.922</span>Z <span class="number">5</span></span><br><span class="line"><span class="number">2019</span><span class="number">-03</span><span class="number">-15</span>T07:<span class="number">18</span>:<span class="number">30.922</span>Z <span class="number">5</span></span><br></pre></td></tr></table></figure><h2 id="解决1-熟悉es6的都知道-let是个好东西"><a href="#解决1-熟悉es6的都知道-let是个好东西" class="headerlink" title="解决1 熟悉es6的都知道 let是个好东西"></a>解决1 熟悉es6的都知道 let是个好东西</h2><ul><li>只要把var改let这个问题就解决了</li><li>因为let的i每一次都会生成一个作用域相隔开<figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">for</span> (<span class="keyword">let</span> i = <span class="number">0</span>; i &lt; <span class="number">5</span>; i++) &#123;</span><br><span class="line">    setTimeout(<span class="function"><span class="params">()</span> =&gt;</span> &#123;</span><br><span class="line">        <span class="built_in">console</span>.log(<span class="keyword">new</span> <span class="built_in">Date</span>,i)</span><br><span class="line">    &#125;, <span class="number">1000</span>);</span><br><span class="line">&#125;</span><br><span class="line"><span class="comment">// 执行结果</span></span><br><span class="line"><span class="number">2019</span><span class="number">-03</span><span class="number">-15</span>T07:<span class="number">19</span>:<span class="number">21.106</span>Z <span class="number">0</span></span><br><span class="line"><span class="number">2019</span><span class="number">-03</span><span class="number">-15</span>T07:<span class="number">19</span>:<span class="number">21.110</span>Z <span class="number">1</span></span><br><span class="line"><span class="number">2019</span><span class="number">-03</span><span class="number">-15</span>T07:<span class="number">19</span>:<span class="number">21.111</span>Z <span class="number">2</span></span><br><span class="line"><span class="number">2019</span><span class="number">-03</span><span class="number">-15</span>T07:<span class="number">19</span>:<span class="number">21.111</span>Z <span class="number">3</span></span><br><span class="line"><span class="number">2019</span><span class="number">-03</span><span class="number">-15</span>T07:<span class="number">19</span>:<span class="number">21.111</span>Z <span class="number">4</span></span><br></pre></td></tr></table></figure></li></ul><h2 id="解决2-熟悉闭包的同学-这个也不是问题"><a href="#解决2-熟悉闭包的同学-这个也不是问题" class="headerlink" title="解决2 熟悉闭包的同学 这个也不是问题"></a>解决2 熟悉闭包的同学 这个也不是问题</h2><ul><li>每一次作为数据传进来不就可以了这也是一个不错的方法<figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">for</span> (<span class="keyword">var</span> i = <span class="number">0</span>; i &lt; <span class="number">5</span>; i++) &#123;</span><br><span class="line">    (<span class="function"><span class="params">j</span> =&gt;</span> &#123;</span><br><span class="line">        setTimeout(<span class="function"><span class="params">()</span> =&gt;</span> &#123;</span><br><span class="line">            <span class="built_in">console</span>.log(j);</span><br><span class="line">        &#125;, <span class="number">1000</span>);    </span><br><span class="line">    &#125;)(i)</span><br><span class="line">&#125;</span><br><span class="line"><span class="comment">// 执行结果</span></span><br><span class="line"><span class="number">2019</span><span class="number">-03</span><span class="number">-15</span>T07:<span class="number">21</span>:<span class="number">58.003</span>Z <span class="number">0</span></span><br><span class="line"><span class="number">2019</span><span class="number">-03</span><span class="number">-15</span>T07:<span class="number">21</span>:<span class="number">58.007</span>Z <span class="number">1</span></span><br><span class="line"><span class="number">2019</span><span class="number">-03</span><span class="number">-15</span>T07:<span class="number">21</span>:<span class="number">58.007</span>Z <span class="number">2</span></span><br><span class="line"><span class="number">2019</span><span class="number">-03</span><span class="number">-15</span>T07:<span class="number">21</span>:<span class="number">58.007</span>Z <span class="number">3</span></span><br><span class="line"><span class="number">2019</span><span class="number">-03</span><span class="number">-15</span>T07:<span class="number">21</span>:<span class="number">58.007</span>Z <span class="number">4</span></span><br></pre></td></tr></table></figure></li></ul><hr><h3 id="看看上面好像真的成功的但是再看看输出的时间其实还是未能实现每一秒输出一个，所有的数据都是在同一时间被执行出来，那能不能解决呢？看看下一个方法"><a href="#看看上面好像真的成功的但是再看看输出的时间其实还是未能实现每一秒输出一个，所有的数据都是在同一时间被执行出来，那能不能解决呢？看看下一个方法" class="headerlink" title="看看上面好像真的成功的但是再看看输出的时间其实还是未能实现每一秒输出一个，所有的数据都是在同一时间被执行出来，那能不能解决呢？看看下一个方法"></a>看看上面好像真的成功的但是再看看输出的时间其实还是未能实现每一秒输出一个，所有的数据都是在同一时间被执行出来，那能不能解决呢？看看下一个方法</h3><h2 id="解决3-Es7-async-await-实现同步（把异步的定时器限制住）"><a href="#解决3-Es7-async-await-实现同步（把异步的定时器限制住）" class="headerlink" title="解决3 Es7 async await 实现同步（把异步的定时器限制住）"></a>解决3 Es7 async await 实现同步（把异步的定时器限制住）</h2><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">const</span> sleep = <span class="function">(<span class="params">timeountMS</span>) =&gt;</span> <span class="keyword">new</span> <span class="built_in">Promise</span>(<span class="function">(<span class="params">resolve</span>) =&gt;</span> &#123;</span><br><span class="line">    setTimeout(resolve, timeountMS);</span><br><span class="line">&#125;);</span><br><span class="line"> </span><br><span class="line">(<span class="keyword">async</span> () =&gt; &#123;  <span class="comment">// 声明即执行的 async 函数表达式</span></span><br><span class="line">    <span class="keyword">for</span> (<span class="keyword">var</span> i = <span class="number">0</span>; i &lt; <span class="number">5</span>; i++) &#123;</span><br><span class="line">        <span class="comment">// await 同步操作阻止了要等待</span></span><br><span class="line">        <span class="keyword">await</span> sleep(<span class="number">1000</span>);</span><br><span class="line">        <span class="built_in">console</span>.log(<span class="keyword">new</span> <span class="built_in">Date</span>, i);</span><br><span class="line">    &#125;</span><br><span class="line"> </span><br><span class="line">    <span class="keyword">await</span> sleep(<span class="number">1000</span>);</span><br><span class="line">    <span class="built_in">console</span>.log(<span class="keyword">new</span> <span class="built_in">Date</span>, i);</span><br><span class="line">&#125;)();</span><br><span class="line"><span class="comment">// 执行结果</span></span><br><span class="line"><span class="number">2019</span><span class="number">-03</span><span class="number">-15</span>T07:<span class="number">23</span>:<span class="number">21.193</span>Z <span class="number">0</span></span><br><span class="line"><span class="number">2019</span><span class="number">-03</span><span class="number">-15</span>T07:<span class="number">23</span>:<span class="number">22.198</span>Z <span class="number">1</span></span><br><span class="line"><span class="number">2019</span><span class="number">-03</span><span class="number">-15</span>T07:<span class="number">23</span>:<span class="number">23.202</span>Z <span class="number">2</span></span><br><span class="line"><span class="number">2019</span><span class="number">-03</span><span class="number">-15</span>T07:<span class="number">23</span>:<span class="number">24.207</span>Z <span class="number">3</span></span><br><span class="line"><span class="number">2019</span><span class="number">-03</span><span class="number">-15</span>T07:<span class="number">23</span>:<span class="number">25.207</span>Z <span class="number">4</span></span><br><span class="line"><span class="number">2019</span><span class="number">-03</span><span class="number">-15</span>T07:<span class="number">23</span>:<span class="number">26.208</span>Z <span class="number">5</span></span><br></pre></td></tr></table></figure><h1 id="数组去重复-（每一次看别人写的都比自己写的好学习起来）"><a href="#数组去重复-（每一次看别人写的都比自己写的好学习起来）" class="headerlink" title="数组去重复 （每一次看别人写的都比自己写的好学习起来）"></a>数组去重复 （每一次看别人写的都比自己写的好学习起来）</h1><ul><li>三目运算符运用</li><li>forEach</li><li>concat 数组合并</li><li>…arr es6解构<figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">// 多数组合并去重复</span></span><br><span class="line">test = <span class="function">(<span class="params">arr, ...arr2</span>) =&gt;</span> &#123;</span><br><span class="line">    <span class="comment">// 先是合并数组</span></span><br><span class="line">    <span class="keyword">let</span> array = arr.concat(...arr2);</span><br><span class="line">    <span class="comment">// 定义一个对象存储</span></span><br><span class="line">    <span class="keyword">let</span> obj = &#123;&#125;</span><br><span class="line">    <span class="comment">// 新数组</span></span><br><span class="line">    <span class="keyword">let</span> result = []</span><br><span class="line">    <span class="comment">// 循环遍历</span></span><br><span class="line">    array.forEach(<span class="function"><span class="params">item</span> =&gt;</span> &#123;</span><br><span class="line">        <span class="comment">// 三目运算符  判断是对象中存有，没有就吧值设为真 并且添加如数组</span></span><br><span class="line">        <span class="comment">// 这里为什么要是为真呢，如果出现数据是false的时候依然使用数据去存储这样就会出现问题了</span></span><br><span class="line">        obj[item] ? <span class="string">''</span> : (obj[item] = <span class="literal">true</span>) &amp;&amp; result.push(item)</span><br><span class="line">    &#125;)</span><br><span class="line">    <span class="keyword">return</span> result</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="keyword">let</span> sum = test([<span class="number">1</span>, <span class="number">2</span>, <span class="number">3</span>], [<span class="number">5</span>, <span class="number">6</span>,<span class="number">2</span>, <span class="number">3</span>], [<span class="number">4</span>, <span class="number">5</span>,<span class="number">6</span>, <span class="number">2</span>])</span><br><span class="line"><span class="built_in">console</span>.log(sum);</span><br><span class="line"><span class="comment">// 输出结果</span></span><br><span class="line">[ <span class="number">1</span>, <span class="number">2</span>, <span class="number">3</span>, <span class="number">5</span>, <span class="number">6</span>, <span class="number">4</span> ]</span><br></pre></td></tr></table></figure></li></ul><h2 id="Es6版-set-Map"><a href="#Es6版-set-Map" class="headerlink" title="Es6版 set Map"></a>Es6版 set Map</h2><ul><li>随着 ES6 的到来，去重的方法又有了进展，比如我们可以使用 Set 和 Map 数据结构，以 Set 为例，ES6 提供了新的数据结构 Set。它类似于数组，但是成员的值都是唯一的，没有重复的值</li></ul><ol><li><p>set</p><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">var</span> array = [<span class="number">1</span>, <span class="number">2</span>, <span class="number">1</span>, <span class="number">1</span>, <span class="string">'1'</span>];</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">function</span> <span class="title">unique</span>(<span class="params">array</span>) </span>&#123;</span><br><span class="line">   <span class="keyword">return</span> <span class="built_in">Array</span>.from(<span class="keyword">new</span> <span class="built_in">Set</span>(array));</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="built_in">console</span>.log(unique(array)); <span class="comment">// [1, 2, "1"]</span></span><br><span class="line"></span><br><span class="line"><span class="comment">// 再次简化</span></span><br><span class="line"><span class="function"><span class="keyword">function</span> <span class="title">unique</span>(<span class="params">array</span>) </span>&#123;</span><br><span class="line">    <span class="keyword">return</span> [...new <span class="built_in">Set</span>(array)];</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="comment">// 再简化</span></span><br><span class="line"><span class="keyword">var</span> unique = <span class="function">(<span class="params">a</span>) =&gt;</span> [...new <span class="built_in">Set</span>(a)]</span><br></pre></td></tr></table></figure></li><li><p>Map</p><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line"><span class="function"><span class="keyword">function</span> <span class="title">unique</span> (<span class="params">arr</span>) </span>&#123;</span><br><span class="line">    <span class="keyword">const</span> seen = <span class="keyword">new</span> <span class="built_in">Map</span>()</span><br><span class="line">    <span class="keyword">return</span> arr.filter(<span class="function">(<span class="params">a</span>) =&gt;</span> !seen.has(a) &amp;&amp; seen.set(a, <span class="number">1</span>))</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure></li></ol><h1 id="Promise-异步-回调地狱-async-await"><a href="#Promise-异步-回调地狱-async-await" class="headerlink" title="Promise 异步/回调地狱/async await"></a>Promise 异步/回调地狱/async await</h1><h2 id="Promise"><a href="#Promise" class="headerlink" title="Promise"></a>Promise</h2><ul><li>promise里面包含两个参数res,rej我喜欢用简写,一个是成功回调一个是失败回调</li><li>所以在我们调用时也是要输入两个回调函数的，一个成功执行，一个失败执行<figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">// 定义promisey异步函数</span></span><br><span class="line"><span class="keyword">const</span> sleep = <span class="function">(<span class="params">test</span>) =&gt;</span> <span class="keyword">new</span> <span class="built_in">Promise</span>(<span class="function">(<span class="params">res,rej</span>) =&gt;</span> &#123;</span><br><span class="line">    <span class="keyword">if</span> (test == <span class="number">1</span>) &#123;</span><br><span class="line">        res(<span class="string">'成功'</span>)</span><br><span class="line">    &#125; <span class="keyword">else</span> <span class="keyword">if</span> (test == <span class="number">0</span>) &#123;</span><br><span class="line">        res(<span class="string">'再次成功'</span>)</span><br><span class="line">    &#125; <span class="keyword">else</span> &#123;</span><br><span class="line">        rej(<span class="string">'失败了兄弟'</span>)</span><br><span class="line">    &#125;</span><br><span class="line">&#125;)</span><br><span class="line"></span><br><span class="line"><span class="comment">// 使用</span></span><br><span class="line"><span class="comment">// 调用传入参数 .then中有可以写入两个函数前面为成功的调用后面为失败时的调用</span></span><br><span class="line"><span class="comment">// 和上面是一一对应的</span></span><br><span class="line"><span class="comment">// 前面的参数等于 test  后面...then</span></span><br><span class="line">sleep(<span class="number">1</span>).then(<span class="function">(<span class="params">data</span>) =&gt;</span> &#123;</span><br><span class="line">    <span class="built_in">console</span>.log(data); <span class="comment">// 成功时获取到的数据</span></span><br><span class="line">&#125;, (err) =&gt; &#123;</span><br><span class="line">    <span class="built_in">console</span>.log(err); <span class="comment">// 错误时获取到的错误返回</span></span><br><span class="line">&#125;)</span><br><span class="line"><span class="comment">// 输出结果</span></span><br><span class="line">成功</span><br></pre></td></tr></table></figure></li></ul><h2 id="Promise-回调地狱"><a href="#Promise-回调地狱" class="headerlink" title="Promise 回调地狱"></a>Promise 回调地狱</h2><ul><li>很多时候我们都想在这个执行完毕后再去执行另外一个操作</li><li>在不影响后面的操作时，我们想到了使用Promise 异步</li><li>但是我们还不满足我们想在这个操作执行完毕再去执行另外一个操作</li><li>这个时候我们就会一个套一个的函数去写，这样就会似得代码非常的繁琐</li><li>Promise中实现回调地狱解决这个问题</li></ul><hr><ul><li>升级上面这个回调方法，实现回调地狱</li><li>在.then的后面再加.then方法就可以了</li><li>可以无限的去套用</li><li>虽然每个都有err但是只是输出报错没有去处理，回调地狱还是会往下走</li><li>后面的都会出错<figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br></pre></td><td class="code"><pre><span class="line">sleep(<span class="number">1</span>).then(<span class="function">(<span class="params">data</span>) =&gt;</span> &#123;</span><br><span class="line">    <span class="built_in">console</span>.log(data); <span class="comment">// 成功时获取到的数据</span></span><br><span class="line">    <span class="keyword">return</span> sleep(<span class="number">2</span>) <span class="comment">// 再次的执行异步函数</span></span><br><span class="line">&#125;, (err) =&gt; &#123;</span><br><span class="line">    <span class="built_in">console</span>.log(err); <span class="comment">// 错误时获取到的错误返回</span></span><br><span class="line">&#125;).then(<span class="function">(<span class="params">data</span>)=&gt;</span> &#123; <span class="comment">// 继续用.then接受</span></span><br><span class="line">    <span class="built_in">console</span>.log(data) <span class="comment">// 再次成功</span></span><br><span class="line">&#125;,(err) =&gt; &#123;</span><br><span class="line">    <span class="built_in">console</span>.log(err)</span><br><span class="line">&#125;)</span><br></pre></td></tr></table></figure></li></ul><hr><ul><li>catch属性解决你一切烦恼也不需要写那么多次err的错误处理</li><li>catch 的作用： 如果前面有任何的 Promise 执行失败，则立即终止所有 promise 的执行，并 马上进入 catch 去处理 Promise中 抛出的异常；<figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><span class="line">sleep(<span class="number">1</span>).then(<span class="function">(<span class="params">data</span>) =&gt;</span> &#123;</span><br><span class="line">    <span class="built_in">console</span>.log(data); <span class="comment">// 成功时获取到的数据</span></span><br><span class="line">    <span class="keyword">return</span> sleep(<span class="number">2</span>) <span class="comment">// 再次的执行异步函数</span></span><br><span class="line">&#125;).then(<span class="function">(<span class="params">data</span>)=&gt;</span> &#123; <span class="comment">// 继续用.then接受</span></span><br><span class="line">    <span class="built_in">console</span>.log(data) <span class="comment">// 再次成功</span></span><br><span class="line">&#125;).catch(<span class="function">(<span class="params">err</span>) =&gt;</span> &#123;</span><br><span class="line"></span><br><span class="line">&#125;)</span><br></pre></td></tr></table></figure></li></ul><h2 id="async-await-（axios封装调用中很常使用）"><a href="#async-await-（axios封装调用中很常使用）" class="headerlink" title="async/await （axios封装调用中很常使用）"></a>async/await （axios封装调用中很常使用）</h2><ul><li>其实在我们很多的前端业务请求时也是使用的异步操作</li><li>例如我们前端在请求后端api时，这个过程我们需要作为一个异步去操作不影响其他业务的操作</li><li>但是这个作为异步，可是数据总不是异步把所以数据得同步的获取</li><li>es7就帮了我们很大的忙,因为await起到同步阻挡的作用<figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">var</span> test = <span class="keyword">async</span>() =&gt; &#123; <span class="comment">// 声明即执行的 async 函数表达式</span></span><br><span class="line">    <span class="keyword">let</span> abc = <span class="keyword">await</span> sleep(<span class="number">1</span>);<span class="comment">// 都是异步操作唯独到这里被卡住了，要等待数据的返回才会去执行后面</span></span><br><span class="line">    <span class="built_in">console</span>.log(abc);</span><br><span class="line">    <span class="built_in">console</span>.log(<span class="string">'这个永远不会在前面'</span>);</span><br><span class="line">&#125;</span><br><span class="line">test()</span><br><span class="line"></span><br><span class="line"><span class="built_in">console</span>.log(<span class="string">'这个百分之99的机会都是在前面，还有那个一估计是内存卡了'</span>);</span><br></pre></td></tr></table></figure></li></ul><h1 id="判断是否是一个数组-最近刚用过"><a href="#判断是否是一个数组-最近刚用过" class="headerlink" title="判断是否是一个数组(最近刚用过)"></a>判断是否是一个数组(最近刚用过)</h1><ol><li>Array.isArray </li></ol><ul><li>这个是我在做项目的时候想要判断是否是数组的时候上网查到的方法（数据过滤），用起来挺方便的</li><li>返回值是boolean<figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">const</span> arr=[<span class="number">1</span>,<span class="number">2</span>,<span class="number">3</span>];</span><br><span class="line"><span class="built_in">Array</span>.isArray(arr) <span class="comment">// 是返回 true 不是返回false</span></span><br></pre></td></tr></table></figure></li></ul><ol start="2"><li>instanceof</li></ol><ul><li>在网上好像说这个不太严谨，忘记了是什么了找不到那个文章<figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">var</span> isArray = <span class="function"><span class="keyword">function</span>(<span class="params">obj</span>) </span>&#123;</span><br><span class="line">    <span class="keyword">return</span> obj <span class="keyword">instanceof</span> <span class="built_in">Array</span>;</span><br><span class="line">&#125;;</span><br><span class="line"><span class="keyword">var</span> arr = <span class="string">'[&#123; id: 1 &#125;]'</span>;</span><br><span class="line"><span class="built_in">console</span>.log(isArray(arr));</span><br></pre></td></tr></table></figure></li></ul><h1 id="对象-数组互转"><a href="#对象-数组互转" class="headerlink" title="对象/数组互转"></a>对象/数组互转</h1><h3 id="对象转数组"><a href="#对象转数组" class="headerlink" title="对象转数组"></a>对象转数组</h3><ol><li><p>只取内容加入数组</p><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">var</span> arr = []</span><br><span class="line"><span class="keyword">for</span> (<span class="keyword">let</span> i <span class="keyword">in</span> obj) &#123;</span><br><span class="line">    arr.push(obj[i]); <span class="comment">//属性</span></span><br><span class="line">    <span class="comment">//arr.push(obj[i]); //值</span></span><br><span class="line">&#125;</span><br><span class="line"><span class="built_in">console</span>.log(arr); <span class="comment">// [ 5, 8, 4, 6 ]</span></span><br></pre></td></tr></table></figure></li><li><p>拆分为多个对象存入数组</p><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">var</span> arr = []</span><br><span class="line"><span class="keyword">for</span> (<span class="keyword">let</span> i <span class="keyword">in</span> obj) &#123;</span><br><span class="line">    <span class="keyword">let</span> o = &#123;&#125;;</span><br><span class="line">    o[i] = obj[i];</span><br><span class="line">    arr.push(o)</span><br><span class="line">&#125;</span><br><span class="line"><span class="built_in">console</span>.log(arr); <span class="comment">// [ &#123; '未完成': 5 &#125;, &#123; '已完成': 8 &#125;, &#123; '待确认': 4 &#125;, &#123; '已取消': 6 &#125; ]</span></span><br></pre></td></tr></table></figure></li></ol><h3 id="数组转对象"><a href="#数组转对象" class="headerlink" title="数组转对象"></a>数组转对象</h3><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">let</span> obj = &#123;&#125;;</span><br><span class="line"><span class="keyword">let</span> arr = [<span class="string">"d"</span>, <span class="string">'b'</span>, <span class="string">'c'</span>]</span><br><span class="line"></span><br><span class="line"><span class="keyword">for</span> (<span class="keyword">const</span> key <span class="keyword">in</span> arr) &#123;</span><br><span class="line">    obj[key] = arr[key]</span><br><span class="line">&#125;</span><br><span class="line"><span class="built_in">console</span>.log(obj)</span><br></pre></td></tr></table></figure><h1 id="数组的升序和降序"><a href="#数组的升序和降序" class="headerlink" title="数组的升序和降序"></a>数组的升序和降序</h1><ul><li>这个挺有意思的很多算法题里面都会用到，一开始我还不懂这个啥意思哎</li><li>sort 排序,再升入我就不是很会了</li><li>要实现排序必须要有的条件就是要实现排序函数先</li></ul><hr><ul><li>如果想按照其他标准进行排序，就需要提供比较函数，该函数要比较两个值，然后返回一个用于说明这两个值的相对顺序的数字。比较函数应该具有两个参数 a 和 b，其返回值如下：</li></ul><p>若 a 小于 b，在排序后的数组中 a 应该出现在 b 之前，则返回一个小于 0 的值。<br>若 a 等于 b，则返回 0。<br>若 a 大于 b，则返回一个大于 0 的值。</p><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">// 升序：</span></span><br><span class="line">    <span class="keyword">var</span> arr=[<span class="number">5</span>,<span class="number">6</span>,<span class="number">7</span>,<span class="number">91</span>,<span class="number">2</span>,<span class="number">1</span>];</span><br><span class="line">    arr.sort(<span class="function"><span class="keyword">function</span>(<span class="params">a,b</span>)</span>&#123;<span class="keyword">return</span> a-b&#125;); <span class="comment">// 排序函数</span></span><br><span class="line">    <span class="built_in">console</span>.log(arr);<span class="comment">//[1, 2, 5, 6, 7, 91]</span></span><br><span class="line"><span class="comment">// 降序:</span></span><br><span class="line">    <span class="keyword">var</span> arr=[<span class="number">5</span>,<span class="number">6</span>,<span class="number">7</span>,<span class="number">91</span>,<span class="number">2</span>,<span class="number">1</span>];</span><br><span class="line">    arr.sort(<span class="function"><span class="keyword">function</span>(<span class="params">a,b</span>)</span>&#123;<span class="keyword">return</span> b-a&#125;);</span><br><span class="line">    <span class="built_in">console</span>.log(arr);<span class="comment">//[91, 7, 6, 5, 2, 1]</span></span><br></pre></td></tr></table></figure><h1 id="说了排序就看看冒泡排序-快速排序"><a href="#说了排序就看看冒泡排序-快速排序" class="headerlink" title="说了排序就看看冒泡排序/快速排序"></a>说了排序就看看冒泡排序/快速排序</h1><h3 id="冒泡排序"><a href="#冒泡排序" class="headerlink" title="冒泡排序"></a>冒泡排序</h3><ul><li>声明一个done作为表示判断，这个也是我看别人写才想到的</li><li>主要是用来在对比没有任何一次遍历时位置的更改，说明排序已经结束了无需在做后面的排序<figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">var</span> arr = [<span class="number">3</span>, <span class="number">4</span>, <span class="number">1</span>, <span class="number">2</span>];</span><br><span class="line"><span class="function"><span class="keyword">function</span> <span class="title">bubbleSort</span> (<span class="params">arr</span>) </span>&#123;</span><br><span class="line">  <span class="keyword">var</span> max = arr.length - <span class="number">1</span>;</span><br><span class="line">  <span class="keyword">for</span> (<span class="keyword">var</span> j = <span class="number">0</span>; j &lt; max; j++) &#123;</span><br><span class="line">    <span class="comment">// 声明一个变量，作为标志位</span></span><br><span class="line">    <span class="keyword">var</span> done = <span class="literal">true</span>;</span><br><span class="line">    <span class="keyword">for</span> (<span class="keyword">var</span> i = <span class="number">0</span>; i &lt; max - j; i++) &#123;</span><br><span class="line">      <span class="keyword">if</span> (arr[i] &gt; arr[i + <span class="number">1</span>]) &#123;</span><br><span class="line">        <span class="keyword">var</span> temp = arr[i];</span><br><span class="line">        arr[i] = arr[i + <span class="number">1</span>];</span><br><span class="line">        arr[i + <span class="number">1</span>] = temp;</span><br><span class="line">        done = <span class="literal">false</span>;</span><br><span class="line">      &#125;</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">if</span> (done) &#123;</span><br><span class="line">      <span class="keyword">break</span>;</span><br><span class="line">    &#125;</span><br><span class="line">  &#125;</span><br><span class="line">  <span class="keyword">return</span> arr;</span><br><span class="line">&#125;</span><br><span class="line"><span class="built_in">console</span>.log(bubbleSort(arr));</span><br></pre></td></tr></table></figure></li></ul><h3 id="快速排序"><a href="#快速排序" class="headerlink" title="快速排序"></a>快速排序</h3><ul><li>这里面有递归的思想，然而我用断点去看把自己都绕进去了<figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">var</span> quickSort = <span class="function"><span class="keyword">function</span>(<span class="params">arr</span>) </span>&#123;</span><br><span class="line">    <span class="keyword">if</span> (arr.length &lt;= <span class="number">1</span>) &#123;</span><br><span class="line">        <span class="keyword">return</span> arr;</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">var</span> pivotIndex = <span class="built_in">Math</span>.floor(arr.length / <span class="number">2</span>);</span><br><span class="line">    <span class="keyword">var</span> pivot = arr.splice(pivotIndex, <span class="number">1</span>)[<span class="number">0</span>];</span><br><span class="line">    <span class="keyword">var</span> left = [];</span><br><span class="line">    <span class="keyword">var</span> right = [];</span><br><span class="line">    <span class="keyword">for</span> (<span class="keyword">var</span> i = <span class="number">0</span>; i &lt; arr.length; i++) &#123;</span><br><span class="line">        <span class="keyword">if</span> (arr[i] &lt; pivot) &#123;</span><br><span class="line">            left.push(arr[i]);</span><br><span class="line">        &#125; <span class="keyword">else</span> &#123;</span><br><span class="line">            right.push(arr[i]);</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">return</span> quickSort(left).concat([pivot], quickSort(right));</span><br><span class="line">&#125;;</span><br><span class="line"></span><br><span class="line"></span><br><span class="line"><span class="keyword">var</span> aa = quickSort([<span class="number">3</span>, <span class="number">2</span>, <span class="number">5</span>, <span class="number">77</span>, <span class="number">32</span>, <span class="number">3</span>, <span class="number">1</span>, <span class="number">3</span>, <span class="number">4</span>, <span class="number">5</span>, <span class="number">2</span>, <span class="number">3</span>])</span><br><span class="line"></span><br><span class="line"><span class="built_in">console</span>.log(aa);</span><br></pre></td></tr></table></figure></li></ul><h1 id="上面出现了递归，就看看递归吧"><a href="#上面出现了递归，就看看递归吧" class="headerlink" title="上面出现了递归，就看看递归吧"></a>上面出现了递归，就看看递归吧</h1><h3 id="第一个递归"><a href="#第一个递归" class="headerlink" title="第一个递归"></a>第一个递归</h3><ul><li>递归:函数中调用函数自己,此时就是递归,递归一定要有结束的条件<figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">var</span> i = <span class="number">0</span>;</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">function</span> <span class="title">f1</span>(<span class="params"></span>) </span>&#123;</span><br><span class="line">    i++;</span><br><span class="line">    <span class="keyword">if</span> (i &lt; <span class="number">5</span>) &#123; <span class="comment">// 限制小于5都会再执行一次f1函数</span></span><br><span class="line">        f1();</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="built_in">console</span>.log(<span class="string">"从前有个山,山里有个庙,庙里有个和尚给小和尚讲故事:"</span>);</span><br><span class="line"></span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line">f1();</span><br><span class="line"><span class="comment">// 输出结果 </span></span><br><span class="line">从前有个山,山里有个庙,庙里有个和尚给小和尚讲故事:</span><br><span class="line">从前有个山,山里有个庙,庙里有个和尚给小和尚讲故事:</span><br><span class="line">从前有个山,山里有个庙,庙里有个和尚给小和尚讲故事:</span><br><span class="line">从前有个山,山里有个庙,庙里有个和尚给小和尚讲故事:</span><br><span class="line">从前有个山,山里有个庙,庙里有个和尚给小和尚讲故事:</span><br></pre></td></tr></table></figure></li></ul><h3 id="来个小案例让你知道递归的厉害-（看了这个再回头看上面的快速排序你就和觉得开窍了很多）"><a href="#来个小案例让你知道递归的厉害-（看了这个再回头看上面的快速排序你就和觉得开窍了很多）" class="headerlink" title="来个小案例让你知道递归的厉害 （看了这个再回头看上面的快速排序你就和觉得开窍了很多）"></a>来个小案例让你知道递归的厉害 （看了这个再回头看上面的快速排序你就和觉得开窍了很多）</h3><ol><li><p>递归实现：n个数字的和，5 计算 1+2+3+4+5</p><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">//函数的声明</span></span><br><span class="line"><span class="function"><span class="keyword">function</span> <span class="title">getSum</span>(<span class="params">x</span>) </span>&#123;</span><br><span class="line">    <span class="comment">// 判断条件就是在这只要到1就停止返回1</span></span><br><span class="line">    <span class="keyword">if</span> (x == <span class="number">1</span>) &#123;</span><br><span class="line">        <span class="keyword">return</span> <span class="number">1</span>;</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="comment">// 每一次都是自身 + 函数调用小于自身的1</span></span><br><span class="line">    <span class="keyword">return</span> x + getSum(x - <span class="number">1</span>);</span><br><span class="line">&#125;</span><br><span class="line"><span class="comment">//函数的调用</span></span><br><span class="line"><span class="built_in">console</span>.log(getSum(<span class="number">5</span>));</span><br><span class="line"></span><br><span class="line"></span><br><span class="line"><span class="comment">/*</span></span><br><span class="line"><span class="comment">*</span></span><br><span class="line"><span class="comment">* 执行过程:</span></span><br><span class="line"><span class="comment">* 代码执行getSum(5)---&gt;进入函数,此时的x是5,执行的是5+getSum(4),此时代码等待</span></span><br><span class="line"><span class="comment">* 此时5+getSum(4),代码先不进行计算,先执行getSum(4),进入函数,执行的是4+getSum(3),等待, 先执行的是getSum(3),进入函数,执行3+getSum(2),等待,先执行getSum(2),进入函数,执行 2+getSum(1);等待, 先执行getSum(1),执行的是x==1的判断,return 1,所以,</span></span><br><span class="line"><span class="comment">* 此时getSum(1)的结果是1,开始向外走出去</span></span><br><span class="line"><span class="comment">* 2+getSum(1) 此时的结果是:2+1</span></span><br><span class="line"><span class="comment">* 执行:</span></span><br><span class="line"><span class="comment">* getSum(2)----&gt;2+1</span></span><br><span class="line"><span class="comment">* 3+getSum(2) 此时的结果是3+2+1</span></span><br><span class="line"><span class="comment">* 4+getSum(3) 此时的结果是4+3+2+1</span></span><br><span class="line"><span class="comment">* 5+getSum(4) 此时的结果是5+4+3+2+1</span></span><br><span class="line"><span class="comment">*</span></span><br><span class="line"><span class="comment">* 结果:15</span></span><br><span class="line"><span class="comment">*</span></span><br><span class="line"><span class="comment">*</span></span><br><span class="line"><span class="comment">*</span></span><br><span class="line"><span class="comment">* */</span></span><br></pre></td></tr></table></figure></li><li><p>求一个数字各个位数上的数字的和:  123   —&gt;6 —1+2+3</p><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><span class="line"><span class="function"><span class="keyword">function</span> <span class="title">getEverySum</span>(<span class="params">x</span>) </span>&#123;</span><br><span class="line">      <span class="keyword">if</span>(x&lt;<span class="number">10</span>)&#123;</span><br><span class="line">        <span class="keyword">return</span> x;</span><br><span class="line">      &#125;</span><br><span class="line">      <span class="comment">//获取的是这个数字的个位数  然后下一次的时候除去</span></span><br><span class="line">      <span class="keyword">return</span> x%<span class="number">10</span>+getEverySum(<span class="built_in">parseInt</span>(x/<span class="number">10</span>));</span><br><span class="line">    &#125;</span><br><span class="line">   <span class="built_in">console</span>.log(getEverySum(<span class="number">1364</span>));</span><br></pre></td></tr></table></figure></li><li><p>求斐波那契数列</p><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><span class="line"><span class="function"><span class="keyword">function</span> <span class="title">getFib</span>(<span class="params">x</span>) </span>&#123;</span><br><span class="line">      <span class="keyword">if</span>(x==<span class="number">1</span>||x==<span class="number">2</span>)&#123;</span><br><span class="line">        <span class="keyword">return</span> <span class="number">1</span></span><br><span class="line">      &#125;</span><br><span class="line">      <span class="keyword">return</span> getFib(x<span class="number">-1</span>)+getFib(x<span class="number">-2</span>);</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="built_in">console</span>.log(getFib(<span class="number">12</span>));</span><br></pre></td></tr></table></figure></li></ol>]]></content>
      
      
      <categories>
          
          <category> JavaScript </category>
          
      </categories>
      
      
        <tags>
            
            <tag> js笔记 </tag>
            
        </tags>
      
    </entry>
    
    <entry>
      <title>使用过的响应式解决方案+网络看到的不错的移动+pc的笔记（网络摘录）</title>
      <link href="/2019/03/14/Css%E5%93%8D%E5%BA%94%E5%BC%8F+%E7%BD%91%E7%BB%9C%E7%AC%94%E8%AE%B0/"/>
      <url>/2019/03/14/Css%E5%93%8D%E5%BA%94%E5%BC%8F+%E7%BD%91%E7%BB%9C%E7%AC%94%E8%AE%B0/</url>
      
        <content type="html"><![CDATA[<link rel="stylesheet" class="aplayer-secondary-style-marker" href="/assets/css/APlayer.min.css"><script src="/assets/js/APlayer.min.js" class="aplayer-secondary-script-marker"></script><ul><li>flex布局学习： <a href="https://www.runoob.com/w3cnote/flex-grammar.html" target="_blank" rel="noopener">https://www.runoob.com/w3cnote/flex-grammar.html</a></li></ul><h1 id="Css-移动端响应式解决方案"><a href="#Css-移动端响应式解决方案" class="headerlink" title="Css 移动端响应式解决方案"></a>Css 移动端响应式解决方案</h1><ul><li>vh，vw，em，px，百分比</li><li>vh,vw 没用过 em和rem差不多</li><li>百分比也是一个不错的解决方便</li><li>并没有完美的解决方案，只能说在该使用的地方去使用对的解决方法达到最好的效果</li></ul><hr><ul><li>下面说两个我用过的<h2 id="1-知道并用过感觉挺好的一个-js控制配合rem"><a href="#1-知道并用过感觉挺好的一个-js控制配合rem" class="headerlink" title="1. 知道并用过感觉挺好的一个 js控制配合rem"></a>1. 知道并用过感觉挺好的一个 js控制配合rem</h2></li><li>这个是我在github上面看到的一个vue+vuex的练习项目中下载写了学习时发现的</li><li>感觉这个方法挺不错的，js的控制动态切换窗口大小都能切换</li><li>配合上rem的适配感觉是一个很棒的响应式的解决方法</li></ul><hr><ol><li>js（把js封装在config中在min.js引入就好了方便快捷）,自调用获取dom更改html font-size<figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br></pre></td><td class="code"><pre><span class="line">(<span class="function"><span class="keyword">function</span>(<span class="params">doc, win</span>) </span>&#123;</span><br><span class="line">    <span class="keyword">var</span> docEl = doc.documentElement,</span><br><span class="line">        resizeEvt = <span class="string">'orientationchange'</span> <span class="keyword">in</span> <span class="built_in">window</span> ? <span class="string">'orientationchange'</span> : <span class="string">'resize'</span>,</span><br><span class="line">        recalc = <span class="function"><span class="keyword">function</span>(<span class="params"></span>) </span>&#123;</span><br><span class="line">            <span class="keyword">var</span> clientWidth = docEl.clientWidth;</span><br><span class="line">            <span class="keyword">if</span> (!clientWidth) <span class="keyword">return</span>;</span><br><span class="line">            docEl.style.fontSize = <span class="number">20</span> * (clientWidth / <span class="number">320</span>) + <span class="string">'px'</span>;</span><br><span class="line">        &#125;;</span><br><span class="line">    <span class="keyword">if</span> (!doc.addEventListener) <span class="keyword">return</span>;</span><br><span class="line">    win.addEventListener(resizeEvt, recalc, <span class="literal">false</span>);</span><br><span class="line">    doc.addEventListener(<span class="string">'DOMContentLoaded'</span>, recalc, <span class="literal">false</span>);</span><br><span class="line">&#125;)(<span class="built_in">document</span>, <span class="built_in">window</span>);</span><br></pre></td></tr></table></figure></li></ol><hr><ol start="2"><li>rem (vue项目中设置Scss)</li></ol><ul><li>ios：6.1系统以上都支持</li><li>android：2.1系统以上都支持</li><li>根据网页的根元素来设置字体大小，和em（font size of the element）的区别是，em是根据其父元素的字体大小来设置，而rem是根据网页的跟元素（html）来设置字体大小的</li><li>默认 font-size是16px<figure class="highlight scss"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">/* 默认16px */</span></span><br><span class="line"><span class="selector-tag">html</span> &#123;</span><br><span class="line">    <span class="attribute">font-size</span>:<span class="number">16px</span>;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="comment">/* 我们试试把p标签设置为12px的字体大小 */</span></span><br><span class="line"><span class="selector-tag">p</span> &#123;</span><br><span class="line">    <span class="attribute">font-size</span>: <span class="number">0.75rem</span>; <span class="comment">/* 12/16=0.75 rem */</span></span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure></li></ul><hr><h3 id="进阶"><a href="#进阶" class="headerlink" title="进阶"></a>进阶</h3><ul><li><p>如果利用rem来设置css的值，一般要通过一层计算才行，比如如果要设置一个长宽为100px的div，那么就需要计算出100px对应的rem值是 100 / 16 =6.25rem，这在我们写css中，其实算比较繁琐的一步操作了。</p></li><li><p>这两个方法我都没有去使用，只是知道可以这么去改变</p></li></ul><ol><li><p>对于没有使用scss的工程：<br>为了方便起见，可以将html的font-size设置成100px，这样在写单位时，直接将数值除以100在加上rem的单位就可以了</p></li><li><p>对于使用scss的工程：<br>前端构建中，完全可以利用scss来解决这个问题，例如我们可以写一个scss的function px2rem即：</p><figure class="highlight scss"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">/* 设置定义 */</span></span><br><span class="line">@function px2rem(<span class="variable">$px</span>)&#123;</span><br><span class="line">    <span class="variable">$rem</span> : <span class="number">37.5px</span>;</span><br><span class="line">    @return (<span class="variable">$px</span>/<span class="variable">$rem</span>) + rem;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="comment">/*使用时*/</span></span><br><span class="line"><span class="attribute">height</span>: px2rem(<span class="number">90px</span>);</span><br><span class="line"><span class="attribute">width</span>: px2rem(<span class="number">90px</span>);;</span><br></pre></td></tr></table></figure></li></ol><h2 id="2-媒体查询-改变-font-size-这个挺麻烦的考虑很多"><a href="#2-媒体查询-改变-font-size-这个挺麻烦的考虑很多" class="headerlink" title="2. 媒体查询 改变 font-size 这个挺麻烦的考虑很多"></a>2. 媒体查询 改变 font-size 这个挺麻烦的考虑很多</h2><ul><li>相比我更喜欢使用rem+js<figure class="highlight css"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br></pre></td><td class="code"><pre><span class="line"><span class="selector-tag">html</span> &#123;</span><br><span class="line">        <span class="attribute">font-size</span>: <span class="number">15px</span></span><br><span class="line">    &#125;</span><br><span class="line"><span class="comment">/* html &#123;</span></span><br><span class="line"><span class="comment">                font-size: 4.7vw;</span></span><br><span class="line"><span class="comment">     /* rem(root element)配合vw(viewport width)  */</span></span><br><span class="line">            &#125; */</span><br><span class="line">@<span class="keyword">media</span> only screen and (min-width:<span class="number">320PX</span>) and (max-width:<span class="number">359PX</span>) &#123;</span><br><span class="line">    <span class="selector-tag">html</span> &#123;</span><br><span class="line">        <span class="attribute">font-size</span>: <span class="number">15px</span></span><br><span class="line">    &#125;</span><br><span class="line">.....等</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure></li></ul><h1 id="网上摘录的方法"><a href="#网上摘录的方法" class="headerlink" title="网上摘录的方法"></a>网上摘录的方法</h1><h2 id="移动端准备工作写法"><a href="#移动端准备工作写法" class="headerlink" title="移动端准备工作写法"></a>移动端准备工作写法</h2><figure class="highlight html"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br></pre></td><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">meta</span> <span class="attr">name</span>=<span class="string">"viewport"</span> <span class="attr">content</span>=<span class="string">"width=device-width, initial-scale=1.0, maximum-scale=1.0, user-scalable=no"</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">meta</span> <span class="attr">http-equiv</span>=<span class="string">"X-UA-Compatible"</span> <span class="attr">content</span>=<span class="string">"IE=Edge，chrome=1"</span>&gt;</span></span><br><span class="line"><span class="comment">&lt;!-- 设置在苹果手机上以应用模式启动时，是否全屏 --&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">meta</span> <span class="attr">name</span>=<span class="string">'apple-touch-fullscreen'</span> <span class="attr">content</span>=<span class="string">'yes'</span>&gt;</span></span><br><span class="line"><span class="comment">&lt;!-- ios 系统 作用未知 --&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">meta</span> <span class="attr">name</span>=<span class="string">"apple-mobile-web-app-capable"</span> <span class="attr">content</span>=<span class="string">"yes"</span> /&gt;</span></span><br><span class="line"><span class="comment">&lt;!-- iso 系统 作用未知 --&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">meta</span> <span class="attr">content</span>=<span class="string">"fullscreen=yes,preventMove=no"</span> <span class="attr">name</span>=<span class="string">"ML-Config"</span>&gt;</span></span><br><span class="line"><span class="comment">&lt;!-- iso 系统 作用未知 --&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">meta</span> <span class="attr">name</span>=<span class="string">"apple-mobile-web-app-status-bar-style"</span> <span class="attr">content</span>=<span class="string">"black"</span> /&gt;</span></span><br><span class="line"> <span class="comment">&lt;!-- 是否识别 手机号码、 电子邮件 地址 等--&gt;</span></span><br><span class="line"> <span class="tag">&lt;<span class="name">meta</span> <span class="attr">name</span>=<span class="string">"format-detection"</span> <span class="attr">content</span>=<span class="string">"telephone=no,email=no,address=no"</span> /&gt;</span></span><br><span class="line"></span><br><span class="line"><span class="comment">&lt;!-- 让360双核浏览器用webkit内核渲染页面 --&gt;</span>  </span><br><span class="line"></span><br><span class="line"><span class="tag">&lt;<span class="name">meta</span> <span class="attr">name</span>=<span class="string">"renderer"</span> <span class="attr">content</span>=<span class="string">"webkit"</span>&gt;</span> </span><br><span class="line"></span><br><span class="line"><span class="comment">&lt;!-- 避免IE使用兼容模式 --&gt;</span>  </span><br><span class="line"></span><br><span class="line"><span class="tag">&lt;<span class="name">meta</span> <span class="attr">http-equiv</span>=<span class="string">"X-UA-Compatible"</span> <span class="attr">content</span>=<span class="string">"IE=edge"</span>&gt;</span> </span><br><span class="line"></span><br><span class="line"> 允许全屏模式浏览,隐藏浏览器导航栏--&gt;</span><br><span class="line"><span class="tag">&lt;<span class="name">meta</span> <span class="attr">name</span>=<span class="string">"apple-mobile-web-app-capable"</span> <span class="attr">content</span>=<span class="string">"yes"</span> /&gt;</span></span><br><span class="line"></span><br><span class="line"><span class="comment">&lt;!--微信缓存--&gt;</span>  </span><br><span class="line">    <span class="tag">&lt;<span class="name">meta</span> <span class="attr">http-equiv</span>=<span class="string">"Cache-Control"</span> <span class="attr">content</span>=<span class="string">"no-cache, no-store, must-revalidate"</span> /&gt;</span>  </span><br><span class="line">    <span class="tag">&lt;<span class="name">meta</span> <span class="attr">http-equiv</span>=<span class="string">"Pragma"</span> <span class="attr">content</span>=<span class="string">"no-cache"</span> /&gt;</span>  </span><br><span class="line">    <span class="tag">&lt;<span class="name">meta</span> <span class="attr">http-equiv</span>=<span class="string">"Expires"</span> <span class="attr">content</span>=<span class="string">"0"</span> /&gt;</span>  </span><br><span class="line"></span><br><span class="line"><span class="comment">&lt;!--[if lt IE 9]&gt;</span></span><br><span class="line"><span class="comment">  &lt;script src="https://oss.maxcdn.com/libs/html5shiv/3.7.0/html5shiv.js"&gt;&lt;/script&gt;</span></span><br><span class="line"><span class="comment">  &lt;script src="https://oss.maxcdn.com/libs/respond.js/1.3.0/respond.min.js"&gt;&lt;/script&gt;</span></span><br><span class="line"><span class="comment">&lt;![endif]--&gt;</span></span><br></pre></td></tr></table></figure><h2 id="pc端准备工作"><a href="#pc端准备工作" class="headerlink" title="pc端准备工作"></a>pc端准备工作</h2><figure class="highlight html"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br></pre></td><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">meta</span> <span class="attr">name</span>=<span class="string">"viewport"</span> <span class="attr">content</span>=<span class="string">"width=device-width, initial-scale=1.0, maximum-scale=1.0, user-scalable=no"</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">meta</span> <span class="attr">http-equiv</span>=<span class="string">"X-UA-Compatible"</span> <span class="attr">content</span>=<span class="string">"IE=Edge，chrome=1"</span>&gt;</span></span><br><span class="line"><span class="comment">&lt;!-- 让360双核浏览器用webkit内核渲染页面 --&gt;</span>  </span><br><span class="line"></span><br><span class="line"><span class="tag">&lt;<span class="name">meta</span> <span class="attr">name</span>=<span class="string">"renderer"</span> <span class="attr">content</span>=<span class="string">"webkit"</span>&gt;</span> </span><br><span class="line"></span><br><span class="line"><span class="comment">&lt;!--[if lt IE 9]&gt;</span></span><br><span class="line"><span class="comment">  &lt;script src="https://oss.maxcdn.com/libs/html5shiv/3.7.0/html5shiv.js"&gt;&lt;/script&gt;</span></span><br><span class="line"><span class="comment">  &lt;script src="https://oss.maxcdn.com/libs/respond.js/1.3.0/respond.min.js"&gt;&lt;/script&gt;</span></span><br><span class="line"><span class="comment">&lt;![endif]--&gt;</span></span><br></pre></td></tr></table></figure><h2 id="base-css公共样式pc端"><a href="#base-css公共样式pc端" class="headerlink" title="base.css公共样式pc端"></a>base.css公共样式pc端</h2><figure class="highlight css"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br></pre></td><td class="code"><pre><span class="line"><span class="selector-tag">body</span>, <span class="selector-tag">div</span>, <span class="selector-tag">span</span>, <span class="selector-tag">object</span>, <span class="selector-tag">iframe</span>, <span class="selector-tag">h1</span>, <span class="selector-tag">h2</span>, <span class="selector-tag">h3</span>, <span class="selector-tag">h4</span>, <span class="selector-tag">h5</span>, <span class="selector-tag">h6</span>, <span class="selector-tag">p</span>, <span class="selector-tag">blockquote</span>, <span class="selector-tag">pre</span>, <span class="selector-tag">abbr</span>, <span class="selector-tag">address</span>, <span class="selector-tag">cite</span>, <span class="selector-tag">code</span>, <span class="selector-tag">del</span>, <span class="selector-tag">dfn</span>, <span class="selector-tag">em</span>, <span class="selector-tag">img</span>, <span class="selector-tag">ins</span>, <span class="selector-tag">kbd</span>, <span class="selector-tag">q</span>, <span class="selector-tag">samp</span>, <span class="selector-tag">small</span>, <span class="selector-tag">strong</span>, <span class="selector-tag">sub</span>, <span class="selector-tag">sup</span>, <span class="selector-tag">var</span>, <span class="selector-tag">b</span>, <span class="selector-tag">i</span>, <span class="selector-tag">dl</span>, <span class="selector-tag">dt</span>, <span class="selector-tag">dd</span>, <span class="selector-tag">ol</span>, <span class="selector-tag">ul</span>, <span class="selector-tag">li</span>, <span class="selector-tag">fieldset</span>, <span class="selector-tag">form</span>, <span class="selector-tag">label</span>, <span class="selector-tag">legend</span>, <span class="selector-tag">table</span>, <span class="selector-tag">caption</span>, <span class="selector-tag">tbody</span>, <span class="selector-tag">tfoot</span>, <span class="selector-tag">thead</span>, <span class="selector-tag">tr</span>, <span class="selector-tag">th</span>, <span class="selector-tag">td</span>, <span class="selector-tag">article</span>, <span class="selector-tag">aside</span>, <span class="selector-tag">canvas</span>, <span class="selector-tag">details</span>, <span class="selector-tag">figcaption</span>, <span class="selector-tag">figure</span>, <span class="selector-tag">footer</span>, <span class="selector-tag">header</span>, <span class="selector-tag">hgroup</span>, <span class="selector-tag">menu</span>, <span class="selector-tag">nav</span>, <span class="selector-tag">section</span>, <span class="selector-tag">summary</span>, <span class="selector-tag">time</span>, <span class="selector-tag">mark</span>, <span class="selector-tag">audio</span>, <span class="selector-tag">video</span> &#123; <span class="attribute">margin</span>:<span class="number">0</span>;<span class="attribute">padding</span>:<span class="number">0</span>；border: <span class="number">0</span>;&#125;</span><br><span class="line"></span><br><span class="line"><span class="selector-tag">ol</span>,<span class="selector-tag">li</span>,<span class="selector-tag">ul</span>,<span class="selector-tag">dl</span>,<span class="selector-tag">dt</span>,<span class="selector-tag">dd</span>&#123;<span class="attribute">list-style</span>:none;&#125;</span><br><span class="line"></span><br><span class="line"><span class="selector-tag">table</span>&#123;<span class="attribute">border-collapse</span>:collapse;<span class="attribute">border-spacing</span>:<span class="number">0</span>&#125;</span><br><span class="line"></span><br><span class="line"><span class="selector-tag">h1</span>,<span class="selector-tag">h2</span>,<span class="selector-tag">h3</span>,<span class="selector-tag">h4</span>,<span class="selector-tag">h5</span>,<span class="selector-tag">h6</span>,<span class="selector-tag">i</span>,<span class="selector-tag">strong</span> &#123;<span class="attribute">font-weight</span>: normal;&#125;  </span><br><span class="line"></span><br><span class="line"><span class="selector-tag">img</span> &#123;<span class="attribute">vertical-align</span>: middle;<span class="attribute">border</span>: none;<span class="attribute">width</span>: <span class="number">100%</span>;&#125;  </span><br><span class="line"><span class="selector-tag">i</span> &#123;<span class="attribute">font</span>: inherit;&#125;  </span><br><span class="line"></span><br><span class="line"><span class="selector-tag">a</span> &#123;<span class="attribute">color</span>: <span class="number">#fff</span>;<span class="attribute">text-decoration</span>: none;<span class="attribute">-webkit-tap-highlight-color</span>: <span class="built_in">rgba</span>(0, 0, 0, 0); <span class="attribute">background-color</span>:transparent;&#125;</span><br><span class="line"></span><br><span class="line"><span class="selector-tag">a</span><span class="selector-pseudo">:hover</span> &#123;<span class="attribute">text-decoration</span>: underline; <span class="attribute">outline</span>: none;&#125;  </span><br><span class="line"></span><br><span class="line"><span class="selector-tag">select</span><span class="selector-pseudo">::-ms-expand</span> &#123; <span class="attribute">display</span>: none; &#125;  </span><br><span class="line"></span><br><span class="line"><span class="selector-tag">a</span><span class="selector-pseudo">:active</span>,<span class="selector-tag">a</span><span class="selector-pseudo">:hover</span>&#123;<span class="attribute">outline</span>:<span class="number">0</span>&#125;</span><br><span class="line"></span><br><span class="line"><span class="selector-class">.clearfix</span><span class="selector-pseudo">::before</span>,</span><br><span class="line"><span class="selector-class">.clearfix</span><span class="selector-pseudo">::after</span>&#123;</span><br><span class="line">    <span class="attribute">content</span>: <span class="string">''</span>;</span><br><span class="line">    <span class="attribute">display</span>: block;</span><br><span class="line">    <span class="attribute">height</span>: <span class="number">0</span>;</span><br><span class="line">    <span class="attribute">line-height</span>: <span class="number">0</span>;</span><br><span class="line">    <span class="attribute">visibility</span>: hidden;</span><br><span class="line">    <span class="attribute">clear</span>: both;</span><br><span class="line"></span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="selector-class">.fl</span>&#123; <span class="attribute">float</span>:left;&#125;</span><br><span class="line"><span class="selector-class">.fr</span>&#123;<span class="attribute">float</span>:right;&#125;</span><br><span class="line"></span><br><span class="line"><span class="selector-tag">input</span>,<span class="selector-tag">select</span>,<span class="selector-tag">option</span>&#123;<span class="attribute">vertical-align</span>:middle;<span class="attribute">border-radius</span>:<span class="number">0px</span>;<span class="attribute">-moz-appearance</span>:none;<span class="attribute">-webkit-appearance</span>:none;<span class="attribute">appearance</span>:none;<span class="attribute">-webkit-tap-highlight-color</span>: <span class="built_in">rgba</span>(0, 0, 0, 0);<span class="attribute">outline</span>: none;&#125;</span><br><span class="line"></span><br><span class="line"><span class="selector-tag">input</span><span class="selector-attr">[type="text"]</span>,<span class="selector-tag">input</span><span class="selector-attr">[type="button"]</span>,<span class="selector-tag">input</span><span class="selector-attr">[type="submit"]</span>,<span class="selector-tag">input</span><span class="selector-attr">[type="reset"]</span>&#123;<span class="attribute">-webkit-appearance</span>: none;<span class="attribute">appearance</span>: none;<span class="attribute">border-radius</span>: <span class="number">0</span>;<span class="attribute">outline</span>: none;&#125;  </span><br><span class="line"></span><br><span class="line"><span class="selector-class">.overflow</span> &#123;<span class="attribute">overflow</span>:hidden; &#125;</span><br></pre></td></tr></table></figure><h2 id="base-css公共样式移动端"><a href="#base-css公共样式移动端" class="headerlink" title="base.css公共样式移动端"></a>base.css公共样式移动端</h2><figure class="highlight css"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br><span class="line">64</span><br><span class="line">65</span><br><span class="line">66</span><br><span class="line">67</span><br><span class="line">68</span><br><span class="line">69</span><br><span class="line">70</span><br><span class="line">71</span><br><span class="line">72</span><br><span class="line">73</span><br><span class="line">74</span><br><span class="line">75</span><br><span class="line">76</span><br><span class="line">77</span><br><span class="line">78</span><br><span class="line">79</span><br><span class="line">80</span><br><span class="line">81</span><br><span class="line">82</span><br><span class="line">83</span><br><span class="line">84</span><br><span class="line">85</span><br><span class="line">86</span><br><span class="line">87</span><br><span class="line">88</span><br><span class="line">89</span><br><span class="line">90</span><br><span class="line">91</span><br><span class="line">92</span><br><span class="line">93</span><br><span class="line">94</span><br><span class="line">95</span><br><span class="line">96</span><br><span class="line">97</span><br><span class="line">98</span><br><span class="line">99</span><br><span class="line">100</span><br><span class="line">101</span><br><span class="line">102</span><br><span class="line">103</span><br><span class="line">104</span><br><span class="line">105</span><br><span class="line">106</span><br><span class="line">107</span><br><span class="line">108</span><br><span class="line">109</span><br><span class="line">110</span><br><span class="line">111</span><br></pre></td><td class="code"><pre><span class="line"><span class="selector-tag">body</span>, <span class="selector-tag">div</span>, <span class="selector-tag">span</span>, <span class="selector-tag">object</span>, <span class="selector-tag">iframe</span>, <span class="selector-tag">h1</span>, <span class="selector-tag">h2</span>, <span class="selector-tag">h3</span>, <span class="selector-tag">h4</span>, <span class="selector-tag">h5</span>, <span class="selector-tag">h6</span>, <span class="selector-tag">p</span>, <span class="selector-tag">blockquote</span>, <span class="selector-tag">pre</span>, <span class="selector-tag">abbr</span>, <span class="selector-tag">address</span>, <span class="selector-tag">cite</span>, <span class="selector-tag">code</span>, <span class="selector-tag">del</span>, <span class="selector-tag">dfn</span>, <span class="selector-tag">em</span>, <span class="selector-tag">img</span>, <span class="selector-tag">ins</span>, <span class="selector-tag">kbd</span>, <span class="selector-tag">q</span>, <span class="selector-tag">samp</span>, <span class="selector-tag">small</span>, <span class="selector-tag">strong</span>, <span class="selector-tag">sub</span>, <span class="selector-tag">sup</span>, <span class="selector-tag">var</span>, <span class="selector-tag">b</span>, <span class="selector-tag">i</span>, <span class="selector-tag">dl</span>, <span class="selector-tag">dt</span>, <span class="selector-tag">dd</span>, <span class="selector-tag">ol</span>, <span class="selector-tag">ul</span>, <span class="selector-tag">li</span>, <span class="selector-tag">fieldset</span>, <span class="selector-tag">form</span>, <span class="selector-tag">label</span>, <span class="selector-tag">legend</span>, <span class="selector-tag">table</span>, <span class="selector-tag">caption</span>, <span class="selector-tag">tbody</span>, <span class="selector-tag">tfoot</span>, <span class="selector-tag">thead</span>, <span class="selector-tag">tr</span>, <span class="selector-tag">th</span>, <span class="selector-tag">td</span>, <span class="selector-tag">article</span>, <span class="selector-tag">aside</span>, <span class="selector-tag">canvas</span>, <span class="selector-tag">details</span>, <span class="selector-tag">figcaption</span>, <span class="selector-tag">figure</span>, <span class="selector-tag">footer</span>, <span class="selector-tag">header</span>, <span class="selector-tag">hgroup</span>, <span class="selector-tag">menu</span>, <span class="selector-tag">nav</span>, <span class="selector-tag">section</span>, <span class="selector-tag">summary</span>, <span class="selector-tag">time</span>, <span class="selector-tag">mark</span>, <span class="selector-tag">audio</span>, <span class="selector-tag">video</span> &#123; <span class="attribute">margin</span>:<span class="number">0</span>;<span class="attribute">padding</span>:<span class="number">0</span>&#125;</span><br><span class="line"></span><br><span class="line"><span class="selector-tag">ol</span>,<span class="selector-tag">li</span>,<span class="selector-tag">ul</span>,<span class="selector-tag">dl</span>,<span class="selector-tag">dt</span>,<span class="selector-tag">dd</span>&#123;<span class="attribute">list-style</span>:none;&#125;</span><br><span class="line"><span class="selector-class">.fl</span> &#123;<span class="attribute">float</span>: left;&#125;  </span><br><span class="line"><span class="selector-class">.fr</span> &#123;<span class="attribute">float</span>: right;&#125; </span><br><span class="line"></span><br><span class="line"><span class="selector-tag">table</span>&#123;<span class="attribute">border-collapse</span>:collapse;<span class="attribute">border-spacing</span>:<span class="number">0</span>&#125;</span><br><span class="line"></span><br><span class="line"><span class="selector-tag">html</span> &#123;  </span><br><span class="line">    <span class="attribute">-webkit-text-size-adjust</span>: <span class="number">100%</span>;  </span><br><span class="line">    <span class="attribute">-ms-text-size-adjust</span>: <span class="number">100%</span>;  </span><br><span class="line">    <span class="comment">/* 解决IOS默认滑动很卡的情况 */</span>  </span><br><span class="line">    <span class="attribute">-webkit-overflow-scrolling </span>: touch;  </span><br><span class="line">&#125;  </span><br><span class="line">  </span><br><span class="line"><span class="comment">/* 禁止缩放表单 */</span>  </span><br><span class="line"><span class="selector-tag">input</span><span class="selector-attr">[type="submit"]</span>, <span class="selector-tag">input</span><span class="selector-attr">[type="reset"]</span>, <span class="selector-tag">input</span><span class="selector-attr">[type="button"]</span>, <span class="selector-tag">input</span> &#123;  </span><br><span class="line">    <span class="attribute">resize</span>: none;  </span><br><span class="line">    <span class="attribute">border</span>: none;  </span><br><span class="line">&#125;  </span><br><span class="line">  </span><br><span class="line"><span class="comment">/* 取消链接高亮  */</span>  </span><br><span class="line"><span class="selector-tag">body</span>, <span class="selector-tag">div</span>, <span class="selector-tag">ul</span>, <span class="selector-tag">li</span>, <span class="selector-tag">ol</span>, <span class="selector-tag">h1</span>, <span class="selector-tag">h2</span>, <span class="selector-tag">h3</span>, <span class="selector-tag">h4</span>, <span class="selector-tag">h5</span>, <span class="selector-tag">h6</span>, <span class="selector-tag">input</span>, <span class="selector-tag">textarea</span>, <span class="selector-tag">select</span>, <span class="selector-tag">p</span>, <span class="selector-tag">dl</span>, <span class="selector-tag">dt</span>, <span class="selector-tag">dd</span>, <span class="selector-tag">a</span>, <span class="selector-tag">img</span>, <span class="selector-tag">button</span>, <span class="selector-tag">form</span>, <span class="selector-tag">table</span>, <span class="selector-tag">th</span>, <span class="selector-tag">tr</span>, <span class="selector-tag">td</span>, <span class="selector-tag">tbody</span>, <span class="selector-tag">article</span>, <span class="selector-tag">aside</span>, <span class="selector-tag">details</span>, <span class="selector-tag">figcaption</span>, <span class="selector-tag">figure</span>, <span class="selector-tag">footer</span>, <span class="selector-tag">header</span>, <span class="selector-tag">hgroup</span>, <span class="selector-tag">menu</span>, <span class="selector-tag">nav</span>, <span class="selector-tag">section</span> &#123;  </span><br><span class="line">    <span class="attribute">-webkit-tap-highlight-color</span>: <span class="built_in">rgba</span>(0, 0, 0, 0);  </span><br><span class="line">&#125;  </span><br><span class="line">  </span><br><span class="line"><span class="comment">/* 设置HTML5元素为块 */</span>  </span><br><span class="line"><span class="selector-tag">article</span>, <span class="selector-tag">aside</span>, <span class="selector-tag">details</span>, <span class="selector-tag">figcaption</span>, <span class="selector-tag">figure</span>, <span class="selector-tag">footer</span>, <span class="selector-tag">header</span>, <span class="selector-tag">hgroup</span>, <span class="selector-tag">menu</span>, <span class="selector-tag">nav</span>, <span class="selector-tag">section</span> &#123;  </span><br><span class="line">    <span class="attribute">display</span>: block;  </span><br><span class="line">&#125;  </span><br><span class="line">  </span><br><span class="line"><span class="comment">/* 图片自适应 */</span>  </span><br><span class="line"><span class="selector-tag">img</span> &#123;  </span><br><span class="line">    <span class="attribute">width</span>: <span class="number">100%</span>;  </span><br><span class="line">    <span class="attribute">height</span>: auto;  </span><br><span class="line">    <span class="attribute">width</span>: auto\<span class="number">9</span>; <span class="comment">/* ie8 */</span>  </span><br><span class="line">    <span class="attribute">-ms-interpolation-mode</span>: bicubic;<span class="comment">/*为了照顾ie图片缩放失真*/</span>  </span><br><span class="line">&#125;  </span><br><span class="line"><span class="selector-tag">em</span>, <span class="selector-tag">i</span> &#123;  </span><br><span class="line">    <span class="attribute">font-style</span>: normal;  </span><br><span class="line">&#125;  </span><br><span class="line"><span class="selector-tag">textarea</span> &#123;  </span><br><span class="line">    <span class="attribute">resize</span>:none; <span class="comment">/*禁用了文本的拖拉，尤其在谷歌下*/</span>  </span><br><span class="line">&#125;   </span><br><span class="line"><span class="selector-tag">p</span> &#123;  </span><br><span class="line">    <span class="attribute">word-wrap</span>:break-word; <span class="comment">/* 不够的单词自动换行 而不会被截掉 */</span>  </span><br><span class="line">&#125;  </span><br><span class="line"><span class="selector-class">.clearfix</span><span class="selector-pseudo">:after</span> &#123;  </span><br><span class="line">    <span class="attribute">content</span>: <span class="string">""</span>;  </span><br><span class="line">    <span class="attribute">display</span>: block;  </span><br><span class="line">    <span class="attribute">visibility</span>: hidden;  </span><br><span class="line">    <span class="attribute">height</span>: <span class="number">0</span>;  </span><br><span class="line">    <span class="attribute">clear</span>: both;  </span><br><span class="line">&#125;  </span><br><span class="line"><span class="selector-class">.clearfix</span> &#123;  </span><br><span class="line">    <span class="attribute">zoom</span>: <span class="number">1</span>;  </span><br><span class="line">&#125;  </span><br><span class="line"><span class="selector-tag">a</span> &#123;  </span><br><span class="line">    <span class="attribute">text-decoration</span>: none;  </span><br><span class="line">    <span class="attribute">color</span>: <span class="number">#fff</span>;  </span><br><span class="line">    <span class="attribute">font-family</span>: <span class="string">'Microsoft YaHei'</span>, Tahoma, Arial, sans-serif;  </span><br><span class="line">&#125;  </span><br><span class="line"><span class="selector-tag">a</span><span class="selector-pseudo">:hover</span> &#123;  </span><br><span class="line">    <span class="attribute">text-decoration</span>: none;  <span class="attribute">outline</span>: none;</span><br><span class="line"></span><br><span class="line">&#125;  </span><br><span class="line"> </span><br><span class="line"><span class="selector-tag">h1</span>, <span class="selector-tag">h2</span>, <span class="selector-tag">h3</span>, <span class="selector-tag">h4</span>, <span class="selector-tag">h5</span>, <span class="selector-tag">h6</span> &#123;  </span><br><span class="line">    <span class="attribute">font-size</span>: <span class="number">100%</span>;  </span><br><span class="line">    <span class="attribute">font-family</span>: <span class="string">'Microsoft YaHei'</span>;  </span><br><span class="line">&#125;  </span><br><span class="line"><span class="selector-tag">img</span> &#123;  </span><br><span class="line">    <span class="attribute">border</span>: none;  </span><br><span class="line">&#125;  </span><br><span class="line"><span class="selector-tag">input</span>&#123;  </span><br><span class="line">    <span class="attribute">font-family</span>: <span class="string">'Microsoft YaHei'</span>;  </span><br><span class="line">&#125;  </span><br><span class="line"><span class="comment">/*单行溢出*/</span>  </span><br><span class="line"><span class="selector-class">.one-txt-cut</span>&#123;  </span><br><span class="line">    <span class="attribute">overflow</span>: hidden;  </span><br><span class="line">    <span class="attribute">white-space</span>: nowrap;  </span><br><span class="line">    <span class="attribute">text-overflow</span>: ellipsis;  </span><br><span class="line">&#125;  </span><br><span class="line"><span class="comment">/*多行溢出 手机端使用*/</span>  </span><br><span class="line"><span class="selector-class">.txt-cut</span>&#123;  </span><br><span class="line">    <span class="attribute">overflow </span>: hidden;  </span><br><span class="line">    <span class="attribute">text-overflow</span>: ellipsis;  </span><br><span class="line">    <span class="attribute">display</span>: -webkit-box;  </span><br><span class="line">    <span class="comment">/* -webkit-line-clamp: 2; */</span>  </span><br><span class="line">    <span class="attribute">-webkit-box-orient</span>: vertical;  </span><br><span class="line">&#125;  </span><br><span class="line"><span class="comment">/* 移动端点击a链接出现蓝色背景问题解决 */</span>  </span><br><span class="line"><span class="selector-tag">a</span><span class="selector-pseudo">:link</span>,<span class="selector-tag">a</span><span class="selector-pseudo">:active</span>,<span class="selector-tag">a</span><span class="selector-pseudo">:visited</span>,<span class="selector-tag">a</span><span class="selector-pseudo">:hover</span> &#123;  </span><br><span class="line">    <span class="attribute">background</span>: none;  </span><br><span class="line">    <span class="attribute">-webkit-tap-highlight-color</span>: <span class="built_in">rgba</span>(0,0,0,0);  </span><br><span class="line">    <span class="attribute">-webkit-tap-highlight-color</span>: transparent;  </span><br><span class="line">&#125;  </span><br><span class="line"><span class="selector-class">.overflow</span> &#123;<span class="attribute">overflow</span>:hidden; &#125;</span><br><span class="line"></span><br><span class="line"><span class="selector-class">.w50</span>&#123;  </span><br><span class="line">    <span class="attribute">width</span>: <span class="number">50%</span>;  </span><br><span class="line">&#125;  </span><br><span class="line"><span class="selector-class">.w25</span>&#123;  </span><br><span class="line">    <span class="attribute">width</span>: <span class="number">25%</span>;  </span><br><span class="line">&#125;  </span><br><span class="line"><span class="selector-class">.w20</span>&#123;  </span><br><span class="line">    <span class="attribute">width</span>: <span class="number">20%</span>;  </span><br><span class="line">&#125;  </span><br><span class="line"><span class="selector-class">.w33</span>&#123;  </span><br><span class="line">    <span class="attribute">width</span>: <span class="number">33.333333%</span>;  </span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h2 id="移动端布局使用方法rem-他这个和我那个差不多"><a href="#移动端布局使用方法rem-他这个和我那个差不多" class="headerlink" title="移动端布局使用方法rem (他这个和我那个差不多)"></a>移动端布局使用方法rem (他这个和我那个差不多)</h2><h3 id="第一种：js控制html字体大小，-js代码放在head里面"><a href="#第一种：js控制html字体大小，-js代码放在head里面" class="headerlink" title="第一种：js控制html字体大小， js代码放在head里面"></a>第一种：js控制html字体大小， js代码放在head里面</h3><ul><li>html设置初始font-size：320px的字体大小 <figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br></pre></td><td class="code"><pre><span class="line"> <span class="keyword">var</span> html = <span class="built_in">document</span>.getElementsByTagName(<span class="string">'html'</span>)[<span class="number">0</span>];</span><br><span class="line"></span><br><span class="line"><span class="keyword">if</span>(html)&#123;</span><br><span class="line">    <span class="keyword">var</span> w = <span class="built_in">window</span>.innerWidth;</span><br><span class="line">    <span class="keyword">var</span> fontSize = (w&gt;<span class="number">640</span>?<span class="number">640</span>:w)/<span class="number">640</span> *<span class="number">30</span>; 这里最少<span class="number">30</span>，</span><br><span class="line">    html.style.fontSize = fontSize + <span class="string">'px'</span>;</span><br><span class="line">&#125;</span><br><span class="line"><span class="built_in">window</span>.onload = <span class="function"><span class="keyword">function</span>(<span class="params"></span>)</span>&#123;</span><br><span class="line">    <span class="built_in">window</span>.onresize = <span class="function"><span class="keyword">function</span>(<span class="params"></span>)</span>&#123;</span><br><span class="line">        <span class="keyword">var</span> w = <span class="built_in">window</span>.innerWidth;</span><br><span class="line">        <span class="built_in">console</span>.log(w);</span><br><span class="line">        <span class="keyword">var</span> fontSize = (w&gt;<span class="number">640</span>?<span class="number">640</span>:w)/<span class="number">640</span> * <span class="number">30</span>;这里最少<span class="number">30</span>，</span><br><span class="line">        html.style.fontSize = fontSize + <span class="string">'px'</span>;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure></li></ul><h3 id="第二种：js控制html字体大小常用-，js代码放在head里面"><a href="#第二种：js控制html字体大小常用-，js代码放在head里面" class="headerlink" title="第二种：js控制html字体大小常用 ，js代码放在head里面"></a>第二种：js控制html字体大小常用 ，js代码放在head里面</h3><ul><li>html设置初始font-size：320px的字体大小 <figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br></pre></td><td class="code"><pre><span class="line">(<span class="function"><span class="keyword">function</span>(<span class="params">doc, win</span>) </span>&#123;  </span><br><span class="line">    <span class="keyword">var</span> docEl = doc.documentElement;  </span><br><span class="line">    <span class="keyword">var</span> resizeEvt = <span class="string">'orientationchange'</span> <span class="keyword">in</span> <span class="built_in">window</span> ? <span class="string">'orientationchange'</span>: <span class="string">'resize'</span>;   </span><br><span class="line">    <span class="keyword">var</span> recalc = <span class="function"><span class="keyword">function</span>(<span class="params"></span>) </span>&#123;  </span><br><span class="line">        <span class="keyword">var</span> clientWidth = docEl.clientWidth;  </span><br><span class="line">        <span class="keyword">if</span> (!clientWidth)  </span><br><span class="line">            <span class="keyword">return</span>;  </span><br><span class="line">        docEl.style.fontSize = (clientWidth&gt;<span class="number">640</span>?<span class="number">640</span>:clientWidth)/ <span class="number">320</span> *<span class="number">20</span> +  <span class="string">'px'</span>;  </span><br><span class="line">    &#125;;  </span><br><span class="line">    <span class="comment">// 不同浏览器resize事件处理机制不同  </span></span><br><span class="line">    <span class="comment">// 使用定时器延迟处理resize回调函数以降低重复响应  </span></span><br><span class="line">    <span class="keyword">var</span> recalcTimer = <span class="literal">null</span>;  </span><br><span class="line">    <span class="keyword">var</span> delaycalc = <span class="function"><span class="keyword">function</span>(<span class="params"></span>) </span>&#123;  </span><br><span class="line">        win.clearTimeout(recalcTimer);  </span><br><span class="line">        recalcTimer = win.setTimeout(recalc, <span class="number">100</span>);  </span><br><span class="line">    &#125;;  </span><br><span class="line">    <span class="comment">// 移动端不需要考虑事件注册函数的兼容性  </span></span><br><span class="line">    <span class="keyword">if</span> (!doc.addEventListener)  </span><br><span class="line">        <span class="keyword">return</span>;  </span><br><span class="line">    win.addEventListener(resizeEvt, delaycalc, <span class="literal">false</span>);  </span><br><span class="line">    <span class="comment">// DOMContentLoaded事件只在DOM文档树加载完毕触发，此处不用延迟处理  </span></span><br><span class="line"> doc.addEventListener(<span class="string">'DOMContentLoaded'</span>, recalc, <span class="literal">false</span>); </span><br><span class="line">&#125;)(<span class="built_in">document</span>, <span class="built_in">window</span>);</span><br></pre></td></tr></table></figure></li></ul><h3 id="第三种：用媒体查询控制html字体大小（这种也是我用过的看看他着么说）"><a href="#第三种：用媒体查询控制html字体大小（这种也是我用过的看看他着么说）" class="headerlink" title="第三种：用媒体查询控制html字体大小（这种也是我用过的看看他着么说）"></a>第三种：用媒体查询控制html字体大小（这种也是我用过的看看他着么说）</h3><h4 id="一：字体大小为15px开始-常用"><a href="#一：字体大小为15px开始-常用" class="headerlink" title="一：字体大小为15px开始 常用"></a>一：字体大小为15px开始 常用</h4><figure class="highlight css"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br></pre></td><td class="code"><pre><span class="line"><span class="selector-tag">html</span> &#123;</span><br><span class="line">                <span class="attribute">font-size</span>: <span class="number">15px</span></span><br><span class="line">            &#125;</span><br><span class="line"><span class="selector-tag">html</span> &#123;</span><br><span class="line">                <span class="attribute">font-size</span>: <span class="number">4.7vw</span>;</span><br><span class="line">                <span class="comment">/* rem(root element)配合vw(viewport width)  */</span></span><br><span class="line">            &#125;</span><br><span class="line">@<span class="keyword">media</span> only screen and (min-width:<span class="number">320PX</span>) and (max-width:<span class="number">359PX</span>) &#123;</span><br><span class="line">    <span class="selector-tag">html</span> &#123;</span><br><span class="line">        <span class="attribute">font-size</span>: <span class="number">15px</span></span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line">@<span class="keyword">media</span> only screen and (min-width:<span class="number">360PX</span>) and (max-width:<span class="number">374PX</span>) &#123;</span><br><span class="line">    <span class="selector-tag">html</span> &#123;</span><br><span class="line">        <span class="attribute">font-size</span>: <span class="number">16.875px</span></span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line">@<span class="keyword">media</span> only screen and (min-width:<span class="number">375PX</span>) and (max-width:<span class="number">389PX</span>) &#123;</span><br><span class="line">    <span class="selector-tag">html</span> &#123;</span><br><span class="line">        <span class="attribute">font-size</span>: <span class="number">17.5781px</span></span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line">@<span class="keyword">media</span> only screen and (min-width:<span class="number">390PX</span>) and (max-width:<span class="number">400PX</span>) &#123;</span><br><span class="line">    <span class="selector-tag">html</span> &#123;</span><br><span class="line">        <span class="attribute">font-size</span>: <span class="number">18.75px</span></span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line">@<span class="keyword">media</span> only screen and (min-width:<span class="number">401PX</span>) and (max-width:<span class="number">414PX</span>) &#123;</span><br><span class="line">    <span class="selector-tag">html</span> &#123;</span><br><span class="line">        <span class="attribute">font-size</span>: <span class="number">19.4063px</span></span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br><span class="line">@<span class="keyword">media</span> only screen and (min-width:<span class="number">415PX</span>) and (max-width:<span class="number">640PX</span>) &#123;</span><br><span class="line">    <span class="selector-tag">html</span> &#123;</span><br><span class="line">        <span class="attribute">font-size</span>:<span class="number">22.5px</span></span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line">@<span class="keyword">media</span> screen and (min-width:<span class="number">641PX</span>) &#123;</span><br><span class="line">    <span class="selector-tag">html</span> &#123;</span><br><span class="line">        <span class="attribute">font-size</span>: <span class="number">30px</span></span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h4 id="二：字体大小为13-65px-不常用"><a href="#二：字体大小为13-65px-不常用" class="headerlink" title="二：字体大小为13.65px 不常用"></a>二：字体大小为13.65px 不常用</h4><figure class="highlight css"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br></pre></td><td class="code"><pre><span class="line"><span class="selector-tag">html</span> &#123;</span><br><span class="line">           <span class="attribute">font-size</span>: <span class="number">4.2vw</span>;</span><br><span class="line">           <span class="comment">/* rem(root element)配合vw(viewport width)  */</span></span><br><span class="line">       &#125;</span><br><span class="line">       <span class="selector-tag">html</span> &#123;</span><br><span class="line">                <span class="attribute">font-size</span>: <span class="number">13.65px</span></span><br><span class="line">            &#125;</span><br><span class="line">       @<span class="keyword">media</span> only screen and (min-width:<span class="number">320PX</span>) and (max-width:<span class="number">360PX</span>) &#123;</span><br><span class="line">            <span class="selector-tag">html</span> &#123;</span><br><span class="line">                <span class="attribute">font-size</span>: <span class="number">13.65px</span></span><br><span class="line">            &#125;</span><br><span class="line">        &#125;</span><br><span class="line"></span><br><span class="line">        @<span class="keyword">media</span> only screen and (min-width:<span class="number">360PX</span>) and (max-width:<span class="number">375PX</span>) &#123;</span><br><span class="line">            <span class="selector-tag">html</span> &#123;</span><br><span class="line">                <span class="attribute">font-size</span>: <span class="number">15.36px</span></span><br><span class="line">            &#125;</span><br><span class="line">        &#125;</span><br><span class="line"></span><br><span class="line">        @<span class="keyword">media</span> only screen and (min-width:<span class="number">375PX</span>) and (max-width:<span class="number">390PX</span>) &#123;</span><br><span class="line">            <span class="selector-tag">html</span> &#123;</span><br><span class="line">                <span class="attribute">font-size</span>: <span class="number">16px</span></span><br><span class="line">            &#125;</span><br><span class="line">        &#125;</span><br><span class="line"></span><br><span class="line">        @<span class="keyword">media</span> only screen and (min-width:<span class="number">390PX</span>) and (max-width:<span class="number">414PX</span>) &#123;</span><br><span class="line">            <span class="selector-tag">html</span> &#123;</span><br><span class="line">                <span class="attribute">font-size</span>: <span class="number">16.64px</span></span><br><span class="line">            &#125;</span><br><span class="line">        &#125;</span><br><span class="line"></span><br><span class="line">        @<span class="keyword">media</span> only screen and (min-width:<span class="number">414PX</span>) and (max-width:<span class="number">460PX</span>) &#123;</span><br><span class="line">            <span class="selector-tag">html</span> &#123;</span><br><span class="line">                <span class="attribute">font-size</span>: <span class="number">17.664px</span></span><br><span class="line">            &#125;</span><br><span class="line">        &#125;</span><br><span class="line">        @<span class="keyword">media</span> only screen and (min-width:<span class="number">460PX</span>) and (max-width:<span class="number">640PX</span>) &#123;</span><br><span class="line">            <span class="selector-tag">html</span> &#123;</span><br><span class="line">                <span class="attribute">font-size</span>: <span class="number">20px</span></span><br><span class="line">            &#125;</span><br><span class="line">        &#125;</span><br><span class="line">        @<span class="keyword">media</span> screen and (min-width:<span class="number">640PX</span>) &#123;</span><br><span class="line">            <span class="selector-tag">html</span> &#123;</span><br><span class="line">                <span class="attribute">font-size</span>: <span class="number">27.31px</span></span><br><span class="line">            &#125;</span><br><span class="line">        &#125;</span><br></pre></td></tr></table></figure><h2 id="移动端布局用flex和自动缩放"><a href="#移动端布局用flex和自动缩放" class="headerlink" title="移动端布局用flex和自动缩放"></a>移动端布局用flex和自动缩放</h2><ul><li>新旧版本兼容：这里设置flex容器为.box，子元素为.item</li></ul><h3 id="Flex-布局"><a href="#Flex-布局" class="headerlink" title="Flex 布局"></a>Flex 布局</h3><figure class="highlight css"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><span class="line"><span class="selector-class">.box</span>&#123;</span><br><span class="line"> <span class="attribute">display</span>: -ms-flexbox; </span><br><span class="line"> <span class="attribute">display</span>: -webkit-flex; </span><br><span class="line"> <span class="attribute">display</span>: flex; </span><br><span class="line"> <span class="attribute">display</span>: -webkit-box; </span><br><span class="line"> <span class="attribute">display</span>: -moz-box; </span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>旧版：display：box<br>新版：display：flex</p><h3 id="定义主轴的方向"><a href="#定义主轴的方向" class="headerlink" title="定义主轴的方向"></a>定义主轴的方向</h3><ul><li><p>水平方向</p><figure class="highlight css"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><span class="line"><span class="selector-class">.box</span>&#123; </span><br><span class="line">  <span class="attribute">-moz-flex-direction</span>: row; </span><br><span class="line">  <span class="attribute">-webkit-flex-direction</span>: row;</span><br><span class="line">  <span class="attribute">flex-direction</span>: row;</span><br><span class="line">  <span class="attribute">-webkit-box-direction</span>: normal; </span><br><span class="line">  <span class="attribute">-webkit-box-orient</span>: horizontal; </span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure></li><li><p>垂直方向</p><figure class="highlight css"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><span class="line"><span class="selector-class">.box</span>&#123;</span><br><span class="line"> <span class="attribute">-moz-flex-direction</span>: column;</span><br><span class="line"> <span class="attribute">-webkit-flex-direction</span>: column;</span><br><span class="line"> <span class="attribute">flex-direction</span>: column;</span><br><span class="line"> <span class="attribute">-webkit-box-direction</span>: normal;</span><br><span class="line"> <span class="attribute">-webkit-box-orient</span>: vertical;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure></li></ul><hr><p>旧版：box-direction: normal 水平方向 | reverse 垂直方向 | inherit ，跟子元素的方向一致; 定义子元素的显示方向。</p><pre><code> box-orient: horizontal  水平排列| vertical 垂直排列| inline-axis 默认 | block-axis 快方式排列 | inherit继承父元素; 定义子元素是否应水平或垂直排列。这两种要同时设置才能确定排列方式；水平方向：box-direction: normal；box-orient: horizontal垂直方向：box-direction: normal； box-orient:vertical</code></pre><p>新版：flex-direction：row（默认值）：主轴为水平方向，起点在左端。</p><pre><code>row-reverse：主轴为水平方向，起点在右端。column：主轴为垂直方向，起点在上沿。column-reverse：主轴为垂直方向，起点在下沿。</code></pre><h3 id="子元素主轴对齐方式"><a href="#子元素主轴对齐方式" class="headerlink" title="子元素主轴对齐方式"></a>子元素主轴对齐方式</h3><figure class="highlight css"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line"><span class="selector-class">.box</span>&#123;</span><br><span class="line"> <span class="attribute">-moz-justify-content</span>: center;</span><br><span class="line"> <span class="attribute">-webkit-justify-content</span>: center;</span><br><span class="line"> <span class="attribute">justify-content</span>: center;</span><br><span class="line"> <span class="attribute">-webkit-box-pack</span>: center;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>旧版： box-pack: start | end | center | justify;</p><p>注意：兼容写法新版语法的space-around是不可用的 </p><p>新版：justify-content：flex-start（默认值）：左对齐</p><pre><code>flex-end：右对齐center： 居中space-between：两端对齐，项目之间的间隔都相等。space-around：每个项目两侧的间隔相等。所以，项目之间的间隔比项目与边框的间隔大一倍。</code></pre><h3 id="子元素交叉轴对齐方式"><a href="#子元素交叉轴对齐方式" class="headerlink" title="子元素交叉轴对齐方式"></a>子元素交叉轴对齐方式</h3><figure class="highlight css"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line"><span class="selector-class">.box</span>&#123;</span><br><span class="line"> <span class="attribute">-moz-align-items</span>: center;</span><br><span class="line"> <span class="attribute">-webkit-align-items</span>: center;</span><br><span class="line"> <span class="attribute">align-items</span>: center;</span><br><span class="line"> <span class="attribute">-webkit-box-align</span>: center;                                                                                </span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>旧版： box-align: start | end | center | baseline | stretch;</p><p>新版：align-items：flex-start：交叉轴的起点对齐。<br>                              flex-end：交叉轴的终点对齐。<br>                              center：交叉轴的中点对齐。<br>                              baseline: 项目的第一行文字的基线对齐。<br>                              stretch（默认值）：如果项目未设置高度或设为auto，将占满整个容器的高度。</p><h3 id="子元素属性：子元素在水平或者垂直方向占几分"><a href="#子元素属性：子元素在水平或者垂直方向占几分" class="headerlink" title="子元素属性：子元素在水平或者垂直方向占几分"></a>子元素属性：子元素在水平或者垂直方向占几分</h3><figure class="highlight css"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line"><span class="selector-class">.item</span>&#123;</span><br><span class="line"> <span class="attribute">-moz-flex</span>: <span class="number">1</span>;</span><br><span class="line"> <span class="attribute">-webkit-flex</span>: <span class="number">1</span>;</span><br><span class="line"> <span class="attribute">flex</span>: <span class="number">1</span>;</span><br><span class="line"> <span class="attribute">-webkit-box-flex</span>: <span class="number">1.0</span>;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>旧版：box-flex：1.0浮点数字<br>新版：flex：1 数字</p><h3 id="超出要不要换行-不兼容，就是兼容了也无效"><a href="#超出要不要换行-不兼容，就是兼容了也无效" class="headerlink" title="超出要不要换行 不兼容，就是兼容了也无效"></a>超出要不要换行 不兼容，就是兼容了也无效</h3><ul><li>要求换行<figure class="highlight css"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line"><span class="selector-class">.box</span>&#123;</span><br><span class="line"> <span class="attribute">flex-wrap</span>:wrap;</span><br><span class="line"> <span class="attribute">box-lines</span>: multiple; </span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure></li></ul><p>旧版： box-lines: single默认不允许 | multiple 允许;</p><p>新版：flex-wrap: nowrap 不换行</p><pre><code>wrap 换行，第一行在上方wrap-reverse 换行，第一行在下方</code></pre><h3 id="新版的其他语法"><a href="#新版的其他语法" class="headerlink" title="新版的其他语法"></a>新版的其他语法</h3><ol><li><p>行内元素也可以定义flex语法：不常用</p><figure class="highlight css"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line"><span class="selector-class">.box</span>&#123;</span><br><span class="line">  <span class="attribute">display</span>: -webkit-inline-flex;</span><br><span class="line">  <span class="attribute">display</span>: inline-flex;</span><br><span class="line">&#125;：</span><br></pre></td></tr></table></figure></li><li><p>父元素属性align-content属性 定义在多跟抽线的对齐方式，一般是换行以后的对齐方式，只有一条抽线改属性不生效，常用在换行以后有间距的问题：设置align-content：flex-start； 不常用</p><p>align-content：flex-start：与交叉轴的起点对齐。</p><pre><code>flex-end：与交叉轴的终点对齐。center：与交叉轴的中点对齐。space-between：与交叉轴两端对齐，轴线之间的间隔平均分布。space-around：每根轴线两侧的间隔都相等。所以，轴线之间的间隔比轴线与边框的间隔大一倍。stretch（默认值）：轴线占满整个交叉轴。</code></pre></li><li><p>子元素属性flex，是flex-grow, flex-shrink 和 flex-basis的简写，一般只定义子元素占多少份，常用</p></li><li><p>子元素属性flex-grow 定义子元素占一行的多少份，值为数字  不常用</p></li></ol><p>05、子元素属性flex-basis属性  定义了在分配多余空间之前，项目占据的主轴空间 像素单位和百分比，默认auto</p><ol start="6"><li><p>子元素属性flex-shrink属性 定义了子元素的缩小比例，如果所有项目的flex-shrink属性都为1，当空间不足时，都将等比例缩小。如果一个项目的flex-shrink属性为0，其他项目都为1，则空间不足时，前者不缩小。负值无效</p></li><li><p>子元素属性order属性  定义子元素的排列方式，数值越小，越靠前排列，数字</p></li><li><p>子元素属性align-self属性 定义允许单个项目有与其他项目不一样的对齐方式，会覆盖algin-items属性 不常用</p><pre><code>align-self: auto  默认  表示继承父元素                            flex-start  与交叉轴的起点对齐。                 flex-end  与交叉轴的终点对齐。                 center  与交叉轴的中点对齐                 baseline: 项目的第一行文字的基线对齐。            stretch（默认值）：如果项目未设置高度或设为auto，将占满整个容器的高度。</code></pre></li></ol><h3 id="兼容无效"><a href="#兼容无效" class="headerlink" title="兼容无效"></a>兼容无效</h3><p> justify-content: space-around 不能用</p><pre><code>flex-wrap: wrap 不能用</code></pre><h3 id="flex兼容的标准写法"><a href="#flex兼容的标准写法" class="headerlink" title="flex兼容的标准写法"></a>flex兼容的标准写法</h3><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line">-webkit-前缀标准版</span><br><span class="line">-moz-前缀标准版</span><br><span class="line">标准版</span><br><span class="line">-webkit-前缀09版</span><br></pre></td></tr></table></figure><ul><li>试例<figure class="highlight css"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><span class="line"><span class="selector-class">.box</span>&#123;</span><br><span class="line"> <span class="attribute">display</span>: -ms-flexbox; </span><br><span class="line"> <span class="attribute">display</span>: -webkit-flex; </span><br><span class="line"> <span class="attribute">display</span>: flex; </span><br><span class="line"> <span class="attribute">display</span>: -webkit-box; </span><br><span class="line"> <span class="attribute">display</span>: -moz-box; </span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure></li></ul><h3 id="新版的语法"><a href="#新版的语法" class="headerlink" title="新版的语法"></a>新版的语法</h3><p>定义flex:<br><figure class="highlight css"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br></pre></td><td class="code"><pre><span class="line"><span class="selector-class">.box</span>&#123;</span><br><span class="line">    <span class="attribute">display</span>: -webkit-flex; <span class="comment">/*webkit*/</span></span><br><span class="line">    <span class="attribute">display</span>: flex;</span><br><span class="line">&#125;</span><br><span class="line"><span class="comment">/*行内flex*/</span></span><br><span class="line"><span class="selector-class">.box</span>&#123;</span><br><span class="line">    <span class="attribute">display</span>: -webkit-inline-flex; <span class="comment">/*webkit*/</span></span><br><span class="line">    <span class="attribute">display</span>:inline-flex;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure></p><p>父元素属性：<br><figure class="highlight css"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br></pre></td><td class="code"><pre><span class="line"><span class="selector-class">.box</span>&#123;</span><br><span class="line">    <span class="attribute">flex-direction</span>:    row      | row-reverse | column | column-reverse;</span><br><span class="line">         <span class="comment">/*主轴方向：左到右（默认） |   右到左    | 上到下 | 下到上*/</span></span><br><span class="line"> </span><br><span class="line">    <span class="attribute">flex-wrap</span>:    nowrap   | wrap | wrap-reverse;</span><br><span class="line">       <span class="comment">/*换行：不换行（默认） | 换行 | 换行并第一行在下方*/</span></span><br><span class="line"> </span><br><span class="line">    <span class="attribute">flex-flow</span>: &lt;flex-direction&gt; || &lt;flex-wrap&gt;;</span><br><span class="line">     <span class="comment">/*主轴方向和换行简写*/</span></span><br><span class="line"> </span><br><span class="line">    <span class="attribute">justify-content</span>:   flex-start   | flex-end |   center | space-between | space-around;</span><br><span class="line">        <span class="comment">/*主轴对齐方式： 左对齐（默认） |  右对齐  | 居中对齐 |     两端对齐  | 平均分布*/</span></span><br><span class="line"> </span><br><span class="line">    <span class="attribute">align-items</span>:         flex-start    | flex-end | center   | baseline       | stretch;</span><br><span class="line">        <span class="comment">/*交叉轴对齐方式：顶部对齐（默认） | 底部对齐 | 居中对齐 | 上下对齐并铺满 | 文本基线对齐*/</span></span><br><span class="line"> </span><br><span class="line">    <span class="attribute">align-content</span>: flex-start      | flex-end | center   | space-between  | space-around | stretch;</span><br><span class="line">        <span class="comment">/*多主轴对齐：顶部对齐（默认） | 底部对齐   | 居中对齐  | 上下对齐并铺满  | 上下平均分布*/</span></span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure></p><p>子元素属性：<br><figure class="highlight css"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br></pre></td><td class="code"><pre><span class="line"><span class="selector-class">.item</span>&#123;</span><br><span class="line">    order: &lt;integer&gt;; number</span><br><span class="line">    <span class="comment">/*排序：数值越小，越排前，默认为0*/</span></span><br><span class="line"> </span><br><span class="line">    <span class="selector-tag">flex-grow</span>: &lt;<span class="selector-tag">number</span>&gt;; <span class="comment">/* default 0 */</span></span><br><span class="line">    <span class="comment">/*放大：默认0（即如果有剩余空间也不放大，值为1则放大，2是1的双倍大小，以此类推）*/</span></span><br><span class="line"> </span><br><span class="line">    <span class="selector-tag">flex-shrink</span>: &lt;<span class="selector-tag">number</span>&gt;; <span class="comment">/* default 1 */</span></span><br><span class="line">    <span class="comment">/*缩小：默认1（如果空间不足则会缩小，值为0不缩小）*/</span></span><br><span class="line"> </span><br><span class="line">    flex-basis: &lt;length&gt; | auto; /* default auto */</span><br><span class="line">    <span class="comment">/*固定大小：默认为0，可以设置px值，也可以设置百分比大小*/</span></span><br><span class="line"> </span><br><span class="line">    flex: none | [ &lt;'flex-grow'&gt; &lt;'flex-shrink'&gt;? || &lt;'flex-basis'&gt; ]</span><br><span class="line">    <span class="comment">/*flex-grow, flex-shrink 和 flex-basis的简写，默认值为0 1 auto，*/</span></span><br><span class="line"> </span><br><span class="line">    align-self:         auto     | flex-start | flex-end | center   |  baseline      | stretch;</span><br><span class="line">       <span class="comment">/*单独对齐方式：自动（默认） | 顶部对齐   | 底部对齐 | 居中对齐 | 上下对齐并铺满 | 文本基线对齐*/</span></span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure></p><h1 id="后记"><a href="#后记" class="headerlink" title="后记"></a>后记</h1><ul><li>前面是使用过的解决方案后面这些是网上摘录的一些方法，侵权立删</li><li><a href="https://yhf7.github.io/" target="_blank" rel="noopener">欢迎进入我的博客</a>：<a href="https://yhf7.github.io/" target="_blank" rel="noopener">https://yhf7.github.io/</a></li><li>如果有什么侵权的话，请及时添加小编微信以及qq也可以来告诉小编（905477376微信qq通用），谢谢！</li></ul>]]></content>
      
      
      <categories>
          
          <category> Css </category>
          
      </categories>
      
      
        <tags>
            
            <tag> Css笔记 </tag>
            
        </tags>
      
    </entry>
    
    <entry>
      <title>TypeScript 自学笔记4 类</title>
      <link href="/2019/03/10/TypeScript%E7%AC%94%E8%AE%B04/"/>
      <url>/2019/03/10/TypeScript%E7%AC%94%E8%AE%B04/</url>
      
        <content type="html"><![CDATA[<link rel="stylesheet" class="aplayer-secondary-style-marker" href="/assets/css/APlayer.min.css"><script src="/assets/js/APlayer.min.js" class="aplayer-secondary-script-marker"></script><h1 id="前言"><a href="#前言" class="headerlink" title="前言"></a>前言</h1><ul><li>自学TypeScript第四天</li><li>今天对学过java的很友好基本上都是后端的东西</li></ul><h1 id="介绍"><a href="#介绍" class="headerlink" title="介绍"></a>介绍</h1><ul><li>传统的JavaScript程序使用函数和基于原型的继承来创建可重用的组件，但对于熟悉使用面向对象方式的程序员来讲就有些棘手，因为他们用的是基于类的继承并且对象是由类构建出来的。 从ECMAScript 2015，也就是ECMAScript 6开始，JavaScript程序员将能够使用基于类的面向对象的方式。 使用TypeScript，我们允许开发者现在就使用这些特性，并且编译后的JavaScript可以在所有主流浏览器和平台上运行，而不需要等到下个JavaScript版本。</li></ul><h1 id="类"><a href="#类" class="headerlink" title="类"></a>类</h1><ul><li>类我们学过后端的话对这个就会非常的熟悉，类在后端是一个非常常用的属性，在es6开始js增加了类</li><li>这个添加对很多开发者来说算是一个福音</li><li><p>如果你使用过C#或Java，你会对这种语法非常熟悉。 我们声明一个 Greeter类。这个类有3个成员：一个叫做 greeting的属性，一个构造函数和一个 greet方法。</p></li><li><p>你会注意到，我们在引用任何一个类成员的时候都用了 this。 它表示我们访问的是类的成员。</p></li><li><p>最后一行，我们使用 new构造了 Greeter类的一个实例。 它会调用之前定义的构造函数，创建一个 Greeter类型的新对象，并执行构造函数初始化它。</p></li><li>作为一个学过后端的人，我对这一个类感到非常熟悉也很容易上手</li></ul><figure class="highlight typescript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">class</span> Greeter &#123;</span><br><span class="line">    greeting: <span class="built_in">string</span>;</span><br><span class="line">    <span class="keyword">constructor</span>(<span class="params">message: <span class="built_in">string</span></span>) &#123;</span><br><span class="line">        <span class="keyword">this</span>.greeting = message;</span><br><span class="line">    &#125;</span><br><span class="line">    greet() &#123;</span><br><span class="line">        <span class="keyword">return</span> <span class="string">"Hello, "</span> + <span class="keyword">this</span>.greeting;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="keyword">let</span> greeter = <span class="keyword">new</span> Greeter(<span class="string">"world"</span>);</span><br><span class="line"></span><br><span class="line"><span class="built_in">console</span>.log(greeter.greet())</span><br></pre></td></tr></table></figure><h1 id="继承"><a href="#继承" class="headerlink" title="继承"></a>继承</h1><ul><li>继承也是很常见的</li><li>在TypeScript里，我们可以使用常用的面向对象模式。 基于类的程序设计中一种最基本的模式是允许使用继承来扩展现有的类。</li><li><p>很简单的说就是，儿子继承了爸爸的所有东西</p><figure class="highlight typescript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">class</span> Animal &#123;</span><br><span class="line">    move(distanceInMeters: <span class="built_in">number</span> = <span class="number">0</span>) &#123;</span><br><span class="line">        <span class="built_in">console</span>.log(<span class="string">`Animal moved <span class="subst">$&#123;distanceInMeters&#125;</span>m.`</span>);</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="keyword">class</span> Dog <span class="keyword">extends</span> Animal &#123;</span><br><span class="line">    bark() &#123;</span><br><span class="line">        <span class="built_in">console</span>.log(<span class="string">'Woof! Woof!'</span>);</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="keyword">const</span> dog = <span class="keyword">new</span> Dog();</span><br><span class="line">dog.bark();</span><br><span class="line">dog.move(<span class="number">10</span>);</span><br><span class="line">dog.bark();</span><br></pre></td></tr></table></figure></li><li><p>这个例子展示了最基本的继承：类从基类中继承了属性和方法。 这里， Dog是一个 派生类，它派生自 Animal 基类，通过 extends关键字。 派生类通常被称作 子类，基类通常被称作 超类。</p></li></ul><hr><ul><li>这个例子展示了一些上面没有提到的特性。 这一次，我们使用 extends关键字创建了 Animal的两个子类： Horse和 Snake。</li><li>与前一个例子的不同点是，派生类包含了一个构造函数，它 必须调用 super()，它会执行基类的构造函数。 而且，在构造函数里访问 this的属性之前，我们 一定要调用 super()。 这个是TypeScript强制执行的一条重要规则。</li><li>这个例子演示了如何在子类里可以重写父类的方法。 Snake类和 Horse类都创建了 move方法，它们重写了从 Animal继承来的 move方法，使得 move方法根据不同的类而具有不同的功能。 注意，即使 tom被声明为 Animal类型，但因为它的值是 Horse，调用 tom.move(34)时，它会调用 Horse里重写的方法：<figure class="highlight typescript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">class</span> Animal &#123;</span><br><span class="line">    <span class="comment">// 属性</span></span><br><span class="line">    name: <span class="built_in">string</span>;</span><br><span class="line">    <span class="comment">// 构造函数</span></span><br><span class="line">    <span class="keyword">constructor</span>(<span class="params">theName: <span class="built_in">string</span></span>) &#123; <span class="keyword">this</span>.name = theName; &#125;</span><br><span class="line">    <span class="comment">// 内部方法</span></span><br><span class="line">    move(distanceInMeters: <span class="built_in">number</span> = <span class="number">0</span>) &#123;</span><br><span class="line">        <span class="built_in">console</span>.log(<span class="string">`<span class="subst">$&#123;this.name&#125;</span> moved <span class="subst">$&#123;distanceInMeters&#125;</span>m.`</span>);</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="keyword">class</span> Snake <span class="keyword">extends</span> Animal &#123;</span><br><span class="line">    <span class="comment">// 构造函数，super调用父级构造函数</span></span><br><span class="line">    <span class="keyword">constructor</span>(<span class="params">name: <span class="built_in">string</span></span>) &#123; <span class="keyword">super</span>(name); &#125;</span><br><span class="line">    <span class="comment">// 子类重写方法</span></span><br><span class="line">    move(distanceInMeters = <span class="number">5</span>) &#123;</span><br><span class="line">        <span class="built_in">console</span>.log(<span class="string">"Slithering..."</span>);</span><br><span class="line">        <span class="comment">// 内部调用了父级的方法</span></span><br><span class="line">        <span class="keyword">super</span>.move(distanceInMeters);</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="keyword">class</span> Horse <span class="keyword">extends</span> Animal &#123;</span><br><span class="line">    <span class="keyword">constructor</span>(<span class="params">name: <span class="built_in">string</span></span>) &#123; <span class="keyword">super</span>(name); &#125;</span><br><span class="line">    move(distanceInMeters = <span class="number">45</span>) &#123;</span><br><span class="line">        <span class="built_in">console</span>.log(<span class="string">"Galloping..."</span>);</span><br><span class="line">        <span class="keyword">super</span>.move(distanceInMeters);</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="keyword">let</span> sam = <span class="keyword">new</span> Snake(<span class="string">"Sammy the Python"</span>);</span><br><span class="line"><span class="keyword">let</span> tom: Animal = <span class="keyword">new</span> Horse(<span class="string">"Tommy the Palomino"</span>);</span><br><span class="line"></span><br><span class="line">sam.move();</span><br><span class="line">tom.move(<span class="number">34</span>);</span><br></pre></td></tr></table></figure></li></ul><h1 id="公共，私有与受保护的修饰符"><a href="#公共，私有与受保护的修饰符" class="headerlink" title="公共，私有与受保护的修饰符"></a>公共，私有与受保护的修饰符</h1><h2 id="默认-public-公共类型"><a href="#默认-public-公共类型" class="headerlink" title="默认 public 公共类型"></a>默认 public 公共类型</h2><ul><li>我以前学习java的时候这个属性的要写出来的</li><li>但是js给我们默认了<figure class="highlight typescript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">class</span> Animal &#123;</span><br><span class="line">    <span class="keyword">public</span> name: <span class="built_in">string</span>;</span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">constructor</span>(<span class="params">theName: <span class="built_in">string</span></span>) &#123; <span class="keyword">this</span>.name = theName; &#125;</span><br><span class="line">    <span class="keyword">public</span> move(distanceInMeters: <span class="built_in">number</span>) &#123;</span><br><span class="line">        <span class="built_in">console</span>.log(<span class="string">`<span class="subst">$&#123;this.name&#125;</span> moved <span class="subst">$&#123;distanceInMeters&#125;</span>m.`</span>);</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="comment">// 我们平时都是这么写的</span></span><br><span class="line"><span class="keyword">class</span> Animal &#123;</span><br><span class="line">    name: <span class="built_in">string</span>;</span><br><span class="line">    <span class="keyword">constructor</span>(<span class="params">theName: <span class="built_in">string</span></span>) &#123; <span class="keyword">this</span>.name = theName; &#125;</span><br><span class="line">    move(distanceInMeters: <span class="built_in">number</span>) &#123;</span><br><span class="line">        <span class="built_in">console</span>.log(<span class="string">`<span class="subst">$&#123;this.name&#125;</span> moved <span class="subst">$&#123;distanceInMeters&#125;</span>m.`</span>);</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure></li></ul><h2 id="理解-private-私有化"><a href="#理解-private-私有化" class="headerlink" title="理解 private 私有化"></a>理解 private 私有化</h2><ul><li>private 就是私有化，简单点说就是唯独我有，你们虽都不可以用只可以我自己用</li><li>我自己拥有的连儿子都不可用唯独我自己可以用</li></ul><figure class="highlight typescript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">class</span> Animal &#123;</span><br><span class="line">    <span class="keyword">private</span> name: <span class="built_in">string</span>;</span><br><span class="line">    <span class="keyword">constructor</span>(<span class="params">theName: <span class="built_in">string</span></span>) &#123; <span class="keyword">this</span>.name = theName; &#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="comment">// 定义使用报错</span></span><br><span class="line"><span class="keyword">new</span> Animal(<span class="string">"Cat"</span>).name; <span class="comment">// 错误: 'name' 是私有的.</span></span><br><span class="line"></span><br><span class="line"><span class="comment">// 我们来试试在继承中能不能用，儿子继承父亲的东西</span></span><br><span class="line"></span><br><span class="line"><span class="keyword">class</span> Test &#123;</span><br><span class="line">    <span class="keyword">constructor</span>(<span class="params">test: <span class="built_in">string</span></span>) &#123;</span><br><span class="line">        <span class="keyword">super</span>(test)</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    Test () &#123;</span><br><span class="line">        <span class="built_in">console</span>.log(<span class="keyword">this</span>.name) <span class="comment">// 注意了，这样也是错误的</span></span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><hr><ul><li>其实就是说不是同一个爸爸生出来的都不算有关系。</li><li>TypeScript使用的是结构性类型系统。 当我们比较两种不同的类型时，并不在乎它们从何处而来，如果所有成员的类型都是兼容的，我们就认为它们的类型是兼容的</li><li>然而，当我们比较带有 private或 protected成员的类型的时候，情况就不同了。 如果其中一个类型里包含一个 private成员，那么只有当另外一个类型中也存在这样一个 private成员， 并且它们都是来自同一处声明时，我们才认为这两个类型是兼容的。 对于 protected成员也使用这个规则</li><li>这个例子中有 Animal和 Rhino两个类， Rhino是 Animal类的子类。 还有一个 Employee类，其类型看上去与 Animal是相同的。 我们创建了几个这些类的实例，并相互赋值来看看会发生什么。 因为 Animal和 Rhino共享了来自 Animal里的私有成员定义 private name: string，因此它们是兼容的。 然而 Employee却不是这样。当把 Employee赋值给 Animal的时候，得到一个错误，说它们的类型不兼容。 尽管 Employee里也有一个私有成员 name，但它明显不是 Animal里面定义的那个。<figure class="highlight typescript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">class</span> Animal &#123;</span><br><span class="line">    <span class="keyword">private</span> name: <span class="built_in">string</span>;</span><br><span class="line">    <span class="keyword">constructor</span>(<span class="params">theName: <span class="built_in">string</span></span>) &#123; <span class="keyword">this</span>.name = theName; &#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="keyword">class</span> Rhino <span class="keyword">extends</span> Animal &#123;</span><br><span class="line">    <span class="keyword">constructor</span>(<span class="params"></span>) &#123; <span class="keyword">super</span>(<span class="string">"Rhino"</span>); &#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="keyword">class</span> Employee &#123;</span><br><span class="line">    <span class="keyword">private</span> name: <span class="built_in">string</span>;</span><br><span class="line">    <span class="keyword">constructor</span>(<span class="params">theName: <span class="built_in">string</span></span>) &#123; <span class="keyword">this</span>.name = theName; &#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="keyword">let</span> animal = <span class="keyword">new</span> Animal(<span class="string">"Goat"</span>);</span><br><span class="line"><span class="keyword">let</span> rhino = <span class="keyword">new</span> Rhino();</span><br><span class="line"><span class="keyword">let</span> employee = <span class="keyword">new</span> Employee(<span class="string">"Bob"</span>);</span><br><span class="line"></span><br><span class="line">animal = rhino;</span><br><span class="line">animal = employee</span><br></pre></td></tr></table></figure></li></ul><h1 id="理解-protected-（比私有低一个级别）"><a href="#理解-protected-（比私有低一个级别）" class="headerlink" title="理解 protected （比私有低一个级别）"></a>理解 protected （比私有低一个级别）</h1><ul><li>和私有化几乎一模一样</li><li>这个属性比私有化低一个级别，儿子可以用了</li><li>在继承中还是可以使用的</li></ul><ol><li>属性<figure class="highlight typescript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">// 这个例子比较经典</span></span><br><span class="line"><span class="keyword">class</span> Person &#123;</span><br><span class="line">    <span class="keyword">protected</span> name: <span class="built_in">string</span>;</span><br><span class="line">    <span class="keyword">constructor</span>(<span class="params">name: <span class="built_in">string</span></span>) &#123; <span class="keyword">this</span>.name = name; &#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="comment">// 继承</span></span><br><span class="line"><span class="keyword">class</span> Employee <span class="keyword">extends</span> Person &#123;</span><br><span class="line">    <span class="keyword">private</span> department: <span class="built_in">string</span>;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">constructor</span>(<span class="params">name: <span class="built_in">string</span>, department: <span class="built_in">string</span></span>) &#123;</span><br><span class="line">        <span class="keyword">super</span>(name)</span><br><span class="line">        <span class="keyword">this</span>.department = department;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">public</span> getElevatorPitch() &#123;</span><br><span class="line">        <span class="comment">// 继承类里面是可以使用父级的name的</span></span><br><span class="line">        <span class="keyword">return</span> <span class="string">`Hello, my name is <span class="subst">$&#123;this.name&#125;</span> and I work in <span class="subst">$&#123;this.department&#125;</span>.`</span>;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="keyword">let</span> howard = <span class="keyword">new</span> Employee(<span class="string">"Howard"</span>, <span class="string">"Sales"</span>);</span><br><span class="line"><span class="built_in">console</span>.log(howard.getElevatorPitch());</span><br><span class="line"><span class="comment">// 外面就不可用了</span></span><br><span class="line"><span class="built_in">console</span>.log(howard.name); <span class="comment">// 错误</span></span><br></pre></td></tr></table></figure></li></ol><hr><ol start="2"><li>构造函数也是可以被保护起来的</li></ol><ul><li>在外面是无法使用的哈哈哈，起到了很好的保护作用<figure class="highlight typescript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">class</span> Person &#123;</span><br><span class="line">    <span class="keyword">protected</span> name: <span class="built_in">string</span>;</span><br><span class="line">    <span class="keyword">protected</span> <span class="keyword">constructor</span>(<span class="params">theName: <span class="built_in">string</span></span>) &#123; <span class="keyword">this</span>.name = theName; &#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="comment">// Employee 能够继承 Person</span></span><br><span class="line"><span class="keyword">class</span> Employee <span class="keyword">extends</span> Person &#123;</span><br><span class="line">    <span class="keyword">private</span> department: <span class="built_in">string</span>;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">constructor</span>(<span class="params">name: <span class="built_in">string</span>, department: <span class="built_in">string</span></span>) &#123;</span><br><span class="line">        <span class="keyword">super</span>(name);</span><br><span class="line">        <span class="keyword">this</span>.department = department;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">public</span> getElevatorPitch() &#123;</span><br><span class="line">        <span class="keyword">return</span> <span class="string">`Hello, my name is <span class="subst">$&#123;this.name&#125;</span> and I work in <span class="subst">$&#123;this.department&#125;</span>.`</span>;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="keyword">let</span> howard = <span class="keyword">new</span> Employee(<span class="string">"Howard"</span>, <span class="string">"Sales"</span>);</span><br><span class="line"><span class="keyword">let</span> john = <span class="keyword">new</span> Person(<span class="string">"John"</span>); <span class="comment">// 错误: 'Person' 的构造函数是被保护的.</span></span><br></pre></td></tr></table></figure></li></ul><h1 id="readonly修饰符-（只读）"><a href="#readonly修饰符-（只读）" class="headerlink" title="readonly修饰符 （只读）"></a>readonly修饰符 （只读）</h1><ul><li>你可以使用 readonly关键字将属性设置为只读的。 只读属性必须在声明时或构造函数里被初始化</li><li>说白了只能看看不能改变，一开始就定义好</li><li>就好像你妈打你只能挨着不能还手<figure class="highlight typescript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">class</span> Octopus &#123;</span><br><span class="line">    readonly name: <span class="built_in">string</span>;</span><br><span class="line">    readonly numberOfLegs: <span class="built_in">number</span> = <span class="number">8</span>;</span><br><span class="line">    <span class="keyword">constructor</span> (<span class="params">theName: <span class="built_in">string</span></span>) &#123;</span><br><span class="line">        <span class="keyword">this</span>.name = theName;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br><span class="line"><span class="keyword">let</span> dad = <span class="keyword">new</span> Octopus(<span class="string">"Man with the 8 strong legs"</span>);</span><br><span class="line">dad.name = <span class="string">"Man with the 3-piece suit"</span>; <span class="comment">// 错误! name 是只读的.</span></span><br></pre></td></tr></table></figure></li></ul><hr><h2 id="参数属性"><a href="#参数属性" class="headerlink" title="参数属性"></a>参数属性</h2><ul><li>参数的自带属性然我们可以减少一些写法</li><li>在上面的例子中，我们必须在Octopus类里定义一个只读成员 name和一个参数为 theName的构造函数，并且立刻将 theName的值赋给 name，这种情况经常会遇到。 参数属性可以方便地让我们在一个地方定义并初始化一个成员。 下面的例子是对之前 Octopus类的修改版，使用了参数属性：</li><li>参数属性通过给构造函数参数前面添加一个访问限定符来声明。 使用 private限定一个参数属性会声明并初始化一个私有成员；对于 public和 protected来说也是一样。<figure class="highlight typescript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">// 在这里可以验证，自读属性会自动初始化一个私有成员</span></span><br><span class="line"><span class="keyword">class</span> Octopus &#123;</span><br><span class="line">    readonly numberOfLegs: <span class="built_in">number</span> = <span class="number">8</span>;</span><br><span class="line">    <span class="keyword">constructor</span>(<span class="params">readonly name: <span class="built_in">string</span></span>) &#123;</span><br><span class="line">        <span class="comment">// 在这里可以得到证实</span></span><br><span class="line">        <span class="keyword">this</span>.name = name;</span><br><span class="line">    &#125;</span><br><span class="line">    test () &#123;</span><br><span class="line">        <span class="keyword">return</span> <span class="keyword">this</span>.name;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="keyword">let</span> test1 = <span class="keyword">new</span> Octopus(<span class="string">'YHF'</span>);</span><br><span class="line"><span class="built_in">console</span>.log(test1.test()); <span class="comment">// YHF</span></span><br></pre></td></tr></table></figure></li></ul><h1 id="存取器-（get-set，es5以上才可以用，编译会报错但是可以使用的）"><a href="#存取器-（get-set，es5以上才可以用，编译会报错但是可以使用的）" class="headerlink" title="存取器 （get/set，es5以上才可以用，编译会报错但是可以使用的）"></a>存取器 （get/set，es5以上才可以用，编译会报错但是可以使用的）</h1><ul><li>这个get/set 写java的真的在熟悉不过了，这个是结合私有化属性使用的</li><li>私有化属性，就是通过get/set来限制学习</li><li>TypeScript支持通过getters/setters来截取对对象成员的访问。 它能帮助你有效的控制对对象成员的访问</li><li>注意：首先，存取器要求你将编译器设置为输出ECMAScript 5或更高。 不支持降级到ECMAScript 3。 其次，只带有 get不带有 set的存取器自动被推断为 readonly。 这在从代码生成 .d.ts文件时是有帮助的，因为利用这个属性的用户会看到不允许够改变它的值。<figure class="highlight typescript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">// 版本1</span></span><br><span class="line"><span class="comment">// 在这里面fullname可以随意更改，确实方便也带来了很多麻烦</span></span><br><span class="line"><span class="keyword">class</span> Employee &#123;</span><br><span class="line">    fullName: <span class="built_in">string</span>;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="keyword">let</span> employee = <span class="keyword">new</span> Employee();</span><br><span class="line">employee.fullName = <span class="string">"Bob Smith"</span>;</span><br><span class="line"><span class="keyword">if</span> (employee.fullName) &#123;</span><br><span class="line">    <span class="built_in">console</span>.log(employee.fullName);</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="comment">// 升级版，设置权限</span></span><br><span class="line"><span class="keyword">let</span> passcode = <span class="string">"secret passcode"</span>;</span><br><span class="line"></span><br><span class="line"><span class="keyword">class</span> Employee &#123;</span><br><span class="line">    <span class="keyword">private</span> _fullName: <span class="built_in">string</span>;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">get</span> fullName(): <span class="built_in">string</span> &#123;</span><br><span class="line">        <span class="keyword">return</span> <span class="keyword">this</span>._fullName;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">set</span> fullName(newName: <span class="built_in">string</span>) &#123;</span><br><span class="line">        <span class="keyword">if</span> (passcode &amp;&amp; passcode == <span class="string">"secret passcode"</span>) &#123;</span><br><span class="line">            <span class="keyword">this</span>._fullName = newName;</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="keyword">else</span> &#123;</span><br><span class="line">            <span class="built_in">console</span>.log(<span class="string">"Error: Unauthorized update of employee!"</span>);</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="keyword">let</span> employee = <span class="keyword">new</span> Employee();</span><br><span class="line">employee.fullName = <span class="string">"Bob Smith"</span>;</span><br><span class="line"><span class="keyword">if</span> (employee.fullName) &#123;</span><br><span class="line">    alert(employee.fullName);</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure></li></ul><h1 id="静态属性"><a href="#静态属性" class="headerlink" title="静态属性"></a>静态属性</h1><ul><li>类的静态属性，每一次调用都是直接通过类名去调用</li><li>哪里都可用的很广泛，无需实例，调用就是实例</li><li>我们也可以创建类的静态成员，这些属性存在于类本身上面而不是类的实例上。 在这个例子里，我们使用 static定义 origin，因为它是所有网格都会用到的属性。 每个实例想要访问这个属性的时候，都要在 origin前面加上类名。 如同在实例属性上使用 this.前缀来访问属性一样，这里我们使用 Grid.来访问静态属性。<figure class="highlight typescript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">class</span> Grid &#123;</span><br><span class="line">    <span class="keyword">static</span> origin = &#123;x: <span class="number">0</span>, y: <span class="number">0</span>&#125;;</span><br><span class="line">    calculateDistanceFromOrigin(point: &#123;x: <span class="built_in">number</span>; y: <span class="built_in">number</span>;&#125;) &#123;</span><br><span class="line">        <span class="keyword">let</span> xDist = (point.x - Grid.origin.x);</span><br><span class="line">        <span class="keyword">let</span> yDist = (point.y - Grid.origin.y);</span><br><span class="line">        <span class="keyword">return</span> <span class="built_in">Math</span>.sqrt(xDist * xDist + yDist * yDist) / <span class="keyword">this</span>.scale;</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">constructor</span> (<span class="params"><span class="keyword">public</span> scale: <span class="built_in">number</span></span>) &#123; &#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="keyword">let</span> grid1 = <span class="keyword">new</span> Grid(<span class="number">1.0</span>);  <span class="comment">// 1x scale</span></span><br><span class="line"><span class="keyword">let</span> grid2 = <span class="keyword">new</span> Grid(<span class="number">5.0</span>);  <span class="comment">// 5x scale</span></span><br><span class="line"></span><br><span class="line"><span class="comment">// 这个今天属性在外面页面可以用的</span></span><br><span class="line"><span class="built_in">console</span>.log(Grid.origin)</span><br><span class="line"></span><br><span class="line"><span class="built_in">console</span>.log(grid1.calculateDistanceFromOrigin(&#123;x: <span class="number">10</span>, y: <span class="number">10</span>&#125;));</span><br><span class="line"><span class="built_in">console</span>.log(grid2.calculateDistanceFromOrigin(&#123;x: <span class="number">10</span>, y: <span class="number">10</span>&#125;));</span><br></pre></td></tr></table></figure></li></ul><h1 id="抽象类-（和继承差不多）"><a href="#抽象类-（和继承差不多）" class="headerlink" title="抽象类 （和继承差不多）"></a>抽象类 （和继承差不多）</h1><ul><li>又是一个后端的最爱</li><li>抽象类，就是只是写元素名，方法名，但继承了这个抽象类，并实例化里面但抽象方法</li><li>抽象类做为其它派生类的基类使用。 它们一般不会直接被实例化。 不同于接口，抽象类可以包含成员的实现细节。 abstract关键字是用于定义抽象类和在抽象类内部定义抽象方法</li></ul><figure class="highlight typescript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">// 抽象类</span></span><br><span class="line"><span class="keyword">abstract</span> <span class="keyword">class</span> Department &#123;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">constructor</span>(<span class="params"><span class="keyword">public</span> name: <span class="built_in">string</span></span>) &#123;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    printName(): <span class="built_in">void</span> &#123;</span><br><span class="line">        <span class="built_in">console</span>.log(<span class="string">'Department name: '</span> + <span class="keyword">this</span>.name);</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="comment">// 抽象方法</span></span><br><span class="line">    <span class="keyword">abstract</span> printMeeting(): <span class="built_in">void</span>; <span class="comment">// 必须在派生类中实现</span></span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="comment">// 继承抽象类</span></span><br><span class="line"><span class="keyword">class</span> AccountingDepartment <span class="keyword">extends</span> Department &#123;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">constructor</span>(<span class="params"></span>) &#123;</span><br><span class="line">        <span class="keyword">super</span>(<span class="string">'Accounting and Auditing'</span>); <span class="comment">// 在派生类的构造函数中必须调用 super()</span></span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    printMeeting(): <span class="built_in">void</span> &#123;</span><br><span class="line">        <span class="built_in">console</span>.log(<span class="string">'The Accounting Department meets each Monday at 10am.'</span>);</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    generateReports(): <span class="built_in">void</span> &#123;</span><br><span class="line">        <span class="built_in">console</span>.log(<span class="string">'Generating accounting reports...'</span>);</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="comment">// 声明一个抽象类但属性</span></span><br><span class="line"><span class="keyword">let</span> department: Department; <span class="comment">// 允许创建一个对抽象类型的引用</span></span><br><span class="line"><span class="comment">// 抽象类是不可实例的</span></span><br><span class="line">department = <span class="keyword">new</span> Department(); <span class="comment">// 错误: 不能创建一个抽象类的实例</span></span><br><span class="line">department = <span class="keyword">new</span> AccountingDepartment(); <span class="comment">// 允许对一个抽象子类进行实例化和赋值</span></span><br><span class="line">department.printName();</span><br><span class="line">department.printMeeting();</span><br><span class="line"><span class="comment">// 这个错误并不是因为不可以这样去写，只是声明但时候抽象类里面没有</span></span><br><span class="line">department.generateReports(); <span class="comment">// 错误: 方法在声明的抽象类中不存在</span></span><br></pre></td></tr></table></figure><h1 id="高级技巧"><a href="#高级技巧" class="headerlink" title="高级技巧"></a>高级技巧</h1><h2 id="构造函数"><a href="#构造函数" class="headerlink" title="构造函数"></a>构造函数</h2><ul><li>当你在TypeScript里声明了一个类的时候，实际上同时声明了很多东西。 首先就是类的 实例的类型</li><li>这里，我们写了 let greeter: Greeter，意思是 Greeter类的实例的类型是 Greeter。 这对于用过其它面向对象语言的程序员来讲已经是老习惯了。</li><li>let Greeter将被赋值为构造函数。 当我们调用 new并执行了这个函数后，便会得到一个类的实例。 这个构造函数也包含了类的所有静态属性。 换个角度说，我们可以认为类具有 实例部分与 静态部分这两个部分。<figure class="highlight typescript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">class</span> Greeter &#123;</span><br><span class="line">    greeting: <span class="built_in">string</span>;</span><br><span class="line">    <span class="keyword">constructor</span>(<span class="params">message: <span class="built_in">string</span></span>) &#123;</span><br><span class="line">        <span class="keyword">this</span>.greeting = message;</span><br><span class="line">    &#125;</span><br><span class="line">    greet() &#123;</span><br><span class="line">        <span class="keyword">return</span> <span class="string">"Hello, "</span> + <span class="keyword">this</span>.greeting;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="keyword">let</span> greeter: Greeter;</span><br><span class="line">greeter = <span class="keyword">new</span> Greeter(<span class="string">"world"</span>);</span><br><span class="line"><span class="built_in">console</span>.log(greeter.greet());</span><br></pre></td></tr></table></figure></li></ul><hr><ul><li>这里会比较绕不过是解释构造函数</li><li>这个例子里， greeter1与之前看到的一样。 我们实例化 Greeter类，并使用这个对象。 与我们之前看到的一样。<br>再之后，我们直接使用类。 我们创建了一个叫做 greeterMaker的变量。 这个变量保存了这个类或者说保存了类构造函数。 然后我们使用 typeof Greeter，意思是取Greeter类的类型，而不是实例的类型。 或者更确切的说，”告诉我 Greeter标识符的类型”，也就是构造函数的类型。 这个类型包含了类的所有静态成员和构造函数。 之后，就和前面一样，我们在 greeterMaker上使用 new，创建 Greeter的实例。<figure class="highlight typescript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">class</span> Greeter &#123;</span><br><span class="line">    <span class="keyword">static</span> standardGreeting = <span class="string">"Hello, there"</span>;</span><br><span class="line">    greeting: <span class="built_in">string</span>;</span><br><span class="line">    greet() &#123;</span><br><span class="line">        <span class="keyword">if</span> (<span class="keyword">this</span>.greeting) &#123;</span><br><span class="line">            <span class="keyword">return</span> <span class="string">"Hello, "</span> + <span class="keyword">this</span>.greeting;</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="keyword">else</span> &#123;</span><br><span class="line">            <span class="keyword">return</span> Greeter.standardGreeting;</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="keyword">let</span> greeter1: Greeter;</span><br><span class="line">greeter1 = <span class="keyword">new</span> Greeter();</span><br><span class="line"><span class="built_in">console</span>.log(greeter1.greet());</span><br><span class="line"></span><br><span class="line"><span class="keyword">let</span> greeterMaker: <span class="keyword">typeof</span> Greeter = Greeter;</span><br><span class="line">greeterMaker.standardGreeting = <span class="string">"Hey there!"</span>;</span><br><span class="line"></span><br><span class="line"><span class="keyword">let</span> greeter2: Greeter = <span class="keyword">new</span> greeterMaker();</span><br><span class="line"><span class="built_in">console</span>.log(greeter2.greet());</span><br></pre></td></tr></table></figure></li></ul><h2 id="把类当做接口使用"><a href="#把类当做接口使用" class="headerlink" title="把类当做接口使用"></a>把类当做接口使用</h2><ul><li>如上一节里所讲的，类定义会创建两个东西：类的实例类型和一个构造函数。 因为类可以创建出类型，所以你能够在允许使用接口的地方使用类。<figure class="highlight typescript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">class</span> Point &#123;</span><br><span class="line">    x: <span class="built_in">number</span>;</span><br><span class="line">    y: <span class="built_in">number</span>;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="keyword">interface</span> Point3d <span class="keyword">extends</span> Point &#123;</span><br><span class="line">    z: <span class="built_in">number</span>;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="keyword">let</span> point3d: Point3d = &#123;x: <span class="number">1</span>, y: <span class="number">2</span>, z: <span class="number">3</span>&#125;;</span><br></pre></td></tr></table></figure></li></ul><h1 id="后记"><a href="#后记" class="headerlink" title="后记"></a>后记</h1><ul><li>这个就是我学习Ts的第四天的笔记，欢迎更多的同行大哥指导交流</li><li><a href="https://yhf7.github.io/" target="_blank" rel="noopener">欢迎进入我的博客</a>：<a href="https://yhf7.github.io/" target="_blank" rel="noopener">https://yhf7.github.io/</a></li><li>如果有什么侵权的话，请及时添加小编微信以及qq也可以来告诉小编（905477376微信qq通用），谢谢！</li></ul>]]></content>
      
      
      <categories>
          
          <category> TypeScript </category>
          
      </categories>
      
      
        <tags>
            
            <tag> TypeScript 笔记 </tag>
            
        </tags>
      
    </entry>
    
    <entry>
      <title>TypeScript 自学笔记3 接口</title>
      <link href="/2019/03/09/TypeScript%E7%AC%94%E8%AE%B03/"/>
      <url>/2019/03/09/TypeScript%E7%AC%94%E8%AE%B03/</url>
      
        <content type="html"><![CDATA[<link rel="stylesheet" class="aplayer-secondary-style-marker" href="/assets/css/APlayer.min.css"><script src="/assets/js/APlayer.min.js" class="aplayer-secondary-script-marker"></script><h1 id="前言"><a href="#前言" class="headerlink" title="前言"></a>前言</h1><ul><li>个人学习笔记，仅供参考</li></ul><h1 id="介绍"><a href="#介绍" class="headerlink" title="介绍"></a>介绍</h1><ul><li>TypeScript的核心原则之一是对值所具有的结构进行类型检查。 它有时被称做“鸭式辨型法”或“结构性子类型化”。 在TypeScript里，接口的作用就是为这些类型命名和为你的代码或第三方代码定义契约。</li></ul><h1 id="接口初探"><a href="#接口初探" class="headerlink" title="接口初探"></a>接口初探</h1><ul><li>类型检查器会查看printLabel的调用。 printLabel有一个参数，并要求这个对象参数有一个名为label类型为string的属性。 需要注意的是，我们传入的对象参数实际上会包含很多属性，但是编译器只会检查那些必需的属性是否存在，并且其类型是否匹配</li><li>不但要求传入参数还要求这个参数里面有一个名为label的string参数</li><li>如果没有把label这个必须传入的参数传入就会报错<figure class="highlight typescript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line"><span class="function"><span class="keyword">function</span> <span class="title">printLabel</span>(<span class="params">labelledObj: &#123; label: <span class="built_in">string</span> &#125;</span>) </span>&#123;</span><br><span class="line">  <span class="built_in">console</span>.log(labelledObj.label);</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="keyword">let</span> myObj = &#123; size: <span class="number">10</span>, label: <span class="string">"Size 10 Object"</span> &#125;;</span><br><span class="line">printLabel(myObj);</span><br></pre></td></tr></table></figure></li></ul><hr><ul><li>重写这个例子</li><li>类型检查器不会去检查属性的顺序，只要相应的属性存在并且类型也是对的就可以</li><li>interface 泛指接口<figure class="highlight typescript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">// 接口     后面这个是名称</span></span><br><span class="line"><span class="comment">// 定义一个名为LabelledValue的接口</span></span><br><span class="line"><span class="keyword">interface</span> LabelledValue &#123;</span><br><span class="line">  label: <span class="built_in">string</span>;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="comment">// 在接收参数时，作为指定类型引用</span></span><br><span class="line"><span class="function"><span class="keyword">function</span> <span class="title">printLabel</span>(<span class="params">labelledObj: LabelledValue</span>) </span>&#123;</span><br><span class="line">  <span class="built_in">console</span>.log(labelledObj.label);</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="keyword">let</span> myObj = &#123;size: <span class="number">10</span>, label: <span class="string">"Size 10 Object"</span>&#125;;</span><br><span class="line">printLabel(myObj);</span><br></pre></td></tr></table></figure></li></ul><h1 id="可选属性"><a href="#可选属性" class="headerlink" title="可选属性"></a>可选属性</h1><ul><li>这个可选属性我们在之前也有学过了</li><li>带有可选属性的接口与普通的接口定义差不多，只是在可选属性名字定义的后面加一个?符号</li><li>接口里的属性不全都是必需的。 有些是只在某些条件下存在，或者根本不存在。 可选属性在应用“option bags”模式时很常用，即给函数传入的参数对象中只有部分属性赋值了。</li></ul><hr><ul><li>下面是应用了“option bags”的例子：</li><li>这里考到了两个知识点<ul><li><ol><li>可选属性的使用</li></ol></li><li><ol start="2"><li>返回类型的指定</li></ol></li></ul></li><li>重点：<ul><li>可选参数</li><li>返回参数<figure class="highlight typescript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">// 接口 </span></span><br><span class="line"><span class="keyword">interface</span> SquareConfig &#123;</span><br><span class="line">    <span class="comment">// 两个可选属性</span></span><br><span class="line">  color?: <span class="built_in">string</span>;</span><br><span class="line">  width?: <span class="built_in">number</span>;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="comment">//         函数参数调用接口，可不传参数，给空对象</span></span><br><span class="line"><span class="comment">//          但是返回中，指定了必须返回 color 和area这两个属性</span></span><br><span class="line"><span class="function"><span class="keyword">function</span> <span class="title">createSquare</span>(<span class="params">config: SquareConfig</span>): </span>&#123;color: <span class="built_in">string</span>; area: <span class="built_in">number</span>&#125; &#123;</span><br><span class="line">  <span class="keyword">let</span> newSquare = &#123;color: <span class="string">"white"</span>, area: <span class="number">100</span>&#125;;</span><br><span class="line">  <span class="keyword">if</span> (config.color) &#123;</span><br><span class="line">    newSquare.color = config.color;</span><br><span class="line">  &#125;</span><br><span class="line">  <span class="keyword">if</span> (config.width) &#123;</span><br><span class="line">    newSquare.area = config.width * config.width;</span><br><span class="line">  &#125;</span><br><span class="line">  <span class="keyword">return</span> newSquare;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="keyword">let</span> mySquare = createSquare(&#123;color: <span class="string">"black"</span>&#125;);</span><br></pre></td></tr></table></figure></li></ul></li></ul><h1 id="只读属性-（readonly）"><a href="#只读属性-（readonly）" class="headerlink" title="只读属性 （readonly）"></a>只读属性 （readonly）</h1><ul><li>在Ts中更好的体现了，权限的控制</li><li>限制为只读属性</li><li>一些对象属性只能在对象刚刚创建的时候修改其值。 你可以在属性名前用 readonly来指定只读属性<figure class="highlight typescript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">// 1. 定义一个接口，x变量设置为只读</span></span><br><span class="line"><span class="keyword">interface</span> Point &#123;</span><br><span class="line">    readonly x: <span class="built_in">number</span>;</span><br><span class="line">    readonly y: <span class="built_in">number</span>;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="comment">// 2. 构造出一个point的对象</span></span><br><span class="line"><span class="keyword">let</span> p1: Point = &#123;x:<span class="number">10</span>,y:<span class="number">20</span>&#125;</span><br><span class="line"></span><br><span class="line"><span class="comment">// 3.尝试改变内部的x值,会说这是个只读属性不能修改</span></span><br><span class="line">p1.x = <span class="number">5</span>;<span class="comment">// err Cannot assign to 'x' because it is a read-only property.</span></span><br></pre></td></tr></table></figure></li></ul><hr><h2 id="ReadonlyArray-只读数组"><a href="#ReadonlyArray-只读数组" class="headerlink" title="ReadonlyArray 只读数组"></a>ReadonlyArray<t> 只读数组</t></h2><ul><li>不要以为只有数据有，数组也是有的哦</li><li>ReadonlyArray<t> 类型用于数组</t></li><li>一旦创建后无法更改，不能赋值，也不能赋值给别的数据<figure class="highlight typescript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">let</span> a: <span class="built_in">number</span>[] = [<span class="number">1</span>, <span class="number">2</span>, <span class="number">3</span>, <span class="number">4</span>];</span><br><span class="line"><span class="keyword">let</span> ro: ReadonlyArray&lt;<span class="built_in">number</span>&gt; = a;</span><br><span class="line">ro[<span class="number">0</span>] = <span class="number">12</span>; <span class="comment">// error!</span></span><br><span class="line">ro.push(<span class="number">5</span>); <span class="comment">// error!</span></span><br><span class="line">ro.length = <span class="number">100</span>; <span class="comment">// error!</span></span><br><span class="line">a = ro; <span class="comment">// error!</span></span><br></pre></td></tr></table></figure></li></ul><hr><ul><li>ReadonlyArray赋值到一个普通数组也是不可以的</li><li>但是有一种情况可以赋值给别人那就是使用类型断言重写</li><li>这样就是可以赋值的<figure class="highlight typescript"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">let</span> b = ro <span class="keyword">as</span> <span class="built_in">number</span>[];</span><br></pre></td></tr></table></figure></li></ul><h2 id="readonly-vs-const"><a href="#readonly-vs-const" class="headerlink" title="readonly vs const"></a>readonly vs const</h2><ul><li>最简单判断该用readonly还是const的方法是看要把它做为变量使用还是做为一个属性。 做为变量使用的话用 const，若做为属性则使用readonly</li></ul><h1 id="额外的属性检查"><a href="#额外的属性检查" class="headerlink" title="额外的属性检查"></a>额外的属性检查</h1><h2 id="额外检查错误"><a href="#额外检查错误" class="headerlink" title="额外检查错误"></a>额外检查错误</h2><ul><li>我们学会了可选属性知道了optionbages 模式的使用</li><li>但是把可选属性和传值结合在一起时会发出错误，就是在参数中加入指定类型以外的属性</li><li>ts中定义了类型指定后，会做额外的检查</li><li>虽然是可选属性但是还是报出错误,限制没有属性就会报错</li><li>TypeScript会认为这段代码可能存在bug。 对象字面量会被特殊对待而且会经过 额外属性检查，当将它们赋值给变量或作为参数传递的时候。 如果一个对象字面量存在任何“目标类型”不包含的属性时，你会得到一个错误<figure class="highlight typescript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">interface</span> SquareConfig &#123;</span><br><span class="line">    color?: <span class="built_in">string</span>;</span><br><span class="line">    width?: <span class="built_in">number</span>;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">function</span> <span class="title">createSquare</span>(<span class="params">config: SquareConfig</span>): </span>&#123; color: <span class="built_in">string</span>; area: <span class="built_in">number</span> &#125; &#123;</span><br><span class="line">    <span class="comment">// ...</span></span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="comment">// 注意传入的参数colour</span></span><br><span class="line"><span class="comment">// error: 'colour' not expected in type 'SquareConfig'</span></span><br><span class="line"><span class="comment">// 在指定类型中是没有的</span></span><br><span class="line"><span class="keyword">let</span> mySquare = createSquare(&#123; colour: <span class="string">"red"</span>, width: <span class="number">100</span> &#125;);</span><br></pre></td></tr></table></figure></li></ul><hr><h2 id="解决额外检查错误（绕开检查）"><a href="#解决额外检查错误（绕开检查）" class="headerlink" title="解决额外检查错误（绕开检查）"></a>解决额外检查错误（绕开检查）</h2><h3 id="解决方法一-（断言）"><a href="#解决方法一-（断言）" class="headerlink" title="解决方法一 （断言）"></a>解决方法一 （断言）</h3><ul><li>在传入参数时后面加入断言<figure class="highlight typescript"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">let</span> mySquare = createSquare(&#123; width: <span class="number">100</span>, opacity: <span class="number">0.5</span> &#125; <span class="keyword">as</span> SquareConfig);</span><br></pre></td></tr></table></figure></li></ul><h3 id="解决方法二-（完美解法，添加一个字符串索引签名）"><a href="#解决方法二-（完美解法，添加一个字符串索引签名）" class="headerlink" title="解决方法二 （完美解法，添加一个字符串索引签名）"></a>解决方法二 （完美解法，添加一个字符串索引签名）</h3><ul><li>前提是你能够确定这个对象可能具有某些做为特殊用途使用的额外属性</li><li>如果 SquareConfig带有上面定义的类型的color和width属性，并且还会带有任意数量的其它属性，那么我们可以这样定义它</li><li>所以虽然是最完美的解决方法，但是要一开始就确立是否会带有</li><li>只要它们不是color和width，那么就无所谓它们的类型是什么。<figure class="highlight typescript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">interface</span> SquareConfig &#123;</span><br><span class="line">    color?: <span class="built_in">string</span>;</span><br><span class="line">    width?: <span class="built_in">number</span>;</span><br><span class="line">    <span class="comment">// 字符串索引签名</span></span><br><span class="line">    [propName: <span class="built_in">string</span>]: <span class="built_in">any</span>;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure></li></ul><h3 id="解决方法三-（耍赖皮-没有理解，我觉得这样是一个漏洞）"><a href="#解决方法三-（耍赖皮-没有理解，我觉得这样是一个漏洞）" class="headerlink" title="解决方法三 （耍赖皮,没有理解，我觉得这样是一个漏洞）"></a>解决方法三 （耍赖皮,没有理解，我觉得这样是一个漏洞）</h3><ul><li>将这个对象赋值给一个另一个变量： 因为 squareOptions不会经过额外属性检查，所以编译器不会报错<figure class="highlight typescript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">let</span> squareOptions = &#123; colour: <span class="string">"red"</span>, width: <span class="number">100</span> &#125;;</span><br><span class="line"><span class="keyword">let</span> mySquare = createSquare(squareOptions);</span><br></pre></td></tr></table></figure></li></ul><hr><ul><li>要留意，在像上面一样的简单代码里，你可能不应该去绕开这些检查。 对于包含方法和内部状态的复杂对象字面量来讲，你可能需要使用这些技巧，但是大部额外属性检查错误是真正的bug。 就是说你遇到了额外类型检查出的错误，比如“option bags”，你应该去审查一下你的类型声明。 在这里，如果支持传入 color或colour属性到createSquare，你应该修改SquareConfig定义来体现出这一点。</li></ul><h1 id="函数类型"><a href="#函数类型" class="headerlink" title="函数类型"></a>函数类型</h1><ul><li>接口能够描述JavaScript中对象拥有的各种各样的外形。 除了描述带有属性的普通对象外，接口也可以描述函数类型</li><li>为了使用接口表示函数类型，我们需要给接口定义一个调用签名。 它就像是一个只有参数列表和返回值类型的函数定义。参数列表里的每个参数都需要名字和类型。</li><li>其实和声明函数差不多，只是没有了前面的function和后面的业务</li><li>使用像使用其它接口一样使用这个函数类型的接口。 下例展示了如何创建一个函数类型的变量，并将一个同类型的函数赋值给这个变量<figure class="highlight typescript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">// 定义名为 SearchFunc 的接口</span></span><br><span class="line"><span class="keyword">interface</span> SearchFunc &#123;</span><br><span class="line">  <span class="comment">// 定义参数为source，subString 都为string</span></span><br><span class="line">  <span class="comment">// 返回类型为boolean</span></span><br><span class="line">  (source: <span class="built_in">String</span>, subString: <span class="built_in">String</span>) : <span class="built_in">boolean</span>;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="comment">// 使用接口</span></span><br><span class="line"><span class="keyword">let</span> mySearch: SearchFunc = <span class="function"><span class="keyword">function</span> (<span class="params">source: <span class="built_in">string</span>, subString: <span class="built_in">string</span></span>) </span>&#123;</span><br><span class="line">  <span class="keyword">let</span> result = source.search(subString);</span><br><span class="line">  <span class="keyword">return</span> result &gt; <span class="number">-1</span>;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="built_in">console</span>.log(mySearch(<span class="string">'aaabb'</span>,<span class="string">'bb'</span>))</span><br></pre></td></tr></table></figure></li></ul><hr><ul><li>对于函数类型的类型检查来说，函数的参数名不需要与接口里定义的名字相匹配</li><li>因为只是参数，传入时也无法判断<figure class="highlight typescript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">let</span> mySearch: SearchFunc;</span><br><span class="line">mySearch = <span class="function"><span class="keyword">function</span>(<span class="params">src: <span class="built_in">string</span>, sub: <span class="built_in">string</span></span>): <span class="title">boolean</span> </span>&#123;</span><br><span class="line">  <span class="keyword">let</span> result = src.search(sub);</span><br><span class="line">  <span class="keyword">return</span> result &gt; <span class="number">-1</span>;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure></li></ul><hr><ul><li>函数的参数会逐个进行检查，要求对应位置上的参数类型是兼容的。 如果你不想指定类型，TypeScript的类型系统会推断出参数类型，因为函数直接赋值给了 SearchFunc类型变量。 函数的返回值类型是通过其返回值推断出来的（此例是 false和true）。 如果让这个函数返回数字或字符串，类型检查器会警告我们函数的返回值类型与 SearchFunc接口中的定义不匹配</li><li>定义时可以不写指定类型</li><li>但是传入和返回类型不匹配就会报错<figure class="highlight typescript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">let</span> mySearch: SearchFunc;</span><br><span class="line">mySearch = <span class="function"><span class="keyword">function</span>(<span class="params">src, sub</span>) </span>&#123;</span><br><span class="line">    <span class="keyword">let</span> result = src.search(sub);</span><br><span class="line">    <span class="keyword">return</span> result &gt; <span class="number">-1</span>;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure></li></ul><h1 id="可索引的类型"><a href="#可索引的类型" class="headerlink" title="可索引的类型"></a>可索引的类型</h1><h2 id="数字索引-数组"><a href="#数字索引-数组" class="headerlink" title="数字索引(数组)"></a>数字索引(数组)</h2><ul><li>第一感觉这个索引是为数组而设立的</li><li>通过不同类型的值去索引</li><li>与使用接口描述函数类型差不多，我们也可以描述那些能够“通过索引得到”的类型，比如a[10]或ageMap[“daniel”]。 可索引类型具有一个 索引签名，它描述了对象索引的类型，还有相应的索引返回值类型。 </li><li>我们定义了StringArray接口，它具有索引签名。 这个索引签名表示了当用 number去索引StringArray时会得到string类型的返回值<figure class="highlight typescript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">interface</span> StringArray &#123;</span><br><span class="line">  [index: <span class="built_in">number</span>]: <span class="built_in">string</span>;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="keyword">let</span> myArray: StringArray;</span><br><span class="line">myArray = [<span class="string">"Bob"</span>, <span class="string">"Fred"</span>];</span><br><span class="line"></span><br><span class="line"><span class="keyword">let</span> myStr: <span class="built_in">string</span> = myArray[<span class="number">0</span>];</span><br></pre></td></tr></table></figure></li></ul><hr><h2 id="字符串索引（对象）"><a href="#字符串索引（对象）" class="headerlink" title="字符串索引（对象）"></a>字符串索引（对象）</h2><ul><li>TypeScript支持两种索引签名：字符串和数字。 可以同时使用两种类型的索引，但是数字索引的返回值必须是字符串索引返回值类型的子类型。 这是因为当使用 number来索引时，JavaScript会将它转换成string然后再去索引对象。 也就是说用 100（一个number）去索引等同于使用”100”（一个string）去索引，因此两者需要保持一致<figure class="highlight typescript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">// 错误</span></span><br><span class="line"><span class="keyword">class</span> Animal &#123;</span><br><span class="line">    name: <span class="built_in">string</span>;</span><br><span class="line">&#125;</span><br><span class="line"><span class="keyword">class</span> Dog <span class="keyword">extends</span> Animal &#123;</span><br><span class="line">    breed: <span class="built_in">string</span>;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="comment">// 错误：使用数值型的字符串索引，有时会得到完全不同的Animal!</span></span><br><span class="line"><span class="keyword">interface</span> NotOkay &#123;</span><br><span class="line">    [x: <span class="built_in">number</span>]: Animal;</span><br><span class="line">    [x: <span class="built_in">string</span>]: Dog;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure></li></ul><hr><ul><li>字符串索引签名能够很好的描述dictionary模式，并且它们也会确保所有属性与其返回值类型相匹配。 因为字符串索引声明了 obj.property和obj[“property”]两种形式都可以<figure class="highlight typescript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">interface</span> NumberDictionary &#123;</span><br><span class="line">  [index: <span class="built_in">string</span>]: <span class="built_in">number</span>;</span><br><span class="line">  length: <span class="built_in">number</span>;    <span class="comment">// 可以，length是number类型</span></span><br><span class="line">  name: <span class="built_in">string</span>       <span class="comment">// 错误，`name`的类型与索引类型返回值的类型不匹配</span></span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="keyword">let</span> myArray: NumberDictionary;</span><br><span class="line">myArray = &#123;test1:<span class="number">100</span>,length:<span class="number">20</span>,test2:<span class="number">200</span>&#125;;</span><br><span class="line"></span><br><span class="line"><span class="built_in">console</span>.log(myArray.test1)</span><br><span class="line"><span class="built_in">console</span>.log(myArray.test2)</span><br><span class="line"><span class="built_in">console</span>.log(myArray.length)</span><br></pre></td></tr></table></figure></li></ul><hr><h2 id="防止索引被篡改-只读"><a href="#防止索引被篡改-只读" class="headerlink" title="防止索引被篡改 (只读)"></a>防止索引被篡改 (只读)</h2><ul><li>最后，你可以将索引签名设置为只读，这样就防止了给索引赋值<figure class="highlight typescript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">interface</span> ReadonlyStringArray &#123;</span><br><span class="line">    readonly [index: <span class="built_in">number</span>]: <span class="built_in">string</span>;</span><br><span class="line">&#125;</span><br><span class="line"><span class="keyword">let</span> myArray: ReadonlyStringArray = [<span class="string">"Alice"</span>, <span class="string">"Bob"</span>];</span><br><span class="line">myArray[<span class="number">2</span>] = <span class="string">"Mallory"</span>; <span class="comment">// error!</span></span><br></pre></td></tr></table></figure></li></ul><h1 id="类类型"><a href="#类类型" class="headerlink" title="类类型"></a>类类型</h1><h2 id="实现接口"><a href="#实现接口" class="headerlink" title="实现接口"></a>实现接口</h2><ul><li>与C#或Java里接口的基本作用一样，TypeScript也能够用它来明确的强制一个类去符合某种契约。</li><li>其实就是java的抽象方法</li><li>定义了就必须去执行</li><li>接口描述了类的公共部分，而不是公共和私有两部分。 它不会帮你检查类是否具有某些私有成员。</li></ul><hr><ol><li>元素<figure class="highlight typescript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">// 实现元素</span></span><br><span class="line"><span class="keyword">interface</span> ClockInterface &#123;</span><br><span class="line">    currentTime: <span class="built_in">Date</span>;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="keyword">class</span> Clock <span class="keyword">implements</span> ClockInterface &#123;</span><br><span class="line">    currentTime: <span class="built_in">Date</span>;</span><br><span class="line">    <span class="keyword">constructor</span>(<span class="params">h: <span class="built_in">number</span>, m: <span class="built_in">number</span></span>) &#123; &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure></li></ol><hr><ol start="2"><li>方法</li></ol><ul><li>你也可以在接口中描述一个方法，在类里实现它<figure class="highlight typescript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">interface</span> ClockInterface &#123;</span><br><span class="line">    currentTime: <span class="built_in">Date</span>;</span><br><span class="line">    setTime(d: <span class="built_in">Date</span>);</span><br><span class="line">    <span class="comment">// constructor(d: Date) // 这个是不允许的构造函数是不允许这样被定义的</span></span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="keyword">class</span> Clock <span class="keyword">implements</span> ClockInterface &#123;</span><br><span class="line">    currentTime: <span class="built_in">Date</span>;</span><br><span class="line">    setTime(d: <span class="built_in">Date</span>) &#123;</span><br><span class="line">        <span class="keyword">this</span>.currentTime = d;</span><br><span class="line">        <span class="keyword">return</span> <span class="keyword">this</span>.currentTime;</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">constructor</span>(<span class="params">h: <span class="built_in">number</span>, m: <span class="built_in">number</span></span>) &#123; &#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="keyword">let</span> test = <span class="keyword">new</span> Clock(<span class="number">10</span>,<span class="number">20</span>);</span><br><span class="line"><span class="built_in">console</span>.log(test.setTime(<span class="keyword">new</span> <span class="built_in">Date</span>())); <span class="comment">//2019-03-09T14:12:10.617Z</span></span><br></pre></td></tr></table></figure></li></ul><h2 id="类静态部分与实例部分的区别-（令人费解的地方，未知）"><a href="#类静态部分与实例部分的区别-（令人费解的地方，未知）" class="headerlink" title="类静态部分与实例部分的区别 （令人费解的地方，未知）"></a>类静态部分与实例部分的区别 （令人费解的地方，未知）</h2><ul><li>这个地方不太好理解</li><li>当你操作类和接口的时候，你要知道类是具有两个类型的：静态部分的类型和实例的类型。 你会注意到，当你用构造器签名去定义一个接口并试图定义一个类去实现这个接口时会得到一个错误</li><li>因为当一个类实现了一个接口时，只对其实例部分进行类型检查。 constructor存在于类的静态部分，所以不在检查的范围内</li><li>因为createClock的第一个参数是ClockConstructor类型，在createClock(AnalogClock, 7, 32)里，会检查AnalogClock是否符合构造函数签名</li></ul><hr><ol><li>这个直指类中的构造函数，就是在new时要传参，并有返回值</li><li>因为在类中是不会去检索构造函数，所以直接定义就会出错</li><li>所以我们在fn中传参数时定义，就会去检测构造函数签名</li><li>其实就是说作为参数和类是不想同的检索方式<figure class="highlight typescript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">// 错误</span></span><br><span class="line"><span class="keyword">interface</span> ClockConstructor &#123;</span><br><span class="line">    <span class="keyword">new</span> (hour: <span class="built_in">number</span>, minute: <span class="built_in">number</span>);</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="keyword">class</span> Clock <span class="keyword">implements</span> ClockConstructor &#123;</span><br><span class="line">    currentTime: <span class="built_in">Date</span>;</span><br><span class="line">    <span class="keyword">constructor</span>(<span class="params">h: <span class="built_in">number</span>, m: <span class="built_in">number</span></span>) &#123; &#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line">------------------------------</span><br><span class="line"><span class="comment">// 正确</span></span><br><span class="line"><span class="keyword">interface</span> ClockConstructor &#123;</span><br><span class="line">  <span class="comment">// 约束 new 一个实例，直接针对class的构造函数</span></span><br><span class="line">    <span class="keyword">new</span> (hour: <span class="built_in">number</span>, minute: <span class="built_in">number</span>): ClockInterface;</span><br><span class="line">&#125;</span><br><span class="line"><span class="keyword">interface</span> ClockInterface &#123;</span><br><span class="line">    tick();</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">function</span> <span class="title">createClock</span>(<span class="params">ctor: ClockConstructor, hour: <span class="built_in">number</span>, minute: <span class="built_in">number</span></span>): <span class="title">ClockInterface</span> </span>&#123;</span><br><span class="line">    <span class="keyword">return</span> <span class="keyword">new</span> ctor(hour, minute);</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="keyword">class</span> DigitalClock <span class="keyword">implements</span> ClockInterface &#123;</span><br><span class="line">    <span class="keyword">constructor</span>(<span class="params">h: <span class="built_in">number</span>, m: <span class="built_in">number</span></span>) &#123; &#125;</span><br><span class="line">    tick() &#123;</span><br><span class="line">        <span class="built_in">console</span>.log(<span class="string">"beep beep"</span>);</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br><span class="line"><span class="keyword">class</span> AnalogClock <span class="keyword">implements</span> ClockInterface &#123;</span><br><span class="line">    <span class="keyword">constructor</span>(<span class="params">h: <span class="built_in">number</span>, m: <span class="built_in">number</span></span>) &#123; &#125;</span><br><span class="line">    tick() &#123;</span><br><span class="line">        <span class="built_in">console</span>.log(<span class="string">"tick tock"</span>);</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="keyword">let</span> digital = createClock(DigitalClock, <span class="number">12</span>, <span class="number">17</span>);</span><br><span class="line"><span class="keyword">let</span> analog = createClock(AnalogClock, <span class="number">7</span>, <span class="number">32</span>);</span><br><span class="line"><span class="built_in">console</span>.log(digital.tick())</span><br></pre></td></tr></table></figure></li></ol><h1 id="继承接口"><a href="#继承接口" class="headerlink" title="继承接口"></a>继承接口</h1><ul><li>和类一样，接口也可以相互继承。 这让我们能够从一个接口里复制成员到另一个接口里，可以更灵活地将接口分割到可重用的模块里</li><li>这个就比较好理解，就是儿子继承爸爸的东西</li><li>也可多接口<figure class="highlight typescript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">interface</span> Shape &#123;</span><br><span class="line">    color: <span class="built_in">string</span>;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="keyword">interface</span> Square <span class="keyword">extends</span> Shape &#123;</span><br><span class="line">    sideLength: <span class="built_in">number</span>;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="comment">// 定义</span></span><br><span class="line"><span class="keyword">let</span> square = &lt;Square&gt;&#123;&#125;;</span><br><span class="line">square.color = <span class="string">"blue"</span>;</span><br><span class="line">square.sideLength = <span class="number">10</span>;</span><br><span class="line"></span><br><span class="line"><span class="comment">// 多接口</span></span><br><span class="line"><span class="keyword">interface</span> Shape &#123;</span><br><span class="line">    color: <span class="built_in">string</span>;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="keyword">interface</span> PenStroke &#123;</span><br><span class="line">    penWidth: <span class="built_in">number</span>;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="keyword">interface</span> Square <span class="keyword">extends</span> Shape, PenStroke &#123;</span><br><span class="line">    sideLength: <span class="built_in">number</span>;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="keyword">let</span> square = &lt;Square&gt;&#123;&#125;;</span><br><span class="line">square.color = <span class="string">"blue"</span>;</span><br><span class="line">square.sideLength = <span class="number">10</span>;</span><br><span class="line">square.penWidth = <span class="number">5.0</span>;</span><br></pre></td></tr></table></figure></li></ul><h1 id="混合类型"><a href="#混合类型" class="headerlink" title="混合类型"></a>混合类型</h1><ul><li>一个对象可以同时做为函数和对象使用，并带有额外的属性</li></ul><figure class="highlight typescript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">interface</span> Counter &#123;</span><br><span class="line">    (start: <span class="built_in">number</span>): <span class="built_in">string</span>;</span><br><span class="line">    interval: <span class="built_in">number</span>;</span><br><span class="line">    reset(): <span class="built_in">void</span>;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">function</span> <span class="title">getCounter</span>(<span class="params"></span>): <span class="title">Counter</span> </span>&#123;</span><br><span class="line">    <span class="keyword">let</span> counter = &lt;Counter&gt;<span class="function"><span class="keyword">function</span> (<span class="params">start: <span class="built_in">number</span></span>) </span>&#123; &#125;;</span><br><span class="line">    counter.interval = <span class="number">123</span>;</span><br><span class="line">    counter.reset = <span class="function"><span class="keyword">function</span> (<span class="params"></span>) </span>&#123; &#125;;</span><br><span class="line">    <span class="keyword">return</span> counter;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="keyword">let</span> c = getCounter();</span><br><span class="line">c(<span class="number">10</span>);</span><br><span class="line">c.reset();</span><br><span class="line">c.interval = <span class="number">5.0</span>;</span><br></pre></td></tr></table></figure><h1 id="接口继承类"><a href="#接口继承类" class="headerlink" title="接口继承类"></a>接口继承类</h1><ul><li>当接口继承了一个类类型时，它会继承类的成员但不包括其实现。 就好像接口声明了所有类中存在的成员，但并没有提供具体实现一样。 接口同样会继承到类的private和protected成员。 这意味着当你创建了一个接口继承了一个拥有私有或受保护的成员的类时，这个接口类型只能被这个类或其子类所实现（implement）</li><li><p>当你有一个庞大的继承结构时这很有用，但要指出的是你的代码只在子类拥有特定属性时起作用。 这个子类除了继承至基类外与基类没有任何关系</p><figure class="highlight typescript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">class</span> Control &#123;</span><br><span class="line">    <span class="keyword">private</span> state: <span class="built_in">any</span>;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="keyword">interface</span> SelectableControl <span class="keyword">extends</span> Control &#123;</span><br><span class="line">    select(): <span class="built_in">void</span>;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="keyword">class</span> Button <span class="keyword">extends</span> Control <span class="keyword">implements</span> SelectableControl &#123;</span><br><span class="line">    select() &#123; &#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="keyword">class</span> TextBox <span class="keyword">extends</span> Control &#123;</span><br><span class="line">    select() &#123; &#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="comment">// 错误：“Image”类型缺少“state”属性。</span></span><br><span class="line"><span class="keyword">class</span> Image <span class="keyword">implements</span> SelectableControl &#123;</span><br><span class="line">    select() &#123; &#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="keyword">class</span> Location &#123;</span><br><span class="line"></span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure></li><li><p>在上面的例子里，SelectableControl包含了Control的所有成员，包括私有成员state。 因为 state是私有成员，所以只能够是Control的子类们才能实现SelectableControl接口。 因为只有 Control的子类才能够拥有一个声明于Control的私有成员state，这对私有成员的兼容性是必需的</p></li><li>在Control类内部，是允许通过SelectableControl的实例来访问私有成员state的。 实际上， SelectableControl接口和拥有select方法的Control类是一样的。 Button和TextBox类是SelectableControl的子类（因为它们都继承自Control并有select方法），但Image和Location类并不是这样的</li></ul><h1 id="后记"><a href="#后记" class="headerlink" title="后记"></a>后记</h1><ul><li>这个就是我学习Ts的第三天的笔记，欢迎更多的同行大哥指导交流</li><li><a href="https://yhf7.github.io/" target="_blank" rel="noopener">欢迎进入我的博客</a>：<a href="https://yhf7.github.io/" target="_blank" rel="noopener">https://yhf7.github.io/</a></li><li>如果有什么侵权的话，请及时添加小编微信以及qq也可以来告诉小编（905477376微信qq通用），谢谢！</li></ul>]]></content>
      
      
      <categories>
          
          <category> TypeScript </category>
          
      </categories>
      
      
        <tags>
            
            <tag> TypeScript 笔记 </tag>
            
        </tags>
      
    </entry>
    
    <entry>
      <title>TypeScript 自学笔记2 变量声明</title>
      <link href="/2019/03/07/TypeScript%E7%AC%94%E8%AE%B02/"/>
      <url>/2019/03/07/TypeScript%E7%AC%94%E8%AE%B02/</url>
      
        <content type="html"><![CDATA[<link rel="stylesheet" class="aplayer-secondary-style-marker" href="/assets/css/APlayer.min.css"><script src="/assets/js/APlayer.min.js" class="aplayer-secondary-script-marker"></script><h1 id="前言"><a href="#前言" class="headerlink" title="前言"></a>前言</h1><ul><li>个人学习笔记，仅供参考</li></ul><h1 id="Var-声明"><a href="#Var-声明" class="headerlink" title="Var 声明"></a>Var 声明</h1><ul><li>可以在函数内部定义变量</li><li>可以在其它函数内部访问相同的变量<figure class="highlight typescript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br></pre></td><td class="code"><pre><span class="line"><span class="function"><span class="keyword">function</span> <span class="title">f</span>(<span class="params"></span>) </span>&#123;</span><br><span class="line">    <span class="keyword">var</span> a = <span class="number">1</span>;</span><br><span class="line"></span><br><span class="line">    a = <span class="number">2</span>;</span><br><span class="line">    <span class="keyword">var</span> b = g();</span><br><span class="line">    a = <span class="number">3</span>;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">return</span> b;</span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">function</span> <span class="title">g</span>(<span class="params"></span>) </span>&#123;</span><br><span class="line">        <span class="keyword">return</span> a;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line">f(); <span class="comment">// returns 2</span></span><br></pre></td></tr></table></figure></li></ul><h2 id="作用域规则"><a href="#作用域规则" class="headerlink" title="作用域规则"></a>作用域规则</h2><ul><li>对于var声明奇怪的作用域规则</li><li>在这里以为程序在执行时会先编译一遍所以x就已经被声明了</li></ul><ol><li><p>可以在包含它的函数，模块，命名空间或全局作用域内部任何位置被访问</p><figure class="highlight typescript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br></pre></td><td class="code"><pre><span class="line"><span class="function"><span class="keyword">function</span> <span class="title">f</span>(<span class="params">shouldInitialize: <span class="built_in">boolean</span></span>) </span>&#123;</span><br><span class="line">    <span class="keyword">if</span> (shouldInitialize) &#123;</span><br><span class="line">        <span class="keyword">var</span> x = <span class="number">10</span>;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">return</span> x;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line">f(<span class="literal">true</span>);  <span class="comment">// returns '10'</span></span><br><span class="line">f(<span class="literal">false</span>); <span class="comment">// returns 'undefined'</span></span><br></pre></td></tr></table></figure></li><li><p>var多次声明并不会报错</p><figure class="highlight typescript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br></pre></td><td class="code"><pre><span class="line"><span class="function"><span class="keyword">function</span> <span class="title">sumMatrix</span>(<span class="params">matrix: <span class="built_in">number</span>[][]</span>) </span>&#123;</span><br><span class="line">    <span class="keyword">var</span> sum = <span class="number">0</span>;</span><br><span class="line">    <span class="keyword">for</span> (<span class="keyword">var</span> i = <span class="number">0</span>; i &lt; matrix.length; i++) &#123;</span><br><span class="line">        <span class="keyword">var</span> currentRow = matrix[i];</span><br><span class="line">        <span class="keyword">for</span> (<span class="keyword">var</span> i = <span class="number">0</span>; i &lt; currentRow.length; i++) &#123;</span><br><span class="line">            sum += currentRow[i];</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">return</span> sum;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure></li></ol><h2 id="捕获变量怪异之处"><a href="#捕获变量怪异之处" class="headerlink" title="捕获变量怪异之处"></a>捕获变量怪异之处</h2><ul><li>setTimeout 定时器，而且每一次的时间就加长了</li><li>执行的速度是非常快的，很快就循环完毕开启了所有的定时器</li><li>但是定时器的执行会延时，在最后执行时i已经是10了</li><li><p>所以所有的输出都是10，并不是想象的1……9</p><figure class="highlight typescript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">for</span> (<span class="keyword">var</span> i = <span class="number">0</span>; i &lt; <span class="number">10</span>; i++) &#123;</span><br><span class="line">    setTimeout(<span class="function"><span class="keyword">function</span>(<span class="params"></span>) </span>&#123; <span class="built_in">console</span>.log(i); &#125;, <span class="number">100</span> * i);</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure></li><li><p>解决方案，使用闭包,每一次的值都是传进去的就不会被改变</p><figure class="highlight typescript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">for</span> (<span class="keyword">var</span> i = <span class="number">0</span>; i &lt; <span class="number">10</span>; i++) &#123;</span><br><span class="line">    <span class="comment">// capture the current state of 'i'</span></span><br><span class="line">    <span class="comment">// by invoking a function with its current value</span></span><br><span class="line">    (<span class="function"><span class="keyword">function</span>(<span class="params">i</span>) </span>&#123;</span><br><span class="line">        setTimeout(<span class="function"><span class="keyword">function</span>(<span class="params"></span>) </span>&#123; <span class="built_in">console</span>.log(i); &#125;, <span class="number">100</span> * i);</span><br><span class="line">    &#125;)(i);</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure></li></ul><h1 id="Let声明"><a href="#Let声明" class="headerlink" title="Let声明"></a>Let声明</h1><ul><li>在let中和var还是有一定的区别的</li><li>let中使用的是作用域或块作用域</li><li>所有在区块内没有定义是不可以使用的</li><li>let并没有作用域提示的概念</li></ul><h2 id="块作用域"><a href="#块作用域" class="headerlink" title="块作用域"></a>块作用域</h2><ul><li>这里我们定义了2个变量a和b。 a的作用域是f函数体内，而b的作用域是if语句块</li><li>这就是我们提到的变量不会提升，所以不能使用</li><li>如果是用var这个就可以是用了</li><li>而且我们使用ts 在编译时就会报错的</li><li>直接会 error TS2304: Cannot find name ‘b’ 提示没有定义这个名称的变量</li><li>但是a为什么可以获取呢？因为a所在的作用域块大于if，而在外面的作用域是不能访问内部定义的变量<figure class="highlight typescript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br></pre></td><td class="code"><pre><span class="line"><span class="function"><span class="keyword">function</span> <span class="title">f</span>(<span class="params">input: <span class="built_in">boolean</span></span>) </span>&#123;</span><br><span class="line">    <span class="keyword">let</span> a = <span class="number">100</span>;</span><br><span class="line"></span><br><span class="line">    <span class="comment">// if内部定义的b</span></span><br><span class="line">    <span class="keyword">if</span> (input) &#123;</span><br><span class="line">        <span class="comment">// 但是在这里面是可以获取a的因为a在fn的作用域块比if大</span></span><br><span class="line">        <span class="comment">// Still okay to reference 'a'</span></span><br><span class="line">        <span class="keyword">let</span> b = a + <span class="number">1</span>;</span><br><span class="line">        <span class="keyword">return</span> b;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="comment">// 外面是无法访问的，就会报错</span></span><br><span class="line">    <span class="comment">// Error: 'b' doesn't exist here</span></span><br><span class="line">    <span class="keyword">return</span> b;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure></li></ul><h3 id="暂时性死区"><a href="#暂时性死区" class="headerlink" title="暂时性死区"></a>暂时性死区</h3><ul><li>未声明前无法读/写</li><li>很多人对这个let不了解就想当然的像var一样去用</li><li>但是虽然变量存在，在let声明前所定义的所有代码都是无效的，因为let有着暂时性死区（声明前的所有区域都是）</li><li>ts中编译也是会爆出来的<figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">a++; <span class="comment">// illegal to use 'a' before it's declared;</span></span><br><span class="line"><span class="keyword">let</span> a;</span><br></pre></td></tr></table></figure></li></ul><hr><ul><li>注意一点，我们仍然可以在一个拥有块作用域变量被声明前获取它。 只是我们不能在变量声明前去调用那个函数。 如果生成代码目标为ES2015，现代的运行时会抛出一个错误；然而，现今TypeScript是不会报错的。<figure class="highlight typescript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br></pre></td><td class="code"><pre><span class="line"><span class="function"><span class="keyword">function</span> <span class="title">foo</span>(<span class="params"></span>) </span>&#123;</span><br><span class="line">    <span class="comment">// okay to capture 'a'</span></span><br><span class="line">    <span class="keyword">return</span> a;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="comment">// 不能在'a'被声明前调用'foo'</span></span><br><span class="line"><span class="comment">// 运行时应该抛出错误</span></span><br><span class="line">foo();</span><br><span class="line"></span><br><span class="line"><span class="keyword">let</span> a;</span><br></pre></td></tr></table></figure></li></ul><h2 id="重定义及屏蔽"><a href="#重定义及屏蔽" class="headerlink" title="重定义及屏蔽"></a>重定义及屏蔽</h2><h3 id="重定义"><a href="#重定义" class="headerlink" title="重定义"></a>重定义</h3><ul><li>我们在使用var 时可以无限的重复声明最后只会得到一个（会出现bug）</li><li>let在同一作用域下是不可以重复声明的</li><li>并不是要求两个均是块级作用域的声明TypeScript才会给出一个错误的警告。</li><li>并不是说块级作用域变量不能用函数作用域变量来声明。 而是块级作用域变量需要在明显不同的块里声明。<figure class="highlight typescript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">// 例1</span></span><br><span class="line"><span class="keyword">let</span> x = <span class="number">10</span>;</span><br><span class="line"><span class="keyword">let</span> x = <span class="number">20</span>; <span class="comment">// 错误，不能在1个作用域里多次声明`x`</span></span><br><span class="line"></span><br><span class="line"><span class="comment">// 例2</span></span><br><span class="line"><span class="comment">// 变量和声明明显在同一个作用域下</span></span><br><span class="line"><span class="function"><span class="keyword">function</span> <span class="title">f</span>(<span class="params">x</span>) </span>&#123;</span><br><span class="line">    <span class="keyword">let</span> x = <span class="number">100</span>; <span class="comment">// error: interferes with parameter declaration</span></span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="comment">// 例3</span></span><br><span class="line"><span class="comment">// 无论let前后都不能重新定义变量</span></span><br><span class="line"><span class="function"><span class="keyword">function</span> <span class="title">g</span>(<span class="params"></span>) </span>&#123;</span><br><span class="line">    <span class="keyword">let</span> x = <span class="number">100</span>;</span><br><span class="line">    <span class="keyword">var</span> x = <span class="number">100</span>; <span class="comment">// error: can't have both declarations of 'x'</span></span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="comment">// 例4</span></span><br><span class="line"><span class="comment">// 正确的重定义</span></span><br><span class="line"><span class="comment">// 这样就分开了两个完全不同的作用域</span></span><br><span class="line"><span class="comment">// if内部只可以使用x = 5的这个和x=100一点关系都没有</span></span><br><span class="line"><span class="function"><span class="keyword">function</span> <span class="title">g</span>(<span class="params"></span>) </span>&#123;</span><br><span class="line">    <span class="keyword">let</span> x = <span class="number">100</span>;</span><br><span class="line">    <span class="built_in">console</span>.log(<span class="string">'fn g x'</span>,x) <span class="comment">//fn g x 100</span></span><br><span class="line">    <span class="keyword">if</span> (<span class="literal">true</span>) &#123;</span><br><span class="line">        <span class="keyword">let</span> x = <span class="number">5</span>;</span><br><span class="line">        <span class="built_in">console</span>.log(<span class="string">'fn if x'</span>,x)<span class="comment">//fn if x 5</span></span><br><span class="line">    &#125;</span><br><span class="line">    <span class="built_in">console</span>.log(<span class="string">'fn g x'</span>,x)<span class="comment">//fn g x 100</span></span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="comment">// 例5</span></span><br><span class="line"><span class="comment">// 正确的重定义</span></span><br><span class="line"><span class="function"><span class="keyword">function</span> <span class="title">f</span>(<span class="params">condition, x</span>) </span>&#123;</span><br><span class="line">    <span class="keyword">if</span> (condition) &#123;</span><br><span class="line">        <span class="keyword">let</span> x = <span class="number">100</span>;</span><br><span class="line">        <span class="keyword">return</span> x;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">return</span> x;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line">f(<span class="literal">false</span>, <span class="number">0</span>); <span class="comment">// returns 0</span></span><br><span class="line">f(<span class="literal">true</span>, <span class="number">0</span>);  <span class="comment">// returns 100</span></span><br></pre></td></tr></table></figure></li></ul><h3 id="屏蔽"><a href="#屏蔽" class="headerlink" title="屏蔽"></a>屏蔽</h3><ul><li>在一个嵌套作用域里引入一个新名字的行为称做屏蔽。 它是一把双刃剑，它可能会不小心地引入新问题，同时也可能会解决一些错误</li><li>使用let重写sumMatrix上面var写过的</li><li>在这里 在重新定义的数据，会出现一个数据屏蔽把前面定义的数据屏蔽掉</li><li>这样解决了数据不会相互影响的问题</li></ul><figure class="highlight typescript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br></pre></td><td class="code"><pre><span class="line">- </span><br><span class="line"><span class="function"><span class="keyword">function</span> <span class="title">sumMatrix</span>(<span class="params">matrix: <span class="built_in">number</span>[][]</span>) </span>&#123;</span><br><span class="line">    <span class="keyword">let</span> sum = <span class="number">0</span>;</span><br><span class="line">    <span class="keyword">for</span> (<span class="keyword">let</span> i = <span class="number">0</span>; i &lt; matrix.length; i++) &#123;</span><br><span class="line">        <span class="keyword">var</span> currentRow = matrix[i];</span><br><span class="line">        <span class="keyword">for</span> (<span class="keyword">let</span> i = <span class="number">0</span>; i &lt; currentRow.length; i++) &#123;</span><br><span class="line">            sum += currentRow[i];</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">return</span> sum;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h2 id="块级作用域变量的获取"><a href="#块级作用域变量的获取" class="headerlink" title="块级作用域变量的获取"></a>块级作用域变量的获取</h2><ul><li>在我们最初谈及获取用var声明的变量时，我们简略地探究了一下在获取到了变量之后它的行为是怎样的。 直观地讲，每次进入一个作用域时，它创建了一个变量的 环境。 就算作用域内代码已经执行完毕，这个环境与其捕获的变量依然存在。</li><li>因为我们已经在city的环境里获取到了city，所以就算if语句执行结束后我们仍然可以访问它。</li></ul><figure class="highlight typescript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br></pre></td><td class="code"><pre><span class="line"><span class="function"><span class="keyword">function</span> <span class="title">theCityThatAlwaysSleeps</span>(<span class="params"></span>) </span>&#123;</span><br><span class="line">    <span class="comment">// fn作用域定义了</span></span><br><span class="line">    <span class="keyword">let</span> getCity;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">if</span> (<span class="literal">true</span>) &#123;</span><br><span class="line">        <span class="keyword">let</span> city = <span class="string">"Seattle"</span>;</span><br><span class="line">        <span class="comment">// if内部赋值</span></span><br><span class="line">        getCity = <span class="function"><span class="keyword">function</span>(<span class="params"></span>) </span>&#123;</span><br><span class="line">            <span class="comment">// 在if作用域已经执行获取到了</span></span><br><span class="line">            <span class="keyword">return</span> city;</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="comment">// 外侧依然是能访问</span></span><br><span class="line">    <span class="keyword">return</span> getCity();</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><hr><ul><li>当let声明出现在循环体里时拥有完全不同的行为。 不仅是在循环里引入了一个新的变量环境，而是针对 每次迭代都会创建这样一个新作用域。 这就是我们在使用立即执行的函数表达式时做的事，所以在 setTimeout例子里我们仅使用let声明就可以了。</li><li>这样就可以理想的输出1-9了<figure class="highlight typescript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">for</span> (<span class="keyword">let</span> i = <span class="number">0</span>; i &lt; <span class="number">10</span> ; i++) &#123;</span><br><span class="line">    setTimeout(<span class="function"><span class="keyword">function</span>(<span class="params"></span>) </span>&#123;<span class="built_in">console</span>.log(i); &#125;, <span class="number">100</span> * i);</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure></li></ul><h1 id="const-声明"><a href="#const-声明" class="headerlink" title="const 声明"></a>const 声明</h1><ul><li>它们与let声明相似，但是就像它的名字所表达的，它们被赋值后不能再改变。 换句话说，它们拥有与 let相同的作用域规则，但是不能对它们重新赋值</li></ul><figure class="highlight typescript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">const</span> numLivesForCat = <span class="number">9</span>;</span><br><span class="line"><span class="keyword">const</span> kitty = &#123;</span><br><span class="line">    name: <span class="string">"Aurora"</span>,</span><br><span class="line">    numLives: numLivesForCat,</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="comment">// 定义后，外层是无法被重新定义的</span></span><br><span class="line"><span class="comment">// 可以使用但是无法重新在外层整体的去赋值</span></span><br><span class="line"><span class="comment">// Error</span></span><br><span class="line">kitty = &#123;</span><br><span class="line">    name: <span class="string">"Danielle"</span>,</span><br><span class="line">    numLives: numLivesForCat</span><br><span class="line">&#125;;</span><br><span class="line"></span><br><span class="line"><span class="comment">// 但是使用这样的方式去更改内部的值是不受限制的</span></span><br><span class="line"><span class="comment">// all "okay"</span></span><br><span class="line">kitty.name = <span class="string">"Rory"</span>;</span><br><span class="line">kitty.name = <span class="string">"Kitty"</span>;</span><br><span class="line">kitty.name = <span class="string">"Cat"</span>;</span><br><span class="line">kitty.numLives--;</span><br></pre></td></tr></table></figure><h1 id="解构【es6特性】"><a href="#解构【es6特性】" class="headerlink" title="解构【es6特性】"></a>解构【es6特性】</h1><h2 id="数组解构"><a href="#数组解构" class="headerlink" title="数组解构"></a>数组解构</h2><ul><li>相当于使用了索引，但更为方便</li><li>你可以在数组里使用…语法创建剩余变量</li></ul><hr><ul><li>可以解开单个</li><li>可以获取多个</li><li>可以跳过,隔开就可以<figure class="highlight typescript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">// 1.数组使用</span></span><br><span class="line"><span class="keyword">let</span> input = [<span class="number">1</span>, <span class="number">2</span>];</span><br><span class="line"><span class="keyword">let</span> [first, second] = input;</span><br><span class="line"><span class="built_in">console</span>.log(first); <span class="comment">// outputs 1</span></span><br><span class="line"><span class="built_in">console</span>.log(second); <span class="comment">// outputs 2</span></span><br><span class="line"></span><br><span class="line"><span class="comment">// 相当于</span></span><br><span class="line">first = input[<span class="number">0</span>];</span><br><span class="line">second = input[<span class="number">1</span>];</span><br><span class="line"></span><br><span class="line"></span><br><span class="line"><span class="comment">// 2.函数使用结构数组，传递一个数组解开两个变量</span></span><br><span class="line"><span class="function"><span class="keyword">function</span> <span class="title">f</span>(<span class="params">[first, second]: [<span class="built_in">number</span>, <span class="built_in">number</span>]</span>) </span>&#123;</span><br><span class="line">    <span class="built_in">console</span>.log(first);</span><br><span class="line">    <span class="built_in">console</span>.log(second);</span><br><span class="line">&#125;</span><br><span class="line">f(input);</span><br><span class="line"></span><br><span class="line"></span><br><span class="line"><span class="comment">// 3. 剩余变量</span></span><br><span class="line"><span class="keyword">let</span> [first, ...rest] = [<span class="number">1</span>, <span class="number">2</span>, <span class="number">3</span>, <span class="number">4</span>];</span><br><span class="line"><span class="built_in">console</span>.log(first); <span class="comment">// outputs 1</span></span><br><span class="line"><span class="built_in">console</span>.log(rest); <span class="comment">// outputs [ 2, 3, 4 ]</span></span><br><span class="line"></span><br><span class="line"></span><br><span class="line"><span class="comment">// 4. 单独提取也可以</span></span><br><span class="line"><span class="keyword">let</span> [first] = [<span class="number">1</span>, <span class="number">2</span>, <span class="number">3</span>, <span class="number">4</span>];</span><br><span class="line"><span class="built_in">console</span>.log(first); <span class="comment">// outputs 1</span></span><br><span class="line"></span><br><span class="line"><span class="comment">// 5. 获取其他元素,隔开</span></span><br><span class="line"><span class="keyword">let</span> [, second, , fourth] = [<span class="number">1</span>, <span class="number">2</span>, <span class="number">3</span>, <span class="number">4</span>];</span><br></pre></td></tr></table></figure></li></ul><h2 id="对象解构"><a href="#对象解构" class="headerlink" title="对象解构"></a>对象解构</h2><ul><li>和数组的没什么区别</li><li>同样不需要的可以直接忽略<figure class="highlight typescript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">let</span> o = &#123;</span><br><span class="line">    a: <span class="string">"foo"</span>,</span><br><span class="line">    b: <span class="number">12</span>,</span><br><span class="line">    c: <span class="string">"bar"</span></span><br><span class="line">&#125;;</span><br><span class="line"><span class="keyword">let</span> &#123; a, b &#125; = o;</span><br><span class="line"></span><br><span class="line"><span class="comment">// 剩余变量</span></span><br><span class="line"><span class="keyword">let</span> &#123; a, ...passthrough &#125; = o;</span><br><span class="line"><span class="keyword">let</span> total = passthrough.b + passthrough.c.length;</span><br></pre></td></tr></table></figure></li></ul><h3 id="属性重命名"><a href="#属性重命名" class="headerlink" title="属性重命名"></a>属性重命名</h3><ul><li>在对象中结构我们可以赋于其他于属性不同的名字</li><li>这里就会有疑惑ts里面‘:’后面不是加的是指示类型么</li><li>如果你想指定它的类型， 仍然需要在其后写上完整的模式。</li></ul><figure class="highlight typescript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">// 前面为属性名：后面为更改的属性名</span></span><br><span class="line"><span class="keyword">let</span> &#123; a: newName1, b: newName2 &#125; = o;</span><br><span class="line"></span><br><span class="line"><span class="comment">// 相等于</span></span><br><span class="line"><span class="keyword">let</span> newName1 = o.a;</span><br><span class="line"><span class="keyword">let</span> newName2 = o.b;</span><br><span class="line"></span><br><span class="line"></span><br><span class="line"><span class="comment">//添加指示类型</span></span><br><span class="line"><span class="keyword">let</span> &#123;a, b&#125;: &#123;a: <span class="built_in">string</span>, b: <span class="built_in">number</span>&#125; = o;</span><br></pre></td></tr></table></figure><h3 id="默认值"><a href="#默认值" class="headerlink" title="默认值"></a>默认值</h3><ul><li>? 可选属性</li><li>在指定类型前面加?号代表可以不传</li><li>在结构时用=给定默认值</li><li>默认值可以让你在属性为 undefined 时使用缺省值</li></ul><figure class="highlight typescript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><span class="line"><span class="function"><span class="keyword">function</span> <span class="title">keepWholeObject</span>(<span class="params">wholeObject: &#123; a: <span class="built_in">string</span>, b?: <span class="built_in">number</span> &#125;</span>) </span>&#123;</span><br><span class="line">    <span class="keyword">let</span> &#123; a, b = <span class="number">1001</span> &#125; = wholeObject;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="keyword">let</span> wholeObject = &#123;a:<span class="string">'abc'</span>&#125;</span><br><span class="line"></span><br><span class="line"><span class="built_in">console</span>.log(keepWholeObject(wholeObject)) </span><br><span class="line"><span class="comment">// a=abc  b=1001</span></span><br></pre></td></tr></table></figure><h3 id="函数声明"><a href="#函数声明" class="headerlink" title="函数声明"></a>函数声明</h3><ul><li>解构也能用于函数声明。 看以下简单的情况<figure class="highlight typescript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">type</span> C = &#123; a: <span class="built_in">string</span>, b?: <span class="built_in">number</span> &#125;</span><br><span class="line"><span class="function"><span class="keyword">function</span> <span class="title">f</span>(<span class="params">&#123; a, b &#125;: C</span>): <span class="title">void</span> </span>&#123;</span><br><span class="line">    </span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure></li></ul><hr><ul><li>可以使用结构的同时使用默认值</li><li>通常情况下更多的是指定默认值，解构默认值有些棘手。 首先，你需要在默认值之前设置其格式</li><li>官网的例子并不能实现<figure class="highlight typescript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line">function f(&#123; a="", b=0 &#125; : &#123;a?:String,b?:Number&#125;): void &#123;</span><br><span class="line">    <span class="comment">// ...</span></span><br><span class="line">    <span class="built_in">console</span>.log(a);</span><br><span class="line">    <span class="built_in">console</span>.log(b);</span><br><span class="line">&#125;</span><br><span class="line">f(&#123;&#125;);</span><br></pre></td></tr></table></figure></li></ul><h2 id="展开"><a href="#展开" class="headerlink" title="展开"></a>展开</h2><ul><li>展开操作符正与解构相反。 它允许你将一个数组展开为另一个数组，或将一个对象展开为另一个对象</li><li>这样我们合并数组/对象就方便了很多</li><li>但是展开对，对象的缺陷还是有的</li><li>两个对象展开相同还是对象，相同的属性就会覆盖<figure class="highlight typescript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">// 合并数组</span></span><br><span class="line"><span class="keyword">let</span> first = [<span class="number">1</span>, <span class="number">2</span>];</span><br><span class="line"><span class="keyword">let</span> second = [<span class="number">3</span>, <span class="number">4</span>];</span><br><span class="line"><span class="keyword">let</span> bothPlus = [<span class="number">0</span>, ...first, ...second, <span class="number">5</span>];</span><br><span class="line"></span><br><span class="line"><span class="comment">// 合并对象</span></span><br><span class="line"><span class="keyword">let</span> defaults = &#123; food: <span class="string">"spicy"</span>, price: <span class="string">"$$"</span>, ambiance: <span class="string">"noisy"</span> &#125;;</span><br><span class="line"><span class="keyword">let</span> search = &#123; ...defaults, food: <span class="string">"rich"</span> &#125;;</span><br></pre></td></tr></table></figure></li></ul><hr><ul><li>对象展开还有其它一些意想不到的限制。 首先，它仅包含对象 自身的可枚举属性。 大体上是说当你展开一个对象实例时，你会丢失其方法：<figure class="highlight typescript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">class</span> C &#123;</span><br><span class="line">  p = <span class="number">12</span>;</span><br><span class="line">  m() &#123;</span><br><span class="line">  &#125;</span><br><span class="line">&#125;</span><br><span class="line"><span class="keyword">let</span> c = <span class="keyword">new</span> C();</span><br><span class="line"><span class="keyword">let</span> clone = &#123; ...c &#125;;</span><br><span class="line">clone.p; <span class="comment">// ok</span></span><br><span class="line">clone.m(); <span class="comment">// error!</span></span><br></pre></td></tr></table></figure></li></ul><h1 id="后记"><a href="#后记" class="headerlink" title="后记"></a>后记</h1><ul><li>这个就是我学习Ts的第二天的笔记，欢迎更多的同行大哥指导交流</li><li><a href="https://yhf7.github.io/" target="_blank" rel="noopener">欢迎进入我的博客</a>：<a href="https://yhf7.github.io/" target="_blank" rel="noopener">https://yhf7.github.io/</a></li><li>如果有什么侵权的话，请及时添加小编微信以及qq也可以来告诉小编（905477376微信qq通用），谢谢！</li></ul>]]></content>
      
      
      <categories>
          
          <category> TypeScript </category>
          
      </categories>
      
      
        <tags>
            
            <tag> TypeScript 笔记 </tag>
            
        </tags>
      
    </entry>
    
    <entry>
      <title>ES6 以上的个人遇到的知识积累</title>
      <link href="/2019/03/07/ES6+%E7%9A%84%E7%94%A8%E6%B3%95%E7%AC%94%E8%AE%B0/"/>
      <url>/2019/03/07/ES6+%E7%9A%84%E7%94%A8%E6%B3%95%E7%AC%94%E8%AE%B0/</url>
      
        <content type="html"><![CDATA[<link rel="stylesheet" class="aplayer-secondary-style-marker" href="/assets/css/APlayer.min.css"><script src="/assets/js/APlayer.min.js" class="aplayer-secondary-script-marker"></script><h1 id="…-数组-对象的扩展"><a href="#…-数组-对象的扩展" class="headerlink" title="… 数组/对象的扩展"></a>… 数组/对象的扩展</h1><ul><li>在我一开始看到…后面带参数是我写vue中时使用vuex引入数据的时候使用的</li><li>在一开始我只是以为它只是vuex引入数据的写法</li><li>但是在我再次遇到的时候我对这个表示很疑惑，所以就问人</li><li>通过查阅资料和他人的告知我知道了这个是数组/对象的扩展是es6以上的知识</li><li>我就去查阅了es6+的资料并知道了是着么的一个东西</li><li>相当于把整个对象搬迁过来本地一样</li></ul><ol><li><p>对象 (分开放test.js)</p><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">var</span> test = &#123;</span><br><span class="line">    test1 (e) &#123;</span><br><span class="line">        <span class="built_in">console</span>.log(e);</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="keyword">export</span> &#123;test&#125;</span><br></pre></td></tr></table></figure></li><li><p>引入方法</p><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">import</span> &#123;test&#125;  <span class="keyword">from</span> <span class="string">'./test.js'</span></span><br><span class="line"></span><br><span class="line"><span class="comment">// 小程序中使用</span></span><br><span class="line">Page(&#123;</span><br><span class="line">  <span class="comment">// 函数的扩展 es6+  等于new一个类</span></span><br><span class="line">  ...detailsTpl,</span><br><span class="line"></span><br><span class="line"></span><br><span class="line">  test() &#123;</span><br><span class="line">      <span class="comment">// 在内部就可以直接用this来使用，相当于把整个函数搬迁过来了</span></span><br><span class="line">      <span class="keyword">this</span>.test1(<span class="string">'测试'</span>);</span><br><span class="line">  &#125;</span><br><span class="line"></span><br><span class="line">&#125;)</span><br></pre></td></tr></table></figure></li></ol><h1 id="for-in-for-of"><a href="#for-in-for-of" class="headerlink" title="for in/for of"></a>for in/for of</h1><ul><li>for of一直都没着么关注看到别人说是es6的语法改进了for in 的不足就去看看</li><li>这个of 呢不能用在对象哦，用在数组是可以的</li><li>这个of和foreach好像没啥区别啊….,官网说是用来代替foreach实例的<figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">let</span> arr = [<span class="string">'a'</span>,<span class="string">'b'</span>,<span class="string">'c'</span>,<span class="string">'d'</span>,<span class="string">'e'</span>];</span><br><span class="line"><span class="comment">// 这个呢是用了做一个小实验</span></span><br><span class="line">arr.foo = <span class="string">"hello"</span></span><br><span class="line"></span><br><span class="line"><span class="comment">// 先看看 数组的情况</span></span><br><span class="line"><span class="comment">// of里面是不会输出上面的foo的</span></span><br><span class="line"><span class="keyword">for</span> (<span class="keyword">const</span> e <span class="keyword">of</span> arr) &#123;</span><br><span class="line">    <span class="built_in">console</span>.log(e)</span><br><span class="line">&#125; <span class="comment">// a,b,c,d,e</span></span><br><span class="line"><span class="comment">// 看看foreach</span></span><br><span class="line"><span class="comment">// foreach 这个也是一样的</span></span><br><span class="line">arr.forEach(<span class="function"><span class="params">item</span> =&gt;</span> &#123;</span><br><span class="line">    <span class="built_in">console</span>.log(item)</span><br><span class="line">&#125;)<span class="comment">// a,b,c,d,e</span></span><br><span class="line"></span><br><span class="line"><span class="comment">// 这个就不同的，它会输出foo</span></span><br><span class="line"><span class="keyword">for</span> (<span class="keyword">const</span> e <span class="keyword">in</span> arr) &#123;</span><br><span class="line">    <span class="built_in">console</span>.log(e)</span><br><span class="line">&#125; <span class="comment">// 0,1,2,3,4,foo</span></span><br></pre></td></tr></table></figure></li></ul><hr><ul><li>看看用在对象里面</li><li>对象是不可以使用的，直接报错<figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">let</span> object = &#123;<span class="string">'a'</span>:<span class="number">11</span>,<span class="string">'b'</span>:<span class="number">22</span>,<span class="string">'c'</span>:<span class="number">33</span>&#125;</span><br><span class="line"></span><br><span class="line"><span class="comment">// 先看看 数组的情况</span></span><br><span class="line"><span class="keyword">for</span> (<span class="keyword">const</span> e <span class="keyword">of</span> object) &#123;</span><br><span class="line">    <span class="built_in">console</span>.log(e)</span><br><span class="line">&#125; <span class="comment">// error</span></span><br><span class="line"><span class="keyword">for</span> (<span class="keyword">const</span> e <span class="keyword">in</span> arr) &#123;</span><br><span class="line">    <span class="built_in">console</span>.log(e)</span><br><span class="line">&#125; <span class="comment">// // a,b,c,d,e</span></span><br></pre></td></tr></table></figure></li></ul>]]></content>
      
      
      <categories>
          
          <category> JavaScript </category>
          
      </categories>
      
      
        <tags>
            
            <tag> js笔记 </tag>
            
        </tags>
      
    </entry>
    
    <entry>
      <title>js复习笔记（学校课程）</title>
      <link href="/2019/03/07/%E5%A4%A7%E4%BA%8C%E4%B8%8Bjs%E5%A4%8D%E4%B9%A0%E7%AC%94%E8%AE%B0/"/>
      <url>/2019/03/07/%E5%A4%A7%E4%BA%8C%E4%B8%8Bjs%E5%A4%8D%E4%B9%A0%E7%AC%94%E8%AE%B0/</url>
      
        <content type="html"><![CDATA[<link rel="stylesheet" class="aplayer-secondary-style-marker" href="/assets/css/APlayer.min.css"><script src="/assets/js/APlayer.min.js" class="aplayer-secondary-script-marker"></script><p>今天内容：<br>1、js的内置对象<br>2、js的函数<br>3、js的事件<br>4、js的BOM<br>5、js的DOM</p><p>一、js的内置对象<br>1、Number对象<br>创建方式：<br>“var myNum=new Number(value);<br>var myNum=Number(value);”<br>常用方法：<br>toString():把数字转换为字符串，使用指定的基数。<br>valueOf():返回一个 Number 对象的基本数字值。<br>2、Boolean对象<br>创建方式：<br>“var bool = new Boolean(value);<br>var bool = Boolean(value);”<br>常用方法：<br>toString():把逻辑值转换为字符串，并返回结果。<br>valueOf():返回 Boolean 对象的原始值。</p><p>3、String对象<br>创建方式：<br>“var str = new String(s);<br>var str = String(s);”<br>属性：length:字符串的长度<br>常用方法：<br>indexOf():检索字符串。<br>lastIndexOf():从后向前搜索字符串。<br>split():把字符串分割为字符串数组。<br>substring():提取字符串中两个指定的索引号之间的字符。包括头不包括尾<br>substr():从起始索引号提取字符串中指定数目的字符。<br>toUpperCase():把字符串转换为大写。<br>valueOf():返回某个字符串对象的原始值。</p><p>4、Date对象<br>创建方式：<br>var myDate=new Date();     Date 对象会自动把当前日期和时间保存为其初始值。<br>var myDate=new Date(毫秒值);     1970年1月1日到先目前的时间点的毫秒<br>常见方法：<br>getFullYear():从 Date 对象以四位数字返回年份。<br>getMonth():从 Date 对象返回月份 (0 ~ 11)。<br>getDate():从 Date 对象返回一个月中的某一天 (1 ~ 31)。<br>getDay():从 Date 对象返回一周中的某一天 (0 ~ 6)。<br>getTime():返回 1970 年 1 月 1 日至今的毫秒数。<br>toString():把 Date 对象转换为字符串。<br>toLocaleString():根据本地时间格式，把 Date 对象转换为字符串。</p><p>5、Math对象<br>“Math 对象并不像 Date 和 String 那样是对象的类，因此没有构造函数 Math()，像 Math.sin() 这样的<br>函数只是函数，不是某个对象的方法。您无需创建它，通过把 Math 作为对象使用就可以调用其所有属<br>性和方法。”</p><p>常用的方法：<br>ceil():对数进行上舍入。<br>floor():对数进行下舍入。<br>round():把数四舍五入为最接近的整数。<br>random():返回 0 ~ 1 之间的随机数。</p><p>6、RegExp对象<br>对象的方式：var reg = new RegExp(pattern);<br>直接量语法：var reg = /pattern/;<br>注意：正则规则一般是^开始 以$结束<br>正则规则：<br>[0-9]:代表0-9的数字<br>[A-Z]:代表大写字母<br>[a-z]:代表小写<br>[A-z]:大小写都行<br>\d：代表数字        \D:非数字<br>\w:代表单词         \W:非单词<br>{n}:n个<br>{n,m}:n到m个<br>n+:1次或多次<br>n?:0次或一次<br>n*:0次或多次</p><p>常用方法：<br>test(待校验的字符串)</p><p>需求：校验一个邮箱：<a href="mailto:haohao_827@163.com" target="_blank" rel="noopener">haohao_827@163.com</a></p><p>7、Array对象<br>“var arr = new Array();<br>var arr = new Array(size);<br>var arr = new Array(element0, element1, …, elementn);<br>var arr = [element0, element1, …, elementn];”<br>属性：length:数组的长度<br>常用方法：<br>join();把数组的所有元素放入一个字符串。元素通过指定的分隔符进行分隔。<br>pop():删除并返回数组的最后一个元素<br>reverse():颠倒数组中元素的顺序。<br>sort():对数组的元素进行排序   按照字典顺序排序</p><p>二、js的函数<br>1、自定义函数<br>(1) 普通函数<br>语法：function 函数名称(参数列表){函数体}</p><p>(2) 匿名函数<br>语法：function(参数列表){函数体}</p><p>(3) 对象函数<br>语法：new Function(“参数1”，”参数2”，…”参数n”，”函数体”);<br>注意：函数体必须写在最后，参数和函数体需要字符串的形式</p><p>参数列表:<br>NaN:not a number 不是一个数字<br>arguments对象：数组对象，负责收集实参</p><p>返回值：<br>返回值不需要在定义函数的时候声明<br>函数需要返回值只需在函数体中使用return进行返回，return后的代码不执行</p><p>2、js的全局函数<br>(1) 编码和解码<br>encodeURI():把字符串编码为 URI。<br>decodeURI():解码某个编码的 URI。<br>encodeURIcomponent():把为 URI 组件进行编码。<br>decodeURIcomponent()：把为 URI 组件进行解码。<br>escape():编码字符串<br>unescape():解码字符串<br>需求：对url进行编码 <a href="http://www.baidu.com?name=张&amp;pass=123" target="_blank" rel="noopener">http://www.baidu.com?name=张&amp;pass=123</a><br>区别：对一些特殊字符编码的范围不同<br><a href="http://www.baidu.com?name=%E5%BC%A0&amp;pass=123" target="_blank" rel="noopener">http://www.baidu.com?name=%E5%BC%A0&amp;pass=123</a><br>http%3A%2F%2F<a href="http://www.baidu.com%3Fname%3D%E5%BC%A0%26pass%3D123：适合编码提交的参数部分" target="_blank" rel="noopener">www.baidu.com%3Fname%3D%E5%BC%A0%26pass%3D123：适合编码提交的参数部分</a><br>http%3A//<a href="http://www.baidu.com%3Fname%3D%u5F20%26pass%3D123：适合编码单独的字符串" target="_blank" rel="noopener">www.baidu.com%3Fname%3D%u5F20%26pass%3D123：适合编码单独的字符串</a><br>(2) 强制转换<br>Boolean()<br>String()<br>Number()<br>(3) 转成数字<br>parseFloat():解析一个字符串并返回一个浮点数。<br>parseInt():解析一个字符串并返回一个整数。<br>(4) eval()函数<br>把字符串作为脚本代码来执行。</p><p>三、js的事件<br>事件、事件源、响应行为</p><p>1、常用事件<br>onchange事件</p><p>onfocus()事件和onblur()事件</p><p>onmouseover事件和onmouseout事件onload事件<br>2、事件与事件源的绑定方式<br>(1) 事件与响应行为与事件源绑定(2)事件与事件源绑定 响应行为使用函数封装<br>this关键字：代表本事件源对象<br>(3) 事件、响应行为  与事件源完全分离3、阻止事件的默认行为<br>W3C的标准：e.preventDefault()<br>IE标准：window.event.returnValue = false;<br>4、阻止事件的传播<br>W3C的标准：e.stopPropagation();<br>IE标准：window.event.cancelBubble = true;<br>四、js的BOM<br>1、window对象<br>(1) 弹框的方法<br>提示框：alert(确认信息);<br>确认框：confirm(确认信息);<br>存在返回值：如果点击确认返回true  点击取消 返回false<br>输入框：prompt(输入提示信息)<br>存在返回值：如果输入内容点击确认返回输入的内容 点击取消返回null(2) open()方法<br>作用就是在js中使用此方法打开新页面 参数是url地址(3) 定时器方法<br>指定的延时时间后执行一定行为<br>setTimeout(函数对象，毫秒值)</p><p>var timer = setInterval(函数对象，毫秒值)<br>clearInterval(timer);</p><p>2、location对象<br>location.href=”url路径”;<br>location.href = “<a href="http://www.baidu.com&quot;" target="_blank" rel="noopener">http://www.baidu.com&quot;</a>;</p><p>需求：实现页面注册成功后的跳转主页<br>技术：location.href+setInterval</p><p>3、history对象<br>history.back();返回上一页<br>history.forward():进入下一页<br>history.go();跳转到哪一页</p><p>五、DOM对象<br>document.getElementById(“id属性值”);<br>document.getElementsByTagName(“标签名称”);<br>document.getElementsByName(“name属性值”);<br>innerHTML：获取某个元素中的html代码</p>]]></content>
      
      
      <categories>
          
          <category> JavaScript </category>
          
      </categories>
      
      
        <tags>
            
            <tag> js笔记 </tag>
            
        </tags>
      
    </entry>
    
    <entry>
      <title>Android 学习笔记 布局/布局常用属性（学校课程）</title>
      <link href="/2019/03/07/%E5%A4%A7%E4%BA%8C%E4%B8%8BAndroid%E5%BC%80%E5%8F%91%E7%AC%94%E8%AE%B0/"/>
      <url>/2019/03/07/%E5%A4%A7%E4%BA%8C%E4%B8%8BAndroid%E5%BC%80%E5%8F%91%E7%AC%94%E8%AE%B0/</url>
      
        <content type="html"><![CDATA[<link rel="stylesheet" class="aplayer-secondary-style-marker" href="/assets/css/APlayer.min.css"><script src="/assets/js/APlayer.min.js" class="aplayer-secondary-script-marker"></script><h1 id="前言"><a href="#前言" class="headerlink" title="前言"></a>前言</h1><ul><li><a href="https://github.com/YHF7/Android" target="_blank" rel="noopener">案例存放地</a>:<a href="https://github.com/YHF7/Android" target="_blank" rel="noopener">https://github.com/YHF7/Android</a></li><li>安卓几大布局记录</li></ul><h1 id="LinearLayout-线性布局"><a href="#LinearLayout-线性布局" class="headerlink" title="LinearLayout 线性布局"></a>LinearLayout 线性布局</h1><h2 id="布局排列方式"><a href="#布局排列方式" class="headerlink" title="布局排列方式"></a>布局排列方式</h2><ul><li>垂直布局 orientation = “vertical”</li><li>水平布局 orientation = “horizontal”</li></ul><figure class="highlight"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line">&lt;LinearLayout</span><br><span class="line">        <span class="comment">// 垂直布局</span></span><br><span class="line">        android:orientation=<span class="string">"horizontal"</span>&gt;</span><br><span class="line">&lt;/LinearLayout&gt;</span><br></pre></td></tr></table></figure><h2 id="大小格式"><a href="#大小格式" class="headerlink" title="大小格式"></a>大小格式</h2><ul><li>充满父类 match_parent </li><li>根据内容改变 wrap_content<figure class="highlight"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><span class="line">&lt;LinearLayout</span><br><span class="line">        <span class="comment">// 设置宽高均为充满父类</span></span><br><span class="line">        android:layout_width=<span class="string">"match_parent"</span></span><br><span class="line">        android:layout_height=<span class="string">"match_parent"</span></span><br><span class="line">        <span class="comment">// 垂直布局</span></span><br><span class="line">        android:orientation=<span class="string">"horizontal"</span>&gt;</span><br><span class="line">&lt;/LinearLayout&gt;</span><br></pre></td></tr></table></figure></li></ul><h2 id="权重"><a href="#权重" class="headerlink" title="权重"></a>权重</h2><ul><li>android:layout_weight=”1”</li></ul><h1 id="RelativeLayout-相对布局"><a href="#RelativeLayout-相对布局" class="headerlink" title="RelativeLayout 相对布局"></a>RelativeLayout 相对布局</h1><ul><li>是通过相对定位的方式让控件出现在布局任意位置；</li><li>在相对布局中如果不指定控件摆放的位置，那么控件都会被默认放在RelativeLayout的左上角。</li><li>因此要先指定第一个控件的位置，其他控件为该位置的相对位置； </li><li>RelativeLayout属性： (使用相对布局属性需要先指定控件的id，其他控件根据该控件的id，来确定相对于该控件的相对位置)</li><li>第一个控件默认在布局左上角，如果指定放在第一个控件的左边或者上面，会看不到第二个控件</li></ul><figure class="highlight"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line">&lt;RelativeLayout</span><br><span class="line">        <span class="comment">// 设置宽高均为充满父类</span></span><br><span class="line">        android:layout_width=<span class="string">"match_parent"</span></span><br><span class="line">        android:layout_height=<span class="string">"match_parent"</span>&gt;</span><br><span class="line">        ......</span><br><span class="line">&lt;/RelativeLayout&gt;</span><br></pre></td></tr></table></figure><h2 id="与兄弟控件的边缘对齐：（值为id）-id"><a href="#与兄弟控件的边缘对齐：（值为id）-id" class="headerlink" title="与兄弟控件的边缘对齐：（值为id）@id/"></a>与兄弟控件的边缘对齐：（值为id）@id/</h2><p>android:layout_below 将该控件的上边缘对齐指定控件的下边缘<br>android:layout_above 将该控件的下边缘对齐指定控件的上边缘<br>android:layout_toLeftOf 将该控件的右边缘对齐指定控件的左边缘</p><h2 id="android-layout-toRightOf-将该控件的左边缘对齐指定控件的右边缘"><a href="#android-layout-toRightOf-将该控件的左边缘对齐指定控件的右边缘" class="headerlink" title="android:layout_toRightOf 将该控件的左边缘对齐指定控件的右边缘"></a>android:layout_toRightOf 将该控件的左边缘对齐指定控件的右边缘</h2><p>android:layout_alignRight 将此控件的右边缘与给定ID的控件右边缘对齐。<br>android:layout_alignLeft    将此控件的左边缘与给定ID的控件左边缘对齐。<br>android:layout_alignTop 将此控件的上边缘与给定ID的控件上边缘对齐。<br>android:layout_alignBottom 将此控件的底部边缘与给定ID的控件底部边缘对齐。</p><h2 id="与父控件的边缘对齐：-（属性值为true，false）"><a href="#与父控件的边缘对齐：-（属性值为true，false）" class="headerlink" title="与父控件的边缘对齐： （属性值为true，false）"></a>与父控件的边缘对齐： （属性值为true，false）</h2><ul><li>（可以同时使用两个属性，如android:layout_alignParentRight ?android:layout_alignParentBottom 表示将该控件放到父控件的右下角）<br>android:layout_alignParentLeft  将此控件的左边缘与父容器的左边缘匹配。<br>android:layout_alignParentRight 将此控件的右边缘与父容器的右边缘匹配。<br>android:layout_alignParentTop 将此控件的上边缘与父容器的上边缘匹配。<br>android:layout_alignParentBottom 将此控件的底部边缘与父容器的底部边缘匹配。</li></ul><h2 id="对齐置父控件的中间：-属性值为true，false"><a href="#对齐置父控件的中间：-属性值为true，false" class="headerlink" title="对齐置父控件的中间： (属性值为true，false)"></a>对齐置父控件的中间： (属性值为true，false)</h2><p>android:layout_centerInParent   放置到父控件的正中间<br>android:layout_centerHorizontal    放置到父控件的水平中间</p><h2 id="android-layout-centerVertical-放置到父控件的垂直中间"><a href="#android-layout-centerVertical-放置到父控件的垂直中间" class="headerlink" title="android:layout_centerVertical  放置到父控件的垂直中间"></a>android:layout_centerVertical  放置到父控件的垂直中间</h2><p>android:layout_alignStart  对齐置兄弟控件的起始位置<br>android:layout_alignEnd  对齐置兄弟控件的末尾位置<br>android:layout_alignParentStart  对齐置父控件的起始位置<br>android:layout_alignParentEnd  对齐置父控件的末尾位置  </p><h2 id="基准线"><a href="#基准线" class="headerlink" title="基准线"></a>基准线</h2><p>android:layout_alignBaseline   对齐基准线  (值为id）</p><h2 id="控件之间的距离设置"><a href="#控件之间的距离设置" class="headerlink" title="控件之间的距离设置"></a>控件之间的距离设置</h2><p>android:padding:指定控件中的内容与到此控件的四边缘的距离</p><h2 id="android-layout-margin-设置此控件的四边缘与其他控件的距离"><a href="#android-layout-margin-设置此控件的四边缘与其他控件的距离" class="headerlink" title="android:layout_margin:设置此控件的四边缘与其他控件的距离"></a>android:layout_margin:设置此控件的四边缘与其他控件的距离</h2><p>android:paddingBottom:设置控件内容与控件下边缘的距离<br>android:paddingTop:设置控件内容与控件上边缘的距离<br>android:paddingLeft:设置控件内容与控件左边缘的距离</p><h2 id="android-paddingRight-设置控件内容与控件右边缘的距离"><a href="#android-paddingRight-设置控件内容与控件右边缘的距离" class="headerlink" title="android:paddingRight:设置控件内容与控件右边缘的距离"></a>android:paddingRight:设置控件内容与控件右边缘的距离</h2><p>android:layout_marginBottom:设置此控件的下边缘与其他控件的距离<br>android:layout_marginTop:设置此控件的上边缘与其他控件的距离<br>android:layout_marginLeft:设置此控件的左边缘与其他控件的距离<br>android:layout_marginRight:设置此控件的右边缘与其他控件的距离</p><h1 id="FrameLayout-帧布局"><a href="#FrameLayout-帧布局" class="headerlink" title="FrameLayout 帧布局"></a>FrameLayout 帧布局</h1><p>android:layout_gravity:控制位置<br>android:foreground:设置改帧布局容器的前景图像<br>android:foregroundGravity:设置前景图像显示的位置</p><h1 id="TableLayout-表格布局"><a href="#TableLayout-表格布局" class="headerlink" title="TableLayout 表格布局"></a>TableLayout 表格布局</h1><ul><li>相信学过HTML的朋友都知道,我们可以通过&lt; table &gt;&lt; tr &gt;&lt; td &gt;就可以生成一个HTML的表格, 而Android中也允许我们使用表格的方式来排列组件,就是行与列的方式,就说我们这节的TableLayout! 但却不像我们后面会讲到的Android 4.0后引入的GridLayout(网格)布局一样,直接就可以设置多少行与多少列！</li></ul><hr><ul><li>如何确定行数与列数<br>①如果我们直接往TableLayout中添加组件的话,那么这个组件将占满一行！！！<br>②如果我们想一行上有多个组件的话,就要添加一个TableRow的容器,把组件都丢到里面！<br>③tablerow中的组件个数就决定了该行有多少列,而列的宽度由该列中最宽的单元格决定<br>④tablerow的layout_width属性,默认是fill_parent的,我们自己设置成其他的值也不会生效！！！ 但是layout_height默认是wrap_tencontent的,我们却可以自己设置大小！<br>⑤整个表格布局的宽度取决于父容器的宽度(占满父容器本身)<br>⑥有多少行就要自己数啦,一个tablerow一行,一个单独的组件也一行！多少列则是看tableRow中 的组件个数,组件最多的就是TableLayout的列数</li></ul><hr><ul><li>三个常用属性<br>android:collapseColumns:设置需要被隐藏的列的序号<br>android:shrinkColumns:设置允许被收缩的列的列序号<br>android:stretchColumns:设置运行被拉伸的列的列序号<br>以上这三个属性的列号都是从0开始算的,比如shrinkColunmns = “2”,对应的是第三列！<br>可以设置多个,用逗号隔开比如”0,2”<br>除了这三个常用属性,还有两个属性,分别就是跳格子以及合并单元格,这和HTML中的Table类似:<br>android:layout_column=”2”:表示的就是跳过第二个,直接显示到第三个格子处,从1开始算的!<br>android:layout_span=”4”:表示合并4个单元格,也就说这个组件占4个单元格</li></ul><h1 id="GridLayout-网格矩阵布局"><a href="#GridLayout-网格矩阵布局" class="headerlink" title="GridLayout 网格矩阵布局"></a>GridLayout 网格矩阵布局</h1><ul><li>GridLayout布局是Android4.0（API Level 14）新引入的网格矩阵形式的布局控件。</li></ul><hr><p>属性<br>android:columnCount<br>说明：GridLayout的最大列数<br>android:rowCount<br>说明：GridLayout的最大行数<br>android:orientation<br>说明：GridLayout中子元素的布局方向。有以下取值：<br>horizontal – 水平布局。 </p><h2 id="vertical-–-竖直布局。"><a href="#vertical-–-竖直布局。" class="headerlink" title="vertical – 竖直布局。"></a>vertical – 竖直布局。</h2><p>android:layout_column<br>说明：显示该子控件的列，例如android:layout_column=”0”,表示当前子控件显示在第1列，android:layout_column=”1”,表示当前子控件显示在第2列。<br>android:layout_columnSpan<br>说明：该控件所占的列数，例如android:layout_columnSpan=”2”,表示当前子控件占两列。</p><p>android:layout_row<br>说明：显示该子控件的行，例如android:layout_row=”0”,表示当前子控件显示在第1行，android:layout_row=”1”,表示当前子控件显示在第2行。</p><p>android:layout_rowSpan<br>说明：该控件所占的行数，例如android:layout_rowSpan=”2”,表示当前子控件占两行。</p><p>android:layout_columnWeight<br>说明：该控件的列权重，与android:layout_weight类似，例如有GridLayout上两列，都设置android:layout_columnWeight = “1”,则两列各占GridLayout宽度的一半</p><p>android:layout_rowWeight<br>说明：该控件的行权重，原理同android:layout_columnWeight。</p><h2 id="平均分配格行-列的问题"><a href="#平均分配格行-列的问题" class="headerlink" title="平均分配格行/列的问题"></a>平均分配格行/列的问题</h2><p>GridLayout在Android 5.1(API Level 21)时引入了android:layout_columnWeight和android:layout_rowWeight来解决平分问题，但是API21前怎么办呢？</p><ol><li>需要用到兼容包：</li></ol><ul><li>1.compile ‘com.android.support:gridlayout-v7:22.+’ </li><li>2.布局中使用android.support.v7.widget.GridLayout<br>&lt;android.support.v7.widget.GridLayout<br>…<br>&lt;/android.support.v7.widget.GridLayout&gt;</li><li>3.使用app:layout_columnWeight 和app:layout_rowWeight 设置权重</li></ul><h1 id="后记"><a href="#后记" class="headerlink" title="后记"></a>后记</h1><ul><li>Android学习记录，老师笔记加自己的笔记</li><li><a href="https://yhf7.github.io/" target="_blank" rel="noopener">欢迎进入我的博客</a>：<a href="https://yhf7.github.io/" target="_blank" rel="noopener">https://yhf7.github.io/</a></li><li>如果有什么侵权的话，请及时添加小编微信以及qq也可以来告诉小编（905477376微信qq通用），谢谢！</li></ul>]]></content>
      
      
      <categories>
          
          <category> Android </category>
          
      </categories>
      
      
        <tags>
            
            <tag> Android 笔记 </tag>
            
        </tags>
      
    </entry>
    
    <entry>
      <title>微信小程序前端笔记</title>
      <link href="/2019/03/03/%E5%BE%AE%E4%BF%A1%E5%B0%8F%E7%A8%8B%E5%BA%8F%E5%AE%9E%E6%88%98%E7%AC%94%E8%AE%B0/"/>
      <url>/2019/03/03/%E5%BE%AE%E4%BF%A1%E5%B0%8F%E7%A8%8B%E5%BA%8F%E5%AE%9E%E6%88%98%E7%AC%94%E8%AE%B0/</url>
      
        <content type="html"><![CDATA[<link rel="stylesheet" class="aplayer-secondary-style-marker" href="/assets/css/APlayer.min.css"><script src="/assets/js/APlayer.min.js" class="aplayer-secondary-script-marker"></script><h1 id="小程序中ES6类"><a href="#小程序中ES6类" class="headerlink" title="小程序中ES6类"></a>小程序中ES6类</h1><ul><li>在小程序中我们也是可以使用ES6的语法去是实现我们的业务逻辑</li><li>在ES6中新增了，类方法那我们就来一起用一样吧</li><li>实际与后端的类没有区别</li></ul><ol><li><p>创建类</p><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">// class 构建一个类</span></span><br><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">Home</span></span>&#123;</span><br><span class="line">    <span class="comment">// 类的构造函数</span></span><br><span class="line">  <span class="keyword">constructor</span> () &#123;</span><br><span class="line"></span><br><span class="line">  &#125;</span><br><span class="line"></span><br><span class="line">    <span class="comment">// 自定义的类内部方法</span></span><br><span class="line">  getBannerData () &#123;</span><br><span class="line">      ...</span><br><span class="line">  &#125;</span><br><span class="line"></span><br><span class="line">&#125;</span><br><span class="line"><span class="comment">//外部想要使用这个类就需要向export抛出这个类</span></span><br><span class="line"><span class="keyword">export</span> &#123;Home&#125;;</span><br></pre></td></tr></table></figure></li><li><p>使用类</p><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">// 1.首先引入这个类 home-mode.js这个是我的类文件名</span></span><br><span class="line"><span class="keyword">import</span> &#123;Home&#125; <span class="keyword">from</span> <span class="string">'home-model.js'</span>;</span><br><span class="line"><span class="comment">// 2.实例化 home-model 的home类</span></span><br><span class="line"><span class="keyword">var</span> home = <span class="keyword">new</span> Home();</span><br><span class="line"><span class="comment">// 3.调用</span></span><br><span class="line">Page(&#123;</span><br><span class="line">    onLoad: <span class="function"><span class="keyword">function</span> (<span class="params"></span>) </span>&#123;</span><br><span class="line">        <span class="comment">// 调用方法</span></span><br><span class="line">        home.getBannerData(<span class="function"><span class="params">()</span> =&gt;</span> &#123;</span><br><span class="line">            ....</span><br><span class="line">        &#125;)</span><br><span class="line">    &#125;</span><br><span class="line">&#125;)</span><br></pre></td></tr></table></figure></li></ol><h1 id="小程序中ES6类继承"><a href="#小程序中ES6类继承" class="headerlink" title="小程序中ES6类继承"></a>小程序中ES6类继承</h1><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">// 1.引入类</span></span><br><span class="line"><span class="keyword">import</span> &#123;Base&#125; <span class="keyword">from</span> <span class="string">'../../utils/base.js'</span></span><br><span class="line"></span><br><span class="line"><span class="comment">// 2.继承类</span></span><br><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">Home</span> <span class="keyword">extends</span> <span class="title">Base</span> </span>&#123;</span><br><span class="line"></span><br><span class="line">  <span class="keyword">constructor</span> () &#123;</span><br><span class="line">    <span class="comment">// 有构造函数的时候必须调用基类的构造函数</span></span><br><span class="line">    <span class="keyword">super</span>();</span><br><span class="line">  &#125;</span><br><span class="line"></span><br><span class="line">  <span class="comment">// 3. 调用基类方法</span></span><br><span class="line">  getBannerData () &#123;</span><br><span class="line">      <span class="comment">// 直接this加方法名就可以了</span></span><br><span class="line">      <span class="keyword">this</span>.request()</span><br><span class="line">  &#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="keyword">export</span> &#123;Home&#125;;</span><br></pre></td></tr></table></figure><h1 id="requert请求封装-（如何使用上面说了）"><a href="#requert请求封装-（如何使用上面说了）" class="headerlink" title="requert请求封装 （如何使用上面说了）"></a>requert请求封装 （如何使用上面说了）</h1><ol><li>在我们调用后端的api的时候我们会大量的去请求后端的Api，这样会使得我们前端的业务逻辑不断的重复</li><li>我们使用面向对象的方式对请求函数做了封装</li><li>这样我们代码的复用性更高，代码的重复性更少</li><li>封装这种复用性很高的函数时我们都要创建基类使得让其他的类去继承使用<figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">// 1. utils/base.js  创建utils 新疆base基类文件</span></span><br><span class="line"><span class="comment">// 2. 新建 config.js 用来储存公共数据或配置信息</span></span><br><span class="line"></span><br><span class="line"><span class="comment">// 3. 引入配置类</span></span><br><span class="line"><span class="keyword">import</span> &#123;Config&#125; <span class="keyword">from</span> <span class="string">'config.js'</span></span><br><span class="line"></span><br><span class="line"><span class="comment">// 2. 创建基类Base</span></span><br><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">Base</span> </span>&#123;</span><br><span class="line">    <span class="comment">// 构造函数</span></span><br><span class="line">  <span class="keyword">constructor</span>() &#123;</span><br><span class="line">      <span class="comment">// 获取配置在信息类的 公共url信息</span></span><br><span class="line">    <span class="keyword">this</span>.baseRequestUrl = Config.restUrl;</span><br><span class="line">  &#125;</span><br><span class="line"></span><br><span class="line">  <span class="comment">/**</span></span><br><span class="line"><span class="comment">   * 请求封装</span></span><br><span class="line"><span class="comment">   */</span></span><br><span class="line">  request (params) &#123;</span><br><span class="line">    <span class="comment">// url内外拼接</span></span><br><span class="line">    <span class="keyword">var</span> url = <span class="keyword">this</span>.baseRequestUrl + params.url;</span><br><span class="line"></span><br><span class="line">    <span class="comment">// 判断没有传获取方式默认为get</span></span><br><span class="line">    <span class="keyword">if</span> (!params.type) &#123;</span><br><span class="line">      params.type = <span class="string">'GET'</span></span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="comment">// 调用微信请求api</span></span><br><span class="line">    wx.request(&#123;</span><br><span class="line">      url: url,</span><br><span class="line">      data: params.data,</span><br><span class="line">      method: params.type,</span><br><span class="line">      header: &#123;</span><br><span class="line">        <span class="string">'content-type'</span>:<span class="string">'application/json'</span>,</span><br><span class="line">        <span class="string">'token'</span>: wx.getStorageSync(<span class="string">'token'</span>)</span><br><span class="line">      &#125;,</span><br><span class="line">      success: <span class="function"><span class="params">res</span> =&gt;</span> &#123;</span><br><span class="line">        <span class="comment">// 判断函数，存在才调用</span></span><br><span class="line">        <span class="comment">// 返回信息的函数回调</span></span><br><span class="line">        params.sCallback&amp;&amp;params.sCallback(res.data);</span><br><span class="line">      &#125;,</span><br><span class="line">      fail: <span class="function"><span class="params">err</span> =&gt;</span> &#123;</span><br><span class="line">        <span class="built_in">console</span>.log(err);</span><br><span class="line">      &#125;</span><br><span class="line">    &#125;)</span><br><span class="line">  &#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="keyword">export</span> &#123;Base&#125;;</span><br></pre></td></tr></table></figure></li></ol><h1 id="小程序自定义模版"><a href="#小程序自定义模版" class="headerlink" title="小程序自定义模版"></a>小程序自定义模版</h1><ul><li>在我们的页面开发中也会存在很多的页面会有复用</li><li>那我们定义一个模块模版就更容易让我们使用</li></ul><ol><li><p>创建模版</p><figure class="highlight html"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><span class="line">// 模版</span><br><span class="line">// 为模版加name 唯一标示用来调用的时候用的，其实内部和写html没有区别</span><br><span class="line"><span class="tag">&lt;<span class="name">template</span> <span class="attr">name</span>=<span class="string">"products"</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">view</span> <span class="attr">class</span>=<span class="string">"products-box"</span>&gt;</span></span><br><span class="line">        </span><br><span class="line">    <span class="tag">&lt;/<span class="name">view</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">template</span>&gt;</span></span><br></pre></td></tr></table></figure></li><li><p>调用模版</p><figure class="highlight html"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">&lt;!-- 引入模版文件 --&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">import</span> <span class="attr">src</span>=<span class="string">"../tpls/products/products-tpl.wxml"</span> /&gt;</span></span><br><span class="line"></span><br><span class="line"><span class="tag">&lt;<span class="name">view</span>&gt;</span></span><br><span class="line">    <span class="comment">&lt;!-- 使用模版和定义一样只是吧name改为is就可以了 --&gt;</span></span><br><span class="line">    <span class="comment">&lt;!-- data给模版传递数据 --&gt;</span></span><br><span class="line">    <span class="comment">&lt;!-- 做一个对象传递过去使用起来会方便一点，方法名自定义 --&gt;</span></span><br><span class="line">    <span class="comment">&lt;!-- key为products 传递的值为productsArr --&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">template</span> <span class="attr">is</span>=<span class="string">"products"</span> <span class="attr">data</span>=<span class="string">"&#123;&#123;products:productsArr&#125;&#125;"</span>&gt;</span><span class="tag">&lt;/<span class="name">template</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">view</span>&gt;</span></span><br></pre></td></tr></table></figure></li></ol><h1 id="事件绑定、页面跳转、数据传输"><a href="#事件绑定、页面跳转、数据传输" class="headerlink" title="事件绑定、页面跳转、数据传输"></a>事件绑定、页面跳转、数据传输</h1><ul><li>小程序中的事件绑定就是 bindtap 后面带函数名</li><li>页面跳转 wx.navigateTo api调用</li><li>页面之间数据传输，可以同url传输</li></ul><ol><li><p>数据绑定，数据传输</p><figure class="highlight html"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br></pre></td><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">swiper</span> <span class="attr">indicator-dots</span>=<span class="string">"true"</span> <span class="attr">autoplay</span>=<span class="string">"true"</span> <span class="attr">class</span>=<span class="string">"swiper"</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">block</span> <span class="attr">wx:for</span>=<span class="string">"&#123;&#123;bannerArr&#125;&#125;"</span> <span class="attr">wx:key</span>=<span class="string">"index"</span>&gt;</span></span><br><span class="line">      <span class="comment">&lt;!-- 事件绑定，bindtap绑定事件，后面带方法名就可以了 --&gt;</span></span><br><span class="line">      <span class="comment">&lt;!-- 数据传输 data-开头后面自定义名字 --&gt;</span></span><br><span class="line">      <span class="comment">&lt;!-- 没有为什么微信规定的反正就这么干 --&gt;</span></span><br><span class="line">      <span class="tag">&lt;<span class="name">swiper-item</span> <span class="attr">data-id</span>=<span class="string">"&#123;&#123;item.key_word&#125;&#125;"</span> <span class="attr">bindtap</span>=<span class="string">"onProductsItemTap"</span>&gt;</span></span><br><span class="line">        .....</span><br><span class="line">      <span class="tag">&lt;/<span class="name">swiper-item</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;/<span class="name">block</span>&gt;</span></span><br><span class="line">  <span class="tag">&lt;/<span class="name">swiper</span>&gt;</span></span><br></pre></td></tr></table></figure></li><li><p>实现方法，跳转页面</p><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br></pre></td><td class="code"><pre><span class="line">Page(&#123;</span><br><span class="line">  <span class="comment">/**</span></span><br><span class="line"><span class="comment">   * banner点击事件</span></span><br><span class="line"><span class="comment">   * event自带的变量</span></span><br><span class="line"><span class="comment">   */</span></span><br><span class="line">  onProductsItemTap: <span class="function"><span class="keyword">function</span> (<span class="params">event</span>) </span>&#123;</span><br><span class="line">    <span class="comment">// id，存放在event.currentTarget.dataset.id中</span></span><br><span class="line">    <span class="comment">// 所有传过来的数据都在 event.currentTarget.dataset 中，传过来的时候是不带data的要记住</span></span><br><span class="line">    <span class="comment">// 这里我做了一个小小的封装提高复用性，放在了基类中</span></span><br><span class="line">    <span class="comment">//getDataSet(event,key) &#123;</span></span><br><span class="line">    <span class="comment">// return event.currentTarget.dataset[key];</span></span><br><span class="line">    <span class="comment">//&#125;</span></span><br><span class="line">    <span class="keyword">var</span> id = home.getDataSet(event,<span class="string">"id"</span>);</span><br><span class="line"></span><br><span class="line">    <span class="comment">// 调用接口</span></span><br><span class="line">    <span class="comment">// url就是你要跳转页面的地址</span></span><br><span class="line">    <span class="comment">// 可以通过url传送参数到页面中去</span></span><br><span class="line">    wx.navigateTo(&#123;</span><br><span class="line">      url: <span class="string">'../product/product?id='</span> + id,</span><br><span class="line">    &#125;);</span><br><span class="line">  &#125;</span><br><span class="line">&#125;)</span><br></pre></td></tr></table></figure></li><li><p>跳转的页面获取调整前传过来的数据</p><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br></pre></td><td class="code"><pre><span class="line">Page(&#123;</span><br><span class="line"></span><br><span class="line">  <span class="comment">/**</span></span><br><span class="line"><span class="comment">   * 生命周期函数--监听页面加载</span></span><br><span class="line"><span class="comment">   * 就是在跳转后的页面js文件中， onload 里面获取</span></span><br><span class="line"><span class="comment">   * options是自带的常量</span></span><br><span class="line"><span class="comment">   */</span></span><br><span class="line">  onLoad: <span class="function"><span class="keyword">function</span> (<span class="params">options</span>) </span>&#123;</span><br><span class="line">    <span class="comment">// 传的是命名什么就.什么</span></span><br><span class="line">    <span class="keyword">var</span> id = options.id;</span><br><span class="line">    <span class="built_in">console</span>.log(id)</span><br><span class="line">  &#125;</span><br><span class="line">&#125;)</span><br></pre></td></tr></table></figure></li></ol><h1 id="动态修改导航栏"><a href="#动态修改导航栏" class="headerlink" title="动态修改导航栏"></a>动态修改导航栏</h1><ul><li>wx.setNavigationBarTitle<figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">/**</span></span><br><span class="line"><span class="comment">   * 生命周期函数--监听页面初次渲染完成</span></span><br><span class="line"><span class="comment">   */</span></span><br><span class="line">  onReady: <span class="function"><span class="keyword">function</span> (<span class="params"></span>) </span>&#123;</span><br><span class="line">    <span class="comment">// 动态设置导航栏</span></span><br><span class="line">    wx.setNavigationBarTitle(&#123;</span><br><span class="line">      title: <span class="keyword">this</span>.data.name</span><br><span class="line">    &#125;)</span><br><span class="line">  &#125;</span><br></pre></td></tr></table></figure></li></ul><h1 id="拒绝频繁向服务器请求数据"><a href="#拒绝频繁向服务器请求数据" class="headerlink" title="拒绝频繁向服务器请求数据"></a>拒绝频繁向服务器请求数据</h1><ul><li>在我们请求数据时使用对象保存起来</li><li>再次请求前判断以请求的不让请求直接再对象中获取</li></ul><h1 id="触底刷新"><a href="#触底刷新" class="headerlink" title="触底刷新"></a>触底刷新</h1><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line">/**</span><br><span class="line">   * 页面拉到底部</span><br><span class="line">   */</span><br><span class="line">  onReachBottom: function () &#123;</span><br><span class="line">    </span><br><span class="line">  &#125;</span><br></pre></td></tr></table></figure><h1 id="wx-key-官网"><a href="#wx-key-官网" class="headerlink" title="wx:key 官网"></a>wx:key <a href="https://developers.weixin.qq.com/miniprogram/dev/framework/view/wxml/list.html" target="_blank" rel="noopener">官网</a></h1><ul><li>这个也是挺重要的，用来锁定属性</li><li>我们在微信中使用for循环时，如果我们使用创建添加数据后，可能会造成数据的村乱</li><li>可以自定义唯一表示也可以，使用本地的*this也是可以的</li><li>文字说不清楚直接来例子<br><img src="/xcx/w-key1.png" alt="key1"><br><img src="/xcx/w-key2.png" alt="key1"><br><img src="/xcx/w-key3.png" alt="key1"><br><img src="/xcx/w-key4.png" alt="key1"><br><img src="/xcx/w-key5.png" alt="key1"></li></ul><figure class="highlight html"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br></pre></td><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">switch</span> <span class="attr">wx:for</span>=<span class="string">"&#123;&#123;objectArray&#125;&#125;"</span> <span class="attr">wx:key</span>=<span class="string">"unique"</span> <span class="attr">style</span>=<span class="string">"display: block;"</span>&gt;</span></span><br><span class="line">  &#123;&#123;item.id&#125;&#125;</span><br><span class="line"><span class="tag">&lt;/<span class="name">switch</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">button</span> <span class="attr">bindtap</span>=<span class="string">"switch"</span>&gt;</span>Switch<span class="tag">&lt;/<span class="name">button</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">button</span> <span class="attr">bindtap</span>=<span class="string">"addToFront"</span>&gt;</span>Add to the front<span class="tag">&lt;/<span class="name">button</span>&gt;</span></span><br><span class="line"></span><br><span class="line"><span class="tag">&lt;<span class="name">switch</span> <span class="attr">wx:for</span>=<span class="string">"&#123;&#123;numberArray&#125;&#125;"</span> <span class="attr">wx:key</span>=<span class="string">"*this"</span> <span class="attr">style</span>=<span class="string">"display: block;"</span>&gt;</span></span><br><span class="line">  &#123;&#123;item&#125;&#125;</span><br><span class="line"><span class="tag">&lt;/<span class="name">switch</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">button</span> <span class="attr">bindtap</span>=<span class="string">"addNumberToFront"</span>&gt;</span>Add to the front<span class="tag">&lt;/<span class="name">button</span>&gt;</span></span><br></pre></td></tr></table></figure><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br></pre></td><td class="code"><pre><span class="line">Page(&#123;</span><br><span class="line">  data: &#123;</span><br><span class="line">    objectArray: [</span><br><span class="line">      &#123;<span class="attr">id</span>: <span class="number">5</span>, <span class="attr">unique</span>: <span class="string">'unique_5'</span>&#125;,</span><br><span class="line">      &#123;<span class="attr">id</span>: <span class="number">4</span>, <span class="attr">unique</span>: <span class="string">'unique_4'</span>&#125;,</span><br><span class="line">      &#123;<span class="attr">id</span>: <span class="number">3</span>, <span class="attr">unique</span>: <span class="string">'unique_3'</span>&#125;,</span><br><span class="line">      &#123;<span class="attr">id</span>: <span class="number">2</span>, <span class="attr">unique</span>: <span class="string">'unique_2'</span>&#125;,</span><br><span class="line">      &#123;<span class="attr">id</span>: <span class="number">1</span>, <span class="attr">unique</span>: <span class="string">'unique_1'</span>&#125;,</span><br><span class="line">      &#123;<span class="attr">id</span>: <span class="number">0</span>, <span class="attr">unique</span>: <span class="string">'unique_0'</span>&#125;,</span><br><span class="line">    ],</span><br><span class="line">    numberArray: [<span class="number">1</span>, <span class="number">2</span>, <span class="number">3</span>, <span class="number">4</span>]</span><br><span class="line">  &#125;,</span><br><span class="line">  <span class="keyword">switch</span>(e) &#123;</span><br><span class="line">    <span class="keyword">const</span> length = <span class="keyword">this</span>.data.objectArray.length</span><br><span class="line">    <span class="keyword">for</span> (<span class="keyword">let</span> i = <span class="number">0</span>; i &lt; length; ++i) &#123;</span><br><span class="line">      <span class="keyword">const</span> x = <span class="built_in">Math</span>.floor(<span class="built_in">Math</span>.random() * length)</span><br><span class="line">      <span class="keyword">const</span> y = <span class="built_in">Math</span>.floor(<span class="built_in">Math</span>.random() * length)</span><br><span class="line">      <span class="keyword">const</span> temp = <span class="keyword">this</span>.data.objectArray[x]</span><br><span class="line">      <span class="keyword">this</span>.data.objectArray[x] = <span class="keyword">this</span>.data.objectArray[y]</span><br><span class="line">      <span class="keyword">this</span>.data.objectArray[y] = temp</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">this</span>.setData(&#123;</span><br><span class="line">      objectArray: <span class="keyword">this</span>.data.objectArray</span><br><span class="line">    &#125;)</span><br><span class="line">  &#125;,</span><br><span class="line">  addToFront(e) &#123;</span><br><span class="line">    <span class="keyword">const</span> length = <span class="keyword">this</span>.data.objectArray.length</span><br><span class="line">    <span class="keyword">this</span>.data.objectArray = [&#123;<span class="attr">id</span>: length, <span class="attr">unique</span>: <span class="string">'unique_'</span> + length&#125;].concat(<span class="keyword">this</span>.data.objectArray)</span><br><span class="line">    <span class="keyword">this</span>.setData(&#123;</span><br><span class="line">      objectArray: <span class="keyword">this</span>.data.objectArray</span><br><span class="line">    &#125;)</span><br><span class="line">  &#125;,</span><br><span class="line">  addNumberToFront(e) &#123;</span><br><span class="line">    <span class="keyword">this</span>.data.numberArray = [<span class="keyword">this</span>.data.numberArray.length + <span class="number">1</span>].concat(<span class="keyword">this</span>.data.numberArray)</span><br><span class="line">    <span class="keyword">this</span>.setData(&#123;</span><br><span class="line">      numberArray: <span class="keyword">this</span>.data.numberArray</span><br><span class="line">    &#125;)</span><br><span class="line">  &#125;</span><br><span class="line">&#125;)</span><br></pre></td></tr></table></figure>]]></content>
      
      
      <categories>
          
          <category> 小程序 </category>
          
      </categories>
      
      
        <tags>
            
            <tag> 小程序 笔记 </tag>
            
        </tags>
      
    </entry>
    
    <entry>
      <title>TypeScript 自学笔记1 基础类型</title>
      <link href="/2019/03/03/TypeScript%E7%AC%94%E8%AE%B01/"/>
      <url>/2019/03/03/TypeScript%E7%AC%94%E8%AE%B01/</url>
      
        <content type="html"><![CDATA[<link rel="stylesheet" class="aplayer-secondary-style-marker" href="/assets/css/APlayer.min.css"><script src="/assets/js/APlayer.min.js" class="aplayer-secondary-script-marker"></script><h1 id="前言"><a href="#前言" class="headerlink" title="前言"></a>前言</h1><ul><li>现在Ts也是比较流行，想自学一下ts</li><li>所以就一起来学习一下，做下笔记吧</li></ul><h1 id="笔记目录"><a href="#笔记目录" class="headerlink" title="笔记目录"></a>笔记目录</h1><ol><li>安装ts</li><li>第一个ts</li><li>项目使用</li><li>五分钟上手ts</li><li>基础类型</li></ol><h1 id="安装ts"><a href="#安装ts" class="headerlink" title="安装ts"></a>安装ts</h1><ol><li><p>全局安装ts</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">$ sudo npm install -g typescript</span><br></pre></td></tr></table></figure></li><li><p>全局安装编译环境tsc</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">$ sudo npm install -g tsc</span><br></pre></td></tr></table></figure></li></ol><h1 id="第一个ts"><a href="#第一个ts" class="headerlink" title="第一个ts"></a>第一个ts</h1><ol><li>创建 greeter.ts文件</li><li><p>文件内部写一个greeter的函数</p><figure class="highlight typescript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line"><span class="function"><span class="keyword">function</span> <span class="title">greeter</span>(<span class="params">person</span>) </span>&#123;</span><br><span class="line">    <span class="keyword">return</span> <span class="string">"Hello, "</span> + person;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="keyword">let</span> user = <span class="string">"Jane User"</span>;</span><br><span class="line"><span class="built_in">console</span>.log(greeter(user))</span><br></pre></td></tr></table></figure></li><li><p>编译</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">$ sudo tsc greeter.ts</span><br></pre></td></tr></table></figure></li><li><p>运行查看</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">$ sudo node greeter.js</span><br></pre></td></tr></table></figure></li></ol><h1 id="项目使用"><a href="#项目使用" class="headerlink" title="项目使用"></a>项目使用</h1><ol><li>npm init -y 初始化</li><li><p>定义package</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line">&quot;build&quot; : &quot;tsc greeter.ts&quot;,</span><br><span class="line">    &quot;test&quot; : &quot;node greeter.js&quot;,</span><br><span class="line">    &quot;start&quot; : &quot;npm run build &amp;&amp; npm run test&quot;</span><br></pre></td></tr></table></figure></li><li><p>npm run start 就等于运行了全部</p></li></ol><h1 id="五分钟上手TypeScript"><a href="#五分钟上手TypeScript" class="headerlink" title="五分钟上手TypeScript"></a>五分钟上手TypeScript</h1><h2 id="定义类型实现规范化，类型注解"><a href="#定义类型实现规范化，类型注解" class="headerlink" title="定义类型实现规范化，类型注解"></a>定义类型实现规范化，类型注解</h2><figure class="highlight typescript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">// 给输入的类型添加约束</span></span><br><span class="line"><span class="comment">// 在函数参数接受的时候定义一个类型从而在编译时，把不真确的类型就会报错拦截下来</span></span><br><span class="line"><span class="comment">// 没有按照规定输入就会报错</span></span><br><span class="line"><span class="comment">// 从而更加的规范化</span></span><br><span class="line"><span class="function"><span class="keyword">function</span> <span class="title">greeter</span> (<span class="params">person:<span class="built_in">string</span></span>) </span>&#123;</span><br><span class="line">    <span class="keyword">return</span> <span class="string">"Hello, "</span> + person;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="keyword">let</span> user = <span class="string">"YHF"</span>;</span><br><span class="line"></span><br><span class="line"><span class="built_in">document</span>.body.innerHTML = greeter(user);</span><br></pre></td></tr></table></figure><h2 id="接口"><a href="#接口" class="headerlink" title="接口"></a>接口</h2><figure class="highlight typescript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">// 定义接口</span></span><br><span class="line"><span class="keyword">interface</span> Person &#123;</span><br><span class="line">    firstName: <span class="built_in">string</span>;</span><br><span class="line">    lastName: <span class="built_in">string</span>;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="comment">// 函数</span></span><br><span class="line"><span class="comment">// 在接收函数时接受 接受这个约束的接口</span></span><br><span class="line"><span class="function"><span class="keyword">function</span> <span class="title">greeter</span>(<span class="params">person: Person</span>) </span>&#123;</span><br><span class="line">    <span class="keyword">return</span> <span class="string">"Hello, "</span> + person.firstName + <span class="string">" "</span> + person.lastName;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="comment">// 输入时定义对象输入</span></span><br><span class="line"><span class="keyword">let</span> user = &#123; firstName: <span class="string">"Y"</span>, lastName: <span class="string">"HF"</span> &#125;;</span><br><span class="line"></span><br><span class="line"><span class="built_in">console</span>.log(greeter(user));</span><br></pre></td></tr></table></figure><h2 id="类"><a href="#类" class="headerlink" title="类"></a>类</h2><ul><li>可以使用类的方法对数据进行约束</li><li>在构造函数的参数上使用public等同于创建了同名的成员变量</li><li>在定义的时候也是可以使用数据约束的<figure class="highlight typescript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">class</span> Student &#123;</span><br><span class="line">    fullName: <span class="built_in">string</span>;</span><br><span class="line">    <span class="keyword">constructor</span>(<span class="params"><span class="keyword">public</span> firstName,<span class="keyword">public</span> middleInitial : <span class="built_in">number</span>,<span class="keyword">public</span> lastName</span>) &#123;</span><br><span class="line">        <span class="keyword">this</span>.fullName = firstName+ <span class="string">" "</span> + middleInitial.toString() + <span class="string">" "</span> + lastName; </span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="comment">// 等同于</span></span><br><span class="line"><span class="keyword">class</span> Student &#123;</span><br><span class="line">    fullName: <span class="built_in">string</span>;</span><br><span class="line">    firstName: <span class="built_in">string</span>;</span><br><span class="line">    middleInitial: <span class="built_in">number</span>;</span><br><span class="line">    lastName: <span class="built_in">string</span>;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure></li></ul><h2 id="在web如何使用ts"><a href="#在web如何使用ts" class="headerlink" title="在web如何使用ts"></a>在web如何使用ts</h2><ul><li>其实很简单就是调用ts打包出来的js文件就可以了</li></ul><h1 id="基础类型"><a href="#基础类型" class="headerlink" title="基础类型"></a>基础类型</h1><h2 id="布尔值"><a href="#布尔值" class="headerlink" title="布尔值"></a>布尔值</h2><figure class="highlight typescript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">// 参数约束 后面直接跟布尔值</span></span><br><span class="line"><span class="keyword">let</span> isDoneNew : <span class="built_in">boolean</span> = <span class="literal">true</span>;</span><br><span class="line"></span><br><span class="line"><span class="comment">// 像这样的写法是不严谨的是错误的 ，不能接受带有字符串的值</span></span><br><span class="line"><span class="keyword">let</span> isDoneString: <span class="built_in">boolean</span> = <span class="string">"true"</span>;</span><br></pre></td></tr></table></figure><h2 id="数字"><a href="#数字" class="headerlink" title="数字"></a>数字</h2><figure class="highlight typescript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">// 2,8,10,16进制都可以</span></span><br><span class="line"><span class="keyword">let</span> decLiteral: <span class="built_in">number</span> = <span class="number">6</span>;</span><br><span class="line"><span class="keyword">let</span> hexLiteral: <span class="built_in">number</span> = <span class="number">0xf00d</span>;</span><br><span class="line"><span class="keyword">let</span> binaryLiteral: <span class="built_in">number</span> = <span class="number">0b1010</span>;</span><br><span class="line"><span class="keyword">let</span> octalLiteral: <span class="built_in">number</span> = <span class="number">0o744</span>;</span><br></pre></td></tr></table></figure><h2 id="字符串"><a href="#字符串" class="headerlink" title="字符串"></a>字符串</h2><ul><li>单双引号无差别<figure class="highlight typescript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">let</span> name: <span class="built_in">string</span> = <span class="string">"bob"</span>;</span><br><span class="line">name = <span class="string">"smith"</span>;</span><br><span class="line"></span><br><span class="line"><span class="comment">// 也可以使用字符串模版，在开发的过程中也是常用的一种</span></span><br><span class="line"><span class="comment">// 与字符串拼接效果相同的</span></span><br><span class="line"><span class="keyword">let</span> name: <span class="built_in">string</span> = <span class="string">`Gene`</span>;</span><br><span class="line"><span class="keyword">let</span> age: <span class="built_in">number</span> = <span class="number">37</span>;</span><br><span class="line"><span class="keyword">let</span> sentence: <span class="built_in">string</span> = <span class="string">`Hello, my name is <span class="subst">$&#123; name &#125;</span>.</span></span><br><span class="line"><span class="string"></span></span><br><span class="line"><span class="string">I'll be <span class="subst">$&#123; age + 1 &#125;</span> years old next month.`</span>;</span><br></pre></td></tr></table></figure></li></ul><h2 id="数组"><a href="#数组" class="headerlink" title="数组"></a>数组</h2><ul><li>可以定义类型数组，和定义范型<figure class="highlight typescript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">// number数组</span></span><br><span class="line"><span class="keyword">let</span> list : <span class="built_in">number</span>[] = [<span class="number">1</span>,<span class="number">2</span>,<span class="number">3</span>];</span><br><span class="line"><span class="comment">// 范型</span></span><br><span class="line"><span class="keyword">let</span> list2: <span class="built_in">Array</span>&lt;<span class="built_in">number</span>&gt; = [<span class="number">1</span>, <span class="number">2</span>, <span class="number">3</span>];</span><br></pre></td></tr></table></figure></li></ul><h2 id="元组-其实还是数组"><a href="#元组-其实还是数组" class="headerlink" title="元组 (其实还是数组)"></a>元组 (其实还是数组)</h2><ul><li>这个东西看起来很人性化</li><li>在内部每一个位置你都可以定义类型，不相同的类型</li><li>但是需要插入数据时要一一的对应</li></ul><figure class="highlight typescript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">// 数组中定义每一个位的属性</span></span><br><span class="line"><span class="keyword">let</span> x: [<span class="built_in">string</span>, <span class="built_in">number</span>];</span><br><span class="line"><span class="comment">// 这样来赋值就是对的</span></span><br><span class="line">x = [<span class="string">'hello'</span>, <span class="number">10</span>]; <span class="comment">// OK</span></span><br><span class="line"><span class="comment">// 没有按相应的来就会报错</span></span><br><span class="line">x = [<span class="number">10</span>, <span class="string">'hello'</span>]; <span class="comment">// Error</span></span><br></pre></td></tr></table></figure><h2 id="枚举-（和js比起来容易实现很多）"><a href="#枚举-（和js比起来容易实现很多）" class="headerlink" title="枚举 （和js比起来容易实现很多）"></a>枚举 （和js比起来容易实现很多）</h2><ul><li>这个枚举呢说是对象也不像对象，说数值也不像数组</li><li>用对象获取法，获取到的是对应的编号</li><li>用数组获取法，获取到的是对应的文字<figure class="highlight typescript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">// 1. 对象获取，通过名字获取值</span></span><br><span class="line"><span class="keyword">enum</span> Color &#123;Red, Green, Blue&#125;</span><br><span class="line"><span class="keyword">let</span> c: Color = Color.Green; <span class="comment">// 1</span></span><br><span class="line"></span><br><span class="line"><span class="comment">// 2. 数组获取，通过便利枚举值得到名字</span></span><br><span class="line"><span class="keyword">enum</span> Color &#123;Red, Green, Blue&#125;</span><br><span class="line"><span class="keyword">let</span> colorName: <span class="built_in">string</span> = Color[<span class="number">2</span>]; <span class="comment">// Blue</span></span><br><span class="line"></span><br><span class="line"></span><br><span class="line"><span class="comment">// 3. 改变编号，默认为0</span></span><br><span class="line"><span class="comment">// 改变后为 1，2，3</span></span><br><span class="line"><span class="keyword">enum</span> Color &#123;Red = <span class="number">1</span>, Green, Blue&#125;</span><br><span class="line"><span class="keyword">let</span> c: Color = Color.Green;</span><br><span class="line"></span><br><span class="line"><span class="comment">// 4. 全手工赋值</span></span><br><span class="line"><span class="keyword">enum</span> Color &#123;Red = <span class="number">1</span>, Green = <span class="number">2</span>, Blue = <span class="number">4</span>&#125;</span><br><span class="line"><span class="keyword">let</span> c: Color = Color.Green;</span><br></pre></td></tr></table></figure></li></ul><h2 id="Any-（简称任意类型什么都可以支持）"><a href="#Any-（简称任意类型什么都可以支持）" class="headerlink" title="Any （简称任意类型什么都可以支持）"></a>Any （简称任意类型什么都可以支持）</h2><figure class="highlight typescript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">let</span> notSure: <span class="built_in">any</span> = <span class="number">4</span>; <span class="comment">// number</span></span><br><span class="line">notSure = <span class="string">"maybe a string instead"</span>; <span class="comment">// String</span></span><br><span class="line">notSure = <span class="literal">false</span>; <span class="comment">// boolean</span></span><br><span class="line"></span><br><span class="line"><span class="comment">// 也可以用来数组上</span></span><br><span class="line"><span class="keyword">let</span> list:<span class="built_in">any</span>[] = [<span class="number">1</span>,<span class="literal">true</span>,<span class="string">"free"</span>];</span><br><span class="line"><span class="comment">// 但是在第一个的类型确立了后再去改变是不可以的</span></span><br><span class="line">list[<span class="number">0</span>] = <span class="string">'aaa'</span> <span class="comment">// 这个是错误的不可以这样用，虽然任意类型但是还是要注意</span></span><br></pre></td></tr></table></figure><h2 id="Void-不能拥有返回类型，就是无返回类型"><a href="#Void-不能拥有返回类型，就是无返回类型" class="headerlink" title="Void (不能拥有返回类型，就是无返回类型)"></a>Void (不能拥有返回类型，就是无返回类型)</h2><figure class="highlight typescript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">// 1. 函数</span></span><br><span class="line"><span class="function"><span class="keyword">function</span> <span class="title">warnUser</span>(<span class="params"></span>): <span class="title">void</span> </span>&#123;</span><br><span class="line">    <span class="built_in">console</span>.log(<span class="string">"This is my warning message"</span>);</span><br><span class="line">    <span class="comment">// return 这样呢可以编译通过</span></span><br><span class="line">    <span class="comment">// return 1 只要加上值这样就不可以了</span></span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="comment">// 2. 变量</span></span><br><span class="line"><span class="comment">// 只能接收null 和 undefined</span></span><br><span class="line"><span class="keyword">let</span> unusable: <span class="built_in">void</span> = <span class="literal">undefined</span>;</span><br></pre></td></tr></table></figure><h2 id="null-undefined"><a href="#null-undefined" class="headerlink" title="null/undefined"></a>null/undefined</h2><ul><li>这个就不说了只可以接收自己本身null或undefined 或者 赋值给 void</li></ul><h2 id="Never-永远无法到达的类型…"><a href="#Never-永远无法到达的类型…" class="headerlink" title="Never (永远无法到达的类型…)"></a>Never (永远无法到达的类型…)</h2><ul><li>简单的说就是一下常抛出异常</li><li>数据永不为真时也是never类型</li><li>任何类型除了never本身都不可以赋值给他</li><li>但是never可以赋值给任何类型<figure class="highlight typescript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">// 返回never的函数必须存在无法达到的终点</span></span><br><span class="line"><span class="function"><span class="keyword">function</span> <span class="title">error</span>(<span class="params">message: <span class="built_in">string</span></span>): <span class="title">never</span> </span>&#123;</span><br><span class="line">    <span class="keyword">throw</span> <span class="keyword">new</span> <span class="built_in">Error</span>(message);</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="comment">// 推断的返回值类型为never</span></span><br><span class="line"><span class="function"><span class="keyword">function</span> <span class="title">fail</span>(<span class="params"></span>) </span>&#123;</span><br><span class="line">    <span class="keyword">return</span> error(<span class="string">"Something failed"</span>);</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="comment">// 返回never的函数必须存在无法达到的终点</span></span><br><span class="line"><span class="function"><span class="keyword">function</span> <span class="title">infiniteLoop</span>(<span class="params"></span>): <span class="title">never</span> </span>&#123;</span><br><span class="line">    <span class="keyword">while</span> (<span class="literal">true</span>) &#123;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure></li></ul><h2 id="Object-简单点就是对象"><a href="#Object-简单点就是对象" class="headerlink" title="Object (简单点就是对象)"></a>Object (简单点就是对象)</h2><ul><li>object表示非原始类型，也就是除number，string，boolean，symbol，null或undefined之外的类型。<figure class="highlight typescript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">// declare 声明</span></span><br><span class="line"><span class="comment">// declare function 在ts是声明函数的意思</span></span><br><span class="line"><span class="comment">// 这里就是声明一个名为create 参数o类型为object 或null，的无返回函数</span></span><br><span class="line"><span class="keyword">declare</span> <span class="function"><span class="keyword">function</span> <span class="title">create</span>(<span class="params">o: object | <span class="literal">null</span></span>): <span class="title">void</span></span>;</span><br><span class="line"></span><br><span class="line"><span class="comment">// 正确的调用方法</span></span><br><span class="line">create(&#123; prop: <span class="number">0</span> &#125;); <span class="comment">// OK</span></span><br><span class="line">create(<span class="literal">null</span>); <span class="comment">// OK</span></span><br><span class="line"></span><br><span class="line"><span class="comment">// 错误的调用方法</span></span><br><span class="line">create(<span class="number">42</span>); <span class="comment">// Error</span></span><br><span class="line">create(<span class="string">"string"</span>); <span class="comment">// Error</span></span><br><span class="line">create(<span class="literal">false</span>); <span class="comment">// Error</span></span><br><span class="line">create(<span class="literal">undefined</span>); <span class="comment">// Error</span></span><br></pre></td></tr></table></figure></li></ul><h2 id="类型断言-（明确类型）"><a href="#类型断言-（明确类型）" class="headerlink" title="类型断言 （明确类型）"></a>类型断言 （明确类型）</h2><ul><li>有时候你会遇到这样的情况，你会比TypeScript更了解某个值的详细信息。 通常这会发生在你清楚地知道一个实体具有比它现有类型更确切的类型。</li><li>其实就是给他明确类型的意思，就是你知道这个是什么类型就直接写什么</li><li>但是如果上面any定义的类型和你写的不一样，就会出现报错就是出不来</li><li>两种形式是等价的。 至于使用哪个大多数情况下是凭个人喜好；然而，当你在TypeScript里使用JSX时，只有 as语法断言是被允许的。</li></ul><figure class="highlight typescript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br></pre></td><td class="code"><pre><span class="line"></span><br><span class="line"><span class="keyword">let</span> someValue: <span class="built_in">any</span> = <span class="string">"this is a string"</span>;</span><br><span class="line"></span><br><span class="line"><span class="keyword">let</span> strLength: <span class="built_in">number</span> = (&lt;<span class="built_in">string</span>&gt;someValue).length;</span><br><span class="line"></span><br><span class="line"><span class="comment">// as 语法 和上面一样的,但是就这样运行跑不起来，等到后面jsx的时候再去看看</span></span><br><span class="line"><span class="keyword">let</span> someValue: <span class="built_in">any</span> = <span class="string">"this is a string"</span>;</span><br><span class="line"></span><br><span class="line"><span class="keyword">let</span> strLength: <span class="built_in">number</span> = (someValue <span class="keyword">as</span> <span class="built_in">string</span>).length;</span><br></pre></td></tr></table></figure><h1 id="后记"><a href="#后记" class="headerlink" title="后记"></a>后记</h1><ul><li>这个就是我学习Ts的第一天的笔记，欢迎更多的同行大哥指导交流</li><li><a href="https://yhf7.github.io/" target="_blank" rel="noopener">欢迎进入我的博客</a>：<a href="https://yhf7.github.io/" target="_blank" rel="noopener">https://yhf7.github.io/</a></li><li>如果有什么侵权的话，请及时添加小编微信以及qq也可以来告诉小编（905477376微信qq通用），谢谢！</li></ul>]]></content>
      
      
      <categories>
          
          <category> TypeScript </category>
          
      </categories>
      
      
        <tags>
            
            <tag> TypeScript 笔记 </tag>
            
        </tags>
      
    </entry>
    
    <entry>
      <title>配置maven 下载jar包，配置Idea maven , 导入项目 下包</title>
      <link href="/2019/03/03/Mac%20%E5%AE%89%E8%A3%85maven/"/>
      <url>/2019/03/03/Mac%20%E5%AE%89%E8%A3%85maven/</url>
      
        <content type="html"><![CDATA[<link rel="stylesheet" class="aplayer-secondary-style-marker" href="/assets/css/APlayer.min.css"><script src="/assets/js/APlayer.min.js" class="aplayer-secondary-script-marker"></script><h1 id="前言"><a href="#前言" class="headerlink" title="前言"></a>前言</h1><ul><li>maven其实我也不是很会，只是帮助一位朋友解决前后的交互问题需要用到，据说maven现在比较流行都是这样了应用和下包</li><li>我很久没有接触java 对这个不是很了解，在他的帮助下知道了要搭建maven和构建好项目</li><li>所以把这个方法记录下来以后遇到还能用起来</li></ul><h1 id="重点"><a href="#重点" class="headerlink" title="重点"></a>重点</h1><ol><li>插入指令时要把位置配置成自己的配置，我的图片哪里有一点点选错了，知道就好了我不再去修改那个图片</li></ol><h1 id="配置-工具"><a href="#配置-工具" class="headerlink" title="配置/工具"></a>配置/工具</h1><ol><li>Mac Os 10.13.3</li><li>maven 包 我下载的是3.6.0（一会说着么下载）</li><li>控制台</li><li>Intelli IDEA （我的是2018）</li><li>apache-tomcat 服务器（我的是9.0.11）</li></ol><h1 id="开始"><a href="#开始" class="headerlink" title="开始"></a>开始</h1><h2 id="第一步maven包"><a href="#第一步maven包" class="headerlink" title="第一步maven包"></a>第一步maven包</h2><ol><li><a href="https://maven.apache.org/download.cgi" target="_blank" rel="noopener">点击进入官网</a></li><li>下载 maven 包<br><img src="/Java/java-maven1.png" alt="java-maven"></li><li>解压 maven 包</li></ol><ul><li>直接电脑双击解压</li></ul><ol start="4"><li>存放</li></ol><ul><li>放在系统文件夹下，哪里都可以自己要记住后面要用(记住这个地址后面配置需要)</li><li>我是放在/Users/yhf/apache-maven-3.6.0</li></ul><h2 id="第二步-安装"><a href="#第二步-安装" class="headerlink" title="第二步 安装"></a>第二步 安装</h2><ol><li><p>打开控制台</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">$ vi ~/.bash_profile</span><br></pre></td></tr></table></figure></li><li><p>插入配置指令</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">export M2_HOME=/Users/yhf/apache-maven-3.6.0</span><br><span class="line">export PATH=$PATH:$M2_HOME/bin</span><br></pre></td></tr></table></figure></li></ol><ul><li>说明一下图片里面选错了，是红框和红框下面那句，反正接着export后面哪里加入就好了<br><img src="/Java/java-maven2.png" alt="java-maven"><br><img src="/Java/java-maven3.png" alt="java-maven"></li></ul><ol start="3"><li><p>运行指令</p><ul><li>这一条是运行刚才的配置文件</li><li>输入命令以使bash_profile生效<figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">$ <span class="built_in">source</span> ~/.bash_profile</span><br></pre></td></tr></table></figure></li></ul></li><li><p>输入mvn -v查看Maven是否安装成功</p><ul><li>看到下面这样就是配置成功了<figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">$ mvn -v</span><br></pre></td></tr></table></figure></li></ul></li></ol><p><img src="/Java/java-maven4.png" alt="java-maven"></p><h2 id="第三步-配置Idea-maven"><a href="#第三步-配置Idea-maven" class="headerlink" title="第三步 配置Idea maven"></a>第三步 配置Idea maven</h2><ul><li>按照图片的来就可以了<br><img src="/Java/java-maven5.png" alt="java-maven"><br><img src="/Java/java-maven6.png" alt="java-maven"></li></ul><h2 id="导入项目"><a href="#导入项目" class="headerlink" title="导入项目"></a>导入项目</h2><ol><li>导入pom.xml<br><img src="/Java/java-idea1.png" alt="java-maven"><br><img src="/Java/java-idea2.png" alt="java-maven"><br><img src="/Java/java-idea3.png" alt="java-maven"></li><li>下载jar包<ul><li>刚才我们导入了现在下jar包</li><li>点开右侧的maven projects</li><li>选择安装<br><img src="/Java/java-idea4.png" alt="java-maven"><br><img src="/Java/java-idea5.png" alt="java-maven"></li></ul></li><li>安装好配置<br><img src="/Java/java-idea6.png" alt="java-maven"></li></ol><h2 id="开启项目跑起来"><a href="#开启项目跑起来" class="headerlink" title="开启项目跑起来"></a>开启项目跑起来</h2><pre><code>- 配置serve，然后跑起来</code></pre><p><img src="/Java/java-idea7.png" alt="java-maven"><br><img src="/Java/java-idea8.png" alt="java-maven"></p><h1 id="后记"><a href="#后记" class="headerlink" title="后记"></a>后记</h1><ul><li>这个就是我安装mave 导入项目 和配置mave 跑起来的笔记，希望能帮到有缘人</li><li>如有什么问题加微信我们互相学习共同讨论</li></ul>]]></content>
      
      
      <categories>
          
          <category> Java </category>
          
      </categories>
      
      
        <tags>
            
            <tag> Java 配置 </tag>
            
        </tags>
      
    </entry>
    
    <entry>
      <title>微信小程序后端笔记</title>
      <link href="/2019/02/18/%E5%BE%AE%E4%BF%A1%E5%B0%8F%E7%A8%8B%E5%BA%8Fphp%E5%90%8E%E7%AB%AF%E5%AD%A6%E4%B9%A0%E7%AC%94%E8%AE%B0/"/>
      <url>/2019/02/18/%E5%BE%AE%E4%BF%A1%E5%B0%8F%E7%A8%8B%E5%BA%8Fphp%E5%90%8E%E7%AB%AF%E5%AD%A6%E4%B9%A0%E7%AC%94%E8%AE%B0/</url>
      
        <content type="html"><![CDATA[<link rel="stylesheet" class="aplayer-secondary-style-marker" href="/assets/css/APlayer.min.css"><script src="/assets/js/APlayer.min.js" class="aplayer-secondary-script-marker"></script><h1 id="微信小程序商城构建全栈应用"><a href="#微信小程序商城构建全栈应用" class="headerlink" title="微信小程序商城构建全栈应用"></a>微信小程序商城构建全栈应用</h1><ul><li>php+微信小程序全栈应用</li></ul><h1 id="软件-素材"><a href="#软件-素材" class="headerlink" title="软件/素材"></a>软件/素材</h1><ul><li>mac os 10.13.3</li><li>PhpStorm 2018</li><li>Postman</li><li>XAMPP 7.0.2-1</li><li>ThinkPHP 5.0.7</li></ul><h1 id="项目目录结构"><a href="#项目目录结构" class="headerlink" title="项目目录结构"></a>项目目录结构</h1><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br></pre></td><td class="code"><pre><span class="line">├─application           应用目录</span><br><span class="line">  ├─api                公共模块目录（可以更改）</span><br><span class="line">  │  │-controller      控制器目录  （版本以及业务）</span><br><span class="line">  │  │-model           模型目录  （关联模型处理）</span><br><span class="line">  │  │-service         模型服务层（相对复杂的业务处理）</span><br><span class="line">  │  └─validate        验证层     （客户端数据验证）</span><br><span class="line">  ├─extra              自定义公共资源层（tp5自带的）</span><br><span class="line">  ├─lib                模块目录</span><br><span class="line">  │  ├─enum            枚举</span><br><span class="line">  │  └─exception       全局异常处理目录</span><br><span class="line">  │</span><br><span class="line">  ├─command.php        命令行工具配置文件</span><br><span class="line">  ├─common.php         公共函数文件</span><br><span class="line">  ├─config.php         公共配置文件</span><br><span class="line">  ├─route.php          路由配置文件</span><br><span class="line">  ├─tags.php           应用行为扩展定义文件</span><br><span class="line">  └─database.php       数据库配置文件</span><br></pre></td></tr></table></figure><h1 id="笔记"><a href="#笔记" class="headerlink" title="笔记"></a>笔记</h1><h2 id="第八章"><a href="#第八章" class="headerlink" title="第八章"></a>第八章</h2><h3 id="数据表关系分析-（写着写着就绕了）"><a href="#数据表关系分析-（写着写着就绕了）" class="headerlink" title="数据表关系分析 （写着写着就绕了）"></a>数据表关系分析 （写着写着就绕了）</h3><ol><li>数据表之间的关系： 1 对 1 1 对多 多对多<ul><li>如何判断数据表之间的结构</li></ul></li><li>首先确立是否是一个多对多的关系<ul><li>查看表与表之间是否存在双方的外建均能被多个表调用，如果不是那就去除多对多关系</li></ul></li><li>1 对 1 1 对多<ul><li>在 thinkphp 中问题不大</li><li>如何去分析 1 对多或 1 对 1</li><li>1 对 1 的关系中， 两个表直接同时并且单次被执行，就是说一个关联请求中，表 1 一次只可以调用一个表 2 的元素，并且表 2 也只是被调用了一次</li><li>1 对多 的关系中， 表 1 通过一个外建，调用了多个表 2 的数据,并且表 2 的数据不能属于多个表 1，这样就是 1 对多的表现了</li></ul></li></ol><h3 id="模型关联（我们确立了-er-关系再来做这么的一个关联）"><a href="#模型关联（我们确立了-er-关系再来做这么的一个关联）" class="headerlink" title="模型关联（我们确立了 er 关系再来做这么的一个关联）"></a>模型关联（我们确立了 er 关系再来做这么的一个关联）</h3><ol><li><p>模型关联查询</p><ul><li>在我们的 model 是作为一个 ORM 模式的模型结构</li><li>在这之前我们就已经定义了模型了</li><li>我们有两个模型 Banner 与 BannerItem</li><li>tp5 对我们提供了关联查询的方法 hasMany</li><li><p>定义关联查询</p><figure class="highlight php"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">// 在当前模型 Banner 新建类  类名自定义喜欢什么来什么</span></span><br><span class="line"><span class="comment">// 函数体要写在 Banner 这个主模型中，BannerItem是被关联模型</span></span><br><span class="line"><span class="comment">// 调用模型关联时要清晰的知道 外键 以及主建（某程度下是不用写后面两个，不建议）</span></span><br><span class="line"><span class="keyword">public</span> <span class="function"><span class="keyword">function</span> <span class="title">items</span> <span class="params">()</span> </span>&#123;</span><br><span class="line">        <span class="comment">// 关联查询方法hasMany 关联模型      外建      当前模型 banner id主建</span></span><br><span class="line">       <span class="keyword">return</span> <span class="keyword">$this</span>-&gt;hasMany(<span class="string">'BannerItem'</span>,<span class="string">'banner_id'</span>,<span class="string">'id'</span>);</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure></li><li><p>调用关联查询</p><figure class="highlight php"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">  <span class="comment">//  在调用 模型的时候加上 with这么个方法 （括号内填写的就是刚才定义的函数名）</span></span><br><span class="line">$banner = BannerModel::with(<span class="string">'items'</span>)-&gt;find($id);</span><br></pre></td></tr></table></figure></li></ul></li><li><p>模型嵌套关联查询</p><ul><li>在我们的 查询中 会存在被关联体中还关联着变得关联体，在 tp5 中就形成了嵌套查询</li><li>当然 tp5 也给我们提供了方法：belongsTo</li><li>嵌套关系 Banner -&gt; BannerItem -&gt; Image (这里就存在了多重的嵌套)</li><li>模型 Banner BannerItem Image</li><li>是 BannerItem 关联 Image 所以关联函数我们写在 BannerItem 中</li><li>定义嵌套查询</li></ul><figure class="highlight php"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line">  <span class="keyword">public</span> <span class="function"><span class="keyword">function</span> <span class="title">img</span><span class="params">()</span> </span>&#123;</span><br><span class="line"><span class="comment">//        处理方法名其他都是一样的，这里就不多说了</span></span><br><span class="line">      <span class="keyword">return</span> <span class="keyword">$this</span>-&gt;belongsTo(<span class="string">'Image'</span>,<span class="string">'img_id'</span>,<span class="string">'id'</span>);</span><br><span class="line">  &#125;</span><br></pre></td></tr></table></figure><ul><li>调用查询 (这个比较关键，不过还是很简单的)</li></ul><figure class="highlight php"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">// with 可以是字符串也可以是数组（嵌套关联时就会用数组）</span></span><br><span class="line"><span class="comment">// 为什么是items.img 而不是 直接img呢，因为是嵌套关系，在模型中可以嵌套这里也是可以的</span></span><br><span class="line"><span class="comment">// 但是在 嵌套时 是items 关联的 img ，这里就会用.来链接</span></span><br><span class="line"><span class="comment">// 这个解释比较绕但是，知道方法就是要这样去用的就好啦</span></span><br><span class="line">$banner = BannerModel::with([<span class="string">'items'</span>,<span class="string">'items.img'</span>])-&gt;find($id);</span><br></pre></td></tr></table></figure></li></ol><h3 id="隐藏模型字段-模型自带"><a href="#隐藏模型字段-模型自带" class="headerlink" title="隐藏模型字段 (模型自带)"></a>隐藏模型字段 (模型自带)</h3><ol><li>hidden 方法隐藏字段</li></ol><figure class="highlight php"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">// 数据      方法      字段名</span></span><br><span class="line"> $banner-&gt;hidden([<span class="string">'字段名例：id'</span>])</span><br></pre></td></tr></table></figure><ol start="2"><li>visible 只显示的字段</li></ol><figure class="highlight php"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">$banner-&gt;visible([<span class="string">'字段名例：id'</span>,<span class="string">'update_time])</span></span><br></pre></td></tr></table></figure><h3 id="模型内部隐藏字段-（自定义模型的内部隐藏-把一些前端不需要的字段隐藏了）"><a href="#模型内部隐藏字段-（自定义模型的内部隐藏-把一些前端不需要的字段隐藏了）" class="headerlink" title="模型内部隐藏字段 （自定义模型的内部隐藏,把一些前端不需要的字段隐藏了）"></a>模型内部隐藏字段 （自定义模型的内部隐藏,把一些前端不需要的字段隐藏了）</h3><ul><li>hidden 隐藏</li><li>直接在 model 定义的模型内添加方法 （以 Banner 为例）</li></ul><figure class="highlight php"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">namespace</span> <span class="title">app</span>\<span class="title">api</span>\<span class="title">model</span>;</span><br><span class="line"></span><br><span class="line"><span class="keyword">use</span> <span class="title">think</span>\<span class="title">Model</span>;</span><br><span class="line"></span><br><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">Banner</span> <span class="keyword">extends</span> <span class="title">Model</span></span></span><br><span class="line"><span class="class"></span>&#123;</span><br><span class="line">     <span class="comment">// 直接添加 $hidden的数组填入要隐藏的字段即可</span></span><br><span class="line">     <span class="comment">// visible 等方法用法一样，那个模型内部的字段要隐藏就在那个模型内部设置</span></span><br><span class="line">    <span class="keyword">protected</span> $hidden = [<span class="string">'id'</span>];</span><br><span class="line"></span><br><span class="line">    <span class="keyword">public</span> <span class="function"><span class="keyword">function</span> <span class="title">items</span> <span class="params">()</span> </span>&#123;</span><br><span class="line">                                <span class="comment">// 关联模型           外建                当前模型 banner id主建</span></span><br><span class="line">        <span class="keyword">return</span> <span class="keyword">$this</span>-&gt;hasMany(<span class="string">'BannerItem'</span>,<span class="string">'banner_id'</span>,<span class="string">'id'</span>);</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">static</span> <span class="function"><span class="keyword">function</span> <span class="title">getBannerByID</span><span class="params">($id)</span> </span>&#123;</span><br><span class="line">        $banner = <span class="keyword">self</span>::with([<span class="string">'items'</span>,<span class="string">'items.img'</span>])-&gt;find($id);</span><br><span class="line"></span><br><span class="line">        <span class="keyword">return</span> $banner;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h3 id="自定义配置"><a href="#自定义配置" class="headerlink" title="自定义配置"></a>自定义配置</h3><ul><li>/application/extra （extra 自己新建的，凡是放在这里面的配置文件都会被自动加载）</li><li>手动配置一个本地的 img 图片路径</li></ul><ol><li>在 extra 下 新建 setting.php</li></ol><figure class="highlight php"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">return</span> [</span><br><span class="line">    <span class="comment">//  名称                 域名   路径（直接放在public下的images就是这样写就可以了）</span></span><br><span class="line">    <span class="string">'img_prefix'</span> =&gt; <span class="string">'http://zerg.cn/images'</span></span><br><span class="line">];</span><br></pre></td></tr></table></figure><ol start="2"><li>使用自定义变量<ul><li>因为是在 extra 内部定义的所以会自动调用，那么我们用 config 就可以去掉用到了<figure class="highlight php"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">      <span class="comment">// 配置文件名.变量名</span></span><br><span class="line">config(<span class="string">'setting.img_prefix'</span>);</span><br></pre></td></tr></table></figure></li></ul></li></ol><h3 id="静态文件存放"><a href="#静态文件存放" class="headerlink" title="静态文件存放"></a>静态文件存放</h3><ul><li>静态的外部文件，例如图片啊文本啊等的文件，必须放在 public 这个公共目录下</li><li>并不是放在 application 的这个开发目录下，因为 tp5 的架构里面只有 public 这个目录是对外开放的</li><li>所以文件都必须是要放在 public 目录下</li></ul><h3 id="tp-模型读取器-数据拼合"><a href="#tp-模型读取器-数据拼合" class="headerlink" title="tp 模型读取器 (数据拼合)"></a>tp 模型读取器 (数据拼合)</h3><ul><li>为了获取数据/修改数据，tp5 给出了一个读取器的方法</li><li>用来给我们读取数据修改数据用的</li><li>那个模型要修改数据就在哪个模型定义</li></ul><ol><li>定义读取器（其实也是一个函数方法）<ul><li>读取器命名规范 开头 get 必须有 + 读取数据的名称并且开头要大写例 Url + Attr 必须加的（利用驼峰命名法）</li><li>getUrlAttr （完整的编写，除了中间的那个数据，其他都是必须有的，中间数据名开头必须大写）</li><li>传入一个值，名字自定义 （这个传入的数据其实就是我们要获取到要修改的数据）</li><li>每一次传入一个数据，有多个输出就会重复的执行读取器</li><li>因为在我们的业务逻辑中会调用到当前模型的其他数据，但是第一个参数只是获取到的是当前读取器的数据，并无法读取到其他的数据</li><li>所以添加了第二个参数 （这个参数会给我们返回一个这个模型的数据，就是所有的数据）</li></ul></li></ol><figure class="highlight php"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="function"><span class="keyword">function</span> <span class="title">getUrlAttr</span> <span class="params">($value,$data)</span> </span>&#123;</span><br><span class="line"></span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><ol start="2"><li>使用读取器 （做数据的修改然后返回）</li></ol><figure class="highlight php"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="function"><span class="keyword">function</span> <span class="title">getUrlAttr</span> <span class="params">($value)</span> </span>&#123;</span><br><span class="line">    <span class="comment">// 这里我们只是做了一个自定义的 变量和url路径的拼接</span></span><br><span class="line">    <span class="keyword">return</span> config(<span class="string">'setting.img_prefix'</span>).$value;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><ol start="3"><li>业务逻辑添加</li></ol><figure class="highlight php"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="function"><span class="keyword">function</span> <span class="title">getUrlAttr</span> <span class="params">($value,$data)</span> </span>&#123;</span><br><span class="line">$finalUrl = $value;</span><br><span class="line">    <span class="comment">// 判断是否要拼接</span></span><br><span class="line"><span class="keyword">if</span> ($data[<span class="string">'from'</span>] === <span class="number">1</span>) &#123;</span><br><span class="line">    $finalUrl = config(<span class="string">'setting.img_prefix'</span>) . $value;</span><br><span class="line">&#125;</span><br><span class="line"><span class="keyword">return</span> $finalUrl;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h3 id="自定义基类-（面向对象，提取模型读取器）"><a href="#自定义基类-（面向对象，提取模型读取器）" class="headerlink" title="自定义基类 （面向对象，提取模型读取器）"></a>自定义基类 （面向对象，提取模型读取器）</h3><ul><li>一开始这样做会觉得好像代码还多了啊，这么不就是做无用功吗，在业务不断增加的时候，后期修改就可以看出来好处了</li><li>集中业务逻辑</li><li>创建 BaseModel.php 作为模型基类</li><li>把让所有的模型都继承这个基类</li></ul><ol><li><p>把读取器提取到 模型基类 （这样做是一个面向对象的思想）</p><ul><li>但是提取了模型基类后我们所有的子模型都会自动的去执行模型</li><li>这样可能会造成一些数据的变更和错误，比如说，两个命名一样但是代表的数据不同是就会出现错误</li><li>所以我们把它封装为一个自调用的方法<figure class="highlight php"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">// BaseModel</span></span><br><span class="line"><span class="comment">// 读取器</span></span><br><span class="line"><span class="keyword">protected</span> <span class="function"><span class="keyword">function</span> <span class="title">prefixImgUrl</span> <span class="params">($value,$data)</span> </span>&#123;</span><br><span class="line">    $finalUrl = $value;</span><br><span class="line">    <span class="keyword">if</span> ($data[<span class="string">'from'</span>] === <span class="number">1</span>) &#123;</span><br><span class="line">        $finalUrl = config(<span class="string">'setting.img_prefix'</span>) . $value;</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">return</span> $finalUrl;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure></li></ul></li><li><p>子模型调用基类方法</p><ul><li>Image<figure class="highlight php"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="function"><span class="keyword">function</span> <span class="title">getUrlAttr</span> <span class="params">($value,$data)</span> </span>&#123;</span><br><span class="line">    <span class="keyword">return</span> <span class="keyword">$this</span>-&gt;prefixImgUrl($value,$data);</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure></li></ul></li></ol><h3 id="定义-api-版本号"><a href="#定义-api-版本号" class="headerlink" title="定义 api 版本号"></a>定义 api 版本号</h3><ul><li>在互联网的项目中，我们会对项目版本对升级，以及业务逻辑改变和变更</li><li>同时也是需要去兼容旧版本，所以会保留旧版本的 api</li></ul><ol><li>开发开闭原则<ul><li>代码对拓展开发，对修改封闭</li><li>添加功能直接以拓展的方式添加就可以，不需要去改变代码</li><li>修改是封闭的，业务变更上升版本</li><li>不可以修改原来的版本代码，会破坏了原版本的代码，和影响功能调用的风险</li><li>需要修改就要添加新的版本</li></ul></li><li>多版本<ul><li>版本的分离，新旧版本不发生冲突</li><li>新老版本的兼容问题</li><li>给用户缓冲时间，也不能兼容太多的版本，成本太高</li><li>v1 做 v1 版本层</li><li>v2 做 v2 版本层</li></ul></li></ol><h3 id="路由-api-动态变更"><a href="#路由-api-动态变更" class="headerlink" title="路由 api 动态变更"></a>路由 api 动态变更</h3><figure class="highlight php"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">//              动态版本 实现传什么就调用什么版本的api，同时也是要修改版本指向接口</span></span><br><span class="line"><span class="comment">//                 传 v1 就是 v1</span></span><br><span class="line"><span class="comment">//                 传 v2 就是 v2           动态写入</span></span><br><span class="line">Route::get(<span class="string">'api/:version/banner/:id'</span>,<span class="string">'api/:version.Banner/getBanner'</span>);</span><br></pre></td></tr></table></figure><h3 id="一对一关系选择关联方法"><a href="#一对一关系选择关联方法" class="headerlink" title="一对一关系选择关联方法"></a>一对一关系选择关联方法</h3><ol><li>belongsTo<ul><li>在有外建的表内请求就用 belongsTo</li></ul></li><li>hasOne<ul><li>在没有外建的表亲求就用 hasOne</li></ul></li></ol><h3 id="多对多查询-（belongsToMany）"><a href="#多对多查询-（belongsToMany）" class="headerlink" title="多对多查询 （belongsToMany）"></a>多对多查询 （belongsToMany）</h3><p>-</p><ul><li>多对多的查询呢 就比一对多和 1 对 1 的查询要多了一个参数</li><li>在参数中第二个是放入第三个表也就是中间表</li></ul><figure class="highlight php"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="function"><span class="keyword">function</span> <span class="title">products</span> <span class="params">()</span> </span>&#123;</span><br><span class="line">                                    <span class="comment">// 关联表名        中间表名                 关联表id            主建</span></span><br><span class="line">    <span class="keyword">return</span> <span class="keyword">$this</span>-&gt;belongsToMany(<span class="string">'Product'</span>,<span class="string">'theme_product'</span>,<span class="string">'product_id'</span>,<span class="string">'theme_id'</span>);</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h3 id="开启路由完整匹配模式"><a href="#开启路由完整匹配模式" class="headerlink" title="开启路由完整匹配模式"></a>开启路由完整匹配模式</h3><ul><li>开我们开发的过程中难免会有 api 相同当是请求的方式以及传参的不同，但是又需要相同的 api 名称</li><li>在我们的 tp5 中，会自动追寻一个半路径的匹配，所以当匹配到了相关的路由时就会停止匹配</li><li>但是这样返回的结果肯定不是我们要的，所以就要开启这个完整的路由匹配模式</li><li>在 config.php 配置文件中，我们就可以来更改了</li></ul><figure class="highlight php"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">//  只有找到这句话改变就可以了   false -&gt; true</span></span><br><span class="line"><span class="comment">// 路由使用完整匹配</span></span><br><span class="line"><span class="string">'route_complete_match'</span>   =&gt; <span class="keyword">true</span>,</span><br></pre></td></tr></table></figure><h3 id="合理利用数据冗余"><a href="#合理利用数据冗余" class="headerlink" title="合理利用数据冗余"></a>合理利用数据冗余</h3><ul><li>在查询量上来的时候避免数据量大多表查询之间耗时</li><li>合理的利用数据冗余来减少联合表的查询减少查询时间</li><li>但不要太过多但使用，只是为了减少数据库压力</li><li>在数据库中做相关的优化</li></ul><h3 id="collection-字符集"><a href="#collection-字符集" class="headerlink" title="collection 字符集"></a>collection 字符集</h3><ul><li>我们使用获取到的数据是字符集更方便让我们来修改数据</li></ul><ol><li>tp5 修改获取返回数据 （/application/database.php）</li></ol><figure class="highlight php"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">// 找到这个吧 arr改为 collection</span></span><br><span class="line"><span class="comment">// 数据集返回类型</span></span><br><span class="line"><span class="string">'resultset_type'</span>  =&gt; <span class="string">'collection'</span>,</span><br></pre></td></tr></table></figure><ol start="2"><li><p>使用字符集就可以轻松的临时隐藏字段</p><ul><li>当我们在开发的过程中，不是所有业务逻辑都需要隐藏的字段，我们就不可以在关联模型中直接就隐藏字段</li><li>我们会使用临时隐藏字段</li><li>当然数组我们是不可以直接这样来隐藏的，但是使用字符集的话就可以直接的去使用函数进行数据的隐藏<figure class="highlight php"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">// 使用hidden进行隐藏</span></span><br><span class="line">$products = $products-&gt;hidden([<span class="string">'summary'</span>]);</span><br></pre></td></tr></table></figure></li></ul></li><li><p>字符集判空</p><ul><li>isEmpty 内置函数</li></ul></li></ol><figure class="highlight php"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">// 判断空抛出异常</span></span><br><span class="line"><span class="keyword">if</span> ($products-&gt;isEmpty()) &#123;</span><br><span class="line">    <span class="keyword">throw</span> <span class="keyword">new</span> ProductException();</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>##第九章</p><h3 id="service-建立在-model-上的，用来处理复制的业务"><a href="#service-建立在-model-上的，用来处理复制的业务" class="headerlink" title="service (建立在 model 上的，用来处理复制的业务)"></a>service (建立在 model 上的，用来处理复制的业务)</h3><ul><li>在我们的 tp5 中，我们的 model 代表的一个很重要的位置</li><li>可以写业务逻辑，也访问数据库</li><li>但是 service 不可以用来访问数据库，因为上建立在 model 之上的</li><li>我们都会把复杂的业务逻辑放在 service 层中</li></ul><h3 id="公共应用文件-common-php"><a href="#公共应用文件-common-php" class="headerlink" title="公共应用文件 common.php"></a>公共应用文件 common.php</h3><ul><li>编写公共的 http 请求</li></ul><figure class="highlight php"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">/*</span></span><br><span class="line"><span class="comment">* <span class="doctag">@param</span> string $url get 请求地址</span></span><br><span class="line"><span class="comment">* <span class="doctag">@param</span> int $httpCode 返回状态码</span></span><br><span class="line"><span class="comment">* <span class="doctag">@return</span> mixed</span></span><br><span class="line"><span class="comment">*/</span></span><br><span class="line"><span class="function"><span class="keyword">function</span> <span class="title">curl_get</span> <span class="params">($url,&amp;$httpCode = <span class="number">0</span>)</span> </span>&#123;</span><br><span class="line"> $ch = curl_init();</span><br><span class="line"> curl_setopt($ch,CURLOPT_URL,$url);</span><br><span class="line"> curl_setopt($ch,CURLOPT_RETURNTRANSFER,<span class="number">1</span>);</span><br><span class="line"></span><br><span class="line"><span class="comment">//    不做证书校验，部署在linux环境下请改为true</span></span><br><span class="line"> curl_setopt($ch,CURLOPT_SSL_VERIFYPEER,<span class="keyword">false</span>);</span><br><span class="line"> curl_setopt($ch,CURLOPT_CONNECTTIMEOUT,<span class="number">10</span>);</span><br><span class="line"> $file_contents = curl_exec($ch);</span><br><span class="line"> $httpCode = curl_getinfo($ch,CURLINFO_HTTP_CODE);</span><br><span class="line"> curl_close($ch);</span><br><span class="line"> <span class="keyword">return</span> $file_contents;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h3 id="模型插入数据（create）"><a href="#模型插入数据（create）" class="headerlink" title="模型插入数据（create）"></a>模型插入数据（create）</h3><ul><li>在 tp5 中如何向数据库插入数据</li><li>tp5 模型给我们准备了 create 的方法</li></ul><figure class="highlight php"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line">    <span class="comment">//  模型名   create方法 数组传入要添加的字段和数据</span></span><br><span class="line">$user = UserModel::create([</span><br><span class="line">        <span class="string">'openid'</span> =&gt; $openid</span><br><span class="line">    ]);</span><br></pre></td></tr></table></figure><h3 id="动态传入数值随机生成字符串方法"><a href="#动态传入数值随机生成字符串方法" class="headerlink" title="动态传入数值随机生成字符串方法"></a>动态传入数值随机生成字符串方法</h3><figure class="highlight php"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">/*</span></span><br><span class="line"><span class="comment"> * 生成随机字符串</span></span><br><span class="line"><span class="comment"> */</span></span><br><span class="line"><span class="function"><span class="keyword">function</span> <span class="title">getRandChar</span> <span class="params">($length)</span> </span>&#123;</span><br><span class="line">    $str = <span class="keyword">null</span>;</span><br><span class="line">    $strPol = <span class="string">"ABCDEFGHIJKLMNOPQRSTUVWXYZ0123456789abcdefghijklmnopqrstuvwxyz"</span>;</span><br><span class="line">    $max = strlen($strPol) - <span class="number">1</span>;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">for</span> ($i=<span class="number">0</span>;$i &lt; $length; $i++) &#123;</span><br><span class="line">        $str .= $strPol[rand(<span class="number">0</span>,$max)];</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">return</span> $str;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h3 id="文件缓存-chache"><a href="#文件缓存-chache" class="headerlink" title="文件缓存 chache"></a>文件缓存 chache</h3><ul><li>使用 cache 写入缓存</li><li>使用文件存储的方式</li><li>缓存的地址在目录文件/runtime/cache 文件内</li></ul><figure class="highlight php"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">$request = cache($key,$value,$expire_in);</span><br></pre></td></tr></table></figure><h3 id="路由分组"><a href="#路由分组" class="headerlink" title="路由分组"></a>路由分组</h3><ul><li>由于我们 api 接口的不断增加</li><li>在一个分类中会有很多的相同的接口路由</li><li>这个时候如果我们业务的变更修改起来就会很麻烦</li><li>所以我们是用来路由分组来实现</li><li>group 方法</li><li>第一个是公共的路由部分，第二个是一个闭包（也就是一个 function 的方法）</li><li>在里面还是安装路由一样去定义就可以了</li><li>也能提高路由的效率</li></ul><figure class="highlight php"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br></pre></td><td class="code"><pre><span class="line"></span><br><span class="line"><span class="comment">//Route::get('api/:version/product/recent','api/:version.Product/getRecent');</span></span><br><span class="line"><span class="comment">//Route::get('api/:version/product/by_category','api/:version.Product/getAllInCategory');</span></span><br><span class="line"><span class="comment">//Route::get('api/:version/product/:id','api/:version.Product/getOne',[],['id'=&gt;'\d+']);</span></span><br><span class="line"></span><br><span class="line">Route::group(<span class="string">'api/:version/product'</span>, <span class="function"><span class="keyword">function</span> <span class="params">()</span> </span>&#123;</span><br><span class="line">    Route::get(<span class="string">'/recent'</span>,<span class="string">'api/:version.Product/getRecent'</span>);</span><br><span class="line">    Route::get(<span class="string">'/by_category'</span>,<span class="string">'api/:version.Product/getAllInCategory'</span>);</span><br><span class="line">    Route::get(<span class="string">'/:id'</span>,<span class="string">'api/:version.Product/getOne'</span>,[],[<span class="string">'id'</span>=&gt;<span class="string">'\d+'</span>]);</span><br><span class="line">&#125;);</span><br></pre></td></tr></table></figure><h3 id="关联模型下个关联数据排序（tp5-没有的，重点）"><a href="#关联模型下个关联数据排序（tp5-没有的，重点）" class="headerlink" title="关联模型下个关联数据排序（tp5 没有的，重点）"></a>关联模型下个关联数据排序（tp5 没有的，重点）</h3><ul><li>使用 模型+query 添加排序</li></ul><figure class="highlight php"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">// 关联模型 imgs  properties 查询</span></span><br><span class="line"><span class="comment">// 模型的嵌套 imgurl</span></span><br><span class="line"><span class="keyword">public</span> <span class="keyword">static</span> <span class="function"><span class="keyword">function</span> <span class="title">getProductDetail</span> <span class="params">($id)</span> </span>&#123;</span><br><span class="line">    <span class="comment">// 在 with 中 嵌套function</span></span><br><span class="line">    <span class="comment">// 在内部添加 query</span></span><br><span class="line">    $product = <span class="keyword">self</span>::with([<span class="string">'imgs'</span> =&gt; <span class="function"><span class="keyword">function</span> <span class="params">($query)</span> </span>&#123;</span><br><span class="line">        $query-&gt;with([<span class="string">'imgUrl'</span>])-&gt;order(<span class="string">'order'</span>,<span class="string">'asc'</span>);</span><br><span class="line">    &#125;])-&gt;with([<span class="string">'properties'</span>])-&gt;find($id);</span><br><span class="line">    <span class="keyword">return</span> $product;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h3 id="使用-关联模型-添加-更新数据"><a href="#使用-关联模型-添加-更新数据" class="headerlink" title="使用 关联模型 添加/更新数据"></a>使用 关联模型 添加/更新数据</h3><ul><li>添加数据的方法有很多，我们来使用一下关联模型的方法</li><li>两个的区别在于 修改操作的 关联 不可以用括号</li></ul><figure class="highlight php"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">// 调用 user 中的 address 关联 使用 save方法添加数据</span></span><br><span class="line">$user-&gt;address()-&gt;save($dataArray);</span><br><span class="line"><span class="comment">// 调用 user 中的 address 关联 使用 save方法修改数据</span></span><br><span class="line">$user-&gt;address-&gt;save($dataArray);</span><br></pre></td></tr></table></figure><h2 id="第十章"><a href="#第十章" class="headerlink" title="第十章"></a>第十章</h2><h3 id="前置操作"><a href="#前置操作" class="headerlink" title="前置操作"></a>前置操作</h3><ul><li>在我们编写 api 业务逻辑的时候，我们会想在调用 api 接口之前，需要满足某些条件</li><li>这样才可以去访问我们的接口中的业务逻辑</li><li>所以我们要在做一个前置操作，抵挡不满足条件的抛出异常</li></ul><ol><li>tp5 中使用前置操作需要基础自带的一个基类 Controller</li><li>定义一个名为 \$beforeActionList 的数组</li></ol><figure class="highlight php"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">use</span> <span class="title">think</span>\<span class="title">Controller</span></span><br><span class="line"></span><br><span class="line"> <span class="title">class</span> <span class="title">Address</span> <span class="title">extends</span> <span class="title">Controller</span></span><br><span class="line"> &#123;</span><br><span class="line">     // 定义前置属性</span><br><span class="line">     // 第一个字段是 访问<span class="title">api</span>接口前 需要 访问的一个前置方法</span><br><span class="line">     // 箭指的 是一个数组</span><br><span class="line">     // 数组内部定义一个箭指数据，也可以直接是一个字符串（内部填入<span class="title">api</span>接口函数就可以了）</span><br><span class="line">     // 否则向下面这样写</span><br><span class="line">     // 多<span class="title">api</span>编写</span><br><span class="line">     <span class="title">protected</span> $<span class="title">beforeActionList</span> = [</span><br><span class="line">         '<span class="title">first</span>' =&gt; ['<span class="title">only</span>' =&gt; '<span class="title">second</span>,<span class="title">third</span>']</span><br><span class="line">     ];</span><br><span class="line"></span><br><span class="line">     <span class="comment">// 触发api前 执行的前置函数</span></span><br><span class="line">     <span class="keyword">protected</span> <span class="function"><span class="keyword">function</span> <span class="title">first</span> <span class="params">()</span> </span>&#123;</span><br><span class="line">         <span class="keyword">echo</span> <span class="string">'first'</span>;</span><br><span class="line">     &#125;</span><br><span class="line"></span><br><span class="line">     <span class="comment">// api接口</span></span><br><span class="line">     <span class="keyword">public</span> <span class="function"><span class="keyword">function</span> <span class="title">second</span> <span class="params">()</span> </span>&#123;</span><br><span class="line">         <span class="keyword">echo</span> <span class="string">'second'</span>;</span><br><span class="line">     &#125;</span><br><span class="line"></span><br><span class="line">     <span class="comment">// api接口</span></span><br><span class="line">     <span class="keyword">public</span> <span class="function"><span class="keyword">function</span> <span class="title">third</span> <span class="params">()</span> </span>&#123;</span><br><span class="line">         <span class="keyword">echo</span> <span class="string">'third'</span>;</span><br><span class="line">     &#125;</span><br><span class="line"> &#125;</span><br></pre></td></tr></table></figure><h3 id="重构前置验证操作-（实现面向对象）"><a href="#重构前置验证操作-（实现面向对象）" class="headerlink" title="重构前置验证操作 （实现面向对象）"></a>重构前置验证操作 （实现面向对象）</h3><ul><li>提取验证业务逻辑到 service 的基类中</li><li>提取前置方法到 BaseController 的基类中</li><li>继承基类，执行前置方法</li></ul><ol><li>提取出一个前置的基类 BaseController （继承内置 Controller）</li></ol><figure class="highlight php"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">use</span> <span class="title">app</span>\<span class="title">api</span>\<span class="title">service</span>\<span class="title">Token</span> <span class="title">as</span> <span class="title">TokenService</span>;</span><br><span class="line"></span><br><span class="line"><span class="comment">// 继承</span></span><br><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">BaseController</span> <span class="keyword">extends</span> <span class="title">Controller</span></span></span><br><span class="line"><span class="class"></span>&#123;</span><br><span class="line"> <span class="comment">// 前置方法</span></span><br><span class="line"> <span class="comment">// 验证初级权限作用域,用户和cms都可以访问</span></span><br><span class="line"> <span class="keyword">protected</span> <span class="function"><span class="keyword">function</span> <span class="title">checkPrimaryScope</span> <span class="params">()</span> </span>&#123;</span><br><span class="line">     <span class="comment">// 向Token调用验证方法</span></span><br><span class="line">     TokenService::needPrimaryScope();</span><br><span class="line"> &#125;</span><br><span class="line"></span><br><span class="line"> <span class="comment">// 验证权限，只有用户可以访问，cms无法访问</span></span><br><span class="line"> <span class="keyword">protected</span> <span class="function"><span class="keyword">function</span> <span class="title">checkExclusiveScope</span> <span class="params">()</span> </span>&#123;</span><br><span class="line">     TokenService::needExclusiveScope();</span><br><span class="line"> &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><ol start="2"><li>提取验证业务逻辑（因为是 token 相关的就归并到 token 的 service 业务层中）</li></ol><figure class="highlight php"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">// 重构前置方法，验证权限</span></span><br><span class="line"><span class="comment">// 用户和cms管理员都可以访问的权限</span></span><br><span class="line"><span class="keyword">public</span> <span class="keyword">static</span> <span class="function"><span class="keyword">function</span> <span class="title">needPrimaryScope</span> <span class="params">()</span> </span>&#123;</span><br><span class="line">    <span class="comment">// 调用token中的方法获取scope</span></span><br><span class="line">    $scope = <span class="keyword">self</span>::getCurrentTokenVar(<span class="string">'scope'</span>);</span><br><span class="line">    <span class="comment">// 判断是否存在</span></span><br><span class="line">    <span class="keyword">if</span> ($scope) &#123;</span><br><span class="line">        <span class="comment">// 判断 scope的权限大小</span></span><br><span class="line">        <span class="keyword">if</span> ($scope &gt;= ScopeEnum::User) &#123;</span><br><span class="line">            <span class="keyword">return</span> <span class="keyword">true</span>;</span><br><span class="line">        &#125; <span class="keyword">else</span> &#123;</span><br><span class="line">            <span class="keyword">throw</span> <span class="keyword">new</span> ForbiddenException();</span><br><span class="line">        &#125;</span><br><span class="line">    &#125; <span class="keyword">else</span> &#123;</span><br><span class="line">        <span class="keyword">throw</span> <span class="keyword">new</span> TokenException();</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><ol start="3"><li>继承 BaseController 基类使用前置方法</li></ol><figure class="highlight php"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br></pre></td><td class="code"><pre><span class="line">         <span class="comment">// 继承基类</span></span><br><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">Address</span> <span class="keyword">extends</span> <span class="title">BaseController</span></span></span><br><span class="line"><span class="class"></span>&#123;</span><br><span class="line"> <span class="comment">// 调用前置的方法</span></span><br><span class="line"> <span class="keyword">protected</span> $beforeActionList = [</span><br><span class="line">     <span class="comment">// 前置验证的方法名                   需要前置验证的函数</span></span><br><span class="line">     <span class="string">'checkPrimaryScope'</span> =&gt; [<span class="string">'only'</span> =&gt; <span class="string">'createOrUpdateAddress'</span>]</span><br><span class="line"> ];</span><br><span class="line"></span><br><span class="line"> <span class="comment">/*</span></span><br><span class="line"><span class="comment">  * <span class="doctag">@url</span> api/v1/address</span></span><br><span class="line"><span class="comment">  */</span></span><br><span class="line"> <span class="keyword">public</span> <span class="function"><span class="keyword">function</span> <span class="title">createOrUpdateAddress</span> <span class="params">()</span> </span>&#123;</span><br><span class="line"></span><br><span class="line"> &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h3 id="验证器数据自定义子项验证"><a href="#验证器数据自定义子项验证" class="headerlink" title="验证器数据自定义子项验证"></a>验证器数据自定义子项验证</h3><ul><li>自定义子项验证，通过自定义的方法调用实现</li><li>当我们在验证时，传入的是一个二维数组，就可以使用来验证子项</li><li>我们就自定义一个验证的方法，通过基类的验证的调用</li></ul><figure class="highlight php"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br></pre></td><td class="code"><pre><span class="line"></span><br><span class="line"><span class="comment">// 整体验证</span></span><br><span class="line"><span class="keyword">protected</span> $rule = [</span><br><span class="line">  <span class="string">'products'</span> =&gt; <span class="string">'checkProducts'</span></span><br><span class="line">];</span><br><span class="line"></span><br><span class="line"><span class="comment">// 数据子项的验证</span></span><br><span class="line"><span class="keyword">protected</span> $singleRule = [</span><br><span class="line">    <span class="string">'product_id'</span> =&gt; <span class="string">'require|isPositiveInteger'</span>,</span><br><span class="line">    <span class="string">'count'</span> =&gt; <span class="string">'require|isPositiveInteger'</span></span><br><span class="line">];</span><br><span class="line"></span><br><span class="line"><span class="comment">/*</span></span><br><span class="line"><span class="comment"> * 自定义整体验证</span></span><br><span class="line"><span class="comment"> */</span></span><br><span class="line"><span class="keyword">protected</span> <span class="function"><span class="keyword">function</span> <span class="title">checkProducts</span> <span class="params">($values)</span> </span>&#123;</span><br><span class="line">    <span class="comment">// 验证是不是数组</span></span><br><span class="line">    <span class="keyword">if</span> (!is_array($values)) &#123;</span><br><span class="line">        <span class="keyword">throw</span> <span class="keyword">new</span> ParameterException([</span><br><span class="line">            <span class="string">'msg'</span> =&gt; <span class="string">'商品参数不正确'</span></span><br><span class="line">        ]);</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="comment">// 验证不为空</span></span><br><span class="line">    <span class="keyword">if</span> (<span class="keyword">empty</span>($values)) &#123;</span><br><span class="line">        <span class="keyword">throw</span> <span class="keyword">new</span> ParameterException([</span><br><span class="line">            <span class="string">'msg'</span> =&gt; <span class="string">'商品列表不能为空'</span></span><br><span class="line">        ]);</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="comment">// 循环对每一项进行验证</span></span><br><span class="line">    <span class="keyword">foreach</span> ($values <span class="keyword">as</span> $value) &#123;</span><br><span class="line">        <span class="keyword">$this</span>-&gt;checkProduct($value);</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">return</span> <span class="keyword">true</span>;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="comment">// 基础调用子项验证</span></span><br><span class="line"><span class="keyword">protected</span> <span class="function"><span class="keyword">function</span> <span class="title">checkProduct</span> <span class="params">($value)</span> </span>&#123;</span><br><span class="line">    $validate = <span class="keyword">new</span> BaseValidate(<span class="keyword">$this</span>-&gt;singleRule);</span><br><span class="line">    $result = $validate-&gt;check($value);</span><br><span class="line">    <span class="keyword">if</span> (!$result) &#123;</span><br><span class="line">        <span class="keyword">throw</span> <span class="keyword">new</span> ParameterException([</span><br><span class="line">            <span class="string">'msg'</span> =&gt; <span class="string">'商品参数不正确'</span></span><br><span class="line">        ]);</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h3 id="自动添加时间戳（TP5-内置添加时间戳）"><a href="#自动添加时间戳（TP5-内置添加时间戳）" class="headerlink" title="自动添加时间戳（TP5 内置添加时间戳）"></a>自动添加时间戳（TP5 内置添加时间戳）</h3><ul><li>在我们的操作中，我们的数据中会带有数据，tp5 为我们提供了自动添加时间戳</li></ul><ol><li>找到自己要添加的时间戳的模型 我是在 order 添加那我就去 orde 人的模型中</li><li>\$autoWriteTimestamp 添加为 true，需要是模型的方式才可以使用的</li><li>创建 修改 删除</li><li>默认为 create_time update_time delete_time</li><li>修改方法名 在模型下修改</li></ol><figure class="highlight php"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">// 自动写入时间戳</span></span><br><span class="line"><span class="keyword">protected</span> $autoWriteTimestamp = <span class="keyword">true</span>;</span><br><span class="line"><span class="comment">// 修改字段名</span></span><br><span class="line"><span class="comment">//         内置名称           自定义修改的名称</span></span><br><span class="line"><span class="keyword">protected</span> $createTime = <span class="string">'create_timestamp'</span>;</span><br></pre></td></tr></table></figure><h3 id="Tp5-事务应用"><a href="#Tp5-事务应用" class="headerlink" title="Tp5 事务应用"></a>Tp5 事务应用</h3><ul><li>在我们的应用中可能会出现分步的操作，可能会本地与服务端出现不一致</li><li>所以我们使用事务来做处理</li><li>在中间出现错误就会把数据回滚保持数据的一致性</li></ul><figure class="highlight php"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">// 开头加入开始</span></span><br><span class="line">    Db::startTrans();</span><br><span class="line">    <span class="keyword">try</span> &#123;</span><br><span class="line">        $orderNo = <span class="keyword">$this</span>-&gt;makeOrderNo();</span><br><span class="line">        $order = <span class="keyword">new</span> \app\api\model\Order();</span><br><span class="line">        $order-&gt;user_id = <span class="keyword">$this</span>-&gt;uid;</span><br><span class="line">        $order-&gt;order_no = $orderNo;</span><br><span class="line">        $order-&gt;total_price = $snap[<span class="string">'orderPrice'</span>];</span><br><span class="line">        $order-&gt;total_count = $snap[<span class="string">'totalCount'</span>];</span><br><span class="line">        $order-&gt;snap_img = $snap[<span class="string">'snapImg'</span>];</span><br><span class="line">        $order-&gt;snap_name = $snap[<span class="string">'snapName'</span>];</span><br><span class="line">        $order-&gt;snap_address = $snap[<span class="string">'snapAddress'</span>];</span><br><span class="line">        $order-&gt;snap_items = json_encode($snap[<span class="string">'pStatus'</span>]);</span><br><span class="line"></span><br><span class="line">        $order-&gt;save();</span><br><span class="line"></span><br><span class="line">        $orderID = $order-&gt;id;</span><br><span class="line">        $create_time = $order-&gt;create_time;</span><br><span class="line"></span><br><span class="line">        <span class="keyword">foreach</span> (<span class="keyword">$this</span>-&gt;oProducts <span class="keyword">as</span> &amp;$p) &#123;</span><br><span class="line">            $p[<span class="string">'order_id'</span>] = $orderID;</span><br><span class="line">        &#125;</span><br><span class="line"></span><br><span class="line">        $orderProduct = <span class="keyword">new</span> OrderProduct();</span><br><span class="line">        $orderProduct-&gt;saveAll(<span class="keyword">$this</span>-&gt;oProducts);</span><br><span class="line"></span><br><span class="line">        <span class="comment">// 结尾加上结束</span></span><br><span class="line">        Db::commit();</span><br><span class="line"></span><br><span class="line">        <span class="keyword">return</span> [</span><br><span class="line">            <span class="string">'order_no'</span> =&gt; $orderNo,</span><br><span class="line">            <span class="string">'order_id'</span> =&gt; $orderID,</span><br><span class="line">            <span class="string">'create_time'</span> =&gt; $create_time</span><br><span class="line">        ];</span><br><span class="line">    &#125; <span class="keyword">catch</span> (<span class="keyword">Exception</span> $ex) &#123;</span><br><span class="line">        <span class="comment">// 异常出现回滚</span></span><br><span class="line">        Db::rollback();</span><br><span class="line">        <span class="keyword">throw</span> $ex;</span><br><span class="line">    &#125;</span><br></pre></td></tr></table></figure><h3 id="引入没有命名空间的文件与调用-Loader-，手动引入微信支付-php"><a href="#引入没有命名空间的文件与调用-Loader-，手动引入微信支付-php" class="headerlink" title="引入没有命名空间的文件与调用(Loader)，手动引入微信支付 php"></a>引入没有命名空间的文件与调用(Loader)，手动引入微信支付 php</h3><ul><li>使用 loader 的 import 方法</li><li>extend/WxPay/WePay.Api.php</li></ul><figure class="highlight php"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line">    <span class="comment">//         文件开头的第一个  文件路径       // 类的名称</span></span><br><span class="line">Loader::import(<span class="string">'WxPay.WxPay'</span>,EXTEND_PATH,<span class="string">'.Api.php'</span>);</span><br><span class="line"><span class="comment">// 调用</span></span><br><span class="line"><span class="comment">// 调用的时候前面要加反斜杠</span></span><br><span class="line">$wxOrderData = <span class="keyword">new</span> \WxPayUnifiedOrder();</span><br></pre></td></tr></table></figure><h3 id="TP5-模型实现数据减少-setDec"><a href="#TP5-模型实现数据减少-setDec" class="headerlink" title="TP5 模型实现数据减少 setDec"></a>TP5 模型实现数据减少 setDec</h3><figure class="highlight php"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">                                            <span class="comment">// 前面是查询  第一个数是写要改变的字段  第二个是要减少的数量</span></span><br><span class="line">Product::where(<span class="string">'id'</span>,<span class="string">'='</span>,$singlePStatus[<span class="string">'id'</span>])-&gt;setDec(<span class="string">'stock'</span>,$singlePStatus[<span class="string">'count'</span>]);</span><br></pre></td></tr></table></figure><h3 id="数据库锁与事务锁的区别"><a href="#数据库锁与事务锁的区别" class="headerlink" title="数据库锁与事务锁的区别"></a>数据库锁与事务锁的区别</h3><ul><li>数据库模型-&gt;lock(true)</li><li>事务锁 Db</li></ul><ol><li>事务锁是等待整个事务提交才会执行第二次事务，但是数据库模型锁只是单步的锁着了数据库查询语句</li><li>在后面的操作还没有执行时，数据库模型锁已经放开了</li></ol><h3 id="外部网址使用"><a href="#外部网址使用" class="headerlink" title="外部网址使用"></a>外部网址使用</h3><ul><li>要从根目录一直到 index.php</li><li>后面才是路由</li><li><a href="http://www.yhf7/zerg/public/index.php/api/v1/pay/notify" target="_blank" rel="noopener">www.yhf7/zerg/public/index.php/api/v1/pay/notify</a></li></ul><h3 id="模型分页查询-paginate"><a href="#模型分页查询-paginate" class="headerlink" title="模型分页查询(paginate)"></a>模型分页查询(paginate)</h3><ul><li>第一个参数是分类数</li><li>第二个数是否简洁模式</li><li>第三个是数组填入分页数</li></ul><figure class="highlight php"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line"></span><br><span class="line"><span class="keyword">public</span> <span class="keyword">static</span> <span class="function"><span class="keyword">function</span> <span class="title">getSummaryByUser</span> <span class="params">($uid,$page=<span class="number">1</span>,$size=<span class="number">15</span>)</span> </span>&#123;</span><br><span class="line">    $paginData = <span class="keyword">self</span>::where(<span class="string">'user_id'</span>,<span class="string">'='</span>,$uid)-&gt;order(<span class="string">'create_time desc'</span>)-&gt;paginate($size,<span class="keyword">true</span>,[<span class="string">'page'</span> =&gt; $page]);</span><br><span class="line">    <span class="keyword">return</span> $paginData;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h1 id="后记"><a href="#后记" class="headerlink" title="后记"></a>后记</h1><ul><li>这是学习微信小程序开发后端PHP时候的笔记，欢迎更多的同行大哥指导交流</li><li><a href="https://yhf7.github.io/" target="_blank" rel="noopener">欢迎进入我的博客</a>：<a href="https://yhf7.github.io/" target="_blank" rel="noopener">https://yhf7.github.io/</a></li><li>如果有什么侵权的话，请及时添加小编微信以及qq也可以来告诉小编（905477376微信qq通用），谢谢！</li></ul>]]></content>
      
      
      <categories>
          
          <category> 小程序 </category>
          
      </categories>
      
      
        <tags>
            
            <tag> 小程序 笔记 </tag>
            
        </tags>
      
    </entry>
    
    <entry>
      <title>Git ssh 重构</title>
      <link href="/2019/02/11/gitshh-%E9%87%8D%E6%9E%84/"/>
      <url>/2019/02/11/gitshh-%E9%87%8D%E6%9E%84/</url>
      
        <content type="html"><![CDATA[<link rel="stylesheet" class="aplayer-secondary-style-marker" href="/assets/css/APlayer.min.css"><script src="/assets/js/APlayer.min.js" class="aplayer-secondary-script-marker"></script><h1 id="前言"><a href="#前言" class="headerlink" title="前言"></a>前言</h1><ul><li>昨天我说了忘记密码，今天我想说一下ssh的配置</li><li>有时候可以用但是ssh内部公钥可能会存在问题</li><li>所以今天我就来重构ssh</li></ul><h1 id="解决"><a href="#解决" class="headerlink" title="解决"></a>解决</h1><ol><li><p>进入.ssh</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">$ <span class="built_in">cd</span> .ssh/</span><br></pre></td></tr></table></figure></li><li><p>备份文件</p><ul><li>把公钥文件拷贝出来以防万一</li></ul></li><li><p>生成公钥</p><ul><li>生成密钥</li><li>输入后后面所有的都是直接回车就可以了</li><li>如果你要设置密码那就设置吧，ssh本来就是用来免密登录的，最好就是不用密码吧<figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">$ ssh-keygen</span><br></pre></td></tr></table></figure></li></ul></li></ol><p><img src="/git/git-ssh5.png" alt="git-ssh"></p><ol start="4"><li>查看密钥<ul><li>查看密钥配置<figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">$ cat ~/.ssh/id_rsa.pub</span><br></pre></td></tr></table></figure></li></ul></li></ol><p><img src="/git/git-ssh1.png" alt="git-ssh"></p><ol start="5"><li><p>添加密钥</p><ul><li>把查看密钥生成的代码拷贝到Github或码云</li><li>删除原有的输入新的就可以了<br><img src="/git/git-ssh2.png" alt="git-ssh"></li></ul></li><li><p>ssh下载项目</p><ul><li>复制项目到ssh地址下载</li><li>第一次使用ssh遇到Are you sure you want to continue connecting (yes/no)? yes 要输入yes表示同意验证本地ssh<figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">$ git <span class="built_in">clone</span> git@gitee.com:yhf7/zerg.git</span><br></pre></td></tr></table></figure></li></ul></li></ol><p><img src="/git/git-ssh3.png" alt="git-ssh"></p><ol start="7"><li>查看ssh配置了什么地方<ul><li>要在.ssh文件下</li><li>在什么地方设置了会看的出来<figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">$ cat known_hosts</span><br></pre></td></tr></table></figure></li></ul></li></ol><p><img src="/git/git-ssh4.png" alt="git-ssh"></p><h1 id="后记"><a href="#后记" class="headerlink" title="后记"></a>后记</h1><pre><code>- 才疏学浅，遇到了问题还好有大哥教我重构才得以解决，马上记录解决办法- [欢迎进入我的博客](https://yhf7.github.io/)：https://yhf7.github.io/- 如果有什么侵权的话，请及时添加小编微信以及qq也可以来告诉小编（905477376微信qq通用），谢谢！</code></pre>]]></content>
      
      
      <categories>
          
          <category> Git </category>
          
      </categories>
      
      
        <tags>
            
            <tag> Git </tag>
            
        </tags>
      
    </entry>
    
    <entry>
      <title>2019-01 - 02心得</title>
      <link href="/2019/02/10/%E6%96%B0%E5%B9%B4%E6%84%9F%E6%82%9F/"/>
      <url>/2019/02/10/%E6%96%B0%E5%B9%B4%E6%84%9F%E6%82%9F/</url>
      
        <content type="html"><![CDATA[<link rel="stylesheet" class="aplayer-secondary-style-marker" href="/assets/css/APlayer.min.css"><script src="/assets/js/APlayer.min.js" class="aplayer-secondary-script-marker"></script><p>在新的一年的这两个月中，看了书看了教学视频，也在掘金认识了一些人，加了一些学习交流群，看到了很多志同道合的人，很多也是和我一样科班出身然后也自己努力学习的前端后端的同学们，大家有问题就拿出来讨论一起学习你帮我解决一下问题你帮我解决一下问题这样的学习氛围非常的好，<br>看到小伙伴们都很用功的学习，大年三十也是有人开着电脑敲着代码，奋力的去学习，生怕被人超越了看到被人都很努力的在学习进步，你自己就在那里玩手机玩电脑的闲着，不是老天不公平而是你自己不努力怨不得天，当别人在拼命学习的时候你在为自己的小小能力而沾沾自喜的时候你已经输了<br>我不希望自己到了毕业也不知道找什么工作，什么工作适合自己，我想通过自己的努力改变生活改变自己的未来，所以我自己也开始了学习，但是知识永远是学不完的只能每天学一点慢慢的去积累，只有拼了才知道自己到底有多强大，也只有拼了才知道自己到底有多么的渺小，世界之大无奇不有<br>比你强的人大有人在，比你弱的也是大有人在，为何不做人中龙凤呢？只有自己强大起来才不会被人欺负被人看不起，我不想靠别人帮我什么，欠了的人情是要还的，我一直希望的是只要实力够强大就不会需要别人的帮助，所以自己要强大起来，用什么强大自己呢，那就只有学习，不断的学习<br>在it的领域中技术的更新换代是非常快了，我们还没来得及学完这一个，又到了下一个新的时代了，作为一个学生我非常想知道的是在职场中到底我们需要做什么可以做什么，需要很多的实战经验，但是经验是需要积累起来的，问过很多的大神在工作中要做什么，问很多的实战的东西，但是别人的<br>回答也只是做项目做多了就会有经验了，作为一个学生而且很多都是自学的自己对于做项目我是非常的吃力的，即使我可以写出前后端交互的项目来，毕竟也是一些小的项目，对于权限分级啊、路由拦截啊等的一些我都不会，遇到稍微难一点的业务逻辑我就要很久很久才可以想出来，而且还是用了<br>很多很笨的方法去实现，所以2019年的目标就是打好基础练好技术，找一份实习<br>2019目标：<br>3月完成小程序<br>4月vue的项目实战，reacts学习<br>5月 项目实战<br>后面都是一些实战，暑假找一份实习锻炼一下自己</p>]]></content>
      
      
      <categories>
          
          <category> 个人 </category>
          
      </categories>
      
      
        <tags>
            
            <tag> 个人 </tag>
            
        </tags>
      
    </entry>
    
    <entry>
      <title>解决Git ssh 密钥忘记密码</title>
      <link href="/2019/02/10/git-ssh%E5%BF%98%E8%AE%B0%E5%AF%86%E7%A0%81/"/>
      <url>/2019/02/10/git-ssh%E5%BF%98%E8%AE%B0%E5%AF%86%E7%A0%81/</url>
      
        <content type="html"><![CDATA[<link rel="stylesheet" class="aplayer-secondary-style-marker" href="/assets/css/APlayer.min.css"><script src="/assets/js/APlayer.min.js" class="aplayer-secondary-script-marker"></script><h1 id="前言"><a href="#前言" class="headerlink" title="前言"></a>前言</h1><ul><li>如果在之前有创建SSH的时候设置过密码，那就很有可能git操作时出现忘记密码的尴尬情况。</li><li>今天我就忘记了密码，在网上找到了解决的方法就记录下来</li></ul><h1 id="解决"><a href="#解决" class="headerlink" title="解决"></a>解决</h1><ul><li>在ssh密码忘记密码我们是无法去修改的，这个是一个保护机制，我们无法修改当是我们可以重新创建一个ssh密钥</li></ul><ol><li><p>进入本地ssh</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">$ <span class="built_in">cd</span> ~/.ssh</span><br></pre></td></tr></table></figure></li><li><p>查看文件 ls</p></li></ol><ul><li>如果本地有ssh秘钥的话会有id_rsa.pub，config，known_hosts等文件。如果本地没有ssh的话cd ~/.ssh这一步可能就会有找不到文件的提示了。 </li><li>一般忘记密码都是已经有的我们就不说了</li></ul><ol start="3"><li>创建新的ssh</li></ol><ul><li>输入这个后面改自己git的邮箱<figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">$ ssh-keygen -t rsa -b 4096 -C <span class="string">"905477376@qq.com"</span></span><br></pre></td></tr></table></figure></li></ul><ol start="4"><li>新密码</li></ol><ul><li>如果本地有ssh，会出现如下提示：<br><img src="/git/gitssh.png" alt="gitssh"><br>这里选择y，表示覆盖本地的ssh key，这也就是ssh秘钥删除的意思。<br>接着就是让你输入密码的，可以直接回车不设置密码，我还是设置密码的</li></ul><ol start="5"><li>查看密钥</li></ol><ul><li>把之前的公钥删掉添加新的</li><li>输入代码查看密钥然后复制到 GitHub或者码云上<figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">$ cat ~/.ssh/id_rsa.pub</span><br></pre></td></tr></table></figure></li></ul><p><img src="/git/gitssh2.png" alt="gitssh"></p><h1 id="后记"><a href="#后记" class="headerlink" title="后记"></a>后记</h1><ul><li>这就是我实践了的方法</li><li>欢迎一起学习交流</li><li><a href="https://yhf7.github.io/" target="_blank" rel="noopener">欢迎进入我的博客</a>：<a href="https://yhf7.github.io/" target="_blank" rel="noopener">https://yhf7.github.io/</a></li><li>如果有什么侵权的话，请及时添加小编微信以及qq也可以来告诉小编（905477376微信qq通用），谢谢！</li></ul>]]></content>
      
      
      <categories>
          
          <category> Git </category>
          
      </categories>
      
      
        <tags>
            
            <tag> Git </tag>
            
        </tags>
      
    </entry>
    
    <entry>
      <title>Vue动画多个元素嵌套使用过渡</title>
      <link href="/2019/01/17/vue%20%E5%8A%A8%E7%94%BB%E5%B5%8C%E5%A5%97%E4%BD%BF%E7%94%A8/"/>
      <url>/2019/01/17/vue%20%E5%8A%A8%E7%94%BB%E5%B5%8C%E5%A5%97%E4%BD%BF%E7%94%A8/</url>
      
        <content type="html"><![CDATA[<link rel="stylesheet" class="aplayer-secondary-style-marker" href="/assets/css/APlayer.min.css"><script src="/assets/js/APlayer.min.js" class="aplayer-secondary-script-marker"></script><h1 id="前言"><a href="#前言" class="headerlink" title="前言"></a>前言</h1><ul><li>在我们前端的工作中我们的去写页面，总会觉得这样的效果给到用户好像很干没有什么体验</li><li>那我们就想搞搞新意思？</li><li>弄点动画上去憋，那么弄动画我又想他滚动又想他偏移又想有渐变效果</li><li>渐变和移动可以写在一起，但是滚动和偏移好像不可以一起执行喔</li><li>那我们就要分开两步来执行但是，vue的transition里面好像不可以同时执行两个transform</li><li>所以我们就来解决这个问题</li><li>其实嘛是可以嵌套使用的哦</li></ul><h1 id="工具-资料"><a href="#工具-资料" class="headerlink" title="工具/资料"></a>工具/资料</h1><ul><li>mac os 10.13.3</li><li>vue官方文档 <a href="https://cn.vuejs.org/v2/guide/transitions.html" target="_blank" rel="noopener">https://cn.vuejs.org/v2/guide/transitions.html</a></li><li>vs code</li></ul><h1 id="开始"><a href="#开始" class="headerlink" title="开始"></a>开始</h1><ol><li><p>套用我们的 transition</p><ul><li>在我们需要定义效果的外面包上 transition</li><li>这个 name 呢是自定义的也可以不写，个人认为最好是写一下<figure class="highlight html"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">transition</span> <span class="attr">name</span>=<span class="string">"move"</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">div</span> <span class="attr">class</span>=<span class="string">"cart-decrease"</span> <span class="attr">v-show</span>=<span class="string">"food.count&gt;0"</span> @<span class="attr">click</span>=<span class="string">"decreaseCart"</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">span</span> <span class="attr">class</span>=<span class="string">"inner icon-remove_circle_outline"</span>&gt;</span><span class="tag">&lt;/<span class="name">span</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;/<span class="name">div</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">transition</span>&gt;</span></span><br></pre></td></tr></table></figure></li></ul></li><li><p>定义Css</p><ul><li>如果使用name了，-前面写的就是name定义的名称，如果没有写那就直接用v就好</li><li>在我们要嵌套动画的地方也是向平时css关系那些嵌套进去就好了<figure class="highlight css"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">/* 这里我们定义了滑动和渐变 */</span></span><br><span class="line"><span class="selector-class">.move-enter-active</span>, <span class="selector-class">.move-leave-active</span></span><br><span class="line">    <span class="selector-tag">transition</span>: <span class="selector-tag">all</span> <span class="selector-class">.4s</span> <span class="selector-tag">linear</span></span><br><span class="line">    <span class="selector-tag">opacity</span>: 1</span><br><span class="line">    <span class="selector-tag">transform</span> <span class="selector-tag">translate3d</span>(0,0,0)</span><br><span class="line"><span class="selector-class">.move-enter</span>, <span class="selector-class">.move-leave-to</span> <span class="comment">/* .fade-leave-active below version 2.1.8 */</span></span><br><span class="line">    <span class="selector-tag">opacity</span>: 0</span><br><span class="line">    <span class="selector-tag">transform</span> <span class="selector-tag">translate3d</span>(24<span class="selector-tag">px</span>,0,0)</span><br><span class="line"></span><br><span class="line"><span class="comment">/* </span></span><br><span class="line"><span class="comment">    定义滚动</span></span><br><span class="line"><span class="comment">    这里我是动画下的，span想添加效果</span></span><br><span class="line"><span class="comment">    那么我们就把类名拼接在后面去使用就好了</span></span><br><span class="line"><span class="comment">    如果添加了不生效，那就换一个类名，因为有一些是官方的类名是不允许使用的</span></span><br><span class="line"><span class="comment"> */</span></span><br><span class="line"><span class="selector-class">.move-enter-active</span> <span class="selector-class">.inner</span>, <span class="selector-class">.move-leave-active</span> <span class="selector-class">.inner</span></span><br><span class="line">    <span class="selector-tag">transition</span>: <span class="selector-tag">all</span> <span class="selector-class">.4s</span> <span class="selector-tag">linear</span></span><br><span class="line">    <span class="selector-tag">transform</span> <span class="selector-tag">rotate</span>(0)</span><br><span class="line"><span class="selector-class">.move-enter</span> <span class="selector-class">.inner</span>, <span class="selector-class">.move-leave-to</span> <span class="selector-class">.inner</span></span><br><span class="line">    <span class="selector-tag">transform</span> <span class="selector-tag">rotate</span>(180<span class="selector-tag">deg</span>)</span><br></pre></td></tr></table></figure></li></ul></li></ol><ul><li>这样我们就实现了即滚动也偏移</li></ul><h1 id="后记"><a href="#后记" class="headerlink" title="后记"></a>后记</h1><ul><li>看了有没有发现很简单哈，其实本来也就是很简单嘛，只是一开始傻乎乎的用了in使得效果没粗来以为不可以这样用</li><li>这是本人的学习问题记录的笔记，有需要的可以借鉴</li><li>欢迎添加微信交流学习</li><li><a href="https://yhf7.github.io/" target="_blank" rel="noopener">欢迎进入我的博客</a>：<a href="https://yhf7.github.io/" target="_blank" rel="noopener">https://yhf7.github.io/</a></li><li>如果有什么侵权的话，请及时添加小编微信以及qq也可以来告诉小编（905477376微信qq通用），谢谢！</li></ul>]]></content>
      
      
      <categories>
          
          <category> Vue </category>
          
      </categories>
      
      
        <tags>
            
            <tag> Vue笔记 </tag>
            
        </tags>
      
    </entry>
    
    <entry>
      <title>安装/解决Hexo next搜索错误笔记</title>
      <link href="/2019/01/09/%E6%90%9C%E7%B4%A2%E9%94%99%E8%AF%AF/"/>
      <url>/2019/01/09/%E6%90%9C%E7%B4%A2%E9%94%99%E8%AF%AF/</url>
      
        <content type="html"><![CDATA[<link rel="stylesheet" class="aplayer-secondary-style-marker" href="/assets/css/APlayer.min.css"><script src="/assets/js/APlayer.min.js" class="aplayer-secondary-script-marker"></script><h1 id="前言"><a href="#前言" class="headerlink" title="前言"></a>前言</h1><ul><li>搜索功能无效，一直在哪转圈圈，头都晕了</li><li>说起就来气，添加了那么多篇文章，突然就这几天就不可以用hexo的搜索功能，我写了那么多篇文章突然今天写项目发现不记得想来查一下居然用不了气得我</li><li>横看竖看都不知道错哪里，配置了好几遍也是不行</li><li>最后还是被我ko了</li><li>赶紧记录下来下一次就不用怕了</li></ul><h1 id="所需工具-资料"><a href="#所需工具-资料" class="headerlink" title="所需工具/资料"></a>所需工具/资料</h1><ul><li>mac 10.13.3</li><li>VS code (软件很多自己喜欢，这个失败了一会说原因)</li><li>Chrome</li><li>Sublime (这个是解决问题的关键哦)</li></ul><h1 id="开始ko错误之旅"><a href="#开始ko错误之旅" class="headerlink" title="开始ko错误之旅"></a>开始ko错误之旅</h1><p><img src="/hexo/hexo-x1.png" alt="hexo"></p><h3 id="查错第一步（其实和安装没有啥区别）"><a href="#查错第一步（其实和安装没有啥区别）" class="headerlink" title="查错第一步（其实和安装没有啥区别）"></a>查错第一步（其实和安装没有啥区别）</h3><ol><li>查看package</li></ol><ul><li>根目录 package.json<br>看看有没有 hexo-generator-searchdb 看这个的主要原因的看看有没有安装这个中间件，如果没有安装就安装一下<figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">$ npm install hexo-generator-searchdb --save</span><br></pre></td></tr></table></figure></li></ul><ol start="2"><li>查看 /themes/next/_config.yml 配置</li></ol><ul><li>搜索 local_search看看这个下面的enable 是否处于<figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">local_search:</span><br><span class="line">  enable: true</span><br></pre></td></tr></table></figure></li></ul><ol start="3"><li>查看添加配置（这个我个人觉得嘛加和不加没有区别）</li></ol><ul><li>添加 /themes/next/_config.yml<figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line">search:</span><br><span class="line">  path: search.xml</span><br><span class="line">  field: post</span><br><span class="line">  format: html</span><br><span class="line">  limit: 10000</span><br></pre></td></tr></table></figure></li></ul><h3 id="查错第二步"><a href="#查错第二步" class="headerlink" title="查错第二步"></a>查错第二步</h3><ol><li>有可能是文字的数量太多引起的</li></ol><ul><li>可以修改刚才配置的 search：内的limit 把数值加大试试</li></ul><ol start="2"><li>查看文件名什么的有没有定义错误或者是什么弄错了</li></ol><ul><li>直接 sudo hexo g 打包就知道了，如果报错了那就是文件有问题</li></ul><h3 id="查错第三步（关键，很多的问题会出在这里）"><a href="#查错第三步（关键，很多的问题会出在这里）" class="headerlink" title="查错第三步（关键，很多的问题会出在这里）"></a>查错第三步（关键，很多的问题会出在这里）</h3><ul><li>有可能是文章内部的一下符号引起的错误 （我就知道是这样引起的为什么不执行我真的不懂）（这样的错误有可能是因为跟编辑器或者输入法有关系）</li><li>字符错误 <span style="color:red">Bytes: 0x08 0xE4 0xB8 0x80</span> 其实也是空格只是不识别的软件才可以看的出了</li><li>在我们的 vs code 这个软件呢就是识别了这种符号所以并没有显示出了 在我们的Sublime 就是不识别直接就可以显示出来了<h4 id="解决问题方法一-（这些只可以在sublime或者其他的软件中做，vs-code不可以的哦）"><a href="#解决问题方法一-（这些只可以在sublime或者其他的软件中做，vs-code不可以的哦）" class="headerlink" title="解决问题方法一 （这些只可以在sublime或者其他的软件中做，vs code不可以的哦）"></a>解决问题方法一 （这些只可以在sublime或者其他的软件中做，vs code不可以的哦）</h4></li><li>直接就在 search.xml 文件中 直接搜索 \x08 或者 \u0008删掉</li><li>但是呢这样的方法治标不治本啊</li><li>在你下一次的添加文件编译的时候还是会带上的<h4 id="解决方法二（方法一治标不治本那我们再来一个方法）"><a href="#解决方法二（方法一治标不治本那我们再来一个方法）" class="headerlink" title="解决方法二（方法一治标不治本那我们再来一个方法）"></a>解决方法二（方法一治标不治本那我们再来一个方法）</h4></li><li>直接找到错误文件 这里我是把文件都考出来然后把一些比较早点文件先放回去</li><li>然后后面都文件一个一个那样去测试找到错误文件 （主要是我一开始不知道是这样的错误才那样去找）</li><li>现在知道了错误直接就在 Sublime 打开所有的md看看有没有 上面的错误字符 有就删掉就可以了</li><li>这个是我的错误（每个人的都可能不一样）<br><img src="/hexo/hexo-x2.png" alt="hexo"></li></ul><h1 id="后记"><a href="#后记" class="headerlink" title="后记"></a><span>后记</span></h1><ul><li>终于吐槽完，也说完错误了，这是我个人的一个查错以及解决的方法，希望有缘人看到可以帮到你</li><li>这些都是我的一些笔记，欢迎一起学习讨论</li><li><a href="https://yhf7.github.io/" target="_blank" rel="noopener">欢迎进入我的博客</a>：<a href="https://yhf7.github.io/" target="_blank" rel="noopener">https://yhf7.github.io/</a></li><li>如果有什么侵权的话，请及时添加小编微信以及qq也可以来告诉小编（905477376微信qq通用），谢谢！</li></ul>]]></content>
      
      
      <categories>
          
          <category> Hexo </category>
          
      </categories>
      
      
        <tags>
            
            <tag> Hexo笔记 </tag>
            
        </tags>
      
    </entry>
    
    <entry>
      <title>网上抓取 Git进阶笔记</title>
      <link href="/2019/01/09/Git%E8%BF%9B%E9%98%B6/"/>
      <url>/2019/01/09/Git%E8%BF%9B%E9%98%B6/</url>
      
        <content type="html"><![CDATA[<link rel="stylesheet" class="aplayer-secondary-style-marker" href="/assets/css/APlayer.min.css"><script src="/assets/js/APlayer.min.js" class="aplayer-secondary-script-marker"></script><h1 id="前言"><a href="#前言" class="headerlink" title="前言"></a>前言</h1><ul><li>这个git的解说是我在网上看到然后觉得挺好抓取下来给自己用的，并非个人所写</li></ul><p>Git 进阶知识点<br>作为分布式的版本控制系统，Git 的操作指令非常多，但是我们可以灵活的组合使用一些常用指令，就可以玩转大多数的日常 Git 使用场景。</p><h1 id="1、温习-Git-工作-区域"><a href="#1、温习-Git-工作-区域" class="headerlink" title="1、温习 Git 工作  区域"></a>1、温习 Git 工作  区域</h1><p>先来温习一下 Git 的工作区域划分：工作目录、暂存区、本地仓库，实际操作中，我们需要知道每一步操作发生在哪个工作区域，那么再复杂的 Git 问题都能  轻松解决。</p><p>先看一张逻辑工作区域划分图：<br><img src="/git/git_07.png" alt="git_07.png"></p><p>物理  工作区域划分图：<br><img src="/git/git_08.png" alt="git_07.png"></p><ul><li>.git 是隐藏文件夹，大多版本控制软件都会用一个隐藏的文件夹作为其本地版本仓库，SVN 也是如此。用户的每一步操作都被这个隐藏文件夹里的代码记录着。</li></ul><h1 id="2、一次完整的本地提交"><a href="#2、一次完整的本地提交" class="headerlink" title="2、一次完整的本地提交"></a>2、一次完整的本地提交</h1><p>虽然 Git 是分布式的  版本控制系统，工作中，我们都会有远程仓库的概念，但只需熟练玩转本地仓库即可，因为远程仓库不过是别人电脑上的本地仓库。接下来我们来看看一次完整的提交，是如何在三个工作区域之间转换的：<br><img src="/git/git_09.png" alt="git_07.png"></p><p>上图中也引出了 git reset 回滚命令的三个参数：–soft –mixed –hard，三个  参数回滚的程度  逐渐增强，实际使用中可以根据具体需求灵活使用。</p><p>另外不要忽略了 git commit 只提交那些被记录到了暂存区的修改。</p><h1 id="3、使用好-checkout"><a href="#3、使用好-checkout" class="headerlink" title="3、使用好 checkout"></a>3、使用好 checkout</h1><p>checkout 可能是 git 中比较多功能的一个命令。</p><ul><li>git checkout [分支名] : 切换分支。</li><li>git checkout [commit 序列号] : 穿越到指定的某次 commit。</li><li>git checkout -b [分支名] : 创建并切换分支。</li><li>git checkout –ours/theirs : 解决冲突时用来检出某方的提交。</li><li>git checkout [文件名/路径/.] : 丢弃某些文件/文件夹/所有修改。</li></ul><p>所以 checkout 这个检出操作，不仅仅是用来切换分支，还有很多强大的功能；注意点：git checkout . 指令丢弃的文件是无法找回的，使用请谨慎，防止车祸现场。</p><h1 id="4、使用简单的组合命令进行历史修改"><a href="#4、使用简单的组合命令进行历史修改" class="headerlink" title="4、使用简单的组合命令进行历史修改"></a>4、使用简单的组合命令进行历史修改</h1><h3 id="修改历史中的某次提交信息"><a href="#修改历史中的某次提交信息" class="headerlink" title="修改历史中的某次提交信息"></a>修改历史中的某次提交信息</h3><p>由于某些原因， 有时候总要修改一下提交历史，或者叫重写历史，最简单的修改最近一次提交命令 git commit –amend，然后会进入文本编辑状态，修改你的提交信息。</p><p>但是如果不是最近一次提交，而是历史中较远的前几条信息，那么单纯使用 git commit –amend 就不行了，比如下图这种情况，想要将 “第一次提交” 改为 “首次提交”。<br><img src="/git/git_10.png" alt="git_07.png"></p><p>这时你可能马上会想到 git rebase 变基命令，但是对于这种情况，我们可以使用  git checkout 组合 git commit –amend 完成同样的工作:</p><p>1、先用 git checkout 36ae20…  穿越回第一次提交的节点中，此时我们执行 git log 看到的只有第一次提交的 commit:<br><img src="/git/git_11.png" alt="git_07.png"></p><p>2、那么接下来你也猜到了，执行 git commit –amend 吧。<br>3、然后再次 git checkout master  穿越回当前分支的最新节点。</p><h3 id="合并多次提交历史-为一次"><a href="#合并多次提交历史-为一次" class="headerlink" title="合并多次提交历史  为一次"></a>合并多次提交历史  为一次</h3><p>合并多次历史是比较常见的需求，同样我们先不用 rebase，使用一些常用的命令；例如我们要将上边例子中的三次提交合并为一次，我们可以先用 reset 回滚多次历史提交，然后 commit –amend 重写提交即可：</p><p>1、 先用 git reset –soft 36ae20…，软回滚到第一次提交(36ae20…是历史中第一次的提交序列号，这里也可以使用 HEAD~3 这种头指针回数的形式)，这时候  git log 又变成了只有第一次的 commit 信息：</p><p><img src="/git/git_11.png" alt="git_07.png"></p><p>但是通过 git status 可以看到其他两次提交都已经被我们  使用 reset –soft 将最近两次提交回滚到了暂存区：<br><img src="/git/git_13.png" alt="git_07.png"></p><p>2、接下来，使用 git commit –amend 重新提交并修改最近一次的 commit 信息即可。</p><p>使用 reset –soft 我们将提交回滚到暂存区，这样可以在重新提交的时候，少写一次 git add。<br>如果多次合并的 commit 不是从最近一次的提交历史  开始，那么久多使用一次 git checkout 。</p><p>你看，貌似不需要  学习 rebase 也能完成 Git 重写历史。</p><h1 id="5、使用-git-rebase-修改历史"><a href="#5、使用-git-rebase-修改历史" class="headerlink" title="5、使用 git rebase  修改历史"></a>5、使用 git rebase  修改历史</h1><p>对于  4、使用简单的组合命令进行历史修改 中的案例，我们可以使用更加高级的 git 工具 rebase，使用 rebase 来干这些事情会显得更加专业，当然 rebase 的功能也更加强大一些。但是依然要写出来 4、使用简单的组合命令进行历史修改 这一部分内容，是想表达，有时候一些问题的解决办法并不唯一，灵活使用一些我们已经学过的  知识点也能曲线救国；假如你还不会使用 rebase，眼下又个紧急的 git 历史合并任务要做，马上去学习 rebase 又有些来不及，那么只能急中生智了。</p><p>接着  4 中的例子，我们使用 git rebase -i 36ae20… ，然后我们会看到如下的文本编辑界面：</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br></pre></td><td class="code"><pre><span class="line">pick 1f737d8 第二次提交</span><br><span class="line">pick 8e401d5 第三次提交</span><br><span class="line">pick bc9c6f0 第四次提交</span><br><span class="line"></span><br><span class="line"><span class="comment"># Rebase d973330..bc9c6f0 onto d973330 (3 commands)</span></span><br><span class="line"></span><br><span class="line"><span class="comment">#</span></span><br><span class="line"></span><br><span class="line"><span class="comment"># Commands:</span></span><br><span class="line"></span><br><span class="line"><span class="comment"># p, pick = use commit</span></span><br><span class="line"></span><br><span class="line"><span class="comment"># r, reword = use commit, but edit the commit message</span></span><br><span class="line"></span><br><span class="line"><span class="comment"># e, edit = use commit, but stop for amending</span></span><br><span class="line"></span><br><span class="line"><span class="comment"># s, squash = use commit, but meld into previous commit</span></span><br><span class="line"></span><br><span class="line"><span class="comment"># f, fixup = like "squash", but discard this commit's log message</span></span><br><span class="line"></span><br><span class="line"><span class="comment"># x, exec = run command (the rest of the line) using shell</span></span><br><span class="line"></span><br><span class="line"><span class="comment"># d, drop = remove commit</span></span><br><span class="line"></span><br><span class="line"><span class="comment">#</span></span><br><span class="line"></span><br><span class="line"><span class="comment"># These lines can be re-ordered; they are executed from top to bottom.</span></span><br><span class="line"></span><br><span class="line"><span class="comment">#</span></span><br><span class="line"></span><br><span class="line"><span class="comment"># If you remove a line here THAT COMMIT WILL BE LOST.</span></span><br><span class="line"></span><br><span class="line"><span class="comment">#</span></span><br><span class="line"></span><br><span class="line"><span class="comment"># However, if you remove everything, the rebase will be aborted.</span></span><br><span class="line"></span><br><span class="line"><span class="comment">#</span></span><br><span class="line"></span><br><span class="line"><span class="comment"># Note that empty commits are commented out</span></span><br></pre></td></tr></table></figure><p>注释中，我们看到 reword edit squash 等指令，这里我们把 pick 改为 edit。</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line">edit 1f737d8 第二次提交</span><br><span class="line">pick 8e401d5 第三次提交</span><br><span class="line">pick bc9c6f0 第四次提交</span><br></pre></td></tr></table></figure><p>然后保存退出，接下来 git 会把你带入第二次的 commit 节点， 并有如下提示：<br><img src="/git/git_14.png" alt="git_07.png"></p><p>到这里，我们需要执行 git commit –amend 来执行 commit 修改。编辑保存后，再执行：</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">$ git rebase --<span class="built_in">continue</span></span><br></pre></td></tr></table></figure><p>然后  git 把你带回到 master 分支的最新节点，整个操作完成。</p><p>如果要合并提交，我们需要把 edit 改为 squash：<br><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line">pick 1f737d8 修改为第二次提交</span><br><span class="line">squash 8e401d5 第三次提交</span><br><span class="line">squash bc9c6f0 第四次提交</span><br></pre></td></tr></table></figure></p><p>接下来，git 会进入另一个编辑界面：</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment"># This is a combination of 3 commits.</span></span><br><span class="line"></span><br><span class="line"><span class="comment"># This is the 1st commit message:</span></span><br><span class="line"></span><br><span class="line">修改为第二次提交</span><br><span class="line"></span><br><span class="line"><span class="comment"># This is the commit message #2:</span></span><br><span class="line"></span><br><span class="line">第三次提交</span><br><span class="line"></span><br><span class="line"><span class="comment"># This is the commit message #3:</span></span><br><span class="line"></span><br><span class="line">第四次提交</span><br><span class="line"></span><br><span class="line"><span class="comment"># Please enter the commit message for your changes. Lines starting</span></span><br><span class="line"></span><br><span class="line"><span class="comment"># with '#' will be ignored, and an empty message aborts the commit.</span></span><br></pre></td></tr></table></figure><p>这个界面里，可以修改你最终要显示的提交信息，这里直接保存退出，完成合并，此时 git log 显示如下：</p><p><img src="/git/git_15.png" alt="git_15.png"></p><p>除了修改和  合并提交，还可以使用 git rebase 进行拆分、删除提交操作，就不一一演示。</p><p>最终你会发现，使用 git rebase 来修改历史步骤比较繁琐，还不如使用 4、使用简单的组合命令进行历史修改 的方式来操作简单。</p><h4 id="理解分支合并中的-Fast-forward-merge-rebase"><a href="#理解分支合并中的-Fast-forward-merge-rebase" class="headerlink" title="理解分支合并中的 Fast-forward/merge/rebase"></a>理解分支合并中的 Fast-forward/merge/rebase</h4><p>在分支合并的场景  中，我们有时会看到 Fast-forward ， Fast-Forword 很好理解，在 Git 中就是它直译  过来的意思’快进‘，下面我做了四个小视频，来解释 Fast-forward/merge/rebase。</p><p>观看视频前，我们以下图做个 demo 背景说明：</p><p><img src="/git/git_16.png" alt="git_15.png"></p><p>图中有两条分支，master 和 feature1 分支，feature1 是从 master 的 C2 节点拉出来的分支，背景说明完毕。</p><p>Fast-forward 合并模式</p><video controls width="100%" height="100%"><br>    <source src="/git/fast-forward.mov"><br></video><p>Fast-forward 的合并模式永远不会有冲突产生。</p><h4 id="非-Fast-forward-合并模式"><a href="#非-Fast-forward-合并模式" class="headerlink" title="非 Fast-forward 合并模式"></a>非 Fast-forward 合并模式</h4><video controls width="100%" height="100%"><br>    <source src="/git/nofast-forward.mov"><br></video><p>这种非 Fast-forward 的合并模式下才有可能发生合并冲突。</p><h4 id="merge-过程"><a href="#merge-过程" class="headerlink" title="merge 过程"></a>merge 过程</h4><p>为了和下边的 rebase 做对比，视频中在 feature1 分支中做 git merge master 操作</p><p><video controls width="100%" height="100%"><br>    <source src="/git/from-feature-merge.mov"><br></video></p><h4 id="rebase-过程"><a href="#rebase-过程" class="headerlink" title="rebase 过程"></a>rebase 过程</h4><p><video controls width="100%" height="100%"><br>    <source src="/git/rebase-process.mov"><br></video><br>前边我们用 rebase 来重写历史，这里的 rebase 用来在分支之间合并变基，变基可以理解为改变基点，基点就是某条分支在另一条分支上的起点，这个点是出现分支的点；rebase 和 merge 在从结果上来看，及其相似，但是其过程却大不相同，我想看了视频，你应该理解了。</p><p>rebase 的目的并不是做一次合并，而是为了让某条分支  与主分支的  当前进程保持同步更新，进而在合入主分支的时候，能够以 Fast-forward 的过程合并，避免冲突；rebase 的过程  有冲突的可能，但是这种冲突时发生在当前分支，不会影响主分支，所以也不会影响和你一起合作的其他小伙伴。所以  在多人合作的时候经常使用 rebase 是个好习惯。</p><p>一次完整的 rebase 场景</p><p><video controls width="100%" height="100%"><br>    <source src="/git/rebase-demo.mov"><br></video></p><h1 id="解决冲突"><a href="#解决冲突" class="headerlink" title="解决冲突"></a>解决冲突</h1><p>解决冲突其实很简单，理解了 git 本地操作和 git merge 过程，解决冲突就是个体力活了；cherry-pick/merge/rebase/revert 等操作都有可能发生冲突；</p><p>冲突产生时我们只需要通过 git status 查看具体发生冲突的文件，然后打开编辑文件，选择保留的内容后保存文件，然后继续 merge 或者 rebase，指令分别是：git merge –continuegit rebase –continue；除了 –continue 参数，我们还可以使用 –abort 来终止 merge 或者 rebase 。</p><p>之所以说解决冲突是个体力活主要看，冲突文件的数量和内容多不多，如果冲突较多时，我们一一修改可能就比较累了，这时候可以借助 checkout 指令来保留冲突双方的其中一方修改：</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">$ git checkout --ours // 保留自己的修改</span><br><span class="line">$ git checkout --their // 保留别人的修改</span><br></pre></td></tr></table></figure><p>注意点：rebase 的过程，ours 和 theirs 是反过来的。当然，我们也可以借助图像化工具来解决冲突：<br><img src="/git/git_17.png" alt="git"></p><p>选择后，会进入图像化操作：</p><p><img src="/git/git_18.png" alt="git"></p><h1 id="关联远程仓库"><a href="#关联远程仓库" class="headerlink" title="关联远程仓库"></a>关联远程仓库</h1><p>当我们需要关联远程仓库的时候，可以通过 git remote add [远程仓库命名][ssh/http 地址]，例如：</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">$ git remote add origin git@git.coding.net:demo/demo.git</span><br></pre></td></tr></table></figure><p>这里把远程仓库 <a href="mailto:git@git.coding.net" target="_blank" rel="noopener">git@git.coding.net</a>:demo/demo.git 命名为 origin。一个仓库可以关联多个远程仓库，但是仓库名不能相同：</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">$ git remote add gh git@git.github.com:demo/demo.git</span><br></pre></td></tr></table></figure><p>这里，我们把另一个远程仓库 <a href="mailto:git@git.github.com" target="_blank" rel="noopener">git@git.github.com</a>:demo/demo.git 命名为 gb 关联了本地仓库，当我们需要同时往多个远程仓库推送文件时，可以使用了。</p><p>最后通过 git remote -v 可以查看本地仓库关联的所有远程仓库。</p><h1 id="git-config-配置文件"><a href="#git-config-配置文件" class="headerlink" title="git config 配置文件"></a>git config 配置文件</h1><p>在 Mac 系统中，git 的配置文件有两处，一个是全局配置文件：~/.gitconfig ，在用户目录下；另一个是当前仓库的配置文件，在 .git 文件夹下，两种重复时，优先使用 .git 文件下的 config 文件。</p><p><img src="/git/git_20.png" alt="git"></p><p>config 文件的内容：</p><p><img src="/git/git_19.png" alt="git"></p><p>一些情况下，我们可以直接编辑 config 文件来修改 git 的配置。</p><h1 id="git-常用指令表-参数省略"><a href="#git-常用指令表-参数省略" class="headerlink" title="git 常用指令表 参数省略"></a>git 常用指令表 参数省略</h1><ul><li>本地操作<ul><li>git init</li><li>git add/rm</li><li>git commit</li><li>git squash</li><li>git rebase</li><li>git checkout</li></ul></li><li>状态查看及信息检查和比较<ul><li>git status</li><li>git log</li><li>git diff</li></ul></li><li>配置及别名<ul><li>git config</li><li>git alias</li></ul></li><li>分支操作<ul><li>git branch</li><li>git merge</li><li>git rebase</li><li>git cherry-pick</li><li>git checkout</li></ul></li><li>远程操作<ul><li>git clone</li><li>git remote</li><li>git push/pull</li><li>git fetch</li><li>git 时间旅行：分支切换、 回退历史、保存/清理现场</li><li>git reset</li><li>git revert</li><li>git stash</li><li>git checkout</li><li>git clean -fdx</li></ul></li></ul><h1 id="后记"><a href="#后记" class="headerlink" title="后记"></a>后记</h1><ul><li>个人认为这个git的笔记还是挺不错的</li><li><a href="https://yhf7.github.io/" target="_blank" rel="noopener">欢迎进入我的博客</a>：<a href="https://yhf7.github.io/" target="_blank" rel="noopener">https://yhf7.github.io/</a></li><li>如果有什么侵权的话，请及时添加小编微信以及qq也可以来告诉小编（905477376微信qq通用），谢谢！</li></ul>]]></content>
      
      
      <categories>
          
          <category> Git </category>
          
      </categories>
      
      
        <tags>
            
            <tag> Git </tag>
            
        </tags>
      
    </entry>
    
    <entry>
      <title>Vue-cli 2.0/3.0 mock数据配置</title>
      <link href="/2019/01/06/vue-cli-mock/"/>
      <url>/2019/01/06/vue-cli-mock/</url>
      
        <content type="html"><![CDATA[<link rel="stylesheet" class="aplayer-secondary-style-marker" href="/assets/css/APlayer.min.css"><script src="/assets/js/APlayer.min.js" class="aplayer-secondary-script-marker"></script><h1 id="前言"><a href="#前言" class="headerlink" title="前言"></a>前言</h1><ul><li>在我们开发的时候现在都是前后端分离的模式，后端给前端提供一个接口，由前端向后端发请求，得到数据后前端进行渲染。由于前后端开发进度的不统一，前端往往使用本地的测试数据进行数据渲染的测试。</li><li>所以我们就会用本地的json，来实现一个本地的数据测试，从而就有我们的mock数据</li><li>在我们使用 vue 开发的时候 也随着 vue-cli 脚手架的版本不断的升级，我们的配置方法也是不一样来，vue-cli3 基本自动会没有配置文件</li><li>在之前我也说过了vue-cli 编写node服务的 其实 app和express 并不用自己去引入的直接使用就可以了（我也是后面才意识到了这个问题）</li></ul><h1 id="所需工具-资料"><a href="#所需工具-资料" class="headerlink" title="所需工具/资料"></a>所需工具/资料</h1><ul><li>mac 10.13.3</li><li>vue-cli 2/3 (版本个人喜欢吧，我现在是3.0)</li><li>VS code (软件很多自己喜欢)</li><li>Chrome插件 jsonView (这个是用来在你页面看数据的时候自动对json进行格式化)</li><li>Postman 用来对api接口测试的 </li></ul><h1 id="开始"><a href="#开始" class="headerlink" title="开始"></a>开始</h1><h2 id="vue-cli2"><a href="#vue-cli2" class="headerlink" title="vue-cli2"></a>vue-cli2</h2><ul><li>在vue-cli构建的项目，我们可以借助devServer开启一个服务，然后我们可以通过路由模拟一个接口来进行测试。</li></ul><ol><li>第一步我们当然的建立一个json数据的文件（我这里自己定义好了,至于放不放在mock文件夹里面见仁见智）<br><img src="/vue-cli/vue-cli2-2.png" alt="vue-cli"></li><li>当然是配置啦 （打开build/webpack.dev.conf.js 进行配置）<ul><li>打开文件后先引入 json文件数据</li><li>找到 devServer 这个对象在里面添加 before</li><li>这里的app 是不需要我们自己去定义的直接调用就好<figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br></pre></td><td class="code"><pre><span class="line">  <span class="comment">// 引入文件</span></span><br><span class="line">  <span class="keyword">var</span> appData = <span class="built_in">require</span>(<span class="string">"../data.json"</span>);</span><br><span class="line">  <span class="keyword">var</span> seller = appData.seller;</span><br><span class="line">  <span class="keyword">var</span> goods = appData.goods;</span><br><span class="line">  <span class="keyword">var</span> ratings = appData.ratings;</span><br><span class="line"></span><br><span class="line">  <span class="comment">// 配置devServer</span></span><br><span class="line">  devServer: &#123;</span><br><span class="line">  before(app) &#123; <span class="comment">// 我直接就加在了开头的位置</span></span><br><span class="line">  <span class="comment">//  获取方法 路由 返回的数据</span></span><br><span class="line">    app.get(<span class="string">'/seller'</span>, (req, res) =&gt; &#123;</span><br><span class="line">      <span class="comment">// res.json(mockdata);</span></span><br><span class="line">      res.json(&#123;</span><br><span class="line">        errno: <span class="number">0</span>,</span><br><span class="line">        data: seller</span><br><span class="line">      &#125;);</span><br><span class="line">    &#125;);</span><br><span class="line"></span><br><span class="line">    app.get(<span class="string">'/goods'</span>, (req, res) =&gt; &#123;</span><br><span class="line">      <span class="comment">// res.json(mockdata);</span></span><br><span class="line">      res.json(&#123;</span><br><span class="line">        errno: <span class="number">0</span>,</span><br><span class="line">        data: goods</span><br><span class="line">      &#125;);</span><br><span class="line">    &#125;);</span><br><span class="line"></span><br><span class="line">    app.get(<span class="string">'/ratings'</span>, (req, res) =&gt; &#123;</span><br><span class="line">      <span class="comment">// res.json(mockdata);</span></span><br><span class="line">      res.json(&#123;</span><br><span class="line">        errno: <span class="number">0</span>,</span><br><span class="line">        data: ratings</span><br><span class="line">      &#125;);</span><br><span class="line">    &#125;);</span><br><span class="line">  &#125;,</span><br><span class="line">  clientLogLevel: <span class="string">"warning"</span>,</span><br><span class="line">  historyApiFallback: &#123;</span><br><span class="line">    rewrites: [&#123;</span><br><span class="line">      <span class="keyword">from</span>: <span class="regexp">/.*/</span>,</span><br><span class="line">      to: path.posix.join(config.dev.assetsPublicPath, <span class="string">"index.html"</span>)</span><br><span class="line">    &#125;]</span><br><span class="line">  &#125;,</span><br><span class="line">  hot: <span class="literal">true</span>,</span><br><span class="line">  contentBase: <span class="literal">false</span>, <span class="comment">// since we use CopyWebpackPlugin.</span></span><br><span class="line">  compress: <span class="literal">true</span>,</span><br><span class="line">  host: HOST || config.dev.host,</span><br><span class="line">  port: PORT || config.dev.port,</span><br><span class="line">  open: config.dev.autoOpenBrowser,</span><br><span class="line">  overlay: config.dev.errorOverlay ?</span><br><span class="line">    &#123;</span><br><span class="line">      warnings: <span class="literal">false</span>,</span><br><span class="line">      errors: <span class="literal">true</span></span><br><span class="line">    &#125; :</span><br><span class="line">    <span class="literal">false</span>,</span><br><span class="line">  publicPath: config.dev.assetsPublicPath,</span><br><span class="line">  proxy: config.dev.proxyTable,</span><br><span class="line">  quiet: <span class="literal">true</span>, <span class="comment">// necessary for FriendlyErrorsPlugin</span></span><br><span class="line">  watchOptions: &#123;</span><br><span class="line">    poll: config.dev.poll</span><br><span class="line">  &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure></li></ul></li></ol><p><img src="/vue-cli/vue-cli2-1.png" alt="vue-cli"></p><ol start="3"><li>调用</li></ol><ul><li>后面的before(app)部分就定义了可以通过向/seller发送get请求来得到我们要的json文件。</li><li>同时我们在vue文件中只要</li></ul><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">// 利用了axios</span></span><br><span class="line">axios.get(<span class="string">"/seller"</span>).then(<span class="function"><span class="params">res</span> =&gt;</span> &#123;</span><br><span class="line">        <span class="keyword">this</span>.seller = res.data;</span><br><span class="line">      &#125;).catch(<span class="function"><span class="params">error</span>=&gt;</span>&#123;</span><br><span class="line">        <span class="built_in">console</span>.log(error);</span><br><span class="line">      &#125;);</span><br></pre></td></tr></table></figure><ol start="4"><li>页面查看/postman 调试<br><img src="/vue-cli/vue-cli2-3.png" alt="vue-cli"><br><img src="/vue-cli/vue-cli2-4.png" alt="vue-cli"></li></ol><h2 id="vue-cli3"><a href="#vue-cli3" class="headerlink" title="vue-cli3"></a>vue-cli3</h2><ul><li>vue-cli3主打自动化，0配置。但是我们往往需要进行一些配置，这时我们就要创建一个配置文件。</li><li>mock 是我创建的文件夹存放data数据的</li><li>vue.config.js就是我们手动创建的配置文件，完整的配置项可以在官网看到，在这里我们着重于devServer</li><li>在这里的配置和2.0的差不多的只是简化了很多</li></ul><ol><li>配置<figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">const</span> appData = <span class="built_in">require</span>(<span class="string">'./mock/data.json'</span>);</span><br><span class="line"><span class="keyword">const</span> seller = appData.seller;</span><br><span class="line"><span class="keyword">const</span> goods = appData.goods;</span><br><span class="line"><span class="keyword">const</span> ratings = appData.ratings;</span><br><span class="line"></span><br><span class="line"><span class="built_in">module</span>.exports = &#123;</span><br><span class="line">        devServer: &#123;</span><br><span class="line">            <span class="comment">// port: 8080,</span></span><br><span class="line">            before(app) &#123;</span><br><span class="line">                app.get(<span class="string">'/seller'</span>, (req, res) =&gt; &#123;</span><br><span class="line">                    <span class="comment">// res.json(mockdata);</span></span><br><span class="line">                    res.json(&#123;</span><br><span class="line">                        errno: <span class="number">0</span>,</span><br><span class="line">                        data: seller</span><br><span class="line">                    &#125;);</span><br><span class="line">                &#125;);</span><br><span class="line"></span><br><span class="line">                app.get(<span class="string">'/goods'</span>, (req, res) =&gt; &#123;</span><br><span class="line">                    <span class="comment">// res.json(mockdata);</span></span><br><span class="line">                    res.json(&#123;</span><br><span class="line">                        errno: <span class="number">0</span>,</span><br><span class="line">                        data: goods</span><br><span class="line">                    &#125;);</span><br><span class="line">                &#125;);</span><br><span class="line"></span><br><span class="line">                app.get(<span class="string">'/ratings'</span>, (req, res) =&gt; &#123;</span><br><span class="line">                    <span class="comment">// res.json(mockdata);</span></span><br><span class="line">                    res.json(&#123;</span><br><span class="line">                        errno: <span class="number">0</span>,</span><br><span class="line">                        data: ratings</span><br><span class="line">                    &#125;);</span><br><span class="line">                &#125;);</span><br><span class="line">            &#125;</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br></pre></td></tr></table></figure></li></ol><p><img src="/vue-cli/vue-cli3-1.png" alt="vue-cli"></p><ol start="2"><li>运行就可以了会自动检查并运行</li><li>后面的效果和2.0的是一样的那我们就不再看了</li></ol><h1 id="后记"><a href="#后记" class="headerlink" title="后记"></a>后记</h1><ul><li>这个vue-cli 的配置方法是本人解决问题所记录的笔记，欢迎更多的同行大哥指导交流</li><li><a href="https://yhf7.github.io/" target="_blank" rel="noopener">欢迎进入我的博客</a>：<a href="https://yhf7.github.io/" target="_blank" rel="noopener">https://yhf7.github.io/</a></li><li>如果有什么侵权的话，请及时添加小编微信以及qq也可以来告诉小编（905477376微信qq通用），谢谢！</li></ul>]]></content>
      
      
      <categories>
          
          <category> 插件/配置 </category>
          
      </categories>
      
      
        <tags>
            
            <tag> Vue </tag>
            
        </tags>
      
    </entry>
    
    <entry>
      <title>Postman 调试Api，以及xdebug断点调试补充</title>
      <link href="/2019/01/06/Postman/"/>
      <url>/2019/01/06/Postman/</url>
      
        <content type="html"><![CDATA[<link rel="stylesheet" class="aplayer-secondary-style-marker" href="/assets/css/APlayer.min.css"><script src="/assets/js/APlayer.min.js" class="aplayer-secondary-script-marker"></script><h1 id="前言"><a href="#前言" class="headerlink" title="前言"></a>前言</h1><ul><li>无论我们作为一个后端开发，还是前端开发我们都需要用到api接口</li><li>但是作为前端呢就倾向于直接调用接口</li><li>作为后端人员不单要编写接口还是要去测试一下自己到接口是否能有或者通过经验测试相关会引起到bug，从而去编写全局异常处理到机制</li><li>那我们就来走入测试接口的世界其实还是很简单的</li><li>xdebug断点调试每一次都配置web的话太麻烦了，我们用小技巧就可以不用那么麻烦</li></ul><h1 id="所需工具-资料"><a href="#所需工具-资料" class="headerlink" title="所需工具/资料"></a>所需工具/资料</h1><ul><li>mac 10.13.3</li><li>Xampp （小编使用的是集成开发的,开启状态）</li><li>PHPStorm (<a href="https://www.jetbrains.com/phpstorm/download/download-thanks.html，没有的就去官网下载，破解什么的我就不说了如果需要直接联系我" target="_blank" rel="noopener">https://www.jetbrains.com/phpstorm/download/download-thanks.html，没有的就去官网下载，破解什么的我就不说了如果需要直接联系我</a>)</li><li>已经安装及配置好了 xdebug</li><li>ThinkPHP 5.07</li><li>postman（<a href="https://www.getpostman.com/，官网免费安装）" target="_blank" rel="noopener">https://www.getpostman.com/，官网免费安装）</a></li></ul><h1 id="开始"><a href="#开始" class="headerlink" title="开始"></a>开始</h1><h3 id="简单的说一下安装吧"><a href="#简单的说一下安装吧" class="headerlink" title="简单的说一下安装吧"></a>简单的说一下安装吧</h3><ol><li>直接进入官网 点击下载安装包，然后双击运行就可以了 <a href="https://www.getpostman.com/" target="_blank" rel="noopener">https://www.getpostman.com/</a><br><img src="/Api/post1.png" alt="api"></li><li>安装好的效果<br><img src="/Api/post2.png" alt="api"></li></ol><h3 id="测试"><a href="#测试" class="headerlink" title="测试"></a>测试</h3><ol><li>我们用的是 ThinkPHP 那我们就在路由哪里定义一个get的路由（其他的业务逻辑就自己写吧）<br><img src="/Api/post3.png" alt="api"></li><li>我们来到 postman 测试 选择相应的 获取方式和地址 点击send进行测试<br><img src="/Api/post4.png" alt="api"></li><li>这样我们就会的到来相应的结果，如果报错了就是端口有问题（以及看到错误端口）<br><img src="/Api/post6.png" alt="api"><br><img src="/Api/post5.png" alt="api"></li><li>看了一个报错一个异常处理后，我们来看看真正的获取到接口信息<br><img src="/Api/post7.png" alt="api"></li><li>传值的方法很多 ? / body这些都可以<br><img src="/Api/post8.png" alt="api"></li><li>测试就是这样的还是很简单</li></ol><h3 id="测试api小技巧"><a href="#测试api小技巧" class="headerlink" title="测试api小技巧"></a>测试api小技巧</h3><ul><li>日常我们测试的端口会比较多，一个个的过很容易忘记也很麻烦，那我们有方法可以把它收藏到一个文件里面用哪个点那个</li><li>postman为我们提供了这样的收藏的方法</li></ul><ol><li>点击收藏<br><img src="/Api/post9.png" alt="api"></li><li>选择文件和修改信息（这个不强求自己喜欢就好）<br><img src="/Api/post10.png" alt="api"></li><li>seve to 文件夹名<br><img src="/Api/post11.png" alt="api"></li><li>再下次打开的时候点击文件夹就可以看到要测试的api了<br><img src="/Api/post12.png" alt="api"></li><li>多人的话可以右上角登录</li></ol><h3 id="xdebug断点调试"><a href="#xdebug断点调试" class="headerlink" title="xdebug断点调试"></a>xdebug断点调试</h3><ul><li>每一次都配置会使得加重工作都负担以及不必要</li></ul><ol><li>设置断点，启动测试<br><img src="/Api/post13.png" alt="api"></li><li>获取测试码（每一次的启动都是不一样的，如果想多次测试那就不要断开，只是执行完就好，下一次send的时候还是会继续启用刚才的端口，如果终止了的话下一次开启需要拷贝新的端口）<br><img src="/Api/post14.png" alt="api"></li><li>断点测试<br><img src="/Api/post15.png" alt="api"><br><img src="/Api/post16.png" alt="api"></li></ol><h1 id="后记"><a href="#后记" class="headerlink" title="后记"></a>后记</h1><ul><li>Postman的api测试，以及小技巧，有什么疑问请直接添加小编微信，欢迎有更多的技术交流</li><li><a href="https://yhf7.github.io/" target="_blank" rel="noopener">欢迎进入我的博客</a>：<a href="https://yhf7.github.io/" target="_blank" rel="noopener">https://yhf7.github.io/</a></li><li>这只是本人的一些解决做法，个人笔记，如果有什么侵权的话，请及时添加小编微信以及qq也可以来告诉小编（905477376微信qq通用），谢谢！</li></ul>]]></content>
      
      
      <categories>
          
          <category> Api </category>
          
      </categories>
      
      
        <tags>
            
            <tag> Api </tag>
            
        </tags>
      
    </entry>
    
    <entry>
      <title>JavaWeb 实训项目</title>
      <link href="/2019/01/01/JavaWeb%E5%AE%9E%E8%AE%AD/"/>
      <url>/2019/01/01/JavaWeb%E5%AE%9E%E8%AE%AD/</url>
      
        <content type="html"><![CDATA[<link rel="stylesheet" class="aplayer-secondary-style-marker" href="/assets/css/APlayer.min.css"><script src="/assets/js/APlayer.min.js" class="aplayer-secondary-script-marker"></script><h1 id="前言"><a href="#前言" class="headerlink" title="前言"></a>前言</h1><ul><li>先来吐槽一下这个项目</li><li>既然是吐槽，我先从自身出发，作为一个前端为主的开发人员我看到这个界面的是我是忍不住的，哪有人做界面这么难看（不过从后端的角度出发界面也就那么回事吧能实现业务逻辑就好）</li><li>虽然是后端，也用了 java 的语言 但是这样绕来绕去的写法看得我头皮发麻，我还是喜欢简单明了的写法</li><li>不过既然是一个学习的项目那就要好好的去对待</li><li>这次只是分享项目不是写，看着可以的可以下来看看研究研究还是可以的</li></ul><h1 id="所需工具-资料"><a href="#所需工具-资料" class="headerlink" title="所需工具/资料"></a>所需工具/资料</h1><ul><li>mac 10.13.3</li><li>mysql 5.0+ 的版本（不要太高不然链接方式有问题）</li><li>Intelli IDEA 2018 （软件自己去官网下，破解不会可以私聊我）</li></ul><h1 id="项目源码"><a href="#项目源码" class="headerlink" title="项目源码"></a>项目源码</h1><ul><li>是存放在一个大的文件内可以全部都下了，使用浏览器迅雷可以下单独的哦</li><li>里面有 sql 直接导入就可以了</li><li>Github(<a href="https://github.com/YHF7/JavaWeb/tree/master/netstop" target="_blank" rel="noopener">https://github.com/YHF7/JavaWeb/tree/master/netstop</a>)</li></ul><h1 id="效果图"><a href="#效果图" class="headerlink" title="效果图"></a>效果图</h1><p><img src="/javaweb/j1.jpg" alt="javaweb"><br><img src="/javaweb/j2.jpg" alt="javaweb"><br><img src="/javaweb/j3.jpg" alt="javaweb"><br><img src="/javaweb/j4.jpg" alt="javaweb"><br><img src="/javaweb/j5.jpg" alt="javaweb"><br><img src="/javaweb/j6.jpg" alt="javaweb"></p>]]></content>
      
      
      <categories>
          
          <category> JavaWeb </category>
          
      </categories>
      
      
        <tags>
            
            <tag> JavaWeb 案例 </tag>
            
        </tags>
      
    </entry>
    
    <entry>
      <title>XAMPP 配置虚拟域名/localhost重定向</title>
      <link href="/2019/01/01/XAMPP%E9%85%8D%E7%BD%AE%E8%99%9A%E6%8B%9F%E5%9F%9F%E5%90%8D/"/>
      <url>/2019/01/01/XAMPP%E9%85%8D%E7%BD%AE%E8%99%9A%E6%8B%9F%E5%9F%9F%E5%90%8D/</url>
      
        <content type="html"><![CDATA[<link rel="stylesheet" class="aplayer-secondary-style-marker" href="/assets/css/APlayer.min.css"><script src="/assets/js/APlayer.min.js" class="aplayer-secondary-script-marker"></script><h1 id="前言"><a href="#前言" class="headerlink" title="前言"></a>前言</h1><ul><li>说到这个 xampp 这个东西配置虚拟域名，小编一肚子的气啊，搞技术这些东西还是网上搞比较容易。</li><li>相同的方法同样的配置，白天弄了一天还是不行，晚上洗完澡把东西都回执到原样结果就可以了</li><li>记录下来以后配置的时候可以用</li></ul><h1 id="坑提醒"><a href="#坑提醒" class="headerlink" title="坑提醒"></a>坑提醒</h1><ol><li>mac 下域名不可使用 test_1.cn 类似此种格式的域名，windows 下面可以，mac 下不可以，今天碰到的大坑</li><li>hosts 填写的域名和 httpd-vhosts.conf 中的域名请保持一致</li><li>ErrorLog 和 CustomLog 这两个最好就是不要修改吧，不然很容易出现权限不足就报错的，之前我也试过（导出错误一般都不回去看吧，也看不懂最好就不要动了）</li><li>网上说的添加什么这些不用去添加的，添加了反而错了（因为本来自带的就是有访问权限的）</li></ol><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><span class="line">&lt;Directory &quot;/Applications/XAMPP/xamppfiles/htdocs&quot;&gt;</span><br><span class="line">        #Options Indexes FollowSymLinks ExecCGI Includes #don&apos;t permission see list</span><br><span class="line">        Options All</span><br><span class="line">        AllowOverride All</span><br><span class="line">        Order allow,deny</span><br><span class="line">        Allow from all</span><br><span class="line">&lt;/Directory&gt;</span><br></pre></td></tr></table></figure><ol start="5"><li>在配置完后 localhost 地址也会被改变，无法访问同目录下的其他项目，所以我们要做一次重定向</li><li>配置完记得重启服务器不然看不到修改的效果然后就觉得自己弄错了</li></ol><h1 id="所需工具-资料"><a href="#所需工具-资料" class="headerlink" title="所需工具/资料"></a>所需工具/资料</h1><ul><li>mac 10.13.3</li><li>Xampp （7.0 版本基本无差）</li><li>VS code (vim 个人觉得麻烦还是用界面的快一点)</li></ul><h1 id="配置"><a href="#配置" class="headerlink" title="配置"></a>配置</h1><h2 id="配置本地域名"><a href="#配置本地域名" class="headerlink" title="配置本地域名"></a>配置本地域名</h2><ol><li>前往本地的/etx/hosts 打开 hosts 文件（我用的是 vscode，你们自己可以随意，也可以用命令直接修改）<br><img src="/tp/xp1.png" alt="xp1"></li><li>填写自己想要的域名</li></ol><ul><li>127.0.0.1 zerg.cn # added by Apache Friends XAMPP （我自己用的）</li><li>图片中黄色部分，可写可不写，最好写上吧<br><img src="/tp/xp2.png" alt="xp2"></li></ul><h2 id="配置-xampp-httpd-conf-其实就是检查开启了域名配置了没有"><a href="#配置-xampp-httpd-conf-其实就是检查开启了域名配置了没有" class="headerlink" title="配置 xampp httpd.conf(其实就是检查开启了域名配置了没有)"></a>配置 xampp httpd.conf(其实就是检查开启了域名配置了没有)</h2><ol><li>前往本地 xampp/xamppfiles/etc/httpd.conf</li><li>查找 etc/extra/httpd-vhosts.conf 看看是否打开，如果被注释了去掉#<br><img src="/tp/xp3.png" alt="xp3"></li></ol><h2 id="配置-xampp-httpd-vhosts-conf-域名的向导"><a href="#配置-xampp-httpd-vhosts-conf-域名的向导" class="headerlink" title="配置 xampp httpd-vhosts.conf (域名的向导)"></a>配置 xampp httpd-vhosts.conf (域名的向导)</h2><ol><li>前往本地 xampp/xamppfiles/etc/extra/httpd-vhosts.conf</li><li>添加域名导向(ServerName 必须要和定义的域名一致)<ul><li>*:80 表示端口</li><li>DocumentRoot 表示项目的目录</li><li>ServerName 你要使用的虚拟域名，这里和前面 host 文件中的保持一致，不然会出错</li><li>配置以上两个就可以，重启 Apache 就可以使用你配置的虚拟域名</li></ul></li></ol><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><span class="line">&lt;VirtualHost *:80&gt;</span><br><span class="line">  #  ServerAdmin webmaster@dummy-host2.example.com</span><br><span class="line">    DocumentRoot &quot;/Applications/XAMPP/xamppfiles/htdocs/zerg/public&quot;</span><br><span class="line">    ServerName zerg.cn</span><br><span class="line">    ErrorLog &quot;logs/dummy-host2.example.com-error_log&quot;</span><br><span class="line">    CustomLog &quot;logs/dummy-host2.example.com-access_log&quot; common</span><br><span class="line">&lt;/VirtualHost&gt;</span><br></pre></td></tr></table></figure><p><img src="/tp/xp4.png" alt="xp4"></p><h1 id="最终结果（本地-自定义）"><a href="#最终结果（本地-自定义）" class="headerlink" title="最终结果（本地/自定义）"></a>最终结果（本地/自定义）</h1><ol><li>域名<br><img src="/tp/xp5.png" alt="xp5"></li><li>本地<br><img src="/tp/xp6.png" alt="xp6"></li></ol><h1 id="localhost-重定向"><a href="#localhost-重定向" class="headerlink" title="localhost 重定向"></a>localhost 重定向</h1><ul><li>我们定义完后地址访问路径也会被改变，在多项目的情况下就无法查看其他的项目<br><img src="/tp/xp7.png" alt="xp7"></li><li>解决的方法就是我们给他做一个重定向，然后重启服务器<br><img src="/tp/xp8.png" alt="xp8"></li><li>这样我们就可以看到项目目录了<br><img src="/tp/xp9.png" alt="xp9"></li></ul><h1 id="后记"><a href="#后记" class="headerlink" title="后记"></a>后记</h1><ul><li>完整的 XAMPP 配置虚拟域名,遇到问题欢迎添加微信 qq 一起学习交流</li><li><a href="https://yhf7.github.io/" target="_blank" rel="noopener">欢迎进入我的博客</a>：<a href="https://yhf7.github.io/" target="_blank" rel="noopener">https://yhf7.github.io/</a></li><li>这只是本人的一些解决做法，个人笔记，如果有什么侵权的话，请及时添加小编微信以及qq也可以来告诉小编（905477376微信qq通用），谢谢！</li></ul>]]></content>
      
      
      <categories>
          
          <category> 插件/配置 </category>
          
      </categories>
      
      
        <tags>
            
            <tag> PHP </tag>
            
        </tags>
      
    </entry>
    
    <entry>
      <title>PHPStorm配置 xdebug断点调试</title>
      <link href="/2018/12/31/PHPStorm%E9%85%8D%E7%BD%AE%E6%96%AD%E7%82%B9%E8%B0%83%E8%AF%95/"/>
      <url>/2018/12/31/PHPStorm%E9%85%8D%E7%BD%AE%E6%96%AD%E7%82%B9%E8%B0%83%E8%AF%95/</url>
      
        <content type="html"><![CDATA[<link rel="stylesheet" class="aplayer-secondary-style-marker" href="/assets/css/APlayer.min.css"><script src="/assets/js/APlayer.min.js" class="aplayer-secondary-script-marker"></script><h1 id="前言"><a href="#前言" class="headerlink" title="前言"></a>前言</h1><ul><li>继上一节我们说了 ThinkPHP 安装 xdebug 这个断点调试的插件，但是没有说着么去结合我们的软件去使用这么的一个插件，按我们就来说一下把</li></ul><h1 id="所需工具-资料"><a href="#所需工具-资料" class="headerlink" title="所需工具/资料/"></a>所需工具/资料/</h1><ul><li>mac 10.13.3</li><li>Xampp （小编使用的是集成开发的,开启状态）</li><li>PHPStorm (<a href="https://www.jetbrains.com/phpstorm/download/download-thanks.html，没有的就去官网下载，破解什么的我就不说了如果需要直接联系我" target="_blank" rel="noopener">https://www.jetbrains.com/phpstorm/download/download-thanks.html，没有的就去官网下载，破解什么的我就不说了如果需要直接联系我</a>)</li><li>已经安装及配置好了 xdebug</li></ul><h1 id="开始配置（有个提醒软件在配置前不要汉化不然打不开-preferences-亲自躺坑）"><a href="#开始配置（有个提醒软件在配置前不要汉化不然打不开-preferences-亲自躺坑）" class="headerlink" title="开始配置（有个提醒软件在配置前不要汉化不然打不开 preferences,亲自躺坑）"></a>开始配置（有个提醒软件在配置前不要汉化不然打不开 preferences,亲自躺坑）</h1><ul><li>打开 phpstorm 进行配置 command+,打开 PhpStorm 的配置列表。</li></ul><h2 id="1-首先，打开-Language-amp-Framework-下的-Debug-然后如图配置，这里的端口要和-php-ini-里的-xdebug-remote-port-保持一致。"><a href="#1-首先，打开-Language-amp-Framework-下的-Debug-然后如图配置，这里的端口要和-php-ini-里的-xdebug-remote-port-保持一致。" class="headerlink" title="1. 首先，打开 Language&amp;Framework 下的 Debug,然后如图配置，这里的端口要和 php.ini 里的 xdebug.remote_port 保持一致。"></a>1. 首先，打开 Language&amp;Framework 下的 Debug,然后如图配置，这里的端口要和 php.ini 里的 xdebug.remote_port 保持一致。</h2><p><img src="/tp/ph1.png" alt="ph1"></p><h2 id="2-接下来配置-DBGp-Proxy-port-要和你的-Apache-端口一致。"><a href="#2-接下来配置-DBGp-Proxy-port-要和你的-Apache-端口一致。" class="headerlink" title="2. 接下来配置 DBGp Proxy, port 要和你的 Apache 端口一致。"></a>2. 接下来配置 DBGp Proxy, port 要和你的 Apache 端口一致。</h2><p><img src="/tp/ph2.png" alt="ph2"></p><h2 id="3-然后是-servers-的配置，没有的同学可以点击-号创建一个，Host-和-Port-根据你的实际情况来设置，我这里用的本地环境，大家也可以用测试环境。"><a href="#3-然后是-servers-的配置，没有的同学可以点击-号创建一个，Host-和-Port-根据你的实际情况来设置，我这里用的本地环境，大家也可以用测试环境。" class="headerlink" title="3. 然后是 servers 的配置，没有的同学可以点击+号创建一个，Host 和 Port 根据你的实际情况来设置，我这里用的本地环境，大家也可以用测试环境。"></a>3. 然后是 servers 的配置，没有的同学可以点击+号创建一个，Host 和 Port 根据你的实际情况来设置，我这里用的本地环境，大家也可以用测试环境。</h2><p><img src="/tp/ph3.png" alt="ph3"></p><h2 id="4-接下来在调试页创建一个-web-application"><a href="#4-接下来在调试页创建一个-web-application" class="headerlink" title="4. 接下来在调试页创建一个 web application"></a>4. 接下来在调试页创建一个 web application</h2><p><img src="/tp/ph4.png" alt="ph4"><br><img src="/tp/ph5.png" alt="ph5"></p><h2 id="5-配置断点开启调试"><a href="#5-配置断点开启调试" class="headerlink" title="5. 配置断点开启调试"></a>5. 配置断点开启调试</h2><p><img src="/tp/ph6.png" alt="ph6"></p><h2 id="6-成功开启调试"><a href="#6-成功开启调试" class="headerlink" title="6. 成功开启调试"></a>6. 成功开启调试</h2><p><img src="/tp/ph7.png" alt="ph7"></p><h1 id="后记"><a href="#后记" class="headerlink" title="后记"></a>后记</h1><ul><li>完整的 php 断点安装配置已经完成，有什么疑问请直接添加小编微信，欢迎有更多的技术交流</li><li>这只是本人的一些解决做法，如有侵权请通知删除</li></ul>]]></content>
      
      
      <categories>
          
          <category> 插件/配置 </category>
          
      </categories>
      
      
        <tags>
            
            <tag> PHP </tag>
            
        </tags>
      
    </entry>
    
    <entry>
      <title>ThinkPHP xdebug安装以及报错处理</title>
      <link href="/2018/12/30/ThinkPHP%E5%AE%89%E8%A3%85xdebug/"/>
      <url>/2018/12/30/ThinkPHP%E5%AE%89%E8%A3%85xdebug/</url>
      
        <content type="html"><![CDATA[<link rel="stylesheet" class="aplayer-secondary-style-marker" href="/assets/css/APlayer.min.css"><script src="/assets/js/APlayer.min.js" class="aplayer-secondary-script-marker"></script><h1 id="前言"><a href="#前言" class="headerlink" title="前言"></a>前言</h1><ul><li>在我们开发的过程中我们肯定是会有一定的错误，当我们去查错的时候有很多的方法</li><li>可以使用断点的方法运行查看错误，也可也使用输出来一点点缩小范围</li><li>但是在 ThinkPHP 中并不可以直接就插入断点来查错，所以很多的 php 工程师觉得麻烦就不去安装使用 xdebug 的插件</li><li>在这里我们就一起来安装以及配置</li></ul><h1 id="所需工具-资料"><a href="#所需工具-资料" class="headerlink" title="所需工具/资料"></a>所需工具/资料</h1><ul><li>mac 10.13.3 （自带 php 所以会出现一定的问题）</li><li>Xampp （小编使用的是集成开发的）</li><li>ThinkPHP 5.0.7（版本自己喜欢都可以的）</li><li>VS code 用来改文件</li><li><a href="https://xdebug.org/wizard.php" target="_blank" rel="noopener">https://xdebug.org/wizard.php</a> xdebug 下载网址</li></ul><h1 id="开启-xdebug-之旅"><a href="#开启-xdebug-之旅" class="headerlink" title="开启 xdebug 之旅"></a>开启 xdebug 之旅</h1><h2 id="1-开启服务"><a href="#1-开启服务" class="headerlink" title="1. 开启服务"></a>1. 开启服务</h2><ul><li>开启 xampp</li><li>在 ThinkPHP 中 public/下新建 info.php 在里面加 phpinfo();<br><img src="/tp/tp1.png" alt="tp1"></li><li><a href="http://localhost/zerg/public/info.php" target="_blank" rel="noopener">http://localhost/zerg/public/info.php</a> （zerg 是我项目名，查看 phpversion）<br><img src="/tp/tp3.png" alt="tp3"></li><li>可以搜索 xdebug 看看有没有，php 是不自带的如果不是配置来都是没有的</li></ul><h2 id="2-下载-xdebug"><a href="#2-下载-xdebug" class="headerlink" title="2. 下载 xdebug"></a>2. 下载 xdebug</h2><ul><li>打开官网 <a href="https://xdebug.org/wizard.php" target="_blank" rel="noopener">https://xdebug.org/wizard.php</a></li><li>进入来官网直接就是下图这样的下载地方了<br><img src="/tp/tp2.png" alt="tp2"></li><li>回到 info.php 的页面右键查看源代码 （进入了界面直接 全选复制）<br><img src="/tp/tp4.png" alt="tp4"></li><li>把复制的代码放到刚才的框内，并点击 analyse my phpinfo()的那个按钮 就会自动的监测你的 php 版本需要用什么版本的 sdebug<br><img src="/tp/tp5.png" alt="tp5"></li><li>就会得到下面图所显示的页面，点击红色框的部分下载包<br><img src="/tp/tp6.png" alt="tp6"></li></ul><h2 id="3-配置-xdebug"><a href="#3-配置-xdebug" class="headerlink" title="3. 配置 xdebug"></a>3. 配置 xdebug</h2><ul><li>当我们下载好了后找到自己下载的位置 会有 xdebug-2.6.1.tgz 的压缩包</li><li>然后我们就跟着他给的步骤做，是什么步骤看上面下包的图</li><li>第一步：解压包 在终端进入到 文件的目录 sudo tar -xvzf xdebug-2.6.1.tgz 就可以解压</li><li>第二步：进入文件目录 cd xdebug-2.6.1</li><li>第三步：执行 phpize （一般没有安装 brew 和 autoconf 的都会出现下面的错误）<br><img src="/tp/tp8.png" alt="tp8"> - 有错我们只好修复这个错误（是因为没有安装 autoconf 引发的）那我们就安装一下 - 安装 autoconf 需要用 brew 所以先安装 brew - ruby -e “\$(curl -fsSL <a href="https://raw.githubusercontent.com/Homebrew/install/master/install)&quot;" target="_blank" rel="noopener">https://raw.githubusercontent.com/Homebrew/install/master/install)&quot;</a> -（使用上面的命令就可以安装了，如果不行就去<a href="http://brew.sh/官网看看吧）" target="_blank" rel="noopener">http://brew.sh/官网看看吧）</a></li><li>安装好我们安装 autoconf - brew install autoconf</li><li>第四步：继续执行 phpize<ul><li>一般都是直接 sudo phpize （mac 系统这样做肯定报错如图，为什么呢因为多端 php，系统自带一个 xampp 带一个 brew 也会补一个,而且系统默认是抓取本地的 php 所以无论你着么配最后都没有效果）<br><img src="/tp/tp7.png" alt="tp7"></li><li>面对这个坑我们不怕直接全路径安装就好</li><li>sudo /Applications/XAMPP/xamppfiles/bin/phpize 这样就可以了</li></ul></li><li>第五步：执行 confoigure 吃了上一次的亏这一次不可以再吃了<ul><li>sudo ./configure –with-php-config=/Applications/XAMPP/xamppfiles/bin/php-config</li></ul></li><li>第六步：这里按照图片的操作也可以，当然我是直接复制粘贴的，因为我被命令行伤透了心，找到当前目录下的 modules 文件夹，找到该文件夹下的 xdebug.so(想说爱你不容易啊)，狠狠的复制。</li><li>第七步：把复制的粘贴（如果按照图片的做跳过这一步）<ul><li>/Applications/XAMPP/xamppfiles/lib/php/extensions/no-debug-non-zts-20151012/xdebug.so</li></ul></li><li><p>xdebug.so 探寻结束，开始配置 php.ini</p><ul><li><p>到/Applications/XAMPP/xamppfiles/etc/php.ini 目录中找到 php.ini 然后打开，在最后面添加如下</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br></pre></td><td class="code"><pre><span class="line">[xdebug]</span><br><span class="line">zend_extension = /Applications/XAMPP/xamppfiles/lib/php/extensions/no-debug-non-zts-20151012/xdebug.so</span><br><span class="line">xdebug.remote_autostart=on</span><br><span class="line">xdebug.remote_enable=on</span><br><span class="line">xdebug.remote_mode=&quot;req&quot;</span><br><span class="line">xdebug.remote_host=localhost</span><br><span class="line">xdebug.remote_port=9000</span><br><span class="line">xdebug.remote_handler=&quot;dbgp&quot;</span><br><span class="line">xdebug.idekey=&quot;PhpStorm&quot;</span><br><span class="line">xdebug.profiler_enable = Off</span><br></pre></td></tr></table></figure></li><li><p>最后保存，然后重启 Apache 服务，重新输出 phpinfo()信息，然后搜索一下，发现如下内容即告成功。</p></li></ul></li></ul><h2 id="4-最后效果"><a href="#4-最后效果" class="headerlink" title="4. 最后效果"></a>4. 最后效果</h2><p><img src="/tp/tp9.png" alt="tp"></p><h1 id="后记"><a href="#后记" class="headerlink" title="后记"></a>后记</h1><ul><li>这只是本人的一些解决做法，如有侵权请通知删除</li></ul>]]></content>
      
      
      <categories>
          
          <category> 插件/配置 </category>
          
      </categories>
      
      
        <tags>
            
            <tag> PHP </tag>
            
        </tags>
      
    </entry>
    
    <entry>
      <title>移动web期末大作业</title>
      <link href="/2018/12/11/%E7%A7%BB%E5%8A%A8web%E6%9C%9F%E6%9C%AB/"/>
      <url>/2018/12/11/%E7%A7%BB%E5%8A%A8web%E6%9C%9F%E6%9C%AB/</url>
      
        <content type="html"><![CDATA[<link rel="stylesheet" class="aplayer-secondary-style-marker" href="/assets/css/APlayer.min.css"><script src="/assets/js/APlayer.min.js" class="aplayer-secondary-script-marker"></script><h2 id="前言"><a href="#前言" class="headerlink" title="前言"></a>前言</h2><ul><li>这是一个移动web的环保登陆页设计</li><li>是我们学校的期末考试大作业来的</li><li>主要是用来检测，css，表单的使用</li></ul><h2 id="技术-插件"><a href="#技术-插件" class="headerlink" title="技术/插件"></a>技术/插件</h2><ul><li>js<ul><li>jquery.min.js</li><li>bootstrap.min.js</li></ul></li><li>css<ul><li>animate.css  初始化页面</li><li>bootstrap.min.css </li><li>font-awesome 字体处理</li><li>style.css 布局处理</li></ul></li></ul><h2 id="项目地址传送"><a href="#项目地址传送" class="headerlink" title="项目地址传送"></a><a href="https://github.com/YHF7/HtmlCss/tree/master/%E7%A7%BB%E5%8A%A8web%E6%9C%9F%E6%9C%AB%E5%A4%A7%E4%BD%9C%E4%B8%9A" target="_blank" rel="noopener">项目地址传送</a></h2><h2 id="效果图"><a href="#效果图" class="headerlink" title="效果图"></a>效果图</h2><p><img src="/web/login.jpg" alt="登录"></p>]]></content>
      
      
      <categories>
          
          <category> Css </category>
          
      </categories>
      
      
        <tags>
            
            <tag> Css笔记/案例 </tag>
            
        </tags>
      
    </entry>
    
    <entry>
      <title>node 后端服务器开发插件</title>
      <link href="/2018/12/07/node%E5%90%8E%E7%AB%AF%E5%BC%80%E5%8F%91%E6%8F%92%E4%BB%B6/"/>
      <url>/2018/12/07/node%E5%90%8E%E7%AB%AF%E5%BC%80%E5%8F%91%E6%8F%92%E4%BB%B6/</url>
      
        <content type="html"><![CDATA[<link rel="stylesheet" class="aplayer-secondary-style-marker" href="/assets/css/APlayer.min.css"><script src="/assets/js/APlayer.min.js" class="aplayer-secondary-script-marker"></script><h2 id="插件目录-插件官网"><a href="#插件目录-插件官网" class="headerlink" title="插件目录 插件官网"></a>插件目录 <a href="https://www.npmjs.com/" target="_blank" rel="noopener">插件官网</a></h2><ul><li>ES2015（es6）</li><li>express node 的前端模板</li><li>nodemon node 改变监听</li><li>config-lite 1.5.0 文件的遍历</li><li>chalk 粉笔插件变色</li><li>mongoose mongodb 使用插件</li><li>body-parser 配置解析表单 POST 请求体插件</li></ul><h2 id="ES2015"><a href="#ES2015" class="headerlink" title="ES2015"></a>ES2015</h2><ul><li>都是用来处理 es6 的兼容的直接放 json 文件里面安装就好想装新版本也可以一个一个装</li></ul><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br></pre></td><td class="code"><pre><span class="line"><span class="string">"babel"</span>: <span class="string">"^6.23.0"</span>,</span><br><span class="line"><span class="string">"babel-cli"</span>: <span class="string">"^6.26.0"</span>,</span><br><span class="line"><span class="string">"babel-core"</span>: <span class="string">"^6.24.0"</span>,</span><br><span class="line"><span class="string">"babel-preset-es2015"</span>: <span class="string">"^6.24.1"</span>,</span><br><span class="line"><span class="string">"babel-preset-stage-3"</span>: <span class="string">"^6.22.1"</span>,</span><br><span class="line"><span class="string">"babel-register"</span>: <span class="string">"^6.24.0"</span>,</span><br><span class="line"><span class="string">"babel-plugin-transform-async-to-generator"</span>: <span class="string">"^6.24.1"</span>,</span><br><span class="line"><span class="string">"babel-plugin-transform-es2015-classes"</span>: <span class="string">"^6.24.1"</span>,</span><br><span class="line"><span class="string">"babel-plugin-transform-es2015-modules-commonjs"</span>: <span class="string">"^6.24.1"</span>,</span><br><span class="line"><span class="string">"babel-plugin-transform-export-extensions"</span>: <span class="string">"^6.22.0"</span></span><br></pre></td></tr></table></figure><ul><li>.babelrc 配置 es6</li></ul><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><span class="line">&#123;</span><br><span class="line">    <span class="string">"presets"</span>: [<span class="string">"stage-3"</span>],</span><br><span class="line">    <span class="string">"plugins"</span>: [</span><br><span class="line">        <span class="string">"transform-async-to-generator"</span>,</span><br><span class="line">        <span class="string">"transform-es2015-modules-commonjs"</span>,</span><br><span class="line">        <span class="string">"transform-export-extensions"</span></span><br><span class="line">    ]</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><ul><li>index.js （默认启动文件）</li></ul><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line"><span class="built_in">require</span>(<span class="string">"babel-core/register"</span>);</span><br><span class="line"><span class="built_in">require</span>(<span class="string">"./app.js"</span>); <span class="comment">// 被调用的入口文件</span></span><br></pre></td></tr></table></figure><h2 id="express"><a href="#express" class="headerlink" title="express"></a>express</h2><ul><li>node 的前端开发模板</li></ul><ol><li>安装</li></ol><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">$ sudo cnpm i express -S</span><br></pre></td></tr></table></figure><ol start="2"><li>使用</li></ol><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">import</span> Express <span class="keyword">from</span> <span class="string">"express"</span>; <span class="comment">//引入</span></span><br><span class="line"><span class="keyword">const</span> app = Express(); <span class="comment">//定义</span></span><br><span class="line"></span><br><span class="line">app.all(<span class="string">"/*"</span>, (req, res, next) =&gt; &#123;</span><br><span class="line">  <span class="comment">//设置跨域请求报文头</span></span><br><span class="line">  <span class="comment">//设置允许跨域响应报文头</span></span><br><span class="line">  <span class="comment">//设置跨域</span></span><br><span class="line">  <span class="comment">// 启用 Node 服务器端的 cors 跨域</span></span><br><span class="line">  res.header(<span class="string">"Access-Control-Allow-Origin"</span>, <span class="string">"*"</span>);</span><br><span class="line">  res.header(<span class="string">"Access-Control-Allow-Headers"</span>, <span class="string">"X-Requested-With"</span>);</span><br><span class="line">  res.header(<span class="string">"Access-Control-Allow-Methods"</span>, <span class="string">"*"</span>);</span><br><span class="line"></span><br><span class="line">  res.setHeader(<span class="string">"Content-Type"</span>, <span class="string">"application/json;charset=utf-8"</span>);</span><br><span class="line">  next();</span><br><span class="line">&#125;);</span><br><span class="line"></span><br><span class="line">app.get(<span class="string">"/"</span>, (req, res) =&gt; &#123;</span><br><span class="line">  <span class="comment">// 路由判断</span></span><br><span class="line">  res.send(<span class="string">`hello world!`</span>);</span><br><span class="line">&#125;);</span><br><span class="line"></span><br><span class="line">app.listen(<span class="number">5000</span>, () =&gt; &#123;</span><br><span class="line">  <span class="comment">//开启服务</span></span><br><span class="line">  <span class="built_in">console</span>.log(<span class="string">"server running http://localhost:"</span> + <span class="number">5000</span>);</span><br><span class="line">&#125;);</span><br></pre></td></tr></table></figure><h2 id="nodemon"><a href="#nodemon" class="headerlink" title="nodemon"></a>nodemon</h2><ul><li>nodemon 是 node 的改变监听 ，只要改变就会重新编译，就不需要每次改变都手动改变 （也可以作为全局安装）</li></ul><ol><li>安装</li></ol><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">$ sudo cnpm i nodemon -S 本地安装</span><br><span class="line">$ sudo cnpm i nodemon -g 全局安装</span><br></pre></td></tr></table></figure><ol start="2"><li>使用</li></ol><ul><li><p>本地安装使用 在 package.json 定义</p><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line"><span class="string">"scripts"</span>: &#123;</span><br><span class="line">    <span class="string">"start"</span>: <span class="string">"nodemon index.js"</span></span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><ul><li>终端 sudo npm run start 调用</li></ul></li><li>全局方法 直接在终端 sudo nodemon index.js</li></ul><h2 id="config-lite-1-5-0"><a href="#config-lite-1-5-0" class="headerlink" title="config-lite 1.5.0"></a>config-lite 1.5.0</h2><ul><li>这是一个用了遍历查找文件的插件，其实简单的来说就是用来定义一些公共的参数，调用的时候方便一点</li></ul><ol><li>安装</li></ol><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">$ sudo cnpm i config-lite@1.5 -S</span><br></pre></td></tr></table></figure><ol start="2"><li><p>配置</p><ul><li>默认是查找 config 下的 default.js 文件（为了用起来方便我们就不改变直接定义）</li><li>在项目目录新建 config 文件夹 在里面建立 default.js 文件 然后定义一些公共的元素或者是可变的元素</li></ul><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">"use strict"</span>;</span><br><span class="line"></span><br><span class="line"><span class="built_in">module</span>.exports = &#123;</span><br><span class="line">  port: <span class="number">5000</span>,</span><br><span class="line">  url: <span class="string">"mongodb://localhost/myelm"</span>,</span><br><span class="line">  session: &#123;</span><br><span class="line">    name: <span class="string">"SID"</span>,</span><br><span class="line">    secret: <span class="string">"SID"</span>,</span><br><span class="line">    cookie: &#123;</span><br><span class="line">      httpOnly: <span class="literal">true</span>,</span><br><span class="line">      secure: <span class="literal">false</span>,</span><br><span class="line">      maxAge: <span class="number">365</span> * <span class="number">24</span> * <span class="number">60</span> * <span class="number">60</span> * <span class="number">1000</span></span><br><span class="line">    &#125;</span><br><span class="line">  &#125;</span><br><span class="line">&#125;;</span><br></pre></td></tr></table></figure></li><li><p>调用</p></li></ol><ul><li>调用就比较简单</li></ul><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">import</span> config <span class="keyword">from</span> <span class="string">"config-lite"</span>; <span class="comment">//引入</span></span><br><span class="line"></span><br><span class="line">config.url; <span class="comment">//好像用对象那样使用，不过要你返回的是个对象才可以</span></span><br></pre></td></tr></table></figure><h2 id="chalk"><a href="#chalk" class="headerlink" title="chalk"></a>chalk</h2><ul><li>这个插件主要是用了改变输出的颜色，在不同的情况定义输出的字体颜色</li></ul><ol><li>安装</li></ol><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">$ sudo cnpm i chalk -S</span><br></pre></td></tr></table></figure><ol start="2"><li>使用</li></ol><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">import</span> chalk <span class="keyword">from</span> <span class="string">"chalk"</span>; <span class="comment">//引入</span></span><br><span class="line">chalk.yellow(<span class="string">"连接数据库成功"</span>); <span class="comment">// 直接 chalk.颜色(变色内容)</span></span><br></pre></td></tr></table></figure><h2 id="mongoose-官方"><a href="#mongoose-官方" class="headerlink" title="mongoose 官方"></a>mongoose <a href="https://www.npmjs.com/package/mongoose" target="_blank" rel="noopener">官方</a></h2><ul><li>数据库就自己装这里不说，直接安装全局的</li><li>这是一个 mongodb 数据库的开发插件</li></ul><ol><li>安装</li></ol><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">$ sudo cnpm i mongoose -S</span><br></pre></td></tr></table></figure><ol start="2"><li>使用</li></ol><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">import</span> mongoose <span class="keyword">from</span> <span class="string">"mongoose"</span>; <span class="comment">//引入</span></span><br><span class="line"></span><br><span class="line">mongoose.connect(</span><br><span class="line">  <span class="string">"mongodb://localhost/myelm"</span>,</span><br><span class="line">  &#123;</span><br><span class="line">    <span class="comment">//连接数据库</span></span><br><span class="line">    useNewUrlParser: <span class="literal">true</span></span><br><span class="line">  &#125;</span><br><span class="line">);</span><br><span class="line"></span><br><span class="line"><span class="keyword">const</span> db = mongoose.connection;</span><br><span class="line"></span><br><span class="line">db.once(<span class="string">"open"</span>, () =&gt; &#123;</span><br><span class="line">  <span class="built_in">console</span>.log(chalk.yellow(<span class="string">"连接数据库成功"</span>));</span><br><span class="line">&#125;);</span><br><span class="line"></span><br><span class="line">db.on(<span class="string">"error"</span>, <span class="function"><span class="keyword">function</span>(<span class="params">error</span>) </span>&#123;</span><br><span class="line">  <span class="built_in">console</span>.error(</span><br><span class="line">    chalk.red(<span class="string">"Error in MongoDb connection: "</span> + error + <span class="string">" 数据库有问题"</span>)</span><br><span class="line">  );</span><br><span class="line">  mongoose.disconnect();</span><br><span class="line">&#125;);</span><br><span class="line"></span><br><span class="line">db.on(<span class="string">"close"</span>, <span class="function"><span class="keyword">function</span>(<span class="params"></span>) </span>&#123;</span><br><span class="line">  <span class="built_in">console</span>.log(chalk.red(<span class="string">"数据库断开，重新连接数据库"</span>));</span><br><span class="line">  mongoose.connect(</span><br><span class="line">    config.url,</span><br><span class="line">    &#123;</span><br><span class="line">      server: &#123;</span><br><span class="line">        auto_reconnect: <span class="literal">true</span></span><br><span class="line">      &#125;</span><br><span class="line">    &#125;</span><br><span class="line">  );</span><br><span class="line">&#125;);</span><br><span class="line"></span><br><span class="line"><span class="keyword">const</span> Schema = mongoose.Schema;</span><br><span class="line"><span class="keyword">const</span> ObjectId = Schema.ObjectId;</span><br><span class="line"></span><br><span class="line"><span class="keyword">const</span> BlogPost = <span class="keyword">new</span> Schema(&#123;</span><br><span class="line">  <span class="comment">//定义数据库</span></span><br><span class="line">  author: ObjectId,</span><br><span class="line">  title: <span class="built_in">String</span>,</span><br><span class="line">  body: <span class="built_in">String</span>,</span><br><span class="line">  date: <span class="built_in">Date</span></span><br><span class="line">&#125;);</span><br></pre></td></tr></table></figure><h2 id="body-parser"><a href="#body-parser" class="headerlink" title="body-parser"></a>body-parser</h2><ul><li>这个是解析表单 post 请求体的插件</li></ul><ol><li>安装</li></ol><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">$ sudo cnpm i body-parser -S</span><br></pre></td></tr></table></figure><ol start="2"><li>配置</li></ol><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">// 在主页定义 一定要在路由判断之前才能生效</span></span><br><span class="line"><span class="comment">// 配置解析表单 POST 请求体插件 （注意：一定要在 app.use(router) 之前）</span></span><br><span class="line"><span class="comment">// parse application/x-www-form-urlencoded 解析application</span></span><br><span class="line">app.use(</span><br><span class="line">  bodyParser.urlencoded(&#123;</span><br><span class="line">    extended: <span class="literal">false</span></span><br><span class="line">  &#125;)</span><br><span class="line">);</span><br><span class="line"><span class="comment">// parse application/json 解析</span></span><br><span class="line">app.use(bodyParser.json());</span><br></pre></td></tr></table></figure><ol start="3"><li>调用</li></ol><ul><li>调用就很简单不用引入，传过来的数据解析在 req.body 里面</li></ul><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line">app.post(<span class="string">"/api/ts"</span>, (req, res) =&gt; &#123;</span><br><span class="line">  <span class="built_in">console</span>.log(req.body);</span><br><span class="line">&#125;);</span><br></pre></td></tr></table></figure>]]></content>
      
      
      <categories>
          
          <category> 插件/配置 </category>
          
      </categories>
      
      
        <tags>
            
            <tag> npm </tag>
            
        </tags>
      
    </entry>
    
    <entry>
      <title>YHF 管理系统（javaweb）</title>
      <link href="/2018/12/01/JavaWeb1/"/>
      <url>/2018/12/01/JavaWeb1/</url>
      
        <content type="html"><![CDATA[<link rel="stylesheet" class="aplayer-secondary-style-marker" href="/assets/css/APlayer.min.css"><script src="/assets/js/APlayer.min.js" class="aplayer-secondary-script-marker"></script><h1 id="前言"><a href="#前言" class="headerlink" title="前言"></a>前言</h1><ol><li>这是一个期末考试项目</li><li>老师出的一个题目 要求有 数据库、css、js、等特效 至少 3 个页面以上</li><li>所有做了这么等一个小项目</li></ol><h1 id="项目所用技术"><a href="#项目所用技术" class="headerlink" title="项目所用技术"></a>项目所用技术</h1><ul><li>页面<ul><li>架构主要都是 javaweb （主页是 bootcss 的页面）</li><li>部分用到了 js</li></ul></li><li>数据库<ul><li>mysql</li></ul></li><li>插件<ul><li>js<ul><li>jq</li><li>echarts 图表插件</li></ul></li><li>css<ul><li>bootcss</li></ul></li></ul></li></ul><h1 id="项目源码地址"><a href="#项目源码地址" class="headerlink" title="项目源码地址"></a><a href="https://github.com/YHF7/JavaWeb/tree/master/qmxmyhf" target="_blank" rel="noopener">项目源码地址</a></h1><h1 id="项目效果图"><a href="#项目效果图" class="headerlink" title="项目效果图"></a>项目效果图</h1><h3 id="登录页"><a href="#登录页" class="headerlink" title="登录页"></a>登录页</h3><p><img src="/qmxmyhf/q1.png" alt="登录"></p><h3 id="注册页"><a href="#注册页" class="headerlink" title="注册页"></a>注册页</h3><p><img src="/qmxmyhf/q2.png" alt="登录"></p><h3 id="主页"><a href="#主页" class="headerlink" title="主页"></a>主页</h3><p><img src="/qmxmyhf/q3.png" alt="登录"></p><h3 id="用户图表页"><a href="#用户图表页" class="headerlink" title="用户图表页"></a>用户图表页</h3><p><img src="/qmxmyhf/q4.png" alt="登录"></p><h3 id="修改用户信息页"><a href="#修改用户信息页" class="headerlink" title="修改用户信息页"></a>修改用户信息页</h3><p><img src="/qmxmyhf/q5.png" alt="登录"></p><h3 id="数据库结构"><a href="#数据库结构" class="headerlink" title="数据库结构"></a>数据库结构</h3><p><img src="/qmxmyhf/qmxmyhf1.png" alt="登录"></p>]]></content>
      
      
      <categories>
          
          <category> JavaWeb </category>
          
      </categories>
      
      
        <tags>
            
            <tag> JavaWeb 案例 </tag>
            
        </tags>
      
    </entry>
    
    <entry>
      <title>mpvue搭建初始小程序</title>
      <link href="/2018/11/24/%E6%90%AD%E5%BB%BA%E5%B0%8F%E7%A8%8B%E5%BA%8F/"/>
      <url>/2018/11/24/%E6%90%AD%E5%BB%BA%E5%B0%8F%E7%A8%8B%E5%BA%8F/</url>
      
        <content type="html"><![CDATA[<link rel="stylesheet" class="aplayer-secondary-style-marker" href="/assets/css/APlayer.min.css"><script src="/assets/js/APlayer.min.js" class="aplayer-secondary-script-marker"></script><h1 id="前言"><a href="#前言" class="headerlink" title="前言"></a>前言</h1><p>前段时间，美团开源了 mpvue 这个项目，使得我们又多了一种用来开发小程序的框架选项。由于 mpvue 框架是完全基于 Vue 框架的（重写了其 runtime 和 compiler），因此在用法上面是高度和 Vue 一致的（某些功能由于受限于小程序环境本身的原因而不能使用），这给使用过 Vue 开发 Web 应用的前端开发者提供了极低的切换门槛来开发小程序。</p><p>没学过 vue 的想去学一下先</p><h1 id="开始"><a href="#开始" class="headerlink" title="开始"></a>开始</h1><h2 id="1-开发环境"><a href="#1-开发环境" class="headerlink" title="1. 开发环境"></a>1. 开发环境</h2><ul><li>系统自己喜欢 （本人 OS 10.0）</li><li>node.js npm (最好切换为国内镜像 npm set registry <a href="https://registry.npm.taobao.org/" target="_blank" rel="noopener">https://registry.npm.taobao.org/</a>)</li><li>vue-cli （npm install vue-cli -g）</li><li>微信开发者工具 <a href="https://developers.weixin.qq.com/miniprogram/dev/devtools/download.html" target="_blank" rel="noopener">https://developers.weixin.qq.com/miniprogram/dev/devtools/download.html</a></li><li>开发软件 vscode （个人喜欢）</li><li>软件内部插件 Vetur （vue语法高亮）</li></ul><h2 id="2-架构第一个-mpvue-的小程序"><a href="#2-架构第一个-mpvue-的小程序" class="headerlink" title="2. 架构第一个 mpvue 的小程序"></a>2. 架构第一个 mpvue 的小程序</h2><ul><li>vue init mpvue/mpvue-quickstart firstapp  （在命令行运行，firstapp项目名自己定）</li><li><p>然后就会看到这个 （如果自己代码不是很规范的话eslint那里请选n）</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br></pre></td><td class="code"><pre><span class="line">? Project name firstapp</span><br><span class="line">? wxmp appid touristappid</span><br><span class="line">? Project description A Mpvue project</span><br><span class="line">? Author kevinzhang 邮箱</span><br><span class="line">? Vue build runtime</span><br><span class="line">? Use Vuex? Yes</span><br><span class="line">? Use ESLint to lint your code? Yes</span><br><span class="line">? Pick an ESLint preset Standard</span><br><span class="line">? 小程序测试，敬请关注最新微信开发者工具的“测试报告”功能</span><br><span class="line"></span><br><span class="line">vue-cli · Generated <span class="string">"firstapp"</span>.</span><br><span class="line"></span><br><span class="line">To get started:</span><br><span class="line"></span><br><span class="line">    <span class="built_in">cd</span> firstapp</span><br><span class="line">    npm install</span><br><span class="line">    npm run dev</span><br><span class="line"></span><br><span class="line">Documentation can be found at http://mpvue.com</span><br></pre></td></tr></table></figure></li><li><p>安装好后</p><ul><li>cd firstapp</li><li>npm install (这一步是安装要用的插件和依赖)</li></ul></li><li>执行命令让这个代码运行起来，进入开发模式<ul><li>npm run dev</li></ul></li><li>成功运行后，这个项目代码就进入开发模式，一旦有源代码发生修改，就会触发自动编译。因为mpvue使用的是Vue + HTML Web的开发方式开发小程序，它最终还是需要被转换成小程序的代码才可以在小程序环境运行，所以这里的自动编译的目的就是要把Web代码编译成小程序代码。编译后的代码会在dist目录下：<br><img src="/xcx/w3.png" alt="编译成功"></li></ul><h2 id="3-部署到微信开发者工具"><a href="#3-部署到微信开发者工具" class="headerlink" title="3. 部署到微信开发者工具"></a>3. 部署到微信开发者工具</h2><ul><li>打开微信开发者工具，选择新增项目<br><img src="/xcx/w1.png" alt="新增"></li><li>项目目录选择指向firstapp目录：<br><img src="/xcx/w4.png" alt="新增"></li><li>点击“确定”按钮，进入小程序开发主界面，在左边的小程序模拟器中就能看到firstapp小程序的执行结果了：<br><img src="/xcx/w5.png" alt="新增"></li><li>【提醒】记得在微信开发者工具的菜单》设置 》编辑设置 中，将“保存时自动编译小程序”勾选上，这样当mpvue的代码自动编译完成后，模拟器才会自动刷新界面。<br><img src="/xcx/w2.png" alt="新增"></li></ul><h1 id="小结"><a href="#小结" class="headerlink" title="小结"></a>小结</h1><ul><li>本文简要介绍使用 mpvue 开发小程序的前期准备，后面还会继续学习再介绍其他功能</li></ul>]]></content>
      
      
      <categories>
          
          <category> 小程序 </category>
          
      </categories>
      
      
        <tags>
            
            <tag> 小程序 </tag>
            
        </tags>
      
    </entry>
    
    <entry>
      <title>部署线上node/vue项目</title>
      <link href="/2018/11/23/%E9%83%A8%E7%BD%B2%E7%BA%BF%E4%B8%8Anode/"/>
      <url>/2018/11/23/%E9%83%A8%E7%BD%B2%E7%BA%BF%E4%B8%8Anode/</url>
      
        <content type="html"><![CDATA[<link rel="stylesheet" class="aplayer-secondary-style-marker" href="/assets/css/APlayer.min.css"><script src="/assets/js/APlayer.min.js" class="aplayer-secondary-script-marker"></script><ul><li>当你写了node项目的时候就想抛到网上去</li><li>前面有教 外网映射 也是一个好方法</li><li>但是用起来开启服务就好，但是关闭主机就不能用了</li><li>那我们就来使用网上的服务器</li></ul><h2 id="服务器"><a href="#服务器" class="headerlink" title="服务器"></a>服务器</h2><ol><li>阿里云、腾讯云 复杂贵买不起</li><li><a href="http://www.sinacloud.com/" target="_blank" rel="noopener">新浪云</a> （这个还不错不过也是要钱还是挺方便，服务器与数据库基本齐全）</li><li><a href="https://devcenter.heroku.com/" target="_blank" rel="noopener">Heroku</a> 不过要vpn (支持的语言多但是没有mysql数据库)</li><li><a href="https://www.openshift.com/trial/" target="_blank" rel="noopener">openshift</a> 也是外网服务器不过不用vpn （没用过，不过好像是试用也是要收费）</li></ol><h2 id="部署"><a href="#部署" class="headerlink" title="部署"></a>部署</h2><h3 id="检查配置"><a href="#检查配置" class="headerlink" title="检查配置"></a>检查配置</h3><ol><li>node</li><li>git</li><li>npm</li></ol><h3 id="Heroku"><a href="#Heroku" class="headerlink" title="Heroku"></a>Heroku</h3><ol><li>上到官网 登录/注册<ul><li><a href="https://devcenter.heroku.com/" target="_blank" rel="noopener">https://devcenter.heroku.com/</a></li></ul></li><li>选择自己要的语言 （回跳到开发文档）<ul><li>我选的是node</li></ul></li><li>选择安装homebrew cli<ul><li>我是os系统 我选的是苹果 （下载后安装）</li></ul></li><li>登录 homebrew<ul><li>终端 heroku login (苹果加 sudo)</li></ul></li><li>在一个你想放项目的地方新建项目文件夹 <ul><li>用终端进入到文件夹</li><li>执行 git clone <a href="https://github.com/heroku/node-js-getting-started.git" target="_blank" rel="noopener">https://github.com/heroku/node-js-getting-started.git</a> （这个命令是用来克隆应用源代码的）</li><li>克隆好 cd node-js-getting-started 进入文件夹</li></ul></li><li>创建应用程序 （虽然下载了但是是空的架构要自己安装）<ul><li>heroku create （生成项目的时候项目名是随机生成的）</li></ul></li><li>部署到 网上 （前面已经登录了现在直接上传就好）<ul><li>刚创的应用直接push就好</li><li>sudo git push heroku master</li><li>上传完 heroku open查看</li></ul></li><li><p>有个绿色页面就是成功了</p></li><li><p>好前面都是说配置现在来说部署</p><ul><li>1.把vue项目打包出来 </li><li>2.把打包好的html文件拷贝到 node-js-getting-started/views/pages/<ul><li>我们考到这里面然后把里面index.ejs文件删掉 </li><li>把我们的文件改为ejs</li></ul></li><li>3.打包出来的static 直接放到public里面就好</li></ul></li><li>部署好我们就上传<ul><li>git add .</li><li>git commit -m “”</li><li>git push heroku master</li><li>上传三部曲不多说</li></ul></li><li><p>heroku open 查看有自己喜欢的效果就是对了</p></li><li><p>查错 如果出现 application err就是错了  </p><ul><li>heroku logs –tail 使用这个命令查看错在哪里</li></ul></li><li><p>一些自定义的文件啥的在项目根目录传文件放</p><ul><li>在 index.js文件中引入配置就好</li></ul></li></ol><h3 id="新浪云"><a href="#新浪云" class="headerlink" title="新浪云"></a>新浪云</h3><ul><li>新浪云还是比较简单</li></ul><ol><li>登录 进入控制台</li><li>创建应用 选择自己要的服务器 设计域名和应用名称</li><li>然后里面有git代码说明</li><li>就是把git克隆下来再来写代码就好了</li><li>git push三部曲</li><li>数据库那些也是这样差不多自己研究</li></ol>]]></content>
      
      
      <categories>
          
          <category> 插件/配置 </category>
          
      </categories>
      
      
        <tags>
            
            <tag> npm </tag>
            
        </tags>
      
    </entry>
    
    <entry>
      <title>Vue-cli开启的服务内部写 node 接口</title>
      <link href="/2018/11/23/vue-node%E6%9C%8D%E5%8A%A1/"/>
      <url>/2018/11/23/vue-node%E6%9C%8D%E5%8A%A1/</url>
      
        <content type="html"><![CDATA[<link rel="stylesheet" class="aplayer-secondary-style-marker" href="/assets/css/APlayer.min.css"><script src="/assets/js/APlayer.min.js" class="aplayer-secondary-script-marker"></script><ul><li>在我们的开发中很多时候都是前后端分离，但是在一些个别的案例中也不需要开启两个 node 服务（这里也有一个问题就是开启两个端口会有跨域的问问）</li><li>跨域问题在前面获取数据的 axio 说过就不说了</li><li>那么我们能不能把 node 后台服务也写到 vue-cli 开启的服务中呢？ 能 那我们就来吧</li></ul><ol><li>在 vue-cli 中我也不知道他有没有 expore 这个包 那就自己装一下吧有没有都好</li><li>在项目文件夹内 创建一个名为 server 的文件夹 在里面新建 router.js 文件 (文件夹名和位置自己喜欢着么来就着么来)</li><li>在 router 文件里面写接口和业务逻辑</li></ol><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">// 这里我就简单的写一个接口这些学过node都懂不多说</span></span><br><span class="line"><span class="keyword">const</span> express = <span class="built_in">require</span>(<span class="string">'express'</span>)</span><br><span class="line"></span><br><span class="line"><span class="keyword">const</span> router = express.Router()</span><br><span class="line"></span><br><span class="line">router.get(<span class="string">'/yhf/abc'</span>, (req, res) =&gt; &#123;</span><br><span class="line">  res.send(<span class="string">'欢迎访问 Node 服务器数据 API 接口！'</span>)</span><br><span class="line">&#125;)</span><br><span class="line"></span><br><span class="line"><span class="built_in">module</span>.exports = router</span><br></pre></td></tr></table></figure><ol start="4"><li>如何调用 router 呢？（我们找到 build/webpack.dev.conf.js）（说一下为什么是这个文件，在旧版本呢就是在 build/sev-server.js 中配置的，在新版本中去除了这个配置文件改为了前面的那个 webpack 配置文件）</li></ol><ul><li>1.找到了这个文件后 第一步肯定是引包啦 要加在 const portfinder = require(‘portfinder’) 的后面</li></ul><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">const</span> express = <span class="built_in">require</span>(<span class="string">'express'</span>) express包</span><br><span class="line"><span class="keyword">const</span> app = express.Router() 开启服务 这个自己喜欢吧</span><br><span class="line"><span class="keyword">const</span> router = <span class="built_in">require</span>(<span class="string">'../server/router'</span>)  你自己的接口包</span><br></pre></td></tr></table></figure><ul><li>2.第二步当然就是配置啦 （找到 devServer 大约在 25 行左右那里）</li></ul><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">// 加入这一段代码 本来是没有before的要自己加</span></span><br><span class="line">before(app) &#123;</span><br><span class="line">    <span class="comment">// 这个方法是直接在这里自己写接口</span></span><br><span class="line">      app.get(<span class="string">'/api/getDiscList'</span>,(req,res) =&gt; &#123;</span><br><span class="line">        res.send(<span class="string">"欢迎来的node服务"</span>)</span><br><span class="line">      &#125;)</span><br><span class="line">    <span class="comment">//   这个是外部引入</span></span><br><span class="line">      app.use(router)</span><br><span class="line">    &#125;</span><br></pre></td></tr></table></figure>]]></content>
      
      
      <categories>
          
          <category> Vue </category>
          
      </categories>
      
      
        <tags>
            
            <tag> Vue笔记 </tag>
            
        </tags>
      
    </entry>
    
    <entry>
      <title>仿写 vue2-vuex 案例</title>
      <link href="/2018/11/21/2018-11-21/"/>
      <url>/2018/11/21/2018-11-21/</url>
      
        <content type="html"><![CDATA[<link rel="stylesheet" class="aplayer-secondary-style-marker" href="/assets/css/APlayer.min.css"><script src="/assets/js/APlayer.min.js" class="aplayer-secondary-script-marker"></script><h2 id="案例心得"><a href="#案例心得" class="headerlink" title="案例心得"></a>案例心得</h2><ul><li>在分析完那个vuex的小案例后，我觉得自己好像真的明白了vuex是着么写的</li><li>但是在我重新去仿照这个案例写的时候，还是发现了自己有很多的不足</li><li>那也只可以一点点的去查一点点的去写</li><li>在仿写的过程中，也有向源码学习</li><li>从中知道和学到了很多之前自己不会的方法和技巧</li></ul><h2 id="仿写源码"><a href="#仿写源码" class="headerlink" title="仿写源码"></a><a href="https://github.com/YHF7/Vue/tree/master/vue2-vuex-yhf" target="_blank" rel="noopener">仿写源码</a></h2><h2 id="vue2-vuex案例分析"><a href="#vue2-vuex案例分析" class="headerlink" title="vue2-vuex案例分析"></a><a href="https://yhf7.github.io/2018/11/17/vue2-vuex%E6%A1%88%E4%BE%8B/#more" target="_blank" rel="noopener">vue2-vuex案例分析</a></h2>]]></content>
      
      
      <categories>
          
          <category> Vue </category>
          
      </categories>
      
      
        <tags>
            
            <tag> Vue 案例 </tag>
            
        </tags>
      
    </entry>
    
    <entry>
      <title>vue2-vuex 案例分析</title>
      <link href="/2018/11/17/vue2-vuex%E6%A1%88%E4%BE%8B/"/>
      <url>/2018/11/17/vue2-vuex%E6%A1%88%E4%BE%8B/</url>
      
        <content type="html"><![CDATA[<link rel="stylesheet" class="aplayer-secondary-style-marker" href="/assets/css/APlayer.min.css"><script src="/assets/js/APlayer.min.js" class="aplayer-secondary-script-marker"></script><h1 id="这个是我在github看到的一个vue的案例感觉好像挺有用的就下下来看，然后就写了这个分析，vue-vuex都全了很好"><a href="#这个是我在github看到的一个vue的案例感觉好像挺有用的就下下来看，然后就写了这个分析，vue-vuex都全了很好" class="headerlink" title="这个是我在github看到的一个vue的案例感觉好像挺有用的就下下来看，然后就写了这个分析，vue-vuex都全了很好"></a>这个是我在github看到的一个vue的案例感觉好像挺有用的就下下来看，然后就写了这个分析，vue-vuex都全了很好</h1><h2 id="项目地址"><a href="#项目地址" class="headerlink" title="项目地址"></a><a href="https://github.com/YHF7/Vue/tree/master/vue2-happyfri" target="_blank" rel="noopener">项目地址</a></h2><h2 id="目录分析"><a href="#目录分析" class="headerlink" title="目录分析"></a>目录分析</h2><ul><li>build 配置/打包目录</li><li>config 端口控制</li><li>happyfri 静态资源</li><li>node_modules 插件库</li><li>src 业务逻辑<ul><li>components 公共组件<ul><li>itemcontainer 页面</li></ul></li><li>config 这个我不太懂应该是 ajax 交互用的<ul><li>ajax.js</li><li>rem.js 这个是一个 手机屏幕自适应判断的一个文件，用来在不同的屏幕时改变页面内的 html font-size的大小 而改变页面的效果</li></ul></li><li>images 图片</li><li>page 业务逻辑组件<ul><li>home 主页面<ul><li>index.vue</li></ul></li><li>item 答题页面<ul><li>index.vue</li></ul></li><li>score 最后的分数页面<ul><li>index.vue</li></ul></li></ul></li><li>router 路由<ul><li>router.js</li></ul></li><li>store vuex 的业务逻辑<ul><li>index.js 创建与实例数据与方法</li><li>actioin.js 主要是负责对接外部方法</li><li>mutatoions.js 主要是复杂编写内部方法供 actionin.js 内的方法调用</li></ul></li><li>style less<ul><li>common.less 控制页面的样式</li></ul></li><li>App.vue 主组件</li><li>main.js 配置文件</li></ul></li><li>index.html 主页面</li><li>其他的一下配置文件</li></ul><h2 id="走进-vue2-项目"><a href="#走进-vue2-项目" class="headerlink" title="走进 vue2 项目"></a>走进 vue2 项目</h2><h3 id="页面"><a href="#页面" class="headerlink" title="页面"></a>页面</h3><ol><li>首先这个是用 vue-cli 脚手架开启的一个 vue 项目 （作者是把原本的 8080 短端口改为了 8088）<ul><li>sudo cnpm dev run 开启服务</li><li>看开启无误 通过<a href="http://localhost:8088/#/" target="_blank" rel="noopener">http://localhost:8088/#/</a> 访问主页面</li></ul></li><li>开启到了服务了我们就来看结构<ul><li>页面很简单看起来就几个部分</li><li>头部-内容-按钮-背景图</li></ul></li></ol><h3 id="业务逻辑代码"><a href="#业务逻辑代码" class="headerlink" title="业务逻辑代码"></a>业务逻辑代码</h3><ol><li>进入到页面了 我们就看看 主页面 是着么得到的<ul><li>当我们开启了服务的时候 就会执行 build/dev-server.js 文件</li><li>然后就会找到我们的 src 文件夹 文件夹内有个 main.js 的配置文件<ul><li>在 main.js 文件中 所有的 插件与静态资源 与 vue 实例都会在里面</li><li>但是因为这样都写在一起 不仅会使得代码很乱也会很多所以分开了很多的页面去写</li><li>所以看到 main.js 其实没什么东西 ，都分到了不同的组件中</li></ul></li><li>好到了我们的 main.js 就激活 vue 实例</li><li>这里 vue 就会进行内部的路由判断 我们打开了 8088 端口时默认是 /</li><li>在 router/router.js 文件就会判断并执行到相应到页面 也就是主页</li></ul></li><li>router.js<ul><li>在这个路由页面中我们会看到 返回到是 App 这个 主组建</li><li>children 这个是用来设置子组件的 （子组建分为了三个）<ul><li>“” 默认为空的话 就是去到 ../page/home 这个主页面中</li><li>“item” 答题页</li><li>“score” 结算页</li><li>component: r =&gt; require.ensure([], () =&gt; r(require(‘../page/home’)), ‘home’) 这个获取地址的方法 已经不建议如此获取</li></ul></li></ul></li><li>跟着路由判断 我们来到了 默认的主页面 src/page/home/index.vue<ul><li>template 组件<ul><li>我们看到是一个类名 home_container 的 div 包着一个 外部引用组件</li><li><itemcontainer father-component="home"></itemcontainer> 通过 father-component 给这个组件传一个值 ，这是用来给组件判断是主页面还是答题页面，输出不同的效果</li></ul></li><li>script js<ul><li>import itemcontainer from ‘../../components/itemcontainer’ 引用外部的组件</li><li>name 这个就不用说了</li><li>components 挂载组件</li></ul></li><li>style less<br><img src="/vue2-vuex/vuex1.png" alt="home"></li></ul></li><li><p>看完了 子主页面 我们顺藤摸瓜 去看看他所引用的外部组件 src/components/itemcontainer.vue</p><ul><li>template （分了两个部分，同时也分了两个页面 home/item）<ul><li>头部 header<ul><li>通过 刚才我们看到的 father-component 传过来的值 判断是 home 还是 item 显示不同的头部<ul><li>第几周/第几题</li></ul></li></ul></li><li>内容 div 也是通过 father-component 判断显示那个 那么我们就分开说<ul><li>home<ul><li>一个 div 放着一些内容</li><li>router-link 控制的一个按钮 跳转地址是 item</li></ul></li><li>item<ul><li>div 包着的 内容 通过 itemDetail.length 来判断是否还有题目//其实是多余的</li><li>有就 继续执行 内容 header ul&gt;li</li><li>最后又两个 span 通过 itemNum &lt; itemDetail.length 来判断是下一题还是执行结算函数</li></ul></li></ul></li></ul></li><li>script<ul><li>在这里面我们可能一开始是没有注意到的</li><li>props 父子组件传值就不说了</li><li>把目光投射到代码靠后一点点 created 这个生命周期函数身上</li><li>当我们一进入这个页面时 就会马上判断是否是 home 页面</li><li>如果是 那就执行 this.initializeData(); 这是定义在 vuex 的函数</li><li>不急跳过去先看看 itemcontainer 内的 vuex</li><li>我们会看到 页面是用了 按需导入的方法</li><li>import { mapState, mapActions } from “vuex”;</li><li>在我们的使用中为了避免多次的编写 this.\$store….这样的代码 我们是用来 mapState，mapActions 这两个方法</li><li>mapState 获取 vuex 的 state 也就是 data<ul><li>使用比较简单 computed: mapState([接收名:’vuexdata 名’]) computed 用来监控自己定义的变量</li></ul></li><li>mapActions 获取 vuex 的函数<ul><li>methods: {…mapActions([“函数名”, “函数名”])} // 将 <code>this.方法名()</code> 映射为 <code>this.$store.dispatch(&#39;方法名&#39;)</code> 用在异步操作</li></ul></li><li>知道了这些我们继续回头看项目 判断是 home 就执行方法 和设置背景</li></ul></li><li>style 样式这些基本工的我就不说自己摸索</li></ul></li><li><p>既然说到了 vuex 那就顺着去看看 vuex src/store/index</p></li></ol><ul><li>进来了后我们看到的是 一些引入的插件和自定义的函数方法</li><li>在这里注册了 vuex</li><li>state 就是一些定义的数据</li><li>在下面我们会看到一个 抛出的 创建 vuex 实例<ul><li>state 是数据</li><li>actions 异步调用自定义的方法</li><li>mutations 同步自定义方法</li></ul></li></ul><ol start="6"><li>了解了 vuex store 的架构后我们再继续看这个 刚才调用的方法的执行</li></ol><ul><li>但调用这个方法的时候</li><li>第一时间方法是找到了 src/store/index.vue 的 stroe 实例</li><li>通过前面我们知道是异步调用方法是 在 actions 这个中，这个方法来自于 当前文件夹下的 actions.vue 中</li><li>那我们进入到这个页面 终于看到了这个方法了 原来是用来初始化信息的</li><li>这个方法需要传入一个值 （但我们使用 vuex 的时候默认第一个要输入的是 vuex 的参数）<ul><li>当我们看到 commit 的时候应该想到的是 vuex 同步方法调用</li><li>那么我们知道同步方法都是放在 mutations 里面 那我们就进去看看</li><li>在文件中 我们找到了 刚才调用的 INITIALIZE_DATA 方法 state 是 vuex 必须导入的<ul><li>然后我们就看了了很多个 state.什么的数据</li><li>看到 state 那肯定就是 vuex 内部都数据啦</li><li>这时候返回到 index.js 对照着看</li><li>就会知道是把数据进行赋值初始化，这步是为了不要产生数据的出错，当你答完题又回去 home 的时候再次答题数据就会出错了</li></ul></li></ul></li></ul><ol start="7"><li>好我们看完了 App/home 这样的 主子组建的搭配和数据初始化后，我们在页面点击开始<ul><li>点击开始就是等于 点击了 itemcontainer 内的 router-link 就会跳到 item</li><li>路由判断就会根据 /item 判断 我们就会去到 crc/page/item/index.vue</li><li>这个结构我们就不说了和 home 一样</li><li>我们说一下 created 这是生命周期函数，表示进入界面已经加载完 dom 时执行</li></ul></li><li>好我们也跟着 再一次回到了 itemcontainer 页面<ul><li>template<ul><li>判断得到是 item 执行显示出来头部和内容</li><li>header 显示第几题</li><li>div 这个就详细说一下重点就是在这里</li></ul></li></ul></li><li>那我们就来重点解说一下这个 div<ul><li>因为数据已经导入进来前面说过了直奔内容</li><li>先看类名为 item_list_container<ul><li>这里就是 item 的内容 用来判断是否还有题目</li><li>遍历数据</li><li>header 获取 vuex 内的 itemDetail 数组中的 第 0 个对象中的 topic_name （itemNum 是用来判断是第几题的，为什么是 itemNum-1 不用我说了把）</li><li>ul li 遍历出选项<ul><li>在 li 绑定了点击保存答案 id 的方法</li><li>做了一个 点击按钮绑定的样式 也做了一个 abcd 的遍历，定义方法通过不同的数值表示不同的字母</li><li>获取内容</li></ul></li><li>最后两个 span 是用来判断下一题还是执行结算</li></ul></li></ul></li><li><p>最后的几个 vuex 问题都在这里了 先说 li 的保存答案</p><ul><li>li 绑定了自定义的一个函数 choosed 有两个参数值 li 遍历的第几个 和 vuex 数据中的答案 id</li><li>看到 choosed 方法 当我们选择答案的时候 就会在记录在 choosedNum 和 choosedId 中</li></ul></li><li><p>选择了答案的选项 当然就会击下一题</p><ul><li>触发 自定义函数 nextItem</li><li>这个函数首先判断的是 通过choosedNum判断是否有选择答案，没有就弹框</li><li>有就把choosedNum清空 这是步骤是为了检测是否真的有输入（为什么不用输入的ID做呢，因为这里执行的是异步操作，用户可以继续做题，通过是否为空去判断，id传走执行其他操作，下一次传值覆盖掉就好了）</li><li>这里通过异步调用 方法 addNum 并传入答案id</li><li>前面说过位置在哪里这里就直接看执行方法</li><li>先同步执行了 ‘REMBER_ANSWER’</li><li>这里是把答案添加到了 vuex 内的state中的answerid数组中</li><li>然后再判断题目还有没有，有就 执行’ADD_ITEMNUM’方法 加一题<br><img src="/vue2-vuex/vuex2.png" alt="home"></li></ul></li><li><p>一直如此到了最后一题的时候点击 itemNum就会比itemDetail长</p><ul><li>哪就执行submitAnswe</li><li>还是判断有没有选择题目</li><li>执行添加最后一题答案</li><li>关闭定时器</li><li>路由添加score 跳转到score页面</li></ul></li><li><p>好终于到了最后的页面了 src/page/score/index</p><ul><li>这个页面也是分了两部分的不过前面说了那么多你们应该看得懂这个页面的所以就不多说</li><li>直接关心数据 还是用按需导入法</li><li>获取到了answerid 就是那个答案数组然后进行答案的计算</li><li>进入页面执行 computedScore和getScoreTip函数<br><img src="/vue2-vuex/vuex3.png" alt="home"><br><img src="/vue2-vuex/vuex4.png" alt="home"></li></ul></li><li>好了这么一个 vue2 vuex 的小案例就分析完毕了<ul><li>别看这个案例好像很小但是我们也说了很多了</li><li>本人才疏学浅花了几个小时才完全弄懂</li><li>麻雀虽小五脏俱全</li></ul></li></ol>]]></content>
      
      
      <categories>
          
          <category> Vue </category>
          
      </categories>
      
      
        <tags>
            
            <tag> Vue 案例 </tag>
            
        </tags>
      
    </entry>
    
    <entry>
      <title>各数据库的开启与服务器的开启</title>
      <link href="/2018/11/15/sql-fuq/"/>
      <url>/2018/11/15/sql-fuq/</url>
      
        <content type="html"><![CDATA[<link rel="stylesheet" class="aplayer-secondary-style-marker" href="/assets/css/APlayer.min.css"><script src="/assets/js/APlayer.min.js" class="aplayer-secondary-script-marker"></script><ul><li>本人记性不好写起来方便可以开启关闭</li><li>使用就不说了很简单自己摸索吧</li></ul><h1 id="数据库"><a href="#数据库" class="headerlink" title="数据库"></a>数据库</h1><ul><li>本人才疏学浅只会mysql和mongod、sqlserver但是没装<h2 id="mysql"><a href="#mysql" class="headerlink" title="mysql"></a>mysql</h2></li><li>开启：sudo /usr/local/mysql/bin/mysqld_safe –skip-grant-tables</li><li>关闭：sudo /usr/local/mysql/bin/mysqladmin -u root -proot shutdown</li><li>mysql 建议装 Navicat for mysql 图形化界面工具（虽说代码才是王道倒是也可以提高效率是真，而且本人太记得sql语句很适合）</li></ul><h2 id="mongod"><a href="#mongod" class="headerlink" title="mongod"></a>mongod</h2><ul><li>mongod 开启相对比较简单</li><li>开启 sudo mongod</li><li>关闭 直接结束命令行就可以<figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br></pre></td><td class="code"><pre><span class="line">链接(默认链接本地服务)</span><br><span class="line">mongo</span><br><span class="line"></span><br><span class="line">退出</span><br><span class="line"><span class="built_in">exit</span></span><br><span class="line"></span><br><span class="line">基本命令:</span><br><span class="line">1. show dbs 查看显示所以数据库</span><br><span class="line">2. db 查看当前链接打数据库</span><br><span class="line">3. use 数据库名称  切换到指定打数据库（如果没有会新建）</span><br><span class="line">4. 插入数据</span><br><span class="line">5. show collections 查看数据集合 </span><br><span class="line">6. db.students.find() 查看库中所以的数据</span><br></pre></td></tr></table></figure></li></ul><h1 id="服务器"><a href="#服务器" class="headerlink" title="服务器"></a>服务器</h1><ul><li>xamp / mamp / apache 基本什么都可以用 但是用jsp就不太可以 (个人比较爱前两个，还有很多好用的服务器但是，本人用的是mac不是什么软件都能找到)</li><li>apache-tomcat 就是用了使用javaweb（jsp）<h2 id="xampp"><a href="#xampp" class="headerlink" title="xampp"></a>xampp</h2></li><li>这个比较简单 界面开启就好</li><li>留一个 数据库的地址老是忘记 <a href="http://localhost/phpmyadmin/" target="_blank" rel="noopener">http://localhost/phpmyadmin/</a></li></ul><h2 id="MAMP"><a href="#MAMP" class="headerlink" title="MAMP"></a>MAMP</h2><ul><li>这个也是界面不说</li></ul><h2 id="Apache"><a href="#Apache" class="headerlink" title="Apache"></a>Apache</h2><ul><li>Mac电脑自带</li><li>开启 sudo apachectl start</li><li>关闭 sudo apachectl stop</li><li>重启 sudo apachectl restar</li><li>留几个配置网址以后好找</li><li><a href="https://www.cnblogs.com/wanxudong/p/5846907.html" target="_blank" rel="noopener">https://www.cnblogs.com/wanxudong/p/5846907.html</a></li><li><a href="https://jingyan.baidu.com/article/922554467d763b851648f4dc.html" target="_blank" rel="noopener">https://jingyan.baidu.com/article/922554467d763b851648f4dc.html</a></li><li><a href="https://www.linuxidc.com/Linux/2016-03/129524.htm" target="_blank" rel="noopener">https://www.linuxidc.com/Linux/2016-03/129524.htm</a></li><li><a href="https://www.jianshu.com/p/f56815569234" target="_blank" rel="noopener">https://www.jianshu.com/p/f56815569234</a></li></ul><h2 id="apache-tomcat"><a href="#apache-tomcat" class="headerlink" title="apache-tomcat"></a>apache-tomcat</h2><ul><li>开启 进入 服务器文件夹 找到 bin文件夹 在终端打开 执行 sudo sh startup.sh</li><li>关闭 同上 sudo sh shutdown.sh </li><li>不行就看网址 <a href="https://www.cnblogs.com/xingxingLove/p/5304390.html" target="_blank" rel="noopener">https://www.cnblogs.com/xingxingLove/p/5304390.html</a></li><li>IntelliJ IDEA 写java，javaweb装这个软件 会自动检测本地得 apache-tomcat 基本不需要自己开启</li><li>软件自动调用开启服务，如果同时自己开了得话会起冲突的，自己记清楚</li></ul><h2 id="node"><a href="#node" class="headerlink" title="node"></a>node</h2><ul><li>这个不用说自己写代码自己运行</li><li>sudo node app.js (有nodemon就最好啦)</li></ul>]]></content>
      
      
      <categories>
          
          <category> 插件/配置 </category>
          
      </categories>
      
      
        <tags>
            
            <tag> 数据库/服务器 </tag>
            
        </tags>
      
    </entry>
    
    <entry>
      <title>解决jsp给mysql传中文乱码</title>
      <link href="/2018/11/15/2018-11-15/"/>
      <url>/2018/11/15/2018-11-15/</url>
      
        <content type="html"><![CDATA[<link rel="stylesheet" class="aplayer-secondary-style-marker" href="/assets/css/APlayer.min.css"><script src="/assets/js/APlayer.min.js" class="aplayer-secondary-script-marker"></script><ul><li>今天上课的时候做一个javaweb案例</li><li>用到了数据库</li><li>在我插入中文的时候发现了问题在我的数据库中发现，中文变成了问号</li><li>遇到这个问题第一时间肯定是检查 数据库-页面代码-服务器 问题肯定就在这三个里面</li></ul><h1 id="1-我第一时间是看数据库"><a href="#1-我第一时间是看数据库" class="headerlink" title="1. 我第一时间是看数据库"></a>1. 我第一时间是看数据库</h1><ul><li>在数据库中设置了 utf-8 的字符集</li><li>但是在软件中设置 utf-8 保存后是看不见的</li><li>然后就去修改数据，当发现数据修改后可以成功的时候我知道数据库是没有问题的</li></ul><h1 id="2-我再去看页面代码"><a href="#2-我再去看页面代码" class="headerlink" title="2. 我再去看页面代码"></a>2. 我再去看页面代码</h1><ul><li>首先检查发送数据的表单页设置utf8没</li><li>再检查 业务逻辑处理页面的utf8设置了没<figure class="highlight jsp"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">&lt;%@ page contentType=<span class="string">"text/html;charset=UTF-8"</span> <span class="keyword">import</span>=<span class="string">"java.util.*,java.sql.*"</span> language=<span class="string">"java"</span> pageEncoding=<span class="string">"UTF-8"</span> %&gt;</span><br></pre></td></tr></table></figure></li></ul><figure class="highlight html"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">meta</span> <span class="attr">http-equiv</span>=<span class="string">"Content-Type"</span> <span class="attr">content</span>=<span class="string">"text/html; charset=UTF-8"</span>&gt;</span></span><br></pre></td></tr></table></figure><ul><li>发现加了还是没有效果</li></ul><h1 id="3-我再去看-服务器-是否乱码"><a href="#3-我再去看-服务器-是否乱码" class="headerlink" title="3. 我再去看 服务器 是否乱码"></a>3. 我再去看 服务器 是否乱码</h1><ul><li>jsp 我用的是 apache tomcat 服务器</li><li>检测 服务器文件-&gt;conf-&gt;server.xml 文件</li><li><p>大概在 68 行左右的位置</p><figure class="highlight xml"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">Connector</span> <span class="attr">port</span>=<span class="string">"8080"</span> <span class="attr">protocol</span>=<span class="string">"HTTP/1.1"</span></span></span><br><span class="line"><span class="tag">               <span class="attr">connectionTimeout</span>=<span class="string">"20000"</span></span></span><br><span class="line"><span class="tag">               <span class="attr">redirectPort</span>=<span class="string">"8443"</span> <span class="attr">URIEncoding</span>=<span class="string">"UTF-8"</span>/&gt;</span></span><br></pre></td></tr></table></figure></li><li><p>找到这句 看看 是否有设置 URIEncoding=”UTF-8”</p></li><li>但是做到了这里还是没有效果</li></ul><h1 id="4-按道理做完前面的应该可以了啊-我再去看-业务逻辑代码"><a href="#4-按道理做完前面的应该可以了啊-我再去看-业务逻辑代码" class="headerlink" title="4. 按道理做完前面的应该可以了啊 我再去看 业务逻辑代码"></a>4. 按道理做完前面的应该可以了啊 我再去看 业务逻辑代码</h1><ul><li><p>想起在链接数据库的时候加一个utf8的字符集可不可以</p><figure class="highlight jsp"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">conn=DriverManager.getConnection(<span class="string">"jdbc:mysql://localhost:3306/book?useUnicode=true&amp;characterEncoding=UTF-8"</span>,<span class="string">"root"</span>,<span class="string">""</span>);</span><br></pre></td></tr></table></figure></li><li><p>在数据库链接加入 ?useUnicode=true&amp;characterEncoding=UTF-8 来设置字符集</p></li><li>这样就成功显示了中文了</li></ul>]]></content>
      
      
      <categories>
          
          <category> JavaWeb </category>
          
      </categories>
      
      
        <tags>
            
            <tag> JavaWeb笔记 </tag>
            
        </tags>
      
    </entry>
    
    <entry>
      <title>Vue通过请求获取api接口数据/代理跨域</title>
      <link href="/2018/11/10/2018-11-10/"/>
      <url>/2018/11/10/2018-11-10/</url>
      
        <content type="html"><![CDATA[<link rel="stylesheet" class="aplayer-secondary-style-marker" href="/assets/css/APlayer.min.css"><script src="/assets/js/APlayer.min.js" class="aplayer-secondary-script-marker"></script><h3 id="我知道也用过的有两种"><a href="#我知道也用过的有两种" class="headerlink" title="我知道也用过的有两种"></a>我知道也用过的有两种</h3><ol><li>vue-resource （已不维护了）</li><li>axios （越来越多人用）</li><li>vue代理跨域（补充）</li></ol><h3 id="那我们就来说是着么用吧"><a href="#那我们就来说是着么用吧" class="headerlink" title="那我们就来说是着么用吧"></a>那我们就来说是着么用吧</h3><h3 id="1-vue-resource"><a href="#1-vue-resource" class="headerlink" title="1. vue-resource"></a>1. vue-resource</h3><ul><li><p>引入的方法有 3 种</p><ul><li>引入 1 直接使用网络的引用地址 <script src="https://cdn.jsdelivr.net/npm/vue-resource@1.5.1"></script> （速度会慢一点）</li><li>引入 2 把包下载下来本地引用 <script src="./lib/vue-resource-1.3.4.js"></script></li><li>引入 3 在项目中 用 npm 下载引用  在main.js文件内配置 下载 npm i vue-resource -S 有cnpm最好用cnpm安装快<figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">// 引入 包</span></span><br><span class="line"><span class="keyword">import</span> VueResource <span class="keyword">from</span> <span class="string">'vue-resource'</span>;</span><br><span class="line"><span class="comment">// 安装包</span></span><br><span class="line">Vue.use(VueResource);</span><br><span class="line"><span class="comment">// 设置请求的根路径</span></span><br><span class="line">Vue.http.options.root = <span class="string">'http://127.0.0.1:5000'</span>; <span class="comment">// 我们访问后台的路径大多相同所以直接设置根路径就不用每次都全部打了</span></span><br></pre></td></tr></table></figure></li></ul></li><li><p>使用方法</p><figure class="highlight html"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">&lt;!-- body中的代码 --&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">div</span> <span class="attr">id</span>=<span class="string">"app"</span>&gt;</span></span><br><span class="line">    <span class="comment">&lt;!-- 引用 --&gt;</span></span><br><span class="line">  <span class="tag">&lt;<span class="name">input</span> <span class="attr">type</span>=<span class="string">"button"</span> <span class="attr">value</span>=<span class="string">"get请求"</span> @<span class="attr">click</span>=<span class="string">"getInfo"</span> /&gt;</span></span><br><span class="line">  <span class="tag">&lt;<span class="name">input</span> <span class="attr">type</span>=<span class="string">"button"</span> <span class="attr">value</span>=<span class="string">"post请求"</span> @<span class="attr">click</span>=<span class="string">"postInfo"</span> /&gt;</span></span><br><span class="line">  <span class="tag">&lt;<span class="name">input</span> <span class="attr">type</span>=<span class="string">"button"</span> <span class="attr">value</span>=<span class="string">"jsonp请求"</span> @<span class="attr">click</span>=<span class="string">"jsonpInfo"</span> /&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">div</span>&gt;</span></span><br></pre></td></tr></table></figure><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">// 创建 Vue 实例，得到 ViewModel</span></span><br><span class="line"><span class="keyword">var</span> vm = <span class="keyword">new</span> Vue(&#123;</span><br><span class="line">  el: <span class="string">'#app'</span>,</span><br><span class="line">  data: &#123;</span><br><span class="line">  &#125;,</span><br><span class="line">  methods: &#123;</span><br><span class="line">    getInfo() &#123; <span class="comment">// 发起get请求</span></span><br><span class="line">      <span class="comment">//  当发起get请求之后， 通过 .then 来设置成功的回调函数</span></span><br><span class="line">      <span class="keyword">this</span>.$http.get(<span class="string">'http://nodecms.applinzi.com/api/getcs'</span>).then(<span class="function"><span class="keyword">function</span> (<span class="params">result</span>) </span>&#123;</span><br><span class="line">        <span class="comment">// 通过 result.body 拿到服务器返回的成功的数据</span></span><br><span class="line">        <span class="built_in">console</span>.log(result.body)</span><br><span class="line">      &#125;)</span><br><span class="line">    &#125;,</span><br><span class="line">    postInfo() &#123; <span class="comment">// 发起 post 请求   application/x-wwww-form-urlencoded</span></span><br><span class="line">      <span class="comment">//  手动发起的 Post 请求，默认没有表单格式，所以，有的服务器处理不了</span></span><br><span class="line">      <span class="comment">//  通过 post 方法的第三个参数， &#123; emulateJSON: true &#125; 设置 提交的内容类型 为 普通表单数据格式</span></span><br><span class="line">      <span class="keyword">this</span>.$http.post(<span class="string">'http://nodecms.applinzi.com/api/getpost'</span>, &#123;&#125;, &#123;</span><br><span class="line">        emulateJSON: <span class="literal">true</span></span><br><span class="line">      &#125;).then(<span class="function"><span class="params">result</span> =&gt;</span> &#123;</span><br><span class="line">        <span class="built_in">console</span>.log(result.body)</span><br><span class="line">      &#125;)</span><br><span class="line">    &#125;,</span><br><span class="line">    jsonpInfo() &#123; <span class="comment">// 发起JSONP 请求</span></span><br><span class="line">      <span class="keyword">this</span>.$http.jsonp(<span class="string">'http://vue.studyit.io/api/jsonp'</span>).then(<span class="function"><span class="params">result</span> =&gt;</span> &#123;</span><br><span class="line">        <span class="built_in">console</span>.log(result.body)</span><br><span class="line">      &#125;)</span><br><span class="line">    &#125;</span><br><span class="line">  &#125;</span><br><span class="line">&#125;);</span><br></pre></td></tr></table></figure></li></ul><h3 id="2-axios"><a href="#2-axios" class="headerlink" title="2.axios"></a>2.axios</h3><ul><li>引入方法<ul><li>方法1 项目安装 npm i axios -S (npm,cnpm,bower喜欢那个用那个)</li><li>方法2 <script src="https://unpkg.com/axios/dist/axios.min.js"></script></li></ul></li><li><p>用法和vue-resource差不多</p><ul><li><p>main.js 配置</p><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">// 配置axios</span></span><br><span class="line"><span class="keyword">import</span> Axios <span class="keyword">from</span> <span class="string">'axios'</span></span><br><span class="line"><span class="comment">// 配置公共url</span></span><br><span class="line">Axios.defaults.baseURL = <span class="string">'http://127.0.0.1:5000/api/'</span></span><br><span class="line">Vue.prototype.$axios = Axios</span><br></pre></td></tr></table></figure></li><li><p>使用</p><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">this</span>.$axios</span><br><span class="line">  .get(<span class="string">"getlunbo"</span>)</span><br><span class="line">  .then(<span class="function"><span class="params">res</span> =&gt;</span> &#123;</span><br><span class="line">    <span class="comment">// res.data.message = [&#123;img: '图片地址'&#125;]</span></span><br><span class="line">    <span class="keyword">this</span>.imgs = res.data.message;</span><br><span class="line">  &#125;)</span><br><span class="line">  .catch(<span class="function"><span class="params">err</span> =&gt;</span> <span class="built_in">console</span>.log(<span class="string">"轮播图获取异常"</span>));</span><br></pre></td></tr></table></figure></li></ul></li></ul><h3 id="3-代理跨域"><a href="#3-代理跨域" class="headerlink" title="3.代理跨域"></a>3.代理跨域</h3><ul><li>虽然上面的方法都挺好但是面对跨域问题，如果后端不去设置的话就会出现跨域获取出错的问题</li><li>这里只是说 vue-cli 开启的项目设置代理跨域因为其他的我不太会</li><li>现在流行前后台分离开发，就是前端先前端的页面，后端写后端的接口。但是，当两者的工作合并的时候，要么前端自己搭建一个服务器，要么后端开启跨域让前端访问接口，我一般在开发的时候采用的是后者。但是这个是很坑的，经常出现无法跨域的错误。</li><li>Vue-cli中自带了代理，当你配置了这个代理之后，你访问他人电脑的接口的时候，就像访问自己本机的接口一样，避免了跨域的问题。</li></ul><h4 id="cli2"><a href="#cli2" class="headerlink" title="cli2"></a>cli2</h4><ul><li><p>首先找到，config下面的index.js，然后，打开，关键代码如下：</p><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br></pre></td><td class="code"><pre><span class="line">dev: &#123;</span><br><span class="line"></span><br><span class="line">  <span class="comment">// Paths</span></span><br><span class="line">    assetsSubDirectory: <span class="string">'static'</span>,</span><br><span class="line">    assetsPublicPath: <span class="string">'/'</span>,</span><br><span class="line">    proxyTable: &#123;</span><br><span class="line">      <span class="string">'/Home'</span> : &#123;</span><br><span class="line">        target: <span class="string">'https://lit-plains-29389.herokuapp.com'</span>,</span><br><span class="line">        changeOrigin: <span class="literal">true</span>,</span><br><span class="line">      &#125;,</span><br><span class="line">      <span class="string">"/api"</span>:&#123;</span><br><span class="line">        target: <span class="string">'https://lit-plains-29389.herokuapp.com'</span>,</span><br><span class="line">        changeOrigin: <span class="literal">true</span>,</span><br><span class="line">        pathRewrite: &#123;</span><br><span class="line">          <span class="string">'^/api'</span>: <span class="string">'/'</span></span><br><span class="line">        &#125;</span><br><span class="line">      &#125;</span><br><span class="line">    &#125;,</span><br><span class="line">  <span class="comment">// Various Dev Server settings</span></span><br><span class="line">  host: <span class="string">'localhost'</span>, <span class="comment">// can be overwritten by process.env.HOST</span></span><br><span class="line">  port: <span class="number">8080</span>, <span class="comment">// can be overwritten by process.env.PORT, if port is in use, a free one will be determined</span></span><br><span class="line">  autoOpenBrowser: <span class="literal">false</span>,</span><br><span class="line">  errorOverlay: <span class="literal">true</span>,</span><br><span class="line">  notifyOnErrors: <span class="literal">true</span>,</span><br><span class="line">  poll: <span class="literal">false</span>, <span class="comment">// https://webpack.js.org/configuration/dev-server/#devserver-watchoptions-</span></span><br><span class="line"></span><br><span class="line">  <span class="comment">// Use Eslint Loader?</span></span><br><span class="line">  <span class="comment">// If true, your code will be linted during bundling and</span></span><br><span class="line">  <span class="comment">// linting errors and warnings will be shown in the console.</span></span><br><span class="line">  useEslint: <span class="literal">false</span>,</span><br><span class="line">  <span class="comment">// If true, eslint errors and warnings will also be shown in the error overlay</span></span><br><span class="line">  <span class="comment">// in the browser.</span></span><br><span class="line">  showEslintErrorsInOverlay: <span class="literal">false</span>,</span><br><span class="line"></span><br><span class="line">  <span class="comment">/**</span></span><br><span class="line"><span class="comment">   * Source Maps</span></span><br><span class="line"><span class="comment">   */</span></span><br><span class="line"></span><br><span class="line">  <span class="comment">// https://webpack.js.org/configuration/devtool/#development</span></span><br><span class="line">  devtool: <span class="string">'cheap-module-eval-source-map'</span>,</span><br><span class="line"></span><br><span class="line">  <span class="comment">// If you have problems debugging vue-files in devtools,</span></span><br><span class="line">  <span class="comment">// set this to false - it *may* help</span></span><br><span class="line">  <span class="comment">// https://vue-loader.vuejs.org/en/options.html#cachebusting</span></span><br><span class="line">  cacheBusting: <span class="literal">true</span>,</span><br><span class="line"></span><br><span class="line">  cssSourceMap: <span class="literal">true</span></span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure></li><li><p>target就是要代理到的目标地址，changeOrigin的意思相比不必多说了。至于pathRewrite，就是在这个例子中，比如/Home/Index就会映射到<a href="https://lit-plains-29389.herokuapp.com/Home/Index" target="_blank" rel="noopener">https://lit-plains-29389.herokuapp.com/Home/Index</a>,<br>而如果开启了这个选项，比如第二个，假设/api/Home/Index,则会映射到<a href="https://lit-plains-29389.herokuapp.com/Home/Index。" target="_blank" rel="noopener">https://lit-plains-29389.herokuapp.com/Home/Index。</a></p></li><li><p>简单点说就是做一个替换</p></li><li><p>说明：我的vue-cli所在的端口是localhos:8080</p></li></ul><h4 id="cli3"><a href="#cli3" class="headerlink" title="cli3"></a>cli3</h4><ul><li>cli3 和cli2 有一定的区别，就是cli3没有了配置文件，那么我们需要自己去配置</li><li><ol><li>在根目录新建 vue.config.js 这个文件作为配置文件</li></ol></li><li><ol start="2"><li>写入配置代码<figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br></pre></td><td class="code"><pre><span class="line"><span class="built_in">module</span>.exports = &#123;</span><br><span class="line">  <span class="comment">// 修改的配置</span></span><br><span class="line">  <span class="comment">// 将baseUrl: '/api',改为baseUrl: '/',</span></span><br><span class="line">  baseUrl: <span class="string">'/'</span>,</span><br><span class="line">  devServer: &#123;</span><br><span class="line">    proxy: &#123; <span class="comment">// 代理跨域</span></span><br><span class="line">      <span class="string">'/api'</span>: &#123; <span class="comment">// 代理url关键字</span></span><br><span class="line">        target: <span class="string">'http://localhost:5000'</span>, <span class="comment">// 需要代理的地址</span></span><br><span class="line">        changeOrigin: <span class="literal">true</span>, <span class="comment">// 是否跨域</span></span><br><span class="line">        pathRewrite: &#123; <span class="comment">// 用来做字节更换，比如接口没有api的，那我们前端调用接口用api开头，在这里就把api替换为空，那就和后端结合了，如果不需要那就不加这个</span></span><br><span class="line">          <span class="string">'^/api'</span>: <span class="string">''</span></span><br><span class="line">        &#125;</span><br><span class="line">      &#125;</span><br><span class="line">    &#125;</span><br><span class="line">  &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure></li></ol></li></ul>]]></content>
      
      
      <categories>
          
          <category> Vue </category>
          
      </categories>
      
      
        <tags>
            
            <tag> Vue笔记 </tag>
            
        </tags>
      
    </entry>
    
    <entry>
      <title>hexo 装修地址</title>
      <link href="/2018/11/09/2018-11-09(2)/"/>
      <url>/2018/11/09/2018-11-09(2)/</url>
      
        <content type="html"><![CDATA[<link rel="stylesheet" class="aplayer-secondary-style-marker" href="/assets/css/APlayer.min.css"><script src="/assets/js/APlayer.min.js" class="aplayer-secondary-script-marker"></script><p><a href="https://zhuanlan.zhihu.com/p/28128674" target="_blank" rel="noopener">知乎 hexonext 主题</a><br><a href="https://blog.vinlic.com/p/56088/" target="_blank" rel="noopener">添加页面 3d 动画</a><br><a href="https://www.xiaocoder.com/2018/07/15/hexo-blog-optimizing-guide/" target="_blank" rel="noopener">xiao’sblog 优化</a><br><a href="https://asdfv1929.github.io/2018/05/26/next-add-music/" target="_blank" rel="noopener">添加主题音乐</a><br><a href="https://www.jianshu.com/p/4e094e41c1ab" target="_blank" rel="noopener">主题添加分类</a><br><a href="https://www.jianshu.com/p/393d067dba8d" target="_blank" rel="noopener">主题不显示全文</a><br><a href="https://www.jianshu.com/p/7e30afa09fab" target="_blank" rel="noopener">添加侧边栏小图标</a><br><a href="http://blog.hlz.space/tags/next%E4%B8%BB%E9%A2%98/" target="_blank" rel="noopener">hester 博客优化</a></p>]]></content>
      
      
      <categories>
          
          <category> Hexo </category>
          
      </categories>
      
      
        <tags>
            
            <tag> Hexo装修 </tag>
            
        </tags>
      
    </entry>
    
    <entry>
      <title>ngrok 外网映射 （解决测试时外部无法访问本地网站的）</title>
      <link href="/2018/11/09/2018-11-09/"/>
      <url>/2018/11/09/2018-11-09/</url>
      
        <content type="html"><![CDATA[<link rel="stylesheet" class="aplayer-secondary-style-marker" href="/assets/css/APlayer.min.css"><script src="/assets/js/APlayer.min.js" class="aplayer-secondary-script-marker"></script><h1 id="日常开发坑"><a href="#日常开发坑" class="headerlink" title="日常开发坑"></a>日常开发坑</h1><ul><li>在我们做开发的同学们很多时候开发好了一个项目之后发现只是可以再电脑内部去查看或者是通过本地端口设置同一网络下查看业务</li><li>那么我们肯定会想上到线上项目不需要在同一网络下也可以去访问</li><li>那么第一时间我们肯定是会想到 云端服务器 阿里云/新浪云/腾讯云等很多的网上服务器</li><li>对的我也想到了，当是首先<ul><li>网上服务器要钱买</li><li>网上服务器要配置</li></ul></li><li>再想想我就想丢上去看看而已替换成外网测试一下看看行不行<ul><li>买服务器不是买一天两天想着应该用不完</li></ul></li></ul><h1 id="那么我就发现了一个好用的东西-ngrok-外网映射"><a href="#那么我就发现了一个好用的东西-ngrok-外网映射" class="headerlink" title="那么我就发现了一个好用的东西 ngrok 外网映射"></a>那么我就发现了一个好用的东西 ngrok 外网映射</h1><ul><li>ngrok 并不是真的就把项目就挂载到了网上</li><li>是通过 映射端口 把本地端口映射到了外网</li><li>所以当我们吧 ngrok 关闭 或者是 本地的服务关闭了后就会断开</li></ul><h1 id="在使用之前要有-apache-服务器"><a href="#在使用之前要有-apache-服务器" class="headerlink" title="在使用之前要有 apache 服务器"></a>在使用之前要有 apache 服务器</h1><ul><li>（mac 是自带的 win 自己安装 配置这里我就不说虽然 mac 自带但是我弄了好久现在不想再去说了 ） </li><li>（也不一定非要用 apache 服务器的因为是映射端口有开启服务就好）</li><li>把项目部署到了 apache 服务器</li><li>开启服务 本地查看是否可以运行</li></ul><h1 id="说了那么多废话现在开始走进-ngrok-的世界"><a href="#说了那么多废话现在开始走进-ngrok-的世界" class="headerlink" title="说了那么多废话现在开始走进 ngrok 的世界"></a>说了那么多废话现在开始走进 ngrok 的世界</h1><ul><li><a href="https://ngrok.com/download" target="_blank" rel="noopener">ngrok 下载官网</a></li><li>不急着下载因为后面的步骤需要用到全局配置 所有先注册一个账号 有 github 的可以直接登录</li><li>然后点击 download 那个下载就好啦</li><li>把安装包下载下来之后手动解压就可以了</li><li>然后打开终端 在解压出 ngrok 的文件夹下执行配置</li><li>./ngrok authtoken 3fW4eXHdUN3ziCBXcahZ_3tnDdaTyLw8tKzJtKZkLp 3 开头这一段每个人都不同的根据登录的账号会有提示的</li><li>最后一步就是 映射端口 根据你本地开启的端口而定 ./ngrok http 80 （开启的是 80 端口就用 80 端口，默认 apache 是 80 端口）</li></ul><h1 id="前面那么多字懒得看看不懂的还是来看图解把"><a href="#前面那么多字懒得看看不懂的还是来看图解把" class="headerlink" title="前面那么多字懒得看看不懂的还是来看图解把"></a>前面那么多字懒得看看不懂的还是来看图解把</h1><p><img src="/ngrok/ngrok1.png" alt="ngrok"><br><img src="/ngrok/ngrok2.png" alt="ngrok"><br><img src="/ngrok/ngrok3.png" alt="ngrok"><br><img src="/ngrok/ngrok4.png" alt="ngrok"><br><img src="/ngrok/ngrok5.png" alt="ngrok"></p>]]></content>
      
      
      <categories>
          
          <category> 插件/配置 </category>
          
      </categories>
      
      
        <tags>
            
            <tag> 外网映射 </tag>
            
        </tags>
      
    </entry>
    
    <entry>
      <title>Vue-cli安装/使用</title>
      <link href="/2018/11/07/vue-cli/"/>
      <url>/2018/11/07/vue-cli/</url>
      
        <content type="html"><![CDATA[<link rel="stylesheet" class="aplayer-secondary-style-marker" href="/assets/css/APlayer.min.css"><script src="/assets/js/APlayer.min.js" class="aplayer-secondary-script-marker"></script><h1 id="vue-cli-vue-脚手架"><a href="#vue-cli-vue-脚手架" class="headerlink" title="vue-cli(vue 脚手架)"></a>vue-cli(vue 脚手架)</h1><ul><li>在开发得时候用 vue 做开发但是写多了感觉能不能一开始就有现成得不用去配置拿来就能用</li><li>真的有 vue-cli vue 脚手架</li></ul><h1 id="不说那么多直接开干"><a href="#不说那么多直接开干" class="headerlink" title="不说那么多直接开干"></a>不说那么多直接开干</h1><ol><li>确保电脑有安装 node/npm （不多说不懂去标签 node 找 node 安装）<a href="https://yhf7.github.io/2018/10/17/npm-Plug-in/#more" target="_blank" rel="noopener">地址</a></li><li>使用 vue-cli 是以来 webpack 使用得所以安装 webpack 先<ul><li>以往用 webpack 直接安装就行</li><li>webpack 4.x 开始要以来 webpack-cli 依赖</li><li>全局安装 webpack 和 webpack-cli</li><li>sudo npm install webpack webpack-cli -g</li><li>安装完 webpack -v 看看安装到了没有</li></ul></li><li>千新万苦终于搞完前面现在安装 vue-cli<ul><li>sudo npm install –global vue-cli</li><li>安装完 vue -v 查看版本</li></ul></li><li>不多说装完直接使用<ul><li>进入到你要开发的磁盘位置 先去那里就去那里</li><li>sudo vue init webpack baoge (这个 baoge 就是项目的名字自己定)</li><li>然后就到了后面的配置项了</li><li>Project name (baoge)： —–项目名称，直接回车，按照括号中默认名字（注意这里的名字不能有大写字母，如果有会报错 Sorry, name can no longer contain capital letters），阮一峰老师博客为什么文件名要小写 ，可以参考一下。</li><li>Project description (A Vue.js project)： —-项目描述，也可直接点击回车，使用默认名字</li><li>Author ()： —-作者，输入你的大名</li><li>接下来会让用户选择：</li><li>Runtime + Compiler: recommended for most users 运行加编译，既然已经说了推荐，就选它了</li><li>Runtime-only: about 6KB lighter min+gzip, but templates (or any Vue-specificHTML) are ONLY allowed in .vue files - render functions are required elsewhere 仅运行时，已经有推荐了就选择第一个了</li><li>Install vue-router? (Y/n) 是否安装 vue-router，这是官方的路由，大多数情况下都使用，这里就输入“y”后回车即可。</li><li>Use ESLint to lint your code? (Y/n) 是否使用 ESLint 管理代码，ESLint 是个代码风格管理工具，是用来统一代码风格的，一般项目中都会使用。</li><li>接下来也是选择题 Pick an ESLint preset (Use arrow keys) 选择一个 ESLint 预设，编写 vue 项目时的代码风格，直接 y 回车</li><li>Setup unit tests with Karma + Mocha? (Y/n) 是否安装单元测试，我选择安装 y 回车</li><li>Setup e2e tests with Nightwatch(Y/n)? 是否安装 e2e 测试 ，我选择安装 y 回车</li></ul></li><li>不想死的 UseESLint to lint your code 必须输入 n 不然标准模式下会让你痛不欲生（觉得自己代码很他妈规范的就用吧）</li><li>不过即使一开始的时候没有注意到点击了确定开启了 eslint 也不用怕，教你如何关闭 ESLint<ul><li>在项目中找到 config 文件夹，进入文件夹</li><li>找到 index.js 文件</li><li>在大概 26 行左右的位置 useEslint:true 会有这么一句命令 改为 false 就好啦 useEslint:false</li><li>记住这个东西是用 webpack 执行的如果是开启服务的时候修改请重启一下服务</li></ul></li><li>还有一个方法可以不用关掉这个 eslint 就是安装插件让它自动的帮你检查格式化<ul><li>使用的编程软件是 vs code 微软出的</li><li>安装什么插件我就不详细说了，点下面链接自己琢磨</li><li><a href="https://juejin.im/post/5be5429de51d4511a808f4ac" target="_blank" rel="noopener">插件地址</a></li></ul></li></ol><h1 id="vue-cli3-开启项目方法"><a href="#vue-cli3-开启项目方法" class="headerlink" title="vue-cli3 开启项目方法"></a>vue-cli3 开启项目方法</h1><ol><li><p>开启项目(my-project自定义)</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">$ vue create my-project</span><br></pre></td></tr></table></figure></li><li><p>选择模式 （一般选择第二个）</p></li></ol><ul><li>default (babel, eslint) 默认套餐，提供 babel 和 eslint 支持。</li><li>Manually select features 自己去选择需要的功能，提供更多的特性选择。比如如果想要支持 TypeScript ，就应该选择这一项。</li></ul><ol start="3"><li>选择配置（可以多选：使用方向键在特性选项之间切换，使用空格键选中当前特性，使用 a 键切换选择所有，使用 i 键翻转选项。）</li></ol><ul><li>TypeScript 支持使用 TypeScript 书写源码。</li><li>Progressive Web App (PWA) Support PWA 支持。</li><li>Router 支持 vue-router 。</li><li>Vuex 支持 vuex 。</li><li>CSS Pre-processors 支持 CSS 预处理器。</li><li>Linter / Formatter 支持代码风格检查和格式化。</li><li>Unit Testing 支持单元测试。</li><li>E2E Testing 支持 E2E 测试。</li></ul><ol start="4"><li>一路按照需求选</li><li>启动项目</li></ol><ul><li>cd my-project</li><li>npm run serve</li></ul>]]></content>
      
      
      <categories>
          
          <category> 插件/配置 </category>
          
      </categories>
      
      
        <tags>
            
            <tag> vue插件 </tag>
            
        </tags>
      
    </entry>
    
    <entry>
      <title>node/php使用心得</title>
      <link href="/2018/11/07/2018-11-07/"/>
      <url>/2018/11/07/2018-11-07/</url>
      
        <content type="html"><![CDATA[<link rel="stylesheet" class="aplayer-secondary-style-marker" href="/assets/css/APlayer.min.css"><script src="/assets/js/APlayer.min.js" class="aplayer-secondary-script-marker"></script><p>今天有个师弟让我写一个用户注册权限的后端服务，第一个想法是用node，但是他的服务端没有node，只有php，可能是我很久没有写php的代码所以写起来还是很不习惯，写node的时候只是关心，接口，业务逻辑，操作数据库分开三步写很顺手，但是用php写，顿时脑子是比较空白的，长时间不去使用一个语言突然就要去写真的就会想不起来这么写好，只能看着以前写过的服务一点一点的拿起来，虽然是写出来了但是感觉用起来还是觉得node比php好用，虽然用起来都是比较简单</p><p>node 判断路由-&gt;业务逻辑-&gt;数据库操作<br>php 业务逻辑-&gt;数据库操作</p>]]></content>
      
      
      <categories>
          
          <category> 个人 </category>
          
      </categories>
      
      
        <tags>
            
            <tag> 个人 </tag>
            
        </tags>
      
    </entry>
    
    <entry>
      <title>完成YHF-Vue项目心得</title>
      <link href="/2018/11/04/2018-11-04/"/>
      <url>/2018/11/04/2018-11-04/</url>
      
        <content type="html"><![CDATA[<link rel="stylesheet" class="aplayer-secondary-style-marker" href="/assets/css/APlayer.min.css"><script src="/assets/js/APlayer.min.js" class="aplayer-secondary-script-marker"></script><p>完成了vue项目的时候，内心是很开心的，终于做成了一个小项目了，从当初的只是一个界面到，后面要去写后端，但是一开始不会写后端接口，那个时候真的很烦躁，后来发现了一个别人写好的跨域交互的案例，就打开来看学着别人的去写，那时候发现噢原来我自己也是可以用node去写后端的接口的喔，那时候就用node去写接口，顺着别人的思路和骨架去写，后面发现不单止要写后端接口还要去操作数据库，虽然我会一点点数据库操作，但是我对数据库的设计并不是非常的了解，只可以边写前端的页面需要用到什么的时候，看着教程的项目接口自己去设计和操作数据库，一开始也是很多碰壁的，设计好数据库图片数据用什么方式存呢也想了很久，后面就是操作数据库查询，也是一点一点的写上网查询慢慢的去改进，解决了后端的事情还是继续去写前端，就是一次又一次的写前端页面-&gt;接口-&gt;操作数据-&gt;获取返回数据，在这个时候我发现其实做后端开发也是不容易虽然说是分好路由、业务逻辑、操作数据库，但是还是挺苦的，慢慢端熟悉了其实也觉得没什么吧，在写前端页面的时候虽然是跟着教程做但是也是出现了很多的bug，也是让我很苦恼，这只是一个小小的项目就让我心态都要奔溃了，这个购物商场也还是没有写完的呢还有很多的功能可以完善，其实我很想说项目写到了后面前面的好像又忘记了，我的天啊这样着么在it界混下去呢；<br>很多的技术好像都学过但是到了用的时候发现自己脑子里面好像什么都没有，好像自己从来都没有接触过一样，一步一步慢慢的走吧！准备写一个博客的小项目</p>]]></content>
      
      
      <categories>
          
          <category> 个人 </category>
          
      </categories>
      
      
        <tags>
            
            <tag> 个人 </tag>
            
        </tags>
      
    </entry>
    
    <entry>
      <title>Vue day10</title>
      <link href="/2018/11/04/Vue-day10/"/>
      <url>/2018/11/04/Vue-day10/</url>
      
        <content type="html"><![CDATA[<link rel="stylesheet" class="aplayer-secondary-style-marker" href="/assets/css/APlayer.min.css"><script src="/assets/js/APlayer.min.js" class="aplayer-secondary-script-marker"></script><h2 id="开启Apache的gzip压缩"><a href="#开启Apache的gzip压缩" class="headerlink" title="开启Apache的gzip压缩"></a>开启Apache的gzip压缩</h2><p>要让apache支持gzip功能，要用到deflate_Module和headers_Module。打开apache的配置文件httpd.conf，大约在105行左右，找到以下两行内容：（这两行不是连续在一起的）<br><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">#LoadModule deflate_module modules/mod_deflate.so</span><br><span class="line">#LoadModule headers_module modules/mod_headers.so</span><br></pre></td></tr></table></figure></p><p>然后将其前面的“#”注释删掉，表示开启gzip压缩功能。开启以后还需要进行相关配置。在httpd.conf文件的最后添加以下内容即可：<br><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line">&lt;IfModule deflate_module&gt;</span><br><span class="line">    #必须的，就像一个开关一样，告诉apache对传输到浏览器的内容进行压缩</span><br><span class="line">    SetOutputFilter DEFLATE</span><br><span class="line">    DeflateCompressionLevel 9</span><br><span class="line">&lt;/IfModule&gt;</span><br></pre></td></tr></table></figure></p><p>最少需要加上以上内容，才可以生gzip功能生效。由于没有做其它的额外配置，所以其它相关的配置均使用Apache的默认设置。这里说一下参数“DeflateCompressionLevel”，它表示压缩级别，值从1到9，值越大表示压缩的越厉害。</p><h2 id="使用ngrok将本机映射为一个外网的Web服务器"><a href="#使用ngrok将本机映射为一个外网的Web服务器" class="headerlink" title="使用ngrok将本机映射为一个外网的Web服务器"></a>使用ngrok将本机映射为一个外网的Web服务器</h2><p>注意：由于默认使用的美国的服务器进行中间转接，所以访问速度炒鸡慢，访问时可启用FQ软件，提高网页打开速度！</p>]]></content>
      
      
      <categories>
          
          <category> Vue </category>
          
      </categories>
      
      
        <tags>
            
            <tag> Vue笔记 </tag>
            
        </tags>
      
    </entry>
    
    <entry>
      <title>YHF-Vue 前后端交互 购物城项目</title>
      <link href="/2018/11/04/yhf-vue/"/>
      <url>/2018/11/04/yhf-vue/</url>
      
        <content type="html"><![CDATA[<link rel="stylesheet" class="aplayer-secondary-style-marker" href="/assets/css/APlayer.min.css"><script src="/assets/js/APlayer.min.js" class="aplayer-secondary-script-marker"></script><h1 id="案例分布"><a href="#案例分布" class="headerlink" title="案例分布"></a>案例分布</h1><ul><li>前端 (2.vue-cms)<ul><li>webpack</li><li>vue</li></ul></li><li>后端 (node_server)<ul><li>node</li></ul></li><li>数据库 (VueUser.sql)<ul><li>mysql</li></ul></li><li>后端接口api</li><li><a href="https://yhf7.github.io/2018/10/17/npm-Plug-in/" target="_blank" rel="noopener">插件安装配置</a></li><li><a href="https://github.com/YHF7/Vue/tree/master/YHF-vue" target="_blank" rel="noopener">完整项目下载Github</a></li><li><a href="https://gitee.com/yhf7/vue0001" target="_blank" rel="noopener">码云前端地址</a></li><li><a href="https://gitee.com/yhf7/node" target="_blank" rel="noopener">码云后端地址</a></li><li>更多vue学习请看 vue1-vue11笔记</li></ul><h1 id="YHF·Vue-项目-说明"><a href="#YHF·Vue-项目-说明" class="headerlink" title="YHF·Vue 项目 说明"></a>YHF·Vue 项目 说明</h1><ol><li>初始化项目<ul><li>搭建基础架构</li><li>安装依赖</li><li>测试架构能否执行</li></ul></li><li><p>搭建项目主页</p><ul><li>主页头部 Header,使用 MintUI 的 Header 组件</li><li>主页底部 Tabbar,使用 MUI 的 Tabbar.html<ul><li>在制作 购物车 小图标的时候，操作会相对多一些：</li><li>先把 扩展图标的 css 样式，拷贝到 项目中</li><li>拷贝 扩展字体库 ttf 文件，到项目中</li><li>为 购物车 小图标 ，添加 如下样式 <code>mui-icon mui-icon-extra mui-icon-extra-cart</code></li></ul></li><li>要在 中间区域放一个 router-view 来展示路由匹配到的区域</li><li>改造 tabbar 为 router-link</li><li>实现路由切换高亮 linkActiveClass: ‘mui-active’ // 覆盖默认的路由高亮的类</li><li>点击 tabbar 中的路由链接，展示对应的路由组件<ul><li>导入对应的组件</li><li>配置路由</li><li>在 app.vue 插入 router-view</li></ul></li><li>添加轮播图</li><li>加载首页轮播图数据<ul><li>获取数据， 如何获取呢， 使用 vue-resource</li><li>使用 vue-resource 的 this.$http.get 获取数据</li><li>获取到的数据，要保存到 data 身上</li><li>使用 v-for 循环渲染 每个 item 项</li></ul></li><li>改造 九宫格 区域的样式</li><li>改造 新闻资讯 路由链接</li><li>新闻资讯 页面 制作<ol><li>绘制界面， 使用 MUI 中的 media-list.html</li><li>使用 vue-resource 获取数据</li><li>渲染真实数据</li></ol></li><li><p>实现 新闻资讯列表 点击跳转到新闻详情</p><ol><li>把列表中的每一项改造为 router-link,同时，在跳转的时候应该提供唯一的 Id 标识符</li><li>创建新闻详情的组件页面 NewsInfo.vue</li><li>在 路由模块中，将 新闻详情的 路由地址 和 组件页面对应起来</li></ol></li><li><p>实现 新闻详情 的 页面布局 和数据渲染</p></li><li><p>单独封装一个 comment.vue 评论子组件</p><ol><li>先创建一个 单独的 comment.vue 组件模板</li><li>在需要使用 comment 组件的 页面中，先手动 导入 comment 组件</li></ol><ul><li><code>import comment from &#39;./comment.vue&#39;</code></li></ul><ol start="3"><li>在父组件中，使用 <code>components</code> 属性，将刚才导入 comment 组件，注册为自己的 子组件</li><li>将注册子组件时候的，注册名称，以 标签形式，在页面中 引用即可</li></ol></li><li><p>获取所有的评论数据显示到页面中</p></li><li><p>实现点击加载更多评论的功能</p><ol><li>为加载更多按钮，绑定点击事件，在事件中，请求 下一页数据</li><li>点击加载更多，让 pageIndex++ , 然后重新调用 this.getComments() 方法重新获取最新一页的数据</li><li>为了防止 新数据 覆盖老数据的情况，我们在 点击加载更多的时候，每当获取到新数据，应该让 老数据 调用 数组的 concat 方法，拼接上新数组</li></ol></li><li><p>发表评论</p><ol><li>把文本框做双向数据绑定</li><li>为发表按钮绑定一个事件</li><li>校验评论内容是否为空，如果为空，则 Toast 提示用户 评论内容不能为空</li><li>通过 vue-resource 发送一个请求，把评论内容提交给 服务器</li><li>当发表评论 OK 后，重新刷新列表，以查看最新的评论</li></ol><ul><li>如果调用 getComments 方法重新刷新评论列表的话，可能只能得到 最后一页的评论，前几页的评论获取不到</li><li>换一种思路： 当评论成功后，在客户端，手动拼接出一个 最新的评论对象，然后 调用 数组的 unshift 方法， 把最新的评论，追加到 data 中 comments 的开头；这样，就能 完美实现刷新评论列表的需求；</li></ul></li><li><p>改造图片分析 按钮为 路由的链接并显示对应的组件页面</p></li><li><p>绘制 图片列表 组件页面结构并美化样式</p><ol><li>制作 顶部的滑动条</li><li>制作 底部的图片列表</li></ol></li><li><p>制作顶部滑动条的坑们：</p><ol><li>需要借助于 MUI 中的 tab-top-webview-main.html</li><li>需要把 slider 区域的 mui-fullscreen 类去掉</li><li><p>滑动条无法正常触发滑动，通过检查官方文档，发现这是 JS 组件，需要被初始化一下：</p><ul><li>导入 mui.js</li><li>调用官方提供的 方式 去初始化：<figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line">mui(&apos;.mui-scroll-wrapper&apos;).scroll(&#123;</span><br><span class="line">  deceleration: 0.0005 //flick 减速系数，系数越大，滚动速度越慢，滚动距离越小，默认值0.0006</span><br><span class="line">&#125;);</span><br></pre></td></tr></table></figure></li></ul></li><li><p>我们在初始化 滑动条 的时候，导入的 mui.js ，但是，控制台报错： <code>Uncaught TypeError: &#39;caller&#39;, &#39;callee&#39;, and &#39;arguments&#39; properties may not be accessed on strict mode</code></p><ul><li>经过我们合理的推测，觉得，可能是 mui.js 中用到了 ‘caller’, ‘callee’, and ‘arguments’ 东西，但是， webpack 打包好的 bundle.js 中，默认是启用严格模式的，所以，这两者冲突了；</li><li>解决方案： 1. 把 mui.js 中的 非严格 模式的代码改掉；但是不现实； 2. 把 webpack 打包时候的严格模式禁用掉；</li><li>最终，我们选择了 plan B 移除严格模式： 使用这个插件 babel-plugin-transform-remove-strict-mode</li></ul></li><li>刚进入 图片分享页面的时候， 滑动条无法正常工作， 经过我们认真的分析，发现， 如果要初始化 滑动条，必须要等 DOM 元素加载完毕，所以，我们把 初始化 滑动条 的代码，搬到了 mounted 生命周期函数中；</li><li>当 滑动条 调试 OK 后，发现， tabbar 无法正常工作了，这时候，我们需要把 每个 tabbar 按钮的 样式中 <code>mui-tab-item</code> 重新改一下名字；</li><li>获取所有分类，并渲染 分类列表；</li></ol></li><li><p>制作图片列表区域</p><ol><li>图片列表需要使用懒加载技术，我们可以使用 Mint-UI 提供的现成的 组件 <code>lazy-load</code></li><li>根据<code>lazy-load</code>的使用文档，尝试使用</li><li>渲染图片列表数据</li></ol></li><li><p>实现了 图片列表的 懒加载改造和 样式美化</p></li><li><p>实现了 点击图片 跳转到 图片详情页面</p><ol><li>在改造 li 成 router-link 的时候，需要使用 tag 属性指定要渲染为 哪种元素</li></ol></li><li><p>实现 详情页面的布局和美化，同时获取数据渲染页面</p></li><li><p>实现 图片详情中 缩略图的功能</p><ol><li>使用 插件 vue-preview 这个缩略图插件</li><li>获取到所有的图片列表，然后使用 v-for 指令渲染数据</li><li>注意： img 标签上的 class 不能去掉</li><li>注意： 每个 图片数据对象中，必须有 w 和 h 属性</li></ol></li><li><p>绘制 商品列表 页面基本结构并美化</p></li><li><p>尝试在手机上 去进行项目的预览和测试</p><ol><li>要保证自己的手机可以正常运行；</li><li>要保证 手机 和 开发项目的电脑 处于同一个 WIFI 环境中，也就是说 手机 可以 访问到 电脑的 IP</li><li>打开自己的 项目中 package.json 文件，在 dev 脚本中，添加一个 –host 指令， 把 当前 电脑的 WIFI IP 地址， 设置为 –host 的指令值；</li></ol></li><li><p>如何查看自己电脑所处 WIFI 的 IP 呢， 在 cmd 终端中运行 <code>ipconfig</code> ， 查看 无线网的 ip 地址</p></li></ul></li><li><p>把项目 git 远端存储库</p></li></ol><ul><li><a href="https://blog.csdn.net/testcs_dn/article/details/38496107" target="_blank" rel="noopener">开源协议</a></li><li><a href="https://www.liaoxuefeng.com/wiki/0013739516305929606dd18361248578c67b8067c8c017b000/00150154460073692d151e784de4d718c67ce836f72c7c4000" target="_blank" rel="noopener">廖雪峰教 git</a></li><li>初始化 git<ul><li>sudo git init</li><li>sudo git status</li><li>sudo git add .</li><li>sudo git commit -m “add init”</li><li>sudo git remote add origin <a href="https://github.com/YHF7/YHF7.github.io.git" target="_blank" rel="noopener">https://github.com/YHF7/YHF7.github.io.git</a></li><li>sudo git push -u origin master</li></ul></li></ul><h1 id="案例效果图"><a href="#案例效果图" class="headerlink" title="案例效果图"></a>案例效果图</h1><p><img src="/yhf-vue/yhf-vue1.png" alt="yhf-vue"><br><img src="/yhf-vue/yhf-vue2.png" alt="yhf-vue"><br><img src="/yhf-vue/yhf-vue3.png" alt="yhf-vue"><br><img src="/yhf-vue/yhf-vue4.png" alt="yhf-vue"><br><img src="/yhf-vue/yhf-vue5.png" alt="yhf-vue"><br><img src="/yhf-vue/yhf-vue6.png" alt="yhf-vue"><br><img src="/yhf-vue/yhf-vue7.png" alt="yhf-vue"></p>]]></content>
      
      
      <categories>
          
          <category> Vue </category>
          
      </categories>
      
      
        <tags>
            
            <tag> Vue 案例 </tag>
            
        </tags>
      
    </entry>
    
    <entry>
      <title>Vue/node 前后台交互演练</title>
      <link href="/2018/10/26/Vue-interactive/"/>
      <url>/2018/10/26/Vue-interactive/</url>
      
        <content type="html"><![CDATA[<link rel="stylesheet" class="aplayer-secondary-style-marker" href="/assets/css/APlayer.min.css"><script src="/assets/js/APlayer.min.js" class="aplayer-secondary-script-marker"></script><h1 id="前后台交互"><a href="#前后台交互" class="headerlink" title="前后台交互"></a>前后台交互</h1><ul><li>在我们做项目的时候，会分为前端和后端<ul><li>前端：前端负责界面</li><li>后端：后端负责数据处理</li></ul></li><li>前端会有很多的框架和交互的方式<ul><li>在我们做数据交互的时候 会碰到跨域的问题</li><li>当你使用 vue 作为页面框架的时候 就会开启前端的 vue 的 npm 服务</li><li>当你使用 node 作为页面后端的服务器的时候 就会开启后端 的 node 服务</li></ul></li><li>那么问题就来了 当你开启 npm 服务 和 node 服务的时候 分别都有两个端口<ul><li>vue的 npm端口 去获取 node得服务得时候 就会出现在两个不同得服务处在不同得域内</li><li>这样就出现了跨域问题了</li></ul></li><li>既然出现了跨域问题，那么着么去解决这个跨域得问题呢<ol><li>方法一：在后端服务中设置请求报文头</li><li>方法二：在 vue 的 webpack 中的配置文件中设置代理跨域 （不会暂时不写）</li></ol></li></ul><h1 id="后台服务设置跨域-设置请求报文头就可以"><a href="#后台服务设置跨域-设置请求报文头就可以" class="headerlink" title="后台服务设置跨域(设置请求报文头就可以)"></a>后台服务设置跨域(设置请求报文头就可以)</h1><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">//2.0 将所有api的请求响应content-type设置为application/json</span></span><br><span class="line">app.all(<span class="string">'/api/*'</span>, (req, res, next) =&gt; &#123;</span><br><span class="line">  <span class="comment">//设置允许跨域响应报文头</span></span><br><span class="line">  <span class="comment">//设置跨域</span></span><br><span class="line">  <span class="comment">// 启用 Node 服务器端的 cors 跨域</span></span><br><span class="line">  res.header(<span class="string">"Access-Control-Allow-Origin"</span>, <span class="string">"*"</span>);</span><br><span class="line">  res.header(<span class="string">"Access-Control-Allow-Headers"</span>, <span class="string">"X-Requested-With"</span>);</span><br><span class="line">  res.header(<span class="string">"Access-Control-Allow-Methods"</span>, <span class="string">"*"</span>);</span><br><span class="line"></span><br><span class="line">  res.setHeader(<span class="string">'Content-Type'</span>, <span class="string">'application/json;charset=utf-8'</span>);</span><br><span class="line">  next();</span><br><span class="line">&#125;);</span><br></pre></td></tr></table></figure><h1 id="项目演练"><a href="#项目演练" class="headerlink" title="项目演练"></a>项目演练</h1><ol><li>项目地址<ul><li><a href="https://github.com/YHF7/Vue/tree/master/vue%E5%89%8D%E5%90%8E%E5%8F%B0%E4%BA%A4%E4%BA%92" target="_blank" rel="noopener">Vue与Node交互项目演练</a></li></ul></li><li>使用项目<ul><li>把地址里面都 vue-jh 这个包下载下来（用迅雷可以直接下载）</li><li>项目分布<ul><li>vue-tepmlate 是 vue 的前端案例<ul><li>index.html 是渲染的主页（留坑）</li><li>App.vue 是主页 vue 模块</li><li>main.js 是业务逻辑</li><li>router.js 路由</li><li>webpack.config.js 是 vue webpack 的配置文件</li></ul></li><li>node_server 是 node 的后端服务<ul><li>app.js 是node 服务</li><li>controller.js 业务逻辑</li><li>model.js 操作数据库</li><li>router.js 路由</li></ul></li><li>分别打开这两个文件在终端安装依赖<ul><li>suco cnpm i (安装依赖包)</li></ul></li><li>分别开启服务<ul><li>vue-tepmlate<ul><li>sudo npm run dev</li></ul></li><li>node_server<ul><li>sudo node app.js (或) sudo nodemon app.js</li></ul></li></ul></li><li>还有个最重要的是配置数据库<ul><li>在 node_serve 中的model.js 文件中配置本地的mysql数据库</li></ul></li></ul></li></ul></li></ol>]]></content>
      
      
      <categories>
          
          <category> Vue </category>
          
      </categories>
      
      
        <tags>
            
            <tag> 交互 </tag>
            
        </tags>
      
    </entry>
    
    <entry>
      <title>心态蹦</title>
      <link href="/2018/10/24/2018-10-24/"/>
      <url>/2018/10/24/2018-10-24/</url>
      
        <content type="html"><![CDATA[<link rel="stylesheet" class="aplayer-secondary-style-marker" href="/assets/css/APlayer.min.css"><script src="/assets/js/APlayer.min.js" class="aplayer-secondary-script-marker"></script><p>颓废了好几天的我今天终于下定决心要走出颓废的日子，我告诉自己在这样下去真的点就输了一辈子了，不想在这样颓废下去，遇到一点点的问题，就颓废这是作为一个十几岁的青年该有的的吗，为什么要这样下去<br>后端开发是啥 我要学过后台开发啊，为啥我就写不出来呢，接口？交互？ 这些我好像都学过啊， 但是 vue 与 node php 如何交互呢？ 作为主攻前端的 是应该花时间系统的去学习后端吗 ， node 刚学完啊， 为什么不去 用 node 呢<br>有想用 node 也有想用 php 但是着么写呢 这个交互的过程着么去做呢 就因为做个练习没有后台接口 颓废了好几天？ 虽然我还没有解决这个问题 但是我不想在这样下去了，我会输掉自己的 继续努力</p>]]></content>
      
      
      <categories>
          
          <category> 个人 </category>
          
      </categories>
      
      
        <tags>
            
            <tag> 个人 </tag>
            
        </tags>
      
    </entry>
    
    <entry>
      <title>Vue day8/9</title>
      <link href="/2018/10/24/Vue-day8%609/"/>
      <url>/2018/10/24/Vue-day8%609/</url>
      
        <content type="html"><![CDATA[<link rel="stylesheet" class="aplayer-secondary-style-marker" href="/assets/css/APlayer.min.css"><script src="/assets/js/APlayer.min.js" class="aplayer-secondary-script-marker"></script><h1 id="Promise"><a href="#Promise" class="headerlink" title="Promise"></a>Promise</h1><h2 id="Promise-概念"><a href="#Promise-概念" class="headerlink" title="Promise 概念"></a>Promise 概念</h2><ol><li>Promise 是一个 构造函数，既然是构造函数， 那么，我们就可以  new Promise() 得到一个 Promise 的实例；</li><li>在 Promise 上，有两个函数，分别叫做 resolve（成功之后的回调函数） 和 reject（失败之后的回调函数）</li><li>在 Promise 构造函数的 Prototype 属性上，有一个 .then() 方法，也就说，只要是 Promise 构造函数创建的实例，都可以访问到 .then() 方法</li><li>Promise 表示一个 异步操作；每当我们 new 一个 Promise 的实例，这个实例，就表示一个具体的异步操作；</li><li>既然 Promise 创建的实例，是一个异步操作，那么，这个 异步操作的结果，只能有两种状态：<ul><li>状态1： 异步执行成功了，需要在内部调用 成功的回调函数 resolve 把结果返回给调用者；</li><li>状态2： 异步执行失败了，需要在内部调用 失败的回调函数 reject 把结果返回给调用者；</li><li>由于 Promise 的实例，是一个异步操作，所以，内部拿到 操作的结果后，无法使用 return 把操作的结果返回给调用者； 这时候，只能使用回调函数的形式，来把 成功 或 失败的结果，返回给调用者；</li></ul></li><li>我们可以在 new 出来的 Promise 实例上，调用 .then() 方法，【预先】 为 这个 Promise 异步操作，指定 成功（resolve） 和 失败（reject） 回调函数；</li></ol><ul><li>注意：这里 new 出来的 promise， 只是代表 【形式上】的一个异步操作；</li><li>什么是形式上的异步操作：就是说，我们只知道它是一个异步操作，但是做什么具体的异步事情，目前还不清楚</li><li>var promise = new Promise()</li><li>每当 new 一个 Promise 实例的时候，就会立即 执行这个 异步操作中的代码</li><li>也就是说，new 的时候，除了能够得到 一个 promise 实例之外，还会立即调用 我们为 Promise 构造函数传递的那个 function，执行这个 function 中的 异步操作代码；</li></ul><h2 id="Promise-使用"><a href="#Promise-使用" class="headerlink" title="Promise 使用"></a>Promise 使用</h2><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">const</span> fs = <span class="built_in">require</span>(<span class="string">'fs'</span>)</span><br><span class="line"><span class="keyword">const</span> path = <span class="built_in">require</span>(<span class="string">'path'</span>)</span><br><span class="line"></span><br><span class="line"><span class="comment">// 定义一个promise</span></span><br><span class="line"><span class="comment">// 初衷： 给路径，返回读取到的内容</span></span><br><span class="line"><span class="function"><span class="keyword">function</span> <span class="title">getFileByPath</span>(<span class="params">fpath</span>) </span>&#123;</span><br><span class="line">  <span class="keyword">return</span> <span class="keyword">new</span> <span class="built_in">Promise</span>(<span class="function"><span class="keyword">function</span> (<span class="params">resolve, reject</span>) </span>&#123;</span><br><span class="line">    fs.readFile(fpath, <span class="string">'utf-8'</span>, (err, dataStr) =&gt; &#123;</span><br><span class="line"></span><br><span class="line">      <span class="keyword">if</span> (err) <span class="keyword">return</span> reject(err)</span><br><span class="line">      resolve(dataStr)</span><br><span class="line"></span><br><span class="line">    &#125;)</span><br><span class="line">  &#125;)</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"></span><br><span class="line">getFileByPath(path.join(__dirname, <span class="string">'./files/1.txt'</span>)</span><br><span class="line">  .then(<span class="function"><span class="keyword">function</span> (<span class="params">data</span>) </span>&#123; <span class="comment">// .then 成功时调用</span></span><br><span class="line">    <span class="built_in">console</span>.log(data + <span class="string">'-------'</span>)</span><br><span class="line">  &#125;, <span class="function"><span class="keyword">function</span> (<span class="params">err</span>) </span>&#123; <span class="comment">// 第二个函数 失败时调用</span></span><br><span class="line">    <span class="built_in">console</span>.log(err.message)</span><br><span class="line">  &#125;)</span><br></pre></td></tr></table></figure><h2 id="Promise-使用回调地狱"><a href="#Promise-使用回调地狱" class="headerlink" title="Promise 使用回调地狱"></a>Promise 使用回调地狱</h2><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">const</span> fs = <span class="built_in">require</span>(<span class="string">'fs'</span>)</span><br><span class="line"><span class="keyword">const</span> path = <span class="built_in">require</span>(<span class="string">'path'</span>)</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">function</span> <span class="title">getFileByPath</span>(<span class="params">fpath</span>) </span>&#123;</span><br><span class="line">  <span class="keyword">return</span> <span class="keyword">new</span> <span class="built_in">Promise</span>(<span class="function"><span class="keyword">function</span> (<span class="params">resolve, reject</span>) </span>&#123;</span><br><span class="line">    fs.readFile(fpath, <span class="string">'utf-8'</span>, (err, dataStr) =&gt; &#123;</span><br><span class="line"></span><br><span class="line">      <span class="keyword">if</span> (err) <span class="keyword">return</span> reject(err)</span><br><span class="line">      resolve(dataStr)</span><br><span class="line"></span><br><span class="line">    &#125;)</span><br><span class="line">  &#125;)</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"></span><br><span class="line">getFileByPath(<span class="string">'./files/1.txt'</span>)</span><br><span class="line">  .then(<span class="function"><span class="keyword">function</span> (<span class="params">data</span>) </span>&#123;</span><br><span class="line">    <span class="built_in">console</span>.log(data)</span><br><span class="line"></span><br><span class="line">    <span class="comment">// 读取文件2</span></span><br><span class="line">    <span class="keyword">return</span> getFileByPath(<span class="string">'./files/2.txt'</span>)</span><br><span class="line">  &#125;)</span><br><span class="line">  .then(<span class="function"><span class="keyword">function</span> (<span class="params">data</span>) </span>&#123;</span><br><span class="line">    <span class="built_in">console</span>.log(data)</span><br><span class="line"></span><br><span class="line">    <span class="keyword">return</span> getFileByPath(<span class="string">'./files/3.txt'</span>)</span><br><span class="line">  &#125;)</span><br><span class="line">  .then(<span class="function"><span class="keyword">function</span> (<span class="params">data</span>) </span>&#123;</span><br><span class="line">    <span class="built_in">console</span>.log(data)</span><br><span class="line">  &#125;)</span><br><span class="line">  .catch(<span class="function"><span class="keyword">function</span> (<span class="params">err</span>) </span>&#123; <span class="comment">// catch 的作用： 如果前面有任何的 Promise 执行失败，则立即终止所有 promise 的执行，并 马上进入 catch 去处理 Promise中 抛出的异常；</span></span><br><span class="line">    <span class="built_in">console</span>.log(<span class="string">'这是自己的处理方式：'</span> + err.message)</span><br><span class="line">  &#125;)</span><br></pre></td></tr></table></figure><h1 id="使用mui的tab-top-webview-main完成分类滑动栏"><a href="#使用mui的tab-top-webview-main完成分类滑动栏" class="headerlink" title="使用mui的tab-top-webview-main完成分类滑动栏"></a>使用mui的<code>tab-top-webview-main</code>完成分类滑动栏</h1><h2 id="兼容问题"><a href="#兼容问题" class="headerlink" title="兼容问题"></a>兼容问题</h2><ol><li><p>和 App.vue 中的 <code>router-link</code> 身上的类名 <code>mui-tab-item</code> 存在兼容性问题，导致tab栏失效，可以把<code>mui-tab-item</code>改名为<code>mui-tab-item1</code>，并复制相关的类样式，来解决这个问题；</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br></pre></td><td class="code"><pre><span class="line">.mui-bar-tab .mui-tab-item1.mui-active &#123;</span><br><span class="line">  color: #007aff;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line">.mui-bar-tab .mui-tab-item1 &#123;</span><br><span class="line">  display: table-cell;</span><br><span class="line">  overflow: hidden;</span><br><span class="line">  width: 1%;</span><br><span class="line">  height: 50px;</span><br><span class="line">  text-align: center;</span><br><span class="line">  vertical-align: middle;</span><br><span class="line">  white-space: nowrap;</span><br><span class="line">  text-overflow: ellipsis;</span><br><span class="line">  color: #929292;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line">.mui-bar-tab .mui-tab-item1 .mui-icon &#123;</span><br><span class="line">  top: 3px;</span><br><span class="line">  width: 24px;</span><br><span class="line">  height: 24px;</span><br><span class="line">  padding-top: 0;</span><br><span class="line">  padding-bottom: 0;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line">.mui-bar-tab .mui-tab-item1 .mui-icon~.mui-tab-label &#123;</span><br><span class="line">  font-size: 11px;</span><br><span class="line">  display: block;</span><br><span class="line">  overflow: hidden;</span><br><span class="line">  text-overflow: ellipsis;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure></li><li><p><code>tab-top-webview-main</code>组件第一次显示到页面中的时候，无法被滑动的解决方案：</p><ul><li><p>先导入 mui 的JS文件:</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">import mui from &apos;../../../lib/mui/js/mui.min.js&apos;</span><br></pre></td></tr></table></figure></li><li><p>在 组件的 <code>mounted</code> 事件钩子中，注册 mui 的滚动事件：</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line">mounted() &#123;</span><br><span class="line">  // 需要在组件的 mounted 事件钩子中，注册 mui 的 scroll 滚动事件</span><br><span class="line">      mui(&apos;.mui-scroll-wrapper&apos;).scroll(&#123;</span><br><span class="line">        deceleration: 0.0005 //flick 减速系数，系数越大，滚动速度越慢，滚动距离越小，默认值0.0006</span><br><span class="line">      &#125;);</span><br><span class="line">true&#125;</span><br></pre></td></tr></table></figure></li></ul></li><li><p>滑动的时候报警告：<code>Unable to preventDefault inside passive event listener due to target being treated as passive. See https://www.chromestatus.com/features/5093566007214080</code></p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">解决方法，可以加上* &#123; touch-action: none; &#125; 这句样式去掉。</span><br></pre></td></tr></table></figure></li></ol><p>原因：（是chrome为了提高页面的滑动流畅度而新折腾出来的一个东西） <a href="http://www.cnblogs.com/pearl07/p/6589114.html" target="_blank" rel="noopener">http://www.cnblogs.com/pearl07/p/6589114.html</a><br><a href="https://developer.mozilla.org/zh-CN/docs/Web/CSS/touch-action" target="_blank" rel="noopener">https://developer.mozilla.org/zh-CN/docs/Web/CSS/touch-action</a></p><h1 id="移除严格模式"><a href="#移除严格模式" class="headerlink" title="移除严格模式"></a>移除严格模式</h1><p><a href="https://github.com/genify/babel-plugin-transform-remove-strict-mode" target="_blank" rel="noopener">babel-plugin-transform-remove-strict-mode</a></p><h2 id="vue-preview"><a href="#vue-preview" class="headerlink" title="vue-preview"></a><a href="https://github.com/LS1231/vue-preview" target="_blank" rel="noopener">vue-preview</a></h2><p>一个Vue集成PhotoSwipe图片预览插件</p>]]></content>
      
      
      <categories>
          
          <category> Vue </category>
          
      </categories>
      
      
        <tags>
            
            <tag> Vue笔记 </tag>
            
        </tags>
      
    </entry>
    
    <entry>
      <title>Vue day7</title>
      <link href="/2018/10/20/Vue-day7/"/>
      <url>/2018/10/20/Vue-day7/</url>
      
        <content type="html"><![CDATA[<link rel="stylesheet" class="aplayer-secondary-style-marker" href="/assets/css/APlayer.min.css"><script src="/assets/js/APlayer.min.js" class="aplayer-secondary-script-marker"></script><h1 id="使用-饿了么的-MintUI-组件"><a href="#使用-饿了么的-MintUI-组件" class="headerlink" title="使用 饿了么的 MintUI 组件"></a>使用 饿了么的 MintUI 组件</h1><p><a href="https://github.com/ElemeFE/mint-ui" target="_blank" rel="noopener">Github 仓储地址</a></p><p><a href="http://mint-ui.github.io/#!/zh-cn" target="_blank" rel="noopener">Mint-UI官方文档</a></p><ol><li>导入所有MintUI组件：</li></ol><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line"></span><br><span class="line">import MintUI from &apos;mint-ui&apos;</span><br></pre></td></tr></table></figure><ol start="2"><li>导入样式表：</li></ol><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line"></span><br><span class="line">import &apos;mint-ui/lib/style.css&apos;</span><br></pre></td></tr></table></figure><ol start="3"><li>在 vue 中使用 MintUI中的Button按钮和Toast弹框提示：</li></ol><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line"></span><br><span class="line">Vue.use(MintUI)</span><br></pre></td></tr></table></figure><ol start="4"><li>使用的例子：</li></ol><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line"></span><br><span class="line">&lt;mt-button type=&quot;primary&quot; size=&quot;large&quot;&gt;primary&lt;/mt-button&gt;</span><br></pre></td></tr></table></figure><h1 id="Mint-UI中按需导入的配置方式"><a href="#Mint-UI中按需导入的配置方式" class="headerlink" title="Mint-UI中按需导入的配置方式"></a>Mint-UI中按需导入的配置方式</h1><ol><li><p>修改 .babelrc</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br></pre></td><td class="code"><pre><span class="line">&#123;</span><br><span class="line">  &quot;presets&quot;: [</span><br><span class="line">    [&quot;es2015&quot;, &#123; &quot;modules&quot;: false &#125;]</span><br><span class="line">  ],</span><br><span class="line">  &quot;plugins&quot;: [[&quot;component&quot;, [</span><br><span class="line">    &#123;</span><br><span class="line">      &quot;libraryName&quot;: &quot;mint-ui&quot;,</span><br><span class="line">      &quot;style&quot;: true</span><br><span class="line">    &#125;</span><br><span class="line">  ]]]</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure></li><li><p>导入所有babel-plugin-componen组件：</p></li></ol><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line"></span><br><span class="line">import &#123; Button, Cell &#125; from &apos;mint-ui&apos;</span><br></pre></td></tr></table></figure><ol start="3"><li>引入部分组件</li></ol><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><span class="line"></span><br><span class="line">Vue.component(Button.name, Button)</span><br><span class="line">// Button.name 是可以自定义的 例如 Vue.component(&quot;mybtn&quot;, Button)</span><br><span class="line">Vue.component(Cell.name, Cell)</span><br><span class="line">/* 或写为</span><br><span class="line"> * Vue.use(Button)</span><br><span class="line"> * Vue.use(Cell)</span><br><span class="line"> */</span><br></pre></td></tr></table></figure><ol start="4"><li>使用的例子：</li></ol><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line"></span><br><span class="line">&lt;mt-button type=&quot;primary&quot; size=&quot;large&quot;&gt;primary&lt;/mt-button&gt;</span><br><span class="line">// 假如改变了 名字 那就要用自定义的组件名称 &lt;mybtn&gt;1233&lt;/mybtn&gt;</span><br></pre></td></tr></table></figure><h1 id="Mint-UI中按需导入的配置方式-1"><a href="#Mint-UI中按需导入的配置方式-1" class="headerlink" title="Mint-UI中按需导入的配置方式"></a>Mint-UI中按需导入的配置方式</h1><h1 id="使用-MUI-代码片段"><a href="#使用-MUI-代码片段" class="headerlink" title="使用 MUI 代码片段"></a>使用 MUI 代码片段</h1><blockquote><p>注意： MUI 不同于 Mint-UI，MUI只是开发出来的一套好用的代码片段，里面提供了配套的样式、配套的HTML代码段，类似于 Bootstrap； 而 Mint-UI，是真正的组件库，是使用 Vue 技术封装出来的 成套的组件，可以无缝的和 VUE项目进行集成开发；<br>因此，从体验上来说， Mint-UI体验更好，因为这是别人帮我们开发好的现成的Vue组件；<br>从体验上来说， MUI和Bootstrap类似；<br>理论上，任何项目都可以使用 MUI 或 Bootstrap，但是，MInt-UI只适用于Vue项目；</p></blockquote><p>注意： MUI 并不能使用  npm 去下载，需要自己手动从 github 上，下载现成的包，自己解压出来，然后手动拷贝到项目中使用；</p><p><a href="http://dev.dcloud.net.cn/mui/" target="_blank" rel="noopener">官网首页</a></p><p><a href="http://dev.dcloud.net.cn/mui/ui/" target="_blank" rel="noopener">文档地址</a></p><ol><li>导入 MUI 的样式表：</li></ol><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line"></span><br><span class="line">import &apos;../lib/mui/css/mui.min.css&apos;</span><br></pre></td></tr></table></figure><ol start="2"><li>在<code>webpack.config.js</code>中添加新的loader规则：</li></ol><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line"></span><br><span class="line">&#123; test: /\.(png|jpg|gif|ttf)$/, use: &apos;url-loader&apos; &#125;</span><br></pre></td></tr></table></figure><ol start="3"><li>根据官方提供的文档和example，尝试使用相关的组件</li></ol><h1 id="将项目源码托管到oschina中"><a href="#将项目源码托管到oschina中" class="headerlink" title="将项目源码托管到oschina中"></a>将项目源码托管到oschina中</h1><ol><li><p>点击头像 -&gt; 修改资料 -&gt; SSH公钥 <a href="http://git.mydoc.io/?t=154712" target="_blank" rel="noopener">如何生成SSH公钥</a></p></li><li><p>创建自己的空仓储，使用 <code>git config --global user.name &quot;用户名&quot;</code> 和 <code>git config --global user.email ***@**.com</code> 来全局配置提交时用户的名称和邮箱</p></li><li><p>使用 <code>git init</code> 在本地初始化项目</p></li><li><p>使用 <code>touch README.md</code> 和 <code>touch .gitignore</code> 来创建项目的说明文件和忽略文件；</p></li><li><p>使用 <code>git add .</code> 将所有文件托管到 git 中</p></li><li><p>使用 <code>git commit -m &quot;init project&quot;</code> 将项目进行本地提交</p></li><li><p>使用 <code>git remote add origin 仓储地址</code>将本地项目和远程仓储连接，并使用origin最为远程仓储的别名</p></li><li><p>使用 <code>git push -u origin master</code> 将本地代码push到仓储中</p></li></ol><h1 id="App-vue-组件的基本设置"><a href="#App-vue-组件的基本设置" class="headerlink" title="App.vue 组件的基本设置"></a>App.vue 组件的基本设置</h1><ol><li><p>头部的固定导航栏使用 <code>Mint-UI</code> 的 <code>Header</code> 组件；</p></li><li><p>底部的页签使用 <code>mui</code> 的 <code>tabbar</code>;</p></li><li><p>购物车的图标，使用 <code>icons-extra</code> 中的 <code>mui-icon-extra mui-icon-extra-cart</code>，同时，应该把其依赖的字体图标文件 <code>mui-icons-extra.ttf</code>，复制到 <code>fonts</code> 目录下！</p></li><li><p>将底部的页签，改造成 <code>router-link</code> 来实现单页面的切换；</p></li><li><p>Tab Bar 路由激活时候设置高亮的两种方式：</p><ul><li>全局设置样式如下：</li></ul><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line"></span><br><span class="line">.router-link-active&#123;</span><br><span class="line"></span><br><span class="line">    color:#007aff !important;</span><br><span class="line"></span><br><span class="line">  &#125;</span><br></pre></td></tr></table></figure><ul><li>或者在 <code>new VueRouter</code> 的时候，通过 <code>linkActiveClass</code> 来指定高亮的类：</li></ul><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br></pre></td><td class="code"><pre><span class="line"></span><br><span class="line">// 创建路由对象</span><br><span class="line"></span><br><span class="line">  var router = new VueRouter(&#123;</span><br><span class="line"></span><br><span class="line">    routes: [</span><br><span class="line"></span><br><span class="line">      &#123; path: &apos;/&apos;, redirect: &apos;/home&apos; &#125;</span><br><span class="line"></span><br><span class="line">    ],</span><br><span class="line"></span><br><span class="line">    linkActiveClass: &apos;mui-active&apos;</span><br><span class="line"></span><br><span class="line">  &#125;);</span><br></pre></td></tr></table></figure></li></ol><h1 id="实现-tabbar-页签不同组件页面的切换"><a href="#实现-tabbar-页签不同组件页面的切换" class="headerlink" title="实现 tabbar 页签不同组件页面的切换"></a>实现 tabbar 页签不同组件页面的切换</h1><ol><li><p>将 tabbar 改造成 <code>router-link</code> 形式，并指定每个连接的 <code>to</code> 属性；</p></li><li><p>在入口文件中导入需要展示的组件，并创建路由对象：</p></li></ol><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br></pre></td><td class="code"><pre><span class="line"></span><br><span class="line">// 导入需要展示的组件</span><br><span class="line"></span><br><span class="line">import Home from &apos;./components/home/home.vue&apos;</span><br><span class="line"></span><br><span class="line">import Member from &apos;./components/member/member.vue&apos;</span><br><span class="line"></span><br><span class="line">import Shopcar from &apos;./components/shopcar/shopcar.vue&apos;</span><br><span class="line"></span><br><span class="line">import Search from &apos;./components/search/search.vue&apos;</span><br><span class="line"></span><br><span class="line"></span><br><span class="line"></span><br><span class="line">// 创建路由对象</span><br><span class="line"></span><br><span class="line">var router = new VueRouter(&#123;</span><br><span class="line"></span><br><span class="line">  routes: [</span><br><span class="line"></span><br><span class="line">    &#123; path: &apos;/&apos;, redirect: &apos;/home&apos; &#125;,</span><br><span class="line"></span><br><span class="line">    &#123; path: &apos;/home&apos;, component: Home &#125;,</span><br><span class="line"></span><br><span class="line">    &#123; path: &apos;/member&apos;, component: Member &#125;,</span><br><span class="line"></span><br><span class="line">    &#123; path: &apos;/shopcar&apos;, component: Shopcar &#125;,</span><br><span class="line"></span><br><span class="line">    &#123; path: &apos;/search&apos;, component: Search &#125;</span><br><span class="line"></span><br><span class="line">  ],</span><br><span class="line"></span><br><span class="line">  linkActiveClass: &apos;mui-active&apos;</span><br><span class="line"></span><br><span class="line">&#125;);</span><br></pre></td></tr></table></figure><h1 id="使用-mt-swipe-轮播图组件"><a href="#使用-mt-swipe-轮播图组件" class="headerlink" title="使用 mt-swipe 轮播图组件"></a>使用 mt-swipe 轮播图组件</h1><ol><li>假数据：</li></ol><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br></pre></td><td class="code"><pre><span class="line"></span><br><span class="line">lunbo: [</span><br><span class="line"></span><br><span class="line">        &apos;http://www.itcast.cn/images/slidead/BEIJING/2017440109442800.jpg&apos;,</span><br><span class="line"></span><br><span class="line">        &apos;http://www.itcast.cn/images/slidead/BEIJING/2017511009514700.jpg&apos;,</span><br><span class="line"></span><br><span class="line">        &apos;http://www.itcast.cn/images/slidead/BEIJING/2017421414422600.jpg&apos;</span><br><span class="line"></span><br><span class="line">      ]</span><br></pre></td></tr></table></figure><ol start="2"><li>引入轮播图组件：</li></ol><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br></pre></td><td class="code"><pre><span class="line"></span><br><span class="line">&lt;!-- Mint-UI 轮播图组件 --&gt;</span><br><span class="line"></span><br><span class="line">    &lt;div class=&quot;home-swipe&quot;&gt;</span><br><span class="line"></span><br><span class="line">      &lt;mt-swipe :auto=&quot;4000&quot;&gt;</span><br><span class="line"></span><br><span class="line">        &lt;mt-swipe-item v-for=&quot;(item, i) in lunbo&quot; :key=&quot;i&quot;&gt;</span><br><span class="line"></span><br><span class="line">          &lt;img :src=&quot;item&quot; alt=&quot;&quot;&gt;</span><br><span class="line"></span><br><span class="line">        &lt;/mt-swipe-item&gt;</span><br><span class="line"></span><br><span class="line">      &lt;/mt-swipe&gt;</span><br><span class="line"></span><br><span class="line">    &lt;/div&gt;</span><br><span class="line"></span><br><span class="line">  &lt;/div&gt;</span><br></pre></td></tr></table></figure><h1 id="在-vue组件中使用vue-resource获取数据"><a href="#在-vue组件中使用vue-resource获取数据" class="headerlink" title="在.vue组件中使用vue-resource获取数据"></a>在<code>.vue</code>组件中使用<code>vue-resource</code>获取数据</h1><ol><li><p>运行<code>cnpm i vue-resource -S</code>安装模块</p></li><li><p>导入 vue-resource 组件</p></li></ol><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line"></span><br><span class="line">import VueResource from &apos;vue-resource&apos;</span><br></pre></td></tr></table></figure><ol start="3"><li>在vue中使用 vue-resource 组件</li></ol><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line"></span><br><span class="line">Vue.use(VueResource);</span><br></pre></td></tr></table></figure><h1 id="使用mui的tab-top-webview-main完成分类滑动栏"><a href="#使用mui的tab-top-webview-main完成分类滑动栏" class="headerlink" title="使用mui的tab-top-webview-main完成分类滑动栏"></a>使用mui的<code>tab-top-webview-main</code>完成分类滑动栏</h1><h2 id="兼容问题"><a href="#兼容问题" class="headerlink" title="兼容问题"></a>兼容问题</h2><ol><li><p>和 App.vue 中的 <code>router-link</code> 身上的类名 <code>mui-tab-item</code> 存在兼容性问题，导致tab栏失效，可以把<code>mui-tab-item</code>改名为<code>mui-tab-item1</code>，并复制相关的类样式，来解决这个问题；</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br></pre></td><td class="code"><pre><span class="line">.mui-bar-tab .mui-tab-item1.mui-active &#123;</span><br><span class="line">  color: #007aff;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line">.mui-bar-tab .mui-tab-item1 &#123;</span><br><span class="line">  display: table-cell;</span><br><span class="line">  overflow: hidden;</span><br><span class="line">  width: 1%;</span><br><span class="line">  height: 50px;</span><br><span class="line">  text-align: center;</span><br><span class="line">  vertical-align: middle;</span><br><span class="line">  white-space: nowrap;</span><br><span class="line">  text-overflow: ellipsis;</span><br><span class="line">  color: #929292;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line">.mui-bar-tab .mui-tab-item1 .mui-icon &#123;</span><br><span class="line">  top: 3px;</span><br><span class="line">  width: 24px;</span><br><span class="line">  height: 24px;</span><br><span class="line">  padding-top: 0;</span><br><span class="line">  padding-bottom: 0;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line">.mui-bar-tab .mui-tab-item1 .mui-icon~.mui-tab-label &#123;</span><br><span class="line">  font-size: 11px;</span><br><span class="line">  display: block;</span><br><span class="line">  overflow: hidden;</span><br><span class="line">  text-overflow: ellipsis;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure></li><li><p><code>tab-top-webview-main</code>组件第一次显示到页面中的时候，无法被滑动的解决方案：</p><ul><li><p>先导入 mui 的JS文件:</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">import mui from &apos;../../../lib/mui/js/mui.min.js&apos;</span><br></pre></td></tr></table></figure></li><li><p>在 组件的 <code>mounted</code> 事件钩子中，注册 mui 的滚动事件：</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line">mounted() &#123;</span><br><span class="line">  // 需要在组件的 mounted 事件钩子中，注册 mui 的 scroll 滚动事件</span><br><span class="line">      mui(&apos;.mui-scroll-wrapper&apos;).scroll(&#123;</span><br><span class="line">        deceleration: 0.0005 //flick 减速系数，系数越大，滚动速度越慢，滚动距离越小，默认值0.0006</span><br><span class="line">      &#125;);</span><br><span class="line">true&#125;</span><br></pre></td></tr></table></figure></li></ul></li><li><p>滑动的时候报警告：<code>Unable to preventDefault inside passive event listener due to target being treated as passive. See https://www.chromestatus.com/features/5093566007214080</code></p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">解决方法，可以加上* &#123; touch-action: none; &#125; 这句样式去掉。</span><br></pre></td></tr></table></figure></li></ol><p>原因：（是chrome为了提高页面的滑动流畅度而新折腾出来的一个东西） <a href="http://www.cnblogs.com/pearl07/p/6589114.html" target="_blank" rel="noopener">http://www.cnblogs.com/pearl07/p/6589114.html</a><br><a href="https://developer.mozilla.org/zh-CN/docs/Web/CSS/touch-action" target="_blank" rel="noopener">https://developer.mozilla.org/zh-CN/docs/Web/CSS/touch-action</a></p><h1 id="移除严格模式"><a href="#移除严格模式" class="headerlink" title="移除严格模式"></a>移除严格模式</h1><p><a href="https://github.com/genify/babel-plugin-transform-remove-strict-mode" target="_blank" rel="noopener">babel-plugin-transform-remove-strict-mode</a></p><h1 id="vue-preview"><a href="#vue-preview" class="headerlink" title="vue-preview"></a><a href="https://github.com/LS1231/vue-preview" target="_blank" rel="noopener">vue-preview</a></h1><p>一个Vue集成PhotoSwipe图片预览插件</p>]]></content>
      
      
      <categories>
          
          <category> Vue </category>
          
      </categories>
      
      
        <tags>
            
            <tag> Vue笔记 </tag>
            
        </tags>
      
    </entry>
    
    <entry>
      <title>Vue day6 案例</title>
      <link href="/2018/10/19/2018-10-19/"/>
      <url>/2018/10/19/2018-10-19/</url>
      
        <content type="html"><![CDATA[<link rel="stylesheet" class="aplayer-secondary-style-marker" href="/assets/css/APlayer.min.css"><script src="/assets/js/APlayer.min.js" class="aplayer-secondary-script-marker"></script><h1 id="案例分布"><a href="#案例分布" class="headerlink" title="案例分布"></a>案例分布</h1><ol><li>webpack-vue (webpack中使用vue)</li><li>webpack-vue-router</li><li>webpack-路由嵌套 抽离路由</li></ol><h1 id="一、webpack-vue"><a href="#一、webpack-vue" class="headerlink" title="一、webpack-vue"></a>一、webpack-vue</h1><h2 id="重点"><a href="#重点" class="headerlink" title="重点"></a>重点</h2><ul><li>webpack 中使用vue<ul><li>安装 vue 包</li><li>导入组件</li><li>安装 vue 打包插件</li></ul></li><li>render 渲染页面</li><li>export default 和 export 向外暴露成员<ul><li>注意： export default 向外暴露的成员，可以使用任意的变量来接收</li><li>注意： 在一个模块中，export default 只允许向外暴露1次</li><li>注意： 在一个模块中，可以同时使用 export default 和 export 向外暴露成员</li></ul></li><li>import 接收成员</li></ul><h2 id="小案例-前往github"><a href="#小案例-前往github" class="headerlink" title="小案例(前往github)"></a>小案例(前往github)</h2><p><a href="https://github.com/YHF7/Vue/tree/master/day6/webpack-vue1" target="_blank" rel="noopener">webpack-vue</a></p><h1 id="二、webpack-vue-router"><a href="#二、webpack-vue-router" class="headerlink" title="二、webpack-vue-router"></a>二、webpack-vue-router</h1><h2 id="重点-1"><a href="#重点-1" class="headerlink" title="重点"></a>重点</h2><ul><li>在webpack 中使用路由<ul><li>安装 vue-router</li><li>手动安装vuerouter</li><li>创建路由</li><li>挂载路由</li><li>router-view 显示路由<h2 id="小案例-前往github-1"><a href="#小案例-前往github-1" class="headerlink" title="小案例(前往github)"></a>小案例(前往github)</h2><a href="https://github.com/YHF7/Vue/tree/master/day6/webpack-vue-router" target="_blank" rel="noopener">webpack-vue-router</a></li></ul></li></ul><h1 id="三、webpack-路由嵌套-抽离路由"><a href="#三、webpack-路由嵌套-抽离路由" class="headerlink" title="三、webpack-路由嵌套 抽离路由"></a>三、webpack-路由嵌套 抽离路由</h1><h2 id="重点-2"><a href="#重点-2" class="headerlink" title="重点"></a>重点</h2><ul><li>嵌套路由<ul><li>定义子组件</li><li>配置路由<h2 id="小案例-前往github-2"><a href="#小案例-前往github-2" class="headerlink" title="小案例(前往github)"></a>小案例(前往github)</h2><a href="https://github.com/YHF7/Vue/tree/master/day6/webpack-%E8%B7%AF%E7%94%B1%E5%B5%8C%E5%A5%97" target="_blank" rel="noopener">webpack-vue-路由嵌套</a></li></ul></li></ul>]]></content>
      
      
      <categories>
          
          <category> Vue </category>
          
      </categories>
      
      
        <tags>
            
            <tag> Vue 案例 </tag>
            
        </tags>
      
    </entry>
    
    <entry>
      <title>Vue day6</title>
      <link href="/2018/10/19/Vue-day6/"/>
      <url>/2018/10/19/Vue-day6/</url>
      
        <content type="html"><![CDATA[<link rel="stylesheet" class="aplayer-secondary-style-marker" href="/assets/css/APlayer.min.css"><script src="/assets/js/APlayer.min.js" class="aplayer-secondary-script-marker"></script><h1 id="注意："><a href="#注意：" class="headerlink" title="注意："></a>注意：</h1><p>有时候使用<code>npm i node-sass -D</code>装不上，这时候，就必须使用 <code>cnpm i node-sass -D</code></p><h1 id="在普通页面中使用render函数渲染组件"><a href="#在普通页面中使用render函数渲染组件" class="headerlink" title="在普通页面中使用render函数渲染组件"></a>在普通页面中使用render函数渲染组件</h1><p><a href="https://github.com/YHF7/Vue/tree/master/day6/code" target="_blank" rel="noopener">render</a></p><h1 id="在webpack中配置-vue组件页面的解析"><a href="#在webpack中配置-vue组件页面的解析" class="headerlink" title="在webpack中配置.vue组件页面的解析"></a>在webpack中配置.vue组件页面的解析</h1><ol><li><p>运行<code>cnpm i vue -S</code>将vue安装为运行依赖；</p></li><li><p>运行<code>cnpm i vue-loader vue-template-compiler -D</code>将解析转换vue的包安装为开发依赖；</p></li><li><p>运行<code>cnpm i style-loader css-loader -D</code>将解析转换CSS的包安装为开发依赖，因为.vue文件中会写CSS样式；</p></li><li><p>在<code>webpack.config.js</code>中，添加如下<code>module</code>规则：</p></li></ol><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br></pre></td><td class="code"><pre><span class="line"></span><br><span class="line">module: &#123;</span><br><span class="line"></span><br><span class="line">    rules: [</span><br><span class="line"></span><br><span class="line">      &#123; test: /\.css$/, use: [&apos;style-loader&apos;, &apos;css-loader&apos;] &#125;,</span><br><span class="line"></span><br><span class="line">      &#123; test: /\.vue$/, use: &apos;vue-loader&apos; &#125;</span><br><span class="line"></span><br><span class="line">    ]</span><br><span class="line"></span><br><span class="line">  &#125;</span><br></pre></td></tr></table></figure><ol start="5"><li>创建<code>App.js</code>组件页面：</li></ol><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br></pre></td><td class="code"><pre><span class="line"></span><br><span class="line">&lt;template&gt;</span><br><span class="line"></span><br><span class="line">  &lt;!-- 注意：在 .vue 的组件中，template 中必须有且只有唯一的根元素进行包裹，一般都用 div 当作唯一的根元素 --&gt;</span><br><span class="line"></span><br><span class="line">  &lt;div&gt;</span><br><span class="line"></span><br><span class="line">    &lt;h1&gt;这是APP组件 - &#123;&#123;msg&#125;&#125;&lt;/h1&gt;</span><br><span class="line"></span><br><span class="line">    &lt;h3&gt;我是h3&lt;/h3&gt;</span><br><span class="line"></span><br><span class="line">  &lt;/div&gt;</span><br><span class="line"></span><br><span class="line">&lt;/template&gt;</span><br><span class="line"></span><br><span class="line"></span><br><span class="line"></span><br><span class="line">&lt;script&gt;</span><br><span class="line"></span><br><span class="line">// 注意：在 .vue 的组件中，通过 script 标签来定义组件的行为，需要使用 ES6 中提供的 export default 方式，导出一个vue实例对象</span><br><span class="line"></span><br><span class="line">export default &#123;</span><br><span class="line"></span><br><span class="line">  data() &#123;</span><br><span class="line"></span><br><span class="line">    return &#123;</span><br><span class="line"></span><br><span class="line">      msg: &apos;OK&apos;</span><br><span class="line"></span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">  &#125;</span><br><span class="line"></span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line">&lt;/script&gt;</span><br><span class="line"></span><br><span class="line"></span><br><span class="line"></span><br><span class="line">&lt;style scoped&gt;</span><br><span class="line"></span><br><span class="line">h1 &#123;</span><br><span class="line"></span><br><span class="line">  color: red;</span><br><span class="line"></span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line">&lt;/style&gt;</span><br></pre></td></tr></table></figure><ol start="6"><li>创建<code>main.js</code>入口文件：</li></ol><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br></pre></td><td class="code"><pre><span class="line"></span><br><span class="line">// 导入 Vue 组件</span><br><span class="line"></span><br><span class="line">import Vue from &apos;vue&apos;</span><br><span class="line"></span><br><span class="line"></span><br><span class="line"></span><br><span class="line">// 导入 App组件</span><br><span class="line"></span><br><span class="line">import App from &apos;./components/App.vue&apos;</span><br><span class="line"></span><br><span class="line"></span><br><span class="line"></span><br><span class="line">// 创建一个 Vue 实例，使用 render 函数，渲染指定的组件</span><br><span class="line"></span><br><span class="line">var vm = new Vue(&#123;</span><br><span class="line"></span><br><span class="line">  el: &apos;#app&apos;,</span><br><span class="line"></span><br><span class="line">  render: c =&gt; c(App)</span><br><span class="line"></span><br><span class="line">&#125;);</span><br></pre></td></tr></table></figure><h1 id="在使用webpack构建的Vue项目中使用模板对象？"><a href="#在使用webpack构建的Vue项目中使用模板对象？" class="headerlink" title="在使用webpack构建的Vue项目中使用模板对象？"></a>在使用webpack构建的Vue项目中使用模板对象？</h1><ol><li>在<code>webpack.config.js</code>中添加<code>resolve</code>属性：<figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line">resolve: &#123;</span><br><span class="line">    alias: &#123;</span><br><span class="line">      &apos;vue$&apos;: &apos;vue/dist/vue.esm.js&apos;</span><br><span class="line">    &#125;</span><br><span class="line">  &#125;</span><br></pre></td></tr></table></figure></li></ol><h1 id="ES6中语法使用总结"><a href="#ES6中语法使用总结" class="headerlink" title="ES6中语法使用总结"></a>ES6中语法使用总结</h1><ol><li><p>使用 <code>export default</code> 和 <code>export</code> 导出模块中的成员; 对应ES5中的 <code>module.exports</code> 和 <code>export</code></p></li><li><p>使用 <code>import ** from **</code> 和 <code>import &#39;路径&#39;</code> 还有 <code>import {a, b} from &#39;模块标识&#39;</code> 导入其他模块</p></li><li><p>使用箭头函数：<code>(a, b)=&gt; { return a-b; }</code></p></li></ol><h1 id="在vue组件页面中，集成vue-router路由模块"><a href="#在vue组件页面中，集成vue-router路由模块" class="headerlink" title="在vue组件页面中，集成vue-router路由模块"></a>在vue组件页面中，集成vue-router路由模块</h1><p><a href="https://router.vuejs.org/" target="_blank" rel="noopener">vue-router官网</a></p><ol><li>导入路由模块：</li></ol><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line"></span><br><span class="line">import VueRouter from &apos;vue-router&apos;</span><br></pre></td></tr></table></figure><ol start="2"><li>安装路由模块：</li></ol><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line"></span><br><span class="line">Vue.use(VueRouter);</span><br></pre></td></tr></table></figure><ol start="3"><li>导入需要展示的组件:</li></ol><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line"></span><br><span class="line">import login from &apos;./components/account/login.vue&apos;</span><br><span class="line"></span><br><span class="line">import register from &apos;./components/account/register.vue&apos;</span><br></pre></td></tr></table></figure><ol start="4"><li>创建路由对象:</li></ol><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br></pre></td><td class="code"><pre><span class="line"></span><br><span class="line">var router = new VueRouter(&#123;</span><br><span class="line"></span><br><span class="line">  routes: [</span><br><span class="line"></span><br><span class="line">    &#123; path: &apos;/&apos;, redirect: &apos;/login&apos; &#125;,</span><br><span class="line"></span><br><span class="line">    &#123; path: &apos;/login&apos;, component: login &#125;,</span><br><span class="line"></span><br><span class="line">    &#123; path: &apos;/register&apos;, component: register &#125;</span><br><span class="line"></span><br><span class="line">  ]</span><br><span class="line"></span><br><span class="line">&#125;);</span><br></pre></td></tr></table></figure><ol start="5"><li>将路由对象，挂载到 Vue 实例上:</li></ol><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br></pre></td><td class="code"><pre><span class="line"></span><br><span class="line">var vm = new Vue(&#123;</span><br><span class="line"></span><br><span class="line">  el: &apos;#app&apos;,</span><br><span class="line"></span><br><span class="line">  // render: c =&gt; &#123; return c(App) &#125;</span><br><span class="line"></span><br><span class="line">  render(c) &#123;</span><br><span class="line"></span><br><span class="line">    return c(App);</span><br><span class="line"></span><br><span class="line">  &#125;,</span><br><span class="line"></span><br><span class="line">  router // 将路由对象，挂载到 Vue 实例上</span><br><span class="line"></span><br><span class="line">&#125;);</span><br></pre></td></tr></table></figure><ol start="6"><li>改造App.vue组件，在 template 中，添加<code>router-link</code>和<code>router-view</code>：</li></ol><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><span class="line"></span><br><span class="line">&lt;router-link to=&quot;/login&quot;&gt;登录&lt;/router-link&gt;</span><br><span class="line"></span><br><span class="line">&lt;router-link to=&quot;/register&quot;&gt;注册&lt;/router-link&gt;</span><br><span class="line"></span><br><span class="line"></span><br><span class="line"></span><br><span class="line">&lt;router-view&gt;&lt;/router-view&gt;</span><br></pre></td></tr></table></figure><h1 id="组件中的css作用域问题"><a href="#组件中的css作用域问题" class="headerlink" title="组件中的css作用域问题"></a>组件中的css作用域问题</h1><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line">&lt;style lang=&quot;scss&quot; scoped&gt;</span><br><span class="line">/* 普通的 style 标签只支持 普通的 样式，如果想要启用 scss 或 less ，需要为 style 元素，设置 lang 属性 */</span><br><span class="line">// 只要 咱们的 style 标签， 是在 .vue 组件中定义的，那么，推荐都为 style 开启 scoped 属性</span><br><span class="line">&lt;style&gt;</span><br></pre></td></tr></table></figure><h1 id="抽离路由为单独的模块"><a href="#抽离路由为单独的模块" class="headerlink" title="抽离路由为单独的模块"></a>抽离路由为单独的模块</h1><p><a href="https://github.com/YHF7/Vue/blob/master/day6/webpack-%E8%B7%AF%E7%94%B1%E5%B5%8C%E5%A5%97/src/router.js" target="_blank" rel="noopener">抽离小案例</a></p>]]></content>
      
      
      <categories>
          
          <category> Vue </category>
          
      </categories>
      
      
        <tags>
            
            <tag> Vue笔记 </tag>
            
        </tags>
      
    </entry>
    
    <entry>
      <title>npm/cnpm 第三方模块/插件安装使用</title>
      <link href="/2018/10/17/npm-Plug-in/"/>
      <url>/2018/10/17/npm-Plug-in/</url>
      
        <content type="html"><![CDATA[<link rel="stylesheet" class="aplayer-secondary-style-marker" href="/assets/css/APlayer.min.css"><script src="/assets/js/APlayer.min.js" class="aplayer-secondary-script-marker"></script><h1 id="模块-插件"><a href="#模块-插件" class="headerlink" title="模块/插件"></a>模块/插件</h1><ul><li>express 前端 web 模块</li><li>path 路径核心模块</li><li>art-template 模版引擎（express-art-template 的依赖所以必须安装）</li><li>express-art-template 模版引擎 (视觉效果模板 子模板 模板继承)</li><li>body-parser 中间件(解析表单 post 请求体)</li><li>mongoose 数据库链接</li><li>bootstrap@3 css 页面开发场景</li><li>jquery js 框架</li><li>blueimp-md5 密码加密</li><li>npm install express-session</li><li>vue 常用 <a href="https://yhf7.github.io/2018/10/16/Vue-day5/#more" target="_blank" rel="noopener">1-6 使用点看 vue-day5</a> <a href="https://yhf7.github.io/2018/10/19/Vue-day6/#more" target="_blank" rel="noopener">7 使用点看 vue-day6</a> <a href="https://yhf7.github.io/2018/10/20/Vue-day7/#more" target="_blank" rel="noopener">8 使用点看 vue-day7</a> （在 vue 中安装插件尽量使用 cnpm）<ul><li><a href="mailto:1.webpack@3.12.0" target="_blank" rel="noopener">1.webpack@3.12.0</a> 项目构建工具</li><li><a href="mailto:2.webpack-dev-server@2.9.3" target="_blank" rel="noopener">2.webpack-dev-server@2.9.3</a> 自动打包</li><li>3.html-webpack-plugin 把 html 打包在内存</li><li>4.样式文件打包<ul><li>css<ul><li>style-loader</li><li>css-loader</li></ul></li><li>less<ul><li>style-loader</li><li>css-loader</li><li>less-loader</li><li>less // 不需要显示出来</li></ul></li><li>sass<ul><li>style-loader</li><li>css-loader</li><li>sass-loader</li><li>node-sass // 不需要显示出来</li></ul></li></ul></li><li>5.url 处理 （图片）<ul><li>url-loader</li><li>file-loader</li></ul></li><li>6.babel Es6 语法<ul><li>babel-core</li><li>babel-loader@7</li><li>babel-plugin-transform-runtime</li><li>babel-preset-env</li><li>babel-preset-stage-0</li></ul></li><li>7.vue (webpack vue)<ul><li>vue vue 依赖</li><li>vue-loader 转换 vue 包依赖</li><li>vue-template-compiler</li></ul></li><li>8.Mint-UI vue 的 ui 组件 <a href="https://mint-ui.github.io/docs/#/zh-cn2/quickstart" target="_blank" rel="noopener">Mint-ui 官网</a><ul><li>mint-ui 组件</li><li>babel-plugin-component mint-ui 按需导入</li></ul></li><li>9.vue-resource 发送数据请求</li><li>10.babel-plugin-transform-remove-strict-mode 去除严格模式</li><li>11.vue2-preview 缩略图打包</li><li>12.moment 时间处理插件</li></ul></li></ul><h1 id="模块安装与应用"><a href="#模块安装与应用" class="headerlink" title="模块安装与应用"></a>模块安装与应用</h1><h2 id="express-前端开发框架"><a href="#express-前端开发框架" class="headerlink" title="express 前端开发框架"></a>express 前端开发框架</h2><ol><li>安装</li></ol><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">$ npm init -y //添加json初始化文件</span><br><span class="line">$ npm install express --save//安装express</span><br></pre></td></tr></table></figure><ol start="2"><li>引包</li></ol><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">const</span> express = <span class="built_in">require</span>(<span class="string">'express'</span>);</span><br></pre></td></tr></table></figure><ol start="3"><li>创建服务</li></ol><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">const</span> app = express();</span><br></pre></td></tr></table></figure><ol start="4"><li>使用</li></ol><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line">app.get(<span class="string">'/'</span>, <span class="function"><span class="keyword">function</span> (<span class="params">req, res</span>) </span>&#123;</span><br><span class="line">  req.send(<span class="string">'index.html'</span>)</span><br><span class="line">&#125;)</span><br></pre></td></tr></table></figure><h1 id="art-template-模版引擎-配置在-express-中"><a href="#art-template-模版引擎-配置在-express-中" class="headerlink" title="art-template 模版引擎 (配置在 express 中)"></a>art-template 模版引擎 (配置在 express 中)</h1><h2 id="js-使用"><a href="#js-使用" class="headerlink" title="js 使用"></a>js 使用</h2><ol><li>安装</li></ol><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">$ npm install --save art-template//express-art-templat依赖了art-template所以可以不用记载但是要安装</span><br><span class="line">$ npm install --save express-art-template</span><br></pre></td></tr></table></figure><ol start="2"><li>配置</li></ol><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">app.engine(<span class="string">'art'</span>,<span class="built_in">require</span>(<span class="string">'express-art-template'</span>))<span class="comment">//art 可以替换成其他的标示 html 等</span></span><br></pre></td></tr></table></figure><ol start="3"><li>使用</li></ol><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><span class="line">app.get(<span class="string">'/'</span>,<span class="function"><span class="keyword">function</span> (<span class="params">req,res</span>) </span>&#123;</span><br><span class="line">    <span class="comment">// 在 Express 中使用模板引擎有更好的方式：res.render('文件名， &#123;模板对象&#125;)</span></span><br><span class="line">  <span class="comment">// 可以自己尝试去看 art-template 官方文档：如何让 art-template 结合 Express 来使用</span></span><br><span class="line">    res.render(<span class="string">'index.html'</span>,&#123;</span><br><span class="line">        title: <span class="string">'hello world'</span></span><br><span class="line">    &#125;);</span><br><span class="line">&#125;);</span><br></pre></td></tr></table></figure><ol start="4"><li>如果希望修改默认的 views 视图渲染存储目录， 可以如下修改</li></ol><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">// 第一个参数 views 不能写错</span></span><br><span class="line">app.set(<span class="string">'views'</span>, 目录路径)</span><br></pre></td></tr></table></figure><h2 id="视图页面输出-views"><a href="#视图页面输出-views" class="headerlink" title="视图页面输出 views"></a>视图页面输出 views</h2><ol><li>安装模版引擎<ul><li>art-template</li><li>express-art-template</li></ul></li><li>编写布局页面 layout.html</li></ol><figure class="highlight html"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">&lt;!DOCTYPE html&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">html</span> <span class="attr">lang</span>=<span class="string">"en"</span>&gt;</span></span><br><span class="line"></span><br><span class="line"><span class="tag">&lt;<span class="name">head</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">meta</span> <span class="attr">charset</span>=<span class="string">"UTF-8"</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">meta</span> <span class="attr">name</span>=<span class="string">"viewport"</span> <span class="attr">content</span>=<span class="string">"width=device-width, initial-scale=1.0"</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">meta</span> <span class="attr">http-equiv</span>=<span class="string">"X-UA-Compatible"</span> <span class="attr">content</span>=<span class="string">"ie=edge"</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">title</span>&gt;</span>Document<span class="tag">&lt;/<span class="name">title</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">link</span> <span class="attr">rel</span>=<span class="string">"stylesheet"</span> <span class="attr">href</span>=<span class="string">"/node_modules/bootstrap/dist/css/bootstrap.css"</span>&gt;</span></span><br><span class="line">    <span class="comment">&lt;!-- 留坑给页面添加css样式等链接 --&gt;</span></span><br><span class="line">    &#123;&#123; block 'head' &#125;&#125;&#123;&#123; /block &#125;&#125;</span><br><span class="line"><span class="tag">&lt;/<span class="name">head</span>&gt;</span></span><br><span class="line"></span><br><span class="line"><span class="tag">&lt;<span class="name">body</span>&gt;</span></span><br><span class="line">    <span class="comment">&lt;!-- body-固定头部-头部重用 --&gt;</span></span><br><span class="line">    &#123;&#123; include './header.html' &#125;&#125;</span><br><span class="line"></span><br><span class="line">    <span class="comment">&lt;!-- body-内容模块-可修改 --&gt;</span></span><br><span class="line">    &#123;&#123; block 'content' &#125;&#125;</span><br><span class="line">        <span class="tag">&lt;<span class="name">h1</span>&gt;</span>默认内容<span class="tag">&lt;/<span class="name">h1</span>&gt;</span></span><br><span class="line">    &#123;&#123; /block &#125;&#125;</span><br><span class="line"></span><br><span class="line">    <span class="comment">&lt;!-- body-固定底部-底部重用 --&gt;</span></span><br><span class="line">    &#123;&#123; include './footer.html' &#125;&#125;</span><br><span class="line"><span class="tag">&lt;/<span class="name">body</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">script</span> <span class="attr">src</span>=<span class="string">"../node_modules/jquery/dist/jquery.js"</span>&gt;</span><span class="undefined"></span><span class="tag">&lt;/<span class="name">script</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">script</span> <span class="attr">src</span>=<span class="string">"../node_modules/bootstrap/dist/js/bootstrap.js"</span>&gt;</span><span class="undefined"></span><span class="tag">&lt;/<span class="name">script</span>&gt;</span></span><br><span class="line"><span class="comment">&lt;!-- 留坑给页面添加js等 --&gt;</span></span><br><span class="line">&#123;&#123; block 'script' &#125;&#125;&#123;&#123; /block &#125;&#125;</span><br><span class="line"><span class="tag">&lt;/<span class="name">html</span>&gt;</span></span><br></pre></td></tr></table></figure><ol start="3"><li>调用布局模块 编写页面</li></ol><figure class="highlight html"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">&lt;!-- 继承布局模块页 --&gt;</span></span><br><span class="line">&#123;&#123;extend './layout.html'&#125;&#125;</span><br><span class="line"></span><br><span class="line"><span class="comment">&lt;!-- 添加css样式-通过坑 head  --&gt;</span></span><br><span class="line">&#123;&#123;block 'head'&#125;&#125;</span><br><span class="line"><span class="tag">&lt;<span class="name">style</span>&gt;</span><span class="undefined"></span></span><br><span class="line"><span class="undefined">    body &#123;</span></span><br><span class="line"><span class="undefined">        background-color: skyblue;</span></span><br><span class="line"><span class="undefined">    &#125;</span></span><br><span class="line"><span class="undefined">    h1 &#123;</span></span><br><span class="line"><span class="undefined">        color: red;</span></span><br><span class="line"><span class="undefined">    &#125;</span></span><br><span class="line"><span class="undefined"></span><span class="tag">&lt;/<span class="name">style</span>&gt;</span></span><br><span class="line">&#123;&#123;/block&#125;&#125;</span><br><span class="line"></span><br><span class="line"><span class="comment">&lt;!-- 修改页面内容 --&gt;</span></span><br><span class="line">&#123;&#123;block 'content'&#125;&#125;</span><br><span class="line"><span class="tag">&lt;<span class="name">div</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">h1</span>&gt;</span>index.html填坑<span class="tag">&lt;/<span class="name">h1</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">div</span>&gt;</span></span><br><span class="line">&#123;&#123;/block&#125;&#125;</span><br><span class="line"></span><br><span class="line"><span class="comment">&lt;!-- 添加js 通过script --&gt;</span></span><br><span class="line">&#123;&#123;block 'script'&#125;&#125;</span><br><span class="line"><span class="tag">&lt;<span class="name">script</span>&gt;</span><span class="undefined"></span></span><br><span class="line"><span class="javascript">    <span class="built_in">window</span>.alert(<span class="string">'index 页面自己的js 脚本'</span>)</span></span><br><span class="line"><span class="undefined"></span><span class="tag">&lt;/<span class="name">script</span>&gt;</span></span><br><span class="line">&#123;&#123;/block&#125;&#125;</span><br></pre></td></tr></table></figure><ol start="4"><li>留坑内容<ul><li>中带‘’号的内容的自定义的名，最好是取一看就明白的</li><li>坑不止可以留一个，可以留很多个</li></ul></li></ol><h1 id="body-parser-中间件-解析表单-post-请求体"><a href="#body-parser-中间件-解析表单-post-请求体" class="headerlink" title="body-parser 中间件(解析表单 post 请求体)"></a>body-parser 中间件(解析表单 post 请求体)</h1><ol><li>安装</li></ol><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">$ npm install --save body-parser</span><br></pre></td></tr></table></figure><ol start="2"><li>引包</li></ol><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">const</span> bodyParser = <span class="built_in">require</span>(<span class="string">'body-parser'</span>);</span><br></pre></td></tr></table></figure><ol start="3"><li>配置</li></ol><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">// parse application/x-www-form-urlencoded 解析application</span></span><br><span class="line">app.use(bodyParser.urlencoded(&#123; <span class="attr">extended</span>: <span class="literal">false</span> &#125;));</span><br><span class="line"><span class="comment">// parse application/json 解析</span></span><br><span class="line">app.use(bodyParser.json());</span><br></pre></td></tr></table></figure><ol start="4"><li>使用</li></ol><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br></pre></td><td class="code"><pre><span class="line">app.post(<span class="string">'/post'</span>,<span class="function"><span class="keyword">function</span> (<span class="params">req,res</span>) </span>&#123;</span><br><span class="line">    <span class="keyword">var</span> myDate = <span class="keyword">new</span> <span class="built_in">Date</span>();</span><br><span class="line">    <span class="keyword">var</span> year = myDate.getFullYear(); <span class="comment">//获取完整的年份(4位,1970-????)</span></span><br><span class="line">    <span class="keyword">var</span> month = myDate.getMonth() + <span class="number">1</span>; <span class="comment">//获取当前月份(0-11,0代表1月)</span></span><br><span class="line">    <span class="keyword">var</span> date = myDate.getDate(); <span class="comment">//获取当前日(1-31)</span></span><br><span class="line">    <span class="keyword">let</span> comment = req.body;</span><br><span class="line">    comment.dateTime = year + <span class="string">"-"</span> + month + <span class="string">"-"</span> + date;</span><br><span class="line">    comments.unshift(comment);</span><br><span class="line">    res.redirect(<span class="string">'/'</span>);</span><br><span class="line">&#125;)</span><br></pre></td></tr></table></figure><h1 id="mongoose-（mongodb-数据库链接插件）"><a href="#mongoose-（mongodb-数据库链接插件）" class="headerlink" title="mongoose （mongodb 数据库链接插件）"></a>mongoose （mongodb 数据库链接插件）</h1><ol><li>安装</li></ol><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">$ npm i -S mongoose</span><br></pre></td></tr></table></figure><ol start="2"><li>引包</li></ol><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">const</span> mongoose = <span class="built_in">require</span>(<span class="string">'mongoose'</span>);</span><br></pre></td></tr></table></figure><ol start="3"><li>配置</li></ol><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">// 连接数据库</span></span><br><span class="line">mongoose.connect(<span class="string">'mongodb://localhost/test'</span>);</span><br></pre></td></tr></table></figure><ol start="4"><li>使用</li></ol><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">// 创建一个模型</span></span><br><span class="line"><span class="comment">// 就是在设计数据库</span></span><br><span class="line"><span class="comment">// MongoDB 是动态的，非常灵活，只需要在代码中设计你的数据库就可以了</span></span><br><span class="line"><span class="comment">// mongoose 这个包就可以让你的设计编写过程变的非常的简单</span></span><br><span class="line"><span class="keyword">const</span> Cat = mongoose.model(<span class="string">'Cat'</span>, &#123;</span><br><span class="line">    name: <span class="built_in">String</span></span><br><span class="line">&#125;);</span><br><span class="line"></span><br><span class="line"><span class="comment">// 实例化一个 cat</span></span><br><span class="line"><span class="keyword">const</span> kitty = <span class="keyword">new</span> Cat(&#123;</span><br><span class="line">    name: <span class="string">'yhf'</span></span><br><span class="line">&#125;);</span><br><span class="line"><span class="comment">// 持久化保存 kitty 实例</span></span><br><span class="line">kitty.save().then(<span class="function"><span class="params">()</span> =&gt;</span> <span class="built_in">console</span>.log(<span class="string">'meow'</span>));</span><br></pre></td></tr></table></figure><h1 id="bootstrap-css-样式前端架构"><a href="#bootstrap-css-样式前端架构" class="headerlink" title="bootstrap css 样式前端架构"></a>bootstrap css 样式前端架构</h1><ol><li>安装 （3 版居多）</li></ol><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">$ npm install bootstrap@3</span><br></pre></td></tr></table></figure><ol start="2"><li>使用 （在视图的布局页面引入就好）<br>css： <link rel="stylesheet" href="/node_modules/bootstrap/dist/css/bootstrap.css"><br>js： <script src="../node_modules/bootstrap/dist/js/bootstrap.js"></script></li></ol><h1 id="jquery-js-框架"><a href="#jquery-js-框架" class="headerlink" title="jquery js 框架"></a>jquery js 框架</h1><ol><li>安装</li></ol><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">$ npm i jquery</span><br></pre></td></tr></table></figure><ol start="2"><li>使用 (在视图的布局页面引入就好)<script src="../node_modules/jquery/dist/jquery.js"></script></li></ol><h1 id="blueimp-md5-密码加密"><a href="#blueimp-md5-密码加密" class="headerlink" title="blueimp-md5 密码加密"></a>blueimp-md5 密码加密</h1><ol><li>安装</li></ol><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">$ npm install blueimp-md5</span><br></pre></td></tr></table></figure><ol start="2"><li>引包</li></ol><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">const</span> md5 = <span class="built_in">require</span>(<span class="string">'blueimp-md5'</span>);</span><br></pre></td></tr></table></figure><ol start="3"><li>调用</li></ol><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">// md() 在里面填充数据就好 多加几个是多重加密，三个为三重加密</span></span><br><span class="line">body.password = md5(md5(md5(body.password)))</span><br></pre></td></tr></table></figure><h1 id="express-session-数据存储"><a href="#express-session-数据存储" class="headerlink" title="express-session 数据存储"></a>express-session 数据存储</h1><ol><li>安装</li></ol><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">$ npm install express-session</span><br></pre></td></tr></table></figure><ol start="2"><li>配置</li></ol><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">// 引包</span></span><br><span class="line"><span class="keyword">const</span> session = <span class="built_in">require</span>(<span class="string">'express-session'</span>)</span><br><span class="line"></span><br><span class="line"><span class="comment">// 在 Express 这个框架中，默认不支持 Session 和 Cookie</span></span><br><span class="line"><span class="comment">// 但是我们可以使用第三方中间件：express-session 来解决</span></span><br><span class="line"><span class="comment">// 1. npm install express-session</span></span><br><span class="line"><span class="comment">// 2. 配置 (一定要在 app.use(router) 之前)</span></span><br><span class="line"><span class="comment">// 3. 使用</span></span><br><span class="line"><span class="comment">//    当把这个插件配置好之后，我们就可以通过 req.session 来发访问和设置 Session 成员了</span></span><br><span class="line"><span class="comment">//    添加 Session 数据：req.session.foo = 'bar'</span></span><br><span class="line"><span class="comment">//    访问 Session 数据：req.session.foo</span></span><br><span class="line"></span><br><span class="line">app.use(session(&#123;</span><br><span class="line">    <span class="comment">// 配置加密字符串，它会在原有加密基础之上和这个字符串拼起来去加密</span></span><br><span class="line">    <span class="comment">// 目的是为了增加安全性，防止客户端恶意伪造</span></span><br><span class="line">    secret: <span class="string">'itcast'</span>,</span><br><span class="line">    resave: <span class="literal">false</span>,</span><br><span class="line">    saveUninitialized: <span class="literal">false</span> <span class="comment">// 无论你是否使用 Session ，我都默认直接给你分配一把钥匙</span></span><br><span class="line">&#125;))</span><br></pre></td></tr></table></figure><ol start="3"><li>使用</li></ol><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">// 用户存在，登录成功，通过 Session 记录登录状态</span></span><br><span class="line">req.session.user = user;</span><br><span class="line"></span><br><span class="line"><span class="comment">// 用户退出，退出成功，通过 Session 清除登录状态</span></span><br><span class="line">req.session.user = <span class="literal">null</span>;</span><br></pre></td></tr></table></figure><h1 id="webpack-3-12-0"><a href="#webpack-3-12-0" class="headerlink" title="webpack@3.12.0"></a><a href="mailto:webpack@3.12.0" target="_blank" rel="noopener">webpack@3.12.0</a></h1><ol><li>安装</li></ol><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">$ sudo cnpm install webpack@3.12.0 -g   //全局安装webpack 3.12.0 版本</span><br><span class="line">$ sudo cnpm install webpack@3.12.0 -D   //项目本地安装webpack 3.12.0 版本</span><br></pre></td></tr></table></figure><ol start="2"><li>使用看 Vue day5</li></ol><h1 id="webpack-dev-server"><a href="#webpack-dev-server" class="headerlink" title="webpack-dev-server"></a>webpack-dev-server</h1><ol><li>安装</li></ol><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">sudo cnpm i webpack-dev-server@2.6.0 --save-dev</span><br></pre></td></tr></table></figure><ol start="2"><li>使用看 Vue day5</li></ol><h1 id="html-webpack-plugin-把-html-打包在内存"><a href="#html-webpack-plugin-把-html-打包在内存" class="headerlink" title="html-webpack-plugin 把 html 打包在内存"></a>html-webpack-plugin 把 html 打包在内存</h1><ol><li>安装</li></ol><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">$ sudo cnpm i html-webpack-plugin --save-dev</span><br></pre></td></tr></table></figure><h1 id="webpack-css-webpack-不会处理-js-以为的文件需要用其他的插件辅助"><a href="#webpack-css-webpack-不会处理-js-以为的文件需要用其他的插件辅助" class="headerlink" title="webpack css (webpack 不会处理 js 以为的文件需要用其他的插件辅助)"></a>webpack css (webpack 不会处理 js 以为的文件需要用其他的插件辅助)</h1><ol><li>安装 style-loader</li></ol><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">$ sudo cnpm i style-loader --save-dev</span><br></pre></td></tr></table></figure><ol start="2"><li>安装 css-loader</li></ol><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">$ sudo cnpm i css-loader --save-dev</span><br></pre></td></tr></table></figure><h1 id="less"><a href="#less" class="headerlink" title="less"></a>less</h1><ol><li>安装 less-loader</li></ol><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">$ sudo cnpm i less-loader -D</span><br></pre></td></tr></table></figure><ol start="2"><li>安装 less</li></ol><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">$ sudo cnpm i less -D</span><br></pre></td></tr></table></figure><h1 id="sass"><a href="#sass" class="headerlink" title="sass"></a>sass</h1><ol><li>安装 sass-loader</li></ol><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">$ sudo cnpm i sass-loader -D</span><br></pre></td></tr></table></figure><ol start="2"><li>安装 node-sass</li></ol><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">$ sudo cnpm i node-sass -D</span><br></pre></td></tr></table></figure><h1 id="url-loader-与-file-loader"><a href="#url-loader-与-file-loader" class="headerlink" title="url-loader 与 file-loader"></a>url-loader 与 file-loader</h1><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">$ sudo cnpm i url-loader file-loader -D //都是两个一起用可以一起安装</span><br></pre></td></tr></table></figure><h1 id="babel"><a href="#babel" class="headerlink" title="babel"></a>babel</h1><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">$ sudo cnpm i babel-core babel-loader@7 babel-plugin-transform-runtime -D</span><br><span class="line">$ sudo cnpm i babel-preset-env babel-preset-stage-0 -D</span><br></pre></td></tr></table></figure><h1 id="Vue"><a href="#Vue" class="headerlink" title="Vue"></a>Vue</h1><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">$ sudo cnpm i vue -S</span><br></pre></td></tr></table></figure><h1 id="vue-loader-vue-template-compiler"><a href="#vue-loader-vue-template-compiler" class="headerlink" title="vue-loader vue-template-compiler"></a>vue-loader vue-template-compiler</h1><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">$ sudo cnpm i vue-loader vue-template-compiler -D</span><br></pre></td></tr></table></figure><h1 id="Mint-UI"><a href="#Mint-UI" class="headerlink" title="Mint-UI"></a>Mint-UI</h1><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">$ sudo cnpm i mint-ui -S</span><br></pre></td></tr></table></figure><h1 id="babel-plugin-componen"><a href="#babel-plugin-componen" class="headerlink" title="babel-plugin-componen"></a>babel-plugin-componen</h1><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">$ sudo npm install babel-plugin-component -D</span><br></pre></td></tr></table></figure><h1 id="vue-resource"><a href="#vue-resource" class="headerlink" title="vue-resource"></a>vue-resource</h1><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">$ sudo cnpm i vue-resource -S</span><br></pre></td></tr></table></figure><h1 id="babel-plugin-transform-remove-strict-mode"><a href="#babel-plugin-transform-remove-strict-mode" class="headerlink" title="babel-plugin-transform-remove-strict-mode"></a>babel-plugin-transform-remove-strict-mode</h1><ol><li>安装</li></ol><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">$ sudo cnpm i babel-plugin-transform-remove-strict-mode -D</span><br></pre></td></tr></table></figure><ol start="2"><li>配置 .babelrc 文件 没有就在根目录创建</li></ol><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line">&#123;</span><br><span class="line">    <span class="string">"plugins"</span>: [<span class="string">"transform-remove-strict-mode"</span>]</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><ol start="3"><li>使用</li></ol><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line">  <span class="comment">// 以mui为例</span></span><br><span class="line">  <span class="comment">// 在vue里面，因为这个mui.js 写法比较旧所以编译时会报错，所以我们去除严格模式</span></span><br><span class="line">  &lt;script&gt;</span><br><span class="line">  <span class="comment">// 1. 导入 mui 的js文件</span></span><br><span class="line">  <span class="keyword">import</span> mui <span class="keyword">from</span> <span class="string">"../../lib/mui/js/mui.js"</span>;</span><br><span class="line">&lt;<span class="regexp">/script&gt;</span></span><br></pre></td></tr></table></figure><ol start="4"><li>清理报错/报警</li></ol><ul><li>加入这个样式就可以了</li></ul><figure class="highlight css"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line">* &#123;</span><br><span class="line">  <span class="attribute">touch-action</span>: pan-y;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h1 id="vue2-preview"><a href="#vue2-preview" class="headerlink" title="vue2-preview"></a>vue2-preview</h1><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line">https://www.npmjs.com/package/vue2-preview</span><br><span class="line">$ sudo cnpm i vue2-preview -S</span><br><span class="line">http://www.mamicode.com/info-detail-2462808.html</span><br></pre></td></tr></table></figure><h1 id="moment"><a href="#moment" class="headerlink" title="moment"></a>moment</h1><ol><li>安装</li></ol><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">$ sudo cnpm i moment -S</span><br></pre></td></tr></table></figure><ol start="2"><li>使用</li></ol><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">// 在main.js里面全局配置</span></span><br><span class="line"><span class="comment">// 导入时间插件</span></span><br><span class="line"><span class="keyword">import</span> moment <span class="keyword">from</span> <span class="string">'moment'</span></span><br><span class="line"><span class="comment">// 定义全局的过滤器 dateFormat 是调用方法名  dataStr 是传入参数 patter 是格式</span></span><br><span class="line">Vue.filter(<span class="string">'dateFormat'</span>, <span class="function"><span class="keyword">function</span> (<span class="params">dataStr, pattern = <span class="string">'YYYY-MM-DD HH:mm:ss'</span></span>) </span>&#123;</span><br><span class="line">  <span class="keyword">return</span> moment(dataStr).format(pattern)</span><br><span class="line">&#125;)</span><br></pre></td></tr></table></figure>]]></content>
      
      
      <categories>
          
          <category> 插件/配置 </category>
          
      </categories>
      
      
        <tags>
            
            <tag> npm </tag>
            
        </tags>
      
    </entry>
    
    <entry>
      <title>npm/cnpm 安装使用</title>
      <link href="/2018/10/16/npm/"/>
      <url>/2018/10/16/npm/</url>
      
        <content type="html"><![CDATA[<link rel="stylesheet" class="aplayer-secondary-style-marker" href="/assets/css/APlayer.min.css"><script src="/assets/js/APlayer.min.js" class="aplayer-secondary-script-marker"></script><h1 id="配置向导"><a href="#配置向导" class="headerlink" title="配置向导"></a>配置向导</h1><ol><li>node/npm<ul><li>在开发中很多时候都会用到到第三方插件 来使得开发更加到便捷</li><li>在这个时候就会想到 npm 来下载第三方插件，但是使用 npm 到前提就就要先安装 node （在安装node的时候会自动安装npm）</li><li>虽然自动安装 npm 但是，npm比Node.js更频繁地更新，因此请确保您拥有最新版本</li></ul></li><li>nrm npm镜像地址控制<ul><li>作用：提供了一些最常用的NPM包镜像地址，能够让我们快速的切换安装包时候的服务器地址；</li><li>什么是镜像：原来包刚一开始是只存在于国外的NPM服务器，但是由于网络原因，经常访问不到，这时候，我们可以在国内，创建一个和官网完全一样的NPM服务器，只不过，数据都是从人家那里拿过来的，除此之外，使用方式完全一样；</li><li>注意： nrm 只是单纯的提供了几个常用的 下载包的 URL地址，并能够让我们在 这几个 地址之间，很方便的进行切换，但是，我们每次装包的时候，使用的 装包工具，都是 npm</li></ul></li><li>cnpm （注意：这里的cnpm 和 nrm内调整的cnpm地址完全不是一个东西）<ul><li>有时候即使用 nrm 切换为国内的镜像地址仍然觉得很慢就会想到 cnpm 使用和 npm 是一样的</li><li>cnpm和npm一样都是用来安装第三方包的</li></ul></li></ol><h1 id="1-node-npm"><a href="#1-node-npm" class="headerlink" title="1.node/npm"></a>1.node/npm</h1><h2 id="安装-node"><a href="#安装-node" class="headerlink" title="安装 node"></a>安装 node</h2><ol><li><a href="http://nodejs.cn/download/" target="_blank" rel="noopener">Node下载官网</a></li><li>安装比较简单不详细说 按照自己的电脑配置下载包解压安装就可以</li><li>安装完后 node -v 出来版本号就是安装成功了</li><li>npm -v 查看npm的版本 如果发现版本不是最新的请执行下面的操作 （如果是最新直接跳过看后面nrm的安装）</li></ol><h2 id="更新-npm-使用"><a href="#更新-npm-使用" class="headerlink" title="更新 npm 使用"></a>更新 npm 使用</h2><ol><li><p>安装指令</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line">    $ sudo npm install npm@latest -g // 全局安装 -g</span><br><span class="line">  ```  </span><br><span class="line">2. 如果你想用抢先版</span><br><span class="line">    ``` bash</span><br><span class="line">    $ sudo npm install npm@next -g</span><br></pre></td></tr></table></figure></li><li><p>安装完就说一下使用</p><ul><li><p>在我们开发前要做一个初始化的json文件来记录加载我们的第三方包（执行命令后会出来一个json文件）</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">$ sudo npm init -y //init初始化  -y 直接跳过配置</span><br></pre></td></tr></table></figure></li><li><p>正式使用 npm 安装第三方插件</p><ul><li><p>例如安装一个jquery</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">$ sudo npm i jquery -S</span><br></pre></td></tr></table></figure></li><li><p>例如安装指定版本的 webpack 第三方插件</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">$ sudo cnpm install webpack@3.12.0 -g   //全局安装webpack 3.12.0 版本 </span><br><span class="line">$ sudo cnpm install webpack@3.12.0 -D   //项目本地安装webpack 3.12.0 版本</span><br></pre></td></tr></table></figure></li></ul></li><li><p>i 安装 ==== -S 添加到配置文件 ==== -g 全局安装  ==== -D 本地安装（只是安装在项目文件夹）</p></li></ul></li></ol><h1 id="2-nrm"><a href="#2-nrm" class="headerlink" title="2.nrm"></a>2.nrm</h1><ol><li><p>运行npm i nrm -g全局安装nrm包；</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">$ sudo npm i nrm -g</span><br></pre></td></tr></table></figure></li><li><p>使用nrm ls查看当前所有可用的镜像源地址以及当前所使用的镜像源地址；</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">$ sudo npm ls</span><br></pre></td></tr></table></figure></li><li><p>使用nrm use npm或nrm use taobao切换不同的镜像源地址；(国内一般都是用 cnpm 和 taobao)</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">$ sudo npm use taobao</span><br></pre></td></tr></table></figure></li></ol><h1 id="3-cnpm"><a href="#3-cnpm" class="headerlink" title="3.cnpm"></a>3.cnpm</h1><ol><li><p>运行npm i cnpm -g全局安装nrm包；</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">$ sudo npm i cnpm -g</span><br></pre></td></tr></table></figure></li><li><p>cnpm 的版本查看与使用方法和npm完全一样 只是 npm 和 cnpm 之间一个c的区别其他完全一样</p></li></ol>]]></content>
      
      
      <categories>
          
          <category> 插件/配置 </category>
          
      </categories>
      
      
        <tags>
            
            <tag> npm </tag>
            
        </tags>
      
    </entry>
    
    <entry>
      <title>Vue day5</title>
      <link href="/2018/10/16/Vue-day5/"/>
      <url>/2018/10/16/Vue-day5/</url>
      
        <content type="html"><![CDATA[<link rel="stylesheet" class="aplayer-secondary-style-marker" href="/assets/css/APlayer.min.css"><script src="/assets/js/APlayer.min.js" class="aplayer-secondary-script-marker"></script><h1 id="复习"><a href="#复习" class="headerlink" title="复习"></a>复习</h1><ol><li>父子组件直接传值</li></ol><ul><li>案例代码看 vue-day5 案例</li></ul><ol start="2"><li>路由基础使用</li></ol><ul><li>案例代码看 vue-day5 案例</li></ul><h1 id="watch属性的使用"><a href="#watch属性的使用" class="headerlink" title="watch属性的使用"></a><code>watch</code>属性的使用</h1><p>考虑一个问题：想要实现 <code>名</code> 和 <code>姓</code> 两个文本框的内容改变，则全名的文本框中的值也跟着改变；（用以前的知识如何实现？？？）</p><ol><li>监听<code>data</code>中属性的改变：</li></ol><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br></pre></td><td class="code"><pre><span class="line">&lt;div id=&quot;app&quot;&gt;</span><br><span class="line">    &lt;input type=&quot;text&quot; v-model=&quot;firstName&quot;&gt; +</span><br><span class="line">    &lt;input type=&quot;text&quot; v-model=&quot;lastName&quot;&gt; =</span><br><span class="line">    &lt;span&gt;&#123;&#123;fullName&#125;&#125;&lt;/span&gt;</span><br><span class="line">  &lt;/div&gt;</span><br><span class="line"></span><br><span class="line">  &lt;script&gt;</span><br><span class="line">    // 创建 Vue 实例，得到 ViewModel</span><br><span class="line">    var vm = new Vue(&#123;</span><br><span class="line">      el: &apos;#app&apos;,</span><br><span class="line">      data: &#123;</span><br><span class="line">        firstName: &apos;jack&apos;,</span><br><span class="line">        lastName: &apos;chen&apos;,</span><br><span class="line">        fullName: &apos;jack - chen&apos;</span><br><span class="line">      &#125;,</span><br><span class="line">      methods: &#123;&#125;,</span><br><span class="line">      watch: &#123;</span><br><span class="line">        &apos;firstName&apos;: function (newVal, oldVal) &#123; // 第一个参数是新数据，第二个参数是旧数据</span><br><span class="line">          this.fullName = newVal + &apos; - &apos; + this.lastName;</span><br><span class="line">        &#125;,</span><br><span class="line">        &apos;lastName&apos;: function (newVal, oldVal) &#123;</span><br><span class="line">          this.fullName = this.firstName + &apos; - &apos; + newVal;</span><br><span class="line">        &#125;</span><br><span class="line">      &#125;</span><br><span class="line">    &#125;);</span><br><span class="line">  &lt;/script&gt;</span><br></pre></td></tr></table></figure><ol start="2"><li>监听路由对象的改变：</li></ol><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br></pre></td><td class="code"><pre><span class="line">&lt;div id=&quot;app&quot;&gt;</span><br><span class="line">    &lt;router-link to=&quot;/login&quot;&gt;登录&lt;/router-link&gt;</span><br><span class="line">    &lt;router-link to=&quot;/register&quot;&gt;注册&lt;/router-link&gt;</span><br><span class="line"></span><br><span class="line">    &lt;router-view&gt;&lt;/router-view&gt;</span><br><span class="line">  &lt;/div&gt;</span><br><span class="line"></span><br><span class="line">  &lt;script&gt;</span><br><span class="line">    var login = Vue.extend(&#123;</span><br><span class="line">      template: &apos;&lt;h1&gt;登录组件&lt;/h1&gt;&apos;</span><br><span class="line">    &#125;);</span><br><span class="line"></span><br><span class="line">    var register = Vue.extend(&#123;</span><br><span class="line">      template: &apos;&lt;h1&gt;注册组件&lt;/h1&gt;&apos;</span><br><span class="line">    &#125;);</span><br><span class="line"></span><br><span class="line">    var router = new VueRouter(&#123;</span><br><span class="line">      routes: [</span><br><span class="line">        &#123; path: &quot;/login&quot;, component: login &#125;,</span><br><span class="line">        &#123; path: &quot;/register&quot;, component: register &#125;</span><br><span class="line">      ]</span><br><span class="line">    &#125;);</span><br><span class="line"></span><br><span class="line">    // 创建 Vue 实例，得到 ViewModel</span><br><span class="line">    var vm = new Vue(&#123;</span><br><span class="line">      el: &apos;#app&apos;,</span><br><span class="line">      data: &#123;&#125;,</span><br><span class="line">      methods: &#123;&#125;,</span><br><span class="line">      router: router,</span><br><span class="line">      watch: &#123;</span><br><span class="line">        &apos;$route&apos;: function (newVal, oldVal) &#123;</span><br><span class="line">          if (newVal.path === &apos;/login&apos;) &#123;</span><br><span class="line">            console.log(&apos;这是登录组件&apos;);</span><br><span class="line">          &#125;</span><br><span class="line">        &#125;</span><br><span class="line">      &#125;</span><br><span class="line">    &#125;);</span><br><span class="line">  &lt;/script&gt;</span><br></pre></td></tr></table></figure><h1 id="computed计算属性的使用"><a href="#computed计算属性的使用" class="headerlink" title="computed计算属性的使用"></a><code>computed</code>计算属性的使用</h1><ol><li>默认只有<code>getter</code>的计算属性：</li></ol><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br></pre></td><td class="code"><pre><span class="line">&lt;div id=&quot;app&quot;&gt;</span><br><span class="line">    &lt;input type=&quot;text&quot; v-model=&quot;firstName&quot;&gt; +</span><br><span class="line">    &lt;input type=&quot;text&quot; v-model=&quot;lastName&quot;&gt; =</span><br><span class="line">    &lt;span&gt;&#123;&#123;fullName&#125;&#125;&lt;/span&gt;</span><br><span class="line">  &lt;/div&gt;</span><br><span class="line"></span><br><span class="line">  &lt;script&gt;</span><br><span class="line">    // 创建 Vue 实例，得到 ViewModel</span><br><span class="line">    var vm = new Vue(&#123;</span><br><span class="line">      el: &apos;#app&apos;,</span><br><span class="line">      data: &#123;</span><br><span class="line">        firstName: &apos;jack&apos;,</span><br><span class="line">        lastName: &apos;chen&apos;</span><br><span class="line">      &#125;,</span><br><span class="line">      methods: &#123;&#125;,</span><br><span class="line">      computed: &#123; // 计算属性； 特点：当计算属性中所以来的任何一个 data 属性改变之后，都会重新触发 本计算属性 的重新计算，从而更新 fullName 的值</span><br><span class="line">        fullName() &#123;</span><br><span class="line">          return this.firstName + &apos; - &apos; + this.lastName;</span><br><span class="line">        &#125;</span><br><span class="line">      &#125;</span><br><span class="line">    &#125;);</span><br><span class="line">  &lt;/script&gt;</span><br></pre></td></tr></table></figure><ol start="2"><li>定义有<code>getter</code>和<code>setter</code>的计算属性：</li></ol><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br></pre></td><td class="code"><pre><span class="line">&lt;div id=&quot;app&quot;&gt;</span><br><span class="line">    &lt;input type=&quot;text&quot; v-model=&quot;firstName&quot;&gt;</span><br><span class="line">    &lt;input type=&quot;text&quot; v-model=&quot;lastName&quot;&gt;</span><br><span class="line">    &lt;!-- 点击按钮重新为 计算属性 fullName 赋值 --&gt;</span><br><span class="line">    &lt;input type=&quot;button&quot; value=&quot;修改fullName&quot; @click=&quot;changeName&quot;&gt;</span><br><span class="line"></span><br><span class="line">    &lt;span&gt;&#123;&#123;fullName&#125;&#125;&lt;/span&gt;</span><br><span class="line">  &lt;/div&gt;</span><br><span class="line"></span><br><span class="line">  &lt;script&gt;</span><br><span class="line">    // 创建 Vue 实例，得到 ViewModel</span><br><span class="line">    var vm = new Vue(&#123;</span><br><span class="line">      el: &apos;#app&apos;,</span><br><span class="line">      data: &#123;</span><br><span class="line">        firstName: &apos;jack&apos;,</span><br><span class="line">        lastName: &apos;chen&apos;</span><br><span class="line">      &#125;,</span><br><span class="line">      methods: &#123;</span><br><span class="line">        changeName() &#123;</span><br><span class="line">          this.fullName = &apos;TOM - chen2&apos;;</span><br><span class="line">        &#125;</span><br><span class="line">      &#125;,</span><br><span class="line">      computed: &#123;</span><br><span class="line">        fullName: &#123;</span><br><span class="line">          get: function () &#123;</span><br><span class="line">            return this.firstName + &apos; - &apos; + this.lastName;</span><br><span class="line">          &#125;,</span><br><span class="line">          set: function (newVal) &#123;</span><br><span class="line">            var parts = newVal.split(&apos; - &apos;);</span><br><span class="line">            this.firstName = parts[0];</span><br><span class="line">            this.lastName = parts[1];</span><br><span class="line">          &#125;</span><br><span class="line">        &#125;</span><br><span class="line">      &#125;</span><br><span class="line">    &#125;);</span><br><span class="line">  &lt;/script&gt;</span><br></pre></td></tr></table></figure><h1 id="watch、computed和methods之间的对比"><a href="#watch、computed和methods之间的对比" class="headerlink" title="watch、computed和methods之间的对比"></a><code>watch</code>、<code>computed</code>和<code>methods</code>之间的对比</h1><ol><li><code>computed</code>属性的结果会被缓存，除非依赖的响应式属性变化才会重新计算。主要当作属性来使用；</li><li><code>methods</code>方法表示一个具体的操作，主要书写业务逻辑；</li><li><code>watch</code>一个对象，键是需要观察的表达式，值是对应回调函数。主要用来监听某些特定数据的变化，从而进行某些具体的业务逻辑操作；可以看作是<code>computed</code>和<code>methods</code>的结合体；</li></ol><h1 id="nrm的安装使用"><a href="#nrm的安装使用" class="headerlink" title="nrm的安装使用"></a><code>nrm</code>的安装使用</h1><p>作用：提供了一些最常用的 NPM 包镜像地址，能够让我们快速的切换安装包时候的服务器地址；<br>什么是镜像：原来包刚一开始是只存在于国外的 NPM 服务器，但是由于网络原因，经常访问不到，这时候，我们可以在国内，创建一个和官网完全一样的 NPM 服务器，只不过，数据都是从人家那里拿过来的，除此之外，使用方式完全一样；</p><ol><li>运行<code>npm i nrm -g</code>全局安装<code>nrm</code>包；</li><li>使用<code>nrm ls</code>查看当前所有可用的镜像源地址以及当前所使用的镜像源地址；</li><li>使用<code>nrm use npm</code>或<code>nrm use taobao</code>切换不同的镜像源地址；</li></ol><blockquote><p>注意： nrm 只是单纯的提供了几个常用的 下载包的 URL 地址，并能够让我们在 这几个 地址之间，很方便的进行切换，但是，我们每次装包的时候，使用的 装包工具，都是 npm</p></blockquote><h1 id="在网页中会引用哪些常见的静态资源？"><a href="#在网页中会引用哪些常见的静态资源？" class="headerlink" title="在网页中会引用哪些常见的静态资源？"></a>在网页中会引用哪些常见的静态资源？</h1><ul><li>JS</li></ul><ul><li>.js .jsx .coffee .ts（TypeScript 类 C# 语言）</li></ul><ul><li>CSS</li></ul><ul><li>.css .less .sass .scss</li></ul><ul><li>Images</li></ul><ul><li>.jpg .png .gif .bmp .svg</li></ul><ul><li>字体文件（Fonts）</li></ul><ul><li>.svg .ttf .eot .woff .woff2</li></ul><ul><li>模板文件</li></ul><ul><li>.ejs .jade .vue【这是在 webpack 中定义组件的方式，推荐这么用】</li></ul><h1 id="网页中引入的静态资源多了以后有什么问题？？？"><a href="#网页中引入的静态资源多了以后有什么问题？？？" class="headerlink" title="网页中引入的静态资源多了以后有什么问题？？？"></a>网页中引入的静态资源多了以后有什么问题？？？</h1><ol><li>网页加载速度慢， 因为 我们要发起很多的二次请求；</li><li>要处理错综复杂的依赖关系</li></ol><h1 id="如何解决上述两个问题"><a href="#如何解决上述两个问题" class="headerlink" title="如何解决上述两个问题"></a>如何解决上述两个问题</h1><ol><li>合并、压缩、精灵图、图片的 Base64 编码</li><li>可以使用之前学过的 requireJS、也可以使用 webpack 可以解决各个包之间的复杂依赖关系；</li></ol><h1 id="什么是-webpack"><a href="#什么是-webpack" class="headerlink" title="什么是 webpack?"></a>什么是 webpack?</h1><p>webpack 是前端的一个项目构建工具，它是基于 Node.js 开发出来的一个前端工具；</p><h1 id="如何完美实现上述的-2-种解决方案"><a href="#如何完美实现上述的-2-种解决方案" class="headerlink" title="如何完美实现上述的 2 种解决方案"></a>如何完美实现上述的 2 种解决方案</h1><ol><li>使用 Gulp， 是基于 task 任务的；</li><li>使用 Webpack， 是基于整个项目进行构建的；</li></ol><ul><li>借助于 webpack 这个前端自动化构建工具，可以完美实现资源的合并、打包、压缩、混淆等诸多功能。</li><li>根据官网的图片介绍 webpack 打包的过程</li><li><a href="http://webpack.github.io/" target="_blank" rel="noopener">webpack 官网</a></li></ul><h1 id="webpack-安装的两种方式"><a href="#webpack-安装的两种方式" class="headerlink" title="webpack 安装的两种方式"></a>webpack 安装的两种方式</h1><ol><li>运行<code>npm i webpack -g</code>全局安装 webpack，这样就能在全局使用 webpack 的命令</li><li>在项目根目录中运行<code>npm i webpack --save-dev</code>安装到项目依赖中</li></ol><h1 id="初步使用-webpack-打包构建列表隔行变色案例"><a href="#初步使用-webpack-打包构建列表隔行变色案例" class="headerlink" title="初步使用 webpack 打包构建列表隔行变色案例"></a>初步使用 webpack 打包构建列表隔行变色案例</h1><ol><li>运行<code>npm init</code>初始化项目，使用 npm 管理项目中的依赖包</li><li>创建项目基本的目录结构</li><li>使用<code>cnpm i jquery --save</code>安装 jquery 类库</li><li>创建<code>main.js</code>并书写各行变色的代码逻辑：</li></ol><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><span class="line">// 导入jquery类库</span><br><span class="line">   import $ from &apos;jquery&apos;</span><br><span class="line"></span><br><span class="line">   // 设置偶数行背景色，索引从0开始，0是偶数</span><br><span class="line">   $(&apos;#list li:even&apos;).css(&apos;backgroundColor&apos;,&apos;lightblue&apos;);</span><br><span class="line">   // 设置奇数行背景色</span><br><span class="line">   $(&apos;#list li:odd&apos;).css(&apos;backgroundColor&apos;,&apos;pink&apos;);</span><br></pre></td></tr></table></figure><ol start="5"><li>直接在页面上引用<code>main.js</code>会报错，因为浏览器不认识<code>import</code>这种高级的 JS 语法，需要使用 webpack 进行处理，webpack 默认会把这种高级的语法转换为低级的浏览器能识别的语法；</li><li>运行<code>webpack 入口文件路径 输出文件路径</code>对<code>main.js</code>进行处理：</li></ol><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">webpack src/js/main.js dist/bundle.js</span><br></pre></td></tr></table></figure><h1 id="使用-webpack-的配置文件简化打包时候的命令"><a href="#使用-webpack-的配置文件简化打包时候的命令" class="headerlink" title="使用 webpack 的配置文件简化打包时候的命令"></a>使用 webpack 的配置文件简化打包时候的命令</h1><ol><li>在项目根目录中创建<code>webpack.config.js</code></li><li>由于运行 webpack 命令的时候，webpack 需要指定入口文件和输出文件的路径，所以，我们需要在<code>webpack.config.js</code>中配置这两个路径：</li></ol><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br></pre></td><td class="code"><pre><span class="line">// 导入处理路径的模块</span><br><span class="line">var path = require(&apos;path&apos;);</span><br><span class="line"></span><br><span class="line">// 导出一个配置对象，将来webpack在启动的时候，会默认来查找webpack.config.js，并读取这个文件中导出的配置对象，来进行打包处理</span><br><span class="line">module.exports = &#123;</span><br><span class="line">    entry: path.resolve(__dirname, &apos;src/js/main.js&apos;), // 项目入口文件</span><br><span class="line">    output: &#123; // 配置输出选项</span><br><span class="line">        path: path.resolve(__dirname, &apos;dist&apos;), // 配置输出的路径</span><br><span class="line">        filename: &apos;bundle.js&apos; // 配置输出的文件名</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h1 id="实现-webpack-的实时打包构建"><a href="#实现-webpack-的实时打包构建" class="headerlink" title="实现 webpack 的实时打包构建"></a>实现 webpack 的实时打包构建</h1><ol><li>由于每次重新修改代码之后，都需要手动运行 webpack 打包的命令，比较麻烦，所以使用<code>webpack-dev-server</code>来实现代码实时打包编译，当修改代码之后，会自动进行打包构建。</li><li>运行<code>cnpm i webpack-dev-server --save-dev</code>安装到开发依赖</li><li>安装完成之后，在命令行直接运行<code>webpack-dev-server</code>来进行打包，发现报错，此时需要借助于<code>package.json</code>文件中的指令，来进行运行<code>webpack-dev-server</code>命令，在<code>scripts</code>节点下新增<code>&quot;dev&quot;: &quot;webpack-dev-server&quot;</code>指令，发现可以进行实时打包，但是 dist 目录下并没有生成<code>bundle.js</code>文件，这是因为<code>webpack-dev-server</code>将打包好的文件放在了内存中</li></ol><ul><li>把<code>bundle.js</code>放在内存中的好处是：由于需要实时打包编译，所以放在内存中速度会非常快</li><li>这个时候访问 webpack-dev-server 启动的<code>http://localhost:8080/</code>网站，发现是一个文件夹的面板，需要点击到 src 目录下，才能打开我们的 index 首页，此时引用不到 bundle.js 文件，需要修改 index.html 中 script 的 src 属性为:<code>&lt;script src=&quot;../bundle.js&quot;&gt;&lt;/script&gt;</code></li><li>为了能在访问<code>http://localhost:8080/</code>的时候直接访问到 index 首页，可以使用<code>--contentBase src</code>指令来修改 dev 指令，指定启动的根目录：</li></ul><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">&quot;dev&quot;: &quot;webpack-dev-server --contentBase src&quot;</span><br></pre></td></tr></table></figure><p>同时修改 index 页面中 script 的 src 属性为<code>&lt;script src=&quot;bundle.js&quot;&gt;&lt;/script&gt;</code></p><h1 id="使用html-webpack-plugin插件配置启动页面"><a href="#使用html-webpack-plugin插件配置启动页面" class="headerlink" title="使用html-webpack-plugin插件配置启动页面"></a>使用<code>html-webpack-plugin</code>插件配置启动页面</h1><p>由于使用<code>--contentBase</code>指令的过程比较繁琐，需要指定启动的目录，同时还需要修改 index.html 中 script 标签的 src 属性，所以推荐大家使用<code>html-webpack-plugin</code>插件配置启动页面.</p><ol><li>运行<code>cnpm i html-webpack-plugin --save-dev</code>安装到开发依赖</li><li>修改<code>webpack.config.js</code>配置文件如下：</li></ol><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br></pre></td><td class="code"><pre><span class="line">// 导入处理路径的模块</span><br><span class="line">var path = require(&apos;path&apos;);</span><br><span class="line">// 导入自动生成HTMl文件的插件</span><br><span class="line">var htmlWebpackPlugin = require(&apos;html-webpack-plugin&apos;);</span><br><span class="line"></span><br><span class="line">module.exports = &#123;</span><br><span class="line">    entry: path.resolve(__dirname, &apos;src/js/main.js&apos;), // 项目入口文件</span><br><span class="line">    output: &#123; // 配置输出选项</span><br><span class="line">        path: path.resolve(__dirname, &apos;dist&apos;), // 配置输出的路径</span><br><span class="line">        filename: &apos;bundle.js&apos; // 配置输出的文件名</span><br><span class="line">    &#125;,</span><br><span class="line">    plugins:[ // 添加plugins节点配置插件</span><br><span class="line">        new htmlWebpackPlugin(&#123;</span><br><span class="line">            template:path.resolve(__dirname, &apos;src/index.html&apos;),//模板路径</span><br><span class="line">            filename:&apos;index.html&apos;//自动生成的HTML文件的名称</span><br><span class="line">        &#125;)</span><br><span class="line">    ]</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><ol start="3"><li>修改<code>package.json</code>中<code>script</code>节点中的 dev 指令如下：</li></ol><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">&quot;dev&quot;: &quot;webpack-dev-server&quot;</span><br></pre></td></tr></table></figure><ol start="4"><li>将 index.html 中 script 标签注释掉，因为<code>html-webpack-plugin</code>插件会自动把 bundle.js 注入到 index.html 页面中！</li></ol><h1 id="实现自动打开浏览器、热更新和配置浏览器的默认端口号"><a href="#实现自动打开浏览器、热更新和配置浏览器的默认端口号" class="headerlink" title="实现自动打开浏览器、热更新和配置浏览器的默认端口号"></a>实现自动打开浏览器、热更新和配置浏览器的默认端口号</h1><p><strong>注意：热更新在 JS 中表现的不明显，可以从一会儿要讲到的 CSS 身上进行介绍说明！</strong></p><h2 id="方式-1："><a href="#方式-1：" class="headerlink" title="方式 1："></a>方式 1：</h2><ul><li>修改<code>package.json</code>的 script 节点如下，其中<code>--open</code>表示自动打开浏览器，<code>--port 4321</code>表示打开的端口号为 4321，<code>--hot</code>表示启用浏览器热更新：</li></ul><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">&quot;dev&quot;: &quot;webpack-dev-server --hot --port 4321 --open&quot;</span><br></pre></td></tr></table></figure><h2 id="方式-2："><a href="#方式-2：" class="headerlink" title="方式 2："></a>方式 2：</h2><ol><li>修改<code>webpack.config.js</code>文件，新增<code>devServer</code>节点如下：</li></ol><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line">devServer:&#123;</span><br><span class="line">        hot:true,</span><br><span class="line">        open:true,</span><br><span class="line">        port:4321</span><br><span class="line">    &#125;</span><br></pre></td></tr></table></figure><ol start="2"><li>在头部引入<code>webpack</code>模块：</li></ol><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">var webpack = require(&apos;webpack&apos;);</span><br></pre></td></tr></table></figure><ol start="3"><li>在<code>plugins</code>节点下新增：</li></ol><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">new webpack.HotModuleReplacementPlugin()</span><br></pre></td></tr></table></figure><h1 id="使用-webpack-打包-css-文件"><a href="#使用-webpack-打包-css-文件" class="headerlink" title="使用 webpack 打包 css 文件"></a>使用 webpack 打包 css 文件</h1><ol><li>运行<code>cnpm i style-loader css-loader --save-dev</code></li><li>修改<code>webpack.config.js</code>这个配置文件：</li></ol><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line">module: &#123; // 用来配置第三方loader模块的</span><br><span class="line">        rules: [ // 文件的匹配规则</span><br><span class="line">            &#123; test: /\.css$/, use: [&apos;style-loader&apos;, &apos;css-loader&apos;] &#125;//处理css文件的规则</span><br><span class="line">        ]</span><br><span class="line">    &#125;</span><br></pre></td></tr></table></figure><ol start="3"><li>注意：<code>use</code>表示使用哪些模块来处理<code>test</code>所匹配到的文件；<code>use</code>中相关 loader 模块的调用顺序是从后向前调用的；</li></ol><h1 id="使用-webpack-打包-less-文件"><a href="#使用-webpack-打包-less-文件" class="headerlink" title="使用 webpack 打包 less 文件"></a>使用 webpack 打包 less 文件</h1><ol><li>运行<code>cnpm i less-loader less -D</code></li><li>修改<code>webpack.config.js</code>这个配置文件：</li></ol><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">&#123; test: /\.less$/, use: [&apos;style-loader&apos;, &apos;css-loader&apos;, &apos;less-loader&apos;] &#125;,</span><br></pre></td></tr></table></figure><h1 id="使用-webpack-打包-sass-文件"><a href="#使用-webpack-打包-sass-文件" class="headerlink" title="使用 webpack 打包 sass 文件"></a>使用 webpack 打包 sass 文件</h1><ol><li>运行<code>cnpm i sass-loader node-sass --save-dev</code></li><li>在<code>webpack.config.js</code>中添加处理 sass 文件的 loader 模块：</li></ol><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">&#123; test: /\.scss$/, use: [&apos;style-loader&apos;, &apos;css-loader&apos;, &apos;sass-loader&apos;] &#125;</span><br></pre></td></tr></table></figure><h1 id="使用-webpack-处理-css-中的路径"><a href="#使用-webpack-处理-css-中的路径" class="headerlink" title="使用 webpack 处理 css 中的路径"></a>使用 webpack 处理 css 中的路径</h1><ol><li>运行<code>cnpm i url-loader file-loader --save-dev</code></li><li>在<code>webpack.config.js</code>中添加处理 url 路径的 loader 模块：</li></ol><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">&#123; test: /\.(png|jpg|gif)$/, use: &apos;url-loader&apos; &#125;</span><br></pre></td></tr></table></figure><ol start="3"><li>可以通过<code>limit</code>指定进行 base64 编码的图片大小；只有小于指定字节（byte）的图片才会进行 base64 编码：</li></ol><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">&#123; test: /\.(png|jpg|gif)$/, use: &apos;url-loader?limit=43960&amp;name=[hash:8]-[name].[ext]&apos; &#125;,</span><br></pre></td></tr></table></figure><h1 id="使用-babel-处理高级-JS-语法"><a href="#使用-babel-处理高级-JS-语法" class="headerlink" title="使用 babel 处理高级 JS 语法"></a>使用 babel 处理高级 JS 语法</h1><p>在 webpack 中，默认只能处理 一部分 ES6 的新语法，一些更高级的ES6语法或者 ES7 语法，webpack 是处理不了的；这时候，就需要 借助于第三方的 loader，来帮助webpack 处理这些高级的语法，当第三方loader 把 高级语法转为 低级的语法之后，会把结果交给 webpack 去打包到 bundle.js 中<br>通过 Babel ，可以帮我们将 高级的语法转换为 低级的语法</p><ol><li>在 webpack 中，可以运行如下两套 命令，安装两套包，去安装 Babel 相关的loader功能：<br>1.1 第一套包： cnpm i babel-core babel-loader@7 babel-plugin-transform-runtime -D<br>1.2 第二套包： cnpm i babel-preset-env babel-preset-stage-0 -D</li><li>打开 webpack 的配置文件，在 module 节点下的 rules 数组中，添加一个 新的 匹配规则：<br>2.1 <figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">&#123; test:/\.js$/, use: &apos;babel-loader&apos;, exclude:/node_modules/ &#125;</span><br></pre></td></tr></table></figure></li></ol><p>2.2 注意： 在配置 babel 的 loader规则的时候，必须 把 node_modules 目录，通过 exclude 选项排除掉：原因有俩：<br>2.2.1 如果 不排除 node_modules， 则Babel 会把 node_modules 中所有的 第三方 JS 文件，都打包编译，这样，会非常消耗CPU，同时，打包速度非常慢；<br>2.2.2 哪怕，最终，Babel 把 所有 node_modules 中的JS转换完毕了，但是，项目也无法正常运行！</p><ol start="3"><li><p>在项目的 根目录中，新建一个 叫做 .babelrc  的Babel 配置文件，这个配置文件，属于JSON格式，所以，在写 .babelrc 配置的时候，必须符合JSON语法规范： 不能写注释，字符串必须用双引号<br>3.1 在 .babelrc 写如下的配置：  大家可以把 preset 翻译成 【语法】 的意思</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line">&#123;</span><br><span class="line">  &quot;presets&quot;: [&quot;env&quot;, &quot;stage-0&quot;],</span><br><span class="line">  &quot;plugins&quot;: [&quot;transform-runtime&quot;]</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure></li><li><p>了解： 目前，我们安装的 babel-preset-env, 是比较新的ES语法， 之前， 我们安装的是 babel-preset-es2015, 现在，出了一个更新的 语法插件，叫做 babel-preset-env ，它包含了 所有的 和 es***相关的语法</p></li></ol><ol start="5"><li><strong>注意：语法插件<code>babel-preset-es2015</code>可以更新为<code>babel-preset-env</code>，它包含了所有的 ES 相关的语法；</strong></li></ol><h1 id="相关文章"><a href="#相关文章" class="headerlink" title="相关文章"></a>相关文章</h1><p><a href="https://segmentfault.com/p/1210000008466178" target="_blank" rel="noopener">babel-preset-env：你需要的唯一 Babel 插件</a><br><a href="https://segmentfault.com/a/1190000009065987" target="_blank" rel="noopener">Runtime transform 运行时编译 es6</a><br><a href="http://www.cnblogs.com/joyho/articles/4430148.html" target="_blank" rel="noopener">URL 中的 hash（井号）</a></p>]]></content>
      
      
      <categories>
          
          <category> Vue </category>
          
      </categories>
      
      
        <tags>
            
            <tag> Vue笔记 </tag>
            
        </tags>
      
    </entry>
    
    <entry>
      <title>Vue day5 案例</title>
      <link href="/2018/10/16/2018-10-16/"/>
      <url>/2018/10/16/2018-10-16/</url>
      
        <content type="html"><![CDATA[<link rel="stylesheet" class="aplayer-secondary-style-marker" href="/assets/css/APlayer.min.css"><script src="/assets/js/APlayer.min.js" class="aplayer-secondary-script-marker"></script><h1 id="案例分布"><a href="#案例分布" class="headerlink" title="案例分布"></a>案例分布</h1><ol><li>父子组件直接传值</li><li>路由基础使用</li><li>webpack-study</li></ol><h1 id="一、-父子组件直接传值"><a href="#一、-父子组件直接传值" class="headerlink" title="一、 父子组件直接传值"></a>一、 父子组件直接传值</h1><figure class="highlight html"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br><span class="line">64</span><br><span class="line">65</span><br><span class="line">66</span><br><span class="line">67</span><br><span class="line">68</span><br><span class="line">69</span><br><span class="line">70</span><br><span class="line">71</span><br><span class="line">72</span><br><span class="line">73</span><br><span class="line">74</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">&lt;!DOCTYPE html&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">html</span> <span class="attr">lang</span>=<span class="string">"en"</span>&gt;</span></span><br><span class="line"></span><br><span class="line"><span class="tag">&lt;<span class="name">head</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">meta</span> <span class="attr">charset</span>=<span class="string">"UTF-8"</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">meta</span> <span class="attr">name</span>=<span class="string">"viewport"</span> <span class="attr">content</span>=<span class="string">"width=device-width, initial-scale=1.0"</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">meta</span> <span class="attr">http-equiv</span>=<span class="string">"X-UA-Compatible"</span> <span class="attr">content</span>=<span class="string">"ie=edge"</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">title</span>&gt;</span>Document<span class="tag">&lt;/<span class="name">title</span>&gt;</span></span><br><span class="line">    <span class="comment">&lt;!-- 1.引包 --&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">script</span> <span class="attr">src</span>=<span class="string">"./lib/vue-2.5.17.js"</span>&gt;</span><span class="undefined"></span><span class="tag">&lt;/<span class="name">script</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">head</span>&gt;</span></span><br><span class="line"></span><br><span class="line"><span class="tag">&lt;<span class="name">body</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">div</span> <span class="attr">id</span>=<span class="string">"app"</span>&gt;</span></span><br><span class="line">        <span class="comment">&lt;!-- 4.调用 --&gt;</span></span><br><span class="line">        <span class="comment">&lt;!-- 6.: 绑定数据--&gt;</span></span><br><span class="line">        <span class="comment">&lt;!-- 11. @添加点击事件绑定函数--&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">msg</span> <span class="attr">:yf</span>=<span class="string">"yhf"</span> @<span class="attr">cl</span>=<span class="string">"getData"</span>&gt;</span><span class="tag">&lt;/<span class="name">msg</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;/<span class="name">div</span>&gt;</span></span><br><span class="line"></span><br><span class="line">    <span class="comment">&lt;!-- 外部板块 --&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">template</span> <span class="attr">id</span>=<span class="string">"tmp"</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">div</span>&gt;</span></span><br><span class="line">            <span class="comment">&lt;!-- 8.在模板调用 --&gt;</span></span><br><span class="line">            <span class="tag">&lt;<span class="name">h1</span>&gt;</span>这是一个子组件---&#123;&#123;yf&#125;&#125;<span class="tag">&lt;/<span class="name">h1</span>&gt;</span></span><br><span class="line">            <span class="comment">&lt;!-- 13.创建一个按钮用来调用传值函数 --&gt;</span></span><br><span class="line">            <span class="tag">&lt;<span class="name">input</span> <span class="attr">type</span>=<span class="string">"button"</span> <span class="attr">value</span>=<span class="string">"点击给父组件传值"</span> @<span class="attr">click</span>=<span class="string">"setData"</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;/<span class="name">div</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;/<span class="name">template</span>&gt;</span></span><br><span class="line"></span><br><span class="line"><span class="tag">&lt;/<span class="name">body</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">script</span>&gt;</span><span class="undefined"></span></span><br><span class="line"><span class="javascript">    <span class="comment">// 2.创建子组件</span></span></span><br><span class="line"><span class="javascript">    <span class="keyword">let</span> msg = &#123;</span></span><br><span class="line"><span class="javascript">        template: <span class="string">'#tmp'</span>,</span></span><br><span class="line"><span class="javascript">        <span class="comment">// 7.定义父组件拿过来的数据</span></span></span><br><span class="line"><span class="javascript">        props: [<span class="string">'yf'</span>],</span></span><br><span class="line"><span class="javascript">        <span class="comment">// 9.定义子组件的数据</span></span></span><br><span class="line"><span class="undefined">        data() &#123;</span></span><br><span class="line"><span class="javascript">            <span class="keyword">return</span> &#123;</span></span><br><span class="line"><span class="javascript">                msgData: <span class="string">'这是子组件传给父组建的，我是儿子'</span></span></span><br><span class="line"><span class="undefined">            &#125;</span></span><br><span class="line"><span class="undefined">        &#125;,</span></span><br><span class="line"><span class="undefined">        methods: &#123;</span></span><br><span class="line"><span class="javascript">            <span class="comment">// 14.定义函数用来给父组件传值</span></span></span><br><span class="line"><span class="undefined">            setData()&#123;</span></span><br><span class="line"><span class="javascript">                <span class="keyword">this</span>.$emit(<span class="string">'cl'</span>,<span class="keyword">this</span>.msgData)</span></span><br><span class="line"><span class="undefined">            &#125;</span></span><br><span class="line"><span class="undefined">        &#125;</span></span><br><span class="line"><span class="undefined">    &#125;</span></span><br><span class="line"><span class="undefined"></span></span><br><span class="line"><span class="javascript">    <span class="comment">// 创建 Vue 实例,得到 ViewModel</span></span></span><br><span class="line"><span class="javascript">    <span class="keyword">var</span> vm = <span class="keyword">new</span> Vue(&#123;</span></span><br><span class="line"><span class="javascript">        el: <span class="string">'#app'</span>,</span></span><br><span class="line"><span class="undefined">        data: &#123;</span></span><br><span class="line"><span class="javascript">            <span class="comment">// 5.定义父级数据</span></span></span><br><span class="line"><span class="javascript">            yhf: <span class="string">'这个父组建，我是你爸爸'</span>,</span></span><br><span class="line"><span class="javascript">            <span class="comment">// 10.定义一个空字符串接收数据</span></span></span><br><span class="line"><span class="javascript">            msData: <span class="string">''</span></span></span><br><span class="line"><span class="undefined">        &#125;,</span></span><br><span class="line"><span class="undefined">        methods: &#123;</span></span><br><span class="line"><span class="javascript">            <span class="comment">// 12.定义函数接收子组件的数据 data 是传过来的数据</span></span></span><br><span class="line"><span class="undefined">            getData(data)&#123;</span></span><br><span class="line"><span class="javascript">                <span class="keyword">this</span>.msData = data</span></span><br><span class="line"><span class="javascript">                <span class="built_in">console</span>.log(<span class="keyword">this</span>.msData);</span></span><br><span class="line"><span class="undefined">            &#125;</span></span><br><span class="line"><span class="undefined">        &#125;,</span></span><br><span class="line"><span class="javascript">        components: &#123; <span class="comment">// 3.添加组件</span></span></span><br><span class="line"><span class="undefined">            msg</span></span><br><span class="line"><span class="undefined">        &#125;</span></span><br><span class="line"><span class="undefined">    &#125;)</span></span><br><span class="line"><span class="undefined"></span><span class="tag">&lt;/<span class="name">script</span>&gt;</span></span><br><span class="line"></span><br><span class="line"><span class="tag">&lt;/<span class="name">html</span>&gt;</span></span><br></pre></td></tr></table></figure><h1 id="二、路由基础使用"><a href="#二、路由基础使用" class="headerlink" title="二、路由基础使用"></a>二、路由基础使用</h1><figure class="highlight html"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">&lt;!DOCTYPE html&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">html</span> <span class="attr">lang</span>=<span class="string">"en"</span>&gt;</span></span><br><span class="line"></span><br><span class="line"><span class="tag">&lt;<span class="name">head</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">meta</span> <span class="attr">charset</span>=<span class="string">"UTF-8"</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">meta</span> <span class="attr">name</span>=<span class="string">"viewport"</span> <span class="attr">content</span>=<span class="string">"width=device-width, initial-scale=1.0"</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">meta</span> <span class="attr">http-equiv</span>=<span class="string">"X-UA-Compatible"</span> <span class="attr">content</span>=<span class="string">"ie=edge"</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">title</span>&gt;</span>Document<span class="tag">&lt;/<span class="name">title</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">script</span> <span class="attr">src</span>=<span class="string">"./lib/vue-2.5.17.js"</span>&gt;</span><span class="undefined"></span><span class="tag">&lt;/<span class="name">script</span>&gt;</span></span><br><span class="line">    <span class="comment">&lt;!-- 1. 引 vue-router 包 --&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">script</span> <span class="attr">src</span>=<span class="string">"./lib/vue-router-3.0.1.js"</span>&gt;</span><span class="undefined"></span><span class="tag">&lt;/<span class="name">script</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">head</span>&gt;</span></span><br><span class="line"></span><br><span class="line"><span class="tag">&lt;<span class="name">body</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">div</span> <span class="attr">id</span>=<span class="string">"app"</span>&gt;</span></span><br><span class="line">        <span class="comment">&lt;!-- 5.调用路由 --&gt;</span></span><br><span class="line">        <span class="comment">&lt;!-- 渲染路由标签 --&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">router-link</span> <span class="attr">to</span>=<span class="string">"/login"</span>&gt;</span>登录<span class="tag">&lt;/<span class="name">router-link</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">router-link</span> <span class="attr">to</span>=<span class="string">"/register"</span>&gt;</span>注册<span class="tag">&lt;/<span class="name">router-link</span>&gt;</span></span><br><span class="line"></span><br><span class="line">        <span class="comment">&lt;!-- 渲染路由容器 --&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">router-view</span>&gt;</span><span class="tag">&lt;/<span class="name">router-view</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;/<span class="name">div</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">body</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">script</span>&gt;</span><span class="undefined"></span></span><br><span class="line"><span class="javascript">    <span class="comment">// 2.创建组件 登录和注册组件</span></span></span><br><span class="line"><span class="javascript">    <span class="keyword">let</span> login = &#123;</span></span><br><span class="line"><span class="xml">        template: "<span class="tag">&lt;<span class="name">h1</span>&gt;</span>这是登录组件，点击登录<span class="tag">&lt;/<span class="name">h1</span>&gt;</span>"</span></span><br><span class="line"><span class="undefined">    &#125;</span></span><br><span class="line"><span class="javascript">    <span class="keyword">let</span> register = &#123;</span></span><br><span class="line"><span class="xml">        template: "<span class="tag">&lt;<span class="name">h1</span>&gt;</span>这是注册组件，点击注册<span class="tag">&lt;/<span class="name">h1</span>&gt;</span>"</span></span><br><span class="line"><span class="undefined">    &#125;</span></span><br><span class="line"><span class="undefined"></span></span><br><span class="line"><span class="javascript">    <span class="comment">// 3.创建路由</span></span></span><br><span class="line"><span class="javascript">    <span class="keyword">let</span> router = <span class="keyword">new</span> VueRouter(&#123;</span></span><br><span class="line"><span class="javascript">        routes: [&#123; <span class="comment">//设置路由主页重定向</span></span></span><br><span class="line"><span class="javascript">                path: <span class="string">'/'</span>,</span></span><br><span class="line"><span class="javascript">                redirect: <span class="string">'/login'</span></span></span><br><span class="line"><span class="undefined">            &#125;,</span></span><br><span class="line"><span class="undefined">            &#123;</span></span><br><span class="line"><span class="javascript">                path: <span class="string">'/login'</span>,</span></span><br><span class="line"><span class="undefined">                component: login</span></span><br><span class="line"><span class="undefined">            &#125;,</span></span><br><span class="line"><span class="undefined">            &#123;</span></span><br><span class="line"><span class="javascript">                path: <span class="string">'/register'</span>,</span></span><br><span class="line"><span class="undefined">                component: register</span></span><br><span class="line"><span class="undefined">            &#125;</span></span><br><span class="line"><span class="undefined">        ]</span></span><br><span class="line"><span class="undefined">    &#125;)</span></span><br><span class="line"><span class="undefined"></span></span><br><span class="line"><span class="javascript">    <span class="comment">// 创建 Vue 实例,得到 ViewModel</span></span></span><br><span class="line"><span class="javascript">    <span class="keyword">var</span> vm = <span class="keyword">new</span> Vue(&#123;</span></span><br><span class="line"><span class="javascript">        el: <span class="string">'#app'</span>,</span></span><br><span class="line"><span class="undefined">        data: &#123;&#125;,</span></span><br><span class="line"><span class="undefined">        methods: &#123;&#125;,</span></span><br><span class="line"><span class="javascript">        router <span class="comment">//4.挂载路由</span></span></span><br><span class="line"><span class="undefined">    &#125;)</span></span><br><span class="line"><span class="undefined"></span><span class="tag">&lt;/<span class="name">script</span>&gt;</span></span><br><span class="line"></span><br><span class="line"><span class="tag">&lt;/<span class="name">html</span>&gt;</span></span><br></pre></td></tr></table></figure><h1 id="三、webpack-study"><a href="#三、webpack-study" class="headerlink" title="三、webpack-study"></a>三、webpack-study</h1><h2 id="1-案例说明"><a href="#1-案例说明" class="headerlink" title="1.案例说明"></a>1.案例说明</h2><ol><li>学习 webpack<ul><li>安装</li><li>基础使用</li><li>打包</li></ul></li><li>学习 webpack 的webpack-dev-server<ul><li>安装</li><li>自动打包</li><li>配置</li></ul></li><li>学习 webpack 的html css等打包配置</li></ol><h2 id="2-第三方插件"><a href="#2-第三方插件" class="headerlink" title="2.第三方插件"></a>2.第三方插件</h2><ul><li>jquery</li><li><a href="mailto:webpack@3.12.0" target="_blank" rel="noopener">webpack@3.12.0</a></li><li><a href="mailto:webpack-dev-server@2.6.0" target="_blank" rel="noopener">webpack-dev-server@2.6.0</a></li><li>html-webpack-plugin</li><li>css<ul><li>style-loader</li><li>css-loader</li></ul></li><li>less<ul><li>less-loader</li><li>less</li></ul></li><li>sass<ul><li>sass-loader</li><li>node-sass</li></ul></li></ul><h2 id="3-项目地址"><a href="#3-项目地址" class="headerlink" title="3.项目地址"></a>3.<a href="https://github.com/YHF7/Vue/tree/master/webpack-study" target="_blank" rel="noopener">项目地址</a></h2>]]></content>
      
      
      <categories>
          
          <category> Vue </category>
          
      </categories>
      
      
        <tags>
            
            <tag> Vue 案例 </tag>
            
        </tags>
      
    </entry>
    
    <entry>
      <title>Vue day4 案例</title>
      <link href="/2018/10/13/2018-10-13/"/>
      <url>/2018/10/13/2018-10-13/</url>
      
        <content type="html"><![CDATA[<link rel="stylesheet" class="aplayer-secondary-style-marker" href="/assets/css/APlayer.min.css"><script src="/assets/js/APlayer.min.js" class="aplayer-secondary-script-marker"></script><h1 id="案例分布"><a href="#案例分布" class="headerlink" title="案例分布"></a>案例分布</h1><pre><code>1. 组件案例练习2. 路由嵌套3. 命名视图案例</code></pre><h1 id="一、组件案例练习"><a href="#一、组件案例练习" class="headerlink" title="一、组件案例练习"></a>一、组件案例练习</h1><h2 id="重点"><a href="#重点" class="headerlink" title="重点"></a>重点</h2><ul><li>vue<ul><li>@(v-on) v-for :key v-model</li><li>localStorage 本地存储</li><li>子组件 data methods 方法</li><li>JSON</li><li>created 生命周期</li></ul></li></ul><figure class="highlight html"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br><span class="line">64</span><br><span class="line">65</span><br><span class="line">66</span><br><span class="line">67</span><br><span class="line">68</span><br><span class="line">69</span><br><span class="line">70</span><br><span class="line">71</span><br><span class="line">72</span><br><span class="line">73</span><br><span class="line">74</span><br><span class="line">75</span><br><span class="line">76</span><br><span class="line">77</span><br><span class="line">78</span><br><span class="line">79</span><br><span class="line">80</span><br><span class="line">81</span><br><span class="line">82</span><br><span class="line">83</span><br><span class="line">84</span><br><span class="line">85</span><br><span class="line">86</span><br><span class="line">87</span><br><span class="line">88</span><br><span class="line">89</span><br><span class="line">90</span><br><span class="line">91</span><br><span class="line">92</span><br><span class="line">93</span><br><span class="line">94</span><br><span class="line">95</span><br><span class="line">96</span><br><span class="line">97</span><br><span class="line">98</span><br><span class="line">99</span><br><span class="line">100</span><br><span class="line">101</span><br><span class="line">102</span><br><span class="line">103</span><br><span class="line">104</span><br><span class="line">105</span><br><span class="line">106</span><br><span class="line">107</span><br><span class="line">108</span><br><span class="line">109</span><br><span class="line">110</span><br><span class="line">111</span><br></pre></td><td class="code"><pre><span class="line">    <span class="meta">&lt;!DOCTYPE html&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">html</span> <span class="attr">lang</span>=<span class="string">"en"</span>&gt;</span></span><br><span class="line"></span><br><span class="line"><span class="tag">&lt;<span class="name">head</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">meta</span> <span class="attr">charset</span>=<span class="string">"UTF-8"</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">meta</span> <span class="attr">name</span>=<span class="string">"viewport"</span> <span class="attr">content</span>=<span class="string">"width=device-width, initial-scale=1.0"</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">meta</span> <span class="attr">http-equiv</span>=<span class="string">"X-UA-Compatible"</span> <span class="attr">content</span>=<span class="string">"ie=edge"</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">title</span>&gt;</span>Document<span class="tag">&lt;/<span class="name">title</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">script</span> <span class="attr">src</span>=<span class="string">"./lib/vue-2.5.17.js"</span>&gt;</span><span class="undefined"></span><span class="tag">&lt;/<span class="name">script</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">link</span> <span class="attr">rel</span>=<span class="string">"stylesheet"</span> <span class="attr">href</span>=<span class="string">"./lib/bootstrap-3.3.7.css"</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">head</span>&gt;</span></span><br><span class="line"></span><br><span class="line"><span class="tag">&lt;<span class="name">body</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">div</span> <span class="attr">id</span>=<span class="string">"app"</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">tmp-box</span> @<span class="attr">add</span>=<span class="string">"addBox"</span>&gt;</span><span class="tag">&lt;/<span class="name">tmp-box</span>&gt;</span></span><br><span class="line"></span><br><span class="line"></span><br><span class="line">        <span class="tag">&lt;<span class="name">ul</span> <span class="attr">class</span>=<span class="string">"list-group"</span>&gt;</span></span><br><span class="line">            <span class="tag">&lt;<span class="name">li</span> <span class="attr">class</span>=<span class="string">"list-group-item"</span> <span class="attr">v-for</span>=<span class="string">"item in list"</span> <span class="attr">:key</span>=<span class="string">"item.id"</span>&gt;</span></span><br><span class="line">                <span class="tag">&lt;<span class="name">span</span> <span class="attr">class</span>=<span class="string">"badge"</span>&gt;</span>评论人：&#123;&#123;item.name&#125;&#125;<span class="tag">&lt;/<span class="name">span</span>&gt;</span></span><br><span class="line">                &#123;&#123;item.con&#125;&#125;</span><br><span class="line">            <span class="tag">&lt;/<span class="name">li</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;/<span class="name">ul</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;/<span class="name">div</span>&gt;</span></span><br><span class="line"></span><br><span class="line">    <span class="tag">&lt;<span class="name">template</span> <span class="attr">id</span>=<span class="string">"tmp"</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">div</span>&gt;</span></span><br><span class="line">            <span class="tag">&lt;<span class="name">div</span> <span class="attr">class</span>=<span class="string">"form-group"</span>&gt;</span></span><br><span class="line">                <span class="tag">&lt;<span class="name">label</span>&gt;</span>姓名：<span class="tag">&lt;/<span class="name">label</span>&gt;</span></span><br><span class="line">                <span class="tag">&lt;<span class="name">input</span> <span class="attr">type</span>=<span class="string">"text"</span> <span class="attr">class</span>=<span class="string">"form-control"</span> <span class="attr">v-model</span>=<span class="string">"name"</span>&gt;</span></span><br><span class="line">            <span class="tag">&lt;/<span class="name">div</span>&gt;</span></span><br><span class="line">            <span class="tag">&lt;<span class="name">div</span> <span class="attr">class</span>=<span class="string">"form-group"</span>&gt;</span></span><br><span class="line">                <span class="tag">&lt;<span class="name">label</span>&gt;</span>评论：<span class="tag">&lt;/<span class="name">label</span>&gt;</span></span><br><span class="line">                <span class="tag">&lt;<span class="name">textarea</span> <span class="attr">class</span>=<span class="string">"form-control"</span> <span class="attr">rows</span>=<span class="string">"3"</span> <span class="attr">v-model</span>=<span class="string">"con"</span>&gt;</span><span class="tag">&lt;/<span class="name">textarea</span>&gt;</span></span><br><span class="line">            <span class="tag">&lt;/<span class="name">div</span>&gt;</span></span><br><span class="line">            <span class="tag">&lt;<span class="name">div</span> <span class="attr">class</span>=<span class="string">"form-group"</span>&gt;</span></span><br><span class="line">                <span class="tag">&lt;<span class="name">button</span> <span class="attr">type</span>=<span class="string">"button"</span> <span class="attr">class</span>=<span class="string">"btn btn-success"</span> @<span class="attr">click</span>=<span class="string">'add'</span>&gt;</span>提交<span class="tag">&lt;/<span class="name">button</span>&gt;</span></span><br><span class="line">            <span class="tag">&lt;/<span class="name">div</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;/<span class="name">div</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;/<span class="name">template</span>&gt;</span></span><br><span class="line"></span><br><span class="line"><span class="tag">&lt;/<span class="name">body</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">script</span>&gt;</span><span class="undefined"></span></span><br><span class="line"><span class="javascript">    <span class="keyword">let</span> tmpBox = &#123;</span></span><br><span class="line"><span class="javascript">        template: <span class="string">'#tmp'</span>,</span></span><br><span class="line"><span class="undefined">        data() &#123;</span></span><br><span class="line"><span class="javascript">            <span class="keyword">return</span> &#123;</span></span><br><span class="line"><span class="javascript">                id: <span class="built_in">Date</span>.now(),</span></span><br><span class="line"><span class="javascript">                name: <span class="string">''</span>,</span></span><br><span class="line"><span class="javascript">                con: <span class="string">''</span></span></span><br><span class="line"><span class="undefined">            &#125;</span></span><br><span class="line"><span class="undefined">        &#125;,</span></span><br><span class="line"><span class="undefined">        methods: &#123;</span></span><br><span class="line"><span class="undefined">            add() &#123;</span></span><br><span class="line"><span class="javascript">                <span class="keyword">let</span> addCon = &#123;</span></span><br><span class="line"><span class="javascript">                    id: <span class="built_in">Date</span>.now(),</span></span><br><span class="line"><span class="javascript">                    name: <span class="keyword">this</span>.name,</span></span><br><span class="line"><span class="javascript">                    con: <span class="keyword">this</span>.con</span></span><br><span class="line"><span class="undefined">                &#125;;</span></span><br><span class="line"><span class="undefined"></span></span><br><span class="line"><span class="javascript">                <span class="keyword">if</span> (addCon.name!==<span class="string">''</span>&amp;&amp;addCon.con!==<span class="string">''</span>) &#123;</span></span><br><span class="line"><span class="javascript">                    <span class="keyword">let</span> list = <span class="built_in">JSON</span>.parse(localStorage.getItem(<span class="string">'yhf'</span>) || <span class="string">'[]'</span>);</span></span><br><span class="line"><span class="undefined">                    list.unshift(addCon);</span></span><br><span class="line"><span class="undefined"></span></span><br><span class="line"><span class="javascript">                    localStorage.setItem(<span class="string">'yhf'</span>, <span class="built_in">JSON</span>.stringify(list));</span></span><br><span class="line"><span class="javascript">                    <span class="keyword">this</span>.name = <span class="keyword">this</span>.con = <span class="string">''</span>;</span></span><br><span class="line"><span class="undefined"></span></span><br><span class="line"><span class="javascript">                    <span class="keyword">this</span>.$emit(<span class="string">'add'</span>);</span></span><br><span class="line"><span class="javascript">                &#125;<span class="keyword">else</span> &#123;</span></span><br><span class="line"><span class="javascript">                    alert(<span class="string">'请输入姓名'</span>)</span></span><br><span class="line"><span class="undefined">                &#125;</span></span><br><span class="line"><span class="undefined">            &#125;</span></span><br><span class="line"><span class="undefined">        &#125;</span></span><br><span class="line"><span class="undefined">    &#125;</span></span><br><span class="line"><span class="undefined"></span></span><br><span class="line"><span class="javascript">    <span class="keyword">var</span> vm = <span class="keyword">new</span> Vue(&#123;</span></span><br><span class="line"><span class="javascript">        el: <span class="string">'#app'</span>,</span></span><br><span class="line"><span class="undefined">        data: &#123;</span></span><br><span class="line"><span class="undefined">            list: [&#123;</span></span><br><span class="line"><span class="undefined">                    id: 1,</span></span><br><span class="line"><span class="javascript">                    name: <span class="string">'yhf'</span>,</span></span><br><span class="line"><span class="javascript">                    con: <span class="string">'djifjeifefefefe'</span></span></span><br><span class="line"><span class="undefined">                &#125;,</span></span><br><span class="line"><span class="undefined">                &#123;</span></span><br><span class="line"><span class="undefined">                    id: 2,</span></span><br><span class="line"><span class="javascript">                    name: <span class="string">'yhf2'</span>,</span></span><br><span class="line"><span class="javascript">                    con: <span class="string">'djifjeifeefeffefefe'</span></span></span><br><span class="line"><span class="undefined">                &#125;,</span></span><br><span class="line"><span class="undefined">                &#123;</span></span><br><span class="line"><span class="undefined">                    id: 3,</span></span><br><span class="line"><span class="javascript">                    name: <span class="string">'yhf3'</span>,</span></span><br><span class="line"><span class="javascript">                    con: <span class="string">'djifjeifefeefefefefe'</span></span></span><br><span class="line"><span class="undefined">                &#125;,</span></span><br><span class="line"><span class="undefined">            ]</span></span><br><span class="line"><span class="undefined">        &#125;,</span></span><br><span class="line"><span class="javascript">        created: <span class="function"><span class="keyword">function</span> (<span class="params"></span>) </span>&#123;</span></span><br><span class="line"><span class="javascript">            <span class="keyword">this</span>.addBox()</span></span><br><span class="line"><span class="undefined">        &#125;,</span></span><br><span class="line"><span class="undefined">        methods: &#123;</span></span><br><span class="line"><span class="undefined">            addBox() &#123;</span></span><br><span class="line"><span class="javascript">                <span class="keyword">let</span> list = <span class="built_in">JSON</span>.parse(localStorage.getItem(<span class="string">'yhf'</span>) || <span class="string">'[]'</span>);</span></span><br><span class="line"><span class="javascript">                <span class="keyword">this</span>.list = list;</span></span><br><span class="line"><span class="undefined">            &#125;</span></span><br><span class="line"><span class="undefined">        &#125;,</span></span><br><span class="line"><span class="undefined">        components: &#123;</span></span><br><span class="line"><span class="undefined">            tmpBox</span></span><br><span class="line"><span class="undefined">        &#125;</span></span><br><span class="line"><span class="undefined">    &#125;)</span></span><br><span class="line"><span class="undefined"></span><span class="tag">&lt;/<span class="name">script</span>&gt;</span></span><br><span class="line"></span><br><span class="line"><span class="tag">&lt;/<span class="name">html</span>&gt;</span></span><br></pre></td></tr></table></figure><h1 id="二、路由嵌套"><a href="#二、路由嵌套" class="headerlink" title="二、路由嵌套"></a>二、路由嵌套</h1><h2 id="重点-1"><a href="#重点-1" class="headerlink" title="重点"></a>重点</h2><ul><li>vue<ul><li>children 属性</li><li>子路由的设置 带/ 和不带/</li></ul></li></ul><figure class="highlight html"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br><span class="line">64</span><br><span class="line">65</span><br><span class="line">66</span><br><span class="line">67</span><br><span class="line">68</span><br><span class="line">69</span><br><span class="line">70</span><br><span class="line">71</span><br><span class="line">72</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">&lt;!DOCTYPE html&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">html</span> <span class="attr">lang</span>=<span class="string">"en"</span>&gt;</span></span><br><span class="line"></span><br><span class="line"><span class="tag">&lt;<span class="name">head</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">meta</span> <span class="attr">charset</span>=<span class="string">"UTF-8"</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">meta</span> <span class="attr">name</span>=<span class="string">"viewport"</span> <span class="attr">content</span>=<span class="string">"width=device-width, initial-scale=1.0"</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">meta</span> <span class="attr">http-equiv</span>=<span class="string">"X-UA-Compatible"</span> <span class="attr">content</span>=<span class="string">"ie=edge"</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">title</span>&gt;</span>Document<span class="tag">&lt;/<span class="name">title</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">script</span> <span class="attr">src</span>=<span class="string">"./lib/vue-2.5.17.js"</span>&gt;</span><span class="undefined"></span><span class="tag">&lt;/<span class="name">script</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">script</span> <span class="attr">src</span>=<span class="string">"./lib/vue-router-3.0.1.js"</span>&gt;</span><span class="undefined"></span><span class="tag">&lt;/<span class="name">script</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">head</span>&gt;</span></span><br><span class="line"></span><br><span class="line"><span class="tag">&lt;<span class="name">body</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">div</span> <span class="attr">id</span>=<span class="string">"app"</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">router-link</span> <span class="attr">to</span>=<span class="string">"/account"</span>&gt;</span>Account<span class="tag">&lt;/<span class="name">router-link</span>&gt;</span></span><br><span class="line"></span><br><span class="line">        <span class="tag">&lt;<span class="name">router-view</span>&gt;</span><span class="tag">&lt;/<span class="name">router-view</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;/<span class="name">div</span>&gt;</span></span><br><span class="line"></span><br><span class="line">    <span class="tag">&lt;<span class="name">template</span> <span class="attr">id</span>=<span class="string">"tmp1"</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">div</span>&gt;</span></span><br><span class="line">            <span class="tag">&lt;<span class="name">h1</span>&gt;</span>这是 Account 组件<span class="tag">&lt;/<span class="name">h1</span>&gt;</span></span><br><span class="line"></span><br><span class="line">            <span class="tag">&lt;<span class="name">router-link</span> <span class="attr">to</span>=<span class="string">"/login"</span>&gt;</span>登录<span class="tag">&lt;/<span class="name">router-link</span>&gt;</span></span><br><span class="line">            <span class="tag">&lt;<span class="name">router-link</span> <span class="attr">to</span>=<span class="string">"/account/register"</span>&gt;</span>注册<span class="tag">&lt;/<span class="name">router-link</span>&gt;</span></span><br><span class="line"></span><br><span class="line">            <span class="tag">&lt;<span class="name">router-view</span>&gt;</span><span class="tag">&lt;/<span class="name">router-view</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;/<span class="name">div</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;/<span class="name">template</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">body</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">script</span>&gt;</span><span class="undefined"></span></span><br><span class="line"><span class="javascript">    <span class="keyword">var</span> account = &#123;</span></span><br><span class="line"><span class="javascript">        template: <span class="string">'#tmp1'</span></span></span><br><span class="line"><span class="undefined">    &#125;</span></span><br><span class="line"><span class="undefined"></span></span><br><span class="line"><span class="javascript">    <span class="keyword">var</span> login = &#123;</span></span><br><span class="line"><span class="xml">        template: '<span class="tag">&lt;<span class="name">h3</span>&gt;</span>登录<span class="tag">&lt;/<span class="name">h3</span>&gt;</span>'</span></span><br><span class="line"><span class="undefined">    &#125;</span></span><br><span class="line"><span class="undefined"></span></span><br><span class="line"><span class="javascript">    <span class="keyword">var</span> register = &#123;</span></span><br><span class="line"><span class="xml">        template: '<span class="tag">&lt;<span class="name">h3</span>&gt;</span>注册<span class="tag">&lt;/<span class="name">h3</span>&gt;</span>'</span></span><br><span class="line"><span class="undefined">    &#125;</span></span><br><span class="line"><span class="undefined"></span></span><br><span class="line"><span class="javascript">    <span class="keyword">var</span> router = <span class="keyword">new</span> VueRouter(&#123;</span></span><br><span class="line"><span class="undefined">        routes: [&#123;</span></span><br><span class="line"><span class="javascript">                path: <span class="string">'/account'</span>,</span></span><br><span class="line"><span class="undefined">                component: account,</span></span><br><span class="line"><span class="javascript">                <span class="comment">// 使用 children 属性，实现子路由，同时，子路由的 path 前面，不要带 / ，否则永远以根路径开始请求，这样不方便我们用户去理解URL地址</span></span></span><br><span class="line"><span class="undefined">                children: [&#123;</span></span><br><span class="line"><span class="javascript">                        path: <span class="string">'/login'</span>,</span></span><br><span class="line"><span class="undefined">                        component: login</span></span><br><span class="line"><span class="undefined">                    &#125;,</span></span><br><span class="line"><span class="undefined">                    &#123;</span></span><br><span class="line"><span class="javascript">                        path: <span class="string">'register'</span>,</span></span><br><span class="line"><span class="undefined">                        component: register</span></span><br><span class="line"><span class="undefined">                    &#125;</span></span><br><span class="line"><span class="undefined">                ]</span></span><br><span class="line"><span class="undefined">            &#125;</span></span><br><span class="line"><span class="undefined"></span></span><br><span class="line"><span class="undefined">        ]</span></span><br><span class="line"><span class="undefined">    &#125;)</span></span><br><span class="line"><span class="undefined"></span></span><br><span class="line"><span class="javascript">    <span class="comment">// 创建 Vue 实例,得到 ViewModel</span></span></span><br><span class="line"><span class="javascript">    <span class="keyword">var</span> vm = <span class="keyword">new</span> Vue(&#123;</span></span><br><span class="line"><span class="javascript">        el: <span class="string">'#app'</span>,</span></span><br><span class="line"><span class="undefined">        data: &#123;&#125;,</span></span><br><span class="line"><span class="undefined">        methods: &#123;&#125;,</span></span><br><span class="line"><span class="undefined">        router</span></span><br><span class="line"><span class="undefined">    &#125;)</span></span><br><span class="line"><span class="undefined"></span><span class="tag">&lt;/<span class="name">script</span>&gt;</span></span><br><span class="line"></span><br><span class="line"><span class="tag">&lt;/<span class="name">html</span>&gt;</span></span><br></pre></td></tr></table></figure><h1 id="三、命名视图案例"><a href="#三、命名视图案例" class="headerlink" title="三、命名视图案例"></a>三、命名视图案例</h1><h2 id="重点-2"><a href="#重点-2" class="headerlink" title="重点"></a>重点</h2><ul><li>vue<ul><li>属性名 name</li><li>components 多地址设置</li><li>css 设置</li></ul></li></ul><figure class="highlight html"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br><span class="line">64</span><br><span class="line">65</span><br><span class="line">66</span><br><span class="line">67</span><br><span class="line">68</span><br><span class="line">69</span><br><span class="line">70</span><br><span class="line">71</span><br><span class="line">72</span><br><span class="line">73</span><br><span class="line">74</span><br><span class="line">75</span><br><span class="line">76</span><br><span class="line">77</span><br><span class="line">78</span><br><span class="line">79</span><br><span class="line">80</span><br><span class="line">81</span><br><span class="line">82</span><br><span class="line">83</span><br><span class="line">84</span><br><span class="line">85</span><br><span class="line">86</span><br></pre></td><td class="code"><pre><span class="line">    <span class="meta">&lt;!DOCTYPE html&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">html</span> <span class="attr">lang</span>=<span class="string">"en"</span>&gt;</span></span><br><span class="line"></span><br><span class="line"><span class="tag">&lt;<span class="name">head</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">meta</span> <span class="attr">charset</span>=<span class="string">"UTF-8"</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">meta</span> <span class="attr">name</span>=<span class="string">"viewport"</span> <span class="attr">content</span>=<span class="string">"width=device-width, initial-scale=1.0"</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">meta</span> <span class="attr">http-equiv</span>=<span class="string">"X-UA-Compatible"</span> <span class="attr">content</span>=<span class="string">"ie=edge"</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">title</span>&gt;</span>Document<span class="tag">&lt;/<span class="name">title</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">script</span> <span class="attr">src</span>=<span class="string">"./lib/vue-2.5.17.js"</span>&gt;</span><span class="undefined"></span><span class="tag">&lt;/<span class="name">script</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">script</span> <span class="attr">src</span>=<span class="string">"./lib/vue-router-3.0.1.js"</span>&gt;</span><span class="undefined"></span><span class="tag">&lt;/<span class="name">script</span>&gt;</span></span><br><span class="line"></span><br><span class="line">    <span class="tag">&lt;<span class="name">style</span>&gt;</span><span class="undefined"></span></span><br><span class="line"><span class="undefined">        * &#123;</span></span><br><span class="line"><span class="undefined">            margin: 0;</span></span><br><span class="line"><span class="undefined">            padding: 0;</span></span><br><span class="line"><span class="undefined">            font-size: 16px;</span></span><br><span class="line"><span class="undefined">        &#125;</span></span><br><span class="line"><span class="undefined"></span></span><br><span class="line"><span class="css">        <span class="selector-class">.header</span> &#123;</span></span><br><span class="line"><span class="undefined">            background-color: orange;</span></span><br><span class="line"><span class="undefined">            height: 80px;</span></span><br><span class="line"><span class="undefined">        &#125;</span></span><br><span class="line"><span class="undefined"></span></span><br><span class="line"><span class="css">        <span class="selector-class">.container</span> &#123;</span></span><br><span class="line"><span class="undefined">            display: flex;</span></span><br><span class="line"><span class="undefined">            height: 600px;</span></span><br><span class="line"><span class="undefined">        &#125;</span></span><br><span class="line"><span class="undefined"></span></span><br><span class="line"><span class="css">        <span class="selector-class">.left</span> &#123;</span></span><br><span class="line"><span class="undefined">            background-color: lightgreen;</span></span><br><span class="line"><span class="undefined">            flex: 2;</span></span><br><span class="line"><span class="undefined">        &#125;</span></span><br><span class="line"><span class="undefined"></span></span><br><span class="line"><span class="css">        <span class="selector-class">.main</span> &#123;</span></span><br><span class="line"><span class="undefined">            background-color: lightpink;</span></span><br><span class="line"><span class="undefined">            flex: 8;</span></span><br><span class="line"><span class="undefined">        &#125;</span></span><br><span class="line"><span class="undefined">    </span><span class="tag">&lt;/<span class="name">style</span>&gt;</span></span><br><span class="line"></span><br><span class="line"><span class="tag">&lt;/<span class="name">head</span>&gt;</span></span><br><span class="line"></span><br><span class="line"><span class="tag">&lt;<span class="name">body</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">div</span> <span class="attr">id</span>=<span class="string">"app"</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">router-view</span>&gt;</span><span class="tag">&lt;/<span class="name">router-view</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">div</span> <span class="attr">class</span>=<span class="string">"container"</span>&gt;</span></span><br><span class="line">            <span class="tag">&lt;<span class="name">router-view</span> <span class="attr">name</span>=<span class="string">"left"</span>&gt;</span><span class="tag">&lt;/<span class="name">router-view</span>&gt;</span></span><br><span class="line">            <span class="tag">&lt;<span class="name">router-view</span> <span class="attr">name</span>=<span class="string">"main"</span>&gt;</span><span class="tag">&lt;/<span class="name">router-view</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;/<span class="name">div</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;/<span class="name">div</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">body</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">script</span>&gt;</span><span class="undefined"></span></span><br><span class="line"><span class="javascript">    <span class="keyword">var</span> header = &#123;</span></span><br><span class="line"><span class="xml">        template: '<span class="tag">&lt;<span class="name">h1</span> <span class="attr">class</span>=<span class="string">"header"</span>&gt;</span>header<span class="tag">&lt;/<span class="name">h1</span>&gt;</span>'</span></span><br><span class="line"><span class="undefined">    &#125;</span></span><br><span class="line"><span class="undefined"></span></span><br><span class="line"><span class="undefined"></span></span><br><span class="line"><span class="javascript">    <span class="keyword">var</span> leftBox = &#123;</span></span><br><span class="line"><span class="xml">        template: '<span class="tag">&lt;<span class="name">h1</span> <span class="attr">class</span>=<span class="string">"left"</span>&gt;</span>leftBox<span class="tag">&lt;/<span class="name">h1</span>&gt;</span>'</span></span><br><span class="line"><span class="undefined">    &#125;</span></span><br><span class="line"><span class="undefined"></span></span><br><span class="line"><span class="undefined"></span></span><br><span class="line"><span class="javascript">    <span class="keyword">var</span> mainBox = &#123;</span></span><br><span class="line"><span class="xml">        template: '<span class="tag">&lt;<span class="name">h1</span> <span class="attr">class</span>=<span class="string">"main"</span>&gt;</span>mainBox<span class="tag">&lt;/<span class="name">h1</span>&gt;</span>'</span></span><br><span class="line"><span class="undefined">    &#125;</span></span><br><span class="line"><span class="undefined"></span></span><br><span class="line"><span class="javascript">    <span class="keyword">var</span> router = <span class="keyword">new</span> VueRouter(&#123;</span></span><br><span class="line"><span class="undefined">        routes: [&#123;</span></span><br><span class="line"><span class="javascript">            path: <span class="string">'/'</span>,</span></span><br><span class="line"><span class="undefined">            components: &#123;</span></span><br><span class="line"><span class="javascript">                <span class="string">'default'</span>: header,</span></span><br><span class="line"><span class="javascript">                <span class="string">'left'</span>: leftBox,</span></span><br><span class="line"><span class="javascript">                <span class="string">'main'</span>: mainBox</span></span><br><span class="line"><span class="undefined">            &#125;</span></span><br><span class="line"><span class="undefined">        &#125;]</span></span><br><span class="line"><span class="undefined">    &#125;)</span></span><br><span class="line"><span class="undefined"></span></span><br><span class="line"><span class="javascript">    <span class="comment">// 创建 Vue 实例,得到 ViewModel</span></span></span><br><span class="line"><span class="javascript">    <span class="keyword">var</span> vm = <span class="keyword">new</span> Vue(&#123;</span></span><br><span class="line"><span class="javascript">        el: <span class="string">'#app'</span>,</span></span><br><span class="line"><span class="undefined">        data: &#123;&#125;,</span></span><br><span class="line"><span class="undefined">        methods: &#123;&#125;,</span></span><br><span class="line"><span class="undefined">        router</span></span><br><span class="line"><span class="undefined">    &#125;)</span></span><br><span class="line"><span class="undefined"></span><span class="tag">&lt;/<span class="name">script</span>&gt;</span></span><br><span class="line"></span><br><span class="line"><span class="tag">&lt;/<span class="name">html</span>&gt;</span></span><br></pre></td></tr></table></figure>]]></content>
      
      
      <categories>
          
          <category> Vue </category>
          
      </categories>
      
      
        <tags>
            
            <tag> Vue 案例 </tag>
            
        </tags>
      
    </entry>
    
    <entry>
      <title>Vue day4</title>
      <link href="/2018/10/13/Vue-day4/"/>
      <url>/2018/10/13/Vue-day4/</url>
      
        <content type="html"><![CDATA[<link rel="stylesheet" class="aplayer-secondary-style-marker" href="/assets/css/APlayer.min.css"><script src="/assets/js/APlayer.min.js" class="aplayer-secondary-script-marker"></script><h1 id="复习"><a href="#复习" class="headerlink" title="复习"></a>复习</h1><ol><li>实现小球<ul><li>@click 控制小球的显示隐藏</li><li>@before-enter=”beforeEnter” @enter=”enter” @after-enter=”afterEnter” 钩子动画函数 </li></ul></li><li>定义组件 <figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br></pre></td><td class="code"><pre><span class="line">&lt;script&gt;</span><br><span class="line">    // 定义组件的时候，如果要定义全局的组件， Vue.component(&apos;组件的名称&apos;, &#123;&#125;)</span><br><span class="line"></span><br><span class="line"></span><br><span class="line">    // 通过 对象 字面量的形式， 定义了一个 组件模板对象</span><br><span class="line">    var login = &#123;</span><br><span class="line">        template: &apos;&lt;h1&gt;1234&lt;/h1&gt;&apos;</span><br><span class="line">    &#125;</span><br><span class="line">    //  通过  Vue.component 把 组件模板对象，注册为一个全局的Vue 组件，同时，为这个组件起了一个名称，可以让我们  通过 标签形式，在页面中直接引入这个组件</span><br><span class="line">    // Vue.component(&apos;mylogin&apos;, login)</span><br><span class="line"></span><br><span class="line"></span><br><span class="line"></span><br><span class="line">    // 创建 Vue 实例，得到 ViewModel</span><br><span class="line">    var vm = new Vue(&#123;</span><br><span class="line">        el: &apos;#app&apos;,</span><br><span class="line">        data: &#123;&#125;,</span><br><span class="line">        methods: &#123;&#125;,</span><br><span class="line">        components: &#123;</span><br><span class="line">            // &apos;组件的名称&apos;: 组件的模板对象</span><br><span class="line">            // &apos;mylogin&apos;: login</span><br><span class="line">            login</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;);</span><br><span class="line">&lt;/script&gt;</span><br></pre></td></tr></table></figure></li></ol><h1 id="父组件向子组件传值"><a href="#父组件向子组件传值" class="headerlink" title="父组件向子组件传值"></a>父组件向子组件传值</h1><ol><li><p>组件实例定义方式，注意：一定要使用<code>props</code>属性来定义父组件传递过来的数据</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br></pre></td><td class="code"><pre><span class="line">&lt;script&gt;</span><br><span class="line">    // 创建 Vue 实例，得到 ViewModel</span><br><span class="line">    var vm = new Vue(&#123;</span><br><span class="line">      el: &apos;#app&apos;,</span><br><span class="line">      data: &#123;</span><br><span class="line">        msg: &apos;这是父组件中的消息&apos;</span><br><span class="line">      &#125;,</span><br><span class="line">      components: &#123;</span><br><span class="line">        son: &#123;</span><br><span class="line">          template: &apos;&lt;h1&gt;这是子组件 --- &#123;&#123;finfo&#125;&#125;&lt;/h1&gt;&apos;,</span><br><span class="line">          props: [&apos;finfo&apos;]</span><br><span class="line">        &#125;</span><br><span class="line">      &#125;</span><br><span class="line">    &#125;);</span><br><span class="line">  &lt;/script&gt;</span><br></pre></td></tr></table></figure></li><li><p>使用<code>v-bind</code>或简化指令，将数据传递到子组件中：</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line">&lt;div id=&quot;app&quot;&gt;</span><br><span class="line">    &lt;son :finfo=&quot;msg&quot;&gt;&lt;/son&gt;</span><br><span class="line">  &lt;/div&gt;</span><br></pre></td></tr></table></figure></li></ol><h1 id="子组件向父组件传值"><a href="#子组件向父组件传值" class="headerlink" title="子组件向父组件传值"></a>子组件向父组件传值</h1><ol><li>原理：父组件将方法的引用，传递到子组件内部，子组件在内部调用父组件传递过来的方法，同时把要发送给父组件的数据，在调用方法的时候当作参数传递进去；</li><li><p>父组件将方法的引用传递给子组件，其中，<code>getMsg</code>是父组件中<code>methods</code>中定义的方法名称，<code>func</code>是子组件调用传递过来方法时候的方法名称</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">&lt;son @func=&quot;getMsg&quot;&gt;&lt;/son&gt;</span><br></pre></td></tr></table></figure></li><li><p>子组件内部通过<code>this.$emit(&#39;方法名&#39;, 要传递的数据)</code>方式，来调用父组件中的方法，同时把数据传递给父组件使用</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br></pre></td><td class="code"><pre><span class="line">&lt;div id=&quot;app&quot;&gt;</span><br><span class="line">    &lt;!-- 引用父组件 --&gt;</span><br><span class="line">    &lt;son @func=&quot;getMsg&quot;&gt;&lt;/son&gt;</span><br><span class="line"></span><br><span class="line">    &lt;!-- 组件模板定义 --&gt;</span><br><span class="line">    &lt;script type=&quot;x-template&quot; id=&quot;son&quot;&gt;</span><br><span class="line">      &lt;div&gt;</span><br><span class="line">        &lt;input type=&quot;button&quot; value=&quot;向父组件传值&quot; @click=&quot;sendMsg&quot; /&gt;</span><br><span class="line">      &lt;/div&gt;</span><br><span class="line">    &lt;/script&gt;</span><br><span class="line">  &lt;/div&gt;</span><br><span class="line"></span><br><span class="line">  &lt;script&gt;</span><br><span class="line">    // 子组件的定义方式</span><br><span class="line">    Vue.component(&apos;son&apos;, &#123;</span><br><span class="line">      template: &apos;#son&apos;, // 组件模板Id</span><br><span class="line">      methods: &#123;</span><br><span class="line">        sendMsg() &#123; // 按钮的点击事件</span><br><span class="line">          this.$emit(&apos;func&apos;, &apos;OK&apos;); // 调用父组件传递过来的方法，同时把数据传递出去</span><br><span class="line">        &#125;</span><br><span class="line">      &#125;</span><br><span class="line">    &#125;);</span><br><span class="line"></span><br><span class="line">    // 创建 Vue 实例，得到 ViewModel</span><br><span class="line">    var vm = new Vue(&#123;</span><br><span class="line">      el: &apos;#app&apos;,</span><br><span class="line">      data: &#123;&#125;,</span><br><span class="line">      methods: &#123;</span><br><span class="line">        getMsg(val)&#123; // 子组件中，通过 this.$emit() 实际调用的方法，在此进行定义</span><br><span class="line">          alert(val);</span><br><span class="line">        &#125;</span><br><span class="line">      &#125;</span><br><span class="line">    &#125;);</span><br><span class="line">  &lt;/script&gt;</span><br></pre></td></tr></table></figure></li></ol><h1 id="组件中data和props的区别"><a href="#组件中data和props的区别" class="headerlink" title="组件中data和props的区别"></a>组件中data和props的区别</h1><h1 id="评论列表案例"><a href="#评论列表案例" class="headerlink" title="评论列表案例"></a>评论列表案例</h1><p>目标：主要练习父子组件之间传值</p><h1 id="使用-this-refs-来获取元素和组件"><a href="#使用-this-refs-来获取元素和组件" class="headerlink" title="使用 this.$refs 来获取元素和组件"></a>使用 <code>this.$refs</code> 来获取元素和组件</h1><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br></pre></td><td class="code"><pre><span class="line">&lt;div id=&quot;app&quot;&gt;</span><br><span class="line">  &lt;div&gt;</span><br><span class="line">    &lt;input type=&quot;button&quot; value=&quot;获取元素内容&quot; @click=&quot;getElement&quot; /&gt;</span><br><span class="line">    &lt;!-- 使用 ref 获取元素 --&gt;</span><br><span class="line">    &lt;h1 ref=&quot;myh1&quot;&gt;这是一个大大的H1&lt;/h1&gt;</span><br><span class="line"></span><br><span class="line">    &lt;hr&gt;</span><br><span class="line">    &lt;!-- 使用 ref 获取子组件 --&gt;</span><br><span class="line">    &lt;my-com ref=&quot;mycom&quot;&gt;&lt;/my-com&gt;</span><br><span class="line">  &lt;/div&gt;</span><br><span class="line">&lt;/div&gt;</span><br><span class="line"></span><br><span class="line">&lt;script&gt;</span><br><span class="line">  Vue.component(&apos;my-com&apos;, &#123;</span><br><span class="line">    template: &apos;&lt;h5&gt;这是一个子组件&lt;/h5&gt;&apos;,</span><br><span class="line">    data() &#123;</span><br><span class="line">      return &#123;</span><br><span class="line">        name: &apos;子组件&apos;</span><br><span class="line">      &#125;</span><br><span class="line">    &#125;</span><br><span class="line">  &#125;);</span><br><span class="line"></span><br><span class="line">  // 创建 Vue 实例，得到 ViewModel</span><br><span class="line">  var vm = new Vue(&#123;</span><br><span class="line">    el: &apos;#app&apos;,</span><br><span class="line">    data: &#123;&#125;,</span><br><span class="line">    methods: &#123;</span><br><span class="line">      getElement() &#123;</span><br><span class="line">        // 通过 this.$refs 来获取元素</span><br><span class="line">        console.log(this.$refs.myh1.innerText);</span><br><span class="line">        // 通过 this.$refs 来获取组件</span><br><span class="line">        console.log(this.$refs.mycom.name);</span><br><span class="line">      &#125;</span><br><span class="line">    &#125;</span><br><span class="line">  &#125;);</span><br><span class="line">&lt;/script&gt;</span><br></pre></td></tr></table></figure><h1 id="什么是路由"><a href="#什么是路由" class="headerlink" title="什么是路由"></a>什么是路由</h1><ol><li><p><strong>后端路由：</strong>对于普通的网站，所有的超链接都是URL地址，所有的URL地址都对应服务器上对应的资源；</p></li><li><p><strong>前端路由：</strong>对于单页面应用程序来说，主要通过URL中的hash(#号)来实现不同页面之间的切换，同时，hash有一个特点：HTTP请求中不会包含hash相关的内容；所以，单页面程序中的页面跳转主要用hash实现；</p></li><li><p>在单页面应用程序中，这种通过hash改变来切换页面的方式，称作前端路由（区别于后端路由）；</p></li></ol><h1 id="在-vue-中使用-vue-router"><a href="#在-vue-中使用-vue-router" class="headerlink" title="在 vue 中使用 vue-router"></a>在 vue 中使用 vue-router</h1><ol><li><p>导入 vue-router 组件类库：</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">&lt;!-- 1. 导入 vue-router 组件类库 --&gt;</span><br><span class="line">  &lt;script src=&quot;./lib/vue-router-2.7.0.js&quot;&gt;&lt;/script&gt;</span><br></pre></td></tr></table></figure></li><li><p>使用 router-link 组件来导航</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line">&lt;!-- 2. 使用 router-link 组件来导航 --&gt;</span><br><span class="line">&lt;router-link to=&quot;/login&quot;&gt;登录&lt;/router-link&gt;</span><br><span class="line">&lt;router-link to=&quot;/register&quot;&gt;注册&lt;/router-link&gt;</span><br></pre></td></tr></table></figure></li><li><p>使用 router-view 组件来显示匹配到的组件</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">&lt;!-- 3. 使用 router-view 组件来显示匹配到的组件 --&gt;</span><br><span class="line">&lt;router-view&gt;&lt;/router-view&gt;</span><br></pre></td></tr></table></figure></li><li><p>创建使用<code>Vue.extend</code>创建组件</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br></pre></td><td class="code"><pre><span class="line">// 4.1 使用 Vue.extend 来创建登录组件</span><br><span class="line">var login = Vue.extend(&#123;</span><br><span class="line">  template: &apos;&lt;h1&gt;登录组件&lt;/h1&gt;&apos;</span><br><span class="line">&#125;);</span><br><span class="line"></span><br><span class="line">// 4.2 使用 Vue.extend 来创建注册组件</span><br><span class="line">var register = Vue.extend(&#123;</span><br><span class="line">  template: &apos;&lt;h1&gt;注册组件&lt;/h1&gt;&apos;</span><br><span class="line">&#125;);</span><br></pre></td></tr></table></figure></li><li><p>创建一个路由 router 实例，通过 routers 属性来定义路由匹配规则</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><span class="line">// 5. 创建一个路由 router 实例，通过 routers 属性来定义路由匹配规则</span><br><span class="line">    var router = new VueRouter(&#123;</span><br><span class="line">      routes: [</span><br><span class="line">        &#123; path: &apos;/login&apos;, component: login &#125;,</span><br><span class="line">        &#123; path: &apos;/register&apos;, component: register &#125;</span><br><span class="line">      ]</span><br><span class="line">    &#125;);</span><br></pre></td></tr></table></figure></li><li><p>使用 router 属性来使用路由规则</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line">// 6. 创建 Vue 实例，得到 ViewModel</span><br><span class="line">    var vm = new Vue(&#123;</span><br><span class="line">      el: &apos;#app&apos;,</span><br><span class="line">      router: router // 使用 router 属性来使用路由规则</span><br><span class="line">    &#125;);</span><br></pre></td></tr></table></figure></li></ol><h1 id="使用tag属性指定router-link渲染的标签类型"><a href="#使用tag属性指定router-link渲染的标签类型" class="headerlink" title="使用tag属性指定router-link渲染的标签类型"></a>使用tag属性指定router-link渲染的标签类型</h1><h1 id="设置路由重定向"><a href="#设置路由重定向" class="headerlink" title="设置路由重定向"></a>设置路由重定向</h1><h1 id="设置路由高亮"><a href="#设置路由高亮" class="headerlink" title="设置路由高亮"></a>设置路由高亮</h1><h1 id="设置路由切换动效"><a href="#设置路由切换动效" class="headerlink" title="设置路由切换动效"></a>设置路由切换动效</h1><h1 id="在路由规则中定义参数"><a href="#在路由规则中定义参数" class="headerlink" title="在路由规则中定义参数"></a>在路由规则中定义参数</h1><ol><li><p>在规则中定义参数：</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">&#123; path: &apos;/register/:id&apos;, component: register &#125;</span><br></pre></td></tr></table></figure></li><li><p>通过 <code>this.$route.params</code>来获取路由中的参数：</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line">var register = Vue.extend(&#123;</span><br><span class="line">      template: &apos;&lt;h1&gt;注册组件 --- &#123;&#123;this.$route.params.id&#125;&#125;&lt;/h1&gt;&apos;</span><br><span class="line">    &#125;);</span><br></pre></td></tr></table></figure></li></ol><h1 id="使用-children-属性实现路由嵌套"><a href="#使用-children-属性实现路由嵌套" class="headerlink" title="使用 children 属性实现路由嵌套"></a>使用 <code>children</code> 属性实现路由嵌套</h1><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br></pre></td><td class="code"><pre><span class="line">&lt;div id=&quot;app&quot;&gt;</span><br><span class="line">  &lt;router-link to=&quot;/account&quot;&gt;Account&lt;/router-link&gt;</span><br><span class="line"></span><br><span class="line">  &lt;router-view&gt;&lt;/router-view&gt;</span><br><span class="line">&lt;/div&gt;</span><br><span class="line"></span><br><span class="line">&lt;script&gt;</span><br><span class="line">  // 父路由中的组件</span><br><span class="line">  const account = Vue.extend(&#123;</span><br><span class="line">    template: `&lt;div&gt;</span><br><span class="line">      这是account组件</span><br><span class="line">      &lt;router-link to=&quot;/account/login&quot;&gt;login&lt;/router-link&gt; | </span><br><span class="line">      &lt;router-link to=&quot;/account/register&quot;&gt;register&lt;/router-link&gt;</span><br><span class="line">      &lt;router-view&gt;&lt;/router-view&gt;</span><br><span class="line">    &lt;/div&gt;`</span><br><span class="line">  &#125;);</span><br><span class="line"></span><br><span class="line">  // 子路由中的 login 组件</span><br><span class="line">  const login = Vue.extend(&#123;</span><br><span class="line">    template: &apos;&lt;div&gt;登录组件&lt;/div&gt;&apos;</span><br><span class="line">  &#125;);</span><br><span class="line"></span><br><span class="line">  // 子路由中的 register 组件</span><br><span class="line">  const register = Vue.extend(&#123;</span><br><span class="line">    template: &apos;&lt;div&gt;注册组件&lt;/div&gt;&apos;</span><br><span class="line">  &#125;);</span><br><span class="line"></span><br><span class="line">  // 路由实例</span><br><span class="line">  var router = new VueRouter(&#123;</span><br><span class="line">    routes: [</span><br><span class="line">      &#123; path: &apos;/&apos;, redirect: &apos;/account/login&apos; &#125;, // 使用 redirect 实现路由重定向</span><br><span class="line">      &#123;</span><br><span class="line">        path: &apos;/account&apos;,</span><br><span class="line">        component: account,</span><br><span class="line">        children: [ // 通过 children 数组属性，来实现路由的嵌套</span><br><span class="line">          &#123; path: &apos;login&apos;, component: login &#125;, // 注意，子路由的开头位置，不要加 / 路径符</span><br><span class="line">          &#123; path: &apos;register&apos;, component: register &#125;</span><br><span class="line">        ]</span><br><span class="line">      &#125;</span><br><span class="line">    ]</span><br><span class="line">  &#125;);</span><br><span class="line"></span><br><span class="line">  // 创建 Vue 实例，得到 ViewModel</span><br><span class="line">  var vm = new Vue(&#123;</span><br><span class="line">    el: &apos;#app&apos;,</span><br><span class="line">    data: &#123;&#125;,</span><br><span class="line">    methods: &#123;&#125;,</span><br><span class="line">    components: &#123;</span><br><span class="line">      account</span><br><span class="line">    &#125;,</span><br><span class="line">    router: router</span><br><span class="line">  &#125;);</span><br><span class="line">&lt;/script&gt;</span><br></pre></td></tr></table></figure><h1 id="命名视图实现经典布局"><a href="#命名视图实现经典布局" class="headerlink" title="命名视图实现经典布局"></a>命名视图实现经典布局</h1><ol><li><p>标签代码结构：</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><span class="line">&lt;div id=&quot;app&quot;&gt;</span><br><span class="line">    &lt;router-view&gt;&lt;/router-view&gt;</span><br><span class="line">    &lt;div class=&quot;content&quot;&gt;</span><br><span class="line">      &lt;router-view name=&quot;a&quot;&gt;&lt;/router-view&gt;</span><br><span class="line">      &lt;router-view name=&quot;b&quot;&gt;&lt;/router-view&gt;</span><br><span class="line">    &lt;/div&gt;</span><br><span class="line">  &lt;/div&gt;</span><br></pre></td></tr></table></figure></li><li><p>JS代码：</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br></pre></td><td class="code"><pre><span class="line">&lt;script&gt;</span><br><span class="line">    var header = Vue.component(&apos;header&apos;, &#123;</span><br><span class="line">      template: &apos;&lt;div class=&quot;header&quot;&gt;header&lt;/div&gt;&apos;</span><br><span class="line">    &#125;);</span><br><span class="line"></span><br><span class="line">    var sidebar = Vue.component(&apos;sidebar&apos;, &#123;</span><br><span class="line">      template: &apos;&lt;div class=&quot;sidebar&quot;&gt;sidebar&lt;/div&gt;&apos;</span><br><span class="line">    &#125;);</span><br><span class="line"></span><br><span class="line">    var mainbox = Vue.component(&apos;mainbox&apos;, &#123;</span><br><span class="line">      template: &apos;&lt;div class=&quot;mainbox&quot;&gt;mainbox&lt;/div&gt;&apos;</span><br><span class="line">    &#125;);</span><br><span class="line"></span><br><span class="line">    // 创建路由对象</span><br><span class="line">    var router = new VueRouter(&#123;</span><br><span class="line">      routes: [</span><br><span class="line">        &#123;</span><br><span class="line">          path: &apos;/&apos;, components: &#123;</span><br><span class="line">            default: header,</span><br><span class="line">            a: sidebar,</span><br><span class="line">            b: mainbox</span><br><span class="line">          &#125;</span><br><span class="line">        &#125;</span><br><span class="line">      ]</span><br><span class="line">    &#125;);</span><br><span class="line"></span><br><span class="line">    // 创建 Vue 实例，得到 ViewModel</span><br><span class="line">    var vm = new Vue(&#123;</span><br><span class="line">      el: &apos;#app&apos;,</span><br><span class="line">      data: &#123;&#125;,</span><br><span class="line">      methods: &#123;&#125;,</span><br><span class="line">      router</span><br><span class="line">    &#125;);</span><br><span class="line">  &lt;/script&gt;</span><br></pre></td></tr></table></figure></li><li><p>CSS 样式：</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br></pre></td><td class="code"><pre><span class="line">&lt;style&gt;</span><br><span class="line">  .header &#123;</span><br><span class="line">    border: 1px solid red;</span><br><span class="line">  &#125;</span><br><span class="line"></span><br><span class="line">  .content&#123;</span><br><span class="line">    display: flex;</span><br><span class="line">  &#125;</span><br><span class="line">  .sidebar &#123;</span><br><span class="line">    flex: 2;</span><br><span class="line">    border: 1px solid green;</span><br><span class="line">    height: 500px;</span><br><span class="line">  &#125;</span><br><span class="line">  .mainbox&#123;</span><br><span class="line">    flex: 8;</span><br><span class="line">    border: 1px solid blue;</span><br><span class="line">    height: 500px;</span><br><span class="line">  &#125;</span><br><span class="line">&lt;/style&gt;</span><br></pre></td></tr></table></figure></li></ol><h1 id="watch属性的使用"><a href="#watch属性的使用" class="headerlink" title="watch属性的使用"></a><code>watch</code>属性的使用</h1><p>考虑一个问题：想要实现 <code>名</code> 和 <code>姓</code> 两个文本框的内容改变，则全名的文本框中的值也跟着改变；（用以前的知识如何实现？？？）</p><ol><li><p>监听<code>data</code>中属性的改变：</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br></pre></td><td class="code"><pre><span class="line">&lt;div id=&quot;app&quot;&gt;</span><br><span class="line">    &lt;input type=&quot;text&quot; v-model=&quot;firstName&quot;&gt; +</span><br><span class="line">    &lt;input type=&quot;text&quot; v-model=&quot;lastName&quot;&gt; =</span><br><span class="line">    &lt;span&gt;&#123;&#123;fullName&#125;&#125;&lt;/span&gt;</span><br><span class="line">  &lt;/div&gt;</span><br><span class="line"></span><br><span class="line">  &lt;script&gt;</span><br><span class="line">    // 创建 Vue 实例，得到 ViewModel</span><br><span class="line">    var vm = new Vue(&#123;</span><br><span class="line">      el: &apos;#app&apos;,</span><br><span class="line">      data: &#123;</span><br><span class="line">        firstName: &apos;jack&apos;,</span><br><span class="line">        lastName: &apos;chen&apos;,</span><br><span class="line">        fullName: &apos;jack - chen&apos;</span><br><span class="line">      &#125;,</span><br><span class="line">      methods: &#123;&#125;,</span><br><span class="line">      watch: &#123;</span><br><span class="line">        &apos;firstName&apos;: function (newVal, oldVal) &#123; // 第一个参数是新数据，第二个参数是旧数据</span><br><span class="line">          this.fullName = newVal + &apos; - &apos; + this.lastName;</span><br><span class="line">        &#125;,</span><br><span class="line">        &apos;lastName&apos;: function (newVal, oldVal) &#123;</span><br><span class="line">          this.fullName = this.firstName + &apos; - &apos; + newVal;</span><br><span class="line">        &#125;</span><br><span class="line">      &#125;</span><br><span class="line">    &#125;);</span><br><span class="line">  &lt;/script&gt;</span><br></pre></td></tr></table></figure></li><li><p>监听路由对象的改变：</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br></pre></td><td class="code"><pre><span class="line">&lt;div id=&quot;app&quot;&gt;</span><br><span class="line">    &lt;router-link to=&quot;/login&quot;&gt;登录&lt;/router-link&gt;</span><br><span class="line">    &lt;router-link to=&quot;/register&quot;&gt;注册&lt;/router-link&gt;</span><br><span class="line"></span><br><span class="line">    &lt;router-view&gt;&lt;/router-view&gt;</span><br><span class="line">  &lt;/div&gt;</span><br><span class="line"></span><br><span class="line">  &lt;script&gt;</span><br><span class="line">    var login = Vue.extend(&#123;</span><br><span class="line">      template: &apos;&lt;h1&gt;登录组件&lt;/h1&gt;&apos;</span><br><span class="line">    &#125;);</span><br><span class="line"></span><br><span class="line">    var register = Vue.extend(&#123;</span><br><span class="line">      template: &apos;&lt;h1&gt;注册组件&lt;/h1&gt;&apos;</span><br><span class="line">    &#125;);</span><br><span class="line"></span><br><span class="line">    var router = new VueRouter(&#123;</span><br><span class="line">      routes: [</span><br><span class="line">        &#123; path: &quot;/login&quot;, component: login &#125;,</span><br><span class="line">        &#123; path: &quot;/register&quot;, component: register &#125;</span><br><span class="line">      ]</span><br><span class="line">    &#125;);</span><br><span class="line"></span><br><span class="line">    // 创建 Vue 实例，得到 ViewModel</span><br><span class="line">    var vm = new Vue(&#123;</span><br><span class="line">      el: &apos;#app&apos;,</span><br><span class="line">      data: &#123;&#125;,</span><br><span class="line">      methods: &#123;&#125;,</span><br><span class="line">      router: router,</span><br><span class="line">      watch: &#123;</span><br><span class="line">        &apos;$route&apos;: function (newVal, oldVal) &#123;</span><br><span class="line">          if (newVal.path === &apos;/login&apos;) &#123;</span><br><span class="line">            console.log(&apos;这是登录组件&apos;);</span><br><span class="line">          &#125;</span><br><span class="line">        &#125;</span><br><span class="line">      &#125;</span><br><span class="line">    &#125;);</span><br><span class="line">  &lt;/script&gt;</span><br></pre></td></tr></table></figure></li></ol><h1 id="computed计算属性的使用"><a href="#computed计算属性的使用" class="headerlink" title="computed计算属性的使用"></a><code>computed</code>计算属性的使用</h1><ol><li><p>默认只有<code>getter</code>的计算属性：</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br></pre></td><td class="code"><pre><span class="line">&lt;div id=&quot;app&quot;&gt;</span><br><span class="line">    &lt;input type=&quot;text&quot; v-model=&quot;firstName&quot;&gt; +</span><br><span class="line">    &lt;input type=&quot;text&quot; v-model=&quot;lastName&quot;&gt; =</span><br><span class="line">    &lt;span&gt;&#123;&#123;fullName&#125;&#125;&lt;/span&gt;</span><br><span class="line">  &lt;/div&gt;</span><br><span class="line"></span><br><span class="line">  &lt;script&gt;</span><br><span class="line">    // 创建 Vue 实例，得到 ViewModel</span><br><span class="line">    var vm = new Vue(&#123;</span><br><span class="line">      el: &apos;#app&apos;,</span><br><span class="line">      data: &#123;</span><br><span class="line">        firstName: &apos;jack&apos;,</span><br><span class="line">        lastName: &apos;chen&apos;</span><br><span class="line">      &#125;,</span><br><span class="line">      methods: &#123;&#125;,</span><br><span class="line">      computed: &#123; // 计算属性； 特点：当计算属性中所以来的任何一个 data 属性改变之后，都会重新触发 本计算属性 的重新计算，从而更新 fullName 的值</span><br><span class="line">        fullName() &#123;</span><br><span class="line">          return this.firstName + &apos; - &apos; + this.lastName;</span><br><span class="line">        &#125;</span><br><span class="line">      &#125;</span><br><span class="line">    &#125;);</span><br><span class="line">  &lt;/script&gt;</span><br></pre></td></tr></table></figure></li><li><p>定义有<code>getter</code>和<code>setter</code>的计算属性：</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br></pre></td><td class="code"><pre><span class="line">&lt;div id=&quot;app&quot;&gt;</span><br><span class="line">    &lt;input type=&quot;text&quot; v-model=&quot;firstName&quot;&gt;</span><br><span class="line">    &lt;input type=&quot;text&quot; v-model=&quot;lastName&quot;&gt;</span><br><span class="line">    &lt;!-- 点击按钮重新为 计算属性 fullName 赋值 --&gt;</span><br><span class="line">    &lt;input type=&quot;button&quot; value=&quot;修改fullName&quot; @click=&quot;changeName&quot;&gt;</span><br><span class="line"></span><br><span class="line">    &lt;span&gt;&#123;&#123;fullName&#125;&#125;&lt;/span&gt;</span><br><span class="line">  &lt;/div&gt;</span><br><span class="line"></span><br><span class="line">  &lt;script&gt;</span><br><span class="line">    // 创建 Vue 实例，得到 ViewModel</span><br><span class="line">    var vm = new Vue(&#123;</span><br><span class="line">      el: &apos;#app&apos;,</span><br><span class="line">      data: &#123;</span><br><span class="line">        firstName: &apos;jack&apos;,</span><br><span class="line">        lastName: &apos;chen&apos;</span><br><span class="line">      &#125;,</span><br><span class="line">      methods: &#123;</span><br><span class="line">        changeName() &#123;</span><br><span class="line">          this.fullName = &apos;TOM - chen2&apos;;</span><br><span class="line">        &#125;</span><br><span class="line">      &#125;,</span><br><span class="line">      computed: &#123;</span><br><span class="line">        fullName: &#123;</span><br><span class="line">          get: function () &#123;</span><br><span class="line">            return this.firstName + &apos; - &apos; + this.lastName;</span><br><span class="line">          &#125;,</span><br><span class="line">          set: function (newVal) &#123;</span><br><span class="line">            var parts = newVal.split(&apos; - &apos;);</span><br><span class="line">            this.firstName = parts[0];</span><br><span class="line">            this.lastName = parts[1];</span><br><span class="line">          &#125;</span><br><span class="line">        &#125;</span><br><span class="line">      &#125;</span><br><span class="line">    &#125;);</span><br><span class="line">  &lt;/script&gt;</span><br></pre></td></tr></table></figure></li></ol><h1 id="watch、computed和methods之间的对比"><a href="#watch、computed和methods之间的对比" class="headerlink" title="watch、computed和methods之间的对比"></a><code>watch</code>、<code>computed</code>和<code>methods</code>之间的对比</h1><ol><li><code>computed</code>属性的结果会被缓存，除非依赖的响应式属性变化才会重新计算。主要当作属性来使用；</li><li><code>methods</code>方法表示一个具体的操作，主要书写业务逻辑；</li><li><code>watch</code>一个对象，键是需要观察的表达式，值是对应回调函数。主要用来监听某些特定数据的变化，从而进行某些具体的业务逻辑操作；可以看作是<code>computed</code>和<code>methods</code>的结合体；</li></ol><h1 id="nrm的安装使用"><a href="#nrm的安装使用" class="headerlink" title="nrm的安装使用"></a><code>nrm</code>的安装使用</h1><p>作用：提供了一些最常用的NPM包镜像地址，能够让我们快速的切换安装包时候的服务器地址；<br>什么是镜像：原来包刚一开始是只存在于国外的NPM服务器，但是由于网络原因，经常访问不到，这时候，我们可以在国内，创建一个和官网完全一样的NPM服务器，只不过，数据都是从人家那里拿过来的，除此之外，使用方式完全一样；</p><ol><li>运行<code>npm i nrm -g</code>全局安装<code>nrm</code>包；</li><li>使用<code>nrm ls</code>查看当前所有可用的镜像源地址以及当前所使用的镜像源地址；</li><li>使用<code>nrm use npm</code>或<code>nrm use taobao</code>切换不同的镜像源地址；</li></ol><h1 id="相关文件"><a href="#相关文件" class="headerlink" title="相关文件"></a>相关文件</h1><ol><li><a href="http://www.cnblogs.com/joyho/articles/4430148.html" target="_blank" rel="noopener">URL中的hash（井号）</a></li></ol>]]></content>
      
      
      <categories>
          
          <category> Vue </category>
          
      </categories>
      
      
        <tags>
            
            <tag> Vue笔记 </tag>
            
        </tags>
      
    </entry>
    
    <entry>
      <title>Vue 重点</title>
      <link href="/2018/10/13/Vue-Akey/"/>
      <url>/2018/10/13/Vue-Akey/</url>
      
        <content type="html"><![CDATA[<link rel="stylesheet" class="aplayer-secondary-style-marker" href="/assets/css/APlayer.min.css"><script src="/assets/js/APlayer.min.js" class="aplayer-secondary-script-marker"></script><h1 id="day1"><a href="#day1" class="headerlink" title="day1"></a>day1</h1><ol><li><p>MVC 和 MVVM 的区别</p></li><li><p>学习了 Vue 中最基本代码的结构</p></li><li><p>插值表达式 v-cloak v-text v-html v-bind（缩写是:） v-on（缩写是@） v-model v-for v-if v-show</p></li><li><p>事件修饰符 ： .stop .prevent .capture .self .once</p></li><li><p>el 指定要控制的区域 data 是个对象，指定了控制的区域内要用到的数据 methods 虽然带个 s 后缀，但是是个对象，这里可以自定义了方法</p></li><li><p>在 VM 实例中，如果要访问 data 上的数据，或者要访问 methods 中的方法， 必须带 this</p></li><li><p>在 v-for 要会使用 key 属性 （只接受 string / number）</p></li><li><p>v-model 只能应用于表单元素</p></li><li><p>在 vue 中绑定样式两种方式 v-bind:class v-bind:style</p></li></ol><h1 id="day2"><a href="#day2" class="headerlink" title="day2"></a>day2</h1><ol><li>filter 过滤器</li><li>生命周期<ul><li>beofreCreate 实例被创建前</li><li>created （data created）初始化完成</li><li>beforeMount 模版内存编译完成 未渲染</li><li>mounted 内存模板已经挂载到页面</li><li>beforeUpdate 数据以更新未同步到页面</li><li>updated 数据与页面以同步</li></ul></li><li>vue-resource 数据获取<ul><li>getInfo get 发起请求</li><li>postInfo post 发起请求</li><li>jsonpInfo jsonp 发起请求</li></ul></li><li>模拟客户端获取 jsonp 数据 （node）</li></ol><ul><li>通过<script src="http://127.0.0.1:3000/index?callback=showInfo123"></script>调用并执行本地的回调函数（端口，路由，数据判断，函数）</li><li>nodejs 开启端口为 3000 的服务</li><li>使用前端模板引擎 express</li><li>app.get 判断路由 /index</li><li>通过 url 获取到传过来的数据（query）</li><li>使用数据模板拼接 var scriptStr = <code>${query.callback}(${JSON.stringify(data)})</code>(query.callback 是 url 获取过来的数据于后台服务的数据拼接)</li><li>res.end(data)把数据返回</li><li>在页面中就可以用函数接收传过来的数据（showInfor123 就是页面自定义函数名）</li></ul><h1 id="day3"><a href="#day3" class="headerlink" title="day3"></a>day3</h1><ol><li>动画 1 控制语句<ul><li>通过@click 和 v-if 、 data 判断数据的显示隐藏</li></ul></li><li>动画 2 transition css 控制<ul><li>transition vue 官方控制用在 需要被动画控制滴元素，包裹起来</li><li>css 控制<ul><li>v-enter [这是一个时间点] 是进入前，元素的起始状态，此时还没有进入</li><li>v-leave-to 【】是动画离开之后，离开的终止状态，此时元素动画已经结束</li><li>v-enter-active 【入场动画的时间段</li><li>v-leave-active 【离场动画的时间段</li></ul></li></ul></li><li>动画 修改 v-前缀(在定义多个不同动画的时候，用来解决动画重复问题)<ul><li><transition name="my"> 在 transition 包裹的时候给它一个 name</transition></li><li>css 控制的时候<ul><li>就可以把 v-enter 改为 my-enter （这个就可以同时定义多个不同的动画效果）</li></ul></li></ul></li><li>动画 3 使用第三方类<ul><li>animate 第三方类</li><li>引入 <link rel="stylesheet" href="./lib/animate.css"></li><li>入场使用 bounceIn 离场使用 bounceOut （不固定去官网看效果喜欢那个用那个）</li><li>enter-active-class=”bounceIn”</li><li>leave-active-class=”bounceOut”</li><li>使用 :duration=”{ enter: 200, leave: 400 }” 来分别设置 入场的时长 和 离场的时长</li><li>用法简单添加在 transition 里面就可以</li></ul></li><li>动画 4 钩子函数<ul><li>使用 transition 元素，把 需要被动画控制滴元素，包裹起来</li><li>绑定钩子方法 @before-enter=”beforeEnter” @enter=”enter” @after-enter=”afterEnter”</li><li>在 methods 实现方法<ul><li>beforeEnter: function(el){//动画钩子函数的第一个参数：el，表示 要执行动画的那个 DOM 元素，是个原生的 JS DOM 对象}// 函数开始前</li><li>enter: function (el,done) {// done 其实就是 afterEnter 这个函数，也就是说：done 是 afterEnter 函数的引用}// 函数执行动画</li><li>afterEnter: function(el){// 动画完成后}</li></ul></li></ul></li><li>动画 5 动画列表<ul><li>在实现列表过度的时候，如果需要过渡元素，是通过 v-for 循环渲染出来的，不能使用 transition 包裹，需要使用 transitionGroup</li><li>如果要为 v-for 循环创建的元素设置动画，必须给每一个元素 设置 :key 属性</li><li>给 ransition-group 添加 appear 属性，实现页面刚展示出来时候，入场时候的效果</li><li>通过 为 transition-group 元素，设置 tag 属性(指定渲染的类型 如：span 就会渲染成 span ul 就会渲染成 ul)，指定 transition-group 渲染为指定的元素，如果不指定 tag 属性，默认，渲染为 span 标签</li></ul></li><li><p>组件 1</p><ul><li>使用 Vue-extend 来创建全局的 Vue 组件</li><li>// Vue.component 第一个参赛:组件的名称，将来引用组件的时候，就是一个 标签形式 来引入 它的 第二个参赛：Vue.extend 创建的组件，其中 template 就是组件将来展示的 html 内容</li></ul><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line">Vue.component(&apos;myCom1&apos;, Vue.extend(&#123;</span><br><span class="line">    template: &apos;&lt;h3&gt;这是使用 Vue.extend 创建的组件&lt;/h3&gt;&apos; // 通过 template 属性，指定了组件要展示的html结构</span><br><span class="line">&#125;));</span><br></pre></td></tr></table></figure><ul><li>如果要使用组件，直接，把组件的名称，以 html 的标签形式，引入到页面中，即可</li><li>如果使用 Vue.component 定义组件的时候，组件名称使用了 驼峰命名，则在引用组件的时候，需要把 大写的驼峰改为小写的字母，同时，两个单词之间，使用 - 连接；</li></ul><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">&lt;my-com1&gt;&lt;/my-com1&gt;</span><br></pre></td></tr></table></figure></li><li><p>组件 2</p><ul><li>在组件 1 的基础上改进 Vue.component 第二个参赛直接返回一个对象<figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line">Vue.component(&apos;mycom2&apos;, &#123;</span><br><span class="line"> // 注意:不论是哪种方式创建出来的组件,组件的 template 属性指向的模板内容,必须有且只能有唯一的一个根元素</span><br><span class="line"> template: &apos;&lt;div&gt;&lt;h3&gt;这是使用 Vue.extend 创建的组件&lt;/h3&gt;&lt;span&gt;123&lt;/span&gt;&lt;/div&gt;&apos; // 通过 template 属性，指定了组件要展示的html结构</span><br><span class="line">&#125;);</span><br></pre></td></tr></table></figure></li></ul></li><li><p>组件 3</p><ul><li><p>在 被控制的 #app 外面，使用 template 元素，定义组件的 html 模板结构</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line">&lt;template id=&apos;tmp1&apos;&gt;</span><br><span class="line">    &lt;div&gt;</span><br><span class="line">        &lt;h1&gt;这是通过 template 元素，在外部定义的组件结构，有代码的智能提示&lt;/h1&gt;</span><br><span class="line">        &lt;h4&gt;好用 不错&lt;/h4&gt;</span><br><span class="line">    &lt;/div&gt;</span><br><span class="line">&lt;/template&gt;</span><br></pre></td></tr></table></figure></li><li><p>定义全局组件</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line">Vue.component(&apos;mycom3&apos;, &#123;</span><br><span class="line">    template: &apos;#tmp1&apos;</span><br><span class="line">&#125;);</span><br></pre></td></tr></table></figure></li><li><p>定义私有化</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line">components: &#123; // 定义实例内部的私有组件</span><br><span class="line">        login: &#123;</span><br><span class="line">            template: &apos;#tmp1&apos;</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br></pre></td></tr></table></figure></li></ul></li><li><p>组件中的 data</p><ul><li>组件可以有自己的 data 数据</li><li>组件的 data 和 实例的 data 有点不一样，实例中的 data 可以为一个对象，但是 组将中的 data 必须是一个方法</li><li>组件的 data 除了必须为一个方法，这个方法内部，还必须返回一个对象</li><li>组件中 的 data 数据 ，使用方法，和实例中的 data 使用方法完全一样！！！<figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line">data: function () &#123;</span><br><span class="line">        return &#123;</span><br><span class="line">            msg: &apos;这是组件中data的数据&apos;</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br></pre></td></tr></table></figure></li></ul></li><li><p>组件的切换 1</p><ul><li>@click v-if v-else 控制</li></ul></li><li><p>组件切换 2</p><ul><li><!-- Vue 提供了 component，来展示对应名称的组件 --></li><li><!-- component 是一个占位符，:is 属性，可以用来展示组件的名称 --></li><li><component :is="comName"></component></li><li>通过改变 comName 这个数值改变显示组件（data 中 comName 是 login 就会显示 login 的数据 register 就会显示 register 的数据）</li></ul></li><li>组件切换 3<ul><li><transition mode="out-in"> 通过 mode 属性，设置组件切换时候的 模式 （用来给组件添加动画的时候给 css 动画知道,等待动画完成再执行另一个动画）</transition></li></ul></li></ol><h1 id="day4"><a href="#day4" class="headerlink" title="day4"></a>day4</h1><ol><li>父组件向子组件传值<ul><li>父组件，可以在引用子组件的时候，通过 属性绑定（v-bind：）的形式，把 需要传递给 子组件的数据， 以属性绑定的形式，传递到子组件内部，供子组件使用</li><li>使用 props 把父组件传递过来的 （parentmsg）在 v-bind:parentmsg=”msg” 自定义的一个名称 msg 是父级的数据 属性，先在 props 数组中，定义一下，才能使用数据</li><li>组件中的 所有 props 中的数据，都是通过 父组件传递给子组件的</li><li>props 中的数据都是只读的，无法更新赋值 （其实是可以修改但是不符合规定会报错）</li></ul></li><li><p>父组件向子组件传方法</p><ul><li><p>父组件向子组件 传递 方法，使用的是 事件绑定机制 v-on，当我们自定义了 一个 事件属性之后，那么，子组建就能够，通过某些方法，来调用 传递过来的数据</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">&lt;com2 @func=&quot;show&quot;&gt;&lt;/com2&gt;//func是自定义的名称 show 是父组件的方法</span><br></pre></td></tr></table></figure></li><li><p>在子组件如何调用父组件方法 使用 emit 触发，调用</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">this.$emit(&apos;func&apos;,this.sonmsg)//第一个是上面调用定义的方法名 第二个参数开始是向父组件传参数，可以有多个</span><br></pre></td></tr></table></figure></li></ul></li><li><p>localStorage.getItem 和 localStorage.setItem 本地存储的获取和设置</p><ul><li>一般 getItem 是配和 JSON.parse 使用 转化为 json 数据</li><li>setItem 是配合 JSON.stringfy 使用 解析为本地存储格式</li></ul></li><li>ref 获取 dom 元素和组件<ul><li>在 元素中添加 ref=”login” （login 是自定义的名称）</li><li>在 父组件就可以用 this.$refs.login 获取到 dom 元素</li><li>this.$refs.login.show() 可直接获取到方法（show()是 login 子组件内的方法）</li></ul></li><li><p>router 页面路由</p><ul><li>vue-router 是 vue 的路由第三方插件</li><li>创建一个路由对象，当 导入 vue-router 包之后，在 window 全局对象中，就有一个路由当架构函数，叫做 VueRouter</li><li>linkActiveClass: ‘myactive’ // 通过 linkActiveClass 来修改样式属性名 在 vuerouter 内定义</li><li>redirect 重定向</li></ul><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br></pre></td><td class="code"><pre><span class="line">    // 在 new 路由对象当时候，可以为 构造函数，传递一个配置对象</span><br><span class="line">    var routerObj = new VueRouter(&#123;</span><br><span class="line">    // route // 这个配置对象中的 route 表示[路由匹配规则]的意思</span><br><span class="line">    routes: [ // 路由匹配规则</span><br><span class="line">        // 每个路由规则，都是一个对象，这个规则对象，身上，有两个必须当属性：</span><br><span class="line">        //   属性1 是 path，表示监听 那个路由链接地址</span><br><span class="line">        //   属性2 上 component，表示，如果 路由是前面匹配到的 path, 展示 component 属性对应的那个组件</span><br><span class="line">        // 注意： component 的属性值，必须是一个 组件的模版对象，不能是 组件的引用名称</span><br><span class="line"></span><br><span class="line">        // 不推荐使用</span><br><span class="line">        // &#123;</span><br><span class="line">        //     path:&quot;/&quot;,</span><br><span class="line">        //     component: login</span><br><span class="line">        // &#125;,</span><br><span class="line">        &#123; // 这里的 redirect 和 node 中的 redirect 完全啥两码事</span><br><span class="line">            path: &apos;/&apos;,</span><br><span class="line">            redirect: &apos;/login&apos;</span><br><span class="line">        &#125;,</span><br><span class="line">        &#123;</span><br><span class="line">            path: &apos;/login&apos;,</span><br><span class="line">            component: login</span><br><span class="line">        &#125;,</span><br><span class="line">        &#123;</span><br><span class="line">            path: &apos;/register&apos;,</span><br><span class="line">            component: register</span><br><span class="line">        &#125;</span><br><span class="line">    ],</span><br><span class="line">    linkActiveClass: &apos;myactive&apos; // 通过linkActiveClass 来修改样式属性名</span><br><span class="line">&#125;);</span><br></pre></td></tr></table></figure><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br></pre></td><td class="code"><pre><span class="line">/* vue-router 提供的类名修改样式 */</span><br><span class="line">/* .router-link-active &#123;</span><br><span class="line">    color: red;</span><br><span class="line">    font-weight: 800;</span><br><span class="line">    font-style: italic;</span><br><span class="line">    font-size: 80px;</span><br><span class="line">    text-decoration: underline;</span><br><span class="line">    background-color: pink;</span><br><span class="line">&#125; */</span><br><span class="line"></span><br><span class="line">/* 自定义类名修改样式 */</span><br><span class="line">.myactive &#123;</span><br><span class="line">    color: red;</span><br><span class="line">    font-weight: 800;</span><br><span class="line">    font-style: italic;</span><br><span class="line">    font-size: 80px;</span><br><span class="line">    text-decoration: underline;</span><br><span class="line">    background-color: pink;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line">.v-enter,</span><br><span class="line">.v-leave-to &#123;</span><br><span class="line">    opacity: 0;</span><br><span class="line">    transform: translateX(140px);</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line">.v-enter-active,</span><br><span class="line">.v-leave-active &#123;</span><br><span class="line">    transition: all .5s ease;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><ul><li>vue-router 提供的元素，专门用来 当作占位符的，将来，路由规则，匹配到的组件，就会展示到这个 router-view 中去 <router-view></router-view></li><li>router-link 默认渲染为一个 a 标签</li><li>tag 指定渲染类型</li></ul><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br></pre></td><td class="code"><pre><span class="line">&lt;!-- router-link 默认渲染为一个 a标签 --&gt;</span><br><span class="line">&lt;!-- msg 指定渲染类型 --&gt;</span><br><span class="line">&lt;router-link to=&quot;/login&quot; tag=&quot;span&quot;&gt;登录&lt;/router-link&gt;</span><br><span class="line">&lt;router-link to=&quot;/register&quot;&gt;注册&lt;/router-link&gt;</span><br><span class="line"></span><br><span class="line">&lt;!-- 这是 vue-router 提供的元素，专门用来 当作占位符的，将来，路由规则，匹配到的组件，就会展示到这个 router-view 中去 --&gt;</span><br><span class="line">&lt;!-- 所以：我们可以把 router-view 认为是一个占位符 --&gt;</span><br><span class="line">&lt;!-- mode 定义过渡摸索 先out 再 in --&gt;</span><br><span class="line">&lt;transition mode=&apos;out-in&apos;&gt;</span><br><span class="line">    &lt;router-view&gt;&lt;/router-view&gt;</span><br><span class="line">&lt;/transition&gt;</span><br></pre></td></tr></table></figure></li><li><p>路由规则中定义参数 $route</p><ul><li><p>方法一 query</p><ul><li><p>如果在路由中，使用 查询字符串 则 不需要修改 路由规则对 path 属性（在 router-link 直接用?拼接）</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">&lt;router-link to=&quot;/login?id=10&amp;name=李白&quot;&gt;登录&lt;/router-link&gt;</span><br></pre></td></tr></table></figure></li><li><p>数据会存储在 $route 内的 query 的对象中 如何获取呢 因为是在子组件内部获取的本身就是自己 this 可写可不写</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line">console.log(this.$route.query);</span><br><span class="line">this.$route.query.id // 可获取到内部自己设置的id</span><br><span class="line">this.$route.query.(设置的数据名)</span><br></pre></td></tr></table></figure></li></ul></li><li><p>方法二 params</p><ul><li><p>与方法一不同的是数据名不是在 url 设置是直接在路由设置，直接写数据就可以 /数据</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">&lt;router-link to=&quot;/login/12/yhf&quot;&gt;登录&lt;/router-link&gt;</span><br></pre></td></tr></table></figure></li><li><p>设置了 url 再去设置路由判断 在路由后面以/:元素名的形式添加</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line">routes: [&#123;</span><br><span class="line">        path: &apos;/login/:id/:name&apos;,</span><br><span class="line">        component: login</span><br><span class="line">    &#125;]</span><br></pre></td></tr></table></figure></li><li><p>数据还是会存在 $route 里面但是 不是在 query 里面了 而是在 $route 内的 params 里面 获取的方法和 query 一样</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line">console.log(this.$route.params);</span><br><span class="line">console.log(this.$route.params.id);</span><br><span class="line">console.log(this.$route.params.name);</span><br></pre></td></tr></table></figure></li></ul></li></ul></li><li><p>路由中嵌套路由</p><ul><li>在一个路由中我们会通过点击这个路由，展示路由中另一个路由的内容（只是更改路由处的数据不影响其他页面的显示）</li><li>设置路由</li></ul><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">&lt;router-link to=&quot;/login&quot;&gt;登录&lt;/router-link&gt;// 为继承account路由 所有在数据查找的时候会在根目录查找 （也是因为后面路由的设置而判断 后面的路由继承了account 路由就不可以这样  继承的事根路由就要这样用）</span><br><span class="line">&lt;router-link to=&quot;/account/register&quot;&gt;注册&lt;/router-link&gt; // 继承在account下的路由</span><br></pre></td></tr></table></figure><ul><li>设置路由</li></ul><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br></pre></td><td class="code"><pre><span class="line">routes: [&#123;</span><br><span class="line">        path: &apos;/account&apos;,// 设置主路由</span><br><span class="line">        component: account,// 路由展示的组件</span><br><span class="line"></span><br><span class="line">        children: [// 设置嵌套的 子路由</span><br><span class="line">            // 使用 children 属性，实现子路由，同时，子路由的 path 前面，不要带 / ，否则永远以根路径开始请求，这样不方便我们用户去理解URL地址</span><br><span class="line">            //这样就是设置了根为查找目录</span><br><span class="line">            &#123;</span><br><span class="line">                path: &apos;/login&apos;,</span><br><span class="line">                component: login</span><br><span class="line">            &#125;,</span><br><span class="line">            // 这个就是嵌套了子路有 不需要添加 /</span><br><span class="line">            &#123;</span><br><span class="line">                path: &apos;register&apos;,</span><br><span class="line">                component: register</span><br><span class="line">            &#125;</span><br><span class="line">        ]</span><br><span class="line">    &#125;</span><br><span class="line">]</span><br></pre></td></tr></table></figure></li><li><p>命名视图</p><ul><li>在同一个页面展示多个视图 在路由判断中就会被主路由覆盖</li><li>在路由判断中 路由地址 component 不止可以存放一个地址</li><li><p>在存放多个地址的时候 把 components 加个 s 接收对象就可以存放多个地址</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><span class="line">routes: [&#123;</span><br><span class="line">    path: &apos;/&apos;,</span><br><span class="line">    components: &#123; // 路由地址</span><br><span class="line">        &apos;default&apos;: header,// 设置多地址的时候 前面&apos;&apos; 号中填写的是这个路由的属性名（自定义） 后面的是路由地址</span><br><span class="line">        &apos;left&apos;: leftBox,</span><br><span class="line">        &apos;main&apos;: mainBox</span><br><span class="line">    &#125;</span><br><span class="line">&#125;]</span><br></pre></td></tr></table></figure></li><li><p>如何使用多路由视图呢</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line">&lt;router-view&gt;&lt;/router-view&gt;// 主路由可不用写属性名</span><br><span class="line">&lt;router-view name=&quot;left&quot;&gt;&lt;/router-view&gt;// 但是子路由就必须写属性名 name</span><br><span class="line">&lt;router-view name=&quot;main&quot;&gt;&lt;/router-view&gt;</span><br></pre></td></tr></table></figure></li></ul></li></ol><h1 id="day5"><a href="#day5" class="headerlink" title="day5"></a>day5</h1><ol><li>watch 监听 data 中指定数据的变化，然后触发这个 watch 中对应的 function 处理函数</li></ol><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br></pre></td><td class="code"><pre><span class="line">watch: &#123; <span class="comment">// 使用这个 属性，可以监听 data 中指定数据的变化，然后触发这个 watch 中对应的 function 处理函数</span></span><br><span class="line">    <span class="comment">// firstname 是data中定义的  在function的函数操作中会有两个默认的值</span></span><br><span class="line">    <span class="comment">// newVal 是接收到监听</span></span><br><span class="line">    <span class="string">'firstname'</span>: <span class="function"><span class="keyword">function</span> (<span class="params">newVal, oldVal</span>) </span>&#123;</span><br><span class="line">        <span class="comment">// this.fullname = this.firstname+'-'+this.lastname</span></span><br><span class="line">        <span class="built_in">console</span>.log(newVal+<span class="string">'----'</span>+oldVal);</span><br><span class="line">        <span class="keyword">this</span>.fullname = newVal</span><br><span class="line">    &#125;,</span><br><span class="line">    <span class="string">'lastname'</span>: <span class="function"><span class="keyword">function</span> (<span class="params">newVal</span>) </span>&#123;</span><br><span class="line">        <span class="keyword">this</span>.fullname = <span class="keyword">this</span>.firstname + <span class="string">'-'</span> + newVal</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><ol start="2"><li>watch 监听路由地址的变化</li></ol><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br></pre></td><td class="code"><pre><span class="line">watch: &#123;</span><br><span class="line">    <span class="comment">// $route.path 监听路由路径</span></span><br><span class="line">    <span class="string">'$route.path'</span>: <span class="function"><span class="keyword">function</span> (<span class="params">newVal, oldVal</span>) </span>&#123;</span><br><span class="line">        <span class="comment">// console.log(newVal + '-' + oldVal);</span></span><br><span class="line">        <span class="keyword">if</span> (newVal === <span class="string">'/login'</span>) &#123;</span><br><span class="line">            <span class="built_in">console</span>.log(<span class="string">'登陆'</span>);</span><br><span class="line">        &#125; <span class="keyword">else</span> &#123;</span><br><span class="line">            <span class="built_in">console</span>.log(<span class="string">'注册'</span>);</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><ol start="3"><li>computed 可以定义一些 属性，这些属性，叫做 【计算属性】， 计算属性的，本质，就是 一个方法，只不过，我们在使用 这些计算属性的时候，是把 它们的 名称，直接当作 属性来使用的；并不会把计算属性，当作方法去调用；</li></ol><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br></pre></td><td class="code"><pre><span class="line">computed: &#123;</span><br><span class="line">    <span class="comment">// 注意1： 计算属性，在引用的时候，一定不要加 () 去调用，直接把它 当作 普通 属性去使用就好了；</span></span><br><span class="line">    <span class="comment">// 注意2： 只要 计算属性，这个 function 内部，所用到的 任何 data 中的数据发送了变化，就会 立即重新计算 这个 计算属性的值</span></span><br><span class="line">    <span class="comment">// 注意3： 计算属性的求值结果，会被缓存起来，方便下次直接使用； 如果 计算属性方法中，所以来的任何数据，都没有发生过变化，则，不会重新对 计算属性求值；</span></span><br><span class="line">    <span class="string">'fullname'</span>: <span class="function"><span class="keyword">function</span> (<span class="params"></span>) </span>&#123;</span><br><span class="line">        <span class="built_in">console</span>.log(<span class="string">'ok'</span>);</span><br><span class="line">        <span class="keyword">return</span> <span class="keyword">this</span>.firstname + <span class="string">'-'</span> + <span class="keyword">this</span>.middlename + <span class="string">'-'</span> + <span class="keyword">this</span>.lastname;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><ol start="4"><li>webpack 使用<br><a href="https://github.com/YHF7/Vue/tree/master/webpack-study" target="_blank" rel="noopener">项目地址</a><br><a href="https://yhf7.github.io/2018/10/16/Vue-day5/#more" target="_blank" rel="noopener">项目插件安装使用</a></li></ol>]]></content>
      
      
      <categories>
          
          <category> Vue </category>
          
      </categories>
      
      
        <tags>
            
            <tag> Vue笔记 </tag>
            
        </tags>
      
    </entry>
    
    <entry>
      <title>Vue day3</title>
      <link href="/2018/10/12/Vue-day3/"/>
      <url>/2018/10/12/Vue-day3/</url>
      
        <content type="html"><![CDATA[<link rel="stylesheet" class="aplayer-secondary-style-marker" href="/assets/css/APlayer.min.css"><script src="/assets/js/APlayer.min.js" class="aplayer-secondary-script-marker"></script><h1 id="Vue-中的动画"><a href="#Vue-中的动画" class="headerlink" title="Vue 中的动画"></a><a href="https://cn.vuejs.org/v2/guide/transitions.html" target="_blank" rel="noopener">Vue 中的动画</a></h1><p>为什么要有动画：动画能够提高用户的体验，帮助用户更好的理解页面中的功能；</p><h1 id="使用过渡类名"><a href="#使用过渡类名" class="headerlink" title="使用过渡类名"></a>使用过渡类名</h1><ol><li>HTML 结构：</li></ol><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><span class="line">&lt;div id=&quot;app&quot;&gt;</span><br><span class="line">    &lt;input type=&quot;button&quot; value=&quot;动起来&quot; @click=&quot;myAnimate&quot;&gt;</span><br><span class="line">    &lt;!-- 使用 transition 将需要过渡的元素包裹起来 --&gt;</span><br><span class="line">    &lt;transition name=&quot;fade&quot;&gt;</span><br><span class="line">      &lt;div v-show=&quot;isshow&quot;&gt;动画哦&lt;/div&gt;</span><br><span class="line">    &lt;/transition&gt;</span><br><span class="line">  &lt;/div&gt;</span><br></pre></td></tr></table></figure><ol start="2"><li>VM 实例：</li></ol><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br></pre></td><td class="code"><pre><span class="line">// 创建 Vue 实例，得到 ViewModel</span><br><span class="line">var vm = new Vue(&#123;</span><br><span class="line">  el: &apos;#app&apos;,</span><br><span class="line">  data: &#123;</span><br><span class="line">    isshow: false</span><br><span class="line">  &#125;,</span><br><span class="line">  methods: &#123;</span><br><span class="line">    myAnimate() &#123;</span><br><span class="line">      this.isshow = !this.isshow;</span><br><span class="line">    &#125;</span><br><span class="line">  &#125;</span><br><span class="line">&#125;);</span><br></pre></td></tr></table></figure><ol start="3"><li>定义两组类样式：</li></ol><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br></pre></td><td class="code"><pre><span class="line">/* 定义进入和离开时候的过渡状态 */</span><br><span class="line">    .fade-enter-active,</span><br><span class="line">    .fade-leave-active &#123;</span><br><span class="line">      transition: all 0.2s ease;</span><br><span class="line">      position: absolute;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    /* 定义进入过渡的开始状态 和 离开过渡的结束状态 */</span><br><span class="line">    .fade-enter,</span><br><span class="line">    .fade-leave-to &#123;</span><br><span class="line">      opacity: 0;</span><br><span class="line">      transform: translateX(100px);</span><br><span class="line">    &#125;</span><br></pre></td></tr></table></figure><h1 id="使用第三方-CSS-动画库"><a href="#使用第三方-CSS-动画库" class="headerlink" title="使用第三方 CSS 动画库"></a><a href="https://cn.vuejs.org/v2/guide/transitions.html#自定义过渡类名" target="_blank" rel="noopener">使用第三方 CSS 动画库</a></h1><ol><li>导入动画类库：</li></ol><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">&lt;link rel=&quot;stylesheet&quot; type=&quot;text/css&quot; href=&quot;./lib/animate.css&quot;&gt;</span><br></pre></td></tr></table></figure><ol start="2"><li>定义 transition 及属性：</li></ol><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line">&lt;transition</span><br><span class="line">trueenter-active-class=&quot;fadeInRight&quot;</span><br><span class="line">    leave-active-class=&quot;fadeOutRight&quot;</span><br><span class="line">    :duration=&quot;&#123; enter: 500, leave: 800 &#125;&quot;&gt;</span><br><span class="line">  &lt;div class=&quot;animated&quot; v-show=&quot;isshow&quot;&gt;动画哦&lt;/div&gt;</span><br><span class="line">&lt;/transition&gt;</span><br></pre></td></tr></table></figure><h1 id="使用动画钩子函数"><a href="#使用动画钩子函数" class="headerlink" title="使用动画钩子函数"></a>使用动画钩子函数</h1><ol><li>定义 transition 组件以及三个钩子函数：</li></ol><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br></pre></td><td class="code"><pre><span class="line">&lt;div id=&quot;app&quot;&gt;</span><br><span class="line">    &lt;input type=&quot;button&quot; value=&quot;切换动画&quot; @click=&quot;isshow = !isshow&quot;&gt;</span><br><span class="line">    &lt;transition</span><br><span class="line">    @before-enter=&quot;beforeEnter&quot;</span><br><span class="line">    @enter=&quot;enter&quot;</span><br><span class="line">    @after-enter=&quot;afterEnter&quot;&gt;</span><br><span class="line">      &lt;div v-if=&quot;isshow&quot; class=&quot;show&quot;&gt;OK&lt;/div&gt;</span><br><span class="line">    &lt;/transition&gt;</span><br><span class="line">  &lt;/div&gt;</span><br></pre></td></tr></table></figure><ol start="2"><li>定义三个 methods 钩子方法：</li></ol><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br></pre></td><td class="code"><pre><span class="line">methods: &#123;</span><br><span class="line">        beforeEnter(el) &#123; // 动画进入之前的回调</span><br><span class="line">          el.style.transform = &apos;translateX(500px)&apos;;</span><br><span class="line">        &#125;,</span><br><span class="line">        enter(el, done) &#123; // 动画进入完成时候的回调</span><br><span class="line">          el.offsetWidth;</span><br><span class="line">          el.style.transform = &apos;translateX(0px)&apos;;</span><br><span class="line">          done();</span><br><span class="line">        &#125;,</span><br><span class="line">        afterEnter(el) &#123; // 动画进入完成之后的回调</span><br><span class="line">          this.isshow = !this.isshow;</span><br><span class="line">        &#125;</span><br><span class="line">      &#125;</span><br></pre></td></tr></table></figure><ol start="3"><li>定义动画过渡时长和样式：</li></ol><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line">.show&#123;</span><br><span class="line">      transition: all 0.4s ease;</span><br><span class="line">    &#125;</span><br></pre></td></tr></table></figure><h1 id="v-for-的列表过渡"><a href="#v-for-的列表过渡" class="headerlink" title="v-for 的列表过渡"></a><a href="https://cn.vuejs.org/v2/guide/transitions.html#列表的进入和离开过渡" target="_blank" rel="noopener">v-for 的列表过渡</a></h1><ol><li>定义过渡样式：</li></ol><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br></pre></td><td class="code"><pre><span class="line">&lt;style&gt;</span><br><span class="line">    .list-enter,</span><br><span class="line">    .list-leave-to &#123;</span><br><span class="line">      opacity: 0;</span><br><span class="line">      transform: translateY(10px);</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    .list-enter-active,</span><br><span class="line">    .list-leave-active &#123;</span><br><span class="line">      transition: all 0.3s ease;</span><br><span class="line">    &#125;</span><br><span class="line">&lt;/style&gt;</span><br></pre></td></tr></table></figure><ol start="2"><li>定义 DOM 结构，其中，需要使用 transition-group 组件把 v-for 循环的列表包裹起来：</li></ol><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><span class="line">&lt;div id=&quot;app&quot;&gt;</span><br><span class="line">  &lt;input type=&quot;text&quot; v-model=&quot;txt&quot; @keyup.enter=&quot;add&quot;&gt;</span><br><span class="line"></span><br><span class="line">  &lt;transition-group tag=&quot;ul&quot; name=&quot;list&quot;&gt;</span><br><span class="line">    &lt;li v-for=&quot;(item, i) in list&quot; :key=&quot;i&quot;&gt;&#123;&#123;item&#125;&#125;&lt;/li&gt;</span><br><span class="line">  &lt;/transition-group&gt;</span><br><span class="line">&lt;/div&gt;</span><br></pre></td></tr></table></figure><ol start="3"><li>定义 VM 中的结构：</li></ol><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br></pre></td><td class="code"><pre><span class="line">// 创建 Vue 实例，得到 ViewModel</span><br><span class="line">var vm = new Vue(&#123;</span><br><span class="line">  el: &apos;#app&apos;,</span><br><span class="line">  data: &#123;</span><br><span class="line">    txt: &apos;&apos;,</span><br><span class="line">    list: [1, 2, 3, 4]</span><br><span class="line">  &#125;,</span><br><span class="line">  methods: &#123;</span><br><span class="line">    add() &#123;</span><br><span class="line">      this.list.push(this.txt);</span><br><span class="line">      this.txt = &apos;&apos;;</span><br><span class="line">    &#125;</span><br><span class="line">  &#125;</span><br><span class="line">&#125;);</span><br></pre></td></tr></table></figure><h1 id="列表的排序过渡"><a href="#列表的排序过渡" class="headerlink" title="列表的排序过渡"></a>列表的排序过渡</h1><p><code>&lt;transition-group&gt;</code> 组件还有一个特殊之处。不仅可以进入和离开动画，<strong>还可以改变定位</strong>。要使用这个新功能只需了解新增的 <code>v-move</code> 特性，<strong>它会在元素的改变定位的过程中应用</strong>。</p><ul><li><code>v-move</code> 和 <code>v-leave-active</code> 结合使用，能够让列表的过渡更加平缓柔和：</li></ul><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line">.v-move&#123;</span><br><span class="line">  transition: all 0.8s ease;</span><br><span class="line">&#125;</span><br><span class="line">.v-leave-active&#123;</span><br><span class="line">  position: absolute;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h1 id="定义Vue组件"><a href="#定义Vue组件" class="headerlink" title="定义Vue组件"></a>定义Vue组件</h1><p>什么是组件： 组件的出现，就是为了拆分Vue实例的代码量的，能够让我们以不同的组件，来划分不同的功能模块，将来我们需要什么样的功能，就可以去调用对应的组件即可；<br>组件化和模块化的不同：</p><ul><li>模块化： 是从代码逻辑的角度进行划分的；方便代码分层开发，保证每个功能模块的职能单一；</li><li>组件化： 是从UI界面的角度进行划分的；前端的组件化，方便UI组件的重用；<h2 id="全局组件定义的三种方式"><a href="#全局组件定义的三种方式" class="headerlink" title="全局组件定义的三种方式"></a>全局组件定义的三种方式</h2><ol><li>使用 Vue.extend 配合 Vue.component 方法：<figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line">var login = Vue.extend(&#123;</span><br><span class="line">      template: &apos;&lt;h1&gt;登录&lt;/h1&gt;&apos;</span><br><span class="line">    &#125;);</span><br><span class="line">    Vue.component(&apos;login&apos;, login);</span><br></pre></td></tr></table></figure></li></ol></li></ul><ol start="2"><li><p>直接使用 Vue.component 方法：</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line">Vue.component(&apos;register&apos;, &#123;</span><br><span class="line">      template: &apos;&lt;h1&gt;注册&lt;/h1&gt;&apos;</span><br><span class="line">    &#125;);</span><br></pre></td></tr></table></figure></li><li><p>将模板字符串，定义到script标签种：</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line">&lt;script id=&quot;tmpl&quot; type=&quot;x-template&quot;&gt;</span><br><span class="line">      &lt;div&gt;&lt;a href=&quot;#&quot;&gt;登录&lt;/a&gt; | &lt;a href=&quot;#&quot;&gt;注册&lt;/a&gt;&lt;/div&gt;</span><br><span class="line">    &lt;/script&gt;</span><br></pre></td></tr></table></figure></li></ol><p>同时，需要使用 Vue.component 来定义组件：<br><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line">Vue.component(&apos;account&apos;, &#123;</span><br><span class="line">      template: &apos;#tmpl&apos;</span><br><span class="line">    &#125;);</span><br></pre></td></tr></table></figure></p><blockquote><p>注意： 组件中的DOM结构，有且只能有唯一的根元素（Root Element）来进行包裹！</p></blockquote><h2 id="组件中展示数据和响应事件"><a href="#组件中展示数据和响应事件" class="headerlink" title="组件中展示数据和响应事件"></a>组件中展示数据和响应事件</h2><ol><li><p>在组件中，<code>data</code>需要被定义为一个方法，例如：</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br></pre></td><td class="code"><pre><span class="line">Vue.component(&apos;account&apos;, &#123;</span><br><span class="line">      template: &apos;#tmpl&apos;,</span><br><span class="line">      data() &#123;</span><br><span class="line">        return &#123;</span><br><span class="line">          msg: &apos;大家好！&apos;</span><br><span class="line">        &#125;</span><br><span class="line">      &#125;,</span><br><span class="line">      methods:&#123;</span><br><span class="line">        login()&#123;</span><br><span class="line">          alert(&apos;点击了登录按钮&apos;);</span><br><span class="line">        &#125;</span><br><span class="line">      &#125;</span><br><span class="line">    &#125;);</span><br></pre></td></tr></table></figure></li><li><p>在子组件中，如果将模板字符串，定义到了script标签中，那么，要访问子组件身上的<code>data</code>属性中的值，需要使用<code>this</code>来访问；</p></li></ol><h2 id="【重点】为什么组件中的data属性必须定义为一个方法并返回一个对象"><a href="#【重点】为什么组件中的data属性必须定义为一个方法并返回一个对象" class="headerlink" title="【重点】为什么组件中的data属性必须定义为一个方法并返回一个对象"></a>【重点】为什么组件中的data属性必须定义为一个方法并返回一个对象</h2><ol><li>通过计数器案例演示</li></ol><h2 id="使用components属性定义局部子组件"><a href="#使用components属性定义局部子组件" class="headerlink" title="使用components属性定义局部子组件"></a>使用<code>components</code>属性定义局部子组件</h2><ol><li><p>组件实例定义方式：</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br></pre></td><td class="code"><pre><span class="line">&lt;script&gt;</span><br><span class="line">    // 创建 Vue 实例，得到 ViewModel</span><br><span class="line">    var vm = new Vue(&#123;</span><br><span class="line">      el: &apos;#app&apos;,</span><br><span class="line">      data: &#123;&#125;,</span><br><span class="line">      methods: &#123;&#125;,</span><br><span class="line">      components: &#123; // 定义子组件</span><br><span class="line">        account: &#123; // account 组件</span><br><span class="line">          template: &apos;&lt;div&gt;&lt;h1&gt;这是Account组件&#123;&#123;name&#125;&#125;&lt;/h1&gt;&lt;login&gt;&lt;/login&gt;&lt;/div&gt;&apos;, // 在这里使用定义的子组件</span><br><span class="line">          components: &#123; // 定义子组件的子组件</span><br><span class="line">            login: &#123; // login 组件</span><br><span class="line">              template: &quot;&lt;h3&gt;这是登录组件&lt;/h3&gt;&quot;</span><br><span class="line">            &#125;</span><br><span class="line">          &#125;</span><br><span class="line">        &#125;</span><br><span class="line">      &#125;</span><br><span class="line">    &#125;);</span><br><span class="line">  &lt;/script&gt;</span><br></pre></td></tr></table></figure></li><li><p>引用组件：</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line">&lt;div id=&quot;app&quot;&gt;</span><br><span class="line">    &lt;account&gt;&lt;/account&gt;</span><br><span class="line">  &lt;/div&gt;</span><br></pre></td></tr></table></figure></li></ol><h1 id="使用flag标识符结合v-if和v-else切换组件"><a href="#使用flag标识符结合v-if和v-else切换组件" class="headerlink" title="使用flag标识符结合v-if和v-else切换组件"></a>使用<code>flag</code>标识符结合<code>v-if</code>和<code>v-else</code>切换组件</h1><ol><li><p>页面结构：</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line">&lt;div id=&quot;app&quot;&gt;</span><br><span class="line">    &lt;input type=&quot;button&quot; value=&quot;toggle&quot; @click=&quot;flag=!flag&quot;&gt;</span><br><span class="line">    &lt;my-com1 v-if=&quot;flag&quot;&gt;&lt;/my-com1&gt;</span><br><span class="line">    &lt;my-com2 v-else=&quot;flag&quot;&gt;&lt;/my-com2&gt;</span><br><span class="line">  &lt;/div&gt;</span><br></pre></td></tr></table></figure></li><li><p>Vue实例定义：</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br></pre></td><td class="code"><pre><span class="line">&lt;script&gt;</span><br><span class="line">    Vue.component(&apos;myCom1&apos;, &#123;</span><br><span class="line">      template: &apos;&lt;h3&gt;奔波霸&lt;/h3&gt;&apos;</span><br><span class="line">    &#125;)</span><br><span class="line"></span><br><span class="line">    Vue.component(&apos;myCom2&apos;, &#123;</span><br><span class="line">      template: &apos;&lt;h3&gt;霸波奔&lt;/h3&gt;&apos;</span><br><span class="line">    &#125;)</span><br><span class="line"></span><br><span class="line">    // 创建 Vue 实例，得到 ViewModel</span><br><span class="line">    var vm = new Vue(&#123;</span><br><span class="line">      el: &apos;#app&apos;,</span><br><span class="line">      data: &#123;</span><br><span class="line">        flag: true</span><br><span class="line">      &#125;,</span><br><span class="line">      methods: &#123;&#125;</span><br><span class="line">    &#125;);</span><br><span class="line">  &lt;/script&gt;</span><br></pre></td></tr></table></figure></li></ol><h1 id="使用-is属性来切换不同的子组件-并添加切换动画"><a href="#使用-is属性来切换不同的子组件-并添加切换动画" class="headerlink" title="使用:is属性来切换不同的子组件,并添加切换动画"></a>使用<code>:is</code>属性来切换不同的子组件,并添加切换动画</h1><ol><li><p>组件实例定义方式：</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br></pre></td><td class="code"><pre><span class="line">// 登录组件</span><br><span class="line">  const login = Vue.extend(&#123;</span><br><span class="line">    template: `&lt;div&gt;</span><br><span class="line">      &lt;h3&gt;登录组件&lt;/h3&gt;</span><br><span class="line">    &lt;/div&gt;`</span><br><span class="line">  &#125;);</span><br><span class="line">  Vue.component(&apos;login&apos;, login);</span><br><span class="line"></span><br><span class="line">  // 注册组件</span><br><span class="line">  const register = Vue.extend(&#123;</span><br><span class="line">    template: `&lt;div&gt;</span><br><span class="line">      &lt;h3&gt;注册组件&lt;/h3&gt;</span><br><span class="line">    &lt;/div&gt;`</span><br><span class="line">  &#125;);</span><br><span class="line">  Vue.component(&apos;register&apos;, register);</span><br><span class="line"></span><br><span class="line">  // 创建 Vue 实例，得到 ViewModel</span><br><span class="line">  var vm = new Vue(&#123;</span><br><span class="line">    el: &apos;#app&apos;,</span><br><span class="line">    data: &#123; comName: &apos;login&apos; &#125;,</span><br><span class="line">    methods: &#123;&#125;</span><br><span class="line">  &#125;);</span><br></pre></td></tr></table></figure></li><li><p>使用<code>component</code>标签，来引用组件，并通过<code>:is</code>属性来指定要加载的组件：</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><span class="line">&lt;div id=&quot;app&quot;&gt;</span><br><span class="line">  &lt;a href=&quot;#&quot; @click.prevent=&quot;comName=&apos;login&apos;&quot;&gt;登录&lt;/a&gt;</span><br><span class="line">  &lt;a href=&quot;#&quot; @click.prevent=&quot;comName=&apos;register&apos;&quot;&gt;注册&lt;/a&gt;</span><br><span class="line">  &lt;hr&gt;</span><br><span class="line">  &lt;transition mode=&quot;out-in&quot;&gt;</span><br><span class="line">    &lt;component :is=&quot;comName&quot;&gt;&lt;/component&gt;</span><br><span class="line">  &lt;/transition&gt;</span><br><span class="line">&lt;/div&gt;</span><br></pre></td></tr></table></figure></li><li><p>添加切换样式：</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br></pre></td><td class="code"><pre><span class="line">&lt;style&gt;</span><br><span class="line">  .v-enter,</span><br><span class="line">  .v-leave-to &#123;</span><br><span class="line">    opacity: 0;</span><br><span class="line">    transform: translateX(30px);</span><br><span class="line">  &#125;</span><br><span class="line"></span><br><span class="line">  .v-enter-active,</span><br><span class="line">  .v-leave-active &#123;</span><br><span class="line">    position: absolute;</span><br><span class="line">    transition: all 0.3s ease;</span><br><span class="line">  &#125;</span><br><span class="line"></span><br><span class="line">  h3&#123;</span><br><span class="line">    margin: 0;</span><br><span class="line">  &#125;</span><br><span class="line">&lt;/style&gt;</span><br></pre></td></tr></table></figure></li></ol>]]></content>
      
      
      <categories>
          
          <category> Vue </category>
          
      </categories>
      
      
        <tags>
            
            <tag> Vue笔记 </tag>
            
        </tags>
      
    </entry>
    
    <entry>
      <title>Vue day1 案例</title>
      <link href="/2018/10/08/2018-10-08(1)/"/>
      <url>/2018/10/08/2018-10-08(1)/</url>
      
        <content type="html"><![CDATA[<link rel="stylesheet" class="aplayer-secondary-style-marker" href="/assets/css/APlayer.min.css"><script src="/assets/js/APlayer.min.js" class="aplayer-secondary-script-marker"></script><h1 id="案例分布"><a href="#案例分布" class="headerlink" title="案例分布"></a>案例分布</h1><ol><li>跑马灯效果</li><li>简易计算器</li></ol><h1 id="一、跑马灯效果"><a href="#一、跑马灯效果" class="headerlink" title="一、跑马灯效果"></a>一、跑马灯效果</h1><h2 id="重点"><a href="#重点" class="headerlink" title="重点"></a>重点</h2><ul><li>@click(v-on:click)点击事件</li><li>字符串的截取和赋值</li><li>定时器的控制</li></ul><h2 id="效果图"><a href="#效果图" class="headerlink" title="效果图"></a>效果图</h2><p><img src="/Vue/Vue-day1-1-1.png" alt="跑马灯效果"><br><img src="/Vue/Vue-day1-1-2.png" alt="跑马灯效果"></p><h2 id="案例代码"><a href="#案例代码" class="headerlink" title="案例代码"></a>案例代码</h2><figure class="highlight html"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">&lt;!DOCTYPE html&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">html</span> <span class="attr">lang</span>=<span class="string">"en"</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">head</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">meta</span> <span class="attr">charset</span>=<span class="string">"UTF-8"</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">meta</span> <span class="attr">name</span>=<span class="string">"viewport"</span> <span class="attr">content</span>=<span class="string">"width=device-width, initial-scale=1.0"</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">meta</span> <span class="attr">http-equiv</span>=<span class="string">"X-UA-Compatible"</span> <span class="attr">content</span>=<span class="string">"ie=edge"</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">title</span>&gt;</span>Document<span class="tag">&lt;/<span class="name">title</span>&gt;</span></span><br><span class="line">    <span class="comment">&lt;!-- 1.倒入vue包 --&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">script</span> <span class="attr">src</span>=<span class="string">"./lib/vue-2.4.0.js"</span>&gt;</span><span class="undefined"></span><span class="tag">&lt;/<span class="name">script</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">head</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">body</span>&gt;</span></span><br><span class="line">    <span class="comment">&lt;!-- 2.创建一个要控制的区域 --&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">div</span> <span class="attr">id</span>=<span class="string">"app"</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">input</span> <span class="attr">type</span>=<span class="string">"button"</span> <span class="attr">value</span>=<span class="string">"浪起来"</span> @<span class="attr">click</span>=<span class="string">"lang"</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">input</span> <span class="attr">type</span>=<span class="string">"button"</span> <span class="attr">value</span>=<span class="string">"低调"</span> @<span class="attr">click</span>=<span class="string">"stop"</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">h4</span>&gt;</span>&#123;&#123;msg&#125;&#125;<span class="tag">&lt;/<span class="name">h4</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;/<span class="name">div</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">body</span>&gt;</span></span><br><span class="line"></span><br><span class="line">    <span class="tag">&lt;<span class="name">script</span>&gt;</span><span class="undefined"></span></span><br><span class="line"><span class="javascript">        <span class="comment">//注意；在vm实例中，如果想要获取data上的数据，或者想要调用methos中的方法，必须通过this.数据名 或 this.方法名来进行访问，这里的this 就等于我们new出来的vm 实例对象</span></span></span><br><span class="line"><span class="javascript">        <span class="keyword">var</span> vm = <span class="keyword">new</span> Vue(&#123;</span></span><br><span class="line"><span class="javascript">            el: <span class="string">'#app'</span>,</span></span><br><span class="line"><span class="undefined">            data:&#123;</span></span><br><span class="line"><span class="javascript">                msg: <span class="string">'猥琐发育，别浪～～！'</span>,</span></span><br><span class="line"><span class="javascript">                intervalId:<span class="literal">null</span> <span class="comment">//在data上定义 定时器Id</span></span></span><br><span class="line"><span class="undefined">            &#125;,</span></span><br><span class="line"><span class="undefined">            methods:&#123;</span></span><br><span class="line"><span class="undefined">                lang() &#123;</span></span><br><span class="line"><span class="javascript">                    <span class="built_in">console</span>.log(<span class="keyword">this</span>.msg)</span></span><br><span class="line"><span class="undefined">                    </span></span><br><span class="line"><span class="javascript">                    <span class="keyword">if</span>(<span class="keyword">this</span>.intervalId != <span class="literal">null</span>) <span class="keyword">return</span>;</span></span><br><span class="line"><span class="javascript">                    <span class="keyword">this</span>.intervalId = setInterval(<span class="function"><span class="params">()</span> =&gt;</span> &#123;</span></span><br><span class="line"><span class="javascript">                        <span class="comment">//获取到头的第一个字符</span></span></span><br><span class="line"><span class="javascript">                        <span class="keyword">var</span> start = <span class="keyword">this</span>.msg.substring(<span class="number">0</span>,<span class="number">1</span>)</span></span><br><span class="line"><span class="javascript">                        <span class="comment">// 获取到后面的所有字符</span></span></span><br><span class="line"><span class="javascript">                        <span class="keyword">var</span> end = <span class="keyword">this</span>.msg.substring(<span class="number">1</span>)</span></span><br><span class="line"><span class="javascript">                        <span class="comment">// 重新拼接到新的字符串，并附值到 this.msg</span></span></span><br><span class="line"><span class="undefined"></span></span><br><span class="line"><span class="javascript">                        <span class="keyword">this</span>.msg = end + start</span></span><br><span class="line"><span class="undefined">                    &#125;,400)</span></span><br><span class="line"><span class="undefined"></span></span><br><span class="line"><span class="javascript">                    <span class="comment">//注意：vm实例，会监听自己身上的data 中所有数据的变化 ，只要数据一发生变化，就会自动把 最新的数据，从data上同步到页面中去；【好处：程序员只需要关系数据,不需要考虑重新渲染dom页面】</span></span></span><br><span class="line"><span class="undefined">                &#125;,</span></span><br><span class="line"><span class="javascript">                stop() &#123;<span class="comment">//停止定时器</span></span></span><br><span class="line"><span class="javascript">                    clearInterval(<span class="keyword">this</span>.intervalId)</span></span><br><span class="line"><span class="javascript">                    <span class="comment">// 每当清楚了定时器之后，需要重新把定时器重制为null</span></span></span><br><span class="line"><span class="javascript">                    <span class="keyword">this</span>.intervalId = <span class="literal">null</span>;</span></span><br><span class="line"><span class="undefined">                &#125;</span></span><br><span class="line"><span class="undefined">            &#125;</span></span><br><span class="line"><span class="undefined">        &#125;)</span></span><br><span class="line"><span class="undefined"></span></span><br><span class="line"><span class="javascript">        <span class="comment">// 分析：</span></span></span><br><span class="line"><span class="javascript">        <span class="comment">// 1.给 【浪起来】 按钮，绑定一个点击事件 v-on @</span></span></span><br><span class="line"><span class="javascript">        <span class="comment">// 2.在按钮灯事件处理函数中，雌鹅相关灯业务逻辑代码：拿到msg字符串，然后调用字符串灯 substring 来进行字符串灯截取操作，吧 第一个截取出来放到最后面</span></span></span><br><span class="line"><span class="javascript">        <span class="comment">// 3.为了实习点击按钮，自动截取的功能，需要把2步骤放到定时器里面</span></span></span><br><span class="line"><span class="undefined">    </span><span class="tag">&lt;/<span class="name">script</span>&gt;</span></span><br><span class="line"></span><br><span class="line"><span class="tag">&lt;/<span class="name">html</span>&gt;</span></span><br></pre></td></tr></table></figure><h1 id="二、简易计算器"><a href="#二、简易计算器" class="headerlink" title="二、简易计算器"></a>二、简易计算器</h1><h2 id="重点-1"><a href="#重点-1" class="headerlink" title="重点"></a>重点</h2><ul><li>v-model(数据双向绑定)</li><li>v-click(点击事件)</li><li>数据的判断</li></ul><h2 id="效果图-1"><a href="#效果图-1" class="headerlink" title="效果图"></a>效果图</h2><p><img src="/Vue/Vue-day1-2-1.png" alt="简易计算器"><br><img src="/Vue/Vue-day1-2-2.png" alt="简易计算器"></p><h2 id="案例代码-1"><a href="#案例代码-1" class="headerlink" title="案例代码"></a>案例代码</h2><figure class="highlight html"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">&lt;!DOCTYPE html&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">html</span> <span class="attr">lang</span>=<span class="string">"en"</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">head</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">meta</span> <span class="attr">charset</span>=<span class="string">"UTF-8"</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">meta</span> <span class="attr">name</span>=<span class="string">"viewport"</span> <span class="attr">content</span>=<span class="string">"width=device-width, initial-scale=1.0"</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">meta</span> <span class="attr">http-equiv</span>=<span class="string">"X-UA-Compatible"</span> <span class="attr">content</span>=<span class="string">"ie=edge"</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">title</span>&gt;</span>Document<span class="tag">&lt;/<span class="name">title</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">script</span> <span class="attr">src</span>=<span class="string">"./lib/vue-2.4.0.js"</span>&gt;</span><span class="undefined"></span><span class="tag">&lt;/<span class="name">script</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">head</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">body</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">div</span> <span class="attr">id</span>=<span class="string">"app"</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">input</span> <span class="attr">type</span>=<span class="string">"text"</span> <span class="attr">v-model</span>=<span class="string">"n1"</span>&gt;</span></span><br><span class="line"></span><br><span class="line">        <span class="tag">&lt;<span class="name">select</span> <span class="attr">v-model</span>=<span class="string">"opt"</span>&gt;</span></span><br><span class="line">            <span class="tag">&lt;<span class="name">option</span> <span class="attr">value</span>=<span class="string">"+"</span>&gt;</span>+<span class="tag">&lt;/<span class="name">option</span>&gt;</span></span><br><span class="line">            <span class="tag">&lt;<span class="name">option</span> <span class="attr">value</span>=<span class="string">"-"</span>&gt;</span>-<span class="tag">&lt;/<span class="name">option</span>&gt;</span></span><br><span class="line">            <span class="tag">&lt;<span class="name">option</span> <span class="attr">value</span>=<span class="string">"*"</span>&gt;</span>*<span class="tag">&lt;/<span class="name">option</span>&gt;</span></span><br><span class="line">            <span class="tag">&lt;<span class="name">option</span> <span class="attr">value</span>=<span class="string">"/"</span>&gt;</span>/<span class="tag">&lt;/<span class="name">option</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;/<span class="name">select</span>&gt;</span></span><br><span class="line"></span><br><span class="line">        <span class="tag">&lt;<span class="name">input</span> <span class="attr">type</span>=<span class="string">"text"</span> <span class="attr">v-model</span>=<span class="string">"n2"</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">input</span> <span class="attr">type</span>=<span class="string">"button"</span> <span class="attr">value</span>=<span class="string">"="</span> @<span class="attr">click</span>=<span class="string">"calc"</span>&gt;</span></span><br><span class="line"></span><br><span class="line">        <span class="tag">&lt;<span class="name">input</span> <span class="attr">type</span>=<span class="string">"text"</span> <span class="attr">v-model</span>=<span class="string">"result"</span>&gt;</span></span><br><span class="line"></span><br><span class="line">    <span class="tag">&lt;/<span class="name">div</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">body</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">script</span>&gt;</span><span class="undefined"></span></span><br><span class="line"><span class="javascript">    <span class="keyword">var</span> vm = <span class="keyword">new</span> Vue(&#123;</span></span><br><span class="line"><span class="javascript">        el:<span class="string">'#app'</span>,</span></span><br><span class="line"><span class="undefined">        data: &#123;</span></span><br><span class="line"><span class="undefined">            n1: 0,</span></span><br><span class="line"><span class="undefined">            n2: 0,</span></span><br><span class="line"><span class="undefined">            result: 0,</span></span><br><span class="line"><span class="javascript">            opt: <span class="string">'+'</span></span></span><br><span class="line"><span class="undefined">        &#125;,</span></span><br><span class="line"><span class="undefined">        methods:&#123;</span></span><br><span class="line"><span class="javascript">            calc()&#123;<span class="comment">//计算器算数的方法</span></span></span><br><span class="line"><span class="javascript">                <span class="comment">//逻辑:</span></span></span><br><span class="line"><span class="javascript">                <span class="comment">// switch(this.opt)&#123;</span></span></span><br><span class="line"><span class="javascript">                <span class="comment">//     case '+':</span></span></span><br><span class="line"><span class="javascript">                <span class="comment">//     this.result = parseInt(this.n1)+parseInt(this.n2)</span></span></span><br><span class="line"><span class="javascript">                <span class="comment">//         break;</span></span></span><br><span class="line"><span class="javascript">                <span class="comment">//     case '-':</span></span></span><br><span class="line"><span class="javascript">                <span class="comment">//     this.result = parseInt(this.n1)-parseInt(this.n2)</span></span></span><br><span class="line"><span class="javascript">                <span class="comment">//         break;</span></span></span><br><span class="line"><span class="javascript">                <span class="comment">//     case '*':</span></span></span><br><span class="line"><span class="javascript">                <span class="comment">//     this.result = parseInt(this.n1)*parseInt(this.n2)</span></span></span><br><span class="line"><span class="javascript">                <span class="comment">//         break;</span></span></span><br><span class="line"><span class="javascript">                <span class="comment">//     case '/':</span></span></span><br><span class="line"><span class="javascript">                <span class="comment">//     this.result = parseInt(this.n1)/parseInt(this.n2)</span></span></span><br><span class="line"><span class="javascript">                <span class="comment">//         break;</span></span></span><br><span class="line"><span class="javascript">                <span class="comment">// &#125;</span></span></span><br><span class="line"><span class="undefined"></span></span><br><span class="line"><span class="javascript">                <span class="comment">//注意:这是投机取巧的方式，正式开发中尽量少用</span></span></span><br><span class="line"><span class="javascript">                <span class="keyword">var</span> cideStr = <span class="string">'parseInt(this.n1)'</span>+<span class="keyword">this</span>.opt+<span class="string">'parseInt(this.n2)'</span></span></span><br><span class="line"><span class="javascript">                <span class="keyword">this</span>.result = <span class="built_in">eval</span>(cideStr)</span></span><br><span class="line"><span class="undefined">            &#125;</span></span><br><span class="line"><span class="undefined">        &#125;</span></span><br><span class="line"><span class="undefined">    &#125;)</span></span><br><span class="line"><span class="undefined"></span><span class="tag">&lt;/<span class="name">script</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">html</span>&gt;</span></span><br></pre></td></tr></table></figure>]]></content>
      
      
      <categories>
          
          <category> Vue </category>
          
      </categories>
      
      
        <tags>
            
            <tag> Vue 案例 </tag>
            
        </tags>
      
    </entry>
    
    <entry>
      <title>Vue day2 案例</title>
      <link href="/2018/10/08/2018-10-08(2)/"/>
      <url>/2018/10/08/2018-10-08(2)/</url>
      
        <content type="html"><![CDATA[<link rel="stylesheet" class="aplayer-secondary-style-marker" href="/assets/css/APlayer.min.css"><script src="/assets/js/APlayer.min.js" class="aplayer-secondary-script-marker"></script><h1 id="案例分布"><a href="#案例分布" class="headerlink" title="案例分布"></a>案例分布</h1><ol><li>品牌列表案例</li></ol><h1 id="一、品牌列表案例"><a href="#一、品牌列表案例" class="headerlink" title="一、品牌列表案例"></a>一、品牌列表案例</h1><h2 id="重点"><a href="#重点" class="headerlink" title="重点"></a>重点</h2><ul><li>vue 指令<ul><li>v-model(数据双向绑定)</li><li>v-on(点击事件)</li><li>v-focus(光标定位) 自定义</li><li>v-color(颜色改变) 自定义</li><li>@keyup(键盘抬起)</li></ul></li><li>vue 添加方法<ul><li>new Vue({})</li><li>add()添加方法</li><li>del(id)删除方法</li><li>search 检索 关键字</li><li>Vue.filter 全局过滤器(过滤时间)</li><li>filters 私有化过滤器(局部)</li><li>padStart(填充完毕后的总数, 在前面填充的元素) 字符串新特性</li><li>Vue.directive 全局自定义方法 自定义获取焦点</li><li>directives 私有化自定义方法 </li><li>Vue.config.keyCodes.f2 = 113 自定义全局按键修饰符 （Vue.config 配置）</li></ul></li></ul><h2 id="效果图"><a href="#效果图" class="headerlink" title="效果图"></a>效果图</h2><p><img src="/Vue/Vue-day2-1-1.png" alt="品牌列表案例"><br><img src="/Vue/Vue-day2-1-2.png" alt="品牌列表案例"><br><img src="/Vue/Vue-day2-1-3.png" alt="品牌列表案例"><br><img src="/Vue/Vue-day2-1-4.png" alt="品牌列表案例"></p><h2 id="案例代码"><a href="#案例代码" class="headerlink" title="案例代码"></a>案例代码</h2><figure class="highlight html"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br><span class="line">64</span><br><span class="line">65</span><br><span class="line">66</span><br><span class="line">67</span><br><span class="line">68</span><br><span class="line">69</span><br><span class="line">70</span><br><span class="line">71</span><br><span class="line">72</span><br><span class="line">73</span><br><span class="line">74</span><br><span class="line">75</span><br><span class="line">76</span><br><span class="line">77</span><br><span class="line">78</span><br><span class="line">79</span><br><span class="line">80</span><br><span class="line">81</span><br><span class="line">82</span><br><span class="line">83</span><br><span class="line">84</span><br><span class="line">85</span><br><span class="line">86</span><br><span class="line">87</span><br><span class="line">88</span><br><span class="line">89</span><br><span class="line">90</span><br><span class="line">91</span><br><span class="line">92</span><br><span class="line">93</span><br><span class="line">94</span><br><span class="line">95</span><br><span class="line">96</span><br><span class="line">97</span><br><span class="line">98</span><br><span class="line">99</span><br><span class="line">100</span><br><span class="line">101</span><br><span class="line">102</span><br><span class="line">103</span><br><span class="line">104</span><br><span class="line">105</span><br><span class="line">106</span><br><span class="line">107</span><br><span class="line">108</span><br><span class="line">109</span><br><span class="line">110</span><br><span class="line">111</span><br><span class="line">112</span><br><span class="line">113</span><br><span class="line">114</span><br><span class="line">115</span><br><span class="line">116</span><br><span class="line">117</span><br><span class="line">118</span><br><span class="line">119</span><br><span class="line">120</span><br><span class="line">121</span><br><span class="line">122</span><br><span class="line">123</span><br><span class="line">124</span><br><span class="line">125</span><br><span class="line">126</span><br><span class="line">127</span><br><span class="line">128</span><br><span class="line">129</span><br><span class="line">130</span><br><span class="line">131</span><br><span class="line">132</span><br><span class="line">133</span><br><span class="line">134</span><br><span class="line">135</span><br><span class="line">136</span><br><span class="line">137</span><br><span class="line">138</span><br><span class="line">139</span><br><span class="line">140</span><br><span class="line">141</span><br><span class="line">142</span><br><span class="line">143</span><br><span class="line">144</span><br><span class="line">145</span><br><span class="line">146</span><br><span class="line">147</span><br><span class="line">148</span><br><span class="line">149</span><br><span class="line">150</span><br><span class="line">151</span><br><span class="line">152</span><br><span class="line">153</span><br><span class="line">154</span><br><span class="line">155</span><br><span class="line">156</span><br><span class="line">157</span><br><span class="line">158</span><br><span class="line">159</span><br><span class="line">160</span><br><span class="line">161</span><br><span class="line">162</span><br><span class="line">163</span><br><span class="line">164</span><br><span class="line">165</span><br><span class="line">166</span><br><span class="line">167</span><br><span class="line">168</span><br><span class="line">169</span><br><span class="line">170</span><br><span class="line">171</span><br><span class="line">172</span><br><span class="line">173</span><br><span class="line">174</span><br><span class="line">175</span><br><span class="line">176</span><br><span class="line">177</span><br><span class="line">178</span><br><span class="line">179</span><br><span class="line">180</span><br><span class="line">181</span><br><span class="line">182</span><br><span class="line">183</span><br><span class="line">184</span><br><span class="line">185</span><br><span class="line">186</span><br><span class="line">187</span><br><span class="line">188</span><br><span class="line">189</span><br><span class="line">190</span><br><span class="line">191</span><br><span class="line">192</span><br><span class="line">193</span><br><span class="line">194</span><br><span class="line">195</span><br><span class="line">196</span><br><span class="line">197</span><br><span class="line">198</span><br><span class="line">199</span><br><span class="line">200</span><br><span class="line">201</span><br><span class="line">202</span><br><span class="line">203</span><br><span class="line">204</span><br><span class="line">205</span><br><span class="line">206</span><br><span class="line">207</span><br><span class="line">208</span><br><span class="line">209</span><br><span class="line">210</span><br><span class="line">211</span><br><span class="line">212</span><br><span class="line">213</span><br><span class="line">214</span><br><span class="line">215</span><br><span class="line">216</span><br><span class="line">217</span><br><span class="line">218</span><br><span class="line">219</span><br><span class="line">220</span><br><span class="line">221</span><br><span class="line">222</span><br><span class="line">223</span><br><span class="line">224</span><br><span class="line">225</span><br><span class="line">226</span><br><span class="line">227</span><br><span class="line">228</span><br><span class="line">229</span><br><span class="line">230</span><br><span class="line">231</span><br><span class="line">232</span><br><span class="line">233</span><br><span class="line">234</span><br><span class="line">235</span><br><span class="line">236</span><br><span class="line">237</span><br><span class="line">238</span><br><span class="line">239</span><br><span class="line">240</span><br><span class="line">241</span><br><span class="line">242</span><br><span class="line">243</span><br><span class="line">244</span><br><span class="line">245</span><br><span class="line">246</span><br><span class="line">247</span><br><span class="line">248</span><br><span class="line">249</span><br><span class="line">250</span><br><span class="line">251</span><br><span class="line">252</span><br><span class="line">253</span><br><span class="line">254</span><br><span class="line">255</span><br><span class="line">256</span><br><span class="line">257</span><br><span class="line">258</span><br><span class="line">259</span><br><span class="line">260</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">&lt;!DOCTYPE html&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">html</span> <span class="attr">lang</span>=<span class="string">"en"</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">head</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">meta</span> <span class="attr">charset</span>=<span class="string">"UTF-8"</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">meta</span> <span class="attr">name</span>=<span class="string">"viewport"</span> <span class="attr">content</span>=<span class="string">"width=device-width, initial-scale=1.0"</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">meta</span> <span class="attr">http-equiv</span>=<span class="string">"X-UA-Compatible"</span> <span class="attr">content</span>=<span class="string">"ie=edge"</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">title</span>&gt;</span>Document<span class="tag">&lt;/<span class="name">title</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">script</span> <span class="attr">src</span>=<span class="string">"./lib/vue-2.4.0.js"</span>&gt;</span><span class="undefined"></span><span class="tag">&lt;/<span class="name">script</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">link</span> <span class="attr">rel</span>=<span class="string">"stylesheet"</span> <span class="attr">href</span>=<span class="string">"./lib/bootstrap-3.3.7.css"</span>&gt;</span></span><br><span class="line">    <span class="comment">&lt;!-- 需要用到jquery吗？ --&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">head</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">body</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">div</span> <span class="attr">id</span>=<span class="string">"app"</span>&gt;</span></span><br><span class="line"></span><br><span class="line">        <span class="tag">&lt;<span class="name">div</span> <span class="attr">class</span>=<span class="string">"panel panel-primary"</span>&gt;</span></span><br><span class="line">            <span class="tag">&lt;<span class="name">div</span> <span class="attr">class</span>=<span class="string">"panel-heading"</span>&gt;</span></span><br><span class="line">                <span class="tag">&lt;<span class="name">h3</span> <span class="attr">class</span>=<span class="string">"panel-title"</span>&gt;</span></span><br><span class="line">                    添加品牌</span><br><span class="line">                <span class="tag">&lt;/<span class="name">h3</span>&gt;</span></span><br><span class="line">            <span class="tag">&lt;/<span class="name">div</span>&gt;</span></span><br><span class="line">            <span class="tag">&lt;<span class="name">div</span> <span class="attr">class</span>=<span class="string">"panel-body form-inline"</span>&gt;</span></span><br><span class="line">                <span class="tag">&lt;<span class="name">label</span>&gt;</span></span><br><span class="line">                    Id:</span><br><span class="line">                    <span class="tag">&lt;<span class="name">input</span> <span class="attr">type</span>=<span class="string">"text"</span> <span class="attr">class</span>=<span class="string">"form-control"</span> <span class="attr">v-model</span>=<span class="string">"id"</span>&gt;</span></span><br><span class="line">                <span class="tag">&lt;/<span class="name">label</span>&gt;</span></span><br><span class="line">                <span class="tag">&lt;<span class="name">label</span>&gt;</span></span><br><span class="line">                    Name:</span><br><span class="line">                    <span class="tag">&lt;<span class="name">input</span> <span class="attr">type</span>=<span class="string">"text"</span> <span class="attr">class</span>=<span class="string">"form-control"</span> <span class="attr">v-model</span>=<span class="string">"name"</span> @<span class="attr">keyup.f2</span>=<span class="string">"add"</span>&gt;</span></span><br><span class="line">                <span class="tag">&lt;/<span class="name">label</span>&gt;</span></span><br><span class="line"></span><br><span class="line">                <span class="comment">&lt;!-- 在 vue中，使用事件绑定机制，为元素制定处理函数都时候，如果加了小括号，就可以为函数传参 --&gt;</span></span><br><span class="line">                <span class="tag">&lt;<span class="name">input</span> <span class="attr">type</span>=<span class="string">"button"</span> <span class="attr">value</span>=<span class="string">"添加"</span> <span class="attr">class</span>=<span class="string">"btn btn-primary"</span> @<span class="attr">click</span>=<span class="string">"add"</span>&gt;</span></span><br><span class="line"></span><br><span class="line">                <span class="tag">&lt;<span class="name">label</span>&gt;</span></span><br><span class="line">                    搜索名称关键字:</span><br><span class="line">                    <span class="comment">&lt;!-- vue中所有的指令，在调用的时候，都以v-开头 --&gt;</span></span><br><span class="line">                    <span class="tag">&lt;<span class="name">input</span> <span class="attr">type</span>=<span class="string">"text"</span> <span class="attr">class</span>=<span class="string">"form-control"</span> <span class="attr">v-model</span>=<span class="string">"keywords"</span> <span class="attr">id</span>=<span class="string">"search"</span> <span class="attr">v-focus</span> <span class="attr">v-color</span>=<span class="string">"'pink'"</span>&gt;</span></span><br><span class="line">                <span class="tag">&lt;/<span class="name">label</span>&gt;</span></span><br><span class="line"></span><br><span class="line">            <span class="tag">&lt;/<span class="name">div</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;/<span class="name">div</span>&gt;</span></span><br><span class="line"></span><br><span class="line">        <span class="tag">&lt;<span class="name">table</span> <span class="attr">class</span>=<span class="string">"table table-bordered table-hover table-striped"</span>&gt;</span></span><br><span class="line">            <span class="tag">&lt;<span class="name">thead</span>&gt;</span></span><br><span class="line">                <span class="tag">&lt;<span class="name">tr</span>&gt;</span></span><br><span class="line">                    <span class="tag">&lt;<span class="name">th</span>&gt;</span>Id<span class="tag">&lt;/<span class="name">th</span>&gt;</span></span><br><span class="line">                    <span class="tag">&lt;<span class="name">th</span>&gt;</span>Name<span class="tag">&lt;/<span class="name">th</span>&gt;</span></span><br><span class="line">                    <span class="tag">&lt;<span class="name">th</span>&gt;</span>Ctime<span class="tag">&lt;/<span class="name">th</span>&gt;</span></span><br><span class="line">                    <span class="tag">&lt;<span class="name">th</span>&gt;</span>Operation<span class="tag">&lt;/<span class="name">th</span>&gt;</span></span><br><span class="line">                <span class="tag">&lt;/<span class="name">tr</span>&gt;</span></span><br><span class="line">            <span class="tag">&lt;/<span class="name">thead</span>&gt;</span></span><br><span class="line">            <span class="tag">&lt;<span class="name">thead</span>&gt;</span></span><br><span class="line">                <span class="comment">&lt;!-- 之前，v-for 中的数据 都是直接从data 上的list中直接渲染过来的 --&gt;</span></span><br><span class="line">                <span class="comment">&lt;!-- 现在， 我们自定义的一个 search  方法，同时，把 搜索的关键字，通过传参的形式，传递给了search 方法 --&gt;</span></span><br><span class="line">                <span class="comment">&lt;!-- 在 search 方法内部，通过 执行 for 循环，把所有符合 搜索关键字的数据，保管到 一个新数组中。返回 --&gt;</span></span><br><span class="line">                <span class="tag">&lt;<span class="name">tr</span> <span class="attr">v-for</span>=<span class="string">"item in search(keywords)"</span> <span class="attr">:key</span>=<span class="string">"item.id"</span>&gt;</span></span><br><span class="line">                    <span class="tag">&lt;<span class="name">td</span>&gt;</span>&#123;&#123;item.id&#125;&#125;<span class="tag">&lt;/<span class="name">td</span>&gt;</span></span><br><span class="line">                    <span class="tag">&lt;<span class="name">td</span> <span class="attr">v-text</span>=<span class="string">"item.name"</span>&gt;</span><span class="tag">&lt;/<span class="name">td</span>&gt;</span></span><br><span class="line">                    <span class="tag">&lt;<span class="name">td</span>&gt;</span>&#123;&#123; item.ctime | dateFormat() &#125;&#125;<span class="tag">&lt;/<span class="name">td</span>&gt;</span></span><br><span class="line">                    <span class="tag">&lt;<span class="name">td</span>&gt;</span><span class="tag">&lt;<span class="name">a</span> <span class="attr">href</span>=<span class="string">""</span> @<span class="attr">click.prevent</span>=<span class="string">"del(item.id)"</span>&gt;</span>删除<span class="tag">&lt;/<span class="name">a</span>&gt;</span><span class="tag">&lt;/<span class="name">td</span>&gt;</span></span><br><span class="line">                <span class="tag">&lt;/<span class="name">tr</span>&gt;</span></span><br><span class="line">            <span class="tag">&lt;/<span class="name">thead</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;/<span class="name">table</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;/<span class="name">div</span>&gt;</span></span><br><span class="line"></span><br><span class="line">    <span class="tag">&lt;<span class="name">div</span> <span class="attr">id</span>=<span class="string">"app2"</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">h3</span> <span class="attr">v-color</span>=<span class="string">"'red'"</span> <span class="attr">v-fontweight</span>=<span class="string">"900"</span> <span class="attr">v-fontsize</span>=<span class="string">"'50px'"</span>&gt;</span>&#123;&#123;dt | dateFormat&#125;&#125;<span class="tag">&lt;/<span class="name">h3</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;/<span class="name">div</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">body</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">script</span>&gt;</span><span class="undefined"></span></span><br><span class="line"><span class="javascript">    <span class="comment">// 全局的过滤器，进行时间的格式化</span></span></span><br><span class="line"><span class="javascript">    <span class="comment">// 所谓的全局过滤器，就是所有的vm实例都共享的</span></span></span><br><span class="line"><span class="javascript">    Vue.filter(<span class="string">'dateFormat'</span>,<span class="function"><span class="keyword">function</span> (<span class="params">dataStr, pattern=<span class="string">""</span></span>)</span>&#123;</span></span><br><span class="line"><span class="javascript">        <span class="comment">//根据给定的时间字符串，得到特定的时间</span></span></span><br><span class="line"><span class="javascript">        <span class="keyword">var</span> dt = <span class="keyword">new</span> <span class="built_in">Date</span>(dataStr)</span></span><br><span class="line"><span class="undefined"></span></span><br><span class="line"><span class="javascript">        <span class="keyword">var</span> y = dt.getFullYear()</span></span><br><span class="line"><span class="javascript">        <span class="keyword">var</span> m = dt.getMonth() + <span class="number">1</span></span></span><br><span class="line"><span class="javascript">        <span class="keyword">var</span> d = dt.getDate()</span></span><br><span class="line"><span class="undefined"></span></span><br><span class="line"><span class="javascript">        <span class="comment">// return y + '-' + m + '-' d</span></span></span><br><span class="line"><span class="javascript">        <span class="comment">// return `$&#123;y&#125;-$&#123;m&#125;-$&#123;d&#125;`</span></span></span><br><span class="line"><span class="undefined"></span></span><br><span class="line"><span class="javascript">        <span class="keyword">if</span>(pattern.toLowerCase() === <span class="string">'yyyy-mm-dd'</span>)&#123;</span></span><br><span class="line"><span class="javascript">            <span class="keyword">return</span> <span class="string">`<span class="subst">$&#123;y&#125;</span>-<span class="subst">$&#123;m&#125;</span>-<span class="subst">$&#123;d&#125;</span>`</span></span></span><br><span class="line"><span class="javascript">        &#125;<span class="keyword">else</span> &#123;</span></span><br><span class="line"><span class="javascript">            <span class="keyword">var</span> hh = dt.getHours()</span></span><br><span class="line"><span class="javascript">            <span class="keyword">var</span> mm = dt.getMinutes()</span></span><br><span class="line"><span class="javascript">            <span class="keyword">var</span> ss = dt.getSeconds()</span></span><br><span class="line"><span class="javascript">            <span class="keyword">return</span> <span class="string">`<span class="subst">$&#123;y&#125;</span>-<span class="subst">$&#123;m&#125;</span>-<span class="subst">$&#123;d&#125;</span> <span class="subst">$&#123;hh&#125;</span>:<span class="subst">$&#123;mm&#125;</span>:<span class="subst">$&#123;ss&#125;</span>`</span></span></span><br><span class="line"><span class="undefined">        &#125;</span></span><br><span class="line"><span class="undefined">    &#125;)</span></span><br><span class="line"><span class="undefined"></span></span><br><span class="line"><span class="undefined"></span></span><br><span class="line"><span class="javascript">    <span class="comment">// 自定义全局按键修饰符</span></span></span><br><span class="line"><span class="undefined">    Vue.config.keyCodes.f2 = 113</span></span><br><span class="line"><span class="undefined"></span></span><br><span class="line"><span class="javascript">    <span class="comment">//使用vue.directive() 定义全局都指令</span></span></span><br><span class="line"><span class="javascript">    <span class="comment">// 其中：参数1:指令的名称，注意，在定义都时候，指令都名称前面，不需要加 v- 前缀，</span></span></span><br><span class="line"><span class="javascript">    <span class="comment">// 但是：在调用都时候，必须 在指令都名称前面 加上 v- 前缀来进行调用</span></span></span><br><span class="line"><span class="javascript">    <span class="comment">// 参数2: 是一个对象，这个对象身上，有一些指令相关都函数，这些函数可以在特定都阶段执行相关的操作</span></span></span><br><span class="line"><span class="javascript">    Vue.directive(<span class="string">'focus'</span>,&#123;</span></span><br><span class="line"><span class="javascript">        bind: <span class="function"><span class="keyword">function</span>(<span class="params">el</span>)</span>&#123;<span class="comment">//每当指令绑定到元素上的时候，会立即执行这个 bind 函数 ，只执行一次</span></span></span><br><span class="line"><span class="javascript">            <span class="comment">// 注意： 在每个 函数中，第一个参数 el， 表示 被绑定了指令的那个元素，这个 el 参数，数一个原生的js对象</span></span></span><br><span class="line"><span class="javascript">            <span class="comment">// 在元素 刚绑定了指令的时候，还没有 插入到 dom中去，这时候，调用focus 方法没有作用</span></span></span><br><span class="line"><span class="javascript">            <span class="comment">// 因为，一个元素，只有插入dom之后，才能获取到焦点</span></span></span><br><span class="line"><span class="javascript">            <span class="comment">// el.focus()</span></span></span><br><span class="line"><span class="undefined">        &#125;,</span></span><br><span class="line"><span class="javascript">        inserted: <span class="function"><span class="keyword">function</span>(<span class="params">el</span>)</span>&#123;<span class="comment">//表示元素 插入到dom中的时候会执行 inserted 函数 只触发一次</span></span></span><br><span class="line"><span class="undefined">            el.focus()</span></span><br><span class="line"><span class="javascript">            <span class="comment">// 和js行为有关的操作最好在inserted中执行，防止js行为不生效</span></span></span><br><span class="line"><span class="undefined">        &#125;,</span></span><br><span class="line"><span class="javascript">        updated: <span class="function"><span class="keyword">function</span>(<span class="params"></span>)</span>&#123;<span class="comment">//当vnode更新的时候，会执行 updated ，可能会触发多次</span></span></span><br><span class="line"><span class="undefined"></span></span><br><span class="line"><span class="undefined">        &#125;</span></span><br><span class="line"><span class="undefined">    &#125;)</span></span><br><span class="line"><span class="undefined"></span></span><br><span class="line"><span class="javascript">    <span class="comment">//自定义一个 设置字体颜色的指令</span></span></span><br><span class="line"><span class="javascript">    Vue.directive(<span class="string">'color'</span>, &#123;</span></span><br><span class="line"><span class="javascript">        <span class="comment">// 样式，只要通过指令绑定给了元素，不管这个元素有没有插入到页面中去，这个元素肯定有了一个内联的样式</span></span></span><br><span class="line"><span class="javascript">        <span class="comment">// 将来元素肯定会显示到页面中，这时候，浏览器的渲染引擎必然会解析样式，应用给这个元素</span></span></span><br><span class="line"><span class="javascript">        bind: <span class="function"><span class="keyword">function</span>(<span class="params">el,binding</span>)</span>&#123;</span></span><br><span class="line"><span class="javascript">            <span class="comment">// el.style.color = 'red'</span></span></span><br><span class="line"><span class="javascript">            <span class="comment">// 和样式相关的操作，一般都可以在bind中执行</span></span></span><br><span class="line"><span class="undefined"></span></span><br><span class="line"><span class="undefined">            el.style.color = binding.value</span></span><br><span class="line"><span class="undefined">        &#125;</span></span><br><span class="line"><span class="undefined">    &#125;)</span></span><br><span class="line"><span class="undefined"></span></span><br><span class="line"><span class="undefined"></span></span><br><span class="line"><span class="javascript">    <span class="keyword">var</span> vm = <span class="keyword">new</span> Vue(&#123;</span></span><br><span class="line"><span class="javascript">        el:<span class="string">'#app'</span>,</span></span><br><span class="line"><span class="undefined">        data: &#123;</span></span><br><span class="line"><span class="javascript">            id:<span class="string">''</span>,</span></span><br><span class="line"><span class="javascript">            name:<span class="string">''</span>,</span></span><br><span class="line"><span class="javascript">            keywords: <span class="string">''</span>, <span class="comment">//搜索关键字</span></span></span><br><span class="line"><span class="undefined">            list:[</span></span><br><span class="line"><span class="javascript">                &#123;<span class="attr">id</span>: <span class="number">1</span> , <span class="attr">name</span>: <span class="string">'奔驰'</span> , <span class="attr">ctime</span>: <span class="keyword">new</span> <span class="built_in">Date</span>() &#125;,</span></span><br><span class="line"><span class="javascript">                &#123;<span class="attr">id</span>: <span class="number">2</span> , <span class="attr">name</span>: <span class="string">'宝马'</span> , <span class="attr">ctime</span>: <span class="keyword">new</span> <span class="built_in">Date</span>() &#125;</span></span><br><span class="line"><span class="undefined">            ]</span></span><br><span class="line"><span class="undefined">        &#125;,</span></span><br><span class="line"><span class="undefined">        methods:&#123;</span></span><br><span class="line"><span class="javascript">            add()&#123;<span class="comment">//添加的方法</span></span></span><br><span class="line"><span class="javascript">                <span class="comment">// 分析：</span></span></span><br><span class="line"><span class="javascript">                <span class="comment">// 1.获取到 id 和 name，直接从data上获取</span></span></span><br><span class="line"><span class="javascript">                <span class="comment">// 2.组织出一个对象</span></span></span><br><span class="line"><span class="javascript">                <span class="comment">// 3.把对象调用数组都相关方法，添加到当前data上的list中</span></span></span><br><span class="line"><span class="javascript">                <span class="comment">// 4.注意：在vue中已经实现数据都双向绑定，每当我们修改了data中的数据vue会默认监听到数据的改动，自动更新数据应用到页面上</span></span></span><br><span class="line"><span class="javascript">                <span class="comment">// 5.当我们意识到上面的第四步的时候，就证明打击已经入门vue了，我们更多的是在进行vm中model数据的操作，同时在操作model数据的时候，指定的业务逻辑操作</span></span></span><br><span class="line"><span class="undefined"></span></span><br><span class="line"><span class="javascript">                <span class="keyword">var</span> car = &#123; <span class="attr">id</span>:<span class="keyword">this</span>.id , <span class="attr">name</span>: <span class="keyword">this</span>.name , <span class="attr">ctime</span>: <span class="keyword">new</span> <span class="built_in">Date</span>()&#125;</span></span><br><span class="line"><span class="javascript">                <span class="keyword">this</span>.list.push(car)</span></span><br><span class="line"><span class="javascript">                <span class="keyword">this</span>.id = <span class="keyword">this</span>.name = <span class="string">''</span></span></span><br><span class="line"><span class="undefined">            &#125;,</span></span><br><span class="line"><span class="javascript">            del(id)&#123;<span class="comment">//根据id删数据</span></span></span><br><span class="line"><span class="javascript">                <span class="comment">// 分析：</span></span></span><br><span class="line"><span class="javascript">                <span class="comment">// 1.如何根据id找到要删除对象的索引</span></span></span><br><span class="line"><span class="javascript">                <span class="comment">// 2.如果找到索引了，直接调用 数组的splice方法</span></span></span><br><span class="line"><span class="undefined"></span></span><br><span class="line"><span class="javascript">                <span class="comment">// this.list.some((item,i)=&gt;&#123;</span></span></span><br><span class="line"><span class="javascript">                <span class="comment">//     if(item.id == id)&#123;</span></span></span><br><span class="line"><span class="javascript">                <span class="comment">//         this.list.splice(i,1)</span></span></span><br><span class="line"><span class="javascript">                <span class="comment">//         // 在数组的some方法中，如果return true，就会立即终止这个数组的后续循环</span></span></span><br><span class="line"><span class="javascript">                <span class="comment">//         return true;</span></span></span><br><span class="line"><span class="javascript">                <span class="comment">//     &#125;</span></span></span><br><span class="line"><span class="javascript">                <span class="comment">// &#125;)</span></span></span><br><span class="line"><span class="undefined"></span></span><br><span class="line"><span class="javascript">                <span class="keyword">var</span> index = <span class="keyword">this</span>.list.findIndex(<span class="function"><span class="params">item</span> =&gt;</span> &#123;</span></span><br><span class="line"><span class="javascript">                    <span class="keyword">if</span>(item.id == id)&#123;</span></span><br><span class="line"><span class="javascript">                        <span class="keyword">return</span> <span class="literal">true</span>;</span></span><br><span class="line"><span class="undefined">                    &#125;</span></span><br><span class="line"><span class="undefined">                &#125;)</span></span><br><span class="line"><span class="javascript">                <span class="keyword">this</span>.list.splice(index,<span class="number">1</span>)</span></span><br><span class="line"><span class="undefined">            &#125;,</span></span><br><span class="line"><span class="javascript">            search(keywords)&#123;<span class="comment">//根据关键字，进行数据的搜索</span></span></span><br><span class="line"><span class="javascript">                <span class="comment">// var newList = []</span></span></span><br><span class="line"><span class="javascript">                <span class="comment">// this.list.forEach(item=&gt;&#123;</span></span></span><br><span class="line"><span class="javascript">                <span class="comment">//     if(item.name.indexOf(keywords) != -1)&#123;</span></span></span><br><span class="line"><span class="javascript">                <span class="comment">//         newList.push(item)</span></span></span><br><span class="line"><span class="javascript">                <span class="comment">//     &#125;</span></span></span><br><span class="line"><span class="javascript">                <span class="comment">// &#125;)</span></span></span><br><span class="line"><span class="javascript">                <span class="comment">// return newList;</span></span></span><br><span class="line"><span class="undefined"></span></span><br><span class="line"><span class="javascript">                <span class="comment">// 注意： forEach some filter findIndex 这些都是属于数组的新方法</span></span></span><br><span class="line"><span class="javascript">                <span class="comment">// 都会对数组中的每一项，进行遍历，执行相关的操作</span></span></span><br><span class="line"><span class="javascript">                <span class="keyword">return</span> <span class="keyword">this</span>.list.filter(<span class="function"><span class="params">item</span> =&gt;</span> &#123;</span></span><br><span class="line"><span class="javascript">                    <span class="comment">// if(item.name.indexOf(keywords) != -1)</span></span></span><br><span class="line"><span class="undefined"></span></span><br><span class="line"><span class="javascript">                    <span class="comment">// 注意：ES6中，为字符窜提供了一个新方法，叫做 String.prototype.includes(‘要包含的字符串’)</span></span></span><br><span class="line"><span class="javascript">                    <span class="comment">// 如果包含，则返回 true ，否则返回 false</span></span></span><br><span class="line"><span class="javascript">                    <span class="comment">// contains</span></span></span><br><span class="line"><span class="javascript">                    <span class="keyword">if</span>(item.name.includes(keywords))&#123;</span></span><br><span class="line"><span class="javascript">                        <span class="keyword">return</span> item</span></span><br><span class="line"><span class="undefined">                    &#125;</span></span><br><span class="line"><span class="undefined">                &#125;)</span></span><br><span class="line"><span class="undefined">            &#125;</span></span><br><span class="line"><span class="undefined">        &#125;</span></span><br><span class="line"><span class="undefined">    &#125;);</span></span><br><span class="line"><span class="undefined"></span></span><br><span class="line"><span class="javascript">    <span class="comment">// 如何自定义一个私有的过滤器（局部）</span></span></span><br><span class="line"><span class="javascript">    <span class="keyword">var</span> vm2 = <span class="keyword">new</span> Vue(&#123;</span></span><br><span class="line"><span class="javascript">        el: <span class="string">'#app2'</span>,</span></span><br><span class="line"><span class="undefined">        data: &#123;</span></span><br><span class="line"><span class="javascript">            dt: <span class="keyword">new</span> <span class="built_in">Date</span>()</span></span><br><span class="line"><span class="undefined">        &#125;,</span></span><br><span class="line"><span class="undefined">        methods: &#123;&#125;,</span></span><br><span class="line"><span class="javascript">        filters: &#123;<span class="comment">//定义私有过滤器  过滤器又两个条件 【过滤器名称 和 处理函数】</span></span></span><br><span class="line"><span class="javascript">            <span class="comment">//过滤器调用的时候，采用的是就近原则，如果私有过滤器和全局过滤器名称一直，会优先调用私有的过滤器</span></span></span><br><span class="line"><span class="javascript">            dateFormat: <span class="function"><span class="keyword">function</span> (<span class="params">dataStr, pattern=<span class="string">""</span></span>)</span>&#123;</span></span><br><span class="line"><span class="javascript">                <span class="comment">//根据给定的时间字符串，得到特定的时间</span></span></span><br><span class="line"><span class="javascript">                <span class="keyword">var</span> dt = <span class="keyword">new</span> <span class="built_in">Date</span>(dataStr)</span></span><br><span class="line"><span class="undefined"></span></span><br><span class="line"><span class="javascript">                <span class="keyword">var</span> y = dt.getFullYear()</span></span><br><span class="line"><span class="javascript">                <span class="keyword">var</span> m = (dt.getMonth() + <span class="number">1</span>).toString().padStart(<span class="number">2</span>,<span class="string">'0'</span>)</span></span><br><span class="line"><span class="javascript">                <span class="keyword">var</span> d = dt.getDate().toString().padStart(<span class="number">2</span>,<span class="string">'0'</span>)</span></span><br><span class="line"><span class="undefined"></span></span><br><span class="line"><span class="javascript">                <span class="comment">// return y + '-' + m + '-' d</span></span></span><br><span class="line"><span class="javascript">                <span class="comment">// return `$&#123;y&#125;-$&#123;m&#125;-$&#123;d&#125;`</span></span></span><br><span class="line"><span class="undefined"></span></span><br><span class="line"><span class="javascript">                <span class="keyword">if</span>(pattern.toLowerCase() === <span class="string">'yyyy-mm-dd'</span>)&#123;</span></span><br><span class="line"><span class="javascript">                    <span class="keyword">return</span> <span class="string">`<span class="subst">$&#123;y&#125;</span>-<span class="subst">$&#123;m&#125;</span>-<span class="subst">$&#123;d&#125;</span>`</span></span></span><br><span class="line"><span class="javascript">                &#125;<span class="keyword">else</span> &#123;</span></span><br><span class="line"><span class="javascript">                    <span class="keyword">var</span> hh = dt.getHours().toString().padStart(<span class="number">2</span>,<span class="string">'0'</span>)</span></span><br><span class="line"><span class="javascript">                    <span class="keyword">var</span> mm = dt.getMinutes().toString().padStart(<span class="number">2</span>,<span class="string">'0'</span>)</span></span><br><span class="line"><span class="javascript">                    <span class="keyword">var</span> ss = dt.getSeconds().toString().padStart(<span class="number">2</span>,<span class="string">'0'</span>)</span></span><br><span class="line"><span class="javascript">                    <span class="keyword">return</span> <span class="string">`<span class="subst">$&#123;y&#125;</span>-<span class="subst">$&#123;m&#125;</span>-<span class="subst">$&#123;d&#125;</span> <span class="subst">$&#123;hh&#125;</span>:<span class="subst">$&#123;mm&#125;</span>:<span class="subst">$&#123;ss&#125;</span>`</span></span></span><br><span class="line"><span class="undefined">                &#125;</span></span><br><span class="line"><span class="undefined">            &#125;</span></span><br><span class="line"><span class="undefined">        &#125;,</span></span><br><span class="line"><span class="javascript">        directives: &#123; <span class="comment">//自定义私有指令</span></span></span><br><span class="line"><span class="javascript">            <span class="string">'fontweight'</span>: &#123;<span class="comment">//设置字体粗细</span></span></span><br><span class="line"><span class="javascript">                bind: <span class="function"><span class="keyword">function</span> (<span class="params">el, binding</span>)</span>&#123;</span></span><br><span class="line"><span class="undefined">                    el.style.fontWeight = binding.value</span></span><br><span class="line"><span class="undefined">                &#125;</span></span><br><span class="line"><span class="undefined">            &#125;,</span></span><br><span class="line"><span class="javascript">            <span class="string">'fontsize'</span>: <span class="function"><span class="keyword">function</span> (<span class="params">el, binding</span>)</span>&#123;<span class="comment">//注意：这个是 function 等同于 把 代码写到 bind 和 update中去</span></span></span><br><span class="line"><span class="javascript">                el.style.fontSize = <span class="built_in">parseInt</span>(binding.value) + <span class="string">'px'</span></span></span><br><span class="line"><span class="undefined">            &#125;</span></span><br><span class="line"><span class="undefined">        &#125;</span></span><br><span class="line"><span class="undefined">    &#125;)</span></span><br><span class="line"><span class="undefined"></span></span><br><span class="line"><span class="undefined"></span></span><br><span class="line"><span class="undefined"></span></span><br><span class="line"><span class="undefined"></span></span><br><span class="line"><span class="javascript">    <span class="comment">//过滤器的定于语法</span></span></span><br><span class="line"><span class="javascript">    <span class="comment">// Vue.filter('过滤器的名称',function()&#123;&#125;)</span></span></span><br><span class="line"><span class="undefined"></span></span><br><span class="line"><span class="javascript">    <span class="comment">// 过滤器中的function，第一个参数 ，已经背规定死，永远都是，过滤器 管道符前面 传过了的数据</span></span></span><br><span class="line"><span class="javascript">    <span class="comment">// Vue.filter('过滤器的名称',function (data) &#123;</span></span></span><br><span class="line"><span class="javascript">    <span class="comment">//     return data +'123'</span></span></span><br><span class="line"><span class="javascript">    <span class="comment">// &#125;)</span></span></span><br><span class="line"><span class="undefined"></span></span><br><span class="line"><span class="javascript">        <span class="comment">// document.getElementById('search').focus()</span></span></span><br><span class="line"><span class="undefined"></span></span><br><span class="line"><span class="undefined"></span><span class="tag">&lt;/<span class="name">script</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">html</span>&gt;</span></span><br><span class="line"></span><br><span class="line"></span><br><span class="line"></span><br><span class="line"><span class="comment">&lt;!-- 过滤器调用时候的格式 &#123;&#123;name | 过滤器的名称&#125;&#125; --&gt;</span></span><br></pre></td></tr></table></figure>]]></content>
      
      
      <categories>
          
          <category> Vue </category>
          
      </categories>
      
      
        <tags>
            
            <tag> Vue 案例 </tag>
            
        </tags>
      
    </entry>
    
    <entry>
      <title>Vue day2</title>
      <link href="/2018/10/08/Vue-day2/"/>
      <url>/2018/10/08/Vue-day2/</url>
      
        <content type="html"><![CDATA[<link rel="stylesheet" class="aplayer-secondary-style-marker" href="/assets/css/APlayer.min.css"><script src="/assets/js/APlayer.min.js" class="aplayer-secondary-script-marker"></script><h1 id="vue-生命周期表"><a href="#vue-生命周期表" class="headerlink" title="vue 生命周期表"></a>vue 生命周期表</h1><p><img src="/Vue/lifecycle.png" alt="vue生命周期表"></p><h1 id="品牌管理案例"><a href="#品牌管理案例" class="headerlink" title="品牌管理案例"></a>品牌管理案例</h1><h2 id="添加新品牌"><a href="#添加新品牌" class="headerlink" title="添加新品牌"></a>添加新品牌</h2><h2 id="删除品牌"><a href="#删除品牌" class="headerlink" title="删除品牌"></a>删除品牌</h2><h2 id="根据条件筛选品牌"><a href="#根据条件筛选品牌" class="headerlink" title="根据条件筛选品牌"></a>根据条件筛选品牌</h2><ol><li>1.x 版本中的 filterBy 指令，在 2.x 中已经被废除：</li></ol><p><a href="https://v1-cn.vuejs.org/api/#filterBy" target="_blank" rel="noopener">filterBy - 指令</a></p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br></pre></td><td class="code"><pre><span class="line">&lt;tr v-for=&quot;item in list | filterBy searchName in &apos;name&apos;&quot;&gt;</span><br><span class="line"></span><br><span class="line">  &lt;td&gt;&#123;&#123;item.id&#125;&#125;&lt;/td&gt;</span><br><span class="line"></span><br><span class="line">  &lt;td&gt;&#123;&#123;item.name&#125;&#125;&lt;/td&gt;</span><br><span class="line"></span><br><span class="line">  &lt;td&gt;&#123;&#123;item.ctime&#125;&#125;&lt;/td&gt;</span><br><span class="line"></span><br><span class="line">  &lt;td&gt;</span><br><span class="line"></span><br><span class="line">    &lt;a href=&quot;#&quot; @click.prevent=&quot;del(item.id)&quot;&gt;删除&lt;/a&gt;</span><br><span class="line"></span><br><span class="line">  &lt;/td&gt;</span><br><span class="line"></span><br><span class="line">&lt;/tr&gt;</span><br></pre></td></tr></table></figure><ol start="2"><li>在 2.x 版本中<a href="https://cn.vuejs.org/v2/guide/list.html#显示过滤-排序结果" target="_blank" rel="noopener">手动实现筛选的方式</a>：</li></ol><ul><li>筛选框绑定到 VM 实例中的 <code>searchName</code> 属性：</li></ul><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line">&lt;hr&gt; 输入筛选名称：</span><br><span class="line"></span><br><span class="line">&lt;input type=&quot;text&quot; v-model=&quot;searchName&quot;&gt;</span><br></pre></td></tr></table></figure><ul><li>在使用 <code>v-for</code> 指令循环每一行数据的时候，不再直接 <code>item in list</code>，而是 <code>in</code> 一个 过滤的 methods 方法，同时，把过滤条件<code>searchName</code>传递进去：</li></ul><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br></pre></td><td class="code"><pre><span class="line">&lt;tbody&gt;</span><br><span class="line"></span><br><span class="line">      &lt;tr v-for=&quot;item in search(searchName)&quot;&gt;</span><br><span class="line"></span><br><span class="line">        &lt;td&gt;&#123;&#123;item.id&#125;&#125;&lt;/td&gt;</span><br><span class="line"></span><br><span class="line">        &lt;td&gt;&#123;&#123;item.name&#125;&#125;&lt;/td&gt;</span><br><span class="line"></span><br><span class="line">        &lt;td&gt;&#123;&#123;item.ctime&#125;&#125;&lt;/td&gt;</span><br><span class="line"></span><br><span class="line">        &lt;td&gt;</span><br><span class="line"></span><br><span class="line">          &lt;a href=&quot;#&quot; @click.prevent=&quot;del(item.id)&quot;&gt;删除&lt;/a&gt;</span><br><span class="line"></span><br><span class="line">        &lt;/td&gt;</span><br><span class="line"></span><br><span class="line">      &lt;/tr&gt;</span><br><span class="line"></span><br><span class="line">    &lt;/tbody&gt;</span><br></pre></td></tr></table></figure><ul><li><code>search</code> 过滤方法中，使用 数组的 <code>filter</code> 方法进行过滤：</li></ul><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br></pre></td><td class="code"><pre><span class="line">search(name) &#123;</span><br><span class="line"></span><br><span class="line">  return this.list.filter(x =&gt; &#123;</span><br><span class="line"></span><br><span class="line">    return x.name.indexOf(name) != -1;</span><br><span class="line"></span><br><span class="line">  &#125;);</span><br><span class="line"></span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h1 id="Vue-调试工具vue-devtools的安装步骤和使用"><a href="#Vue-调试工具vue-devtools的安装步骤和使用" class="headerlink" title="Vue 调试工具vue-devtools的安装步骤和使用"></a>Vue 调试工具<code>vue-devtools</code>的安装步骤和使用</h1><p><a href="https://chrome.google.com/webstore/detail/vuejs-devtools/nhdogjmejiglipccpnnnanhbledajbpd?hl=zh-CN" target="_blank" rel="noopener">Vue.js devtools - 翻墙安装方式 - 推荐</a></p><h1 id="过滤器"><a href="#过滤器" class="headerlink" title="过滤器"></a>过滤器</h1><p>概念：Vue.js 允许你自定义过滤器，<strong>可被用作一些常见的文本格式化</strong>。过滤器可以用在两个地方：<strong>mustache 插值和 v-bind 表达式</strong>。过滤器应该被添加在 JavaScript 表达式的尾部，由“管道”符指示；</p><h2 id="私有过滤器"><a href="#私有过滤器" class="headerlink" title="私有过滤器"></a>私有过滤器</h2><ol><li>HTML 元素：</li></ol><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">&lt;td&gt;&#123;&#123;item.ctime | dataFormat(&apos;yyyy-mm-dd&apos;)&#125;&#125;&lt;/td&gt;</span><br></pre></td></tr></table></figure><ol start="2"><li>私有 <code>filters</code> 定义方式：</li></ol><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br></pre></td><td class="code"><pre><span class="line">filters: &#123; // 私有局部过滤器，只能在 当前 VM 对象所控制的 View 区域进行使用</span><br><span class="line"></span><br><span class="line">    dataFormat(input, pattern = &quot;&quot;) &#123; // 在参数列表中 通过 pattern=&quot;&quot; 来指定形参默认值，防止报错</span><br><span class="line"></span><br><span class="line">      var dt = new Date(input);</span><br><span class="line"></span><br><span class="line">      // 获取年月日</span><br><span class="line"></span><br><span class="line">      var y = dt.getFullYear();</span><br><span class="line"></span><br><span class="line">      var m = (dt.getMonth() + 1).toString().padStart(2, &apos;0&apos;);</span><br><span class="line"></span><br><span class="line">      var d = dt.getDate().toString().padStart(2, &apos;0&apos;);</span><br><span class="line"></span><br><span class="line"></span><br><span class="line"></span><br><span class="line">      // 如果 传递进来的字符串类型，转为小写之后，等于 yyyy-mm-dd，那么就返回 年-月-日</span><br><span class="line"></span><br><span class="line">      // 否则，就返回  年-月-日 时：分：秒</span><br><span class="line"></span><br><span class="line">      if (pattern.toLowerCase() === &apos;yyyy-mm-dd&apos;) &#123;</span><br><span class="line"></span><br><span class="line">        return `$&#123;y&#125;-$&#123;m&#125;-$&#123;d&#125;`;</span><br><span class="line"></span><br><span class="line">      &#125; else &#123;</span><br><span class="line"></span><br><span class="line">        // 获取时分秒</span><br><span class="line"></span><br><span class="line">        var hh = dt.getHours().toString().padStart(2, &apos;0&apos;);</span><br><span class="line"></span><br><span class="line">        var mm = dt.getMinutes().toString().padStart(2, &apos;0&apos;);</span><br><span class="line"></span><br><span class="line">        var ss = dt.getSeconds().toString().padStart(2, &apos;0&apos;);</span><br><span class="line"></span><br><span class="line"></span><br><span class="line"></span><br><span class="line">        return `$&#123;y&#125;-$&#123;m&#125;-$&#123;d&#125; $&#123;hh&#125;:$&#123;mm&#125;:$&#123;ss&#125;`;</span><br><span class="line"></span><br><span class="line">      &#125;</span><br><span class="line"></span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">  &#125;</span><br></pre></td></tr></table></figure><blockquote><p>使用 ES6 中的字符串新方法 String.prototype.padStart(maxLength, fillString=’’) 或 String.prototype.padEnd(maxLength, fillString=’’)来填充字符串；</p></blockquote><h2 id="全局过滤器"><a href="#全局过滤器" class="headerlink" title="全局过滤器"></a>全局过滤器</h2><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br></pre></td><td class="code"><pre><span class="line">// 定义一个全局过滤器</span><br><span class="line"></span><br><span class="line">Vue.filter(&apos;dataFormat&apos;, function (input, pattern = &apos;&apos;) &#123;</span><br><span class="line"></span><br><span class="line">  var dt = new Date(input);</span><br><span class="line"></span><br><span class="line">  // 获取年月日</span><br><span class="line"></span><br><span class="line">  var y = dt.getFullYear();</span><br><span class="line"></span><br><span class="line">  var m = (dt.getMonth() + 1).toString().padStart(2, &apos;0&apos;);</span><br><span class="line"></span><br><span class="line">  var d = dt.getDate().toString().padStart(2, &apos;0&apos;);</span><br><span class="line"></span><br><span class="line"></span><br><span class="line"></span><br><span class="line">  // 如果 传递进来的字符串类型，转为小写之后，等于 yyyy-mm-dd，那么就返回 年-月-日</span><br><span class="line"></span><br><span class="line">  // 否则，就返回  年-月-日 时：分：秒</span><br><span class="line"></span><br><span class="line">  if (pattern.toLowerCase() === &apos;yyyy-mm-dd&apos;) &#123;</span><br><span class="line"></span><br><span class="line">    return `$&#123;y&#125;-$&#123;m&#125;-$&#123;d&#125;`;</span><br><span class="line"></span><br><span class="line">  &#125; else &#123;</span><br><span class="line"></span><br><span class="line">    // 获取时分秒</span><br><span class="line"></span><br><span class="line">    var hh = dt.getHours().toString().padStart(2, &apos;0&apos;);</span><br><span class="line"></span><br><span class="line">    var mm = dt.getMinutes().toString().padStart(2, &apos;0&apos;);</span><br><span class="line"></span><br><span class="line">    var ss = dt.getSeconds().toString().padStart(2, &apos;0&apos;);</span><br><span class="line"></span><br><span class="line"></span><br><span class="line"></span><br><span class="line">    return `$&#123;y&#125;-$&#123;m&#125;-$&#123;d&#125; $&#123;hh&#125;:$&#123;mm&#125;:$&#123;ss&#125;`;</span><br><span class="line"></span><br><span class="line">  &#125;</span><br><span class="line"></span><br><span class="line">&#125;);</span><br></pre></td></tr></table></figure><blockquote><p>注意：当有局部和全局两个名称相同的过滤器时候，会以就近原则进行调用，即：局部过滤器优先于全局过滤器被调用！</p></blockquote><h1 id="键盘修饰符以及自定义键盘修饰符"><a href="#键盘修饰符以及自定义键盘修饰符" class="headerlink" title="键盘修饰符以及自定义键盘修饰符"></a>键盘修饰符以及自定义键盘修饰符</h1><h2 id="1-x-中自定义键盘修饰符【了解即可】"><a href="#1-x-中自定义键盘修饰符【了解即可】" class="headerlink" title="1.x 中自定义键盘修饰符【了解即可】"></a>1.x 中自定义键盘修饰符【了解即可】</h2><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">Vue.directive(&apos;on&apos;).keyCodes.f2 = 113;</span><br></pre></td></tr></table></figure><h2 id="2-x-中自定义键盘修饰符"><a href="#2-x-中自定义键盘修饰符" class="headerlink" title="2.x 中自定义键盘修饰符"></a><a href="https://cn.vuejs.org/v2/guide/events.html#键值修饰符" target="_blank" rel="noopener">2.x 中自定义键盘修饰符</a></h2><ol><li>通过<code>Vue.config.keyCodes.名称 = 按键值</code>来自定义案件修饰符的别名：</li></ol><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">Vue.config.keyCodes.f2 = 113;</span><br></pre></td></tr></table></figure><ol start="2"><li>使用自定义的按键修饰符：</li></ol><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">&lt;input type=&quot;text&quot; v-model=&quot;name&quot; @keyup.f2=&quot;add&quot;&gt;</span><br></pre></td></tr></table></figure><h1 id="自定义指令"><a href="#自定义指令" class="headerlink" title="自定义指令"></a><a href="https://cn.vuejs.org/v2/guide/custom-directive.html" target="_blank" rel="noopener">自定义指令</a></h1><ol><li>自定义全局和局部的 自定义指令：</li></ol><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br></pre></td><td class="code"><pre><span class="line">// 自定义全局指令 v-focus，为绑定的元素自动获取焦点：</span><br><span class="line"></span><br><span class="line">Vue.directive(&apos;focus&apos;, &#123;</span><br><span class="line"></span><br><span class="line">  inserted: function (el) &#123; // inserted 表示被绑定元素插入父节点时调用</span><br><span class="line"></span><br><span class="line">    el.focus();</span><br><span class="line"></span><br><span class="line">  &#125;</span><br><span class="line"></span><br><span class="line">&#125;);</span><br><span class="line"></span><br><span class="line"></span><br><span class="line"></span><br><span class="line">// 自定义局部指令 v-color 和 v-font-weight，为绑定的元素设置指定的字体颜色 和 字体粗细：</span><br><span class="line"></span><br><span class="line">  directives: &#123;</span><br><span class="line"></span><br><span class="line">    color: &#123; // 为元素设置指定的字体颜色</span><br><span class="line"></span><br><span class="line">      bind(el, binding) &#123;</span><br><span class="line"></span><br><span class="line">        el.style.color = binding.value;</span><br><span class="line"></span><br><span class="line">      &#125;</span><br><span class="line"></span><br><span class="line">    &#125;,</span><br><span class="line"></span><br><span class="line">    &apos;font-weight&apos;: function (el, binding2) &#123; // 自定义指令的简写形式，等同于定义了 bind 和 update 两个钩子函数</span><br><span class="line"></span><br><span class="line">      el.style.fontWeight = binding2.value;</span><br><span class="line"></span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">  &#125;</span><br></pre></td></tr></table></figure><ol start="2"><li>自定义指令的使用方式：</li></ol><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">&lt;input type=&quot;text&quot; v-model=&quot;searchName&quot; v-focus v-color=&quot;&apos;red&apos;&quot; v-font-weight=&quot;900&quot;&gt;</span><br></pre></td></tr></table></figure><h1 id="Vue-1-x-中-自定义元素指令【已废弃-了解即可】"><a href="#Vue-1-x-中-自定义元素指令【已废弃-了解即可】" class="headerlink" title="Vue 1.x 中 自定义元素指令【已废弃,了解即可】"></a>Vue 1.x 中 自定义元素指令【已废弃,了解即可】</h1><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line">Vue.elementDirective(&apos;red-color&apos;, &#123;</span><br><span class="line">  bind: function () &#123;</span><br><span class="line">    this.el.style.color = &apos;red&apos;;</span><br><span class="line">  &#125;</span><br><span class="line">&#125;);</span><br></pre></td></tr></table></figure><p>使用方式：</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">&lt;red-color&gt;1232&lt;/red-color&gt;</span><br></pre></td></tr></table></figure><h1 id="vue-实例的生命周期"><a href="#vue-实例的生命周期" class="headerlink" title="vue 实例的生命周期"></a><a href="https://cn.vuejs.org/v2/guide/instance.html#实例生命周期" target="_blank" rel="noopener">vue 实例的生命周期</a></h1><ul><li>什么是生命周期：从 Vue 实例创建、运行、到销毁期间，总是伴随着各种各样的事件，这些事件，统称为生命周期！</li><li><a href="https://cn.vuejs.org/v2/api/#选项-生命周期钩子" target="_blank" rel="noopener">生命周期钩子</a>：就是生命周期事件的别名而已；</li><li>生命周期钩子 = 生命周期函数 = 生命周期事件</li><li>主要的生命周期函数分类：</li></ul><ul><li>创建期间的生命周期函数： + beforeCreate：实例刚在内存中被创建出来，此时，还没有初始化好 data 和 methods 属性 + created：实例已经在内存中创建 OK，此时 data 和 methods 已经创建 OK，此时还没有开始 编译模板 + beforeMount：此时已经完成了模板的编译，但是还没有挂载到页面中 + mounted：此时，已经将编译好的模板，挂载到了页面指定的容器中显示</li><li>运行期间的生命周期函数： + beforeUpdate：状态更新之前执行此函数， 此时 data 中的状态值是最新的，但是界面上显示的 数据还是旧的，因为此时还没有开始重新渲染 DOM 节点 + updated：实例更新完毕之后调用此函数，此时 data 中的状态值 和 界面上显示的数据，都已经完成了更新，界面已经被重新渲染好了！</li><li>销毁期间的生命周期函数： + beforeDestroy：实例销毁之前调用。在这一步，实例仍然完全可用。 + destroyed：Vue 实例销毁后调用。调用后，Vue 实例指示的所有东西都会解绑定，所有的事件监听器会被移除，所有的子实例也会被销毁。</li></ul><h1 id="vue-resource-实现-get-post-jsonp-请求"><a href="#vue-resource-实现-get-post-jsonp-请求" class="headerlink" title="vue-resource 实现 get, post, jsonp 请求"></a><a href="https://github.com/pagekit/vue-resource" target="_blank" rel="noopener">vue-resource 实现 get, post, jsonp 请求</a></h1><p>除了 vue-resource 之外，还可以使用 <code>axios</code> 的第三方包实现实现数据的请求</p><ol><li>之前的学习中，如何发起数据请求？</li><li>常见的数据请求类型？ get post jsonp</li><li>测试的 URL 请求资源地址：</li></ol><ul><li>get 请求地址： <a href="http://vue.studyit.io/api/getlunbo" target="_blank" rel="noopener">http://vue.studyit.io/api/getlunbo</a></li><li>post 请求地址：<a href="http://vue.studyit.io/api/post" target="_blank" rel="noopener">http://vue.studyit.io/api/post</a></li><li>jsonp 请求地址：<a href="http://vue.studyit.io/api/jsonp" target="_blank" rel="noopener">http://vue.studyit.io/api/jsonp</a></li></ul><ol start="4"><li>JSONP 的实现原理</li></ol><ul><li>由于浏览器的安全性限制，不允许 AJAX 访问 协议不同、域名不同、端口号不同的 数据接口，浏览器认为这种访问不安全；</li><li>可以通过动态创建 script 标签的形式，把 script 标签的 src 属性，指向数据接口的地址，因为 script 标签不存在跨域限制，这种数据获取方式，称作 JSONP（注意：根据 JSONP 的实现原理，知晓，JSONP 只支持 Get 请求）；</li><li>具体实现过程： - 先在客户端定义一个回调方法，预定义对数据的操作； - 再把这个回调方法的名称，通过 URL 传参的形式，提交到服务器的数据接口； - 服务器数据接口组织好要发送给客户端的数据，再拿着客户端传递过来的回调方法名称，拼接出一个调用这个方法的字符串，发送给客户端去解析执行； - 客户端拿到服务器返回的字符串之后，当作 Script 脚本去解析执行，这样就能够拿到 JSONP 的数据了；</li><li>带大家通过 Node.js ，来手动实现一个 JSONP 的请求例子；</li></ul><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br></pre></td><td class="code"><pre><span class="line">const http = require(&apos;http&apos;);</span><br><span class="line">// 导入解析 URL 地址的核心模块</span><br><span class="line">const urlModule = require(&apos;url&apos;);</span><br><span class="line"></span><br><span class="line">const server = http.createServer();</span><br><span class="line">// 监听 服务器的 request 请求事件，处理每个请求</span><br><span class="line">server.on(&apos;request&apos;, (req, res) =&gt; &#123;</span><br><span class="line">  const url = req.url;</span><br><span class="line"></span><br><span class="line">  // 解析客户端请求的URL地址</span><br><span class="line">  var info = urlModule.parse(url, true);</span><br><span class="line"></span><br><span class="line">  // 如果请求的 URL 地址是 /getjsonp ，则表示要获取JSONP类型的数据</span><br><span class="line">  if (info.pathname === &apos;/getjsonp&apos;) &#123;</span><br><span class="line">    // 获取客户端指定的回调函数的名称</span><br><span class="line">    var cbName = info.query.callback;</span><br><span class="line">    // 手动拼接要返回给客户端的数据对象</span><br><span class="line">    var data = &#123;</span><br><span class="line">      name: &apos;zs&apos;,</span><br><span class="line">      age: 22,</span><br><span class="line">      gender: &apos;男&apos;,</span><br><span class="line">      hobby: [&apos;吃饭&apos;, &apos;睡觉&apos;, &apos;运动&apos;]</span><br><span class="line">    &#125;</span><br><span class="line">    // 拼接出一个方法的调用，在调用这个方法的时候，把要发送给客户端的数据，序列化为字符串，作为参数传递给这个调用的方法：</span><br><span class="line">    var result = `$&#123;cbName&#125;($&#123;JSON.stringify(data)&#125;)`;</span><br><span class="line">    // 将拼接好的方法的调用，返回给客户端去解析执行</span><br><span class="line">    res.end(result);</span><br><span class="line">  &#125; else &#123;</span><br><span class="line">    res.end(&apos;404&apos;);</span><br><span class="line">  &#125;</span><br><span class="line">&#125;);</span><br><span class="line"></span><br><span class="line">server.listen(3000, () =&gt; &#123;</span><br><span class="line">  console.log(&apos;server running at http://127.0.0.1:3000&apos;);</span><br><span class="line">&#125;);</span><br></pre></td></tr></table></figure><ol start="5"><li>vue-resource 的配置步骤：</li></ol><ul><li>直接在页面中，通过<code>script</code>标签，引入 <code>vue-resource</code> 的脚本文件；</li><li>注意：引用的先后顺序是：先引用 <code>Vue</code> 的脚本文件，再引用 <code>vue-resource</code> 的脚本文件；</li></ul><ol start="6"><li>发送 get 请求：</li></ol><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line">getInfo() &#123; // get 方式获取数据</span><br><span class="line">  this.$http.get(&apos;http://127.0.0.1:8899/api/getlunbo&apos;).then(res =&gt; &#123;</span><br><span class="line">    console.log(res.body);</span><br><span class="line">  &#125;)</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><ol start="7"><li>发送 post 请求：</li></ol><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br></pre></td><td class="code"><pre><span class="line">postInfo() &#123;</span><br><span class="line">  var url = &apos;http://127.0.0.1:8899/api/post&apos;;</span><br><span class="line">  // post 方法接收三个参数：</span><br><span class="line">  // 参数1： 要请求的URL地址</span><br><span class="line">  // 参数2： 要发送的数据对象</span><br><span class="line">  // 参数3： 指定post提交的编码类型为 application/x-www-form-urlencoded</span><br><span class="line">  this.$http.post(url, &#123; name: &apos;zs&apos; &#125;, &#123; emulateJSON: true &#125;).then(res =&gt; &#123;</span><br><span class="line">    console.log(res.body);</span><br><span class="line">  &#125;);</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><ol start="8"><li>发送 JSONP 请求获取数据：</li></ol><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line">jsonpInfo() &#123; // JSONP形式从服务器获取数据</span><br><span class="line">  var url = &apos;http://127.0.0.1:8899/api/jsonp&apos;;</span><br><span class="line">  this.$http.jsonp(url).then(res =&gt; &#123;</span><br><span class="line">    console.log(res.body);</span><br><span class="line">  &#125;);</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h1 id="配置本地数据库和数据接口-API"><a href="#配置本地数据库和数据接口-API" class="headerlink" title="配置本地数据库和数据接口 API"></a>配置本地数据库和数据接口 API</h1><ol><li>先解压安装 <code>PHPStudy</code>;</li><li>解压安装 <code>Navicat</code> 这个数据库可视化工具，并激活；</li><li>打开 <code>Navicat</code> 工具，新建空白数据库，名为 <code>dtcmsdb4</code>;</li><li>双击新建的数据库，连接上这个空白数据库，在新建的数据库上<code>右键</code> -&gt; <code>运行SQL文件</code>，选择并执行 <code>dtcmsdb4.sql</code> 这个数据库脚本文件；如果执行不报错，则数据库导入完成；</li><li>进入文件夹 <code>vuecms3_nodejsapi</code> 内部，执行 <code>npm i</code> 安装所有的依赖项；</li><li>先确保本机安装了 <code>nodemon</code>, 没有安装，则运行 <code>npm i nodemon -g</code> 进行全局安装，安装完毕后，进入到 <code>vuecms3_nodejsapi</code>目录 -&gt; <code>src</code>目录 -&gt; 双击运行 <code>start.bat</code></li><li>如果 API 启动失败，请检查 PHPStudy 是否正常开启，同时，检查 <code>app.js</code> 中第 <code>14行</code> 中数据库连接配置字符串是否正确；PHPStudy 中默认的 用户名是 root，默认的密码也是 root</li></ol><h1 id="品牌管理改造"><a href="#品牌管理改造" class="headerlink" title="品牌管理改造"></a>品牌管理改造</h1><h2 id="展示品牌列表"><a href="#展示品牌列表" class="headerlink" title="展示品牌列表"></a>展示品牌列表</h2><h2 id="添加品牌数据"><a href="#添加品牌数据" class="headerlink" title="添加品牌数据"></a>添加品牌数据</h2><h2 id="删除品牌数据"><a href="#删除品牌数据" class="headerlink" title="删除品牌数据"></a>删除品牌数据</h2><h1 id="相关文章"><a href="#相关文章" class="headerlink" title="相关文章"></a>相关文章</h1><ol><li><a href="https://v1-cn.vuejs.org/" target="_blank" rel="noopener">vue.js 1.x 文档</a></li><li><a href="https://cn.vuejs.org/" target="_blank" rel="noopener">vue.js 2.x 文档</a></li><li><a href="http://www.css88.com/archives/7715" target="_blank" rel="noopener">String.prototype.padStart(maxLength, fillString)</a></li><li><a href="http://www.cnblogs.com/wuhua1/p/6686237.html" target="_blank" rel="noopener">js 里面的键盘事件对应的键码</a></li><li><a href="https://github.com/pagekit/vue-resource" target="_blank" rel="noopener">pagekit/vue-resource</a></li><li><a href="https://jingyan.baidu.com/article/a65957f4976aad24e67f9b9b.html" target="_blank" rel="noopener">navicat 如何导入 sql 文件和导出 sql 文件</a></li><li><a href="http://cubic-bezier.com/#.4,-0.3,1,.33" target="_blank" rel="noopener">贝塞尔在线生成器</a></li></ol>]]></content>
      
      
      <categories>
          
          <category> Vue </category>
          
      </categories>
      
      
        <tags>
            
            <tag> Vue笔记 </tag>
            
        </tags>
      
    </entry>
    
    <entry>
      <title>Vue day1</title>
      <link href="/2018/10/08/Vue-day1/"/>
      <url>/2018/10/08/Vue-day1/</url>
      
        <content type="html"><![CDATA[<link rel="stylesheet" class="aplayer-secondary-style-marker" href="/assets/css/APlayer.min.css"><script src="/assets/js/APlayer.min.js" class="aplayer-secondary-script-marker"></script><h1 id="day1-总结"><a href="#day1-总结" class="headerlink" title="day1 总结"></a>day1 总结</h1><ol><li><p>MVC 和 MVVM 的区别 </p></li><li><p>学习了Vue中最基本代码的结构 </p></li><li><p>插值表达式   v-cloak   v-text   v-html   v-bind（缩写是:）   v-on（缩写是@）   v-model   v-for   v-if     v-show </p></li><li><p>事件修饰符  ：  .stop   .prevent   .capture   .self     .once </p></li><li><p>el  指定要控制的区域    data 是个对象，指定了控制的区域内要用到的数据    methods 虽然带个s后缀，但是是个对象，这里可以自定义了方法 </p></li><li><p>在 VM 实例中，如果要访问 data 上的数据，或者要访问 methods 中的方法， 必须带 this </p></li><li><p>在 v-for 要会使用 key 属性 （只接受 string / number） </p></li><li><p>v-model 只能应用于表单元素 </p></li><li><p>在vue中绑定样式两种方式  v-bind:class   v-bind:style </p></li></ol><h1 id="什么是-Vue-js"><a href="#什么是-Vue-js" class="headerlink" title="什么是 Vue.js"></a>什么是 Vue.js</h1><ul><li><p>Vue.js 是目前最火的一个前端框架，React 是最流行的一个前端框架（React 除了开发网站，还可以开发手机 App， Vue 语法也是可以用于进行手机 App 开发的，需要借助于 Weex）</p></li><li><p>Vue.js 是前端的<strong>主流框架之一</strong>，和 Angular.js、React.js 一起，并成为前端三大主流框架！</p></li><li><p>Vue.js 是一套构建用户界面的框架，<strong>只关注视图层</strong>，它不仅易于上手，还便于与第三方库或既有项目整合。（Vue 有配套的第三方类库，可以整合起来做大型项目的开发）</p></li><li><p>前端的主要工作？主要负责 MVC 中的 V 这一层；主要工作就是和界面打交道，来制作前端页面效果；</p></li></ul><h1 id="为什么要学习流行框架"><a href="#为什么要学习流行框架" class="headerlink" title="为什么要学习流行框架"></a>为什么要学习流行框架</h1><ul><li>企业为了提高开发效率：在企业中，时间就是效率，效率就是金钱；</li></ul><ul><li>企业中，使用框架，能够提高开发的效率；</li></ul><ul><li>提高开发效率的发展历程：原生 JS -&gt; Jquery 之类的类库 -&gt; 前端模板引擎 -&gt; Angular.js / Vue.js（能够帮助我们减少不必要的 DOM 操作；提高渲染效率；双向数据绑定的概念【通过框架提供的指令，我们前端程序员只需要关心数据的业务逻辑，不再关心 DOM 是如何渲染的了】）</li><li>在 Vue 中，一个核心的概念，就是让用户不再操作 DOM 元素，解放了用户的双手，让程序员可以更多的时间去关注业务逻辑；</li></ul><ul><li>增强自己就业时候的竞争力</li></ul><ul><li>人无我有，人有我优</li><li>你平时不忙的时候，都在干嘛？</li></ul><h1 id="框架和库的区别"><a href="#框架和库的区别" class="headerlink" title="框架和库的区别"></a>框架和库的区别</h1><ul><li>框架：是一套完整的解决方案；对项目的侵入性较大，项目如果需要更换框架，则需要重新架构整个项目。</li></ul><ul><li>node 中的 express；</li></ul><ul><li>库（插件）：提供某一个小功能，对项目的侵入性较小，如果某个库无法完成某些需求，可以很容易切换到其它库实现需求。</li></ul><ul><li><ol><li>从 Jquery 切换到 Zepto</li></ol></li><li><ol start="2"><li>从 EJS 切换到 art-template</li></ol></li></ul><h1 id="Node（后端）中的-MVC-与-前端中的-MVVM-之间的区别"><a href="#Node（后端）中的-MVC-与-前端中的-MVVM-之间的区别" class="headerlink" title="Node（后端）中的 MVC 与 前端中的 MVVM 之间的区别"></a>Node（后端）中的 MVC 与 前端中的 MVVM 之间的区别</h1><ul><li>MVC 是后端的分层开发概念；</li><li><p>MVVM 是前端视图层的概念，主要关注于 视图层分离，也就是说：MVVM 把前端的视图层，分为了 三部分 Model, View , VM ViewModel</p></li><li><p>为什么有了 MVC 还要有 MVVM</p></li></ul><h1 id="Vue-js-基本的代码结构和插值表达式-和-MVVM-之间的对应关系"><a href="#Vue-js-基本的代码结构和插值表达式-和-MVVM-之间的对应关系" class="headerlink" title="Vue.js 基本的代码结构和插值表达式 和 MVVM 之间的对应关系"></a>Vue.js <code>基本的代码结构</code>和<code>插值表达式</code> 和 MVVM 之间的对应关系</h1><figure class="highlight html"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">&lt;!DOCTYPE html&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">html</span> <span class="attr">lang</span>=<span class="string">"en"</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">head</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">meta</span> <span class="attr">charset</span>=<span class="string">"UTF-8"</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">meta</span> <span class="attr">name</span>=<span class="string">"viewport"</span> <span class="attr">content</span>=<span class="string">"width=device-width, initial-scale=1.0"</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">meta</span> <span class="attr">http-equiv</span>=<span class="string">"X-UA-Compatible"</span> <span class="attr">content</span>=<span class="string">"ie=edge"</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">title</span>&gt;</span>Document<span class="tag">&lt;/<span class="name">title</span>&gt;</span></span><br><span class="line">    <span class="comment">&lt;!-- 1.导入vue的包 --&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">script</span> <span class="attr">src</span>=<span class="string">"./lib/vue-2.4.0.js"</span>&gt;</span><span class="undefined"></span><span class="tag">&lt;/<span class="name">script</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">head</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">body</span>&gt;</span></span><br><span class="line">    <span class="comment">&lt;!-- 将来new的vue实例，会控制这个元素中的所有内容 --&gt;</span></span><br><span class="line">    <span class="comment">&lt;!-- vue 实例所控制的这个元素区域，就是我们的 v--&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">div</span> <span class="attr">id</span>=<span class="string">"app"</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">p</span>&gt;</span>&#123;&#123;msg&#125;&#125;<span class="tag">&lt;/<span class="name">p</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;/<span class="name">div</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">body</span>&gt;</span></span><br><span class="line"></span><br><span class="line"><span class="tag">&lt;<span class="name">script</span>&gt;</span><span class="undefined"></span></span><br><span class="line"><span class="javascript">        <span class="comment">// 2.创建个vue的实例</span></span></span><br><span class="line"><span class="javascript">        <span class="comment">// 当我们导入包在浏览器中多了vue构造函数</span></span></span><br><span class="line"><span class="javascript">        <span class="comment">// 注意我们new出来的这个vm对象就是我们mvvm中的 vm调度者</span></span></span><br><span class="line"><span class="javascript">        <span class="keyword">var</span> vm = <span class="keyword">new</span> Vue(&#123;</span></span><br><span class="line"><span class="javascript">            el:<span class="string">'#app'</span>, <span class="comment">//表示当前我们new的这个vue实例要控制表面上的那区域</span></span></span><br><span class="line"><span class="javascript">            <span class="comment">// 这里了的data 就是mvvm中的m，专门用俩保存每个页面的数据</span></span></span><br><span class="line"><span class="javascript">            data: &#123; <span class="comment">//data属性中，存放的是el中的实例</span></span></span><br><span class="line"><span class="javascript">                msg: <span class="string">'欢迎学习vue'</span> <span class="comment">//通过vue提供的指令很方便的渲染到页面上，程序员不再需要手动操作dom元素</span></span></span><br><span class="line"><span class="undefined">            &#125;</span></span><br><span class="line"><span class="undefined">        &#125;)</span></span><br><span class="line"><span class="undefined">    </span><span class="tag">&lt;/<span class="name">script</span>&gt;</span></span><br><span class="line"></span><br><span class="line"><span class="tag">&lt;/<span class="name">html</span>&gt;</span></span><br></pre></td></tr></table></figure><h1 id="Vue-之-v-cloak"><a href="#Vue-之-v-cloak" class="headerlink" title="Vue 之 - v-cloak"></a>Vue 之 - <code>v-cloak</code></h1><figure class="highlight html"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line"> <span class="comment">&lt;!-- 使用 v-cloak 能解决 插值表达式闪烁问题 --&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">p</span> <span class="attr">v-cloak</span>&gt;</span>======&#123;&#123;msg&#125;&#125;-------<span class="tag">&lt;/<span class="name">p</span>&gt;</span></span><br></pre></td></tr></table></figure><h1 id="Vue-指令之v-text和v-html"><a href="#Vue-指令之v-text和v-html" class="headerlink" title="Vue 指令之v-text和v-html"></a>Vue 指令之<code>v-text</code>和<code>v-html</code></h1><figure class="highlight html"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">h4</span> <span class="attr">v-text</span>=<span class="string">"msg"</span>&gt;</span><span class="tag">&lt;/<span class="name">h4</span>&gt;</span></span><br><span class="line"><span class="comment">&lt;!-- 默认v-text 是没有闪烁问题的 --&gt;</span></span><br><span class="line"><span class="comment">&lt;!-- v-text 会覆盖元素用原本的内容，但是 插入值表达式 只会替换自己的这个占位符，不会整个元素的内容清空 --&gt;</span></span><br><span class="line"></span><br><span class="line"><span class="tag">&lt;<span class="name">div</span>&gt;</span>&#123;&#123;msg2&#125;&#125;<span class="tag">&lt;/<span class="name">div</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">div</span> <span class="attr">v-text</span>=<span class="string">"msg2"</span>&gt;</span><span class="tag">&lt;/<span class="name">div</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">div</span> <span class="attr">v-html</span>=<span class="string">"msg2"</span>&gt;</span><span class="tag">&lt;/<span class="name">div</span>&gt;</span></span><br><span class="line"><span class="comment">&lt;!-- html 插入html的效果表达式 --&gt;</span></span><br></pre></td></tr></table></figure><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br></pre></td><td class="code"><pre><span class="line">&lt;script src=<span class="string">"./lib/vue-2.4.0.js"</span>&gt;<span class="xml"><span class="tag">&lt;/<span class="name">script</span>&gt;</span></span></span><br><span class="line">&lt;script&gt;</span><br><span class="line">    <span class="keyword">var</span> vm = <span class="keyword">new</span> Vue(&#123;</span><br><span class="line">        el: <span class="string">'#id'</span>,</span><br><span class="line">        data: &#123;</span><br><span class="line">            msg: <span class="string">'我是你爸爸'</span>,</span><br><span class="line">            msg2: <span class="string">'&lt;h1&gt;哈哈，我是你爸爸，我很骄傲&lt;/h1&gt;'</span>,</span><br><span class="line">            mytitle: <span class="string">'这是一个自己定义的title'</span></span><br><span class="line">        &#125;,</span><br><span class="line">        methods: &#123; <span class="comment">//这个methos属性中定义当前vue实例所有可用的方法</span></span><br><span class="line">            show: <span class="function"><span class="keyword">function</span> (<span class="params"></span>) </span>&#123;</span><br><span class="line">                alert(<span class="string">"我是你爸爸"</span>)</span><br><span class="line">            &#125;</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;)</span><br><span class="line">&lt;<span class="regexp">/script&gt;</span></span><br></pre></td></tr></table></figure><h1 id="Vue-指令之v-bind的三种用法"><a href="#Vue-指令之v-bind的三种用法" class="headerlink" title="Vue 指令之v-bind的三种用法"></a>Vue 指令之<code>v-bind</code>的三种用法</h1><ol><li><p>直接使用指令<code>v-bind</code></p></li><li><p>使用简化指令<code>:</code></p></li><li><p>在绑定的时候，拼接绑定内容：<code>:title=&quot;btnTitle + &#39;, 这是追加的内容&#39;&quot;</code></p></li></ol><figure class="highlight html"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">&lt;!-- v-bind: 是 vue中 用来绑定属性的指令 --&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">input</span> <span class="attr">type</span>=<span class="string">"button"</span> <span class="attr">value</span>=<span class="string">"按钮"</span> <span class="attr">v-bind:title</span>=<span class="string">"mytitle + '123'"</span>&gt;</span></span><br><span class="line"><span class="comment">&lt;!-- 注意： v-bind： 指令可以被简写位:要绑定的属性 --&gt;</span></span><br><span class="line"><span class="comment">&lt;!-- v-bind中，可以写合法的js表达式 --&gt;</span></span><br><span class="line"></span><br><span class="line"><span class="comment">&lt;!-- js 代码看v-text v-html处 --&gt;</span></span><br></pre></td></tr></table></figure><h1 id="Vue-指令之v-on和跑马灯效果"><a href="#Vue-指令之v-on和跑马灯效果" class="headerlink" title="Vue 指令之v-on和跑马灯效果"></a>Vue 指令之<code>v-on</code>和<code>跑马灯效果</code></h1><h2 id="v-on"><a href="#v-on" class="headerlink" title="v-on"></a>v-on</h2><ol><li><p>直接使用指令<code>v-on</code></p></li><li><p>使用简化指令<code>@</code></p></li></ol><figure class="highlight html"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">&lt;!-- vue 中提供了 v-on ：事件绑定机制 --&gt;</span></span><br><span class="line"><span class="comment">&lt;!-- &lt;input type="button" value="按钮" :title="mytitle + '123'"&gt; --&gt;</span></span><br><span class="line"></span><br><span class="line"><span class="tag">&lt;<span class="name">input</span> <span class="attr">type</span>=<span class="string">"button"</span> <span class="attr">v-on:click</span>=<span class="string">"show"</span> <span class="attr">:value</span>=<span class="string">"mytitle + '123'"</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">input</span> <span class="attr">type</span>=<span class="string">"button"</span> <span class="attr">value</span>=<span class="string">"按钮"</span> @<span class="attr">click</span>=<span class="string">"show"</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">input</span> <span class="attr">type</span>=<span class="string">"button"</span> <span class="attr">value</span>=<span class="string">"按钮"</span> <span class="attr">v-on:mouseover</span>=<span class="string">"show"</span>&gt;</span></span><br><span class="line"></span><br><span class="line"><span class="comment">&lt;!-- js 代码看v-text v-html处 --&gt;</span></span><br></pre></td></tr></table></figure><h2 id="跑马灯效果"><a href="#跑马灯效果" class="headerlink" title="跑马灯效果"></a>跑马灯效果</h2><ol><li>HTML 结构：</li></ol><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br></pre></td><td class="code"><pre><span class="line">&lt;div id=&quot;app&quot;&gt;</span><br><span class="line"></span><br><span class="line">    &lt;p&gt;&#123;&#123;info&#125;&#125;&lt;/p&gt;</span><br><span class="line"></span><br><span class="line">    &lt;input type=&quot;button&quot; value=&quot;开启&quot; v-on:click=&quot;go&quot;&gt;</span><br><span class="line"></span><br><span class="line">    &lt;input type=&quot;button&quot; value=&quot;停止&quot; v-on:click=&quot;stop&quot;&gt;</span><br><span class="line"></span><br><span class="line">  &lt;/div&gt;</span><br></pre></td></tr></table></figure><ol start="2"><li>Vue 实例：</li></ol><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br></pre></td><td class="code"><pre><span class="line">// 创建 Vue 实例，得到 ViewModel</span><br><span class="line"></span><br><span class="line">   var vm = new Vue(&#123;</span><br><span class="line"></span><br><span class="line">     el: &apos;#app&apos;,</span><br><span class="line"></span><br><span class="line">     data: &#123;</span><br><span class="line"></span><br><span class="line">       info: &apos;猥琐发育，别浪~！&apos;,</span><br><span class="line"></span><br><span class="line">       intervalId: null</span><br><span class="line"></span><br><span class="line">     &#125;,</span><br><span class="line"></span><br><span class="line">     methods: &#123;</span><br><span class="line"></span><br><span class="line">       go() &#123;</span><br><span class="line"></span><br><span class="line">         // 如果当前有定时器在运行，则直接return</span><br><span class="line"></span><br><span class="line">         if (this.intervalId != null) &#123;</span><br><span class="line"></span><br><span class="line">           return;</span><br><span class="line"></span><br><span class="line">         &#125;</span><br><span class="line"></span><br><span class="line">         // 开始定时器</span><br><span class="line"></span><br><span class="line">         this.intervalId = setInterval(() =&gt; &#123;</span><br><span class="line"></span><br><span class="line">           this.info = this.info.substring(1) + this.info.substring(0, 1);</span><br><span class="line"></span><br><span class="line">         &#125;, 500);</span><br><span class="line"></span><br><span class="line">       &#125;,</span><br><span class="line"></span><br><span class="line">       stop() &#123;</span><br><span class="line"></span><br><span class="line">         clearInterval(this.intervalId);</span><br><span class="line"></span><br><span class="line">       &#125;</span><br><span class="line"></span><br><span class="line">     &#125;</span><br><span class="line"></span><br><span class="line">   &#125;);</span><br></pre></td></tr></table></figure><h1 id="Vue-指令之v-on的缩写和事件修饰符"><a href="#Vue-指令之v-on的缩写和事件修饰符" class="headerlink" title="Vue 指令之v-on的缩写和事件修饰符"></a>Vue 指令之<code>v-on的缩写</code>和<code>事件修饰符</code></h1><h2 id="事件修饰符："><a href="#事件修饰符：" class="headerlink" title="事件修饰符："></a>事件修饰符：</h2><ul><li><p>.stop 阻止冒泡</p></li><li><p>.prevent 阻止默认事件</p></li><li><p>.capture 添加事件侦听器时使用事件捕获模式</p></li><li><p>.self 只当事件在该元素本身（比如不是子元素）触发时触发回调</p></li><li><p>.once 事件只触发一次</p></li></ul><h1 id="Vue-指令之v-model和双向数据绑定"><a href="#Vue-指令之v-model和双向数据绑定" class="headerlink" title="Vue 指令之v-model和双向数据绑定"></a>Vue 指令之<code>v-model</code>和<code>双向数据绑定</code></h1><h1 id="简易计算器案例"><a href="#简易计算器案例" class="headerlink" title="简易计算器案例"></a>简易计算器案例</h1><ol><li>HTML 代码结构</li></ol><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br></pre></td><td class="code"><pre><span class="line">&lt;div id=&quot;app&quot;&gt;</span><br><span class="line"></span><br><span class="line">  &lt;input type=&quot;text&quot; v-model=&quot;n1&quot;&gt;</span><br><span class="line"></span><br><span class="line">  &lt;select v-model=&quot;opt&quot;&gt;</span><br><span class="line"></span><br><span class="line">    &lt;option value=&quot;0&quot;&gt;+&lt;/option&gt;</span><br><span class="line"></span><br><span class="line">    &lt;option value=&quot;1&quot;&gt;-&lt;/option&gt;</span><br><span class="line"></span><br><span class="line">    &lt;option value=&quot;2&quot;&gt;*&lt;/option&gt;</span><br><span class="line"></span><br><span class="line">    &lt;option value=&quot;3&quot;&gt;÷&lt;/option&gt;</span><br><span class="line"></span><br><span class="line">  &lt;/select&gt;</span><br><span class="line"></span><br><span class="line">  &lt;input type=&quot;text&quot; v-model=&quot;n2&quot;&gt;</span><br><span class="line"></span><br><span class="line">  &lt;input type=&quot;button&quot; value=&quot;=&quot; v-on:click=&quot;getResult&quot;&gt;</span><br><span class="line"></span><br><span class="line">  &lt;input type=&quot;text&quot; v-model=&quot;result&quot;&gt;</span><br><span class="line"></span><br><span class="line">&lt;/div&gt;</span><br></pre></td></tr></table></figure><ol start="2"><li>Vue 实例代码：</li></ol><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br></pre></td><td class="code"><pre><span class="line">// 创建 Vue 实例，得到 ViewModel</span><br><span class="line"></span><br><span class="line">   var vm = new Vue(&#123;</span><br><span class="line"></span><br><span class="line">     el: &apos;#app&apos;,</span><br><span class="line"></span><br><span class="line">     data: &#123;</span><br><span class="line"></span><br><span class="line">       n1: 0,</span><br><span class="line"></span><br><span class="line">       n2: 0,</span><br><span class="line"></span><br><span class="line">       result: 0,</span><br><span class="line"></span><br><span class="line">       opt: &apos;0&apos;</span><br><span class="line"></span><br><span class="line">     &#125;,</span><br><span class="line"></span><br><span class="line">     methods: &#123;</span><br><span class="line"></span><br><span class="line">       getResult() &#123;</span><br><span class="line"></span><br><span class="line">         switch (this.opt) &#123;</span><br><span class="line"></span><br><span class="line">           case &apos;0&apos;:</span><br><span class="line"></span><br><span class="line">             this.result = parseInt(this.n1) + parseInt(this.n2);</span><br><span class="line"></span><br><span class="line">             break;</span><br><span class="line"></span><br><span class="line">           case &apos;1&apos;:</span><br><span class="line"></span><br><span class="line">             this.result = parseInt(this.n1) - parseInt(this.n2);</span><br><span class="line"></span><br><span class="line">             break;</span><br><span class="line"></span><br><span class="line">           case &apos;2&apos;:</span><br><span class="line"></span><br><span class="line">             this.result = parseInt(this.n1) * parseInt(this.n2);</span><br><span class="line"></span><br><span class="line">             break;</span><br><span class="line"></span><br><span class="line">           case &apos;3&apos;:</span><br><span class="line"></span><br><span class="line">             this.result = parseInt(this.n1) / parseInt(this.n2);</span><br><span class="line"></span><br><span class="line">             break;</span><br><span class="line"></span><br><span class="line">         &#125;</span><br><span class="line"></span><br><span class="line">       &#125;</span><br><span class="line"></span><br><span class="line">     &#125;</span><br><span class="line"></span><br><span class="line">   &#125;);</span><br></pre></td></tr></table></figure><h1 id="在-Vue-中使用样式"><a href="#在-Vue-中使用样式" class="headerlink" title="在 Vue 中使用样式"></a>在 Vue 中使用样式</h1><h2 id="使用-class-样式"><a href="#使用-class-样式" class="headerlink" title="使用 class 样式"></a>使用 class 样式</h2><ol><li>数组</li></ol><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">&lt;h1 :class=&quot;[&apos;red&apos;, &apos;thin&apos;]&quot;&gt;这是一个邪恶的H1&lt;/h1&gt;</span><br></pre></td></tr></table></figure><ol start="2"><li>数组中使用三元表达式</li></ol><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">&lt;h1 :class=&quot;[&apos;red&apos;, &apos;thin&apos;, isactive?&apos;active&apos;:&apos;&apos;]&quot;&gt;这是一个邪恶的H1&lt;/h1&gt;</span><br></pre></td></tr></table></figure><ol start="3"><li>数组中嵌套对象</li></ol><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">&lt;h1 :class=&quot;[&apos;red&apos;, &apos;thin&apos;, &#123;&apos;active&apos;: isactive&#125;]&quot;&gt;这是一个邪恶的H1&lt;/h1&gt;</span><br></pre></td></tr></table></figure><ol start="4"><li>直接使用对象</li></ol><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">&lt;h1 :class=&quot;&#123;red:true, italic:true, active:true, thin:true&#125;&quot;&gt;这是一个邪恶的H1&lt;/h1&gt;</span><br></pre></td></tr></table></figure><h2 id="使用内联样式"><a href="#使用内联样式" class="headerlink" title="使用内联样式"></a>使用内联样式</h2><ol><li>直接在元素上通过 <code>:style</code> 的形式，书写样式对象</li></ol><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">&lt;h1 :style=&quot;&#123;color: &apos;red&apos;, &apos;font-size&apos;: &apos;40px&apos;&#125;&quot;&gt;这是一个善良的H1&lt;/h1&gt;</span><br></pre></td></tr></table></figure><ol start="2"><li>将样式对象，定义到 <code>data</code> 中，并直接引用到 <code>:style</code> 中</li></ol><ul><li>在 data 上定义样式：</li></ul><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line">data: &#123;</span><br><span class="line">        h1StyleObj: &#123; color: &apos;red&apos;, &apos;font-size&apos;: &apos;40px&apos;, &apos;font-weight&apos;: &apos;200&apos; &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><ul><li>在元素中，通过属性绑定的形式，将样式对象应用到元素中：</li></ul><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">&lt;h1 :style=&quot;h1StyleObj&quot;&gt;这是一个善良的H1&lt;/h1&gt;</span><br></pre></td></tr></table></figure><ol start="3"><li>在 <code>:style</code> 中通过数组，引用多个 <code>data</code> 上的样式对象</li></ol><ul><li>在 data 上定义样式：</li></ul><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line">data: &#123;</span><br><span class="line">        h1StyleObj: &#123; color: &apos;red&apos;, &apos;font-size&apos;: &apos;40px&apos;, &apos;font-weight&apos;: &apos;200&apos; &#125;,</span><br><span class="line">        h1StyleObj2: &#123; fontStyle: &apos;italic&apos; &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><ul><li>在元素中，通过属性绑定的形式，将样式对象应用到元素中：</li></ul><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">&lt;h1 :style=&quot;[h1StyleObj, h1StyleObj2]&quot;&gt;这是一个善良的H1&lt;/h1&gt;</span><br></pre></td></tr></table></figure><h1 id="Vue-指令之v-for和key属性"><a href="#Vue-指令之v-for和key属性" class="headerlink" title="Vue 指令之v-for和key属性"></a>Vue 指令之<code>v-for</code>和<code>key</code>属性</h1><ol><li>迭代数组</li></ol><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line">&lt;ul&gt;</span><br><span class="line">  &lt;li v-for=&quot;(item, i) in list&quot;&gt;索引：&#123;&#123;i&#125;&#125; --- 姓名：&#123;&#123;item.name&#125;&#125; --- 年龄：&#123;&#123;item.age&#125;&#125;&lt;/li&gt;</span><br><span class="line">&lt;/ul&gt;</span><br></pre></td></tr></table></figure><ol start="2"><li>迭代对象中的属性</li></ol><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line">&lt;!-- 循环遍历对象身上的属性 --&gt;</span><br><span class="line"></span><br><span class="line">   &lt;div v-for=&quot;(val, key, i) in userInfo&quot;&gt;&#123;&#123;val&#125;&#125; --- &#123;&#123;key&#125;&#125; --- &#123;&#123;i&#125;&#125;&lt;/div&gt;</span><br></pre></td></tr></table></figure><ol start="3"><li>迭代数字</li></ol><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">&lt;p v-for=&quot;i in 10&quot;&gt;这是第 &#123;&#123;i&#125;&#125; 个P标签&lt;/p&gt;</span><br></pre></td></tr></table></figure><blockquote><p>2.2.0+ 的版本里，<strong>当在组件中使用</strong> v-for 时，key 现在是必须的。</p></blockquote><p>当 Vue.js 用 v-for 正在更新已渲染过的元素列表时，它默认用 “<strong>就地复用</strong>” 策略。如果数据项的顺序被改变，Vue 将<strong>不是移动 DOM 元素来匹配数据项的顺序</strong>， 而是<strong>简单复用此处每个元素</strong>，并且确保它在特定索引下显示已被渲染过的每个元素。</p><p>为了给 Vue 一个提示，<strong>以便它能跟踪每个节点的身份，从而重用和重新排序现有元素</strong>，你需要为每项提供一个唯一 key 属性。</p><h1 id="Vue-指令之v-if和v-show"><a href="#Vue-指令之v-if和v-show" class="headerlink" title="Vue 指令之v-if和v-show"></a>Vue 指令之<code>v-if</code>和<code>v-show</code></h1><blockquote><p>一般来说，v-if 有更高的切换消耗而 v-show 有更高的初始渲染消耗。因此，如果需要频繁切换 v-show 较好，如果在运行时条件不大可能改变 v-if 较好。</p></blockquote><h1 id="品牌管理案例"><a href="#品牌管理案例" class="headerlink" title="品牌管理案例"></a>品牌管理案例</h1><h2 id="添加新品牌"><a href="#添加新品牌" class="headerlink" title="添加新品牌"></a>添加新品牌</h2><h2 id="删除品牌"><a href="#删除品牌" class="headerlink" title="删除品牌"></a>删除品牌</h2><h2 id="根据条件筛选品牌"><a href="#根据条件筛选品牌" class="headerlink" title="根据条件筛选品牌"></a>根据条件筛选品牌</h2><ol><li>1.x 版本中的 filterBy 指令，在 2.x 中已经被废除：</li></ol><p><a href="https://v1-cn.vuejs.org/api/#filterBy" target="_blank" rel="noopener">filterBy - 指令</a></p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br></pre></td><td class="code"><pre><span class="line">&lt;tr v-for=&quot;item in list | filterBy searchName in &apos;name&apos;&quot;&gt;</span><br><span class="line"></span><br><span class="line">  &lt;td&gt;&#123;&#123;item.id&#125;&#125;&lt;/td&gt;</span><br><span class="line"></span><br><span class="line">  &lt;td&gt;&#123;&#123;item.name&#125;&#125;&lt;/td&gt;</span><br><span class="line"></span><br><span class="line">  &lt;td&gt;&#123;&#123;item.ctime&#125;&#125;&lt;/td&gt;</span><br><span class="line"></span><br><span class="line">  &lt;td&gt;</span><br><span class="line"></span><br><span class="line">    &lt;a href=&quot;#&quot; @click.prevent=&quot;del(item.id)&quot;&gt;删除&lt;/a&gt;</span><br><span class="line"></span><br><span class="line">  &lt;/td&gt;</span><br><span class="line"></span><br><span class="line">&lt;/tr&gt;</span><br></pre></td></tr></table></figure><ol start="2"><li>在 2.x 版本中<a href="https://cn.vuejs.org/v2/guide/list.html#显示过滤-排序结果" target="_blank" rel="noopener">手动实现筛选的方式</a>：</li></ol><ul><li>筛选框绑定到 VM 实例中的 <code>searchName</code> 属性：</li></ul><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line">&lt;hr&gt; 输入筛选名称：</span><br><span class="line"></span><br><span class="line">&lt;input type=&quot;text&quot; v-model=&quot;searchName&quot;&gt;</span><br></pre></td></tr></table></figure><ul><li>在使用 <code>v-for</code> 指令循环每一行数据的时候，不再直接 <code>item in list</code>，而是 <code>in</code> 一个 过滤的 methods 方法，同时，把过滤条件<code>searchName</code>传递进去：</li></ul><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br></pre></td><td class="code"><pre><span class="line">&lt;tbody&gt;</span><br><span class="line"></span><br><span class="line">      &lt;tr v-for=&quot;item in search(searchName)&quot;&gt;</span><br><span class="line"></span><br><span class="line">        &lt;td&gt;&#123;&#123;item.id&#125;&#125;&lt;/td&gt;</span><br><span class="line"></span><br><span class="line">        &lt;td&gt;&#123;&#123;item.name&#125;&#125;&lt;/td&gt;</span><br><span class="line"></span><br><span class="line">        &lt;td&gt;&#123;&#123;item.ctime&#125;&#125;&lt;/td&gt;</span><br><span class="line"></span><br><span class="line">        &lt;td&gt;</span><br><span class="line"></span><br><span class="line">          &lt;a href=&quot;#&quot; @click.prevent=&quot;del(item.id)&quot;&gt;删除&lt;/a&gt;</span><br><span class="line"></span><br><span class="line">        &lt;/td&gt;</span><br><span class="line"></span><br><span class="line">      &lt;/tr&gt;</span><br><span class="line"></span><br><span class="line">    &lt;/tbody&gt;</span><br></pre></td></tr></table></figure><ul><li><code>search</code> 过滤方法中，使用 数组的 <code>filter</code> 方法进行过滤：</li></ul><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br></pre></td><td class="code"><pre><span class="line">search(name) &#123;</span><br><span class="line"></span><br><span class="line">  return this.list.filter(x =&gt; &#123;</span><br><span class="line"></span><br><span class="line">    return x.name.indexOf(name) != -1;</span><br><span class="line"></span><br><span class="line">  &#125;);</span><br><span class="line"></span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h1 id="Vue-调试工具vue-devtools的安装步骤和使用"><a href="#Vue-调试工具vue-devtools的安装步骤和使用" class="headerlink" title="Vue 调试工具vue-devtools的安装步骤和使用"></a>Vue 调试工具<code>vue-devtools</code>的安装步骤和使用</h1><p><a href="https://chrome.google.com/webstore/detail/vuejs-devtools/nhdogjmejiglipccpnnnanhbledajbpd?hl=zh-CN" target="_blank" rel="noopener">Vue.js devtools - 翻墙安装方式 - 推荐</a></p><h1 id="过滤器"><a href="#过滤器" class="headerlink" title="过滤器"></a>过滤器</h1><p>概念：Vue.js 允许你自定义过滤器，<strong>可被用作一些常见的文本格式化</strong>。过滤器可以用在两个地方：<strong>mustache 插值和 v-bind 表达式</strong>。过滤器应该被添加在 JavaScript 表达式的尾部，由“管道”符指示；</p><h2 id="私有过滤器"><a href="#私有过滤器" class="headerlink" title="私有过滤器"></a>私有过滤器</h2><ol><li>HTML 元素：</li></ol><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">&lt;td&gt;&#123;&#123;item.ctime | dataFormat(&apos;yyyy-mm-dd&apos;)&#125;&#125;&lt;/td&gt;</span><br></pre></td></tr></table></figure><ol start="2"><li>私有 <code>filters</code> 定义方式：</li></ol><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br></pre></td><td class="code"><pre><span class="line">filters: &#123; // 私有局部过滤器，只能在 当前 VM 对象所控制的 View 区域进行使用</span><br><span class="line"></span><br><span class="line">    dataFormat(input, pattern = &quot;&quot;) &#123; // 在参数列表中 通过 pattern=&quot;&quot; 来指定形参默认值，防止报错</span><br><span class="line"></span><br><span class="line">      var dt = new Date(input);</span><br><span class="line"></span><br><span class="line">      // 获取年月日</span><br><span class="line"></span><br><span class="line">      var y = dt.getFullYear();</span><br><span class="line"></span><br><span class="line">      var m = (dt.getMonth() + 1).toString().padStart(2, &apos;0&apos;);</span><br><span class="line"></span><br><span class="line">      var d = dt.getDate().toString().padStart(2, &apos;0&apos;);</span><br><span class="line"></span><br><span class="line"></span><br><span class="line"></span><br><span class="line">      // 如果 传递进来的字符串类型，转为小写之后，等于 yyyy-mm-dd，那么就返回 年-月-日</span><br><span class="line"></span><br><span class="line">      // 否则，就返回  年-月-日 时：分：秒</span><br><span class="line"></span><br><span class="line">      if (pattern.toLowerCase() === &apos;yyyy-mm-dd&apos;) &#123;</span><br><span class="line"></span><br><span class="line">        return `$&#123;y&#125;-$&#123;m&#125;-$&#123;d&#125;`;</span><br><span class="line"></span><br><span class="line">      &#125; else &#123;</span><br><span class="line"></span><br><span class="line">        // 获取时分秒</span><br><span class="line"></span><br><span class="line">        var hh = dt.getHours().toString().padStart(2, &apos;0&apos;);</span><br><span class="line"></span><br><span class="line">        var mm = dt.getMinutes().toString().padStart(2, &apos;0&apos;);</span><br><span class="line"></span><br><span class="line">        var ss = dt.getSeconds().toString().padStart(2, &apos;0&apos;);</span><br><span class="line"></span><br><span class="line"></span><br><span class="line"></span><br><span class="line">        return `$&#123;y&#125;-$&#123;m&#125;-$&#123;d&#125; $&#123;hh&#125;:$&#123;mm&#125;:$&#123;ss&#125;`;</span><br><span class="line"></span><br><span class="line">      &#125;</span><br><span class="line"></span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">  &#125;</span><br></pre></td></tr></table></figure><blockquote><p>使用 ES6 中的字符串新方法 String.prototype.padStart(maxLength, fillString=’’) 或 String.prototype.padEnd(maxLength, fillString=’’)来填充字符串；</p></blockquote><h2 id="全局过滤器"><a href="#全局过滤器" class="headerlink" title="全局过滤器"></a>全局过滤器</h2><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br></pre></td><td class="code"><pre><span class="line">// 定义一个全局过滤器</span><br><span class="line"></span><br><span class="line">Vue.filter(&apos;dataFormat&apos;, function (input, pattern = &apos;&apos;) &#123;</span><br><span class="line"></span><br><span class="line">  var dt = new Date(input);</span><br><span class="line"></span><br><span class="line">  // 获取年月日</span><br><span class="line"></span><br><span class="line">  var y = dt.getFullYear();</span><br><span class="line"></span><br><span class="line">  var m = (dt.getMonth() + 1).toString().padStart(2, &apos;0&apos;);</span><br><span class="line"></span><br><span class="line">  var d = dt.getDate().toString().padStart(2, &apos;0&apos;);</span><br><span class="line"></span><br><span class="line"></span><br><span class="line"></span><br><span class="line">  // 如果 传递进来的字符串类型，转为小写之后，等于 yyyy-mm-dd，那么就返回 年-月-日</span><br><span class="line"></span><br><span class="line">  // 否则，就返回  年-月-日 时：分：秒</span><br><span class="line"></span><br><span class="line">  if (pattern.toLowerCase() === &apos;yyyy-mm-dd&apos;) &#123;</span><br><span class="line"></span><br><span class="line">    return `$&#123;y&#125;-$&#123;m&#125;-$&#123;d&#125;`;</span><br><span class="line"></span><br><span class="line">  &#125; else &#123;</span><br><span class="line"></span><br><span class="line">    // 获取时分秒</span><br><span class="line"></span><br><span class="line">    var hh = dt.getHours().toString().padStart(2, &apos;0&apos;);</span><br><span class="line"></span><br><span class="line">    var mm = dt.getMinutes().toString().padStart(2, &apos;0&apos;);</span><br><span class="line"></span><br><span class="line">    var ss = dt.getSeconds().toString().padStart(2, &apos;0&apos;);</span><br><span class="line"></span><br><span class="line"></span><br><span class="line"></span><br><span class="line">    return `$&#123;y&#125;-$&#123;m&#125;-$&#123;d&#125; $&#123;hh&#125;:$&#123;mm&#125;:$&#123;ss&#125;`;</span><br><span class="line"></span><br><span class="line">  &#125;</span><br><span class="line"></span><br><span class="line">&#125;);</span><br></pre></td></tr></table></figure><blockquote><p>注意：当有局部和全局两个名称相同的过滤器时候，会以就近原则进行调用，即：局部过滤器优先于全局过滤器被调用！</p></blockquote><h1 id="键盘修饰符以及自定义键盘修饰符"><a href="#键盘修饰符以及自定义键盘修饰符" class="headerlink" title="键盘修饰符以及自定义键盘修饰符"></a>键盘修饰符以及自定义键盘修饰符</h1><h2 id="1-x-中自定义键盘修饰符【了解即可】"><a href="#1-x-中自定义键盘修饰符【了解即可】" class="headerlink" title="1.x 中自定义键盘修饰符【了解即可】"></a>1.x 中自定义键盘修饰符【了解即可】</h2><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">Vue.directive(&apos;on&apos;).keyCodes.f2 = 113;</span><br></pre></td></tr></table></figure><h2 id="2-x-中自定义键盘修饰符"><a href="#2-x-中自定义键盘修饰符" class="headerlink" title="2.x 中自定义键盘修饰符"></a><a href="https://cn.vuejs.org/v2/guide/events.html#键值修饰符" target="_blank" rel="noopener">2.x 中自定义键盘修饰符</a></h2><ol><li>通过<code>Vue.config.keyCodes.名称 = 按键值</code>来自定义案件修饰符的别名：</li></ol><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">Vue.config.keyCodes.f2 = 113;</span><br></pre></td></tr></table></figure><ol start="2"><li>使用自定义的按键修饰符：</li></ol><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">&lt;input type=&quot;text&quot; v-model=&quot;name&quot; @keyup.f2=&quot;add&quot;&gt;</span><br></pre></td></tr></table></figure><h1 id="自定义指令"><a href="#自定义指令" class="headerlink" title="自定义指令"></a><a href="https://cn.vuejs.org/v2/guide/custom-directive.html" target="_blank" rel="noopener">自定义指令</a></h1><ol><li>自定义全局和局部的 自定义指令：</li></ol><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br></pre></td><td class="code"><pre><span class="line">// 自定义全局指令 v-focus，为绑定的元素自动获取焦点：</span><br><span class="line"></span><br><span class="line">Vue.directive(&apos;focus&apos;, &#123;</span><br><span class="line"></span><br><span class="line">  inserted: function (el) &#123; // inserted 表示被绑定元素插入父节点时调用</span><br><span class="line"></span><br><span class="line">    el.focus();</span><br><span class="line"></span><br><span class="line">  &#125;</span><br><span class="line"></span><br><span class="line">&#125;);</span><br><span class="line"></span><br><span class="line"></span><br><span class="line"></span><br><span class="line">// 自定义局部指令 v-color 和 v-font-weight，为绑定的元素设置指定的字体颜色 和 字体粗细：</span><br><span class="line"></span><br><span class="line">  directives: &#123;</span><br><span class="line"></span><br><span class="line">    color: &#123; // 为元素设置指定的字体颜色</span><br><span class="line"></span><br><span class="line">      bind(el, binding) &#123;</span><br><span class="line"></span><br><span class="line">        el.style.color = binding.value;</span><br><span class="line"></span><br><span class="line">      &#125;</span><br><span class="line"></span><br><span class="line">    &#125;,</span><br><span class="line"></span><br><span class="line">    &apos;font-weight&apos;: function (el, binding2) &#123; // 自定义指令的简写形式，等同于定义了 bind 和 update 两个钩子函数</span><br><span class="line"></span><br><span class="line">      el.style.fontWeight = binding2.value;</span><br><span class="line"></span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">  &#125;</span><br></pre></td></tr></table></figure><ol start="2"><li>自定义指令的使用方式：</li></ol><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">&lt;input type=&quot;text&quot; v-model=&quot;searchName&quot; v-focus v-color=&quot;&apos;red&apos;&quot; v-font-weight=&quot;900&quot;&gt;</span><br></pre></td></tr></table></figure><h1 id="Vue-1-x-中-自定义元素指令【已废弃-了解即可】"><a href="#Vue-1-x-中-自定义元素指令【已废弃-了解即可】" class="headerlink" title="Vue 1.x 中 自定义元素指令【已废弃,了解即可】"></a>Vue 1.x 中 自定义元素指令【已废弃,了解即可】</h1><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line">Vue.elementDirective(&apos;red-color&apos;, &#123;</span><br><span class="line">  bind: function () &#123;</span><br><span class="line">    this.el.style.color = &apos;red&apos;;</span><br><span class="line">  &#125;</span><br><span class="line">&#125;);</span><br></pre></td></tr></table></figure><p>使用方式：</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">&lt;red-color&gt;1232&lt;/red-color&gt;</span><br></pre></td></tr></table></figure><h1 id="相关文章"><a href="#相关文章" class="headerlink" title="相关文章"></a>相关文章</h1><ol><li><a href="https://v1-cn.vuejs.org/" target="_blank" rel="noopener">vue.js 1.x 文档</a></li><li><a href="https://cn.vuejs.org/" target="_blank" rel="noopener">vue.js 2.x 文档</a></li><li><a href="http://www.css88.com/archives/7715" target="_blank" rel="noopener">String.prototype.padStart(maxLength, fillString)</a></li><li><a href="http://www.cnblogs.com/wuhua1/p/6686237.html" target="_blank" rel="noopener">js 里面的键盘事件对应的键码</a></li><li><a href="http://www.cnblogs.com/kidney/p/6052935.html" target="_blank" rel="noopener">Vue.js 双向绑定的实现原理</a></li></ol>]]></content>
      
      
      <categories>
          
          <category> Vue </category>
          
      </categories>
      
      
        <tags>
            
            <tag> Vue笔记 </tag>
            
        </tags>
      
    </entry>
    
    <entry>
      <title>nodejs 多人社区登录注册案例</title>
      <link href="/2018/10/06/node-blog/"/>
      <url>/2018/10/06/node-blog/</url>
      
        <content type="html"><![CDATA[<link rel="stylesheet" class="aplayer-secondary-style-marker" href="/assets/css/APlayer.min.css"><script src="/assets/js/APlayer.min.js" class="aplayer-secondary-script-marker"></script><h1 id="案例效果"><a href="#案例效果" class="headerlink" title="案例效果"></a>案例效果</h1><p><img src="/nodeblog/nodeblog1.png" alt="node-blog"><br><img src="/nodeblog/nodeblog2.png" alt="node-blog"><br><img src="/nodeblog/nodeblog3.png" alt="node-blog"><br><img src="/nodeblog/nodeblog4.png" alt="node-blog"></p><h1 id="项目地址"><a href="#项目地址" class="headerlink" title="项目地址"></a>项目地址</h1><p><a href="https://github.com/YHF7/node-blog" target="_blank" rel="noopener">node-blog</a></p><h1 id="一、目录结构"><a href="#一、目录结构" class="headerlink" title="一、目录结构"></a>一、目录结构</h1><ol><li>app.js 入口</li><li>controllers</li><li>models 数据模型存储(数据库)<ul><li>user.js 数据库主体</li></ul></li><li>node_modules 第三方包</li><li>package.json 包描述文件</li><li>package-lock.json 第三方包版本锁定文件（npm 5 以后才有）</li><li>public 公共静态资源</li><li>README.md 项目说明文件</li><li>routes 路由业务分类（如果业务比较多，代码量大，最好把路由按照业务分类存储）<ul><li>未使用路由库 单独使用 router.js 简单一点把所有大路由都放在里面</li></ul></li><li>页面（views 视觉存储目录）<ul><li>主页 index.html</li><li>登陆页 login.html</li><li>注册页 register.html</li><li>_partials 固定页面的存放<ul><li>固定底部 footer.html</li><li>固定导航栏 settings-nav.html</li><li>固定头部 header.htms</li></ul></li><li>_layouts 模板页存放<ul><li>模板布局 home.htmls</li></ul></li><li>settings 个人设置存放<ul><li>修改密码 admin.html</li><li>个人简介 profile.html</li></ul></li><li>topic 博客创建与显示<ul><li>创建博客 new.html</li><li>显示博客 show.html</li></ul></li></ul></li></ol><h1 id="二、模板页面"><a href="#二、模板页面" class="headerlink" title="二、模板页面"></a>二、模板页面</h1><ul><li><a href="https://aui.github.io/art-template/zh-cn/docs/syntax.html#%E5%AD%90%E6%A8%A1%E6%9D%BF" title="子模板" target="_blank" rel="noopener">art-template 子模板</a></li><li><a href="https://aui.github.io/art-template/zh-cn/docs/syntax.html#%E6%A8%A1%E6%9D%BF%E7%BB%A7%E6%89%BF" title="模板继承" target="_blank" rel="noopener">art-template 模板继承</a></li></ul><h1 id="三、路由设计"><a href="#三、路由设计" class="headerlink" title="三、路由设计"></a>三、路由设计</h1><table><thead><tr><th>路径</th><th>方法</th><th>get 参数</th><th>post 参数</th><th>是否需要登陆权限</th><th>备注</th></tr></thead><tbody><tr><td>/</td><td>GET</td><td></td><td></td><td></td><td>渲染首页</td></tr><tr><td>/register</td><td>GET</td><td></td><td></td><td></td><td>渲染注册页面</td></tr><tr><td>/register</td><td>POST</td><td></td><td>email、nickname、password</td><td></td><td>处理注册请求</td></tr><tr><td>/login</td><td>GET</td><td></td><td></td><td></td><td>渲染登录页面</td></tr><tr><td>/login</td><td>POST</td><td></td><td>email、password</td><td></td><td>处理登录请求</td></tr><tr><td>/logout</td><td>GET</td><td></td><td></td><td></td><td>处理退出请求</td></tr></tbody></table><h1 id="四、模型设计"><a href="#四、模型设计" class="headerlink" title="四、模型设计"></a>四、模型设计</h1><h1 id="五、功能实现"><a href="#五、功能实现" class="headerlink" title="五、功能实现"></a>五、功能实现</h1><h1 id="六、书写步骤"><a href="#六、书写步骤" class="headerlink" title="六、书写步骤"></a>六、书写步骤</h1><ol><li>创建目录结构</li><li>整合静态页面-模板页<ul><li>include</li><li>block</li><li>extend</li></ul></li><li>设计用户登录、退出、注册的路由</li><li>用户注册<ul><li>先处理好客户页面的内容（表单控件的 name、收集表单数据、发起请求）</li><li>服务端<ul><li>获取客户端表单请求的数据</li><li>操作数据库<ul><li>如果有错，发送 500 告诉客户端服务错了</li><li>其他的根据你的业务发送不同的响应数据</li></ul></li></ul></li></ul></li><li>用户登录</li><li>用户退出</li><li>补充配置中间件<ul><li>错误处理</li></ul></li></ol><h1 id="七、插件安装使用"><a href="#七、插件安装使用" class="headerlink" title="七、插件安装使用"></a>七、插件安装使用</h1><ul><li>模块<ul><li>express 前端 web 模块</li><li>path 路径核心模块</li><li>art-template 模版引擎（express-art-template 的依赖所以必须安装）</li><li>express-art-template 模版引擎 (视觉效果模板 子模板 模板继承)</li><li>body-parser 中间件(解析表单 post 请求体)</li><li>mongoose 数据库链接</li><li>bootstrap css 页面开发场景</li><li>jquery js 框架</li><li>blueimp-md5 密码加密</li><li>npm install express-session</li></ul></li></ul><h2 id="模块安装与应用"><a href="#模块安装与应用" class="headerlink" title="模块安装与应用"></a>模块安装与应用</h2><h3 id="express-前端开发框架"><a href="#express-前端开发框架" class="headerlink" title="express 前端开发框架"></a>express 前端开发框架</h3><ol><li>安装</li></ol><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">$ npm init -y //添加json初始化文件</span><br><span class="line">$ npm install express --save//安装express</span><br></pre></td></tr></table></figure><ol start="2"><li>引包</li></ol><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">const</span> express = <span class="built_in">require</span>(<span class="string">'express'</span>);</span><br></pre></td></tr></table></figure><ol start="3"><li>创建服务</li></ol><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">const</span> app = express();</span><br></pre></td></tr></table></figure><ol start="4"><li>使用</li></ol><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line">app.get(<span class="string">'/'</span>, <span class="function"><span class="keyword">function</span> (<span class="params">req, res</span>) </span>&#123;</span><br><span class="line">  req.send(<span class="string">'index.html'</span>)</span><br><span class="line">&#125;)</span><br></pre></td></tr></table></figure><h2 id="art-template-模版引擎-配置在-express-中"><a href="#art-template-模版引擎-配置在-express-中" class="headerlink" title="art-template 模版引擎 (配置在 express 中)"></a>art-template 模版引擎 (配置在 express 中)</h2><h3 id="js-使用"><a href="#js-使用" class="headerlink" title="js 使用"></a>js 使用</h3><ol><li>安装</li></ol><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">$ npm install --save art-template//express-art-templat依赖了art-template所以可以不用记载但是要安装</span><br><span class="line">$ npm install --save express-art-template</span><br></pre></td></tr></table></figure><ol start="2"><li>配置</li></ol><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">app.engine(<span class="string">'art'</span>,<span class="built_in">require</span>(<span class="string">'express-art-template'</span>))<span class="comment">//art 可以替换成其他的标示 html 等</span></span><br></pre></td></tr></table></figure><ol start="3"><li>使用</li></ol><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><span class="line">app.get(<span class="string">'/'</span>,<span class="function"><span class="keyword">function</span> (<span class="params">req,res</span>) </span>&#123;</span><br><span class="line">    <span class="comment">// 在 Express 中使用模板引擎有更好的方式：res.render('文件名， &#123;模板对象&#125;)</span></span><br><span class="line">  <span class="comment">// 可以自己尝试去看 art-template 官方文档：如何让 art-template 结合 Express 来使用</span></span><br><span class="line">    res.render(<span class="string">'index.html'</span>,&#123;</span><br><span class="line">        title: <span class="string">'hello world'</span></span><br><span class="line">    &#125;);</span><br><span class="line">&#125;);</span><br></pre></td></tr></table></figure><ol start="4"><li>如果希望修改默认的 views 视图渲染存储目录， 可以如下修改</li></ol><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">// 第一个参数 views 不能写错</span></span><br><span class="line">app.set(<span class="string">'views'</span>, 目录路径)</span><br></pre></td></tr></table></figure><h3 id="视图页面输出-views"><a href="#视图页面输出-views" class="headerlink" title="视图页面输出 views"></a>视图页面输出 views</h3><ol><li>安装模版引擎<ul><li>art-template</li><li>express-art-template</li></ul></li><li>编写布局页面 layout.html</li></ol><figure class="highlight html"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">&lt;!DOCTYPE html&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">html</span> <span class="attr">lang</span>=<span class="string">"en"</span>&gt;</span></span><br><span class="line"></span><br><span class="line"><span class="tag">&lt;<span class="name">head</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">meta</span> <span class="attr">charset</span>=<span class="string">"UTF-8"</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">meta</span> <span class="attr">name</span>=<span class="string">"viewport"</span> <span class="attr">content</span>=<span class="string">"width=device-width, initial-scale=1.0"</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">meta</span> <span class="attr">http-equiv</span>=<span class="string">"X-UA-Compatible"</span> <span class="attr">content</span>=<span class="string">"ie=edge"</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">title</span>&gt;</span>Document<span class="tag">&lt;/<span class="name">title</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">link</span> <span class="attr">rel</span>=<span class="string">"stylesheet"</span> <span class="attr">href</span>=<span class="string">"/node_modules/bootstrap/dist/css/bootstrap.css"</span>&gt;</span></span><br><span class="line">    <span class="comment">&lt;!-- 留坑给页面添加css样式等链接 --&gt;</span></span><br><span class="line">    &#123;&#123; block 'head' &#125;&#125;&#123;&#123; /block &#125;&#125;</span><br><span class="line"><span class="tag">&lt;/<span class="name">head</span>&gt;</span></span><br><span class="line"></span><br><span class="line"><span class="tag">&lt;<span class="name">body</span>&gt;</span></span><br><span class="line">    <span class="comment">&lt;!-- body-固定头部-头部重用 --&gt;</span></span><br><span class="line">    &#123;&#123; include './header.html' &#125;&#125;</span><br><span class="line"></span><br><span class="line">    <span class="comment">&lt;!-- body-内容模块-可修改 --&gt;</span></span><br><span class="line">    &#123;&#123; block 'content' &#125;&#125;</span><br><span class="line">        <span class="tag">&lt;<span class="name">h1</span>&gt;</span>默认内容<span class="tag">&lt;/<span class="name">h1</span>&gt;</span></span><br><span class="line">    &#123;&#123; /block &#125;&#125;</span><br><span class="line"></span><br><span class="line">    <span class="comment">&lt;!-- body-固定底部-底部重用 --&gt;</span></span><br><span class="line">    &#123;&#123; include './footer.html' &#125;&#125;</span><br><span class="line"><span class="tag">&lt;/<span class="name">body</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">script</span> <span class="attr">src</span>=<span class="string">"../node_modules/jquery/dist/jquery.js"</span>&gt;</span><span class="undefined"></span><span class="tag">&lt;/<span class="name">script</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">script</span> <span class="attr">src</span>=<span class="string">"../node_modules/bootstrap/dist/js/bootstrap.js"</span>&gt;</span><span class="undefined"></span><span class="tag">&lt;/<span class="name">script</span>&gt;</span></span><br><span class="line"><span class="comment">&lt;!-- 留坑给页面添加js等 --&gt;</span></span><br><span class="line">&#123;&#123; block 'script' &#125;&#125;&#123;&#123; /block &#125;&#125;</span><br><span class="line"><span class="tag">&lt;/<span class="name">html</span>&gt;</span></span><br></pre></td></tr></table></figure><ol start="3"><li>调用布局模块 编写页面</li></ol><figure class="highlight html"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">&lt;!-- 继承布局模块页 --&gt;</span></span><br><span class="line">&#123;&#123;extend './layout.html'&#125;&#125;</span><br><span class="line"></span><br><span class="line"><span class="comment">&lt;!-- 添加css样式-通过坑 head  --&gt;</span></span><br><span class="line">&#123;&#123;block 'head'&#125;&#125;</span><br><span class="line"><span class="tag">&lt;<span class="name">style</span>&gt;</span><span class="undefined"></span></span><br><span class="line"><span class="undefined">    body &#123;</span></span><br><span class="line"><span class="undefined">        background-color: skyblue;</span></span><br><span class="line"><span class="undefined">    &#125;</span></span><br><span class="line"><span class="undefined">    h1 &#123;</span></span><br><span class="line"><span class="undefined">        color: red;</span></span><br><span class="line"><span class="undefined">    &#125;</span></span><br><span class="line"><span class="undefined"></span><span class="tag">&lt;/<span class="name">style</span>&gt;</span></span><br><span class="line">&#123;&#123;/block&#125;&#125;</span><br><span class="line"></span><br><span class="line"><span class="comment">&lt;!-- 修改页面内容 --&gt;</span></span><br><span class="line">&#123;&#123;block 'content'&#125;&#125;</span><br><span class="line"><span class="tag">&lt;<span class="name">div</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">h1</span>&gt;</span>index.html填坑<span class="tag">&lt;/<span class="name">h1</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">div</span>&gt;</span></span><br><span class="line">&#123;&#123;/block&#125;&#125;</span><br><span class="line"></span><br><span class="line"><span class="comment">&lt;!-- 添加js 通过script --&gt;</span></span><br><span class="line">&#123;&#123;block 'script'&#125;&#125;</span><br><span class="line"><span class="tag">&lt;<span class="name">script</span>&gt;</span><span class="undefined"></span></span><br><span class="line"><span class="javascript">    <span class="built_in">window</span>.alert(<span class="string">'index 页面自己的js 脚本'</span>)</span></span><br><span class="line"><span class="undefined"></span><span class="tag">&lt;/<span class="name">script</span>&gt;</span></span><br><span class="line">&#123;&#123;/block&#125;&#125;</span><br></pre></td></tr></table></figure><ol start="4"><li>留坑内容<ul><li>中带‘’号的内容的自定义的名，最好是取一看就明白的</li><li>坑不止可以留一个，可以留很多个</li></ul></li></ol><h2 id="body-parser-中间件-解析表单-post-请求体"><a href="#body-parser-中间件-解析表单-post-请求体" class="headerlink" title="body-parser 中间件(解析表单 post 请求体)"></a>body-parser 中间件(解析表单 post 请求体)</h2><ol><li>安装</li></ol><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">$ npm install --save body-parser</span><br></pre></td></tr></table></figure><ol start="2"><li>引包</li></ol><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">const</span> bodyParser = <span class="built_in">require</span>(<span class="string">'body-parser'</span>);</span><br></pre></td></tr></table></figure><ol start="3"><li>配置</li></ol><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">// parse application/x-www-form-urlencoded 解析application</span></span><br><span class="line">app.use(bodyParser.urlencoded(&#123; <span class="attr">extended</span>: <span class="literal">false</span> &#125;));</span><br><span class="line"><span class="comment">// parse application/json 解析</span></span><br><span class="line">app.use(bodyParser.json());</span><br></pre></td></tr></table></figure><ol start="4"><li>使用</li></ol><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br></pre></td><td class="code"><pre><span class="line">app.post(<span class="string">'/post'</span>,<span class="function"><span class="keyword">function</span> (<span class="params">req,res</span>) </span>&#123;</span><br><span class="line">    <span class="keyword">var</span> myDate = <span class="keyword">new</span> <span class="built_in">Date</span>();</span><br><span class="line">    <span class="keyword">var</span> year = myDate.getFullYear(); <span class="comment">//获取完整的年份(4位,1970-????)</span></span><br><span class="line">    <span class="keyword">var</span> month = myDate.getMonth() + <span class="number">1</span>; <span class="comment">//获取当前月份(0-11,0代表1月)</span></span><br><span class="line">    <span class="keyword">var</span> date = myDate.getDate(); <span class="comment">//获取当前日(1-31)</span></span><br><span class="line">    <span class="keyword">let</span> comment = req.body;</span><br><span class="line">    comment.dateTime = year + <span class="string">"-"</span> + month + <span class="string">"-"</span> + date;</span><br><span class="line">    comments.unshift(comment);</span><br><span class="line">    res.redirect(<span class="string">'/'</span>);</span><br><span class="line">&#125;)</span><br></pre></td></tr></table></figure><h2 id="mongoose-（mongodb-数据库链接插件）"><a href="#mongoose-（mongodb-数据库链接插件）" class="headerlink" title="mongoose （mongodb 数据库链接插件）"></a>mongoose （mongodb 数据库链接插件）</h2><ol><li>安装</li></ol><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">$ npm i -S mongoose</span><br></pre></td></tr></table></figure><ol start="2"><li>引包</li></ol><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">const</span> mongoose = <span class="built_in">require</span>(<span class="string">'mongoose'</span>);</span><br></pre></td></tr></table></figure><ol start="3"><li>配置</li></ol><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">// 连接数据库</span></span><br><span class="line">mongoose.connect(<span class="string">'mongodb://localhost/test'</span>);</span><br></pre></td></tr></table></figure><ol start="4"><li>使用</li></ol><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">// 创建一个模型</span></span><br><span class="line"><span class="comment">// 就是在设计数据库</span></span><br><span class="line"><span class="comment">// MongoDB 是动态的，非常灵活，只需要在代码中设计你的数据库就可以了</span></span><br><span class="line"><span class="comment">// mongoose 这个包就可以让你的设计编写过程变的非常的简单</span></span><br><span class="line"><span class="keyword">const</span> Cat = mongoose.model(<span class="string">'Cat'</span>, &#123;</span><br><span class="line">    name: <span class="built_in">String</span></span><br><span class="line">&#125;);</span><br><span class="line"></span><br><span class="line"><span class="comment">// 实例化一个 cat</span></span><br><span class="line"><span class="keyword">const</span> kitty = <span class="keyword">new</span> Cat(&#123;</span><br><span class="line">    name: <span class="string">'yhf'</span></span><br><span class="line">&#125;);</span><br><span class="line"><span class="comment">// 持久化保存 kitty 实例</span></span><br><span class="line">kitty.save().then(<span class="function"><span class="params">()</span> =&gt;</span> <span class="built_in">console</span>.log(<span class="string">'meow'</span>));</span><br></pre></td></tr></table></figure><h2 id="bootstrap-css-样式前端架构"><a href="#bootstrap-css-样式前端架构" class="headerlink" title="bootstrap css 样式前端架构"></a>bootstrap css 样式前端架构</h2><ol><li>安装 （3 版居多）</li></ol><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">$ npm install bootstrap@3</span><br></pre></td></tr></table></figure><ol start="2"><li>使用 （在视图的布局页面引入就好）<br>css： <link rel="stylesheet" href="/node_modules/bootstrap/dist/css/bootstrap.css"><br>js： <script src="../node_modules/bootstrap/dist/js/bootstrap.js"></script></li></ol><h2 id="jquery-js-框架"><a href="#jquery-js-框架" class="headerlink" title="jquery js 框架"></a>jquery js 框架</h2><ol><li>安装</li></ol><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">$ npm i jquery</span><br></pre></td></tr></table></figure><ol start="2"><li>使用 (在视图的布局页面引入就好)<script src="../node_modules/jquery/dist/jquery.js"></script></li></ol><h2 id="blueimp-md5-密码加密"><a href="#blueimp-md5-密码加密" class="headerlink" title="blueimp-md5 密码加密"></a>blueimp-md5 密码加密</h2><ol><li>安装</li></ol><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">$ npm install blueimp-md5</span><br></pre></td></tr></table></figure><ol start="2"><li>引包</li></ol><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">const</span> md5 = <span class="built_in">require</span>(<span class="string">'blueimp-md5'</span>);</span><br></pre></td></tr></table></figure><ol start="3"><li>调用</li></ol><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">// md() 在里面填充数据就好 多加几个是多重加密，三个为三重加密</span></span><br><span class="line">body.password = md5(md5(md5(body.password)))</span><br></pre></td></tr></table></figure><h2 id="express-session-数据存储"><a href="#express-session-数据存储" class="headerlink" title="express-session 数据存储"></a>express-session 数据存储</h2><ol><li>安装</li></ol><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">$ npm install express-session</span><br></pre></td></tr></table></figure><ol start="2"><li>配置</li></ol><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">// 引包</span></span><br><span class="line"><span class="keyword">const</span> session = <span class="built_in">require</span>(<span class="string">'express-session'</span>)</span><br><span class="line"></span><br><span class="line"><span class="comment">// 在 Express 这个框架中，默认不支持 Session 和 Cookie</span></span><br><span class="line"><span class="comment">// 但是我们可以使用第三方中间件：express-session 来解决</span></span><br><span class="line"><span class="comment">// 1. npm install express-session</span></span><br><span class="line"><span class="comment">// 2. 配置 (一定要在 app.use(router) 之前)</span></span><br><span class="line"><span class="comment">// 3. 使用</span></span><br><span class="line"><span class="comment">//    当把这个插件配置好之后，我们就可以通过 req.session 来发访问和设置 Session 成员了</span></span><br><span class="line"><span class="comment">//    添加 Session 数据：req.session.foo = 'bar'</span></span><br><span class="line"><span class="comment">//    访问 Session 数据：req.session.foo</span></span><br><span class="line"></span><br><span class="line">app.use(session(&#123;</span><br><span class="line">    <span class="comment">// 配置加密字符串，它会在原有加密基础之上和这个字符串拼起来去加密</span></span><br><span class="line">    <span class="comment">// 目的是为了增加安全性，防止客户端恶意伪造</span></span><br><span class="line">    secret: <span class="string">'itcast'</span>,</span><br><span class="line">    resave: <span class="literal">false</span>,</span><br><span class="line">    saveUninitialized: <span class="literal">false</span> <span class="comment">// 无论你是否使用 Session ，我都默认直接给你分配一把钥匙</span></span><br><span class="line">&#125;))</span><br></pre></td></tr></table></figure><ol start="3"><li>使用</li></ol><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">// 用户存在，登录成功，通过 Session 记录登录状态</span></span><br><span class="line">req.session.user = user;</span><br><span class="line"></span><br><span class="line"><span class="comment">// 用户退出，退出成功，通过 Session 清除登录状态</span></span><br><span class="line">req.session.user = <span class="literal">null</span>;</span><br></pre></td></tr></table></figure>]]></content>
      
      
      <categories>
          
          <category> Nodejs </category>
          
      </categories>
      
      
        <tags>
            
            <tag> Nodejs案例 </tag>
            
        </tags>
      
    </entry>
    
    <entry>
      <title>nodejs 案例2</title>
      <link href="/2018/10/04/2018-10-04/"/>
      <url>/2018/10/04/2018-10-04/</url>
      
        <content type="html"><![CDATA[<link rel="stylesheet" class="aplayer-secondary-style-marker" href="/assets/css/APlayer.min.css"><script src="/assets/js/APlayer.min.js" class="aplayer-secondary-script-marker"></script><h1 id="nodejs小案例"><a href="#nodejs小案例" class="headerlink" title="nodejs小案例"></a>nodejs小案例</h1><ul><li>YHF管理系统 升级优化<ul><li>实现增删改查</li><li>模块化</li></ul></li></ul><h1 id="YHF管理系统"><a href="#YHF管理系统" class="headerlink" title="YHF管理系统"></a>YHF管理系统</h1><h2 id="效果图"><a href="#效果图" class="headerlink" title="效果图"></a>效果图</h2><p><img src="/yhfgl/yhfgl1.png" alt="YHF管理系统"><br><img src="/yhfgl/yhfgl2.png" alt="YHF管理系统"><br><img src="/yhfgl/yhfgl3.png" alt="YHF管理系统"></p><h2 id="起步"><a href="#起步" class="headerlink" title="起步"></a>起步</h2><ul><li>初始化</li><li>模板处理</li><li>案例说明</li></ul><h2 id="路由设计"><a href="#路由设计" class="headerlink" title="路由设计"></a>路由设计</h2><table><thead><tr><th>请求方法</th><th>请求路径</th><th>get 参数</th><th>post 参数</th><th>备注</th></tr></thead><tbody><tr><td>GET</td><td>/yhf</td><td></td><td></td><td>渲染首页</td></tr><tr><td>GET</td><td>/yhf/new</td><td></td><td></td><td>渲染添加系统成员页面</td></tr><tr><td>POST</td><td>/yhf/new</td><td></td><td>name、age、gender、hobbies、admin</td><td>处理添加系统成员请求</td></tr><tr><td>GET</td><td>/yhf/edit</td><td>_id</td><td></td><td>渲染编辑页面</td></tr><tr><td>POST</td><td>/yhf/edit</td><td></td><td>id、name、age、gender、hobbies、admin</td><td>处理编辑请求</td></tr><tr><td>GET</td><td>/yhf/delete</td><td>_id</td><td></td><td>处理删除请求</td></tr><tr><td></td><td></td><td></td><td></td></tr></tbody></table><h2 id="案例说明"><a href="#案例说明" class="headerlink" title="案例说明"></a>案例说明</h2><ul><li>1.页面的数据<ul><li>用 mongdb 装数据</li><li>挂载路由</li><li>app.get app.post 路由</li><li>app.listen 开启服务端口</li><li>node_modules \ public 页面数据共享</li></ul></li><li>2.页面显示<ul><li>router.js 和 students.js 控制路由与业务逻辑(模块化)</li><li>Express 为 Response 相应对象提供了一个方法：render</li><li>render 方法默认是不可以使用，但是如果配置了模板引擎就可以使用了</li><li>res.render(‘html模板名’, {模板数据})</li><li>第一个参数不能写路径，默认会去项目中的 views 目录查找该模板文件</li><li>也就是说 Express 有一个约定：开发人员把所有的视图文件都放到 views 目录中</li><li>express 模版引擎 express-art-template使用 res.render(‘文件名， {模板对象})</li></ul></li><li>3.数据传输<ul><li>body-parser 中间件 解析表单 POST 请求体 req.body 得到数据</li></ul></li><li>4.使用的外部插件<ul><li>mongoose</li><li>express</li><li>express-art-template</li><li>body-parse</li></ul></li><li>5.项目地址<ul><li><a href="https://github.com/YHF7/Node/nodejs2/glxt" target="_blank" rel="noopener">项目地址</a></li></ul></li><li>6.开发配置<ul><li>mac os 10.13.3</li><li>npm 6.4.1</li><li>node 10.10.0</li><li>Bootstrap v3</li></ul></li><li>7.案例功能<ul><li>添加成员</li><li>更新成员信息</li><li>删除成员</li><li>查看成员</li></ul></li><li>7.案例查看/使用<ul><li>sudo git clone <a href="https://github.com/YHF7/Node.git" target="_blank" rel="noopener">https://github.com/YHF7/Node.git</a></li><li>cd mypro/nodejs2/glxt</li><li>node app.js</li></ul></li></ul><h1 id="插件安装配置"><a href="#插件安装配置" class="headerlink" title="插件安装配置"></a>插件安装配置</h1><h2 id="express-前端开发框架"><a href="#express-前端开发框架" class="headerlink" title="express 前端开发框架"></a>express 前端开发框架</h2><p>1.安装<br><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">npm init -y //添加json初始化文件</span><br><span class="line">npm install express --save//安装express</span><br></pre></td></tr></table></figure></p><p>2.引包<br><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">const</span> express = <span class="built_in">require</span>(<span class="string">'express'</span>);</span><br></pre></td></tr></table></figure></p><p>3.创建服务<br><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">const</span> app = express();</span><br></pre></td></tr></table></figure></p><p>4.使用<br><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line">app.get(<span class="string">'/'</span>, <span class="function"><span class="keyword">function</span> (<span class="params">req, res</span>) </span>&#123;</span><br><span class="line">  req.send(<span class="string">'index.html'</span>)</span><br><span class="line">&#125;)</span><br></pre></td></tr></table></figure></p><h2 id="art-template-模版引擎-配置在express中"><a href="#art-template-模版引擎-配置在express中" class="headerlink" title="art-template 模版引擎 (配置在express中)"></a>art-template 模版引擎 (配置在express中)</h2><h3 id="安装使用"><a href="#安装使用" class="headerlink" title="安装使用"></a>安装使用</h3><p>1.安装<br><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">npm install --save art-template//express-art-templat依赖了art-template所以可以不用记载但是要安装</span><br><span class="line">npm install --save express-art-template</span><br></pre></td></tr></table></figure></p><p>2.配置<br><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">app.engine(<span class="string">'art'</span>,<span class="built_in">require</span>(<span class="string">'express-art-template'</span>))<span class="comment">//art 可以替换成其他的标示 html 等</span></span><br></pre></td></tr></table></figure></p><p>3.使用<br><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><span class="line">app.get(<span class="string">'/'</span>,<span class="function"><span class="keyword">function</span> (<span class="params">req,res</span>) </span>&#123;</span><br><span class="line">    <span class="comment">// 在 Express 中使用模板引擎有更好的方式：res.render('文件名， &#123;模板对象&#125;)</span></span><br><span class="line">  <span class="comment">// 可以自己尝试去看 art-template 官方文档：如何让 art-template 结合 Express 来使用</span></span><br><span class="line">    res.render(<span class="string">'index.html'</span>,&#123;</span><br><span class="line">        title: <span class="string">'hello world'</span></span><br><span class="line">    &#125;);</span><br><span class="line">&#125;);</span><br></pre></td></tr></table></figure></p><p>4.如果希望修改默认的 views 视图渲染存储目录， 可以如下修改<br><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">// 第一个参数 views 不能写错</span></span><br><span class="line">app.set(<span class="string">'views'</span>, 目录路径)</span><br></pre></td></tr></table></figure></p><h2 id="body-parser-中间件-解析表单-post-请求体"><a href="#body-parser-中间件-解析表单-post-请求体" class="headerlink" title="body-parser 中间件(解析表单 post 请求体)"></a>body-parser 中间件(解析表单 post 请求体)</h2><p>1.安装<br><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">npm install --save body-parse</span><br></pre></td></tr></table></figure></p><p>2.引包<br><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">const</span> bodyParser = <span class="built_in">require</span>(<span class="string">'body-parser);</span></span><br></pre></td></tr></table></figure></p><p>3.配置<br><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">// parse application/x-www-form-urlencoded 解析application</span></span><br><span class="line">app.use(bodyParser.urlencoded(&#123; <span class="attr">extended</span>: <span class="literal">false</span> &#125;));</span><br><span class="line"><span class="comment">// parse application/json 解析</span></span><br><span class="line">app.use(bodyParser.json());</span><br></pre></td></tr></table></figure></p><p>4.使用<br><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br></pre></td><td class="code"><pre><span class="line">app.post(<span class="string">'/post'</span>,<span class="function"><span class="keyword">function</span> (<span class="params">req,res</span>) </span>&#123;</span><br><span class="line">    <span class="keyword">var</span> myDate = <span class="keyword">new</span> <span class="built_in">Date</span>();</span><br><span class="line">    <span class="keyword">var</span> year = myDate.getFullYear(); <span class="comment">//获取完整的年份(4位,1970-????)</span></span><br><span class="line">    <span class="keyword">var</span> month = myDate.getMonth() + <span class="number">1</span>; <span class="comment">//获取当前月份(0-11,0代表1月)</span></span><br><span class="line">    <span class="keyword">var</span> date = myDate.getDate(); <span class="comment">//获取当前日(1-31)</span></span><br><span class="line">    <span class="keyword">let</span> comment = req.body;</span><br><span class="line">    comment.dateTime = year + <span class="string">"-"</span> + month + <span class="string">"-"</span> + date;</span><br><span class="line">    comments.unshift(comment);</span><br><span class="line">    res.redirect(<span class="string">'/'</span>);</span><br><span class="line">&#125;)</span><br></pre></td></tr></table></figure></p><h1 id="mongoose-（mongodb数据库链接插件）"><a href="#mongoose-（mongodb数据库链接插件）" class="headerlink" title="mongoose （mongodb数据库链接插件）"></a>mongoose （mongodb数据库链接插件）</h1><p>1.安装<br><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">npm i -S mongoose</span><br></pre></td></tr></table></figure></p><p>2.引包<br><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">const</span> mongoose = <span class="built_in">require</span>(<span class="string">'mongoose'</span>);</span><br></pre></td></tr></table></figure></p><p>3.配置<br>// 连接数据库<br><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">mongoose.connect(<span class="string">'mongodb://localhost/test'</span>);</span><br></pre></td></tr></table></figure></p><p>// 创建一个模型<br>// 就是在设计数据库<br>// MongoDB 是动态的，非常灵活，只需要在代码中设计你的数据库就可以了<br>// mongoose 这个包就可以让你的设计编写过程变的非常的简单<br>4.使用<br><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">const</span> Cat = mongoose.model(<span class="string">'Cat'</span>, &#123;</span><br><span class="line">    name: <span class="built_in">String</span></span><br><span class="line">&#125;);</span><br><span class="line"></span><br><span class="line"><span class="comment">// 实例化一个 cat</span></span><br><span class="line"><span class="keyword">const</span> kitty = <span class="keyword">new</span> Cat(&#123;</span><br><span class="line">    name: <span class="string">'yhf'</span></span><br><span class="line">&#125;);</span><br><span class="line"><span class="comment">// 持久化保存 kitty 实例</span></span><br><span class="line">kitty.save().then(<span class="function"><span class="params">()</span> =&gt;</span> <span class="built_in">console</span>.log(<span class="string">'meow'</span>));</span><br></pre></td></tr></table></figure></p><h1 id="数据库安装开启"><a href="#数据库安装开启" class="headerlink" title="数据库安装开启"></a>数据库安装开启</h1><p>安装<br><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">sudo brew install mongodb</span><br></pre></td></tr></table></figure></p><p>开启<br><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">sudo mongod</span><br></pre></td></tr></table></figure></p><p>链接(默认链接本地服务)<br><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">mongo</span><br></pre></td></tr></table></figure></p><p>退出<br><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line"><span class="built_in">exit</span></span><br></pre></td></tr></table></figure></p><p>基本命令:<br><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line">1. show dbs 查看显示所以数据库</span><br><span class="line">2. db 查看当前链接打数据库</span><br><span class="line">3. use 数据库名称  切换到指定打数据库（如果没有会新建）</span><br><span class="line">4. 插入数据</span><br><span class="line">5. show collections 查看数据集合 </span><br><span class="line">6. db.students.find() 查看库中所以的数据</span><br></pre></td></tr></table></figure></p>]]></content>
      
      
      <categories>
          
          <category> Nodejs </category>
          
      </categories>
      
      
        <tags>
            
            <tag> Nodejs案例 </tag>
            
        </tags>
      
    </entry>
    
    <entry>
      <title>nodejs 案例1</title>
      <link href="/2018/10/02/2018-10-02/"/>
      <url>/2018/10/02/2018-10-02/</url>
      
        <content type="html"><![CDATA[<link rel="stylesheet" class="aplayer-secondary-style-marker" href="/assets/css/APlayer.min.css"><script src="/assets/js/APlayer.min.js" class="aplayer-secondary-script-marker"></script><h1 id="nodejs小案例"><a href="#nodejs小案例" class="headerlink" title="nodejs小案例"></a>nodejs小案例</h1><ul><li>留言页<ul><li>实现添加数据</li></ul></li><li>学生管理系统<ul><li>实现增删改查</li><li>模块化</li></ul></li></ul><h1 id="留言页"><a href="#留言页" class="headerlink" title="留言页"></a>留言页</h1><h2 id="效果图"><a href="#效果图" class="headerlink" title="效果图"></a>效果图</h2><p><img src="/nodeimgs/fbly1.png" alt="发表留言"><br><img src="/nodeimgs/fbly2.png" alt="发表留言"></p><h2 id="案例说明"><a href="#案例说明" class="headerlink" title="案例说明"></a>案例说明</h2><ul><li>1.页面的数据<ul><li>未链接数据库所以，用comments数组代替</li><li>app.get app.post 路由</li><li>app.listen 开启服务端口</li></ul></li><li>2.页面显示<ul><li>Express 为 Response 相应对象提供了一个方法：render</li><li>render 方法默认是不可以使用，但是如果配置了模板引擎就可以使用了</li><li>res.render(‘html模板名’, {模板数据})</li><li>第一个参数不能写路径，默认会去项目中的 views 目录查找该模板文件</li><li>也就是说 Express 有一个约定：开发人员把所有的视图文件都放到 views 目录中</li><li>express 模版引擎 express-art-template使用 res.render(‘文件名， {模板对象})</li></ul></li><li>3.数据传输<ul><li>body-parser 中间件 解析表单 POST 请求体 req.body 得到数据</li></ul></li><li>4.使用的外部插件<ul><li>express</li><li>express-art-template</li><li>body-parse</li></ul></li><li>5.项目地址<ul><li><a href="https://github.com/YHF7/Node/nodejs2/feedback-express" target="_blank" rel="noopener">项目地址</a></li></ul></li><li>6.开发配置<ul><li>mac os 10.13.3</li><li>npm 6.4.1</li><li>node 10.10.0</li><li>Bootstrap v3</li></ul></li><li>7.案例查看/使用<ul><li>sudo git clone <a href="https://github.com/YHF7/Node.git" target="_blank" rel="noopener">https://github.com/YHF7/Node.git</a></li><li>cd mypro/nodejs2/feedback-express/</li><li>node app.js</li></ul></li><li>8.具体功能<ul><li>增加数据</li><li>查看数据</li></ul></li></ul><h1 id="学生管理系统"><a href="#学生管理系统" class="headerlink" title="学生管理系统"></a>学生管理系统</h1><h2 id="效果图-1"><a href="#效果图-1" class="headerlink" title="效果图"></a>效果图</h2><p><img src="/nodeimgs/xsgl1.png" alt="学生管理系统"><br><img src="/nodeimgs/xsgl2.png" alt="学生管理系统"></p><h2 id="起步"><a href="#起步" class="headerlink" title="起步"></a>起步</h2><ul><li>初始化</li><li>模板处理</li><li>案例说明</li></ul><h2 id="路由设计"><a href="#路由设计" class="headerlink" title="路由设计"></a>路由设计</h2><table><thead><tr><th>请求方法</th><th>请求路径</th><th>get 参数</th><th>post 参数</th><th>备注</th></tr></thead><tbody><tr><td>GET</td><td>/studens</td><td></td><td></td><td>渲染首页</td></tr><tr><td>GET</td><td>/students/new</td><td></td><td></td><td>渲染添加学生页面</td></tr><tr><td>POST</td><td>/studens/new</td><td></td><td>name、age、gender、hobbies</td><td>处理添加学生请求</td></tr><tr><td>GET</td><td>/students/edit</td><td>id</td><td></td><td>渲染编辑页面</td></tr><tr><td>POST</td><td>/studens/edit</td><td></td><td>id、name、age、gender、hobbies</td><td>处理编辑请求</td></tr><tr><td>GET</td><td>/students/delete</td><td>id</td><td></td><td>处理删除请求</td></tr><tr><td></td><td></td><td></td><td></td></tr></tbody></table><h2 id="案例说明-1"><a href="#案例说明-1" class="headerlink" title="案例说明"></a>案例说明</h2><ul><li>1.页面的数据<ul><li>用 db.json 装数据</li><li>挂载路由</li><li>app.get app.post 路由</li><li>app.listen 开启服务端口</li><li>node_modules \ public 页面数据共享</li></ul></li><li>2.页面显示<ul><li>router.js 和 students.js 控制路由与业务逻辑(模块化)</li><li>Express 为 Response 相应对象提供了一个方法：render</li><li>render 方法默认是不可以使用，但是如果配置了模板引擎就可以使用了</li><li>res.render(‘html模板名’, {模板数据})</li><li>第一个参数不能写路径，默认会去项目中的 views 目录查找该模板文件</li><li>也就是说 Express 有一个约定：开发人员把所有的视图文件都放到 views 目录中</li><li>express 模版引擎 express-art-template使用 res.render(‘文件名， {模板对象})</li></ul></li><li>3.数据传输<ul><li>body-parser 中间件 解析表单 POST 请求体 req.body 得到数据</li></ul></li><li>4.使用的外部插件<ul><li>express</li><li>express-art-template</li><li>body-parse</li></ul></li><li>5.项目地址<ul><li><a href="https://github.com/YHF7/Node/nodejs2/crud-express" target="_blank" rel="noopener">项目地址</a></li></ul></li><li>6.开发配置<ul><li>mac os 10.13.3</li><li>npm 6.4.1</li><li>node 10.10.0</li><li>Bootstrap v3</li></ul></li><li>7.案例查看/使用<ul><li>sudo git clone <a href="https://github.com/YHF7/Node.git" target="_blank" rel="noopener">https://github.com/YHF7/Node.git</a></li><li>cd mypro/nodejs2/crud-express/</li><li>node app.js</li></ul></li><li>8.具体功能<ul><li>增加数据</li><li>修改数据</li><li>查看数据</li><li>删除数据</li></ul></li></ul><h1 id="插件安装配置"><a href="#插件安装配置" class="headerlink" title="插件安装配置"></a>插件安装配置</h1><h2 id="express-前端开发框架"><a href="#express-前端开发框架" class="headerlink" title="express 前端开发框架"></a>express 前端开发框架</h2><p>1.安装<br><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">npm init -y //添加json初始化文件</span><br><span class="line">npm install express --save//安装express</span><br></pre></td></tr></table></figure></p><p>2.引包<br><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">const</span> express = <span class="built_in">require</span>(<span class="string">'express'</span>);</span><br></pre></td></tr></table></figure></p><p>3.创建服务<br><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">const</span> app = express();</span><br></pre></td></tr></table></figure></p><p>4.使用<br><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line">app.get(<span class="string">'/'</span>, <span class="function"><span class="keyword">function</span> (<span class="params">req, res</span>) </span>&#123;</span><br><span class="line">  req.send(<span class="string">'index.html'</span>)</span><br><span class="line">&#125;)</span><br></pre></td></tr></table></figure></p><h2 id="art-template-模版引擎-配置在express中"><a href="#art-template-模版引擎-配置在express中" class="headerlink" title="art-template 模版引擎 (配置在express中)"></a>art-template 模版引擎 (配置在express中)</h2><h3 id="安装使用"><a href="#安装使用" class="headerlink" title="安装使用"></a>安装使用</h3><p>1.安装<br><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">npm install --save art-template//express-art-templat依赖了art-template所以可以不用记载但是要安装</span><br><span class="line">npm install --save express-art-template</span><br></pre></td></tr></table></figure></p><p>2.配置<br><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">app.engine(<span class="string">'art'</span>,<span class="built_in">require</span>(<span class="string">'express-art-template'</span>))<span class="comment">//art 可以替换成其他的标示 html 等</span></span><br></pre></td></tr></table></figure></p><p>3.使用<br><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><span class="line">app.get(<span class="string">'/'</span>,<span class="function"><span class="keyword">function</span> (<span class="params">req,res</span>) </span>&#123;</span><br><span class="line">    <span class="comment">// 在 Express 中使用模板引擎有更好的方式：res.render('文件名， &#123;模板对象&#125;)</span></span><br><span class="line">  <span class="comment">// 可以自己尝试去看 art-template 官方文档：如何让 art-template 结合 Express 来使用</span></span><br><span class="line">    res.render(<span class="string">'index.html'</span>,&#123;</span><br><span class="line">        title: <span class="string">'hello world'</span></span><br><span class="line">    &#125;);</span><br><span class="line">&#125;);</span><br></pre></td></tr></table></figure></p><p>4.如果希望修改默认的 views 视图渲染存储目录， 可以如下修改<br><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">// 第一个参数 views 不能写错</span></span><br><span class="line">app.set(<span class="string">'views'</span>, 目录路径)</span><br></pre></td></tr></table></figure></p><h2 id="body-parser-中间件-解析表单-post-请求体"><a href="#body-parser-中间件-解析表单-post-请求体" class="headerlink" title="body-parser 中间件(解析表单 post 请求体)"></a>body-parser 中间件(解析表单 post 请求体)</h2><p>1.安装<br><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">npm install --save body-parse</span><br></pre></td></tr></table></figure></p><p>2.引包<br><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">const</span> bodyParser = <span class="built_in">require</span>(<span class="string">'body-parser);</span></span><br></pre></td></tr></table></figure></p><p>3.配置<br><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">// parse application/x-www-form-urlencoded 解析application</span></span><br><span class="line">app.use(bodyParser.urlencoded(&#123; <span class="attr">extended</span>: <span class="literal">false</span> &#125;));</span><br><span class="line"><span class="comment">// parse application/json 解析</span></span><br><span class="line">app.use(bodyParser.json());</span><br></pre></td></tr></table></figure></p><p>4.使用<br><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br></pre></td><td class="code"><pre><span class="line">app.post(<span class="string">'/post'</span>,<span class="function"><span class="keyword">function</span> (<span class="params">req,res</span>) </span>&#123;</span><br><span class="line">    <span class="keyword">var</span> myDate = <span class="keyword">new</span> <span class="built_in">Date</span>();</span><br><span class="line">    <span class="keyword">var</span> year = myDate.getFullYear(); <span class="comment">//获取完整的年份(4位,1970-????)</span></span><br><span class="line">    <span class="keyword">var</span> month = myDate.getMonth() + <span class="number">1</span>; <span class="comment">//获取当前月份(0-11,0代表1月)</span></span><br><span class="line">    <span class="keyword">var</span> date = myDate.getDate(); <span class="comment">//获取当前日(1-31)</span></span><br><span class="line">    <span class="keyword">let</span> comment = req.body;</span><br><span class="line">    comment.dateTime = year + <span class="string">"-"</span> + month + <span class="string">"-"</span> + date;</span><br><span class="line">    comments.unshift(comment);</span><br><span class="line">    res.redirect(<span class="string">'/'</span>);</span><br><span class="line">&#125;)</span><br></pre></td></tr></table></figure></p>]]></content>
      
      
      <categories>
          
          <category> Nodejs </category>
          
      </categories>
      
      
        <tags>
            
            <tag> Nodejs案例 </tag>
            
        </tags>
      
    </entry>
    
    <entry>
      <title>nodejs第二套 笔记</title>
      <link href="/2018/09/29/nodejs2/"/>
      <url>/2018/09/29/nodejs2/</url>
      
        <content type="html"><![CDATA[<link rel="stylesheet" class="aplayer-secondary-style-marker" href="/assets/css/APlayer.min.css"><script src="/assets/js/APlayer.min.js" class="aplayer-secondary-script-marker"></script><h1 id="一、day1"><a href="#一、day1" class="headerlink" title="一、day1"></a>一、day1</h1><h2 id="总结"><a href="#总结" class="headerlink" title="总结"></a>总结</h2><ul><li>Node.js 是什么<ul><li>JavaScript 运行时</li><li>既不是语言，也不是框架，它是一个平台</li></ul></li><li><p>Node.js 中的 JavaScript</p><ul><li>没有 BOM、DOM</li><li>EcmaScript 基本的 JavaScript 语言部分</li><li>在 Node 中为 JavaScript 提供了一些服务器级别的 API<ul><li>文件操作的能力</li><li>http 服务的能力</li></ul></li></ul></li><li><p>Node 中的 JavaScript</p><ul><li>EcmaScript<ul><li>变量</li><li>方法</li><li>数据类型</li><li>内置对象</li><li>Array</li><li>Object</li><li>Date</li><li>Math</li></ul></li><li>模块系统<ul><li>在 Node 中没有全局作用域的概念</li><li>在 Node 中，只能通过 require 方法来加载执行多个 JavaScript 脚本文件</li><li>require 加载只能是执行其中的代码，文件与文件之间由于是模块作用域，所以不会有污染的问题<ul><li>模块完全是封闭的</li><li>外部无法访问内部</li><li>内部也无法访问外部</li></ul></li><li>模块作用域固然带来了一些好处，可以加载执行多个文件，可以完全避免变量命名冲突污染的问题</li><li>但是某些情况下，模块与模块是需要进行通信的</li><li>在每个模块中，都提供了一个对象：<code>exports</code></li><li>该对象默认是一个空对象</li><li>你要做的就是把需要被外部访问使用的成员手动的挂载到 <code>exports</code> 接口对象中</li><li>然后谁来 <code>require</code> 这个模块，谁就可以得到模块内部的 <code>exports</code> 接口对象</li><li>还有其它的一些规则，具体后面讲，以及如何在项目中去使用这种编程方式，会通过后面的案例来处理</li></ul></li><li>核心模块<ul><li>核心模块是由 Node 提供的一个个的具名的模块，它们都有自己特殊的名称标识，例如<ul><li>fs 文件操作模块</li><li>http 网络服务构建模块</li><li>os 操作系统信息模块</li><li>path 路径处理模块</li><li>。。。。</li></ul></li><li>所有核心模块在使用的时候都必须手动的先使用 <code>require</code> 方法来加载，然后才可以使用，例如：<ul><li><code>var fs = require(&#39;fs&#39;)</code></li></ul></li></ul></li></ul></li><li><p>http</p><ul><li>require</li><li>端口号<ul><li>ip 地址定位计算机</li><li>端口号定位具体的应用程序</li></ul></li><li>Content-Type<ul><li>服务器最好把每次响应的数据是什么内容类型都告诉客户端，而且要正确的告诉</li><li>不同的资源对应的 Content-Type 是不一样，具体参照：<a href="http://tool.oschina.net/commons" target="_blank" rel="noopener">http://tool.oschina.net/commons</a></li><li>对于文本类型的数据，最好都加上编码，目的是为了防止中文解析乱码问题</li></ul></li><li>通过网络发送文件<ul><li>发送的并不是文件，本质上来讲发送是文件的内容</li><li>当浏览器收到服务器响应内容之后，就会根据你的 Content-Type 进行对应的解析处理</li></ul></li></ul></li><li><p>模块系统</p></li><li>Node 中的其它的核心模块</li><li>做一个小管理系统：<ul><li>CRUD</li></ul></li><li>Express Web 开发框架<ul><li><code>npm install express</code></li></ul></li></ul><h1 id="二、day2"><a href="#二、day2" class="headerlink" title="二、day2"></a>二、day2</h1><h2 id="代码风格"><a href="#代码风格" class="headerlink" title="代码风格"></a>代码风格</h2><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">var</span> foo = <span class="string">'bar'</span></span><br><span class="line"><span class="keyword">var</span> foo =<span class="string">'bar'</span></span><br><span class="line"><span class="keyword">var</span> foo= <span class="string">'bar'</span></span><br><span class="line"><span class="keyword">var</span> foo = <span class="string">"bar"</span></span><br><span class="line"></span><br><span class="line"><span class="keyword">if</span> (<span class="literal">true</span>) &#123;</span><br><span class="line">  <span class="built_in">console</span>.log(<span class="string">'hello'</span>) </span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="keyword">if</span> (<span class="literal">true</span>) &#123;</span><br><span class="line">    <span class="built_in">console</span>.log(<span class="string">'hello'</span>) </span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="keyword">if</span> (<span class="literal">true</span> )&#123;</span><br><span class="line">      <span class="built_in">console</span>.log(<span class="string">'hello'</span>) </span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>为了约定大家的代码风格，所以在社区中诞生了一些比较规范的代码风格规范：dnsajkndkjsabnjkdnjksandjknsajkdnjkasnjkdnjksandjknsajkdnjksajkdnas</p><ul><li><a href="https://standardjs.com/" target="_blank" rel="noopener">JavaScript Standard Style</a></li><li>Airbnb JavaScript Style</li></ul><h2 id="总结-1"><a href="#总结-1" class="headerlink" title="总结"></a>总结</h2><ul><li>代码风格</li><li>无分号<ul><li><code>(</code></li><li><code>[</code></li><li>`</li><li>最好前面补分号，避免一些问题</li><li>《编写可维护的 JavaScript》</li><li>不仅是功能，还要写的漂亮</li></ul></li><li><p>服务端渲染</p><ul><li>说白了就是在服务端使用模板引擎</li><li>模板引擎最早诞生于服务端，后来才发展到了前端</li></ul></li><li><p>服务端渲染和客户端渲染的区别</p><ul><li>客户端渲染不利于 SEO 搜索引擎优化</li><li>服务端渲染是可以被爬虫抓取到的，客户端异步渲染是很难被爬虫抓取到的</li><li>所以你会发现真正的网站既不是纯异步也不是纯服务端渲染出来的</li><li>而是两者结合来做的</li><li>例如京东的商品列表就采用的是服务端渲染，目的了为了 SEO 搜索引擎优化</li><li>而它的商品评论列表为了用户体验，而且也不需要 SEO 优化，所以采用是客户端渲染</li></ul></li></ul><h1 id="三、day3"><a href="#三、day3" class="headerlink" title="三、day3"></a>三、day3</h1><h2 id="知识点"><a href="#知识点" class="headerlink" title="知识点"></a>知识点</h2><ul><li>增删改查</li><li>登陆</li><li>注册</li><li>头像<ul><li>服务端图片</li><li>水印</li><li>图片水印</li></ul></li><li>找回密码</li><li><p>密码修改</p></li><li><p>模块系统</p><ul><li>核心模块</li><li>第三方模块</li><li>自己写的模块</li><li>加载规则以及加载机制</li><li>循环加载</li></ul></li><li>npm</li><li>package.json</li><li>Express<ul><li>第三方 Web 开发框架</li><li>高度封装了 http 模块</li><li>更加专注于业务，而非底层细节</li><li>知其所以然</li></ul></li><li>增删改查<ul><li>使用文件来保存数据（锻炼异步编码）</li></ul></li><li>MongoDB<ul><li>（所有方法都封装好了）</li></ul></li></ul><h2 id="复习"><a href="#复习" class="headerlink" title="复习"></a>复习</h2><ul><li><p>网站开发模型</p><ul><li>黑盒子、哑巴</li><li>写代码让它变得更智能</li><li>按照你设计好的套路供用户使用</li></ul></li><li><p>在 Node 中使用 art-template 模板引擎</p><ul><li>安装</li><li>加载</li><li>template.render()</li></ul></li><li>客户端渲染和服务端渲染的区别<ul><li>最少两次请求，发起 ajax 在客户端使用模板引擎渲染</li><li>客户端拿到的就是服务端已经渲染好的</li></ul></li><li>处理留言本案例首页数据列表渲染展示</li><li>处理留言本案例发表留言功能<ul><li>路径</li><li>设计好的请求路径</li><li>$GET 直接或查询字符串数据</li><li>Node 中需要咱们自己动手来解析<ul><li>url.parse()</li></ul></li><li>/pinglun?name=jack&amp;message=hello</li><li>split(‘?’)</li><li>name=jack&amp;message=hello</li><li>split(‘&amp;’)</li><li>name=jack message=hello</li><li>forEach()</li><li>name=jack.split(‘=’)</li><li>0 key</li><li>1 value</li></ul></li><li>掌握如何解析请求路径中的查询字符串<ul><li>url.parse()</li></ul></li><li>如何在 Node 中实现服务器重定向<ul><li>header(‘location’)<ul><li>301 永久重定向 浏览器会记住<ul><li>a.com b.com</li><li>a 浏览器不会请求 a 了</li><li>直接去跳到 b 了</li></ul></li><li>302 临时重定向 浏览器不记忆<ul><li>a.com b.com</li><li>a.com 还会请求 a</li><li>a 告诉浏览器你往 b</li></ul></li></ul></li></ul></li><li>Node 中的 Console（REPL）使用</li></ul><h2 id="上午总结"><a href="#上午总结" class="headerlink" title="上午总结"></a>上午总结</h2><ul><li>jQuery 的 each 和 原生的 JavaScript 方法 forEach<ul><li>EcmaScript 5 提供的<ul><li>不兼容 IE 8</li></ul></li><li>jQuery 的 each 由 jQuery 这个第三方库提供<ul><li>jQuery 2 以下的版本是兼容 IE 8 的</li><li>它的 each 方法主要用来遍历 jQuery 实例对象（伪数组）</li><li>同时它也可以作为低版本浏览器中 forEach 替代品</li><li>jQuery 的实例对象不能使用 forEach 方法，如果想要使用必须转为数组才可以使用</li><li><code>[].slice.call(jQuery实例对象)</code></li></ul></li></ul></li><li>模块中导出多个成员和导出单个成员</li><li>301 和 302 状态码区别<ul><li>301 永久重定向，浏览器会记住</li><li>302 临时重定向</li></ul></li><li>exports 和 module.exports 的区别<ul><li>每个模块中都有一个 module 对象</li><li>module 对象中有一个 exports 对象</li><li>我们可以把需要导出的成员都挂载到 module.exports 接口对象中</li><li>也就是：<code>moudle.exports.xxx = xxx</code> 的方式</li><li>但是每次都 <code>moudle.exports.xxx = xxx</code> 很麻烦，点儿的太多了</li><li>所以 Node 为了你方便，同时在每一个模块中都提供了一个成员叫：<code>exports</code></li><li><code>exports === module.exports</code> 结果为  <code>true</code>s</li><li>所以对于：<code>moudle.exports.xxx = xxx</code> 的方式 完全可以：<code>expots.xxx = xxx</code></li><li>当一个模块需要导出单个成员的时候，这个时候必须使用：<code>module.exports = xxx</code> 的方式</li><li>不要使用 <code>exports = xxx</code> 不管用</li><li>因为每个模块最终向外 <code>return</code> 的是 <code>module.exports</code></li><li>而 <code>exports</code> 只是 <code>module.exports</code> 的一个引用</li><li>所以即便你为 <code>exports = xx</code> 重新赋值，也不会影响 <code>module.exports</code></li><li>但是有一种赋值方式比较特殊：<code>exports = module.exports</code> 这个用来重新建立引用关系的</li><li>之所以让大家明白这个道理，是希望可以更灵活的去用它</li></ul></li><li>Node 是一个比肩 Java、PHP 的一个平台<ul><li>JavaScript 既能写前端也能写服务端</li></ul></li></ul><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><span class="line">moudle.exports = &#123;</span><br><span class="line">  a: <span class="number">123</span></span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="comment">// 重新建立 exports 和 module.exports 之间的引用关系</span></span><br><span class="line">exports = <span class="built_in">module</span>.exports</span><br><span class="line"></span><br><span class="line">exports.foo = <span class="string">'bar'</span></span><br></pre></td></tr></table></figure><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br></pre></td><td class="code"><pre><span class="line"><span class="built_in">Array</span>.prototype.mySlice = <span class="function"><span class="keyword">function</span> (<span class="params"></span>) </span>&#123;</span><br><span class="line">  <span class="keyword">var</span> start = <span class="number">0</span></span><br><span class="line">  <span class="keyword">var</span> end = <span class="keyword">this</span>.length</span><br><span class="line">  <span class="keyword">if</span> (<span class="built_in">arguments</span>.length === <span class="number">1</span>) &#123;</span><br><span class="line">    start = <span class="built_in">arguments</span>[<span class="number">0</span>]</span><br><span class="line">  &#125; <span class="keyword">else</span> <span class="keyword">if</span> (<span class="built_in">arguments</span>.length === <span class="number">2</span>) &#123;</span><br><span class="line">    start = <span class="built_in">arguments</span>[<span class="number">0</span>]</span><br><span class="line">    end = <span class="built_in">arguments</span>[<span class="number">1</span>]</span><br><span class="line">  &#125;</span><br><span class="line">  <span class="keyword">var</span> tmp = []</span><br><span class="line">  <span class="keyword">for</span> (<span class="keyword">var</span> i = start; i &lt; end; i++) &#123;</span><br><span class="line">    <span class="comment">// fakeArr[0]</span></span><br><span class="line">    <span class="comment">// fakeArr[1]</span></span><br><span class="line">    <span class="comment">// fakeArr[2]</span></span><br><span class="line">    tmp.push(<span class="keyword">this</span>[i])</span><br><span class="line">  &#125;</span><br><span class="line">  <span class="keyword">return</span> tmp</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="keyword">var</span> fakeArr = &#123;</span><br><span class="line">  <span class="number">0</span>: <span class="string">'abc'</span>,</span><br><span class="line">  <span class="number">1</span>: <span class="string">'efg'</span>,</span><br><span class="line">  <span class="number">2</span>: <span class="string">'haha'</span>,</span><br><span class="line">  length: <span class="number">3</span></span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="comment">// 所以你就得到了真正的数组。 </span></span><br><span class="line">[].mySlice.call(fakeArr)</span><br></pre></td></tr></table></figure><h2 id="下午总结"><a href="#下午总结" class="headerlink" title="下午总结"></a>下午总结</h2><ul><li>jQuery 的 each 和 原生的 JavaScript 方法 forEach</li><li>301 和 302 的区别</li><li>模块中导出单个成员和导出多个成员的方式</li><li>module.exports 和 exports 的区别</li><li>require 方法加载规则<ul><li>优先从缓存加载</li><li>核心模块</li><li>路径形式的模块</li><li>第三方模块<ul><li>node_modules</li></ul></li></ul></li><li>package.json 包描述文件<ul><li>dependencies 选项的作用</li></ul></li><li>npm 常用命令</li><li><p>Express 基本使用</p></li><li><p>使用 Express 把之前的留言本案例自己动手改造一下</p></li></ul><h1 id="四、day4"><a href="#四、day4" class="headerlink" title="四、day4"></a>四、day4</h1><h2 id="知识点-1"><a href="#知识点-1" class="headerlink" title="知识点"></a>知识点</h2><ul><li>Express</li><li>基于文件做一套 CRUD</li></ul><h2 id="复习-1"><a href="#复习-1" class="headerlink" title="复习"></a>复习</h2><ul><li>jQuery 的 each 和 原生的 JavaScript 方法 forEach</li><li>301 和 302 的区别</li><li>模块中导出单个成员和导出多个成员的方式<ul><li><code>module.exports = xxx</code></li><li>通过多次：<code>exports.xxx = xxx</code></li><li>导出多个也可以：<code>moudle.exports = {多个成员}</code></li></ul></li><li>module.exports 和 exports 的区别<ul><li>exports 只是 module.exports 的一个引用而已，目的只是为了简化写法</li><li>每个模块最终 return 的是 module.exports</li></ul></li><li>require 方法加载规则<ul><li>优先从缓存加载</li><li>核心模块</li><li>路径形式的模块<ul><li><code>./xxx</code></li><li><code>../xxxx</code></li><li><code>/xxxx</code> / 在这里表示的是磁盘根路径</li><li><code>c:/xxx</code></li></ul></li><li>第三方模块<ul><li>第三方模块的标识就是第三方模块的名称（不可能有第三方模块和核心模块的名字一致）</li><li>npm<ul><li>开发人员可以把写好的框架、库发布到 npm 上</li><li>使用者在使用的时候就可以很方便的通过 npm 来下载</li></ul></li><li>使用方式：<code>var 名字 = require(&#39;npm install 的那个包名&#39;)</code></li><li>node_modules</li><li>node_modules/express</li><li>node_modules/express/package.json</li><li>node_modules/express/package.json main</li><li>如果 package.json 或者 package.json main 不成立，则查找备选项：index.js</li><li>如果以上条件都不成立，则继续进入上一级目录中的 node_modules 按照上面的规则继续查找</li><li>如果直到当前文件模块所属磁盘根目录都找不到，最后报错：<code>can not find module xxx</code></li></ul></li></ul></li><li>package.json 包描述文件<ul><li>就是产品的说明书</li><li><code>dependencies</code> 属性，用来保存项目的第三方包依赖项信息</li><li>所以建议每个项目都要有且只有一个 package.json (存放在项目的根目录)</li><li>我们可以通过 <code>npm init [--yes]</code> 来生成 package.json 文件</li><li>同样的，为了保存依赖项信息，我们每次安装第三方包的时候都要加上：<code>--save</code> 选项。</li></ul></li><li>npm 常用命令<ul><li>install</li><li>uninstall</li></ul></li><li>Express 基本使用</li><li>使用 Express 把之前的留言本案例自己动手改造一下</li></ul><h3 id="模块标识中的-和文件操作路径中的"><a href="#模块标识中的-和文件操作路径中的" class="headerlink" title="模块标识中的 / 和文件操作路径中的 /"></a>模块标识中的 <code>/</code> 和文件操作路径中的 <code>/</code></h3><h2 id="上午总结-1"><a href="#上午总结-1" class="headerlink" title="上午总结"></a>上午总结</h2><h3 id="演讲"><a href="#演讲" class="headerlink" title="演讲"></a>演讲</h3><blockquote><p>说服<br>PPT<br>脑图<br>markdown<br>结构思维</p></blockquote><ul><li>找痛点 why 为什么</li><li>解决方案 what 是什么</li><li>怎么去使用 how 怎么用</li><li>where 在哪儿用</li><li><p>when  什么时候用</p></li><li><p>文件路径中的 <code>/</code> 和模块标识中的 <code>/</code></p></li><li>nodemon</li><li>Express<ul><li>art-template 模板引擎的配置</li><li>body-parser 解析表单 POST 请求体</li></ul></li><li>技术只是一种解决问题的手段、工具而已<ul><li>第三方的东西，不要纠结</li><li>先以解决问题为主</li></ul></li><li>详解了 express 静态服务 API<ul><li>app.use(‘/public/‘, express.static(‘./public’))</li></ul></li><li>crud</li></ul><h2 id="下午总结-1"><a href="#下午总结-1" class="headerlink" title="下午总结"></a>下午总结</h2><h2 id="目标"><a href="#目标" class="headerlink" title="目标"></a>目标</h2><ul><li>文件路径中的 <code>/</code> 和模块标识中的 <code>/</code></li><li>Express 中配置使用 art-template 模板引擎</li><li>Express 中配置使用 body-parser</li><li>Express 中配置处理静态资源</li><li>CRUD 案例中单独提取路由模块</li></ul><h1 id="五、day5"><a href="#五、day5" class="headerlink" title="五、day5"></a>五、day5</h1><h2 id="知识点-2"><a href="#知识点-2" class="headerlink" title="知识点"></a>知识点</h2><ul><li>Express</li><li>MongoDB</li><li>项目<ul><li>一天半的时间</li></ul></li></ul><h2 id="复习-2"><a href="#复习-2" class="headerlink" title="复习"></a>复习</h2><ul><li>文件路径中的 <code>/</code> 和模块标识中的 <code>/</code></li><li>Express 中配置使用 art-template 模板引擎</li><li>Express 中配置使用 body-parser</li><li>Express 中配置处理静态资源</li><li>CRUD 案例中单独提取路由模块</li></ul><h2 id="上午总结-2"><a href="#上午总结-2" class="headerlink" title="上午总结"></a>上午总结</h2><ul><li>回调函数<ul><li>异步编程</li><li>如果需要得到一个函数内部异步操作的结果，这是时候必须通过回调函数来获取</li><li>在调用的位置传递一个函数进来</li><li>在封装的函数内部调用传递进来的函数</li></ul></li><li>find、findIndex、forEach<ul><li>数组的遍历方法，都是对函数作为参数一种运用<ul><li>every</li></ul></li><li>some</li><li>includes</li><li>map</li><li>reduce</li></ul></li><li>package-lock.json 文件的作用<ul><li>下载速度快了</li><li>锁定版本</li></ul></li><li>JavaScript 模块化<ul><li>Node 中的 CommonJS</li><li>浏览器中的<ul><li>AMD require.js</li><li>CMD sea.js</li></ul></li><li>EcmaScript 官方在 EcmaScript 6 中增加了官方支持</li><li>EcmaScript 6</li><li>后面我们会学，编译工具</li></ul></li><li>MongoDB 数据库<ul><li>MongoDB 的数据存储结构<ul><li>数据库</li><li>集合（表）</li><li>文档（表记录）</li></ul></li></ul></li><li>MongoDB 官方有一个 mongodb 的包可以用来操作 MongoDB 数据库<ul><li>这个确实和强大，但是比较原始，麻烦，所以咱们不使用它</li></ul></li><li>mongoose<ul><li>真正在公司进行开发，使用的是 mongoose 这个第三方包</li><li>它是基于 MongoDB 官方的 mongodb 包进一步做了封装</li><li>可以提高开发效率</li><li>让你操作 MongoDB 数据库更方便</li></ul></li><li>掌握使用 mongoose 对数据集合进行基本的 CRUD</li><li>把之前的 crud 案例改为了 MongoDB 数据库版本</li><li>使用 Node 操作 mysql 数据库</li></ul><h1 id="六、day6"><a href="#六、day6" class="headerlink" title="六、day6"></a>六、day6</h1><h1 id="Node-js-第6天课堂笔记"><a href="#Node-js-第6天课堂笔记" class="headerlink" title="Node.js 第6天课堂笔记"></a>Node.js 第6天课堂笔记</h1><h2 id="知识点-3"><a href="#知识点-3" class="headerlink" title="知识点"></a>知识点</h2><ul><li>多人社区案例</li></ul><h2 id="复习-3"><a href="#复习-3" class="headerlink" title="复习"></a>复习</h2><ul><li>MongoDB 数据库<ul><li>灵活</li><li>不用设计数据表</li><li>业务的改动不需要关心数据表结构</li><li>DBA 架构师 级别的工程师都需要掌握这项技能<ul><li>设计</li><li>维护</li><li>分布式计算</li></ul></li></ul></li><li>mongoose<ul><li>mongodb 官方包也可以操作 MongoDB 数据库</li><li>第三方包：WordPress 项目开发团队</li><li>设计 Schema</li><li>发布 Model（得到模型构造函数）<ul><li>查询</li><li>增加</li><li>修改</li><li>删除</li></ul></li></ul></li><li>Promise<ul><li><a href="http://es6.ruanyifeng.com/#docs/promise" target="_blank" rel="noopener">http://es6.ruanyifeng.com/#docs/promise</a></li><li>callback hell 回调地狱</li><li>回调函数中套了回调函数</li><li>Promise(EcmaScript 6 中新增了一个语法 API)</li><li>容器<ul><li>异步任务（pending）</li><li>resolve</li><li>reject</li></ul></li><li>then 方法获取容器的结果（成功的，失败的）</li><li>then 方法支持链式调用</li><li>可以在 then 方法中返回一个 promise 对象，然后在后面的 then 方法中获取上一个 then 返回的 promise 对象的状态结果</li></ul></li></ul><h2 id="总结-2"><a href="#总结-2" class="headerlink" title="总结"></a>总结</h2><ul><li>path 模块</li><li><strong>dirname 和 </strong>filename<ul><li><strong>动态的</strong> 获取当前文件或者文件所处目录的绝对路径</li><li>用来解决文件操作路劲的相对路径问题</li><li>因为在文件操作中，相对路径相对于执行 <code>node</code> 命令所处的目录</li><li>所以为了尽量避免这个问题，都建议文件操作的相对路劲都转为：<strong>动态的绝对路径</strong></li><li>方式：<code>path.join(__dirname, &#39;文件名&#39;)</code></li></ul></li><li>art-template 模板引擎(include、block、extend)<ul><li>include</li><li>extend</li><li>block</li></ul></li><li>表单同步提交和异步提交区别<ul><li>以前没有 ajax 都是这么干的，甚至有些直接就是渲染了提示信息出来了</li><li>异步提交页面不会刷新，交互方式更灵活</li></ul></li><li>Express 中配置使用 express-session 插件</li><li>概述案例中注册-登陆-退出的前后端交互实现流程</li></ul>]]></content>
      
      
      <categories>
          
          <category> Nodejs </category>
          
      </categories>
      
      
        <tags>
            
            <tag> Nodejs笔记 </tag>
            
        </tags>
      
    </entry>
    
    <entry>
      <title>nodejs day5</title>
      <link href="/2018/09/28/nodejs(day5)/"/>
      <url>/2018/09/28/nodejs(day5)/</url>
      
        <content type="html"><![CDATA[<link rel="stylesheet" class="aplayer-secondary-style-marker" href="/assets/css/APlayer.min.css"><script src="/assets/js/APlayer.min.js" class="aplayer-secondary-script-marker"></script><h1 id="今日授课内容"><a href="#今日授课内容" class="headerlink" title="今日授课内容"></a>今日授课内容</h1><ol><li>Buffer 类型介绍</li><li>express 介绍</li></ol><ul><li>express 介绍</li><li>express 实现 hello world</li><li>express 脚手架</li><li>express 简单路由</li><li>express 正则表达式路由<ul><li>/^\/index(\/.+)?$/</li></ul></li><li>express 处理静态资源</li><li>express 中的 res.send() 和 res.end() 区别</li><li>res.json()等价于 res.send(json)、res.sendFile()、res.redirect()、res.status(code).end()</li><li>app.use()、app.get()、app.all()区别</li><li>中间件介绍</li></ul><ol start="3"><li>ejs 模板引擎介绍</li></ol><h1 id="一、Buffer"><a href="#一、Buffer" class="headerlink" title="一、Buffer"></a>一、Buffer</h1><p>思考：Buffer 类型产生的原因？主要用来解决什么问题？</p><p>看一下什么是 Buffer? 什么是 Stream?</p><h2 id="一、类型介绍"><a href="#一、类型介绍" class="headerlink" title="一、类型介绍"></a>一、类型介绍</h2><ol><li>JavaScript 语言没有读取或操作二进制数据流的机制。</li><li>Node.js 中引入了 Buffer 类型使我们可以操作 TCP 流 或 文件流。</li><li>Buffer 类型的对象类似于整数数组，但 Buffer 的大小是固定的、且在 V8 堆外分配物理内存。 Buffer 的大小在被创建时确定，且无法调整。（ buf.length 是固定的，不允许修改 ）</li><li>Buffer 是全局的，所以使用的时候无需 require() 的方式来加载</li></ol><h2 id="二、如何创建一个-Buffer-对象"><a href="#二、如何创建一个-Buffer-对象" class="headerlink" title="二、如何创建一个 Buffer 对象"></a>二、如何创建一个 Buffer 对象</h2><p>常见的 API 介绍</p><h3 id="1-创建一个-Buffer-对象"><a href="#1-创建一个-Buffer-对象" class="headerlink" title="1. 创建一个 Buffer 对象"></a>1. 创建一个 Buffer 对象</h3><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">// 1. 通过 Buffer.from() 创建一个 Buffer 对象</span></span><br><span class="line"></span><br><span class="line"><span class="comment">// 1.1 通过一个字节数组来创建一个 Buffer 对象</span></span><br><span class="line"><span class="keyword">var</span> array = [</span><br><span class="line">  <span class="number">0x68</span>,</span><br><span class="line">  <span class="number">0x65</span>,</span><br><span class="line">  <span class="number">0x6c</span>,</span><br><span class="line">  <span class="number">0x6c</span>,</span><br><span class="line">  <span class="number">0x6f</span>,</span><br><span class="line">  <span class="number">0x20</span>,</span><br><span class="line">  <span class="number">0xe4</span>,</span><br><span class="line">  <span class="number">0xb8</span>,</span><br><span class="line">  <span class="number">0x96</span>,</span><br><span class="line">  <span class="number">0xe7</span>,</span><br><span class="line">  <span class="number">0x95</span>,</span><br><span class="line">  <span class="number">0x8c</span></span><br><span class="line">];</span><br><span class="line"><span class="keyword">var</span> buf = Buffer.from(array);</span><br><span class="line"><span class="built_in">console</span>.log(buf.toString(<span class="string">"utf8"</span>));</span><br><span class="line"></span><br><span class="line"><span class="comment">// 1.2 通过字符串来创建一个 Buffer 对象</span></span><br><span class="line"><span class="comment">// Buffer.from(string[, encoding])</span></span><br><span class="line"><span class="keyword">var</span> buf = Buffer.from(<span class="string">"你好世界！ Hello World!~"</span>);</span><br><span class="line"><span class="built_in">console</span>.log(buf);</span><br><span class="line"><span class="built_in">console</span>.log(buf.toString());</span><br></pre></td></tr></table></figure><h3 id="2-拼接多个-Buffer-对象为一个对象"><a href="#2-拼接多个-Buffer-对象为一个对象" class="headerlink" title="2. 拼接多个 Buffer 对象为一个对象"></a>2. 拼接多个 Buffer 对象为一个对象</h3><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">// Buffer.concat(list[, totalLength])</span></span><br><span class="line"><span class="keyword">var</span> bufferList = [];</span><br><span class="line"><span class="keyword">var</span> buf = Buffer.concat(bufferList);</span><br></pre></td></tr></table></figure><h3 id="3-获取字符串对应的字节个数"><a href="#3-获取字符串对应的字节个数" class="headerlink" title="3. 获取字符串对应的字节个数"></a>3. 获取字符串对应的字节个数</h3><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">// Buffer.byteLength(string[, encoding])</span></span><br><span class="line"></span><br><span class="line"><span class="keyword">var</span> len = Buffer.byteLength(<span class="string">"你好世界Hello"</span>, <span class="string">"utf8"</span>);</span><br><span class="line"><span class="built_in">console</span>.log(len);</span><br></pre></td></tr></table></figure><h3 id="4-判断一个对象是否是-Buffer-类型对象"><a href="#4-判断一个对象是否是-Buffer-类型对象" class="headerlink" title="4. 判断一个对象是否是 Buffer 类型对象"></a>4. 判断一个对象是否是 Buffer 类型对象</h3><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">// Buffer.isBuffer(obj)</span></span><br><span class="line"><span class="comment">// obj &lt;Object&gt;</span></span><br><span class="line"><span class="comment">// Returns: &lt;boolean&gt;</span></span><br><span class="line"><span class="comment">// Returns true if obj is a Buffer, false otherwise.</span></span><br></pre></td></tr></table></figure><h3 id="5-获取-Buffer-中的某个字节"><a href="#5-获取-Buffer-中的某个字节" class="headerlink" title="5. 获取 Buffer 中的某个字节"></a>5. 获取 Buffer 中的某个字节</h3><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">// 根据索引获取 Buffer 中的某个字节（byte、octet）</span></span><br><span class="line"><span class="comment">// buf[index]</span></span><br></pre></td></tr></table></figure><h3 id="6、获取-Buffer-对象中的字节的个数"><a href="#6、获取-Buffer-对象中的字节的个数" class="headerlink" title="6、获取 Buffer 对象中的字节的个数"></a>6、获取 Buffer 对象中的字节的个数</h3><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">// buf.length</span></span><br><span class="line"><span class="comment">// 注意：length 属性不可修改</span></span><br></pre></td></tr></table></figure><h3 id="7-已过时的-API"><a href="#7-已过时的-API" class="headerlink" title="7. 已过时的 API"></a>7. 已过时的 API</h3><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">// 以下 API 已全部过时</span></span><br><span class="line"><span class="keyword">new</span> Buffer(array)</span><br><span class="line"><span class="keyword">new</span> Buffer(buffer)</span><br><span class="line"><span class="keyword">new</span> Buffer(arrayBuffer[, byteOffset [, length]])</span><br><span class="line"><span class="keyword">new</span> Buffer(size)</span><br><span class="line"><span class="keyword">new</span> Buffer(string[, encoding])</span><br></pre></td></tr></table></figure><h2 id="三、Buffer-对象与编码"><a href="#三、Buffer-对象与编码" class="headerlink" title="三、Buffer 对象与编码"></a>三、Buffer 对象与编码</h2><p>Node.js 目前支持的编码如下：</p><ol><li>ascii</li><li>utf8</li><li>utf16le</li></ol><ul><li>ucs2 是 utf16le 的别名</li></ul><ol start="4"><li>base64</li><li>latin1</li></ol><ul><li>binary 是 latin1 的别名</li></ul><ol start="6"><li>hex</li></ol><ul><li>用两位 16 进制来表示每个字节</li></ul><p>示例代码：</p><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">var</span> buf = Buffer.from(<span class="string">"你好世界，Hello World！"</span>, <span class="string">"utf8"</span>);</span><br><span class="line"></span><br><span class="line"><span class="built_in">console</span>.log(buf.toString(<span class="string">"hex"</span>));</span><br><span class="line"><span class="built_in">console</span>.log(buf.toString(<span class="string">"base64"</span>));</span><br><span class="line"><span class="built_in">console</span>.log(buf.toString(<span class="string">"utf8"</span>));</span><br></pre></td></tr></table></figure><h2 id="四、思考：为什么会有-Buffer-类型？"><a href="#四、思考：为什么会有-Buffer-类型？" class="headerlink" title="四、思考：为什么会有 Buffer 类型？"></a>四、思考：为什么会有 Buffer 类型？</h2><ol><li>Buffer 使用来临时存储一些数据（二进制数据）</li><li>当我们要把一大块数据从一个地方传输到另外一个地方的时候可以通过 Buffer 对象进行传输</li><li>通过 Buffer 每次可以传输小部分数据，直到所有数据都传输完毕。</li></ol><h2 id="五、补充"><a href="#五、补充" class="headerlink" title="五、补充"></a>五、补充</h2><ol><li><p>Stream</p></li><li><p>Writable Stream</p></li></ol><ul><li>允许 node.js 写数据到流中</li></ul><ol start="3"><li>Readable Stream</li></ol><ul><li>允许 node.js 从流中读取数据</li></ul><h1 id="二、express-介绍"><a href="#二、express-介绍" class="headerlink" title="二、express 介绍"></a>二、express 介绍</h1><ul><li><p>什么是 express ？</p><ul><li>基于 Node.js 平台开发的 “web 开发框架” ，就是一个 node.js 模块</li><li>express 的作用：它提供一系列强大的特性，帮助你创建各种 Web 和移动设备应用。</li><li>express 同时也是 Node.js 的一个模块</li></ul></li><li><p>为什么学习 express 框架？</p><ul><li>为了让我们基于 Node.js 开发 web 应用程序更高效。</li></ul></li></ul><ul><li><p>express 官方网站</p><ul><li><a href="http://expressjs.com/" target="_blank" rel="noopener">http://expressjs.com/</a></li><li><a href="http://www.expressjs.com.cn/" target="_blank" rel="noopener">http://www.expressjs.com.cn/</a></li></ul></li><li><p>express 网站如何查阅？</p><ul><li>带领同学们一起看一下</li></ul></li></ul><h2 id="express-特点"><a href="#express-特点" class="headerlink" title="express 特点"></a>express 特点</h2><ol><li>实现了路由功能</li><li>中间件（函数）功能</li><li>对 req 和 res 对象的扩展</li><li>可以集成其他模板引擎</li></ol><h2 id="express-基本使用"><a href="#express-基本使用" class="headerlink" title="express 基本使用"></a>express 基本使用</h2><ul><li><p>安装 express</p><ul><li>npm 搜索，安装。按照文档一步一步进行<ol><li>创建 package.json 文件</li><li>安装 express 模块：<code>npm install express --save</code></li></ol></li></ul></li><li><p>演示 Hello World 案例</p><ul><li>在 express 中，request 对象 和 response 对象一样使用，同时这两个对象还额外添加了其他的好用功能</li><li>res.send() 是 res.end()的扩展</li><li>步骤总结：<br>1、加载 express 模块<br>2、创建 express 实例（一般叫 app ）<br>3、设计路由<br>4、启动监听服务</li></ul></li><li><p>补充知识：</p><ul><li>路由：请求路径（URL） + 请求方法（post、get、……）</li><li>http 请求方法介绍：<a href="https://en.wikipedia.org/wiki/Hypertext_Transfer_Protocol#Request_methods" target="_blank" rel="noopener">https://en.wikipedia.org/wiki/Hypertext_Transfer_Protocol#Request_methods</a></li></ul></li></ul><ul><li><p>使用 express 框架模拟 Apache 服务器处理静态资源</p><ul><li><p>主要使用到的方法<code>express.static(&#39;public&#39;)</code></p><ul><li><code>express.static(&#39;public&#39;)</code>的返回值就是一个函数，这个函数的作用就是根据请求，读取静态资源文件并响应给用户</li><li>注意：static() 方法参数路径要写 绝对路径，不要写相对路径。相对路径还是相对执行 node 命令的路径</li></ul></li><li><p>主要使用到的方法 <code>app.use()</code></p><ul><li>use()方法的参数 1 表示”虚拟路径”，参数 2 表示要开放的静态资源目录</li></ul></li><li><p>如何向客户端发送单个静态文件</p><ul><li>res.sendFile() 方法</li></ul></li><li><p>托管静态资源时的两个注意点：</p></li></ul><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">// 问题一(提问、演示)、</span></span><br><span class="line">app.use(express.static(<span class="string">"./public"</span>));</span><br><span class="line">app.use(express.static(<span class="string">"./file"</span>));</span><br><span class="line"></span><br><span class="line"><span class="comment">// 问题二(提问、演示)、</span></span><br><span class="line">app.use(<span class="string">"/aaa"</span>, express.static(<span class="string">"./public"</span>));</span><br><span class="line">app.use(<span class="string">"/bbb"</span>, express.static(<span class="string">"./public"</span>));</span><br></pre></td></tr></table></figure></li></ul><h2 id="带同学们看一下-express-文档中关于各种设置路由的方法"><a href="#带同学们看一下-express-文档中关于各种设置路由的方法" class="headerlink" title="带同学们看一下 express 文档中关于各种设置路由的方法"></a>带同学们看一下 express 文档中关于各种设置路由的方法</h2><h2 id="介绍一下-express-中的中间件"><a href="#介绍一下-express-中的中间件" class="headerlink" title="介绍一下 express 中的中间件"></a>介绍一下 express 中的中间件</h2><ul><li><p>中间件（Middleware） 是一个函数，它可以访问请求对象（request object (req)）, 响应对象（response object (res)）, 和 web 应用中处于请求-响应循环流程中的中间件，一般被命名为 next 的变量。</p></li><li><p>常规中间件（应用级中间件）的回调函数，一般有 3 个参数</p><ul><li>req, res, next</li><li>其中 next()是一个函数，通过这个函数把执行流程交给下一个中间件</li></ul></li><li><p>可以挂在中间件的部分方法</p><ul><li>app.use()</li><li>app.get()、app.post()、app.put()、app.delete()、…等各种请求方法</li><li>注意：在挂载中间件时 next() 方法的重要性，不调用该方法无法执行到下一个中间件</li></ul></li><li><p>中间件的应用场景</p><ul><li>利用中间件实现记录日志功能</li><li>利用中间件模拟 body-parser 功能</li></ul></li></ul><h2 id="介绍在-express-中如何使用模板引擎"><a href="#介绍在-express-中如何使用模板引擎" class="headerlink" title="介绍在 express 中如何使用模板引擎"></a>介绍在 express 中如何使用模板引擎</h2><ul><li>在 express 中, res 对象是具有 redner 方法的，但是需要自己配置一个模板引擎</li><li>在 express 中渲染单个文件，使用 res.sendFile</li><li>res.render()要在设置好模板引擎后再使用</li></ul><h2 id="ejs-模板引擎介绍"><a href="#ejs-模板引擎介绍" class="headerlink" title="ejs 模板引擎介绍"></a>ejs 模板引擎介绍</h2><ul><li>打开 npm 搜索 ejs</li><li>打开 GitHub 的 ejs 地址，查看如何使用</li><li>ejs 模板引擎介绍</li><li>ejs 使用<ul><li>ejs.render(str, data, options);</li></ul></li></ul><h2 id="在-express-中配置使用-ejs-模板引擎"><a href="#在-express-中配置使用-ejs-模板引擎" class="headerlink" title="在 express 中配置使用 ejs 模板引擎"></a>在 express 中配置使用 ejs 模板引擎</h2><ul><li>npm install ejs –save</li><li>通过 app.set(‘views’, ‘路径’); 和 app.set(‘view engine’, ‘模板引擎名称’);来配置模板引擎</li><li>配置好后就可以通过 res.render(‘a.ejs’, {})来渲染模板了</li></ul><h2 id="express-中的-request-对象的成员："><a href="#express-中的-request-对象的成员：" class="headerlink" title="express 中的 request 对象的成员："></a>express 中的 request 对象的成员：</h2><p><a href="http://www.expressjs.com.cn/4x/api.html#req" target="_blank" rel="noopener">http://www.expressjs.com.cn/4x/api.html#req</a></p><h2 id="express-中的-response-对象的成员："><a href="#express-中的-response-对象的成员：" class="headerlink" title="express 中的 response 对象的成员："></a>express 中的 response 对象的成员：</h2><p><a href="http://www.expressjs.com.cn/4x/api.html#res" target="_blank" rel="noopener">http://www.expressjs.com.cn/4x/api.html#res</a></p><h2 id="express-中的-‘中间件’-含义。"><a href="#express-中的-‘中间件’-含义。" class="headerlink" title="express 中的 ‘中间件’ 含义。"></a>express 中的 ‘中间件’ 含义。</h2><h2 id="模板引擎后缀替换"><a href="#模板引擎后缀替换" class="headerlink" title="模板引擎后缀替换"></a>模板引擎后缀替换</h2><ul><li>app.engine(‘.ejs’, require(‘ejs’).renderFile)</li><li>app.set(‘view engine’, ‘ejs’)</li></ul><h2 id="通过使用-express-框架改造-Hacker-News-网站"><a href="#通过使用-express-框架改造-Hacker-News-网站" class="headerlink" title="通过使用 express 框架改造 Hacker News 网站"></a>通过使用 express 框架改造 Hacker News 网站</h2><ul><li>把 resources、views、list.json 拷贝到该目录下，其他暂时不需要了</li><li>创建 app.js</li><li>创建 package.json</li><li>安装 express</li><li>提取 router.js 模块</li><li>拷贝 handler.js 模块</li><li>handler.js 模块中获取 post 提交数据时，可以使用 body-parser 模块实现<ul><li>npm 安装 body-parser</li><li>在 express 中通过 app.use()挂载 body-parser 中间件，实现效果</li></ul></li><li>在 express 中无需 url 模块，直接可以通过 req.query 获取查询字符串对象</li></ul><h1 id="三、其他"><a href="#三、其他" class="headerlink" title="三、其他"></a>三、其他</h1><p>1、ejs 模板引擎</p><ul><li>ejs 模板引擎介绍</li><li>打开 npm 搜索 ejs</li><li>打开 GitHub 的 ejs 地址，查看如何使用</li><li>演示 ejs 模板引擎的使用</li></ul><p>2、介绍在 express 中如何使用模板引擎</p><ul><li>在 express 中, res 对象是具有 redner 方法的，但是需要自己配置一个模板引擎</li><li>在 express 中渲染单个文件，使用 res.sendFile</li><li>res.render()要在设置好模板引擎后再使用</li><li>npm install ejs –save</li><li>通过 app.set(‘views’, ‘路径’); 和 app.set(‘view engine’, ‘模板引擎名称’);来配置模板引擎</li><li>配置好后就可以通过 res.render(‘a.ejs’, {})来渲染模板了</li></ul><p>3、模板引擎后缀替换、</p><ul><li><p>设置后缀为 .ejs</p><ul><li>app.engine(‘.ejs’, require(‘ejs’).renderFile)</li><li>app.set(‘view engine’, ‘ejs’)</li></ul></li><li><p>设置后缀为 .html</p><ul><li>app.engine(‘.html’, require(‘ejs’).renderFile)</li><li>app.set(‘view engine’, ‘html’)</li><li>参考链接：<a href="https://cnodejs.org/topic/530318fa5366a72a2c070a5d" target="_blank" rel="noopener">https://cnodejs.org/topic/530318fa5366a72a2c070a5d</a></li><li><a href="http://www.cnblogs.com/dubaokun/p/3446206.html" target="_blank" rel="noopener">http://www.cnblogs.com/dubaokun/p/3446206.html</a></li><li><a href="http://www.expressjs.com.cn/4x/api.html#app.engine" target="_blank" rel="noopener">http://www.expressjs.com.cn/4x/api.html#app.engine</a></li></ul></li></ul><p>4、完成 hacker news 网站使用 express 改造</p><p>5、body-parser 使用</p><ul><li>npm install</li><li>在模块中 require(‘body-parser’)</li><li>在 express 中配置</li></ul><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">// parse application/x-www-form-urlencoded</span></span><br><span class="line">app.use(bodyParser.urlencoded(&#123; <span class="attr">extended</span>: <span class="literal">false</span> &#125;));</span><br><span class="line"></span><br><span class="line"><span class="comment">// parse application/json</span></span><br><span class="line">app.use(bodyParser.json());</span><br></pre></td></tr></table></figure><pre><code>1. res.send() 方法- 参数可以是字符串、Buffer对象、数组（json对象）、普通对象- 通过调用该方法进行响应的时候，会自动添加一些响应头(Content-Type、Content-Length等)</code></pre>]]></content>
      
      
      <categories>
          
          <category> Nodejs </category>
          
      </categories>
      
      
        <tags>
            
            <tag> Nodejs笔记 </tag>
            
        </tags>
      
    </entry>
    
    <entry>
      <title>nodejs day4</title>
      <link href="/2018/09/27/nodejs(day4)/"/>
      <url>/2018/09/27/nodejs(day4)/</url>
      
        <content type="html"><![CDATA[<link rel="stylesheet" class="aplayer-secondary-style-marker" href="/assets/css/APlayer.min.css"><script src="/assets/js/APlayer.min.js" class="aplayer-secondary-script-marker"></script><h1 id="今日授课内容"><a href="#今日授课内容" class="headerlink" title="今日授课内容"></a>今日授课内容</h1><ol><li>复习 hackernews 实现</li><li>模块化改造 Hacker News 思路(5个模块)</li><li>项目地址:<a href="https://github.com/YHF7/HeackerNews" target="_blank" rel="noopener">https://github.com/YHF7/HeackerNews</a></li></ol><h1 id="HackerNews-代码模块化"><a href="#HackerNews-代码模块化" class="headerlink" title="HackerNews 代码模块化"></a>HackerNews 代码模块化</h1><h2 id="提取模块"><a href="#提取模块" class="headerlink" title="提取模块"></a>提取模块</h2><ol><li><p>app.js 模块</p><ul><li>职责<ol><li>创建并启动 http 服务</li></ol></li></ul></li><li><p>context.js 模块</p><ul><li>职责<ol><li>在 http request 事件正式开始前，先为 request 对象 和 response 对象挂载需要的成员</li><li>在正式开始处理请求前的准备工作</li></ol></li></ul></li><li><p>router.js 模块</p><ul><li><p>职责</p><ol><li>判断用户请求路径，根据不同路径调用不同的处理方法</li></ol></li><li><p>其他</p><ul><li>该模块返回一个函数，把req 和 res对象作为该函数的参数</li><li>路由一般包含两部分：1、URL路径； 2、请求方法：get 、 post 等</li></ul></li></ul></li><li><p>config.js模块</p><ul><li>职责：对于可能变化的地方，比如路径，单独配置起来。<ul><li>服务监听的端口号</li><li>viewPath路径</li><li>data保存的路径等</li><li>config.js模块一般放到项目根目录下，和app.js在同一级目录</li></ul></li></ul></li><li><p>handler.js模块</p><ul><li>职责：用来封装处理业务逻辑的代码<ul><li>把router.js模块中对于不同请求的处理代码封装到不同的函数（方法）中</li><li>处理不同请求封装成不同的方法</li></ul></li></ul></li></ol>]]></content>
      
      
      <categories>
          
          <category> Nodejs </category>
          
      </categories>
      
      
        <tags>
            
            <tag> Nodejs笔记 </tag>
            
        </tags>
      
    </entry>
    
    <entry>
      <title>nodejs day3</title>
      <link href="/2018/09/26/nodejs(day3)/"/>
      <url>/2018/09/26/nodejs(day3)/</url>
      
        <content type="html"><![CDATA[<link rel="stylesheet" class="aplayer-secondary-style-marker" href="/assets/css/APlayer.min.css"><script src="/assets/js/APlayer.min.js" class="aplayer-secondary-script-marker"></script><h1 id="复习"><a href="#复习" class="headerlink" title="复习"></a>复习</h1><ol><li>try-catch 捕获异常</li><li>根据用户不同请求，读取不同HTML文件并返回（带图片、带CSS）</li><li>模拟Apache服务器，处理静态资源请求</li><li>用户请求的 url 对于服务器来说就是一个标识</li><li>request对象 和 response 对象</li><li>npm 安装和使用</li><li>modules 和 packages区别</li><li>package.json 文件作用</li><li>package-lock.json 文件作用</li><li>服务器端如何获取用户 get 提交的数据</li><li>服务器端如何做重定向操作</li><li>“路由” 由哪两部分组成？</li></ol><h1 id="今日课程"><a href="#今日课程" class="headerlink" title="今日课程"></a>今日课程</h1><h2 id="授课顺序"><a href="#授课顺序" class="headerlink" title="授课顺序"></a>授课顺序</h2><ol><li>完成 get 方式添加新闻、post 方式添加新闻</li><li>完成新闻列表页渲染</li><li>完成新闻详情页渲染</li><li>封装读取 data.json 文件代码</li><li>封装写入 data.json 文件的代码</li><li>封装读取 post 数据的代码</li><li>require() 加载模块机制<ul><li>加载过程</li><li>执行原理</li></ul></li><li>node.js 模块化介绍</li><li>module、module.exports和exports</li></ol><ol start="7"><li>通过设置响应报文头让浏览器实现弹框下载功能</li><li>网页中的 ./ 和 ../ 等相对路径的含义<ul><li>相对于请求当前页面的url来计算，根据这个url计算出上一级url或者本级url等</li><li>最终浏览器会根据相对url（相对路径）计算出绝对路径然后再请求服务器（向服务器发起请求）</li></ul></li><li>Buffer 类型介绍</li><li>通过模块化的方式改造 Hacker News</li></ol><h2 id="知识点"><a href="#知识点" class="headerlink" title="知识点"></a>知识点</h2><ol><li>node.js 模块化介绍</li><li>require() 加载模块机制</li><li>get 和 post 请求区别</li><li>url 模块使用</li><li>querystring 模块使用</li><li>underscore 模块使用</li><li>node.js 中如何获取 get 请求提交的数据</li><li>node.js 中如何获取 post 请求提交的数据</li><li>module、module.exports、exports</li><li><a href="https://www.awesomes.cn/" target="_blank" rel="noopener">前端资源库</a></li></ol><p>课程总结：</p><ol><li>通过 url 模块获取get 提交的数据</li><li>通过监听req 对象的 data 事件和 end 事件，配合 querystring模块获取用户 post 提交的数据</li><li>underscore 的 template方法使用</li><li>require() 加载机制</li><li>module、module.exports 和 exports</li><li>封装 异步回调的方法</li><li>node.js 模块的分类</li></ol><h1 id="node-js-模块"><a href="#node-js-模块" class="headerlink" title="node.js 模块"></a>node.js 模块</h1><p>在 node.js 开发中一个文件就可以认为是一个模块。</p><h2 id="一、node-js-模块分类"><a href="#一、node-js-模块分类" class="headerlink" title="一、node.js 模块分类"></a>一、node.js 模块分类</h2><h3 id="核心模块-Core-Module、内置模块、原生模块"><a href="#核心模块-Core-Module、内置模块、原生模块" class="headerlink" title="核心模块 Core Module、内置模块、原生模块"></a>核心模块 Core Module、内置模块、原生模块</h3><ul><li>fs</li><li>http</li><li>path</li><li>url</li><li>…</li></ul><p>所有内置模块在安装node.js的时候就已经编译成 二进制文件，可以直接加载运行（速度较快）<br>部分内置模块，在 node.exe 这个进程启动的时候就已经默认加载了，所以可以直接使用。</p><h3 id="文件模块"><a href="#文件模块" class="headerlink" title="文件模块"></a>文件模块</h3><h4 id="按文件后缀来分"><a href="#按文件后缀来分" class="headerlink" title="按文件后缀来分"></a>按文件后缀来分</h4><p>如果加载时，没有指定后缀名，那么就按照如下顺序依次加载相应模块</p><ol><li>.js</li><li>.json</li><li>.node（C/C++编写的模块）</li></ol><!-- require('./a.node') --><h3 id="自定义模块（第三方模块）"><a href="#自定义模块（第三方模块）" class="headerlink" title="自定义模块（第三方模块）"></a>自定义模块（第三方模块）</h3><ul><li>mime</li><li>cheerio</li><li>moment</li><li>mongo</li><li>…</li></ul><h2 id="二、require-加载模块顺序"><a href="#二、require-加载模块顺序" class="headerlink" title="二、require 加载模块顺序"></a>二、require 加载模块顺序</h2><ol><li><p>看 require() 加载模块时传入的参数是否以 ‘./‘ 或 ‘../‘ 或 ‘/‘ 等等这样的路径方式开头（相对路径或绝对路径都可以）</p></li><li><p>是，那么会按照传入的路径直接去查询对应的模块。</p></li></ol><ul><li><p>传入的是否为具体的文件名</p><ul><li><p>require(‘./test.js’) 是具体的文件名</p><ul><li>直接根据给定的路径去加载模块，找到了加载成功，找不到加载失败</li></ul></li><li><p>require(‘./test’); 不是具体的文件名、</p><ul><li>第一步：根据给定的路径，依次添加文件后缀 .js、.json、.node进行匹配，如果找不到匹配执行第二步</li><li>第二步：查找是否有 test 目录（尝试找 test 包）<ul><li>找不到：加载失败</li><li>找到了：依次在 test 目录下查找 package.json 文件（找到该文件后尝试找 main 字段中的入口文件）、index.js、index.json、index.node，找不到则加载失败</li></ul></li></ul></li></ul></li></ul><ol start="3"><li>不是，那么就认为传入的是 “模块名称”（比如：require(‘http’)、require(‘mime’)）</li></ol><ul><li>是核心模块：直接加载核心模块</li><li>不是核心模块<ul><li>依次递归查找 node_modules 目录中是否有相应的包<ul><li>从当前目录开始，依次递归查找所有父目录下的 node_modules 目录中是否包含相应的包</li><li>如果查找完毕磁盘根目录依然没有则加载失败</li><li>打印输入 module.paths 查看</li></ul></li></ul></li></ul><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">// require('http')</span></span><br><span class="line"><span class="comment">// require('mime')</span></span><br><span class="line"></span><br><span class="line"></span><br><span class="line"><span class="comment">// 情况一：require() 的参数是一个路径</span></span><br><span class="line"><span class="built_in">require</span>(<span class="string">'./index2.js'</span>)</span><br><span class="line"></span><br><span class="line"><span class="comment">// index2.js</span></span><br><span class="line"><span class="comment">// index2.json</span></span><br><span class="line"><span class="comment">// index2.node</span></span><br><span class="line"><span class="comment">// index2 文件夹 -&gt; package.json -&gt; main(入口文件 app.js -&gt; index.js/index.json/index.node) -&gt; 加载失败</span></span><br><span class="line"><span class="built_in">require</span>(<span class="string">'ndex2'</span>)</span><br><span class="line"></span><br><span class="line"><span class="comment">// 情况二： require() 的参数不是路径，直接就是一个模块名称</span></span><br><span class="line"><span class="comment">// 1. 先在核心模块中查找，是否有和给定的名字一样的模块。如果有，则直接加载该核心模块。</span></span><br><span class="line"><span class="comment">// require('http')</span></span><br><span class="line"></span><br><span class="line"><span class="comment">// 2. 如果核心模块中没有该模块那么就会认为这个模块是一个第三方模块（自定义模块）</span></span><br><span class="line"><span class="comment">// 先会去当前js文件所在的目录下去找是否一个一个 node_modules 文件夹</span></span><br><span class="line"><span class="comment">// require('mime')</span></span><br></pre></td></tr></table></figure><h3 id="require-加载模块注意点"><a href="#require-加载模块注意点" class="headerlink" title="require 加载模块注意点"></a>require 加载模块注意点</h3><ol><li><p>所有模块第一次加载完毕后都会有 缓存，二次加载直接读取缓存，避免了二次开销</p><ul><li>因为有                                                                                                                                                                                                                                                                                                                      缓存，所以模块中的代码只在第一次加载的时候执行一次</li></ul></li><li><p>每次加载模块的时候都优先从缓存中加载，缓存中没有的情况下才会按照 node.js 加载模块的规则去查找</p></li><li><p>核心模块在 Node.js 源码编译的时候，都已经编译为二进制执行文件，所以加载速度较快（核心模块加载的优先级仅次于 缓存加载）</p></li><li>核心模块都保存在 lib 目录下</li><li><p>试图加载一个和 核心模块 同名的 自定义模块（第三方模块）是不会成功的</p><ul><li>自定义模块要么名字不要与核心模块同名</li><li>要么使用路径的方式加载</li></ul></li><li><p>核心模块 只能通过 模块名称 来加载（错误示例：require(‘./http’); 这样是无法加载 核心模块 http的 ）</p></li><li>require() 加载模块使用 ./ 相对路径时，相对路径是相对当前模块，不受执行 node 命令的路径影响</li><li>建议加载文件模块的时候始终添加文件后缀名，不要省略。</li></ol><h2 id="三、补充-CommonJS-规范"><a href="#三、补充-CommonJS-规范" class="headerlink" title="三、补充 CommonJS 规范"></a>三、补充 CommonJS 规范</h2><ol><li><a href="http://www.commonjs.org/" target="_blank" rel="noopener">CommonJS 规范</a></li><li><a href="http://www.commonjs.org/specs/modules/1.0/" target="_blank" rel="noopener">模块的定义</a></li><li>总结：CommonJS 是为 JavaScript 语言制定的一种 模块规范、编程 API规范</li><li>node.js 遵循了 CommonJS规范</li></ol><h2 id="关于-node-js-中-Module-详细介绍"><a href="#关于-node-js-中-Module-详细介绍" class="headerlink" title="关于 node.js 中 Module 详细介绍"></a>关于 node.js 中 Module 详细介绍</h2><ul><li><a href="https://nodejs.org/dist/latest-v6.x/docs/api/modules.html" target="_blank" rel="noopener">Module</a></li></ul><h1 id="自己设计路由实现-Hacker-News-网站部分功能"><a href="#自己设计路由实现-Hacker-News-网站部分功能" class="headerlink" title="自己设计路由实现 Hacker News 网站部分功能"></a>自己设计路由实现 Hacker News 网站部分功能</h1><p>参考网址：<a href="https://news.ycombinator.com/" target="_blank" rel="noopener">https://news.ycombinator.com/</a></p><h2 id="步骤"><a href="#步骤" class="headerlink" title="步骤"></a>步骤</h2><ol><li>实现新闻列表页 - 首页 - index</li><li>实现新闻详情页 - 详情页 - details</li><li>实现新闻添加页 - 提交页 - submit</li><li>实现保存数据功能 - 将数据写入到 .json 文件中</li><li>实现首页数据的动态加载 - 根据.json文件来加载数据</li></ol><h2 id="实现思路"><a href="#实现思路" class="headerlink" title="实现思路"></a>实现思路</h2><h3 id="规划项目目录结构"><a href="#规划项目目录结构" class="headerlink" title="规划项目目录结构"></a>规划项目目录结构</h3><ul><li>HackerNews<ul><li>resources<ul><li>css</li><li>images</li></ul></li><li>views（存放html模板页面）</li><li>data（保存新闻数据 data.json 文件）</li><li>app.js 文件（该文件即我们写服务器端JavaScript代码的地方，用来处理用户请求）</li><li>package.json</li></ul></li></ul><h3 id="路由设计"><a href="#路由设计" class="headerlink" title="路由设计"></a>路由设计</h3><ol><li>注意：此处要自己设计路由，而不是像模拟 Apache 静态资源服务器一样</li></ol><h4 id="根据不同的请求返回相应的功能"><a href="#根据不同的请求返回相应的功能" class="headerlink" title="根据不同的请求返回相应的功能"></a>根据不同的请求返回相应的功能</h4><ol><li>当请求 <code>/</code> 和 <code>/index</code> 时，返回 <code>views/index.html</code> 文件内容</li><li>当请求 <code>/details</code> 时，返回 <code>views/details.html</code> 文件内容</li><li>当请求 <code>/submit</code> 时，返回 <code>views/submit.html</code> 文件内容</li><li>当请求 <code>/r</code> 时，保存用户提交的新闻数据，并将重定向到index页面。</li><li>对于其他以’/resources’开头的都当做静态资源来处理。</li></ol><h3 id="知识点-1"><a href="#知识点-1" class="headerlink" title="知识点"></a>知识点</h3><ol><li>封装<code>render()</code>函数，将<code>render()</code>函数挂载到<code>response</code>对象上，实现<code>response.render()</code>效果。</li><li>使用<code>underscore</code>模块中的模板引擎功能，渲染<code>index</code>页面中的新闻数据。</li><li>通过 url 模块来处理 get 请求</li></ol><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">// 1. 将 req.url 通过 url 模块来处理</span></span><br><span class="line">  <span class="keyword">var</span> urlObj = url.parse(req.url, <span class="literal">true</span>);</span><br><span class="line"></span><br><span class="line">  <span class="comment">// 1.1 获取用户请求的URL，不带查询字符串</span></span><br><span class="line">  <span class="comment">// 注意：此时的reqUrl中不包含 get 的请求参数，只是pathname</span></span><br><span class="line">  <span class="keyword">var</span> reqUrl = urlObj.pathname.toLowerCase();</span><br><span class="line"></span><br><span class="line">  <span class="comment">// urlObj.query</span></span><br></pre></td></tr></table></figure><ol start="4"><li>服务器端接收 post 提交过来的数据</li><li>通过 querystring 模块将查询字符串转换为 json 对象</li></ol><h2 id="JSON在线格式化"><a href="#JSON在线格式化" class="headerlink" title="JSON在线格式化"></a>JSON在线格式化</h2><p><a href="http://tool.oschina.net/codeformat/json" target="_blank" rel="noopener">JSON在线格式化</a></p><h1 id="url模块介绍"><a href="#url模块介绍" class="headerlink" title="url模块介绍"></a>url模块介绍</h1><ol><li>当服务器处理 get 请求时，用户请求的参数是在 request 的 url 属性中，纯字符串，使用起来并不方便</li><li>url 模块可以更方便地解析用户 get 请求提交上来的参数</li></ol><h2 id="具体使用"><a href="#具体使用" class="headerlink" title="具体使用"></a>具体使用</h2><ol><li>加载模块 <code>var url = require(&#39;url&#39;);</code></li><li>调用<code>parse()</code>方法解析</li></ol><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line"></span><br><span class="line">url.parse(urlString[, parseQueryString[, slashesDenoteHost]]);</span><br><span class="line"><span class="keyword">var</span> urlObj = url.parse(reqUrl, <span class="literal">true</span>);</span><br><span class="line"></span><br><span class="line"><span class="comment">// url对象的pathname属性，获取不包含查询字符串的url</span></span><br><span class="line"><span class="comment">// url对象的query属性中包含的就是请求字符串的键值对对象</span></span><br></pre></td></tr></table></figure><h1 id="模块化"><a href="#模块化" class="headerlink" title="模块化"></a>模块化</h1><h2 id="什么是模块？"><a href="#什么是模块？" class="headerlink" title="什么是模块？"></a>什么是模块？</h2><ul><li>每个.js文件就是一个模块</li><li>从npm上下载的一个包（可能是由多个文件组成的一个实现特定功能的包）也是一个模块</li><li>任何文件或目录只要可以被Node.js通过<code>require()</code>函数加载的都是模块</li><li>每个模块就是一个独立的作用域，模块和模块之间不会互相”污染”</li><li>我们可以通过编程的方式，指定某个模块要对外暴露的内容（其实就是指定require的返回值，通过require的返回值对外暴露指定内容）。这个对外暴露内容的过程也叫”导出” <code>module.exports</code></li></ul><h2 id="为什么要进行模块化"><a href="#为什么要进行模块化" class="headerlink" title="为什么要进行模块化"></a>为什么要进行模块化</h2><ul><li>方便代码管理、项目维护</li><li>有助于分工协同开发</li><li>模块和模块之间不会出现变量”污染”，一个模块就是一个作用域。</li><li>模块化可以做到职责分离，每个模块实现一个独立的功能</li></ul><p>补充：面向对象编程的5（6）大原则：</p><ul><li>开放封闭原则</li><li>里氏替换原则</li><li>依赖倒置原则</li><li>单一职责原则</li><li>接口隔离原则</li></ul><h2 id="什么是包？"><a href="#什么是包？" class="headerlink" title="什么是包？"></a>什么是包？</h2><ul><li>通过package.json描述的一个文件或目录（可以理解成一个实现某个功能的1个文件或多个文件，通过package.json组织起来）</li><li>包不一定能被Node.js通过<code>require()</code>来加载，那么就不就叫模块。比如有些包中没有设置启动文件（package.json中的main字段），就不是模块。</li><li><a href="https://docs.npmjs.com/how-npm-works/packages" target="_blank" rel="noopener">package 和 module 参考链接</a></li></ul><h2 id="在Node-js中模主要分为：核心模块-和-文件模块"><a href="#在Node-js中模主要分为：核心模块-和-文件模块" class="headerlink" title="在Node.js中模主要分为：核心模块 和 文件模块"></a>在Node.js中模主要分为：核心模块 和 文件模块</h2><h3 id="核心模块"><a href="#核心模块" class="headerlink" title="核心模块"></a>核心模块</h3><ul><li>http、fs、path、url、net、os、readline、……</li><li>核心模块在Node.js自身源码编译时，已经编译成二进制文件</li><li>部分核心模块在Node.js进程启动的时候已经默认加载到缓存里面了</li></ul><h3 id="文件模块-包含独立文件模块和第三方模块"><a href="#文件模块-包含独立文件模块和第三方模块" class="headerlink" title="文件模块(包含独立文件模块和第三方模块)"></a>文件模块(包含独立文件模块和第三方模块)</h3><ul><li>文件模块可以是：<em>.js 模块、</em>.node模块、*.json模块，这些都是文件模块</li><li>无论从npm上下载的第三方模块还是我们自己编写的模块都是文件模块</li></ul><h2 id="module-exports-和-exports"><a href="#module-exports-和-exports" class="headerlink" title="module.exports 和 exports"></a>module.exports 和 exports</h2><h3 id="在每个模块中module表示当前模块对象-里面保存了当前模块对象的各种信息"><a href="#在每个模块中module表示当前模块对象-里面保存了当前模块对象的各种信息" class="headerlink" title="在每个模块中module表示当前模块对象, 里面保存了当前模块对象的各种信息"></a>在每个模块中module表示当前模块对象, 里面保存了当前模块对象的各种信息</h3><h3 id="module-exports-其实就是-require-加载模块时的返回值"><a href="#module-exports-其实就是-require-加载模块时的返回值" class="headerlink" title="module.exports 其实就是 require()加载模块时的返回值"></a>module.exports 其实就是 require()加载模块时的返回值</h3><h3 id="exports-就是module-exports的一个引用"><a href="#exports-就是module-exports的一个引用" class="headerlink" title="exports 就是module.exports的一个引用"></a>exports 就是module.exports的一个引用</h3><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">exports = <span class="built_in">module</span>.exports;</span><br></pre></td></tr></table></figure><h3 id="特别注意：最终暴露给require的返回值的是：module-exports-而不是exports"><a href="#特别注意：最终暴露给require的返回值的是：module-exports-而不是exports" class="headerlink" title="特别注意：最终暴露给require的返回值的是：module.exports, 而不是exports"></a>特别注意：最终暴露给require的返回值的是：module.exports, 而不是exports</h3> <figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br></pre></td><td class="code"><pre><span class="line">  <span class="comment">// To illustrate（说明） the behavior, imagine this hypothetical implementation of require(), which is quite similar to what is actually done by require():</span></span><br><span class="line"></span><br><span class="line">  <span class="function"><span class="keyword">function</span> <span class="title">require</span>(<span class="params">...</span>) </span>&#123;</span><br><span class="line">  <span class="keyword">var</span> <span class="built_in">module</span> = &#123; <span class="attr">exports</span>: &#123;&#125; &#125;;</span><br><span class="line"></span><br><span class="line"></span><br><span class="line">  (<span class="function">(<span class="params"><span class="built_in">module</span>, exports</span>) =&gt;</span> &#123;</span><br><span class="line">    <span class="comment">// Your module code here. In this example, define a function.</span></span><br><span class="line">    <span class="function"><span class="keyword">function</span> <span class="title">some_func</span>(<span class="params"></span>) </span>&#123;&#125;;</span><br><span class="line">    exports = some_func;</span><br><span class="line">    <span class="comment">// At this point, exports is no longer a shortcut to module.exports, and</span></span><br><span class="line">    <span class="comment">// this module will still export an empty default object.</span></span><br><span class="line">    <span class="built_in">module</span>.exports = some_func;</span><br><span class="line">    <span class="comment">// At this point, the module will now export some_func, instead of the</span></span><br><span class="line">    <span class="comment">// default object.</span></span><br><span class="line">  &#125;)(<span class="built_in">module</span>, <span class="built_in">module</span>.exports);</span><br><span class="line"></span><br><span class="line">  </span><br><span class="line">  <span class="keyword">return</span> <span class="built_in">module</span>.exports;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h2 id="require-加载模块时做了2件事"><a href="#require-加载模块时做了2件事" class="headerlink" title="require 加载模块时做了2件事"></a>require 加载模块时做了2件事</h2><ol><li>执行了模块中的代码</li><li>返回了模块中对外暴露的内容（可能是对象、函数等等）</li></ol><h2 id="下载Node-js源码，打开看下"><a href="#下载Node-js源码，打开看下" class="headerlink" title="下载Node.js源码，打开看下"></a>下载Node.js源码，打开看下</h2><h2 id="JavaScript-的严格模式——-quot-use-strict-quot-或-39-use-strict-39"><a href="#JavaScript-的严格模式——-quot-use-strict-quot-或-39-use-strict-39" class="headerlink" title="JavaScript 的严格模式—— &quot;use strict&quot;; 或 &#39;use strict&#39;;"></a>JavaScript 的严格模式—— <code>&quot;use strict&quot;;</code> 或 <code>&#39;use strict&#39;;</code></h2><ul><li>参考链接：<ol><li><a href="http://www.ruanyifeng.com/blog/2013/01/javascript_strict_mode.html" target="_blank" rel="noopener">http://www.ruanyifeng.com/blog/2013/01/javascript_strict_mode.html</a></li><li><a href="https://developer.mozilla.org/zh-CN/docs/Web/JavaScript/Reference/Strict_mode" target="_blank" rel="noopener">https://developer.mozilla.org/zh-CN/docs/Web/JavaScript/Reference/Strict_mode</a></li></ol></li></ul><h1 id="art-template"><a href="#art-template" class="headerlink" title="art-template"></a>art-template</h1><ol><li><p>npm 搜索：art-template</p></li><li><p>参考链接<br><a href="https://www.npmjs.com/package/art-template" target="_blank" rel="noopener">https://www.npmjs.com/package/art-template</a><br><a href="https://aui.github.io/art-template/" target="_blank" rel="noopener">art-template文档</a></p></li></ol>]]></content>
      
      
      <categories>
          
          <category> Nodejs </category>
          
      </categories>
      
      
        <tags>
            
            <tag> Nodejs笔记 </tag>
            
        </tags>
      
    </entry>
    
    <entry>
      <title>nodejs day2</title>
      <link href="/2018/09/24/nodejs(day2)/"/>
      <url>/2018/09/24/nodejs(day2)/</url>
      
        <content type="html"><![CDATA[<link rel="stylesheet" class="aplayer-secondary-style-marker" href="/assets/css/APlayer.min.css"><script src="/assets/js/APlayer.min.js" class="aplayer-secondary-script-marker"></script><h1 id="复习"><a href="#复习" class="headerlink" title="复习"></a>复习</h1><h2 id="了解"><a href="#了解" class="headerlink" title="了解:"></a>了解:</h2><ol><li>浏览器渲染引擎工作原理</li><li>浏览器访问网站过程</li><li>Web开发本质：请求、处理、响应<ul><li>C/S 架构 和 B/S 架构</li></ul></li><li>node.js 是什么？</li><li>node.js 有什么特点？</li><li>node.js 安装</li><li>node.js 开发网站 和 传统方式开发网站（PHP、JSP等）有什么区别？</li><li>node.js REPL<ul><li>如何进入 REPL 环境</li><li>如何退出 REPL 环境</li></ul></li><li>通过创建 js 文件开发 node.js 程序</li></ol><h2 id="重点"><a href="#重点" class="headerlink" title="重点:"></a>重点:</h2><ol start="10"><li>通过 fs 模块实现文件读写操作</li><li>path 模块使用</li><li><code>__dirname</code> 和 <code>__filename</code></li><li>node.js 中异步是如何实现的？为什么说 node.js 即是单线程又是异步非阻塞 I/O 模型？<ul><li>调用栈</li><li>调用队列</li></ul></li><li>编写简单的 http 服务程序，无论请求当前网站下哪个路径，都返回 hello world<ul><li>乱码问题。<code>res.setHeader(&#39;Content-Type&#39;, &#39;text/plain; charset=utf-8&#39;);</code></li><li>设置显示 HTML 内容。<code>res.setHeader(&#39;Content-Type&#39;, &#39;text/html; charset=utf-8&#39;);</code></li></ul></li></ol><h2 id="补充："><a href="#补充：" class="headerlink" title="补充："></a>补充：</h2><ol><li>文件操作时，无需先判断文件是否存在，直接操作即可，如果文件不存在会反应在 error 对象中</li><li>try-catch 的使用</li></ol><h1 id="今日授课内容"><a href="#今日授课内容" class="headerlink" title="今日授课内容"></a>今日授课内容</h1><ol><li><p>通过 node.js 编写 http 服务程序 - 通过读取静态 HTML 文件来响应用户请求(带图片和外部CSS样式)</p></li><li><p>通过 node.js 编写 http 服务程序 - 模拟 Apache 服务器处理静态资源</p><ul><li>mime 第三方模块使用</li></ul></li><li><p>在请求服务器的时候，请求的 url 就是一个标识！</p></li></ol><ol start="7"><li><p>request（http.IncomingMessage） 和 response（ServerResponse） 对象介绍</p><ul><li>request: 服务器解析用户提交的 http 请求报文，将结果解析到 request 对象中。凡是要获取和用户请求相关的数据都可以通过 request 对象获取</li><li>response: 在服务器端用来向用户做出响应的对象。凡是需要向用户（客户端）响应的操作，都需要通过 response 对象来进行。</li></ul></li><li><p>NPM </p></li><li><p>package.json、package-lock.json 文件介绍</p><ul><li>元数据</li></ul></li><li><p>自己设计路由，实现 HackerNews网站部分功能</p><ul><li>underscore 模块介绍、url 模块介绍</li></ul></li></ol><ol start="5"><li>在html页面中写相对路径’./‘ 和 绝对路径 ‘/‘的含义 <ul><li>此处 ./ 相对的是吐出当前页面的url</li></ul></li><li>通过设置 http 响应报文头实现弹框下载功能<ul><li>设置 <code>Content-Type: application/octet-stream</code></li><li>设置 <code>Content-Disposition: attachment; filename=demo.txt</code></li></ul></li></ol><h1 id="其他参考"><a href="#其他参考" class="headerlink" title="其他参考"></a>其他参考</h1><ul><li><p>1、注意在发送不同类型的文件时，要设置好对应的<code>Content-Type</code></p><ul><li><a href="http://tool.oschina.net/commons" target="_blank" rel="noopener">Content-Type参考 OSChina</a></li><li><a href="https://developer.mozilla.org/en-US/docs/Web/HTTP/Basics_of_HTTP/MIME_types" target="_blank" rel="noopener">Content-Type参考 MDN</a></li></ul></li><li><p>2、HTTP状态码参考</p><ul><li><a href="https://www.w3.org/Protocols/rfc2616/rfc2616-sec10.html" target="_blank" rel="noopener">w3org参考</a></li><li><a href="https://www.w3schools.com/tags/ref_httpmessages.asp" target="_blank" rel="noopener">w3schools参考</a></li></ul></li></ul><h1 id="在-html-网页中路径的含义"><a href="#在-html-网页中路径的含义" class="headerlink" title="在 html 网页中路径的含义"></a>在 html 网页中路径的含义</h1><h2 id="在-html-网页中相对路径-‘-‘-和-绝对路径-‘-‘的含义"><a href="#在-html-网页中相对路径-‘-‘-和-绝对路径-‘-‘的含义" class="headerlink" title="在 html 网页中相对路径 ‘./‘ 和 绝对路径 ‘/‘的含义"></a>在 html 网页中相对路径 ‘./‘ 和 绝对路径 ‘/‘的含义</h2><ol><li>“相对路径” 到底 “相对” 的是什么？<ul><li>相对当前请求的路径</li><li>相对于吐出当前网页的路径</li></ul></li></ol><h2 id="网页中的这个路径主要是告诉浏览器向哪个地址发起请求用的"><a href="#网页中的这个路径主要是告诉浏览器向哪个地址发起请求用的" class="headerlink" title="网页中的这个路径主要是告诉浏览器向哪个地址发起请求用的"></a>网页中的这个路径主要是告诉浏览器向哪个地址发起请求用的</h2><ol><li>‘./‘ 表示本次请求从相对于当前页面的请求路径（即服务器返回当前页面时的请求路径）开始</li><li>‘/‘ 表示请求从根目录开始</li></ol><h2 id="打开浏览器来演示，最终主要体现在了请求报文的-url-上。"><a href="#打开浏览器来演示，最终主要体现在了请求报文的-url-上。" class="headerlink" title="打开浏览器来演示，最终主要体现在了请求报文的 url 上。"></a>打开浏览器来演示，最终主要体现在了请求报文的 url 上。</h2><h3 id="演示步骤"><a href="#演示步骤" class="headerlink" title="演示步骤"></a>演示步骤</h3><ol><li>找到之前的静态html页面中带有外部样式表连接的网页</li><li>请求该网页，查看http请求报文中的请求路径</li></ol><h1 id="一、通过静态html响应用户请求"><a href="#一、通过静态html响应用户请求" class="headerlink" title="一、通过静态html响应用户请求"></a>一、通过静态html响应用户请求</h1><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br><span class="line">64</span><br><span class="line">65</span><br><span class="line">66</span><br><span class="line">67</span><br><span class="line">68</span><br><span class="line">69</span><br><span class="line">70</span><br><span class="line">71</span><br><span class="line">72</span><br><span class="line">73</span><br><span class="line">74</span><br><span class="line">75</span><br><span class="line">76</span><br><span class="line">77</span><br><span class="line">78</span><br><span class="line">79</span><br><span class="line">80</span><br><span class="line">81</span><br><span class="line">82</span><br><span class="line">83</span><br><span class="line">84</span><br><span class="line">85</span><br><span class="line">86</span><br><span class="line">87</span><br><span class="line">88</span><br><span class="line">89</span><br><span class="line">90</span><br><span class="line">91</span><br><span class="line">92</span><br><span class="line">93</span><br><span class="line">94</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">// 根据用户不同请求，做出不同响应（响应 现有的 HTML 文件）</span></span><br><span class="line"></span><br><span class="line"><span class="comment">// 加载 http 模块</span></span><br><span class="line"><span class="keyword">var</span> http = <span class="built_in">require</span>(<span class="string">'http'</span>);</span><br><span class="line"><span class="comment">// 加载 fs 模块</span></span><br><span class="line"><span class="keyword">var</span> fs = <span class="built_in">require</span>(<span class="string">'fs'</span>);</span><br><span class="line"><span class="comment">// 加载 path 模块</span></span><br><span class="line"><span class="keyword">var</span> path = <span class="built_in">require</span>(<span class="string">'path'</span>);</span><br><span class="line"></span><br><span class="line"></span><br><span class="line"><span class="comment">// 创建 http 服务，并启动该服务</span></span><br><span class="line">http.createServer(<span class="function"><span class="keyword">function</span> (<span class="params">req, res</span>) </span>&#123;</span><br><span class="line"></span><br><span class="line">  <span class="comment">// 通过 req.url 获取用户请求的路径，根据不同的请求路径服务器做出不同的响应</span></span><br><span class="line">  <span class="keyword">if</span> (req.url === <span class="string">'/'</span> || req.url === <span class="string">'/index'</span>) &#123;</span><br><span class="line">    <span class="comment">// 读取 index.html 文件</span></span><br><span class="line">    fs.readFile(path.join(__dirname, <span class="string">'htmls'</span>, <span class="string">'index.html'</span>),  <span class="function"><span class="keyword">function</span> (<span class="params">err, data</span>) </span>&#123;</span><br><span class="line">      <span class="keyword">if</span> (err) &#123;</span><br><span class="line">        <span class="keyword">throw</span> err;</span><br><span class="line">      &#125;</span><br><span class="line"></span><br><span class="line">      <span class="comment">// 把读取到的 index.html 中的内容直接发送给浏览器</span></span><br><span class="line">      res.end(data);</span><br><span class="line">    &#125;);</span><br><span class="line">  &#125; <span class="keyword">else</span> <span class="keyword">if</span> (req.url === <span class="string">'/login'</span>) &#123;</span><br><span class="line">    <span class="comment">// 读取 index.html 文件</span></span><br><span class="line">    fs.readFile(path.join(__dirname, <span class="string">'htmls'</span>, <span class="string">'login.html'</span>),  <span class="function"><span class="keyword">function</span> (<span class="params">err, data</span>) </span>&#123;</span><br><span class="line">      <span class="keyword">if</span> (err) &#123;</span><br><span class="line">        <span class="keyword">throw</span> err;</span><br><span class="line">      &#125;</span><br><span class="line"></span><br><span class="line">      <span class="comment">// 把读取到的 index.html 中的内容直接发送给浏览器</span></span><br><span class="line">      res.end(data);</span><br><span class="line">    &#125;);</span><br><span class="line">  &#125; <span class="keyword">else</span> <span class="keyword">if</span> (req.url === <span class="string">'/list'</span>) &#123;</span><br><span class="line">   <span class="comment">// 读取 index.html 文件</span></span><br><span class="line">    fs.readFile(path.join(__dirname, <span class="string">'htmls'</span>, <span class="string">'list.html'</span>),  <span class="function"><span class="keyword">function</span> (<span class="params">err, data</span>) </span>&#123;</span><br><span class="line">      <span class="keyword">if</span> (err) &#123;</span><br><span class="line">        <span class="keyword">throw</span> err;</span><br><span class="line">      &#125;</span><br><span class="line"></span><br><span class="line">      <span class="comment">// 把读取到的 index.html 中的内容直接发送给浏览器</span></span><br><span class="line">      res.end(data);</span><br><span class="line">    &#125;);</span><br><span class="line">  &#125; <span class="keyword">else</span> <span class="keyword">if</span> (req.url === <span class="string">'/register'</span>) &#123;</span><br><span class="line">    <span class="comment">// 读取 index.html 文件</span></span><br><span class="line">    fs.readFile(path.join(__dirname, <span class="string">'htmls'</span>, <span class="string">'register.html'</span>),  <span class="function"><span class="keyword">function</span> (<span class="params">err, data</span>) </span>&#123;</span><br><span class="line">      <span class="keyword">if</span> (err) &#123;</span><br><span class="line">        <span class="keyword">throw</span> err;</span><br><span class="line">      &#125;</span><br><span class="line"></span><br><span class="line">      <span class="comment">// 把读取到的 index.html 中的内容直接发送给浏览器</span></span><br><span class="line">      res.end(data);</span><br><span class="line">    &#125;);</span><br><span class="line">  &#125; <span class="keyword">else</span> <span class="keyword">if</span> (req.url === <span class="string">'/images/index.png'</span>) &#123;</span><br><span class="line">    <span class="comment">// 表示用户要请求 images 下的 index.png 图片</span></span><br><span class="line">    fs.readFile(path.join(__dirname, <span class="string">'images'</span>, <span class="string">'index.png'</span>),  <span class="function"><span class="keyword">function</span> (<span class="params">err, data</span>) </span>&#123;</span><br><span class="line">      <span class="keyword">if</span> (err) &#123;</span><br><span class="line">        <span class="keyword">throw</span> err;</span><br><span class="line">      &#125;</span><br><span class="line"></span><br><span class="line">      res.setHeader(<span class="string">'Content-Type'</span>, <span class="string">'image/png'</span>);</span><br><span class="line">      <span class="comment">// 把读取到的 index.html 中的内容直接发送给浏览器</span></span><br><span class="line">      res.end(data);</span><br><span class="line">    &#125;);</span><br><span class="line"></span><br><span class="line">  &#125; <span class="keyword">else</span> <span class="keyword">if</span> (req.url === <span class="string">'/css/index.css'</span>) &#123;</span><br><span class="line">    fs.readFile(path.join(__dirname, <span class="string">'css'</span>, <span class="string">'index.css'</span>),  <span class="function"><span class="keyword">function</span> (<span class="params">err, data</span>) </span>&#123;</span><br><span class="line">      <span class="keyword">if</span> (err) &#123;</span><br><span class="line">        <span class="keyword">throw</span> err;</span><br><span class="line">      &#125;</span><br><span class="line"></span><br><span class="line">      res.setHeader(<span class="string">'Content-Type'</span>, <span class="string">'text/css'</span>);</span><br><span class="line">      <span class="comment">// 把读取到的 index.html 中的内容直接发送给浏览器</span></span><br><span class="line">      res.end(data);</span><br><span class="line">    &#125;);</span><br><span class="line">  &#125; <span class="keyword">else</span> &#123;</span><br><span class="line">    <span class="comment">// 读取 index.html 文件</span></span><br><span class="line">    fs.readFile(path.join(__dirname, <span class="string">'htmls'</span>, <span class="string">'404.html'</span>),  <span class="function"><span class="keyword">function</span> (<span class="params">err, data</span>) </span>&#123;</span><br><span class="line">      <span class="keyword">if</span> (err) &#123;</span><br><span class="line">        <span class="keyword">throw</span> err;</span><br><span class="line">      &#125;</span><br><span class="line"></span><br><span class="line">      <span class="comment">// 把读取到的 index.html 中的内容直接发送给浏览器</span></span><br><span class="line">      res.end(data);</span><br><span class="line">    &#125;);</span><br><span class="line">  &#125;</span><br><span class="line">  </span><br><span class="line"></span><br><span class="line"></span><br><span class="line"></span><br><span class="line">&#125;).listen(<span class="number">9090</span>, <span class="function"><span class="keyword">function</span> (<span class="params"></span>) </span>&#123;</span><br><span class="line">  <span class="built_in">console</span>.log(<span class="string">'http://localhost:9090'</span>);</span><br><span class="line">&#125;);</span><br></pre></td></tr></table></figure><h1 id="二、模拟Apache"><a href="#二、模拟Apache" class="headerlink" title="二、模拟Apache"></a>二、模拟Apache</h1><h2 id="第一步-建立public文件夹把要用的html-css-图片都放进去"><a href="#第一步-建立public文件夹把要用的html-css-图片都放进去" class="headerlink" title="第一步 建立public文件夹把要用的html css 图片都放进去"></a>第一步 建立public文件夹把要用的html css 图片都放进去</h2><h2 id="第二步-下载安装第三方插件mime"><a href="#第二步-下载安装第三方插件mime" class="headerlink" title="第二步 下载安装第三方插件mime"></a>第二步 下载安装第三方插件mime</h2><ol><li>打开 <a href="https://www.npmjs.com/package/mime" target="_blank" rel="noopener">https://www.npmjs.com/package/mime</a></li><li>安装mime  命令：npm install mime （命令不一定是永久的还得看官网改变而改变）<br>(2后面的方法均会因版本的变化而变化与官网为准)</li><li>引入外部模块 const mime = require(‘mime’);</li><li>使用方法 mime.getType(‘txt’);</li></ol><h2 id="第三步使用"><a href="#第三步使用" class="headerlink" title="第三步使用"></a>第三步使用</h2><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br></pre></td><td class="code"><pre><span class="line"></span><br><span class="line"></span><br><span class="line"><span class="comment">// 加载 http 模块</span></span><br><span class="line"><span class="keyword">var</span> http = <span class="built_in">require</span>(<span class="string">'http'</span>);</span><br><span class="line"><span class="keyword">var</span> path = <span class="built_in">require</span>(<span class="string">'path'</span>);</span><br><span class="line"><span class="keyword">var</span> fs = <span class="built_in">require</span>(<span class="string">'fs'</span>);</span><br><span class="line"><span class="keyword">var</span> mime = <span class="built_in">require</span>(<span class="string">'mime'</span>);</span><br><span class="line"></span><br><span class="line"></span><br><span class="line"><span class="comment">// 创建服务</span></span><br><span class="line">http.createServer(<span class="function"><span class="keyword">function</span> (<span class="params">req, res</span>) </span>&#123;</span><br><span class="line">  <span class="comment">// 1. 获取用户请求的路径</span></span><br><span class="line">  <span class="comment">// req.url</span></span><br><span class="line">  <span class="comment">// /css/index.css</span></span><br><span class="line">  <span class="comment">// /images/index.png</span></span><br><span class="line"></span><br><span class="line"></span><br><span class="line">  <span class="comment">// 2. 获取 public 目录的完整路径</span></span><br><span class="line">  <span class="keyword">var</span> publicDir = path.join(__dirname, <span class="string">'public'</span>);</span><br><span class="line"></span><br><span class="line">  <span class="comment">// 3. 根据 public 的路径 和用户请求的路径，最终计算出用户请求的静态资源的完整路径</span></span><br><span class="line">  <span class="keyword">var</span> filename = path.join(publicDir, req.url);</span><br><span class="line">  <span class="comment">// console.log(filename);</span></span><br><span class="line"></span><br><span class="line">  <span class="comment">// 4. 根据文件的完整路径去读取该文件，如果读取到了，则把文件返回给用户，如果读取不到，则返回 404</span></span><br><span class="line">  fs.readFile(filename, <span class="function"><span class="keyword">function</span> (<span class="params">err, data</span>) </span>&#123;</span><br><span class="line">    <span class="comment">// body...</span></span><br><span class="line">    <span class="keyword">if</span> (err) &#123;</span><br><span class="line">      res.end(<span class="string">'文件不存在 404'</span>);</span><br><span class="line">    &#125; <span class="keyword">else</span> &#123;</span><br><span class="line"></span><br><span class="line">      <span class="comment">// 通过第三方模块 mime，来判断不同的资源对应的 Content-Type 的类型</span></span><br><span class="line">      res.setHeader(<span class="string">'Content-Type'</span>, mime.getType(filename));</span><br><span class="line">      <span class="comment">// 如果找到了用户要读取的文件，那么直接把该文件返回给用户</span></span><br><span class="line">      res.end(data);</span><br><span class="line">    &#125;</span><br><span class="line">  &#125;);</span><br><span class="line">  <span class="comment">// res.end('over');</span></span><br><span class="line"></span><br><span class="line"></span><br><span class="line">&#125;).listen(<span class="number">9090</span>, <span class="function"><span class="keyword">function</span> (<span class="params"></span>) </span>&#123;</span><br><span class="line">  <span class="built_in">console</span>.log(<span class="string">'http://localhost:9090'</span>);</span><br><span class="line">&#125;);</span><br></pre></td></tr></table></figure><h1 id="三、url就是一个标示"><a href="#三、url就是一个标示" class="headerlink" title="三、url就是一个标示"></a>三、url就是一个标示</h1><h2 id="index-html"><a href="#index-html" class="headerlink" title="index.html"></a>index.html</h2><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br></pre></td><td class="code"><pre><span class="line">&lt;!DOCTYPE html&gt;</span><br><span class="line">&lt;html lang=&quot;en&quot;&gt;</span><br><span class="line">&lt;head&gt;</span><br><span class="line">  &lt;meta charset=&quot;UTF-8&quot;&gt;</span><br><span class="line">  &lt;title&gt;Hello Index&lt;/title&gt;</span><br><span class="line">&lt;/head&gt;</span><br><span class="line">&lt;body&gt;</span><br><span class="line">  &lt;h1 style=&quot;color: red;&quot;&gt;Hello Index&lt;/h1&gt;</span><br><span class="line">  &lt;h1&gt;你好 首页！！！看乱码吗？&lt;/h1&gt;</span><br><span class="line"></span><br><span class="line">  &lt;img src=&quot;./haha.xxx&quot; alt=&quot;haha.xxx&quot;&gt;//图片路径的变化</span><br><span class="line"></span><br><span class="line">&lt;/body&gt;</span><br><span class="line">&lt;/html&gt;</span><br></pre></td></tr></table></figure><h2 id="add-js"><a href="#add-js" class="headerlink" title="add.js"></a>add.js</h2><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br></pre></td><td class="code"><pre><span class="line"></span><br><span class="line"></span><br><span class="line"><span class="comment">// 加载 http 模块</span></span><br><span class="line"><span class="keyword">var</span> http = <span class="built_in">require</span>(<span class="string">'http'</span>);</span><br><span class="line"><span class="keyword">var</span> path = <span class="built_in">require</span>(<span class="string">'path'</span>);</span><br><span class="line"><span class="keyword">var</span> fs = <span class="built_in">require</span>(<span class="string">'fs'</span>);</span><br><span class="line"><span class="keyword">var</span> mime = <span class="built_in">require</span>(<span class="string">'mime'</span>);</span><br><span class="line"></span><br><span class="line"></span><br><span class="line"><span class="comment">// 创建服务</span></span><br><span class="line">http.createServer(<span class="function"><span class="keyword">function</span> (<span class="params">req, res</span>) </span>&#123;</span><br><span class="line"></span><br><span class="line">  <span class="keyword">if</span> (req.url === <span class="string">'/index.do'</span> || req.url === <span class="string">'/index.html'</span>) &#123;</span><br><span class="line">    <span class="comment">// 读取 index.html 并返回</span></span><br><span class="line"></span><br><span class="line">    fs.readFile(path.join(__dirname, <span class="string">'index.html'</span>), <span class="function"><span class="keyword">function</span> (<span class="params">err, data</span>) </span>&#123;</span><br><span class="line">      <span class="keyword">if</span> (err) &#123;</span><br><span class="line">        <span class="keyword">throw</span> err;</span><br><span class="line">      &#125;</span><br><span class="line">      res.end(data);</span><br><span class="line">    &#125;);</span><br><span class="line">  &#125; <span class="keyword">else</span> <span class="keyword">if</span> (req.url === <span class="string">'/haha.xxx'</span>) &#123;</span><br><span class="line">     fs.readFile(path.join(__dirname, <span class="string">'150.jpg'</span>), <span class="function"><span class="keyword">function</span> (<span class="params">err, data</span>) </span>&#123;</span><br><span class="line">      <span class="keyword">if</span> (err) &#123;</span><br><span class="line">        <span class="keyword">throw</span> err;</span><br><span class="line">      &#125;</span><br><span class="line">      res.setHeader(<span class="string">'Content-Type'</span>, <span class="string">'image/jpeg'</span>);</span><br><span class="line">      res.end(data);</span><br><span class="line">    &#125;);</span><br><span class="line">  &#125;</span><br><span class="line">  </span><br><span class="line">&#125;).listen(<span class="number">9090</span>, <span class="function"><span class="keyword">function</span> (<span class="params"></span>) </span>&#123;</span><br><span class="line">  <span class="built_in">console</span>.log(<span class="string">'http://localhost:9090'</span>);</span><br><span class="line">&#125;);</span><br></pre></td></tr></table></figure><h1 id="四、request-对象-和-response对象"><a href="#四、request-对象-和-response对象" class="headerlink" title="四、request 对象 和 response对象"></a>四、request 对象 和 response对象</h1><h2 id="request-对象"><a href="#request-对象" class="headerlink" title="request 对象"></a>request 对象</h2><ul><li>request 对象类型 &lt;http.IncomingMessage&gt;, 继承自stream.Readable</li><li>request 对象常用成员<ul><li><code>request.headers</code></li><li><code>request.rawHeaders</code></li><li><code>request.httpVersion</code></li><li><code>request.method</code></li><li><code>request.url</code></li></ul></li></ul><h2 id="response-对象"><a href="#response-对象" class="headerlink" title="response 对象"></a>response 对象</h2><ul><li><p>response 对象类型 &lt;http.ServerResponse&gt;</p></li><li><p>response 对象常用成员</p><ul><li><code>response.writeHead(statusCode[, statusMessage][, headers])</code><ol><li>This method must only be called once on a message and it must be called before response.end() is called.</li></ol><ul><li>这个方法在每次请求响应前都必须被调用（只能调用一次）。并且必须在end()方法调用前调用</li></ul></li></ul></li></ul><pre><code>2. If you call response.write() or response.end() before calling this, the implicit/mutable headers will be calculated and call this function for you.- 如果在调用writeHead()方法之前调用了write() 或 end()方法，系统会自动帮你调用writeHead()方法，并且会生成默认的响应头3. When headers have been set with response.setHeader(), they will be merged with any headers passed to response.writeHead(), with the headers passed to response.writeHead() given precedence.- 如果通过 res.setHeader() 也设置了响应头，那么系统会将serHeader()设置的响应头和writeHead()设置的响应头合并。 并且writeHead()的设置优先</code></pre><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">// 示例代码：</span></span><br><span class="line">res.writeHead(<span class="number">200</span>, <span class="string">'OK'</span>, &#123;</span><br><span class="line">  <span class="string">'Content-Type'</span>: <span class="string">'text/html; charset=utf-8'</span>,</span><br><span class="line">  <span class="string">'Content-Length'</span>: Buffer.byteLength(msg)</span><br><span class="line">&#125;);</span><br></pre></td></tr></table></figure><ul><li><p><code>response.write(chunk[, encoding][, callback])</code></p><ul><li>参数1：要写入的数据，可以是字符串或二进制数据，<strong>必填</strong>。</li><li>参数2：编码，默认是utf8，选填。</li><li>参数3：回调函数，选填。</li></ul></li><li><p><code>response.end([data][, encoding][, callback])</code></p><ul><li>结束响应。</li><li>This method signals to the server that all of the response headers and body have been sent; that server should consider this message complete. <strong><em>The method, <code>response.end()</code>, MUST be called on each response</em></strong>.</li></ul><ul><li>res.end()这个方法告诉服务器所有要发送的响应头和响应体都发送完毕了。可以人为这次响应结束了。</li><li>同时每次响应都必须调用该方法，用来结束响应</li></ul></li></ul><pre><code>* 参数1：结束响应前要发送的数据，选填。* 参数2：编码，选填。* 参数3：回调函数，选填。</code></pre><ul><li><p><code>response.setHeader(name, value)</code></p><ul><li>设置响应报文头</li></ul></li><li><p><code>response.statusCode</code></p><ul><li>设置或读取http响应码</li></ul></li><li><p><code>response.statusMessage</code></p><ul><li>设置或读取http响应状态消息</li></ul></li></ul><h1 id="五、NPM-Node-Package-Manager-Node-包管理器"><a href="#五、NPM-Node-Package-Manager-Node-包管理器" class="headerlink" title="五、NPM - Node Package Manager - Node 包管理器"></a>五、NPM - Node Package Manager - Node 包管理器</h1><h2 id="NPM-是什么？"><a href="#NPM-是什么？" class="headerlink" title="NPM 是什么？"></a>NPM 是什么？</h2><ul><li>npm（全称Node Package Manager，即node包管理器）是Node.js默认的、以JavaScript编写的软件包管理系统。</li><li><a href="https://www.npmjs.com/" target="_blank" rel="noopener">npm 官方网站</a></li><li><a href="https://docs.npmjs.com/" target="_blank" rel="noopener">npm 官方文档</a></li></ul><h2 id="一般当我们说npm的时候可能指3件事"><a href="#一般当我们说npm的时候可能指3件事" class="headerlink" title="一般当我们说npm的时候可能指3件事"></a>一般当我们说npm的时候可能指3件事</h2><ol><li>NPM 网站：<a href="https://www.npmjs.com/" target="_blank" rel="noopener">https://www.npmjs.com/</a></li><li>NPM 包管理库，存储了大量的JavaScript代码库</li><li>NPM 客户端，我们所使用的npm命令行工具。使用JavaScript开发的基于node.js的命令行工具，本身也是Node的一个包。</li></ol><h2 id="参考图片"><a href="#参考图片" class="headerlink" title="参考图片"></a>参考图片</h2><p><img src="imgs/npm.png" alt="NPM"></p><p><img src="imgs/npm1.png" alt="NPM"></p><h2 id="NPM-官方解释："><a href="#NPM-官方解释：" class="headerlink" title="NPM 官方解释："></a>NPM 官方解释：</h2><ul><li><p>npm is the package manager for JavaScript and the world’s largest software registry.</p><ul><li>npm 是一个JavaScript包管理器，并且是世界上最大的软件登记处</li></ul></li><li><p>discover packages of reusable code — and assemble them in powerful new ways.</p><ul><li>发现可重用代码，并集成代码包到项目中的全新的、强大方式</li></ul></li></ul><ul><li>npm makes it easy for JavaScript developers to share and reuse code, and it makes it easy to update the code that you’re sharing.<ul><li>npm 让JavaScript开发者共享和重用代码变的更容易，同时也让我们更容易地更新正在被共享的代码</li></ul></li></ul><h2 id="npm与-node-js"><a href="#npm与-node-js" class="headerlink" title="npm与 node.js"></a>npm与 node.js</h2><ul><li>npm是Node.js默认的软件包管理系统。安装完毕node后，会默认安装好npm</li><li>npm本身也是基于Node.js开发的包（软件）</li></ul><h2 id="如何安装-NPM"><a href="#如何安装-NPM" class="headerlink" title="如何安装 NPM?"></a>如何安装 NPM?</h2><ul><li>npm会随着Node.js自动安装，安装完毕node.js后会自动安装npm</li><li>查看当前npm版本：<code>npm -v</code></li><li>更新npm：<code>npm install npm@latest -g</code></li></ul><h2 id="NPM-使用"><a href="#NPM-使用" class="headerlink" title="NPM 使用"></a>NPM 使用</h2><ol><li>在 <a href="https://www.npmjs.com/" target="_blank" rel="noopener">https://www.npmjs.com/</a> 网站找到需要的包</li><li>在项目的根目录下，执行<code>npm install 包名称</code>安装</li><li>在node.js代码中通过 <code>require(&#39;包名&#39;);</code> 加载该模块</li><li>注意：通过<code>npm install 包名</code>安装的包，会自动下载到当前目录下的<code>node_modules</code>目录下，如果该目录不存在，则创建，如果已存在则直接下载进去。</li><li>在代码中通过 <code>require(&#39;包名&#39;);</code> 加载该模块</li></ol><p>—– 上面说的这种方式叫做 本地安装。</p><h2 id="NPM-全局安装介绍"><a href="#NPM-全局安装介绍" class="headerlink" title="NPM 全局安装介绍"></a>NPM 全局安装介绍</h2><ol><li>什么是 npm 全局安装？<ul><li><code>npm install 包名 -g</code> npm 全局安装指的是把包安装成了一个命令行工具。</li></ul></li></ol><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">// 通过npm全局安装mime</span></span><br><span class="line">npm install mime -g</span><br><span class="line"></span><br><span class="line"><span class="comment">//安装完毕后可以在命令行中直接使用</span></span><br><span class="line">mime a.txt 命令来查看对应的结果</span><br></pre></td></tr></table></figure><ol start="2"><li><p>npm 全局安装实际做了2件事：</p><ol><li><p>下载包到一个指定的目录<code>C:\Users\username\AppData\Roaming\npm\node_modules</code></p></li><li><p>创建一段命令行执行的代码。<code>C:\Users\username\AppData\Roaming\npm\mime -&gt; C:\Users\steve xiaohu zhao\AppData\Roaming\npm\node_modules\mime\cli.js</code></p></li></ol></li></ol><h2 id="NPM-安装建议"><a href="#NPM-安装建议" class="headerlink" title="NPM 安装建议"></a>NPM 安装建议</h2><ol><li>全局安装只是为了可以当做命令行使用而已</li></ol><h2 id="五、npm常用命令介绍"><a href="#五、npm常用命令介绍" class="headerlink" title="五、npm常用命令介绍"></a>五、npm常用命令介绍</h2><ol><li>install，安装包。<code>npm install 包名</code></li><li>uninstall，卸载包。·npm uninstall 包名`</li><li><p>version，查看当前npm版本。<code>npm version</code> 或 <code>npm -v</code></p></li><li><p>init，创建一个package.json文件。<code>npm init</code></p></li><li>注意：当使用 <code>npm init -y</code>  的时候，如果当前文件夹（目录）的名字比较怪（有大写、有中文等等）就会影响npm init -y 的一步生成操作，此时需要 npm init 根据向导来生成</li></ol><h2 id="“模块”（Modules）和”包”（Packages）的区别"><a href="#“模块”（Modules）和”包”（Packages）的区别" class="headerlink" title="“模块”（Modules）和”包”（Packages）的区别"></a>“模块”（Modules）和”包”（Packages）的区别</h2><ol><li>A <strong>module</strong> is any file or directory that can be loaded by Node.js’ <code>require()</code>. </li></ol><ul><li>模块可以是任何一个文件或目录（目录下可以有很多个文件），只要能被node.js通过require()即可。</li></ul><ol start="2"><li>A <strong>package</strong> is a file or directory that is described by a <code>package.json</code>. This can happen in a bunch of different ways!</li></ol><ul><li>包是一个文件或目录（目录下可以有多个文件）必须有一个package.json文件来描述，就可以是一个包。</li></ul><p>node.js 错误调试：</p><ol><li><p>当开启服务后，在浏览器中输入地址，如果出现浏览问题，首先要先看 服务器控制台是否报错。如果报错，直接根据服务器报错进行排错。</p></li><li><p>打开浏览器开发者工具中的 “网络” 部分，查看请求是否成功发出去了</p></li></ol><ul><li>看一下请求报文是不是和我们想的一样</li><li>响应状态码</li></ul><h1 id="六、package-json-文件"><a href="#六、package-json-文件" class="headerlink" title="六、package.json 文件"></a>六、package.json 文件</h1><h2 id="package-json-文件的作用？"><a href="#package-json-文件的作用？" class="headerlink" title="package.json 文件的作用？"></a>package.json 文件的作用？</h2><ol><li>package.json 文件是一个包说明文件（项目描述文件），用来管理组织一个包（一个项目）</li><li>package.json 文件是一个 json 格式的文件</li><li>位于当前项目的根目录下</li></ol><p>元数据</p><h2 id="package-json-文件中常见的项有哪些？"><a href="#package-json-文件中常见的项有哪些？" class="headerlink" title="package.json 文件中常见的项有哪些？"></a>package.json 文件中常见的项有哪些？</h2><ul><li>name<ul><li>包的名字</li></ul></li><li>version<ul><li>包的版本</li></ul></li><li>description<ul><li>包描述</li></ul></li><li>author<ul><li>包的作者</li></ul></li><li>main<ul><li>包的入口js文件，从main字段这里指定的那个js文件开始执行</li></ul></li><li>dependencies<ul><li>当前包依赖的其他包</li></ul></li></ul><h2 id="如何创建一个-package-json-文件"><a href="#如何创建一个-package-json-文件" class="headerlink" title="如何创建一个 package.json 文件"></a>如何创建一个 package.json 文件</h2><ol><li>通过 <code>npm init</code> 命令 或者 <code>npm init -y</code> 或 <code>npm init -yes</code>  命令</li><li>手动创建一个</li></ol><h3 id="注意"><a href="#注意" class="headerlink" title="注意"></a>注意</h3><ol><li>通过 <code>npm init -y</code> 或 <code>npm init -yes</code> 创建 package.json 文件时，执行命令所在的目录接名称中不能包含大写字母</li><li>package.json 文件中，项目名称本身不能包含大写字母</li><li>npm 更新新版本后，项目所在的文件夹如果包含中文等特殊字符，创建的时候不会提示一步一步的输入，直接报错。</li></ol><h2 id="官方介绍"><a href="#官方介绍" class="headerlink" title="官方介绍"></a>官方介绍</h2><ol><li><a href="https://docs.npmjs.com/files/package.json" target="_blank" rel="noopener">package.json</a></li><li><a href="https://docs.npmjs.com/getting-started/using-a-package.json" target="_blank" rel="noopener">Using a package.json</a></li></ol><h1 id="七、自己设计路由实现-Hacker-News-网站部分功能"><a href="#七、自己设计路由实现-Hacker-News-网站部分功能" class="headerlink" title="七、自己设计路由实现 Hacker News 网站部分功能"></a>七、自己设计路由实现 Hacker News 网站部分功能</h1><p>参考网址：<a href="https://news.ycombinator.com/" target="_blank" rel="noopener">https://news.ycombinator.com/</a></p><h2 id="步骤"><a href="#步骤" class="headerlink" title="步骤"></a>步骤</h2><ol><li>实现新闻列表页 - 首页 - /index  get </li><li>实现新闻详情页 - 详情页 - /details get</li><li><p>实现新闻添加页 - 提交页 - /submit get<br>/add get<br>/add post</p></li><li><p>实现保存数据功能 - 将数据写入到 data.json 文件中</p></li><li>实现首页数据的动态加载 - 根据.json文件来加载数据</li></ol><h2 id="实现思路"><a href="#实现思路" class="headerlink" title="实现思路"></a>实现思路</h2><h3 id="规划项目目录结构"><a href="#规划项目目录结构" class="headerlink" title="规划项目目录结构"></a>规划项目目录结构</h3><ul><li>HackerNews<ul><li>resources<ul><li>css</li><li>images</li></ul></li><li>views（存放html模板页面）</li><li>data（保存新闻数据 data.json 文件）</li><li>app.js 文件（该文件即我们写服务器端JavaScript代码的地方，用来处理用户请求）</li><li>package.json</li></ul></li></ul><h3 id="路由设计"><a href="#路由设计" class="headerlink" title="路由设计"></a>路由设计</h3><ol><li>注意：此处要自己设计路由，而不是像模拟 Apache 静态资源服务器一样</li></ol><h4 id="根据不同的请求返回相应的功能"><a href="#根据不同的请求返回相应的功能" class="headerlink" title="根据不同的请求返回相应的功能"></a>根据不同的请求返回相应的功能</h4><ol><li>当请求 <code>/</code> 和 <code>/index</code> 时，返回 <code>views/index.html</code> 文件内容</li><li>当请求 <code>/details</code> 时，返回 <code>views/details.html</code> 文件内容</li><li>当请求 <code>/submit</code> 时，返回 <code>views/submit.html</code> 文件内容</li><li>当请求 <code>/add</code> 时，保存用户提交的新闻数据，并将重定向到index页面。</li><li>对于其他以’/resources’开头的都当做静态资源来处理。</li></ol><h3 id="知识点"><a href="#知识点" class="headerlink" title="知识点"></a>知识点</h3><ol><li>封装<code>render()</code>函数，将<code>render()</code>函数挂载到<code>response</code>对象上，实现<code>response.render()</code>效果。</li><li>使用<code>underscore</code>模块中的模板引擎功能，渲染<code>index</code>页面中的新闻数据。</li><li>通过 url 模块来处理 get 请求</li></ol><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">// 1. 将 req.url 通过 url 模块来处理</span></span><br><span class="line">  <span class="keyword">var</span> urlObj = url.parse(req.url, <span class="literal">true</span>);</span><br><span class="line"></span><br><span class="line">  <span class="comment">// 1.1 获取用户请求的URL，不带查询字符串</span></span><br><span class="line">  <span class="comment">// 注意：此时的reqUrl中不包含 get 的请求参数，只是pathname</span></span><br><span class="line">  <span class="keyword">var</span> reqUrl = urlObj.pathname.toLowerCase();</span><br><span class="line"></span><br><span class="line">  <span class="comment">// urlObj.query</span></span><br></pre></td></tr></table></figure><ol start="4"><li>服务器端接收 post 提交过来的数据</li><li>通过 querystring 模块将查询字符串转换为 json 对象</li></ol><h2 id="JSON在线格式化"><a href="#JSON在线格式化" class="headerlink" title="JSON在线格式化"></a>JSON在线格式化</h2><p><a href="http://tool.oschina.net/codeformat/json" target="_blank" rel="noopener">JSON在线格式化</a></p>]]></content>
      
      
      <categories>
          
          <category> Nodejs </category>
          
      </categories>
      
      
        <tags>
            
            <tag> Nodejs笔记 </tag>
            
        </tags>
      
    </entry>
    
    <entry>
      <title>学习心路历程</title>
      <link href="/2018/09/22/2018-09-22/"/>
      <url>/2018/09/22/2018-09-22/</url>
      
        <content type="html"><![CDATA[<link rel="stylesheet" class="aplayer-secondary-style-marker" href="/assets/css/APlayer.min.css"><script src="/assets/js/APlayer.min.js" class="aplayer-secondary-script-marker"></script><p>作为一个 IT 业学者，快要从事软件技术开发类的大二学生我内心很慌，不知道自己到底准备好了没有，感觉自己准备好了但是自己的技术好像并没有那么好，有时候还是很迷茫的，不知道自己到底要做什么该做什么，做什么才是对的一直都很迷糊该走前端路线还是后台开发呢，还是做全栈什么都要学<br>本来我以为前端只是很简单的页面，但是接触了后才发现虽然只是分了三个比较大一点点方向就没什么了，但是要学好并不是那么的容易的 css，html，js 掌握后还要学习各种的框架不断的去练习才可以让自己更加快速的写页面，然后学了一点点后台 php 和 java，就觉得自己很厉害了想去写一个系统<br>在我开始构想写这一个系统的时候我一开始写的是登陆页面的前后台，在我还没有写完的时候我遇到了问题后台数据的传输，虽然我解决了这个问题但是我也发现了自己所用的方法是最笨嘬的方法，在那个时候慢慢的回想自己学的知识，才发现自己写前端页面用原生写是可以写的出来的但是用到框架 vue 就不太懂，很多之前的知识因为不用也开始慢慢的忘记了，在这时候我才发现自己对前端有一定的了解但是对后台的庞大我是一无所知，比小白还小吧，虽然学过java，c，php这些后台语言但是没有用过这些写过系统，java写过的项目也是很早之前的都不记得了，用php做后台来写的是可以但是用的方法实在是太笨拙了，对于后台的很多交互方式作用也并不是很了解，只是会简单的与数据库进行交互，这对于在公司工作的话远远不够，所以又要开始新的历程，php框架开始php框架学习的时候，一开始配置apache服务器的时候弄了两天找了各种的方法才配置好服务器当时的内心真的是奔溃了，然后开始写代码了才发现后台语言框架的编写是很方便的但是在这过程中也遇到了问题，框架无法渲染可视页面，也是搞了两天各种方法用遍，后来的这几天都没有看php，而是把我一直在看的js高级教程看完，然后看node，后台的庞大让我有点害怕所以暂时放弃一下后台把前端的一些知识巩固一下再去看后台，把我的项目写好，作为编程学习者来说我并不算是优秀的一个，我算是那种比较懒又不聪明的那个，所以很多时候还是坚持着每天都学习，让自己每天都可以进步一点点，可能是我比较乐观我觉得自己比昨天好那就是自己进步了，但是我并不觉得自己很努力，因为还有更多的人比我更聪明更厉害更谦虚更努力，我本来都一无所有了虽然不惧怕从头再来，但是我输不起了，没有时间可以让我再去浪费再去输了，大二了马上就是要出来实习没有再多的机会可以让我去学习和拼搏，老师说我那么拼干什么说我很努力，但是我并没有觉得我自己很努力，我是觉得我永远感觉不到自己到底又多懒，我的对手到底有多强大，别人到底付出了多少的时间精力代价，而我只是每天都学习几个小时就觉得很累很累的人，我也不知道我自己这么懒可以用什么和别人去比拼，我也不想输，所以只可以每天坚持学一点，虽然追不上比我厉害很多的人但是起码不会让自己堕落下去，起码我还可以挺起胸膛为了生活去拼搏，我也不是家里有矿的人，我的父母什么也没有留给我，以后要什么样的生活，什么都要自己去打拼回来，我的父母和我说他们那时候爷爷奶奶也是什么都没有给他们都是他们自己一手一脚熬回来的，生活真的不容易，社会也不容易，能生存下来并且养大我们也不是容易，都是点点都熬出来我们没有经历过抗战内战文化大革命闹饥荒那些，我们从出生到现在都没有熬过一日苦爸妈都能给饱饭吃没有试过饿肚子，社会都残酷无情并不是不知道，要是想站稳脚步那必须把自己武装起来，打造成不屈的钢铁才能抵御最强烈的风暴，虽然这样真的很辛苦也不一定可以做到，但是真的没时间了，累了可以歇但是歇息的时候别人也是在奋斗的根本追不上别人的脚步，那些更加厉害的人更加的努力，不知道自己凭什么闲着，大家都是一个头颅两个手两个脚，为何自己就是那么的差劲，别人就是那么的厉害，别人都是在拼命为什么自己不可以，继续加油即使输了也没有关系，生活不会亏待付出努力的人<br>上学期认识了个已经毕业的师兄一直都没这么联系，是一位很厉害的师兄，这个学期突然联系我，不断的想我去参加比赛和我说了很多，从中学习到了很多也发现了很多自己的陋习，知道了很多的一些自己以前都不注意的问题也告诉了我一些方向，不断的在后面推动的我，和高手谈话每一次都可以收益非浅，不过说起引路人，还是在大一的时候认识的一个公司里面有着十几年工作经验的老大哥，一直对我比较好，每次请教都很细心的教导也不摆老大哥的架子很好人，算是我的引路人，从一开始的css，js，html，框架，php等这些知识都是看他的教程和与他交流学习，不断的指引我向前面走，感谢老大哥<br>虽然学校大一开始开始c语言html但是都是很基础很基础所以每一次上课都没有什么学的只可以回去自己学，大一第二学期的时候有java和数据库，但是也是非常基础对数据库没有什么兴趣所以并不是学的很好，这个学期开设了js，h5，javaweb，ps但是除了javaweb以外我都学过了而且学校一直都是学的很基础的东西完全都没有学到很多的真本事，虽然说打好基础很重要但是全部都是基础也没什么用，没有写过项目不知道着么去写项目，要这么去布局如何写，着么才可以达到很好的效果，根本都没有，然而经常被老师危险期末不给过我也是醉了！只可以自己控制好自己不断的去学习，但愿还能坚持住，彩虹的尽头总是会有希望的！</p>]]></content>
      
      
      <categories>
          
          <category> 个人 </category>
          
      </categories>
      
      
        <tags>
            
            <tag> 个人 </tag>
            
        </tags>
      
    </entry>
    
    <entry>
      <title>nodejs day1</title>
      <link href="/2018/09/22/nodejs(day1)/"/>
      <url>/2018/09/22/nodejs(day1)/</url>
      
        <content type="html"><![CDATA[<link rel="stylesheet" class="aplayer-secondary-style-marker" href="/assets/css/APlayer.min.css"><script src="/assets/js/APlayer.min.js" class="aplayer-secondary-script-marker"></script><h1 id="day1十部曲"><a href="#day1十部曲" class="headerlink" title="day1十部曲"></a>day1十部曲</h1><p>1.课程安排<br>2.授课思路<br>3.浏览器工作原理<br>4.web开发的本质<br>5.nodejs的介绍<br>6.基于nodejs编写程序<br>7.nodejs学习<br>8.nvm<br>9.buffer<br>10.总结</p><h2 id="一、课程安排"><a href="#一、课程安排" class="headerlink" title="一、课程安排"></a>一、课程安排</h2><h3 id="课程总天数：7天"><a href="#课程总天数：7天" class="headerlink" title="课程总天数：7天"></a>课程总天数：7天</h3><h3 id="第-01-天："><a href="#第-01-天：" class="headerlink" title="第 01 天："></a>第 01 天：</h3><ul><li>浏览器工作原理</li><li>浏览器访问网站全过程</li><li>node.js 介绍</li><li>通过 node.js 编写服务端程序</li></ul><h3 id="第-02-天："><a href="#第-02-天：" class="headerlink" title="第 02 天："></a>第 02 天：</h3><ul><li>node.js 中的 request 对象 和 response 对象</li><li>npm 介绍</li><li>HTML 页面中路径的真实含义</li><li>package.json 文件</li><li>路由介绍、设计路由</li><li>代码封装</li><li>开始实现 Hacker News 网站</li><li>循环中的异步</li><li>封装异步函数</li><li>待定：模拟 Chrome 显示文件列表</li></ul><h3 id="第-03-天："><a href="#第-03-天：" class="headerlink" title="第 03 天："></a>第 03 天：</h3><ul><li>HackerNews 新闻列表展示</li><li>添加新闻页</li><li>新闻详情页</li><li>underscore</li><li>module 、 module.exports 和 exports</li><li>node.js 模块化</li></ul><h3 id="第-04-天："><a href="#第-04-天：" class="headerlink" title="第 04 天："></a>第 04 天：</h3><ul><li>HackerNews 代码模块化</li><li>http-server</li><li>express 介绍</li><li>中间件</li><li>通过 express 完成 HackerNews 思路</li></ul><h3 id="第-05-天："><a href="#第-05-天：" class="headerlink" title="第 05 天："></a>第 05 天：</h3><ul><li>express 实现 Hacker News</li><li>MongoDb 介绍<h3 id="第-06-天："><a href="#第-06-天：" class="headerlink" title="第 06 天："></a>第 06 天：</h3></li><li>完善 Hacker News</li><li>封装 DB 模块<h3 id="第-07-天："><a href="#第-07-天：" class="headerlink" title="第 07 天："></a>第 07 天：</h3></li><li>实现 sms</li><li>ajax 实现 sms</li><li>node.js 抓取数据、cheerio 介绍</li><li>模拟 body-parser 中间件</li></ul><h2 id="二、授课思路"><a href="#二、授课思路" class="headerlink" title="二、授课思路"></a>二、授课思路</h2><p>准备知识</p><h3 id="浏览器工作原理"><a href="#浏览器工作原理" class="headerlink" title="浏览器工作原理"></a>浏览器工作原理</h3><ol><li>浏览器组成</li><li>浏览器渲染引擎工作原理</li><li>通过浏览器访问网站全过程</li></ol><h3 id="Web-开发本质"><a href="#Web-开发本质" class="headerlink" title="Web 开发本质"></a>Web 开发本质</h3><ol><li>请求: 客户端发起请求.</li><li>处理: 服务器 处理请求.</li><li>响应: 服务器将处理结果发送给客户端.</li></ol><p>Web应用程序与桌面应用程序对比（计算器案例）</p><p>关于C/S（Client/Server） 和 B/S（Browser/Server）</p><p><img src="/imgs/client-server.png" alt="Client / Server"></p><h3 id="node-js-介绍"><a href="#node-js-介绍" class="headerlink" title="node.js 介绍"></a>node.js 介绍</h3><ol><li>node.js 是什么？</li><li>node.js 有哪些特点？</li><li>node.js 官方网站</li><li>node.js 学习资源</li><li>为什么要学习Node.js?</li><li>Node.js安装和配置</li><li>Node.js 开发 Web 应用程序 和 PHP、Java、ASP.Net等传统模式开发Web应用程序区别</li></ol><h3 id="node-js-编程"><a href="#node-js-编程" class="headerlink" title="node.js 编程"></a>node.js 编程</h3><ol><li>node.js 编写控制台程序</li><li>node.js 进行文件读写<ul><li>同步 &amp; 异步读取文件</li></ul></li><li>node.js 创建 http 服务程序<br>解释异步是如何实现的？ eventloop<br>npm 介绍<br>node.js 实现新闻列表</li></ol><h2 id="三、浏览器工作原理"><a href="#三、浏览器工作原理" class="headerlink" title="三、浏览器工作原理"></a>三、浏览器工作原理</h2><h3 id="浏览器的组成"><a href="#浏览器的组成" class="headerlink" title="浏览器的组成"></a>浏览器的组成</h3><ul><li>人机交互部分（UI）</li><li>网络请求部分（Socket）</li><li>JavaScript引擎部分（解析执行JavaScript）</li><li>渲染引擎部分（渲染HTML、CSS等）</li><li>数据存储部分（cookie、HTML5中的本地存储LocalStorage、SessionStorage）</li></ul><p>sqlite</p><h3 id="主流渲染引擎"><a href="#主流渲染引擎" class="headerlink" title="主流渲染引擎"></a>主流渲染引擎</h3><h4 id="介绍"><a href="#介绍" class="headerlink" title="介绍"></a>介绍</h4><ol><li><p>渲染引擎 又叫 排版引擎 或 浏览器内核。</p></li><li><p>主流的 渲染引擎 有</p><ul><li><strong>Chrome浏览器</strong>: Blink引擎（WebKit的一个分支）。</li><li><strong>Safari浏览器</strong>: WebKit引擎，windows版本2008年3月18日推出正式版，但苹果已于2012年7月25日停止开发Windows版的Safari。</li><li><strong>FireFox浏览器</strong>: Gecko引擎。</li><li><strong>Opera浏览器</strong>: Blink引擎(早期版使用Presto引擎）。</li><li><strong>Internet Explorer浏览器</strong>: Trident引擎。</li><li><strong>Microsoft Edge浏览器</strong>: EdgeHTML引擎（Trident的一个分支）。</li></ul></li></ol><h4 id="工作原理"><a href="#工作原理" class="headerlink" title="工作原理"></a>工作原理</h4><ol><li>解析HTML构建Dom树（Document Object Model，文档对象模型），DOM 是W3C组织推荐的处理可扩展置标语言的标准编程接口。</li></ol><ol start="2"><li><p>构建<em>渲染树</em>，<em>渲染树</em>并不等同于<em>Dom树</em>，因为像<code>head标签 或 display: none</code>这样的元素就没有必要放到<em>渲染树</em>中了，但是它们在<em>Dom树</em>中。</p></li><li><p>对<em>渲染树</em>进行布局，定位坐标和大小、确定是否换行、确定position、overflow、z-index等等，这个过程叫<code>&quot;layout&quot; 或 &quot;reflow&quot;</code>。</p></li><li><p>绘制<em>渲染树</em>，调用操作系统底层API进行绘图操作。</p></li></ol><h4 id="渲染引擎工作原理示意图"><a href="#渲染引擎工作原理示意图" class="headerlink" title="渲染引擎工作原理示意图"></a>渲染引擎工作原理示意图</h4><p><strong>渲染引擎工作原理示意图</strong></p><p><img src="/imgs/flow.png" alt="渲染引擎工作原理"></p><p><strong>WebKit工作原理（Chrome、Safari、Opera）</strong></p><p><img src="/imgs/webkitflow.png" alt="Blink渲染引擎工作原理"></p><p><strong>Gecko工作原理（FireFox）</strong></p><p><img src="/imgs/gecko.jpg" alt="Gecko渲染引擎工作原理"></p><h4 id="浏览器的-reflow-或-layout-过程"><a href="#浏览器的-reflow-或-layout-过程" class="headerlink" title="浏览器的 reflow 或 layout 过程"></a>浏览器的 reflow 或 layout 过程</h4><p><a href="https://www.youtube.com/watch?v=ZTnIxIA5KGw" target="_blank" rel="noopener">https://www.youtube.com/watch?v=ZTnIxIA5KGw</a></p><h4 id="打开-Chrome-的-Rendering-功能"><a href="#打开-Chrome-的-Rendering-功能" class="headerlink" title="打开 Chrome 的 Rendering 功能"></a>打开 Chrome 的 Rendering 功能</h4><p>第一步：</p><p><img src="/imgs/chrome_rendering1.png" alt="第一步"></p><p>第二步：</p><p><img src="/imgs/chrome_rendering2.png" alt="第二步"></p><h3 id="浏览器访问网站过程"><a href="#浏览器访问网站过程" class="headerlink" title="浏览器访问网站过程"></a>浏览器访问网站过程</h3><blockquote><ol><li>在浏览器地址栏中输入网址。</li></ol></blockquote><p><img src="/imgs/taobao_url.png" alt="淘宝网址"></p><blockquote><ol start="2"><li>浏览器通过用户在地址栏中输入的URL构建HTTP请求报文。</li></ol></blockquote><figure class="highlight http"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">GET</span> <span class="string">/</span> HTTP/1.1</span><br><span class="line"><span class="attribute">Host</span>: www.taobao.com</span><br><span class="line"><span class="attribute">Connection</span>: keep-alive</span><br><span class="line"><span class="attribute">Upgrade-Insecure-Requests</span>: 1</span><br><span class="line"><span class="attribute">User-Agent</span>: Mozilla/5.0 (Windows NT 10.0; Win64; x64) AppleWebKit/537.36 (KHTML, like Gecko) Chrome/57.0.2987.133 Safari/537.36</span><br><span class="line"><span class="attribute">Accept</span>: text/html,application/xhtml+xml,application/xml;q=0.9,image/webp,*/*;q=0.8</span><br><span class="line"><span class="attribute">Accept-Encoding</span>: gzip, deflate, sdch, br</span><br><span class="line"><span class="attribute">Accept-Language</span>: zh-CN,zh;q=0.8,en;q=0.6</span><br><span class="line"><span class="attribute">Cookie</span>: l=Ag0NWp9E8X4hgaGEtIBhOmKxnSOH6kG8; isg=AkZGLTL-Yr9tHDZbgd5bsn4Rlzwg5IphaK-1BzBvMmlEM-ZNmDfacSyDfdgF; thw=cn</span><br></pre></td></tr></table></figure><blockquote><ol start="3"><li>浏览器发起DNS解析请求，将域名转换为IP地址。</li></ol></blockquote><p><img src="/imgs/taobao_ip.png" alt="淘宝网址"></p><blockquote><ol start="4"><li>浏览器将请求报文发送给服务器。</li></ol></blockquote><blockquote><ol start="5"><li>服务器接收请求报文，并解析。</li></ol></blockquote><blockquote><ol start="6"><li>服务器处理用户请求，并将处理结果封装成HTTP响应报文。</li></ol></blockquote><figure class="highlight"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br></pre></td><td class="code"><pre><span class="line">HTTP/1.1 <span class="number">200</span> OK</span><br><span class="line"><span class="attribute">Server</span>: Tengine</span><br><span class="line"><span class="attribute">Date</span>: Thu, 13 Apr 2017 02:24:25 GMT</span><br><span class="line"><span class="attribute">Content-Type</span>: text/html; charset=utf-8</span><br><span class="line"><span class="attribute">Transfer-Encoding</span>: chunked</span><br><span class="line"><span class="attribute">Connection</span>: keep-alive</span><br><span class="line"><span class="attribute">Vary</span>: Accept-Encoding</span><br><span class="line"><span class="attribute">Vary</span>: Ali-Detector-Type, X-CIP-PT</span><br><span class="line"><span class="attribute">Cache-Control</span>: max-age=0, s-maxage=300</span><br><span class="line"><span class="attribute">Via</span>: cache8.l2cm10-1[172,200-0,C], cache13.l2cm10-1[122,0], cache3.cn206[0,200-0,H], cache6.cn206[0,0]</span><br><span class="line"><span class="attribute">Age</span>: 293</span><br><span class="line"><span class="attribute">X-Cache</span>: HIT TCP_MEM_HIT dirn:-2:-2</span><br><span class="line"><span class="attribute">X-Swift-SaveTime</span>: Thu, 13 Apr 2017 02:19:32 GMT</span><br><span class="line"><span class="attribute">X-Swift-CacheTime</span>: 300</span><br><span class="line"><span class="attribute">Timing-Allow-Origin</span>: *</span><br><span class="line"><span class="attribute">EagleId</span>: 9903e7e514920502659594264e</span><br><span class="line"><span class="attribute">Strict-Transport-Security</span>: max-age=31536000</span><br><span class="line"><span class="attribute">Content-Encoding</span>: gzip</span><br><span class="line"></span><br><span class="line">&lt;!DOCTYPE html&gt;</span><br><span class="line">&lt;html lang="zh-CN"&gt;</span><br><span class="line">&lt;head&gt;</span><br><span class="line">&lt;meta charset="utf-8" /&gt;</span><br><span class="line">&lt;meta http-equiv="X-UA-Compatible" content="IE=edge,chrome=1" /&gt;</span><br><span class="line">&lt;meta name="renderer" content="webkit" /&gt;</span><br><span class="line">&lt;title&gt;淘宝网 - 淘！我喜欢&lt;/title&gt;</span><br><span class="line">&lt;meta name="spm-id" content="a21bo" /&gt;</span><br><span class="line">&lt;meta name="description" content="淘宝网 - 亚洲较大的网上交易平台，提供各类服饰、美容、家居、数码、话费/点卡充值… 数亿优质商品，同时提供担保交易(先收货后付款)等安全交易保障服务，并由商家提供退货承诺、破损补寄等消费者保障服务，让你安心享受网上购物乐趣！" /&gt;</span><br><span class="line">&lt;meta name="aplus-xplug" content="NONE"&gt;</span><br><span class="line">&lt;meta name="keyword" content="淘宝,掏宝,网上购物,C2C,在线交易,交易市场,网上交易,交易市场,网上买,网上卖,购物网站,团购,网上贸易,安全购物,电子商务,放心买,供应,买卖信息,网店,一口价,拍卖,网上开店,网络购物,打折,免费开店,网购,频道,店铺" /&gt;</span><br><span class="line">&lt;/head&gt;</span><br><span class="line">&lt;body&gt;</span><br><span class="line">......</span><br><span class="line">&lt;/body&gt;</span><br><span class="line">&lt;/html&gt;</span><br></pre></td></tr></table></figure><blockquote><ol start="7"><li>服务器将HTTP响应报文发送给浏览器。</li></ol></blockquote><blockquote><ol start="8"><li>浏览器接收服务器响应的HTTP报文，并解析。</li></ol></blockquote><blockquote><ol start="9"><li>浏览器解析 HTML 页面并展示，在解析HTML页面时遇到新的资源需要再次发起请求。</li></ol></blockquote><blockquote><ol start="10"><li>最终浏览器展示出了页面</li></ol></blockquote><h3 id="HTTP请求报文和响应报文格式"><a href="#HTTP请求报文和响应报文格式" class="headerlink" title="HTTP请求报文和响应报文格式"></a>HTTP请求报文和响应报文格式</h3><p><img src="/imgs/HTTPMsgStructure2.png" alt="http请求报文和响应报文"></p><h3 id="DNS-解析过程"><a href="#DNS-解析过程" class="headerlink" title="DNS 解析过程"></a>DNS 解析过程</h3><p><img src="/imgs/DNS.gif" alt="DNS解析过程"></p><h4 id="windows-下-hosts-文件位置"><a href="#windows-下-hosts-文件位置" class="headerlink" title="windows 下 hosts 文件位置"></a>windows 下 hosts 文件位置</h4><p>C:\Windows\System32\drivers\etc\hosts</p><h3 id="DOM-解析"><a href="#DOM-解析" class="headerlink" title="DOM 解析"></a>DOM 解析</h3><p>参考代码:</p><figure class="highlight html"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">html</span>&gt;</span></span><br><span class="line">  <span class="tag">&lt;<span class="name">body</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">p</span>&gt;</span>Hello World<span class="tag">&lt;/<span class="name">p</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">div</span>&gt;</span> <span class="tag">&lt;<span class="name">img</span> <span class="attr">src</span>=<span class="string">"example.png"</span> <span class="attr">alt</span>=<span class="string">"example"</span>/&gt;</span><span class="tag">&lt;/<span class="name">div</span>&gt;</span></span><br><span class="line">  <span class="tag">&lt;/<span class="name">body</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">html</span>&gt;</span></span><br></pre></td></tr></table></figure><p><img src="/imgs/dom.png" alt="Dom 解析工作原理"></p><h3 id="Webkit-CSS-解析"><a href="#Webkit-CSS-解析" class="headerlink" title="Webkit CSS 解析"></a>Webkit CSS 解析</h3><p><img src="/imgs/css_parser.png" alt="CSS 解析工作原理"></p><h3 id="How-Browsers-work-浏览器是如何工作的"><a href="#How-Browsers-work-浏览器是如何工作的" class="headerlink" title="How Browsers work - 浏览器是如何工作的"></a>How Browsers work - 浏览器是如何工作的</h3><p><a href="http://taligarsiel.com/Projects/howbrowserswork1.htm#The_browsers_we_will_talk_about" target="_blank" rel="noopener">How Browsers work</a><br><a href="https://www.html5rocks.com/zh/tutorials/internals/howbrowserswork/" target="_blank" rel="noopener">https://www.html5rocks.com/zh/tutorials/internals/howbrowserswork/</a></p><h2 id="四、Web开发本质"><a href="#四、Web开发本质" class="headerlink" title="四、Web开发本质"></a>四、Web开发本质</h2><h3 id="牢记以下三点"><a href="#牢记以下三点" class="headerlink" title="牢记以下三点"></a>牢记以下三点</h3><ol><li>请求，客户端发起请求。</li><li>处理，服务器处理请求。</li><li>响应，服务器将处理结果发送给客户端</li></ol><h3 id="对比一个单机版计算器和Web版计算器"><a href="#对比一个单机版计算器和Web版计算器" class="headerlink" title="对比一个单机版计算器和Web版计算器"></a>对比一个单机版计算器和Web版计算器</h3><h3 id="客户端处理响应"><a href="#客户端处理响应" class="headerlink" title="客户端处理响应"></a>客户端处理响应</h3><ul><li>服务器响应完毕后，客户端继续处理：<ul><li>浏览器：解析服务器返回的数据</li><li>iOS、Android 客户端，解析服务器返回的数据，并且通过iOS或Android的UI技术实现界面的展示功能</li></ul></li></ul><h3 id="关于-C-S（Client-Server）-和-B-S（Browser-Server）"><a href="#关于-C-S（Client-Server）-和-B-S（Browser-Server）" class="headerlink" title="关于 C/S（Client/Server） 和 B/S（Browser/Server）"></a>关于 C/S（Client/Server） 和 B/S（Browser/Server）</h3><p>C/S: 客户端服务器</p><p>B/S: 浏览器服务器</p><p><img src="/imgs/client-server.png" alt="Client / Server"></p><h2 id="五、node-js-介绍"><a href="#五、node-js-介绍" class="headerlink" title="五、node.js 介绍"></a>五、node.js 介绍</h2><h3 id="node-js-是什么？"><a href="#node-js-是什么？" class="headerlink" title="node.js 是什么？"></a>node.js 是什么？</h3><ol><li>node.js 是一个开发平台，就像Java开发平台、.Net开发平台、PHP开发平台、Apple开发平台一样。<ul><li>何为开发平台？有对应的编程语言、有语言运行时、有能实现特定功能的API（SDK：Software Development Kit）</li></ul></li><li>该平台使用的编程语言是 JavaScript 语言。 </li><li>node.js 平台是基于 Chrome V8 JavaScript 引擎构建。</li><li>基于 node.js 可以开发控制台程序（命令行程序、CLI程序）、桌面应用程序（GUI）（借助 node-webkit、electron 等框架实现）、Web 应用程序（网站）</li></ol><p>PHP开发技术栈: LAMP - Linux Apache MySQL PHP</p><p>node.js 全栈开发技术栈: MEAN - MongoDB Express Angular Node.js</p><h3 id="node-js-有哪些特点？"><a href="#node-js-有哪些特点？" class="headerlink" title="node.js 有哪些特点？"></a>node.js 有哪些特点？</h3><ol><li>事件驱动(当事件被触发时，执行传递过去的回调函数)</li><li>非阻塞 I/O 模型（当执行I/O操作时，不会阻塞线程）</li><li>单线程</li><li>拥有世界最大的开源库生态系统 —— npm。</li></ol><h3 id="node-js-网站"><a href="#node-js-网站" class="headerlink" title="node.js 网站"></a>node.js 网站</h3><ol><li><a href="https://nodejs.org/" target="_blank" rel="noopener">node.js官方网站</a></li><li><a href="http://nodejs.cn/" target="_blank" rel="noopener">node.js中文网</a></li><li><a href="https://cnodejs.org/" target="_blank" rel="noopener">node.js 中文社区</a></li></ol><h3 id="为什么要学习Node-js"><a href="#为什么要学习Node-js" class="headerlink" title="为什么要学习Node.js?"></a>为什么要学习Node.js?</h3><ol><li>通过学习Node.js开发深入理解<strong>服务器开发</strong>、<strong>Web请求和响应过程</strong>、 <strong>了解服务器端如何与客户端配合</strong></li><li>学习服务器端渲染</li><li>学习服务器端为客户端编写接口</li><li>现在前端工程师面试，对 Node.js 开发有要求</li><li>补充提问：<ul><li>在Node.js平台开发时，能使用Dom API吗？比如：<code>document.getElementById(&#39;id&#39;); window.location 等</code>?</li></ul></li><li>复习 浏览器端 JavaScript 组成：ECMAscript、Dom、Bom</li></ol><h3 id="学习目标"><a href="#学习目标" class="headerlink" title="学习目标"></a>学习目标</h3><ol><li>了解服务器开发过程</li><li>会使用 node.js 开发基本的 http 服务程序（Web应用程序）</li></ol><h3 id="Node-js安装和配置"><a href="#Node-js安装和配置" class="headerlink" title="Node.js安装和配置"></a>Node.js安装和配置</h3><ol><li><p>下载地址</p><ul><li><a href="https://nodejs.org/en/download/" target="_blank" rel="noopener">当前版本</a></li><li><a href="https://nodejs.org/en/download/releases/" target="_blank" rel="noopener">历史版本</a></li></ul></li><li><p>官网术语解释</p><ul><li>LTS 版本：Long-term Support 版本，长期支持版，即稳定版。</li><li>Current 版本：Latest Features 版本，最新版本，新特性会在该版本中最先加入。</li></ul></li><li><p>注意：</p><ul><li>安装完毕后通过命令：<code>node -v</code>来确定是否安装成功【注意：打开”命令窗口”的时候建议使用”管理员方式”打开】</li><li>如果需要则配置环境变量。</li></ul></li></ol><p><img src="/imgs/env_path.png" alt="配置环境变量"></p><ol start="4"><li>通过 nvm-windows 管理一台计算机上的多个 node 版本</li></ol><h3 id="Node-js-开发-Web-应用程序-和-PHP、Java、ASP-Net等传统模式开发Web应用程序区别"><a href="#Node-js-开发-Web-应用程序-和-PHP、Java、ASP-Net等传统模式开发Web应用程序区别" class="headerlink" title="Node.js 开发 Web 应用程序 和 PHP、Java、ASP.Net等传统模式开发Web应用程序区别"></a>Node.js 开发 Web 应用程序 和 PHP、Java、ASP.Net等传统模式开发Web应用程序区别</h3><ol><li><strong>传统模式</strong><ul><li>有 Web 容器</li></ul></li></ol><p><img src="/imgs/Web.png" alt="有Web容器开发模型"></p><ol start="2"><li><strong>Node.js开发Web应用程序</strong><ul><li>没有 Web 容器</li></ul></li></ol><p><img src="/imgs/nodeWeb.png" alt="Node.js无Web容器开发模型"> </p><ol start="3"><li>补充提问：</li></ol><ul><li>什么是动态网页？什么是静态网页？</li></ul><h2 id="六、基于nodejs编写程序-在-node-js-上编写程序"><a href="#六、基于nodejs编写程序-在-node-js-上编写程序" class="headerlink" title="六、基于nodejs编写程序(在 node.js 上编写程序)"></a>六、基于nodejs编写程序(在 node.js 上编写程序)</h2><h3 id="REPL介绍"><a href="#REPL介绍" class="headerlink" title="REPL介绍"></a>REPL介绍</h3><ol><li><p>REPL 全称: Read-Eval-Print-Loop（交互式解释器）</p><ul><li>R 读取 - 读取用户输入，解析输入了Javascript 数据结构并存储在内存中。</li><li>E 执行 - 执行输入的数据结构</li><li>P 打印 - 输出结果</li><li>L 循环 - 循环操作以上步骤直到用户两次按下 ctrl-c 按钮退出。</li></ul></li><li><p>在REPL中编写程序 （类似于浏览器开发人员工具中的控制台功能）</p><ul><li>直接在控制台输入 <code>node</code> 命令进入 REPL 环境</li></ul></li><li><p>按两次 Control + C 退出REPL界面 或者 输入 <code>.exit</code> 退出 REPL 界面</p><ul><li>按住 control 键不要放开, 然后按两下 c 键</li></ul></li></ol><h3 id="创建-JavaScript-文件编写程序"><a href="#创建-JavaScript-文件编写程序" class="headerlink" title="创建 JavaScript 文件编写程序"></a>创建 JavaScript 文件编写程序</h3><h4 id="编程注意事项"><a href="#编程注意事项" class="headerlink" title="编程注意事项"></a>编程注意事项</h4><ul><li>配置一下Sublime Text 的代码缩进格式为2个空格</li><li><p>方式一</p><p><img src="/imgs/sublimeconf1.png" alt="@配置方式1"></p></li><li><p>方式二</p><p><img src="/imgs/sublimeconf21.png" alt="@配置方式2 - 第一步"></p><p><img src="/imgs/sublimeconf22.png" alt="配置方式2 - 第二步"></p></li></ul><h4 id="JavaScript-文件名命名规则"><a href="#JavaScript-文件名命名规则" class="headerlink" title="JavaScript 文件名命名规则"></a>JavaScript 文件名命名规则</h4><ul><li>不要用中文</li><li>不要包含空格</li><li>不要出现node关键字</li><li>建议以 ‘-‘ 分割单词</li></ul><h4 id="案例"><a href="#案例" class="headerlink" title="案例"></a>案例</h4><ol><li>案例1：编写一个简单的函数, 实现数字相加</li></ol><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">var</span> n = <span class="number">10</span>;</span><br><span class="line"><span class="keyword">var</span> m = <span class="number">100</span>;</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">function</span> <span class="title">add</span>(<span class="params">x, y</span>) </span>&#123;</span><br><span class="line">  <span class="keyword">return</span> x + y;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="keyword">var</span> result = add(m, n);</span><br><span class="line"></span><br><span class="line"><span class="built_in">console</span>.log(<span class="string">'计算结果是：'</span> + result);</span><br></pre></td></tr></table></figure><ol start="2"><li>案例2：编写一个输出’三角形’的程序</li></ol><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br></pre></td><td class="code"><pre><span class="line"></span><br><span class="line"><span class="comment">// process 对象是一个 global （全局变量），提供有关信息，控制当前 Node.js 进程。</span></span><br><span class="line"><span class="comment">// 作为一个对象，它对于 Node.js 应用程序始终是可用的，故无需使用 require()。</span></span><br><span class="line"></span><br><span class="line"><span class="keyword">for</span> (<span class="keyword">var</span> i = <span class="number">0</span>; i &lt; <span class="number">10</span>; i++) &#123;</span><br><span class="line">  <span class="keyword">for</span> (<span class="keyword">var</span> j = <span class="number">0</span>; j &lt;= i; j++) &#123;</span><br><span class="line">    <span class="comment">// 注意：console.log()输出完毕后是带换行的，所以这样做不可以</span></span><br><span class="line">    <span class="comment">// console.log('*');</span></span><br><span class="line">    process.stdout.write(<span class="string">'* '</span>);</span><br><span class="line">  &#125;</span><br><span class="line">  process.stdout.write(<span class="string">'\n'</span>);</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><ol start="3"><li><p>案例3：文件读写案例（带同学们打开官方文档查阅）</p><ul><li><p>使用到的模块<code>var fs = require(&#39;fs&#39;);</code></p></li><li><p>1、写文件：<code>fs.writeFile(file, data[, options], callback);</code></p><ul><li>参数1：要写入的文件路径，<strong>必填</strong>。</li><li>参数2：要写入的数据，<strong>必填</strong>。</li><li>参数3：写入文件时的选项，比如：文件编码，选填。</li><li>参数4：文件写入完毕后的回调函数，<strong>必填</strong>。</li><li>写文件注意：<ul><li>该操作采用异步执行</li><li>如果文件已经存在则替换掉</li><li>默认写入的文件编码为utf8</li><li>回调函数有1个参数：err，表示在写入文件的操作过程中是否出错了。<ul><li>如果出错了<code>err != null</code>，否则 <code>err === null</code></li></ul></li></ul></li></ul></li><li><p>2、读文件：<code>fs.readFile(file[, options], callback)</code></p><ul><li>参数1：要读取的文件路径，<strong>必填</strong>。</li><li>参数2：读取文件时的选项，比如：文件编码。选填。</li><li>参数3：文件读取完毕后的回调函数，<strong>必填</strong>。</li><li>读文件注意：<ul><li>该操作采用异步执行</li><li>回调函数有两个参数，分别是err和data</li><li>如果读取文件时没有指定编码，那么返回的将是原生的二进制数据；如果指定了编码，那么会根据指定的编码返回对应的字符串数据。</li></ul></li></ul></li><li>注意：<ul><li>文件操作中的<code>./</code>表示当前路径，相对的是执行node命令的路径，而不是当前被执行的<code>*.js</code>文件的实际路径。</li><li><code>__dirname</code>才永远表示当前被执行的<code>*.js</code>文件的实际路径</li><li><code>/</code>表示根目录, 读取文件或写入文件的时候写<code>/</code>目录，在Windows下相当于当前磁盘根目录（比如：c:\ 或 d:\ 或 e:\  等，在Mac下相当于硬盘根目录 <code>/</code>）</li></ul></li></ul></li></ol><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">// --------------------------------- 写文件 -----------------------------</span></span><br><span class="line"><span class="comment">// 加载文件操作模块</span></span><br><span class="line"><span class="keyword">var</span> fs = <span class="built_in">require</span>(<span class="string">'fs'</span>);</span><br><span class="line"></span><br><span class="line"><span class="comment">// 创建要写入的文件的字符串</span></span><br><span class="line"><span class="keyword">var</span> msg = <span class="string">'你好，世界！你好 Node.js.'</span>;</span><br><span class="line"><span class="comment">// 执行文件写入操作</span></span><br><span class="line">fs.writeFile(<span class="string">'./data.txt'</span>, msg, <span class="string">'utf8'</span>, <span class="function"><span class="keyword">function</span> (<span class="params">err</span>) </span>&#123;</span><br><span class="line">  <span class="built_in">console</span>.log(<span class="string">'---'</span> + err + <span class="string">'----'</span>);</span><br><span class="line">  <span class="comment">// /判断是否写入文件出错了</span></span><br><span class="line">  <span class="keyword">if</span> (err) &#123;</span><br><span class="line">    <span class="built_in">console</span>.log(<span class="string">'文件写入出错了，详细错误信息：'</span> + err);</span><br><span class="line">    <span class="comment">// 把错误继续向上抛出</span></span><br><span class="line">    <span class="keyword">throw</span> err;</span><br><span class="line">  &#125; <span class="keyword">else</span> &#123;</span><br><span class="line">    <span class="built_in">console</span>.log(<span class="string">'文件写入成功！'</span>);</span><br><span class="line">  &#125;</span><br><span class="line">&#125;);</span><br><span class="line"></span><br><span class="line"></span><br><span class="line"><span class="comment">// --------------------------------- 读文件 -----------------------------</span></span><br><span class="line"><span class="comment">// 加载文件操作模块</span></span><br><span class="line"><span class="keyword">var</span> fs = <span class="built_in">require</span>(<span class="string">'fs'</span>);</span><br><span class="line"></span><br><span class="line"><span class="comment">// 执行文件读取操作</span></span><br><span class="line">fs.readFile(<span class="string">'./data.txt'</span>, <span class="string">'utf8'</span>, <span class="function"><span class="keyword">function</span> (<span class="params">err, data</span>) </span>&#123;</span><br><span class="line">  <span class="comment">// 输出err  和 data</span></span><br><span class="line">  <span class="comment">// console.log('error: ' + err);</span></span><br><span class="line">  <span class="comment">// console.log('data: ' + data);</span></span><br><span class="line"></span><br><span class="line">  <span class="keyword">if</span> (err) &#123;</span><br><span class="line">    <span class="built_in">console</span>.log(<span class="string">'文件读取出错啦！详细信息: '</span> + err);</span><br><span class="line">  &#125; <span class="keyword">else</span> &#123;</span><br><span class="line">    <span class="built_in">console</span>.log(<span class="string">'文件读取成功，以下是文件内容：'</span>);</span><br><span class="line">    <span class="built_in">console</span>.log(data);</span><br><span class="line">  &#125;</span><br><span class="line">&#125;);</span><br></pre></td></tr></table></figure><ol start="4"><li>案例4：创建目录案例</li></ol><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br><span class="line">64</span><br><span class="line">65</span><br><span class="line">66</span><br><span class="line">67</span><br><span class="line">68</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">// 创建一个文件夹</span></span><br><span class="line"></span><br><span class="line"></span><br><span class="line"><span class="comment">// 加载文件操作模块</span></span><br><span class="line"><span class="keyword">var</span> fs = <span class="built_in">require</span>(<span class="string">'fs'</span>);</span><br><span class="line"></span><br><span class="line"><span class="comment">// 创建一个目录</span></span><br><span class="line">fs.mkdir(<span class="string">'./test-mkdir'</span>, <span class="function"><span class="keyword">function</span> (<span class="params">err</span>) </span>&#123;</span><br><span class="line">  <span class="keyword">if</span> (err) &#123;</span><br><span class="line">    <span class="built_in">console</span>.log(<span class="string">'创建目录出错了，详细信息如下：'</span>);</span><br><span class="line">    <span class="built_in">console</span>.log(err);</span><br><span class="line">  &#125; <span class="keyword">else</span> &#123;</span><br><span class="line">    <span class="built_in">console</span>.log(<span class="string">'目录创建成功！'</span>);</span><br><span class="line">  &#125;</span><br><span class="line"></span><br><span class="line">&#125;);</span><br><span class="line"></span><br><span class="line"></span><br><span class="line"></span><br><span class="line"><span class="comment">// ----------------------------------------------------------</span></span><br><span class="line"></span><br><span class="line"><span class="comment">// 加载文件操作模块</span></span><br><span class="line"><span class="keyword">var</span> fs = <span class="built_in">require</span>(<span class="string">'fs'</span>);</span><br><span class="line"></span><br><span class="line"><span class="comment">// 1. 创建 '01-教学资料' 目录</span></span><br><span class="line">fs.mkdir(<span class="string">'./01-教学资料'</span>, <span class="function"><span class="keyword">function</span> (<span class="params">err</span>) </span>&#123;</span><br><span class="line"></span><br><span class="line">  <span class="keyword">if</span> (err) &#123;</span><br><span class="line">    <span class="keyword">throw</span> err;</span><br><span class="line">  &#125;</span><br><span class="line"></span><br><span class="line">  <span class="comment">// 1.1 创建 '01-笔记大纲' 目录</span></span><br><span class="line">  fs.mkdir(<span class="string">'./01-教学资料/01-笔记大纲'</span>);</span><br><span class="line"></span><br><span class="line">  <span class="comment">// 1.2 创建 '02-作业任务' 目录</span></span><br><span class="line">  fs.mkdir(<span class="string">'./01-教学资料/02-作业任务'</span>);</span><br><span class="line"></span><br><span class="line">  <span class="comment">// 1.3 创建 '03-素材资料' 目录</span></span><br><span class="line">  fs.mkdir(<span class="string">'./01-教学资料/03-素材资料'</span>);</span><br><span class="line"></span><br><span class="line">  <span class="comment">// 1.4 创建 '04-随堂笔记' 目录</span></span><br><span class="line">  fs.mkdir(<span class="string">'./01-教学资料/04-随堂笔记'</span>);</span><br><span class="line"></span><br><span class="line">&#125;);</span><br><span class="line"></span><br><span class="line"></span><br><span class="line"></span><br><span class="line"><span class="comment">// 2. 创建 '02-源代码' 目录</span></span><br><span class="line">fs.mkdir(<span class="string">'./02-源代码'</span>, <span class="function"><span class="keyword">function</span> (<span class="params">err</span>) </span>&#123;</span><br><span class="line"></span><br><span class="line">  <span class="keyword">if</span> (err) &#123;</span><br><span class="line">    <span class="keyword">throw</span> err;</span><br><span class="line">  &#125;</span><br><span class="line"></span><br><span class="line">  <span class="comment">// 2.1 创建 '预习代码'目录</span></span><br><span class="line">  fs.mkdir(<span class="string">'./02-源代码/预习代码'</span>);</span><br><span class="line"></span><br><span class="line">  <span class="comment">// 2.2 创建 '课堂代码'目录</span></span><br><span class="line">  fs.mkdir(<span class="string">'./02-源代码/课堂代码'</span>);</span><br><span class="line">&#125;);</span><br><span class="line"></span><br><span class="line"></span><br><span class="line"><span class="comment">// 3. 创建 '03-视频' 目录</span></span><br><span class="line">fs.mkdir(<span class="string">'./03-视频'</span>);</span><br><span class="line"></span><br><span class="line"></span><br><span class="line"><span class="comment">// 4. 创建 '04-其他资料' 目录</span></span><br><span class="line">fs.mkdir(<span class="string">'./04-其他资料'</span>);</span><br></pre></td></tr></table></figure><h4 id="注意："><a href="#注意：" class="headerlink" title="注意："></a>注意：</h4><ol><li>异步操作无法通过 try-catch 来捕获异常，要通过判断 error 来判断是否出错。</li><li>同步操作可以通过 try-catch 来捕获异常。</li><li>不要使用 <code>fs.exists(path, callback)</code> 来判断文件是否存在，直接判断 error 即可</li><li>文件操作时的路径问题<ul><li>在读写文件的时候 ‘./‘ 表示的是当前执行node命令的那个路径，不是被执行的js文件的路径</li><li>__dirname, 表示的永远是”当前被执行的js的目录”</li><li>__filename, 表示的是”被执行的js的文件名（含路径)”</li></ul></li><li>error-first 介绍(错误优先)</li></ol><h4 id="案例5：通过-node-js-编写-http-服务程序-极简版本"><a href="#案例5：通过-node-js-编写-http-服务程序-极简版本" class="headerlink" title="案例5：通过 node.js 编写 http 服务程序 - 极简版本"></a>案例5：通过 node.js 编写 http 服务程序 - 极简版本</h4><p>步骤：</p><ol><li>加载http模块</li><li>创建http服务</li><li>为http服务对象添加 request 事件处理程序</li><li>开启http服务监听，准备接收客户端请求</li></ol><p>注意：</p><ol><li><p>浏览器显示可能是乱码，所以可以通过 <code>res.setHeader(&#39;Content-Type&#39;, &#39;text/plain; charset=utf-8&#39;);</code>设置浏览器显示时所使用的编码。</p></li><li><p>Chrome 浏览器默认无法手动设置编码，需要安装”Set Character Encoding”扩展。</p></li><li><p>演示一下设置<code>Content-Type=text/html</code> 和 <code>Content-Type=text/plain</code>的区别。</p></li></ol><p>参考代码：</p><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br></pre></td><td class="code"><pre><span class="line"></span><br><span class="line"><span class="comment">// 1. 加载http模块</span></span><br><span class="line"><span class="keyword">var</span> http = <span class="built_in">require</span>(<span class="string">'http'</span>);</span><br><span class="line"></span><br><span class="line"><span class="comment">// 2. 创建http服务</span></span><br><span class="line"><span class="keyword">var</span> server = http.createServer();</span><br><span class="line"></span><br><span class="line"><span class="comment">// 3. 开始监听'request'事件</span></span><br><span class="line"><span class="comment">// 详细解释一下request对象和response对象</span></span><br><span class="line">server.on(<span class="string">'request'</span>, <span class="function"><span class="keyword">function</span> (<span class="params">req, res</span>) </span>&#123;</span><br><span class="line">  <span class="comment">// body...</span></span><br><span class="line">  <span class="built_in">console</span>.log(<span class="string">'有人请求了~~'</span>);</span><br><span class="line">&#125;);</span><br><span class="line"></span><br><span class="line"><span class="comment">// 4. 启动服务，开始监听</span></span><br><span class="line">server.listen(<span class="number">9000</span>, <span class="function"><span class="keyword">function</span> (<span class="params"></span>) </span>&#123;</span><br><span class="line">  <span class="built_in">console</span>.log(<span class="string">'服务已经启动，请访问： http://localhost:9000'</span>);</span><br><span class="line">&#125;);</span><br></pre></td></tr></table></figure><h4 id="案例6：通过-node-js-编写-http-服务程序-根据不同请求作出不同响应"><a href="#案例6：通过-node-js-编写-http-服务程序-根据不同请求作出不同响应" class="headerlink" title="案例6：通过 node.js 编写 http 服务程序 - 根据不同请求作出不同响应"></a>案例6：通过 node.js 编写 http 服务程序 - 根据不同请求作出不同响应</h4><h5 id="说明："><a href="#说明：" class="headerlink" title="说明："></a>说明：</h5><ul><li>根据不同请求，显示index页面、login页面、register页面、list页面。</li><li>请求 / 或 /index</li><li>请求 /login</li><li>请求 /register</li><li>请求 /list</li></ul><h5 id="参考代码"><a href="#参考代码" class="headerlink" title="参考代码"></a>参考代码</h5><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">// 加载http模块</span></span><br><span class="line"><span class="keyword">var</span> http = <span class="built_in">require</span>(<span class="string">'http'</span>);</span><br><span class="line"></span><br><span class="line"><span class="comment">// 创建http server</span></span><br><span class="line"><span class="keyword">var</span> server = http.createServer(<span class="function"><span class="keyword">function</span> (<span class="params">req, res</span>) </span>&#123;</span><br><span class="line">  <span class="comment">// body...</span></span><br><span class="line">  <span class="built_in">console</span>.log(req.url);</span><br><span class="line"></span><br><span class="line"></span><br><span class="line">  <span class="keyword">if</span> (req.url === <span class="string">'/'</span> || req.url === <span class="string">'/index'</span>) &#123;</span><br><span class="line">    <span class="comment">// 表示请求网站首页</span></span><br><span class="line">    res.end(<span class="string">'这是 index.html'</span>);</span><br><span class="line"></span><br><span class="line">  &#125; <span class="keyword">else</span> <span class="keyword">if</span> (req.url === <span class="string">'/login'</span>) &#123;</span><br><span class="line">    <span class="comment">// 表示请求登录页面</span></span><br><span class="line">    res.end(<span class="string">'这是 login.html'</span>);</span><br><span class="line"></span><br><span class="line">  &#125; <span class="keyword">else</span> <span class="keyword">if</span> (req.url === <span class="string">'/register'</span>) &#123;</span><br><span class="line">    <span class="comment">// 表示请求注册页面</span></span><br><span class="line">    res.end(<span class="string">'这是 register.html'</span>);</span><br><span class="line">    </span><br><span class="line">  &#125; <span class="keyword">else</span> <span class="keyword">if</span> (req.url === <span class="string">'/list'</span>) &#123;</span><br><span class="line">    <span class="comment">// 表示请求列表页面</span></span><br><span class="line">    res.end(<span class="string">'这是 list.html'</span>);</span><br><span class="line">    </span><br><span class="line">  &#125; <span class="keyword">else</span> &#123;</span><br><span class="line">    <span class="comment">// 表示请求的页面不存在</span></span><br><span class="line">    res.writeHead(<span class="number">404</span>, <span class="string">'Not Found'</span>);</span><br><span class="line">    res.end(<span class="string">'Sorry, page not found.'</span>);</span><br><span class="line">  &#125;</span><br><span class="line">&#125;);</span><br><span class="line"></span><br><span class="line"><span class="comment">// 监听端口的网络请求</span></span><br><span class="line">server.listen(<span class="number">9000</span>, <span class="function"><span class="keyword">function</span> (<span class="params"></span>) </span>&#123;</span><br><span class="line">  <span class="built_in">console</span>.log(<span class="string">'http://localhost:9000'</span>);</span><br><span class="line">&#125;);</span><br></pre></td></tr></table></figure><h4 id="案例7：通过-node-js-编写-http-服务程序-通过读取静态-HTML-文件来响应用户请求"><a href="#案例7：通过-node-js-编写-http-服务程序-通过读取静态-HTML-文件来响应用户请求" class="headerlink" title="案例7：通过 node.js 编写 http 服务程序 - 通过读取静态 HTML 文件来响应用户请求"></a>案例7：通过 node.js 编写 http 服务程序 - 通过读取静态 HTML 文件来响应用户请求</h4><p>步骤：</p><ol><li>创建index.html、login.html、register.html、list.html、404.html文件。 </li><li>演示通过读取最简单的 HTML 文件来响应用户。</li><li>演示通过读取”具有引入外部CSS样式表”的HTML文件来响应用户。</li><li>演示通过读取”具有img标签”的HTML文件来响应用户。</li></ol><p>注意：</p><ul><li><p>1、注意在发送不同类型的文件时，要设置好对应的<code>Content-Type</code></p><ul><li><a href="http://tool.oschina.net/commons" target="_blank" rel="noopener">Content-Type参考 OSChina</a></li><li><a href="https://developer.mozilla.org/en-US/docs/Web/HTTP/Basics_of_HTTP/MIME_types" target="_blank" rel="noopener">Content-Type参考 MDN</a></li></ul></li><li><p>2、HTTP状态码参考</p><ul><li><a href="https://www.w3.org/Protocols/rfc2616/rfc2616-sec10.html" target="_blank" rel="noopener">w3org参考</a></li><li><a href="https://www.w3schools.com/tags/ref_httpmessages.asp" target="_blank" rel="noopener">w3schools参考</a></li></ul></li><li><p>3、在html页面中写相对路径’./‘ 和 绝对路径 ‘/‘的含义 。</p><ul><li>网页中的这个路径主要是告诉浏览器向哪个地址发起请求用的</li><li>‘./‘ 表示本次请求从相对于当前页面的请求路径（即服务器返回当前页面时的请求路径）开始</li><li>‘/‘ 表示请求从根目录开始</li></ul></li></ul><p>补充知识点：</p><ol><li>path 模块的 join() 方法</li></ol><p>参考代码：</p><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br><span class="line">64</span><br><span class="line">65</span><br><span class="line">66</span><br><span class="line">67</span><br><span class="line">68</span><br><span class="line">69</span><br><span class="line">70</span><br><span class="line">71</span><br><span class="line">72</span><br><span class="line">73</span><br><span class="line">74</span><br><span class="line">75</span><br><span class="line">76</span><br><span class="line">77</span><br><span class="line">78</span><br><span class="line">79</span><br></pre></td><td class="code"><pre><span class="line"></span><br><span class="line"><span class="comment">// 1. 加载 http 模块</span></span><br><span class="line"><span class="keyword">var</span> http = <span class="built_in">require</span>(<span class="string">'http'</span>);</span><br><span class="line"><span class="comment">// 加载文件操作模块</span></span><br><span class="line"><span class="keyword">var</span> fs = <span class="built_in">require</span>(<span class="string">'fs'</span>);</span><br><span class="line"><span class="comment">// 加载path模块，这个模块主要用来处理各种路径。</span></span><br><span class="line"><span class="keyword">var</span> path = <span class="built_in">require</span>(<span class="string">'path'</span>);</span><br><span class="line"></span><br><span class="line"></span><br><span class="line"></span><br><span class="line"><span class="comment">// 2. 创建http server</span></span><br><span class="line"><span class="keyword">var</span> server = http.createServer(<span class="function"><span class="keyword">function</span> (<span class="params">req, res</span>) </span>&#123;</span><br><span class="line">  <span class="comment">// 1. 获取用户请求的URL</span></span><br><span class="line">  <span class="keyword">var</span> url = req.url.toLowerCase();</span><br><span class="line"></span><br><span class="line">  <span class="comment">// 2. 根据用户的不同请求，做出不同响应</span></span><br><span class="line">  <span class="keyword">if</span> (url === <span class="string">'/'</span> || url === <span class="string">'/index'</span>) &#123;</span><br><span class="line">    <span class="comment">// 读取index.html文件，把该文件响应给用户</span></span><br><span class="line">    fs.readFile(path.join(__dirname, <span class="string">'index.html'</span>), <span class="function"><span class="keyword">function</span> (<span class="params">err, data</span>) </span>&#123;</span><br><span class="line">      <span class="keyword">if</span> (err) &#123;</span><br><span class="line">        <span class="keyword">throw</span> err;</span><br><span class="line">      &#125;</span><br><span class="line">      res.writeHead(<span class="number">200</span>, <span class="string">'OK'</span>, &#123;</span><br><span class="line">        <span class="string">'Content-Type'</span>: <span class="string">'text/html; charset=utf-8'</span></span><br><span class="line">      &#125;);</span><br><span class="line">      <span class="comment">// res.setHeader('Content-Type', 'text/html; charset=utf-8');</span></span><br><span class="line">      res.end(data);</span><br><span class="line"></span><br><span class="line">    &#125;);</span><br><span class="line">  &#125; <span class="keyword">else</span> <span class="keyword">if</span> (url === <span class="string">'/login'</span>) &#123;</span><br><span class="line">    <span class="comment">// 读取login.html文件，把该文件响应给用户</span></span><br><span class="line">    fs.readFile(path.join(__dirname, <span class="string">'login.html'</span>), <span class="function"><span class="keyword">function</span> (<span class="params">err, data</span>) </span>&#123;</span><br><span class="line">      <span class="keyword">if</span> (err) &#123;</span><br><span class="line">        <span class="keyword">throw</span> err;</span><br><span class="line">      &#125;</span><br><span class="line">      res.writeHead(<span class="number">200</span>, <span class="string">'OK'</span>, &#123;</span><br><span class="line">        <span class="string">'Content-Type'</span>: <span class="string">'text/html; charset=utf-8'</span></span><br><span class="line">      &#125;);</span><br><span class="line">      <span class="comment">// res.setHeader('Content-Type', 'text/html; charset=utf-8');</span></span><br><span class="line">      res.end(data);</span><br><span class="line"></span><br><span class="line">    &#125;);</span><br><span class="line">  &#125; <span class="keyword">else</span> <span class="keyword">if</span> (url === <span class="string">'/register'</span>) &#123;</span><br><span class="line">    <span class="comment">// 读取register.html文件，把该文件响应给用户</span></span><br><span class="line">    fs.readFile(path.join(__dirname, <span class="string">'register.html'</span>), <span class="function"><span class="keyword">function</span> (<span class="params">err, data</span>) </span>&#123;</span><br><span class="line">      <span class="keyword">if</span> (err) &#123;</span><br><span class="line">        <span class="keyword">throw</span> err;</span><br><span class="line">      &#125;</span><br><span class="line">      res.writeHead(<span class="number">200</span>, <span class="string">'OK'</span>, &#123;</span><br><span class="line">        <span class="string">'Content-Type'</span>: <span class="string">'text/html; charset=utf-8'</span></span><br><span class="line">      &#125;);</span><br><span class="line">      <span class="comment">// res.setHeader('Content-Type', 'text/html; charset=utf-8');</span></span><br><span class="line">      res.end(data);</span><br><span class="line"></span><br><span class="line">    &#125;);</span><br><span class="line">  &#125; <span class="keyword">else</span> <span class="keyword">if</span> (url === <span class="string">'/404'</span>) &#123;</span><br><span class="line">    <span class="comment">// 读取register.html文件，把该文件响应给用户</span></span><br><span class="line">    fs.readFile(path.join(__dirname, <span class="string">'404.html'</span>), <span class="function"><span class="keyword">function</span> (<span class="params">err, data</span>) </span>&#123;</span><br><span class="line">      <span class="keyword">if</span> (err) &#123;</span><br><span class="line">        <span class="keyword">throw</span> err;</span><br><span class="line">      &#125;</span><br><span class="line">      res.writeHead(<span class="number">200</span>, <span class="string">'OK'</span>, &#123;</span><br><span class="line">        <span class="string">'Content-Type'</span>: <span class="string">'text/html; charset=utf-8'</span></span><br><span class="line">      &#125;);</span><br><span class="line">      <span class="comment">// res.setHeader('Content-Type', 'text/html; charset=utf-8');</span></span><br><span class="line">      res.end(data);</span><br><span class="line"></span><br><span class="line">    &#125;);</span><br><span class="line">  &#125;</span><br><span class="line">  </span><br><span class="line">&#125;);</span><br><span class="line"></span><br><span class="line"></span><br><span class="line"></span><br><span class="line"><span class="comment">// 3. 启动服务</span></span><br><span class="line">server.listen(<span class="number">9090</span>, <span class="function"><span class="keyword">function</span> (<span class="params"></span>) </span>&#123;</span><br><span class="line">  <span class="comment">// body...</span></span><br><span class="line">  <span class="built_in">console</span>.log(<span class="string">'please visit: http://localhost:9090'</span>);</span><br><span class="line">&#125;);</span><br></pre></td></tr></table></figure><h4 id="案例8：模拟-Apache-实现静态资源服务器"><a href="#案例8：模拟-Apache-实现静态资源服务器" class="headerlink" title="案例8：模拟 Apache 实现静态资源服务器"></a>案例8：模拟 Apache 实现静态资源服务器</h4><p>步骤：</p><ul><li>单独创建一个目录来实现，比如：创建一个”07-Apache”的目录。</li><li>在该目录下新建 <code>public</code> 目录，假设该目录为静态资源目录。</li><li>根据用户请求的路径在 public 目录下寻找对应路径下的资源。</li><li>如果找到了，那么将该资源返回给用户，如果没找到则返回404错误。</li><li>通过 mime 模块设置不同类型资源的Content-Type</li><li>实现完毕后把素材中的’An Ocean of Sky’ 和 ‘Hacker News’分别拷贝到静态资源目录下, 测试是否成功</li></ul><p>其他：</p><ul><li>介绍 NPM</li><li>介绍 mime 第三方模块<ul><li><code>npm install mime</code></li><li>在代码中直接 <code>var mime = require(&#39;mime&#39;)</code></li></ul></li></ul><p>参考代码：</p><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br><span class="line">64</span><br><span class="line">65</span><br><span class="line">66</span><br><span class="line">67</span><br><span class="line">68</span><br><span class="line">69</span><br><span class="line">70</span><br><span class="line">71</span><br><span class="line">72</span><br></pre></td><td class="code"><pre><span class="line"></span><br><span class="line"><span class="comment">// 1. 加载对应模块</span></span><br><span class="line"><span class="comment">// 1.1 加载http模块</span></span><br><span class="line"><span class="keyword">var</span> http = <span class="built_in">require</span>(<span class="string">'http'</span>);</span><br><span class="line"><span class="comment">// 1.2 加载path模块，方便路径拼接</span></span><br><span class="line"><span class="keyword">var</span> path = <span class="built_in">require</span>(<span class="string">'path'</span>);</span><br><span class="line"><span class="comment">// 1.3 加载文件读取模块</span></span><br><span class="line"><span class="keyword">var</span> fs = <span class="built_in">require</span>(<span class="string">'fs'</span>);</span><br><span class="line"><span class="comment">// 1.4 加载判断文件MIME类型的模块</span></span><br><span class="line"><span class="keyword">var</span> mime = <span class="built_in">require</span>(<span class="string">'mime'</span>);</span><br><span class="line"></span><br><span class="line"></span><br><span class="line"><span class="comment">// 2. 创建http server</span></span><br><span class="line"><span class="keyword">var</span> server = http.createServer();</span><br><span class="line"></span><br><span class="line"></span><br><span class="line"><span class="comment">// 3. 监听用户request事件</span></span><br><span class="line">server.on(<span class="string">'request'</span>, <span class="function"><span class="keyword">function</span> (<span class="params">req, res</span>) </span>&#123;</span><br><span class="line">  <span class="comment">// 1. 获取用户的请求路径, 并转换为小写</span></span><br><span class="line">  <span class="keyword">var</span> url = req.url.toLowerCase();</span><br><span class="line"></span><br><span class="line">  <span class="comment">// 判断如果请求的路径是 '/' 那么等价于 '/index.html'</span></span><br><span class="line">  url = (url === <span class="string">'/'</span>) ? <span class="string">'/index.html'</span> : url;</span><br><span class="line"></span><br><span class="line">  <span class="comment">// 2. 根据用户请求的url路径, 去public目录下查找对应的静态资源文件。找到后读取该文件，并将结果返回给用户</span></span><br><span class="line">  <span class="comment">// 2.1 根据用户请求的url拼接本地资源文件的路径</span></span><br><span class="line">  <span class="keyword">var</span> filePath = path.join(__dirname, <span class="string">'public'</span>, url);</span><br><span class="line"></span><br><span class="line">  <span class="comment">// 2.2 根据请求的文件路径设置Content-Type</span></span><br><span class="line">  res.setHeader(<span class="string">'Content-Type'</span>, mime.lookup(url));</span><br><span class="line"></span><br><span class="line">  <span class="comment">// 2.2 根据路径去读取对应的文件</span></span><br><span class="line">  <span class="comment">// 【注意】读取文件前无需判断文件是否已经存在，而是在读取文件的回调函数中根据error的错误信息来判断读取文件是否成功以及发生的错误</span></span><br><span class="line">  fs.readFile(filePath, <span class="function"><span class="keyword">function</span> (<span class="params">err, data</span>) </span>&#123;</span><br><span class="line">    <span class="comment">// 判断是否有错误</span></span><br><span class="line">    <span class="keyword">if</span> (err) &#123;</span><br><span class="line"></span><br><span class="line">      <span class="keyword">if</span> (err.code === <span class="string">'ENOENT'</span>) &#123; <span class="comment">// 判断是否是请求的文件是否不存在</span></span><br><span class="line"></span><br><span class="line">        res.setHeader(<span class="string">'Content-Type'</span>, <span class="string">'text/html; charset=utf8'</span>);</span><br><span class="line">        res.statusCode = <span class="number">404</span>;</span><br><span class="line">        res.statusMessage = <span class="string">'Not Found'</span>;</span><br><span class="line">        res.end(<span class="string">'&lt;h1&gt;请求的资源不存在！&lt;/h1&gt;'</span>);</span><br><span class="line"></span><br><span class="line">      &#125; <span class="keyword">else</span> <span class="keyword">if</span> (err.code === <span class="string">'EACCES'</span>) &#123; <span class="comment">// 判断文件是否有访问权限</span></span><br><span class="line"></span><br><span class="line">        res.setHeader(<span class="string">'Content-Type'</span>, <span class="string">'text/html; charset=utf8'</span>);</span><br><span class="line">        res.statusCode = <span class="number">403</span>;</span><br><span class="line">        res.statusMessage = <span class="string">'Forbidden'</span>;</span><br><span class="line">        res.end(<span class="string">'&lt;h1&gt;Permission denied！&lt;/h1&gt;'</span>);</span><br><span class="line">      &#125; <span class="keyword">else</span> &#123;</span><br><span class="line"></span><br><span class="line">        <span class="keyword">throw</span> err;  </span><br><span class="line">      &#125;</span><br><span class="line"></span><br><span class="line">    &#125; <span class="keyword">else</span> &#123;</span><br><span class="line">      </span><br><span class="line">      <span class="comment">// 如果没有错误则将读取到的文件返回给用户</span></span><br><span class="line">      res.statusCode = <span class="number">200</span>;</span><br><span class="line">      res.statusMessage = <span class="string">'OK'</span>;</span><br><span class="line">      res.end(data);</span><br><span class="line">    &#125;</span><br><span class="line">  &#125;)</span><br><span class="line">&#125;);</span><br><span class="line"></span><br><span class="line"></span><br><span class="line"></span><br><span class="line"><span class="comment">// 4. 启动服务</span></span><br><span class="line">server.listen(<span class="number">9000</span>, <span class="function"><span class="keyword">function</span> (<span class="params"></span>) </span>&#123;</span><br><span class="line">  <span class="comment">// body...</span></span><br><span class="line">  <span class="built_in">console</span>.log(<span class="string">'server is running, please visit: http://localhost:9000'</span>);</span><br><span class="line">&#125;);</span><br></pre></td></tr></table></figure><h3 id="Common-System-Errors-常见错误号"><a href="#Common-System-Errors-常见错误号" class="headerlink" title="Common System Errors - 常见错误号"></a>Common System Errors - 常见错误号</h3><ul><li><p>EACCES (Permission denied)</p><ul><li>An attempt was made to access a file in a way forbidden by its file access permissions.</li><li>访问被拒绝</li></ul></li><li><p>EADDRINUSE (Address already in use)</p><ul><li>An attempt to bind a server (net, http, or https) to a local address failed due to another server on the local system already occupying that address.</li><li>地址正在被使用（比如：端口号备占用）</li></ul></li><li><p>EEXIST (File exists)</p><ul><li>An existing file was the target of an operation that required that the target not exist.</li><li>文件已经存在</li></ul></li><li><p>EISDIR (Is a directory)</p><ul><li>An operation expected a file, but the given pathname was a directory.</li><li>给定的路径是目录</li></ul></li><li><p>ENOENT (No such file or directory)</p><ul><li>Commonly raised by fs operations to indicate that a component of the specified pathname does not exist – no entity (file or directory) could be found by the given path.</li><li>文件 或 目录不存在</li></ul></li><li><p>ENOTDIR (Not a directory)</p><ul><li>A component of the given pathname existed, but was not a directory as expected. Commonly raised by fs.readdir.</li><li>给定的路径不是目录</li></ul></li></ul><h3 id="同步文件操作-和-异步文件操作"><a href="#同步文件操作-和-异步文件操作" class="headerlink" title="同步文件操作 和 异步文件操作"></a>同步文件操作 和 异步文件操作</h3><ul><li><code>fs.readFile(file[, options], callback)</code></li><li><code>fs.readFileSync(file[, options])</code></li></ul><h3 id="通过设置-http-响应报文头实现弹框下载功能"><a href="#通过设置-http-响应报文头实现弹框下载功能" class="headerlink" title="通过设置 http 响应报文头实现弹框下载功能"></a>通过设置 http 响应报文头实现弹框下载功能</h3><ol><li>设置 <code>Content-Type: application/octet-stream</code></li><li>设置 <code>Content-Disposition: attachment; filename=demo.txt</code></li></ol><h2 id="七、node-js-学习资源"><a href="#七、node-js-学习资源" class="headerlink" title="七、node.js 学习资源"></a>七、node.js 学习资源</h2><h3 id="1-图书"><a href="#1-图书" class="headerlink" title="1. 图书"></a>1. 图书</h3><ul><li>《深入浅出Node.js》 作者：朴灵</li><li>《node.js 实战 中国程序员6》</li></ul><h3 id="2-网站资源"><a href="#2-网站资源" class="headerlink" title="2. 网站资源"></a>2. 网站资源</h3><ul><li><a href="https://cnodejs.org/" target="_blank" rel="noopener">CNODE社区</a> </li><li><a href="http://www.runoob.com/nodejs/nodejs-tutorial.html" target="_blank" rel="noopener">Node.js 简易教程</a></li><li><a href="https://www.nodebeginner.org/index-zh-cn.html" target="_blank" rel="noopener">Node入门</a></li><li><a href="https://github.com/ppker/node-lessons" target="_blank" rel="noopener">Node.js包教不包会</a></li><li><a href="http://cnodejs.org/getstart" target="_blank" rel="noopener">CNODE-新手入门</a></li><li>其他参考链接<ul><li><a href="https://www.ibm.com/developerworks/cn/opensource/os-nodejs/index.html" target="_blank" rel="noopener">Node.js 究竟是什么？</a></li><li><a href="https://www.zhihu.com/question/33578075" target="_blank" rel="noopener">Node.js是用来做什么的？</a></li><li><a href="http://www.infoq.com/cn/articles/what-is-nodejs" target="_blank" rel="noopener">什么是 node.js</a></li></ul></li></ul><h3 id="3-Node-js-使用场景-amp-实战"><a href="#3-Node-js-使用场景-amp-实战" class="headerlink" title="3. Node.js 使用场景 &amp; 实战"></a>3. Node.js 使用场景 &amp; 实战</h3><ul><li><a href="http://www.undozen.com/slides/xueqiu2012a/#21.1" target="_blank" rel="noopener">Node.js雪球实战半年谈</a></li><li><a href="http://mengxy.net/slides/nodejs-at-xueqiu/" target="_blank" rel="noopener">雪球上的 Node.js</a></li><li><a href="https://cnodejs.org/topic/50613e6601d0b8014822b6b9" target="_blank" rel="noopener">国内有哪些网站使用了 Node.js</a></li><li><a href="https://www.joyent.com/blog/node-js-office-hours-curtis-chambers-uber" target="_blank" rel="noopener">Node.js &amp; Uber</a></li><li><a href="https://www.zhihu.com/question/19653241" target="_blank" rel="noopener">Node.js 的优势和劣势</a></li><li><a href="http://www.devstore.cn/essay/essayInfo/2199.html" target="_blank" rel="noopener">node.js的15个应用场景</a></li><li><a href="https://github.com/simongong/js-stackoverflow-highest-votes/blob/master/questions1-10/when-to-use-nodejs.md" target="_blank" rel="noopener">How to decide when to use Node.js?</a></li><li><a href="http://www.cnblogs.com/sysuys/p/3460614.html" target="_blank" rel="noopener">优缺点及适用场景讨论</a></li><li><a href="https://www.zhihu.com/question/19587881" target="_blank" rel="noopener">Node.js 发展前景如何？适用于哪些场景？</a></li><li><a href="http://n.thepana.com/2014/01/06/node-yingyong-changjing/" target="_blank" rel="noopener">Node.js企业开发 一应用场景</a></li><li><a href="http://www.sohu.com/a/150175393_465223" target="_blank" rel="noopener">10个最佳Node.js企业应用案例：从Uber到LinkedIn</a></li><li><a href="http://blog.jobbole.com/40135/" target="_blank" rel="noopener">极速Node.js：来自LinkedIn的10个性能提升秘籍</a></li><li>为分布式应用做中转</li><li>前后端团队融合，节省成本</li><li>Node.js 简单高效</li><li>Node.js 是给前端用的，后端复杂的业务逻辑肯定不会用 Node.js</li></ul><h2 id="八、Node-Version-Manager（Node-版本管理器）"><a href="#八、Node-Version-Manager（Node-版本管理器）" class="headerlink" title="八、Node Version Manager（Node 版本管理器）"></a>八、Node Version Manager（Node 版本管理器）</h2><h3 id="nvm-Linux、Unix、OS-X"><a href="#nvm-Linux、Unix、OS-X" class="headerlink" title="nvm (Linux、Unix、OS X)"></a>nvm (Linux、Unix、OS X)</h3><ul><li><a href="https://github.com/creationix/nvm" target="_blank" rel="noopener">https://github.com/creationix/nvm</a></li><li>产用命令：<ul><li>nvm install node （安装最新版本的node）</li><li>nvm use node （使用指定版本的node）</li></ul></li></ul><h3 id="nvm-windows-Windows"><a href="#nvm-windows-Windows" class="headerlink" title="nvm-windows (Windows)"></a>nvm-windows (Windows)</h3><ul><li><a href="https://github.com/coreybutler/nvm-windows" target="_blank" rel="noopener">https://github.com/coreybutler/nvm-windows</a></li><li>常用命令：<ul><li>nvm version</li><li>nvm install latest</li><li>nvm install 版本号</li><li>nvm uninstall 版本号</li><li>nvm list</li><li>nvm use 版本号</li></ul></li></ul><h2 id="九、Buffer"><a href="#九、Buffer" class="headerlink" title="九、Buffer"></a>九、Buffer</h2><p>思考：Buffer 类型产生的原因？主要用来解决什么问题？</p><p>看一下什么是 Buffer? 什么是 Stream?</p><h3 id="一、类型介绍"><a href="#一、类型介绍" class="headerlink" title="一、类型介绍"></a>一、类型介绍</h3><ol><li>JavaScript 语言没有读取或操作二进制数据流的机制。</li><li>Node.js 中引入了 Buffer 类型使我们可以操作 TCP流 或 文件流。</li><li>Buffer 类型的对象类似于整数数组，但 Buffer 的大小是固定的、且在 V8 堆外分配物理内存。 Buffer 的大小在被创建时确定，且无法调整。（ buf.length 是固定的，不允许修改 ）</li><li>Buffer 是全局的，所以使用的时候无需 require() 的方式来加载</li></ol><h3 id="二、如何创建一个-Buffer-对象"><a href="#二、如何创建一个-Buffer-对象" class="headerlink" title="二、如何创建一个 Buffer 对象"></a>二、如何创建一个 Buffer 对象</h3><p>常见的 API 介绍</p><ol><li>创建一个 Buffer 对象</li></ol><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">// 1. 通过 Buffer.from() 创建一个 Buffer 对象</span></span><br><span class="line"></span><br><span class="line"><span class="comment">// 1.1 通过一个字节数组来创建一个 Buffer 对象</span></span><br><span class="line"><span class="keyword">var</span> array = [<span class="number">0x68</span>, <span class="number">0x65</span>, <span class="number">0x6c</span>, <span class="number">0x6c</span>, <span class="number">0x6f</span>, <span class="number">0x20</span>, <span class="number">0xe4</span>, <span class="number">0xb8</span>, <span class="number">0x96</span>, <span class="number">0xe7</span>, <span class="number">0x95</span>, <span class="number">0x8c</span>];</span><br><span class="line"><span class="keyword">var</span> buf = Buffer.from(array);</span><br><span class="line"><span class="built_in">console</span>.log(buf.toString(<span class="string">'utf8'</span>));</span><br><span class="line"></span><br><span class="line"><span class="comment">// 1.2 通过字符串来创建一个 Buffer 对象</span></span><br><span class="line"><span class="comment">// Buffer.from(string[, encoding])</span></span><br><span class="line"><span class="keyword">var</span> buf = Buffer.from(<span class="string">'你好世界！ Hello World!~'</span>);</span><br><span class="line"><span class="built_in">console</span>.log(buf);</span><br><span class="line"><span class="built_in">console</span>.log(buf.toString());</span><br></pre></td></tr></table></figure><ol start="2"><li>拼接多个 Buffer 对象为一个对象</li></ol><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">// Buffer.concat(list[, totalLength])</span></span><br><span class="line"><span class="keyword">var</span> bufferList = [];</span><br><span class="line"><span class="keyword">var</span> buf = Buffer.concat(bufferList);</span><br></pre></td></tr></table></figure><ol start="3"><li>获取字符串对应的字节个数</li></ol><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">// Buffer.byteLength(string[, encoding])</span></span><br><span class="line"></span><br><span class="line"><span class="keyword">var</span> len = Buffer.byteLength(<span class="string">'你好世界Hello'</span>, <span class="string">'utf8'</span>);</span><br><span class="line"><span class="built_in">console</span>.log(len);</span><br></pre></td></tr></table></figure><ol start="4"><li>判断一个对象是否是 Buffer 类型对象</li></ol><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">// Buffer.isBuffer(obj)</span></span><br><span class="line"><span class="comment">// obj &lt;Object&gt;</span></span><br><span class="line"><span class="comment">// Returns: &lt;boolean&gt;</span></span><br><span class="line"><span class="comment">// Returns true if obj is a Buffer, false otherwise.</span></span><br></pre></td></tr></table></figure><ol start="5"><li>获取 Buffer 中的某个字节</li></ol><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">// 根据索引获取 Buffer 中的某个字节（byte、octet）</span></span><br><span class="line"><span class="comment">// buf[index]</span></span><br></pre></td></tr></table></figure><p>6、获取 Buffer 对象中的字节的个数</p><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">// buf.length</span></span><br><span class="line"><span class="comment">// 注意：length 属性不可修改</span></span><br></pre></td></tr></table></figure><ol start="7"><li>已过时的 API</li></ol><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">// 以下 API 已全部过时</span></span><br><span class="line"><span class="keyword">new</span> Buffer(array)</span><br><span class="line"><span class="keyword">new</span> Buffer(buffer)</span><br><span class="line"><span class="keyword">new</span> Buffer(arrayBuffer[, byteOffset [, length]])</span><br><span class="line"><span class="keyword">new</span> Buffer(size)</span><br><span class="line"><span class="keyword">new</span> Buffer(string[, encoding])</span><br></pre></td></tr></table></figure><h3 id="三、Buffer-对象与编码"><a href="#三、Buffer-对象与编码" class="headerlink" title="三、Buffer 对象与编码"></a>三、Buffer 对象与编码</h3><p>Node.js 目前支持的编码如下：</p><ol><li>ascii</li><li>utf8</li><li>utf16le<ul><li>ucs2 是 utf16le 的别名 </li></ul></li><li>base64</li><li>latin1<ul><li>binary 是 latin1 的别名</li></ul></li><li>hex<ul><li>用两位 16 进制来表示每个字节</li></ul></li></ol><p>示例代码：</p><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line"></span><br><span class="line"><span class="keyword">var</span> buf = Buffer.from(<span class="string">'你好世界，Hello World！'</span>, <span class="string">'utf8'</span>);</span><br><span class="line"></span><br><span class="line"><span class="built_in">console</span>.log(buf.toString(<span class="string">'hex'</span>));</span><br><span class="line"><span class="built_in">console</span>.log(buf.toString(<span class="string">'base64'</span>));</span><br><span class="line"><span class="built_in">console</span>.log(buf.toString(<span class="string">'utf8'</span>));</span><br></pre></td></tr></table></figure><h3 id="四、思考：为什么会有-Buffer-类型？"><a href="#四、思考：为什么会有-Buffer-类型？" class="headerlink" title="四、思考：为什么会有 Buffer 类型？"></a>四、思考：为什么会有 Buffer 类型？</h3><ol><li>Buffer 使用来临时存储一些数据（二进制数据）</li><li>当我们要把一大块数据从一个地方传输到另外一个地方的时候可以通过 Buffer 对象进行传输</li><li>通过 Buffer 每次可以传输小部分数据，直到所有数据都传输完毕。</li></ol><h3 id="五、补充"><a href="#五、补充" class="headerlink" title="五、补充"></a>五、补充</h3><ol><li><p>Stream</p></li><li><p>Writable Stream</p><ul><li>允许 node.js 写数据到流中</li></ul></li><li><p>Readable Stream</p><ul><li>允许 node.js 从流中读取数据</li></ul></li></ol><h2 id="十、day1总结"><a href="#十、day1总结" class="headerlink" title="十、day1总结"></a>十、day1总结</h2><h3 id="1、浏览器的基本概念"><a href="#1、浏览器的基本概念" class="headerlink" title="1、浏览器的基本概念"></a>1、浏览器的基本概念</h3><ul><li>浏览器组成部分</li><li>浏览器的渲染引擎工作原理</li><li>浏览器访问服务器全过程</li><li>dns解析过程</li></ul><h3 id="2、node-js-介绍"><a href="#2、node-js-介绍" class="headerlink" title="2、node.js 介绍"></a>2、node.js 介绍</h3><ul><li>node.js 是什么</li><li>node.js 特点</li><li>node.js 能做什么</li></ul><h3 id="3、通过-node-js-编写代码"><a href="#3、通过-node-js-编写代码" class="headerlink" title="3、通过 node.js 编写代码"></a>3、通过 node.js 编写代码</h3><ul><li>REPL</li><li>通过创建 .js 文件来编写代码</li></ul><h3 id="4、通过-fs-模块进行文件读写"><a href="#4、通过-fs-模块进行文件读写" class="headerlink" title="4、通过 fs 模块进行文件读写"></a>4、通过 fs 模块进行文件读写</h3><ul><li><strong>dirname、</strong>filename</li><li>path 模块，用来对文件路径进行操作（path.join() 拼接路径）</li></ul><h3 id="5、全局模块"><a href="#5、全局模块" class="headerlink" title="5、全局模块"></a>5、全局模块</h3><ul><li>process</li><li>console</li></ul><h3 id="6、创建-http-服务"><a href="#6、创建-http-服务" class="headerlink" title="6、创建 http 服务"></a>6、创建 http 服务</h3><ul><li>加载 http 模块</li><li>创建 http 服务</li><li>监听 request 事件</li><li>开启服务</li></ul><h3 id="7、在用户的-request-事件中，必须要结束请求-。-res-end"><a href="#7、在用户的-request-事件中，必须要结束请求-。-res-end" class="headerlink" title="7、在用户的 request 事件中，必须要结束请求 。 res.end()"></a>7、在用户的 request 事件中，必须要结束请求 。 res.end()</h3><h3 id="8、服务器端通过用户不同请求（req-url），做出不同响应"><a href="#8、服务器端通过用户不同请求（req-url），做出不同响应" class="headerlink" title="8、服务器端通过用户不同请求（req.url），做出不同响应"></a>8、服务器端通过用户不同请求（req.url），做出不同响应</h3>]]></content>
      
      
      <categories>
          
          <category> Nodejs </category>
          
      </categories>
      
      
        <tags>
            
            <tag> Nodejs笔记 </tag>
            
        </tags>
      
    </entry>
    
    <entry>
      <title>闭包/沙箱/递归/深浅拷贝</title>
      <link href="/2018/09/19/2018-09-19/"/>
      <url>/2018/09/19/2018-09-19/</url>
      
        <content type="html"><![CDATA[<link rel="stylesheet" class="aplayer-secondary-style-marker" href="/assets/css/APlayer.min.css"><script src="/assets/js/APlayer.min.js" class="aplayer-secondary-script-marker"></script><h1 id="重点"><a href="#重点" class="headerlink" title="重点"></a>重点</h1><p>闭包<br>闭包的概念:函数A中,有一个函数B,函数B中可以访问函数A中定义的变量或者是数据,此时形成了闭包(这句话暂时不严谨)<br>闭包的模式:函数模式的闭包,对象模式的闭包<br>闭包的作用:缓存数据,延长作用域链<br>闭包的优点和缺点:缓存数据<br>闭包的应用<br>//总结:如果想要缓存数据,就把这个数据放在外层的函数和里层的函数的中间位置<br>//闭包的作用:缓存数据.优点也是缺陷,没有及时的释放<br>//局部变量是在函数中,函数使用结束后,局部变量就会被自动的释放<br>//闭包后,里面的局部变量的使用作用域链就会被延长</p><p>沙箱<br>沙箱:环境,黑盒,在一个虚拟的环境中模拟真实世界,做实验,实验结果和真实世界的结果是一样,但是不会影响真实世界</p><p>递归<br>递归:函数中调用函数自己,此时就是递归,递归一定要有结束的条件</p><p>浅拷贝:拷贝就是复制,就相当于把一个对象中的所有的内容,复制一份给另一个对象,直接复制,或者说,就是把一个对象的地址给了另一个对象,他们指向相同,两个对象之间有共同的属性或者方法,都可以使用</p><p>深拷贝:拷贝还是复制,深:把一个对象中所有的属性或者方法,一个一个的找到.并且在另一个对象中开辟相应的空间,一个一个的存储到另一个对象中</p><p>案例：<br>闭包<br><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br><span class="line">64</span><br><span class="line">65</span><br><span class="line">66</span><br><span class="line">67</span><br><span class="line">68</span><br><span class="line">69</span><br><span class="line">70</span><br><span class="line">71</span><br><span class="line">72</span><br><span class="line">73</span><br><span class="line">74</span><br><span class="line">75</span><br><span class="line">76</span><br><span class="line">77</span><br></pre></td><td class="code"><pre><span class="line">&lt;!DOCTYPE html&gt;</span><br><span class="line">&lt;html lang=&quot;en&quot;&gt;</span><br><span class="line">&lt;head&gt;</span><br><span class="line">  &lt;meta charset=&quot;UTF-8&quot;&gt;</span><br><span class="line">  &lt;title&gt;对自己狠点&lt;/title&gt;</span><br><span class="line">  &lt;style&gt;</span><br><span class="line">    ul &#123;</span><br><span class="line">      list-style-type: none;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    li &#123;</span><br><span class="line">      float: left;</span><br><span class="line">      margin-left: 10px;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    img &#123;</span><br><span class="line">      width: 200px;</span><br><span class="line">      height: 180px;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    input &#123;</span><br><span class="line">      margin-left: 30%;</span><br><span class="line">    &#125;</span><br><span class="line">  &lt;/style&gt;</span><br><span class="line">  &lt;script&gt;</span><br><span class="line">    //$永远都是24k纯帅的十八岁的杨哥$</span><br><span class="line">  &lt;/script&gt;</span><br><span class="line">&lt;/head&gt;</span><br><span class="line">&lt;body&gt;</span><br><span class="line">&lt;ul&gt;</span><br><span class="line">  &lt;li&gt;&lt;img src=&quot;images/ly.jpg&quot; alt=&quot;&quot;&gt;&lt;br/&gt;&lt;input type=&quot;button&quot; value=&quot;赞(1)&quot;&gt;&lt;/li&gt;</span><br><span class="line">  &lt;li&gt;&lt;img src=&quot;images/lyml.jpg&quot; alt=&quot;&quot;&gt;&lt;br/&gt;&lt;input type=&quot;button&quot; value=&quot;赞(1)&quot;&gt;&lt;/li&gt;</span><br><span class="line">  &lt;li&gt;&lt;img src=&quot;images/fj.jpg&quot; alt=&quot;&quot;&gt;&lt;br/&gt;&lt;input type=&quot;button&quot; value=&quot;赞(1)&quot;&gt;&lt;/li&gt;</span><br><span class="line">  &lt;li&gt;&lt;img src=&quot;images/bd.jpg&quot; alt=&quot;&quot;&gt;&lt;br/&gt;&lt;input type=&quot;button&quot; value=&quot;赞(1)&quot;&gt;&lt;/li&gt;</span><br><span class="line">&lt;/ul&gt;</span><br><span class="line">&lt;script&gt;</span><br><span class="line"></span><br><span class="line">  //获取所有的按钮</span><br><span class="line">  //根据标签名字获取元素</span><br><span class="line">  function my$(tagName) &#123;</span><br><span class="line">    return document.getElementsByTagName(tagName);</span><br><span class="line">  &#125;</span><br><span class="line">  //闭包缓存数据</span><br><span class="line">  function getValue() &#123;</span><br><span class="line">    var value=2;</span><br><span class="line">    return function () &#123;</span><br><span class="line">      //每一次点击的时候,都应该改变当前点击按钮的value值</span><br><span class="line">      this.value=&quot;赞(&quot;+(value++)+&quot;)&quot;;</span><br><span class="line">    &#125;</span><br><span class="line">  &#125;</span><br><span class="line">  //获取所有的按钮</span><br><span class="line">  var btnObjs=my$(&quot;input&quot;);</span><br><span class="line">  //循环遍历每个按钮,注册点击事件</span><br><span class="line">  for(var i=0;i&lt;btnObjs.length;i++)&#123;</span><br><span class="line">    //注册事件</span><br><span class="line">    btnObjs[i].onclick=getValue();</span><br><span class="line">  &#125;</span><br><span class="line"></span><br><span class="line"></span><br><span class="line"></span><br><span class="line"></span><br><span class="line">//  var btnObjs=my$(&quot;input&quot;);</span><br><span class="line">//  var value=1;</span><br><span class="line">//  //循环遍历每个按钮</span><br><span class="line">//  for(var i=0;i&lt;btnObjs.length;i++)&#123;</span><br><span class="line">//</span><br><span class="line">//    //为每个按钮注册点击事件</span><br><span class="line">//    btnObjs[i].onclick=function () &#123;</span><br><span class="line">//      console.log(&quot;哈哈&quot;);</span><br><span class="line">//      this.value=&quot;赞(&quot;+(value++)+&quot;)&quot;;</span><br><span class="line">//    &#125;;</span><br><span class="line">//  &#125;</span><br><span class="line"></span><br><span class="line"></span><br><span class="line">&lt;/script&gt;</span><br><span class="line">&lt;/body&gt;</span><br><span class="line">&lt;/html&gt;</span><br></pre></td></tr></table></figure></p><p>沙箱<br><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br></pre></td><td class="code"><pre><span class="line">&lt;!DOCTYPE html&gt;</span><br><span class="line">&lt;html lang=&quot;en&quot;&gt;</span><br><span class="line">&lt;head&gt;</span><br><span class="line">  &lt;meta charset=&quot;UTF-8&quot;&gt;</span><br><span class="line">  &lt;title&gt;title&lt;/title&gt;</span><br><span class="line"></span><br><span class="line">&lt;/head&gt;</span><br><span class="line">&lt;body&gt;</span><br><span class="line">&lt;div&gt;这是div&lt;/div&gt;</span><br><span class="line">&lt;div&gt;这是div&lt;/div&gt;</span><br><span class="line">&lt;div&gt;这是div&lt;/div&gt;</span><br><span class="line">&lt;p&gt;这是p&lt;/p&gt;</span><br><span class="line">&lt;p&gt;这是p&lt;/p&gt;</span><br><span class="line">&lt;p&gt;这是p&lt;/p&gt;</span><br><span class="line">&lt;script&gt;</span><br><span class="line">  var getTag = 10;</span><br><span class="line">  var dvObjs = 20;</span><br><span class="line">  var pObjs = 30;</span><br><span class="line">  (function () &#123;</span><br><span class="line">    //根据标签名字获取元素</span><br><span class="line">    function getTag(tagName) &#123;</span><br><span class="line">      return document.getElementsByTagName(tagName)</span><br><span class="line">    &#125;</span><br><span class="line">    //获取所有的div</span><br><span class="line">    var dvObjs = getTag(&quot;div&quot;);</span><br><span class="line">    for (var i = 0; i &lt; dvObjs.length; i++) &#123;</span><br><span class="line">      dvObjs[i].style.border = &quot;2px solid pink&quot;;</span><br><span class="line">    &#125;</span><br><span class="line">    //获取所有的p</span><br><span class="line">    var pObjs = getTag(&quot;p&quot;);</span><br><span class="line">    for (var i = 0; i &lt; pObjs.length; i++) &#123;</span><br><span class="line">      pObjs[i].style.border = &quot;2px solid pink&quot;;</span><br><span class="line">    &#125;</span><br><span class="line">  &#125;());</span><br><span class="line">  console.log(getTag);</span><br><span class="line">  console.log(dvObjs);</span><br><span class="line">  console.log(pObjs);</span><br><span class="line">&lt;/script&gt;</span><br><span class="line">&lt;/body&gt;</span><br><span class="line">&lt;/html&gt;</span><br></pre></td></tr></table></figure></p><p>递归<br><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br><span class="line">64</span><br><span class="line">65</span><br><span class="line">66</span><br><span class="line">67</span><br><span class="line">68</span><br><span class="line">69</span><br><span class="line">70</span><br><span class="line">71</span><br><span class="line">72</span><br><span class="line">73</span><br><span class="line">74</span><br><span class="line">75</span><br><span class="line">76</span><br><span class="line">77</span><br><span class="line">78</span><br><span class="line">79</span><br><span class="line">80</span><br></pre></td><td class="code"><pre><span class="line">&lt;!DOCTYPE html&gt;</span><br><span class="line">&lt;html lang=&quot;en&quot;&gt;</span><br><span class="line">&lt;head&gt;</span><br><span class="line">  &lt;meta charset=&quot;UTF-8&quot;&gt;</span><br><span class="line">  &lt;title&gt;title&lt;/title&gt;</span><br><span class="line">  &lt;script&gt;</span><br><span class="line">    //求n个数字的和,5 计算1+2+3+4+5</span><br><span class="line">//    var sum=0;</span><br><span class="line">//    for(var i=1;i&lt;=5;i++)&#123;</span><br><span class="line">//      sum+=i;</span><br><span class="line">//    &#125;</span><br><span class="line">//    console.log(sum);</span><br><span class="line"></span><br><span class="line"></span><br><span class="line">    //递归实现:求n个数字的和   n=5---&gt;  5+4+3+2+1</span><br><span class="line"></span><br><span class="line">    //函数的声明</span><br><span class="line">//    function getSum(x) &#123;</span><br><span class="line">//      if(x==1)&#123;</span><br><span class="line">//        return 1;</span><br><span class="line">//      &#125;</span><br><span class="line">//      return x+getSum(x-1);</span><br><span class="line">//    &#125;</span><br><span class="line">//    //函数的调用</span><br><span class="line">//    console.log(getSum(5));</span><br><span class="line"></span><br><span class="line">    /*</span><br><span class="line">    *</span><br><span class="line">    * 执行过程:</span><br><span class="line">    * 代码执行getSum(5)---&gt;进入函数,此时的x是5,执行的是5+getSum(4),此时代码等待</span><br><span class="line">    * 此时5+getSum(4),代码先不进行计算,先执行getSum(4),进入函数,执行的是4+getSum(3),等待, 先执行的是getSum(3),进入函数,执行3+getSum(2),等待,先执行getSum(2),进入函数,执行 2+getSum(1);等待, 先执行getSum(1),执行的是x==1的判断,return 1,所以,</span><br><span class="line">    * 此时getSum(1)的结果是1,开始向外走出去</span><br><span class="line">    * 2+getSum(1) 此时的结果是:2+1</span><br><span class="line">    * 执行:</span><br><span class="line">    * getSum(2)----&gt;2+1</span><br><span class="line">    * 3+getSum(2) 此时的结果是3+2+1</span><br><span class="line">    * 4+getSum(3) 此时的结果是4+3+2+1</span><br><span class="line">    * 5+getSum(4) 此时的结果是5+4+3+2+1</span><br><span class="line">    *</span><br><span class="line">    * 结果:15</span><br><span class="line">    *</span><br><span class="line">    *</span><br><span class="line">    *</span><br><span class="line">    * */</span><br><span class="line"></span><br><span class="line"></span><br><span class="line"></span><br><span class="line">    //递归案例:求一个数字各个位数上的数字的和:  123   ---&gt;6 ---1+2+3</span><br><span class="line">    //523</span><br><span class="line">    function getEverySum(x) &#123;</span><br><span class="line">      if(x&lt;10)&#123;</span><br><span class="line">        return x;</span><br><span class="line">      &#125;</span><br><span class="line">      //获取的是这个数字的个位数</span><br><span class="line">      return x%10+getEverySum(parseInt(x/10));</span><br><span class="line">    &#125;</span><br><span class="line">   console.log(getEverySum(1364));//5</span><br><span class="line"></span><br><span class="line"></span><br><span class="line"></span><br><span class="line">    //递归案例:求斐波那契数列</span><br><span class="line"></span><br><span class="line">    function getFib(x) &#123;</span><br><span class="line">      if(x==1||x==2)&#123;</span><br><span class="line">        return 1</span><br><span class="line">      &#125;</span><br><span class="line">      return getFib(x-1)+getFib(x-2);</span><br><span class="line">    &#125;</span><br><span class="line">    console.log(getFib(12));</span><br><span class="line"></span><br><span class="line"></span><br><span class="line"></span><br><span class="line"></span><br><span class="line">  &lt;/script&gt;</span><br><span class="line">&lt;/head&gt;</span><br><span class="line">&lt;body&gt;</span><br><span class="line"></span><br><span class="line"></span><br><span class="line">&lt;/body&gt;</span><br><span class="line">&lt;/html&gt;</span><br></pre></td></tr></table></figure></p><p>浅考备<br><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br></pre></td><td class="code"><pre><span class="line">var obj1=&#123;</span><br><span class="line">      age:10,</span><br><span class="line">      sex:&quot;男&quot;,</span><br><span class="line">      car:[&quot;奔驰&quot;,&quot;宝马&quot;,&quot;特斯拉&quot;,&quot;奥拓&quot;]</span><br><span class="line">    &#125;;</span><br><span class="line">    //另一个对象</span><br><span class="line">    var obj2=&#123;&#125;;</span><br><span class="line">    </span><br><span class="line">    //写一个函数,作用:把一个对象的属性复制到另一个对象中,浅拷贝</span><br><span class="line">    //把a对象中的所有的属性复制到对象b中</span><br><span class="line">    function extend(a,b) &#123;</span><br><span class="line">      for(var key in a)&#123;</span><br><span class="line">        b[key]=a[key];</span><br><span class="line">      &#125;</span><br><span class="line">    &#125;</span><br><span class="line">    extend(obj1,obj2);</span><br><span class="line">    console.dir(obj2);//开始的时候这个对象是空对象</span><br><span class="line">    console.dir(obj1);//有属性</span><br></pre></td></tr></table></figure></p><p>深拷贝<br><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br></pre></td><td class="code"><pre><span class="line">var obj1=&#123;</span><br><span class="line">      age:10,</span><br><span class="line">      sex:&quot;男&quot;,</span><br><span class="line">      car:[&quot;奔驰&quot;,&quot;宝马&quot;,&quot;特斯拉&quot;,&quot;奥拓&quot;],</span><br><span class="line">      dog:&#123;</span><br><span class="line">        name:&quot;大黄&quot;,</span><br><span class="line">        age:5,</span><br><span class="line">        color:&quot;黑白色&quot;</span><br><span class="line">      &#125;</span><br><span class="line">    &#125;;</span><br><span class="line"></span><br><span class="line">    var obj2=&#123;&#125;;//空对象</span><br><span class="line">    //通过函数实现,把对象a中的所有的数据深拷贝到对象b中</span><br><span class="line">    function extend(a,b) &#123;</span><br><span class="line">      for(var key in a)&#123;</span><br><span class="line">        //先获取a对象中每个属性的值</span><br><span class="line">        var item=a[key];</span><br><span class="line">        //判断这个属性的值是不是数组</span><br><span class="line">        if(item instanceof Array)&#123;</span><br><span class="line">          //如果是数组,那么在b对象中添加一个新的属性,并且这个属性值也是数组</span><br><span class="line">          b[key]=[];</span><br><span class="line">          //调用这个方法，把a对象中这个数组的属性值一个一个的复制到b对象的这个数组属性中</span><br><span class="line">          extend(item,b[key]);</span><br><span class="line">        &#125;else if(item instanceof Object)&#123;//判断这个值是不是对象类型的</span><br><span class="line">     //如果是对象类型的,那么在b对象中添加一个属性,是一个空对象</span><br><span class="line">          b[key]=&#123;&#125;;</span><br><span class="line">          //再次调用这个函数,把a对象中的属性对象的值一个一个的复制到b对象的这个属性对象中</span><br><span class="line">          extend(item,b[key]);</span><br><span class="line">        &#125;else&#123;</span><br><span class="line">          //如果值是普通的数据,直接复制到b对象的这个属性中</span><br><span class="line">          b[key]=item;</span><br><span class="line">        &#125;</span><br><span class="line">      &#125;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    extend(obj1,obj2);</span><br><span class="line">    console.dir(obj1);</span><br><span class="line">    console.dir(obj2);</span><br></pre></td></tr></table></figure></p>]]></content>
      
      
      <categories>
          
          <category> JavaScript </category>
          
      </categories>
      
      
        <tags>
            
            <tag> js笔记 </tag>
            
        </tags>
      
    </entry>
    
    <entry>
      <title>面向对象案例表格排序--函数做返回值</title>
      <link href="/2018/09/12/2018-09-12(2)/"/>
      <url>/2018/09/12/2018-09-12(2)/</url>
      
        <content type="html"><![CDATA[<link rel="stylesheet" class="aplayer-secondary-style-marker" href="/assets/css/APlayer.min.css"><script src="/assets/js/APlayer.min.js" class="aplayer-secondary-script-marker"></script><h1 id="重点"><a href="#重点" class="headerlink" title="重点"></a>重点</h1><p>1.数组的创建，添加，调用，输出<br>2.构造函数，原型方法添加，函数的调用<br>3.函数做返回值做数组的排序<br>4.元素的创建，添加，调用，获取，清除<br>5.innerHtml的使用</p><h1 id="效果"><a href="#效果" class="headerlink" title="效果"></a>效果</h1><p><img src="/bgpxal/bgpx1.png"><br><img src="/bgpxal/bgpx2.png"><br><img src="/bgpxal/bgpx3.png"></p><h1 id="素材"><a href="#素材" class="headerlink" title="素材"></a>素材</h1><p><img src="/bgpxal/bianxingjingang.jpg"><br><img src="/bgpxal/qiannvyouhun.jpg"><br><img src="/bgpxal/gongfu.jpg"><br><img src="/bgpxal/suduyujiqing.jpg"><br><img src="/bgpxal/dahuaxiyou.jpg"></p><h1 id="案例代码"><a href="#案例代码" class="headerlink" title="案例代码"></a>案例代码</h1><h3 id="Css-外部引入-style-css"><a href="#Css-外部引入-style-css" class="headerlink" title="Css (外部引入) style.css"></a>Css (外部引入) style.css</h3><figure class="highlight css"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">/*</span></span><br><span class="line"><span class="comment"> * @Author: yhf </span></span><br><span class="line"><span class="comment"> * @Date: 2018-09-12 20:43:23 </span></span><br><span class="line"><span class="comment"> * @Last Modified by: yhf</span></span><br><span class="line"><span class="comment"> * @Last Modified time: 2018-09-12 23:23:48</span></span><br><span class="line"><span class="comment"> */</span></span><br><span class="line"><span class="comment">/* 初始化页面 */</span></span><br><span class="line">* &#123;</span><br><span class="line">    <span class="attribute">padding</span>: <span class="number">0</span>;</span><br><span class="line">    <span class="attribute">margin</span>: <span class="number">0</span>;</span><br><span class="line">&#125;</span><br><span class="line"><span class="comment">/* 表格 */</span></span><br><span class="line"><span class="selector-tag">table</span> &#123;</span><br><span class="line">    <span class="attribute">position</span>: relative;</span><br><span class="line">    <span class="attribute">top</span>: <span class="number">100px</span>;</span><br><span class="line">    <span class="attribute">left</span>: <span class="number">100px</span>;</span><br><span class="line">    <span class="attribute">width</span>: <span class="number">800px</span>;</span><br><span class="line">&#125;</span><br><span class="line"><span class="comment">/* 表头 */</span></span><br><span class="line"><span class="selector-tag">th</span> &#123;</span><br><span class="line">    <span class="attribute">height</span>: <span class="number">50px</span>;</span><br><span class="line">    <span class="attribute">cursor</span>: pointer;</span><br><span class="line">&#125;</span><br><span class="line"><span class="comment">/* 表格 */</span></span><br><span class="line"><span class="selector-tag">td</span> &#123;</span><br><span class="line">    <span class="attribute">text-align</span>: center;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h3 id="Html"><a href="#Html" class="headerlink" title="Html"></a>Html</h3><figure class="highlight html"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">table</span> <span class="attr">border</span>=<span class="string">"1"</span> <span class="attr">cellspacing</span>=<span class="string">"0"</span> <span class="attr">cellpadding</span>=<span class="string">"0"</span>&gt;</span><span class="tag">&lt;/<span class="name">table</span>&gt;</span></span><br></pre></td></tr></table></figure><h3 id="Js-外部引入-index-js"><a href="#Js-外部引入-index-js" class="headerlink" title="Js(外部引入) index.js"></a>Js(外部引入) index.js</h3><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br><span class="line">64</span><br><span class="line">65</span><br><span class="line">66</span><br><span class="line">67</span><br><span class="line">68</span><br><span class="line">69</span><br><span class="line">70</span><br><span class="line">71</span><br><span class="line">72</span><br><span class="line">73</span><br><span class="line">74</span><br><span class="line">75</span><br><span class="line">76</span><br><span class="line">77</span><br><span class="line">78</span><br><span class="line">79</span><br><span class="line">80</span><br><span class="line">81</span><br><span class="line">82</span><br><span class="line">83</span><br><span class="line">84</span><br><span class="line">85</span><br><span class="line">86</span><br><span class="line">87</span><br><span class="line">88</span><br><span class="line">89</span><br><span class="line">90</span><br><span class="line">91</span><br><span class="line">92</span><br><span class="line">93</span><br><span class="line">94</span><br><span class="line">95</span><br><span class="line">96</span><br><span class="line">97</span><br><span class="line">98</span><br><span class="line">99</span><br><span class="line">100</span><br><span class="line">101</span><br><span class="line">102</span><br><span class="line">103</span><br><span class="line">104</span><br><span class="line">105</span><br><span class="line">106</span><br><span class="line">107</span><br><span class="line">108</span><br><span class="line">109</span><br><span class="line">110</span><br><span class="line">111</span><br><span class="line">112</span><br><span class="line">113</span><br><span class="line">114</span><br><span class="line">115</span><br><span class="line">116</span><br><span class="line">117</span><br><span class="line">118</span><br><span class="line">119</span><br><span class="line">120</span><br><span class="line">121</span><br><span class="line">122</span><br><span class="line">123</span><br><span class="line">124</span><br><span class="line">125</span><br><span class="line">126</span><br><span class="line">127</span><br><span class="line">128</span><br><span class="line">129</span><br><span class="line">130</span><br><span class="line">131</span><br><span class="line">132</span><br><span class="line">133</span><br><span class="line">134</span><br><span class="line">135</span><br><span class="line">136</span><br><span class="line">137</span><br><span class="line">138</span><br><span class="line">139</span><br><span class="line">140</span><br><span class="line">141</span><br><span class="line">142</span><br><span class="line">143</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">/*</span></span><br><span class="line"><span class="comment"> * @Author: yhf </span></span><br><span class="line"><span class="comment"> * @Date: 2018-09-12 20:47:37 </span></span><br><span class="line"><span class="comment"> * @Last Modified by: yhf</span></span><br><span class="line"><span class="comment"> * @Last Modified time: 2018-09-12 23:16:19</span></span><br><span class="line"><span class="comment"> */</span></span><br><span class="line"></span><br><span class="line"><span class="comment">// 参数数组</span></span><br><span class="line"><span class="keyword">let</span> movieArray = [&#123;</span><br><span class="line">    img: <span class="string">"bianxingjingang.jpg"</span>,</span><br><span class="line">    movieName: <span class="string">"变形金刚"</span>,</span><br><span class="line">    star: <span class="string">"希亚·拉伯夫"</span>,</span><br><span class="line">    direct: <span class="string">"迈克尔·贝"</span>,</span><br><span class="line">    type: <span class="string">"d动作"</span>,</span><br><span class="line">    time: <span class="string">"2007年07月03日"</span></span><br><span class="line">&#125;,</span><br><span class="line">&#123;</span><br><span class="line">    img: <span class="string">"qiannvyouhun.jpg"</span>,</span><br><span class="line">    movieName: <span class="string">"倩女幽魂"</span>,</span><br><span class="line">    star: <span class="string">"张国荣"</span>,</span><br><span class="line">    direct: <span class="string">"程小东"</span>,</span><br><span class="line">    type: <span class="string">"j惊悚"</span>,</span><br><span class="line">    time: <span class="string">"1987年7月18日"</span></span><br><span class="line">&#125;,</span><br><span class="line">&#123;</span><br><span class="line">    img: <span class="string">"gongfu.jpg"</span>,</span><br><span class="line">    movieName: <span class="string">"功夫"</span>,</span><br><span class="line">    star: <span class="string">"周星驰"</span>,</span><br><span class="line">    direct: <span class="string">"周星驰"</span>,</span><br><span class="line">    type: <span class="string">"x喜剧"</span>,</span><br><span class="line">    time: <span class="string">"2014年12月24日"</span></span><br><span class="line">&#125;,</span><br><span class="line">&#123;</span><br><span class="line">    img: <span class="string">"suduyujiqing.jpg"</span>,</span><br><span class="line">    movieName: <span class="string">"速度与激情"</span>,</span><br><span class="line">    star: <span class="string">"保罗·沃克"</span>,</span><br><span class="line">    direct: <span class="string">"罗伯·科恩"</span>,</span><br><span class="line">    type: <span class="string">"d动作"</span>,</span><br><span class="line">    time: <span class="string">"2015年4月3日"</span></span><br><span class="line">&#125;,</span><br><span class="line">&#123;</span><br><span class="line">    img: <span class="string">"dahuaxiyou.jpg"</span>,</span><br><span class="line">    movieName: <span class="string">"大话西游"</span>,</span><br><span class="line">    star: <span class="string">"周星驰"</span>,</span><br><span class="line">    direct: <span class="string">"刘镇伟"</span>,</span><br><span class="line">    type: <span class="string">"a爱情"</span>,</span><br><span class="line">    time: <span class="string">"2014年10月24日"</span></span><br><span class="line">&#125;</span><br><span class="line">];</span><br><span class="line"><span class="comment">// 获取元素的函数</span></span><br><span class="line"><span class="function"><span class="keyword">function</span> <span class="title">$my</span>(<span class="params">date</span>) </span>&#123;</span><br><span class="line">    <span class="keyword">return</span> <span class="built_in">document</span>.querySelector(date);</span><br><span class="line">&#125;;</span><br><span class="line"></span><br><span class="line"><span class="comment">// 创建构造函数</span></span><br><span class="line"><span class="function"><span class="keyword">function</span> <span class="title">Person</span>(<span class="params">date</span>) </span>&#123;</span><br><span class="line">    <span class="keyword">this</span>.table = $my(date);</span><br><span class="line">&#125;;</span><br><span class="line"></span><br><span class="line"><span class="comment">// 添加原型方法 初始化</span></span><br><span class="line">Person.prototype.init = <span class="function"><span class="keyword">function</span> (<span class="params">date</span>) </span>&#123;</span><br><span class="line">    <span class="comment">// 初始化表头</span></span><br><span class="line">    <span class="keyword">this</span>.initThead();</span><br><span class="line">    <span class="comment">// 初始化表格内容</span></span><br><span class="line">    <span class="keyword">this</span>.initTbody(date);</span><br><span class="line"></span><br><span class="line">    <span class="keyword">this</span>.initPx(date)</span><br><span class="line">&#125;;</span><br><span class="line"></span><br><span class="line"><span class="comment">// 添加原型方法 添加表头</span></span><br><span class="line">Person.prototype.initThead = <span class="function"><span class="keyword">function</span> (<span class="params"></span>) </span>&#123;</span><br><span class="line">    <span class="comment">//先创建一个thead标签,创建tr-th,立刻加入到table中</span></span><br><span class="line">    <span class="keyword">var</span> thead = <span class="built_in">document</span>.createElement(<span class="string">"thead"</span>);</span><br><span class="line">    <span class="comment">// 给表头添加资料</span></span><br><span class="line">    thead.innerHTML = <span class="string">'&lt;tr&gt;&lt;th falg="img"&gt;影片&lt;/th&gt;&lt;th falg="star"&gt;主演&lt;/th&gt;&lt;th falg="direct"&gt;导演&lt;/th&gt;&lt;th falg="type"&gt;类别&lt;/th&gt;&lt;th falg="time"&gt;上映时间&lt;/th&gt;&lt;/tr&gt;'</span>;</span><br><span class="line">    <span class="comment">// 添加到表格</span></span><br><span class="line">    <span class="keyword">this</span>.table.appendChild(thead);</span><br><span class="line">&#125;;</span><br><span class="line"></span><br><span class="line"><span class="comment">// 添加原型方法 添加表格内容 刷新页面</span></span><br><span class="line">Person.prototype.initTbody = <span class="function"><span class="keyword">function</span> (<span class="params">date</span>) </span>&#123;</span><br><span class="line">    <span class="comment">// 刷新页面，判断有id等于tob的时候删除</span></span><br><span class="line">    <span class="keyword">if</span> ($my(<span class="string">"#tob"</span>)) &#123;</span><br><span class="line">        <span class="keyword">this</span>.table.removeChild($my(<span class="string">"#tob"</span>));</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="comment">// 创建tbody</span></span><br><span class="line">    <span class="keyword">let</span> tbody = <span class="built_in">document</span>.createElement(<span class="string">"tbody"</span>);</span><br><span class="line">    <span class="comment">// 添加id</span></span><br><span class="line">    tbody.id = <span class="string">"tob"</span>;</span><br><span class="line">    <span class="comment">// 装数据的数组</span></span><br><span class="line">    <span class="keyword">let</span> arr=[];</span><br><span class="line">    <span class="keyword">for</span> (<span class="keyword">let</span> i = <span class="number">0</span>; i &lt; date.length; i++) &#123;</span><br><span class="line">        <span class="keyword">const</span> ele = date[i];</span><br><span class="line">        <span class="comment">// 把数组的数据拿出来添加到新的数组</span></span><br><span class="line">        arr.push(<span class="string">"&lt;tr&gt;&lt;td&gt;&lt;img src=images/"</span> + ele.img + <span class="string">"&gt; &lt;br /&gt;"</span> + ele.movieName + <span class="string">"&lt;/td&gt;&lt;td&gt;"</span> + ele.star + <span class="string">"&lt;/td&gt;&lt;td&gt;"</span> + ele.direct + <span class="string">"&lt;/td&gt;&lt;td&gt;"</span> + ele.type + <span class="string">"&lt;/td&gt;&lt;td&gt;"</span> + ele.time + <span class="string">"&lt;/td&gt;&lt;/tr&gt;"</span>);</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="comment">// 把新数组中的元素拿出来添加到tbody  join是控制连接符 “”是空，表示没有链接符</span></span><br><span class="line">    tbody.innerHTML = arr.join(<span class="string">""</span>);</span><br><span class="line">    <span class="comment">// 把tbody添加到表格里面</span></span><br><span class="line">    <span class="keyword">this</span>.table.appendChild(tbody);</span><br><span class="line">&#125;;</span><br><span class="line"></span><br><span class="line"><span class="comment">// 添加原型方法 数组排序</span></span><br><span class="line">Person.prototype.Szpx = <span class="function"><span class="keyword">function</span> (<span class="params">date,attr</span>) </span>&#123;</span><br><span class="line">    <span class="function"><span class="keyword">function</span> <span class="title">fn</span>(<span class="params">attr</span>) </span>&#123;</span><br><span class="line">        <span class="keyword">return</span> <span class="function"><span class="keyword">function</span> (<span class="params">obj1,obj2</span>) </span>&#123;</span><br><span class="line">            <span class="keyword">if</span> (obj1[attr] &gt; obj2[attr]) &#123;</span><br><span class="line">                <span class="keyword">return</span> <span class="number">1</span>;</span><br><span class="line">            &#125; <span class="keyword">else</span> <span class="keyword">if</span> (obj1[attr] == obj2[attr]) &#123;</span><br><span class="line">                <span class="keyword">return</span> <span class="number">0</span>;</span><br><span class="line">            &#125; <span class="keyword">else</span> &#123;</span><br><span class="line">                <span class="keyword">return</span> <span class="number">-1</span>;</span><br><span class="line">            &#125;</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">let</span> ff = fn(attr);</span><br><span class="line">    date.sort(ff);</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="comment">// 添加原型方法 获取点击元素判断排序值</span></span><br><span class="line">Person.prototype.initPx = <span class="function"><span class="keyword">function</span> (<span class="params">date</span>) </span>&#123;</span><br><span class="line">    <span class="comment">// 获取每一个表头的th</span></span><br><span class="line">    <span class="keyword">let</span> ths = <span class="built_in">document</span>.querySelectorAll(<span class="string">"th"</span>);</span><br><span class="line">    <span class="comment">// 定义this</span></span><br><span class="line">    <span class="keyword">let</span> that = <span class="keyword">this</span>;</span><br><span class="line">    <span class="comment">// 循环添加点击事件</span></span><br><span class="line">    <span class="keyword">for</span> (<span class="keyword">let</span> i = <span class="number">0</span>; i &lt; ths.length; i++) &#123;</span><br><span class="line">        <span class="keyword">const</span> ele = ths[i];</span><br><span class="line">        ele.onclick = <span class="function"><span class="keyword">function</span> (<span class="params"></span>) </span>&#123;</span><br><span class="line">            <span class="comment">// 获取定义值</span></span><br><span class="line">            <span class="keyword">let</span> falg = <span class="keyword">this</span>.getAttribute(<span class="string">"falg"</span>);</span><br><span class="line">            <span class="comment">// 调用数组排序方法</span></span><br><span class="line">            that.Szpx(date,falg);</span><br><span class="line">            <span class="comment">// 调用刷新页面</span></span><br><span class="line">            that.initTbody(date);</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="comment">// new实例对象</span></span><br><span class="line"><span class="keyword">let</span> pr = <span class="keyword">new</span> Person(<span class="string">"table"</span>);</span><br><span class="line"><span class="comment">// 调用实例的原型方法</span></span><br><span class="line">pr.init(movieArray);</span><br></pre></td></tr></table></figure>]]></content>
      
      
      <categories>
          
          <category> JavaScript </category>
          
      </categories>
      
      
        <tags>
            
            <tag> js笔记/案例 </tag>
            
        </tags>
      
    </entry>
    
    <entry>
      <title>apply/call/bind/函数</title>
      <link href="/2018/09/12/2018-09-12/"/>
      <url>/2018/09/12/2018-09-12/</url>
      
        <content type="html"><![CDATA[<link rel="stylesheet" class="aplayer-secondary-style-marker" href="/assets/css/APlayer.min.css"><script src="/assets/js/APlayer.min.js" class="aplayer-secondary-script-marker"></script><h1 id="重点："><a href="#重点：" class="headerlink" title="重点："></a>重点：</h1><p>apply/call 都可以改变 this 的指向<br>apply 和 call 的使用方法<br>apply 和 call 方法中如果没有传入参数,或者是传入的是 null,那么调用该方法的函数对象中的 this 就是默认的 window</p><ul><li>apply 的使用语法</li><li>函数名字.apply(对象,[参数 1,参数 2,…]);</li><li>方法名字.apply(对象,[参数 1,参数 2,…]);</li><li>call 的使用语法</li><li>函数名字.call(对象,参数 1,参数 2,…);</li><li>方法名字.call(对象,参数 1,参数 2,…);</li><li>作用:改变 this 的指向</li><li>不同的地方:参数传递的方式是不一样的</li><li>只要是想使用别的对象的方法,并且希望这个方法是当前对象的,那么就可以使用 apply 或者是 call 的方法改变 this 的指向</li></ul><p>bind<br>bind 是用来复制一份<br>使用的语法:</p><ul><li>函数名字.bind(对象,参数 1,参数 2,…);—-&gt;返回值是复制之后的这个函数</li><li>方法名字.bind(对象,参数 1,参数 2,…);—-&gt;返回值是复制之后的这个方法</li></ul><p>函数<br>函数的值<br>函数中有一个 name 属性—–&gt;函数的名字,name 属性是只读的,不能修改<br>函数中有一个 arguments 属性—&gt;实参的个数<br>函数中有一个 length 属性—-&gt;函数定义的时候形参的个数<br>函数中有一个 caller 属性—-&gt;调用(f1 函数在 f2 函数中调用的,所以,此时调用者就是 f2)<br>函数作为参数的时候,如果是命名函数,那么只传入命名函数的名字,没有括号<br>函数可作为返回值</p><h1 id="练习代码"><a href="#练习代码" class="headerlink" title="练习代码"></a>练习代码</h1><h3 id="apply-call"><a href="#apply-call" class="headerlink" title="apply/call"></a>apply/call</h3><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">//案例一</span></span><br><span class="line"><span class="function"><span class="keyword">function</span> <span class="title">Person</span>(<span class="params">age,sex</span>) </span>&#123;</span><br><span class="line">    <span class="keyword">this</span>.age=age;</span><br><span class="line">    <span class="keyword">this</span>.sex=sex;</span><br><span class="line">&#125;</span><br><span class="line"><span class="comment">//通过原型添加方法</span></span><br><span class="line">Person.prototype.sayHi=<span class="function"><span class="keyword">function</span> (<span class="params">x,y</span>) </span>&#123;</span><br><span class="line">    <span class="built_in">console</span>.log(<span class="string">"您好啊:"</span>+<span class="keyword">this</span>.sex);</span><br><span class="line">    <span class="keyword">return</span> <span class="number">1000</span>;</span><br><span class="line">&#125;;</span><br><span class="line"><span class="keyword">var</span> per=<span class="keyword">new</span> Person(<span class="number">10</span>,<span class="string">"男"</span>);</span><br><span class="line">per.sayHi();</span><br><span class="line"></span><br><span class="line"><span class="built_in">console</span>.log(<span class="string">"=============="</span>);</span><br><span class="line"><span class="function"><span class="keyword">function</span> <span class="title">Student</span>(<span class="params">name,sex</span>) </span>&#123;</span><br><span class="line">    <span class="keyword">this</span>.name=name;</span><br><span class="line">    <span class="keyword">this</span>.sex=sex;</span><br><span class="line">&#125;</span><br><span class="line"><span class="keyword">var</span> stu=<span class="keyword">new</span> Student(<span class="string">"小明"</span>,<span class="string">"人妖"</span>);</span><br><span class="line"><span class="keyword">var</span> r1=per.sayHi.apply(stu,[<span class="number">10</span>,<span class="number">20</span>]);</span><br><span class="line"><span class="keyword">var</span> r2=per.sayHi.call(stu,<span class="number">10</span>,<span class="number">20</span>);</span><br><span class="line"></span><br><span class="line"><span class="built_in">console</span>.log(r1);</span><br><span class="line"><span class="built_in">console</span>.log(r2);</span><br><span class="line"></span><br><span class="line"><span class="comment">//案例二</span></span><br><span class="line"><span class="function"><span class="keyword">function</span> <span class="title">f1</span>(<span class="params"></span>) </span>&#123;</span><br><span class="line">    <span class="built_in">console</span>.log(<span class="keyword">this</span>+<span class="string">":====&gt;调用了"</span>);</span><br><span class="line">&#125;</span><br><span class="line"><span class="comment">//f1是函数,f1也是对象</span></span><br><span class="line"><span class="built_in">console</span>.dir(f1);</span><br><span class="line"><span class="comment">//对象调用方法,说明,该对象中有这个方法</span></span><br><span class="line">f1.apply();</span><br><span class="line">f1.call();</span><br><span class="line"><span class="built_in">console</span>.log(f1.__proto__==<span class="built_in">Function</span>.prototype);</span><br><span class="line"><span class="comment">//所有的函数都是Function的实例对象</span></span><br><span class="line"><span class="built_in">console</span>.log(<span class="built_in">Function</span>.prototype);<span class="comment">//ƒ () &#123; [native code] &#125;</span></span><br><span class="line"><span class="built_in">console</span>.dir(<span class="built_in">Function</span>);</span><br><span class="line"><span class="comment">//apply和call方法实际上并不在函数这个实例对象中,而是在Function的prototype中</span></span><br><span class="line"></span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">function</span> <span class="title">Person</span>(<span class="params"></span>) </span>&#123;</span><br><span class="line">    <span class="keyword">this</span>.sayHi=<span class="function"><span class="keyword">function</span> (<span class="params"></span>) </span>&#123;</span><br><span class="line">    <span class="built_in">console</span>.log(<span class="string">"您好"</span>);</span><br><span class="line">    &#125;;</span><br><span class="line">&#125;</span><br><span class="line">Person.prototype.eat=<span class="function"><span class="keyword">function</span> (<span class="params"></span>) </span>&#123;</span><br><span class="line">    <span class="built_in">console</span>.log(<span class="string">"吃"</span>);</span><br><span class="line">&#125;;</span><br><span class="line"></span><br><span class="line"><span class="keyword">var</span> per=<span class="keyword">new</span> Person();</span><br><span class="line">per.sayHi();</span><br><span class="line">per.eat();</span><br><span class="line"><span class="built_in">console</span>.dir(per);</span><br></pre></td></tr></table></figure><h3 id="bind"><a href="#bind" class="headerlink" title="bind"></a>bind</h3><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">//通过对象,调用方法,产生随机数</span></span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">function</span> <span class="title">ShowRandom</span>(<span class="params"></span>) </span>&#123;</span><br><span class="line">    <span class="comment">//1-10的随机数</span></span><br><span class="line">    <span class="keyword">this</span>.number=<span class="built_in">parseInt</span>(<span class="built_in">Math</span>.random()*<span class="number">10</span>+<span class="number">1</span>);</span><br><span class="line">&#125;</span><br><span class="line"><span class="comment">//添加原型方法</span></span><br><span class="line">ShowRandom.prototype.show1=<span class="function"><span class="keyword">function</span> (<span class="params"></span>) </span>&#123;</span><br><span class="line">    <span class="comment">//改变了定时器中的this的指向了,本来应该是window,现在是实例对象了</span></span><br><span class="line">    <span class="built_in">window</span>.setInterval(<span class="keyword">this</span>.show2.bind(<span class="keyword">this</span>),<span class="number">1000</span>);</span><br><span class="line">&#125;;</span><br><span class="line"><span class="comment">//添加原型方法</span></span><br><span class="line">ShowRandom.prototype.show2=<span class="function"><span class="keyword">function</span> (<span class="params"></span>) </span>&#123;</span><br><span class="line">    <span class="comment">//显示随机数--</span></span><br><span class="line">    <span class="built_in">console</span>.log(<span class="keyword">this</span>.number);</span><br><span class="line">&#125;;</span><br><span class="line"><span class="comment">//实例对象</span></span><br><span class="line"><span class="keyword">var</span> sr=<span class="keyword">new</span> ShowRandom();</span><br><span class="line"><span class="comment">//调用方法,输出随机数字</span></span><br><span class="line"><span class="comment">//调用这个方法一次,可以不停的产生随机数字</span></span><br><span class="line">sr.show1();</span><br></pre></td></tr></table></figure><h3 id="函数"><a href="#函数" class="headerlink" title="函数"></a>函数</h3><h3 id="函数作为参数使用"><a href="#函数作为参数使用" class="headerlink" title="函数作为参数使用"></a>函数作为参数使用</h3><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">//案例一</span></span><br><span class="line">   <span class="function"><span class="keyword">function</span> <span class="title">f1</span>(<span class="params">fn</span>) </span>&#123;</span><br><span class="line">     <span class="built_in">console</span>.log(<span class="string">"f1的函数"</span>);</span><br><span class="line">     fn();<span class="comment">//此时fn当成是一个函数来使用的</span></span><br><span class="line">   &#125;</span><br><span class="line">   <span class="comment">//fn是参数,最后作为函数使用了,函数是可以作为参数使用</span></span><br><span class="line">   <span class="comment">//传入匿名函数</span></span><br><span class="line">   f1(<span class="function"><span class="keyword">function</span> (<span class="params"></span>) </span>&#123;</span><br><span class="line">     <span class="built_in">console</span>.log(<span class="string">"我是匿名函数"</span>);</span><br><span class="line">   &#125;);</span><br><span class="line">   <span class="comment">//命名函数</span></span><br><span class="line">   <span class="function"><span class="keyword">function</span> <span class="title">f2</span>(<span class="params"></span>) </span>&#123;</span><br><span class="line">     <span class="built_in">console</span>.log(<span class="string">"f2的函数"</span>);</span><br><span class="line">   &#125;</span><br><span class="line">   f1(f2);</span><br><span class="line">   <span class="comment">//函数作为参数的时候,如果是命名函数,那么只传入命名函数的名字,没有括号</span></span><br><span class="line"></span><br><span class="line"></span><br><span class="line"><span class="comment">//案例二</span></span><br><span class="line">   <span class="function"><span class="keyword">function</span> <span class="title">f1</span>(<span class="params">fn</span>) </span>&#123;</span><br><span class="line">     setInterval(<span class="function"><span class="keyword">function</span> (<span class="params"></span>) </span>&#123;</span><br><span class="line">       <span class="built_in">console</span>.log(<span class="string">"定时器开始"</span>);</span><br><span class="line">       fn();</span><br><span class="line">       <span class="built_in">console</span>.log(<span class="string">"定时器结束"</span>);</span><br><span class="line">     &#125;,<span class="number">1000</span>);</span><br><span class="line">   &#125;</span><br><span class="line"></span><br><span class="line">   f1(<span class="function"><span class="keyword">function</span> (<span class="params"></span>) </span>&#123;</span><br><span class="line">     <span class="built_in">console</span>.log(<span class="string">"好困啊,好累啊,就是想睡觉"</span>);</span><br><span class="line">   &#125;);</span><br><span class="line"></span><br><span class="line">   <span class="comment">//案例三</span></span><br><span class="line">     <span class="comment">//    var arr = [1, 100, 20, 200, 40, 50, 120, 10];</span></span><br><span class="line">    <span class="comment">//    //排序</span></span><br><span class="line">    <span class="comment">//    arr.sort();</span></span><br><span class="line">    <span class="comment">//    console.log(arr);</span></span><br><span class="line"></span><br><span class="line">    <span class="keyword">var</span> arr = [<span class="number">1</span>, <span class="number">100</span>, <span class="number">20</span>, <span class="number">200</span>, <span class="number">40</span>, <span class="number">50</span>, <span class="number">120</span>, <span class="number">10</span>];</span><br><span class="line">    <span class="comment">//排序---函数作为参数使用,匿名函数作为sort方法的参数使用,那么此时的匿名函数中有两个参数,</span></span><br><span class="line">    arr.sort(<span class="function"><span class="keyword">function</span> (<span class="params">obj1,obj2</span>) </span>&#123;</span><br><span class="line">      <span class="keyword">if</span>(obj1&gt;obj2)&#123;</span><br><span class="line">        <span class="keyword">return</span> <span class="number">-1</span>;</span><br><span class="line">      &#125;<span class="keyword">else</span> <span class="keyword">if</span>(obj1==obj2)&#123;</span><br><span class="line">        <span class="keyword">return</span> <span class="number">0</span>;</span><br><span class="line">      &#125;<span class="keyword">else</span>&#123;</span><br><span class="line">        <span class="keyword">return</span> <span class="number">1</span>;</span><br><span class="line">      &#125;</span><br><span class="line">    &#125;);</span><br><span class="line">    <span class="built_in">console</span>.log(arr);</span><br><span class="line"></span><br><span class="line">    <span class="keyword">var</span> arr1=[<span class="string">"acdef"</span>,<span class="string">"abcd"</span>,<span class="string">"bcedf"</span>,<span class="string">"bced"</span>];</span><br><span class="line">    arr1.sort(<span class="function"><span class="keyword">function</span> (<span class="params">a,b</span>) </span>&#123;</span><br><span class="line">      <span class="keyword">if</span>(a&gt;b)&#123;</span><br><span class="line">        <span class="keyword">return</span> <span class="number">1</span>;</span><br><span class="line">      &#125;<span class="keyword">else</span> <span class="keyword">if</span>(a==b)&#123;</span><br><span class="line">        <span class="keyword">return</span> <span class="number">0</span>;</span><br><span class="line">      &#125;<span class="keyword">else</span>&#123;</span><br><span class="line">        <span class="keyword">return</span> <span class="number">-1</span>;</span><br><span class="line">      &#125;</span><br><span class="line">    &#125;);</span><br><span class="line">    <span class="built_in">console</span>.log(arr1);</span><br></pre></td></tr></table></figure><h4 id="函数作为返回值使用"><a href="#函数作为返回值使用" class="headerlink" title="函数作为返回值使用"></a>函数作为返回值使用</h4><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">//案例一</span></span><br><span class="line"><span class="comment">//判断这个对象和传入的类型是不是同一个类型</span></span><br><span class="line">    <span class="function"><span class="keyword">function</span> <span class="title">getFunc</span>(<span class="params">type</span>) </span>&#123;</span><br><span class="line">      <span class="keyword">return</span> <span class="function"><span class="keyword">function</span> (<span class="params">obj</span>) </span>&#123;</span><br><span class="line">        <span class="keyword">return</span> <span class="built_in">Object</span>.prototype.toString.call(obj) === type;</span><br><span class="line">      &#125;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">var</span> ff = getFunc(<span class="string">"[object Array]"</span>);</span><br><span class="line">    <span class="keyword">var</span> result = ff([<span class="number">10</span>, <span class="number">20</span>, <span class="number">30</span>]);</span><br><span class="line">    <span class="built_in">console</span>.log(result);</span><br><span class="line"></span><br><span class="line">    <span class="keyword">var</span> ff1 = getFunc(<span class="string">"[object Object]"</span>);</span><br><span class="line">    <span class="keyword">var</span> dt = <span class="keyword">new</span> <span class="built_in">Date</span>();</span><br><span class="line">    <span class="keyword">var</span> result1 = ff1(dt);</span><br><span class="line">    <span class="built_in">console</span>.log(result1);</span><br><span class="line"></span><br><span class="line">    <span class="comment">//案例二</span></span><br><span class="line">        <span class="comment">//排序,每个文件都有名字，大小,时间,都可以按照某个属性的值进行排序</span></span><br><span class="line"></span><br><span class="line">    <span class="comment">//三部电影,电影有名字,大小,上映时间</span></span><br><span class="line">    <span class="function"><span class="keyword">function</span> <span class="title">File</span>(<span class="params">name, size, time</span>) </span>&#123;</span><br><span class="line">      <span class="keyword">this</span>.name = name;<span class="comment">//电影名字</span></span><br><span class="line">      <span class="keyword">this</span>.size = size;<span class="comment">//电影大小</span></span><br><span class="line">      <span class="keyword">this</span>.time = time;<span class="comment">//电影的上映时间</span></span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">var</span> f1 = <span class="keyword">new</span> File(<span class="string">"jack.avi"</span>, <span class="string">"400M"</span>, <span class="string">"1997-12-12"</span>);</span><br><span class="line">    <span class="keyword">var</span> f2 = <span class="keyword">new</span> File(<span class="string">"tom.avi"</span>, <span class="string">"200M"</span>, <span class="string">"2017-12-12"</span>);</span><br><span class="line">    <span class="keyword">var</span> f3 = <span class="keyword">new</span> File(<span class="string">"xiaosu.avi"</span>, <span class="string">"800M"</span>, <span class="string">"2010-12-12"</span>);</span><br><span class="line">    <span class="keyword">var</span> arr = [f1, f2, f3];</span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">function</span> <span class="title">fn</span>(<span class="params">attr</span>) </span>&#123;</span><br><span class="line">      <span class="comment">//函数作为返回值</span></span><br><span class="line">      <span class="keyword">return</span> <span class="function"><span class="keyword">function</span> <span class="title">getSort</span>(<span class="params">obj1, obj2</span>) </span>&#123;</span><br><span class="line">        <span class="keyword">if</span> (obj1[attr] &gt; obj2[attr]) &#123;</span><br><span class="line">          <span class="keyword">return</span> <span class="number">1</span>;</span><br><span class="line">        &#125; <span class="keyword">else</span> <span class="keyword">if</span> (obj1[attr] == obj2[attr]) &#123;</span><br><span class="line">          <span class="keyword">return</span> <span class="number">0</span>;</span><br><span class="line">        &#125; <span class="keyword">else</span> &#123;</span><br><span class="line">          <span class="keyword">return</span> <span class="number">-1</span>;</span><br><span class="line">        &#125;</span><br><span class="line">      &#125;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">var</span> ff = fn(<span class="string">"name"</span>);</span><br><span class="line"></span><br><span class="line">    <span class="comment">//函数作为参数</span></span><br><span class="line">    arr.sort(ff);</span><br><span class="line">    <span class="keyword">for</span> (<span class="keyword">var</span> i = <span class="number">0</span>; i &lt; arr.length; i++) &#123;</span><br><span class="line">      <span class="built_in">console</span>.log(arr[i].name + <span class="string">"====&gt;"</span> + arr[i].size + <span class="string">"===&gt;"</span> + arr[i].time);</span><br><span class="line">    &#125;</span><br></pre></td></tr></table></figure>]]></content>
      
      
      <categories>
          
          <category> JavaScript </category>
          
      </categories>
      
      
        <tags>
            
            <tag> js笔记 </tag>
            
        </tags>
      
    </entry>
    
    <entry>
      <title>原型与继承，数组调用函数</title>
      <link href="/2018/09/11/2018-09-11/"/>
      <url>/2018/09/11/2018-09-11/</url>
      
        <content type="html"><![CDATA[<link rel="stylesheet" class="aplayer-secondary-style-marker" href="/assets/css/APlayer.min.css"><script src="/assets/js/APlayer.min.js" class="aplayer-secondary-script-marker"></script><h3 id="数组的函数调用"><a href="#数组的函数调用" class="headerlink" title="数组的函数调用"></a>数组的函数调用</h3><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">//数组可以存储任何类型的数据</span></span><br><span class="line"></span><br><span class="line">   <span class="keyword">var</span> arr=[</span><br><span class="line">       <span class="function"><span class="keyword">function</span> (<span class="params"></span>) </span>&#123;</span><br><span class="line">         <span class="built_in">console</span>.log(<span class="string">"十一假期快乐"</span>);</span><br><span class="line">       &#125;,</span><br><span class="line">       <span class="function"><span class="keyword">function</span> (<span class="params"></span>) </span>&#123;</span><br><span class="line">         <span class="built_in">console</span>.log(<span class="string">"十一假期开心"</span>);</span><br><span class="line">       &#125;</span><br><span class="line">       ,</span><br><span class="line">       <span class="function"><span class="keyword">function</span> (<span class="params"></span>) </span>&#123;</span><br><span class="line">         <span class="built_in">console</span>.log(<span class="string">"十一假期健康"</span>);</span><br><span class="line">       &#125;</span><br><span class="line">       ,</span><br><span class="line">       <span class="function"><span class="keyword">function</span> (<span class="params"></span>) </span>&#123;</span><br><span class="line">         <span class="built_in">console</span>.log(<span class="string">"十一假期安全"</span>);</span><br><span class="line">       &#125;,</span><br><span class="line">       <span class="function"><span class="keyword">function</span> (<span class="params"></span>) </span>&#123;</span><br><span class="line">         <span class="built_in">console</span>.log(<span class="string">"十一假期如意"</span>);</span><br><span class="line">       &#125;</span><br><span class="line">   ];</span><br><span class="line">   <span class="comment">//回调函数:函数作为参数使用</span></span><br><span class="line">   arr.forEach(<span class="function"><span class="keyword">function</span> (<span class="params">ele</span>) </span>&#123;</span><br><span class="line">     ele();</span><br><span class="line">   &#125;);</span><br></pre></td></tr></table></figure><h2 id="继承"><a href="#继承" class="headerlink" title="继承"></a>继承</h2><pre><code>//面向对象特性:封装,继承,多态//继承,类与类之间的关系,面向对象的语言的继承是为了多态服务的,//js不是面向对象的语言,但是可以模拟面向对象.模拟继承.为了节省内存空间//继承:/** 原型作用: 数据共享 ，目的是:为了节省内存空间,* 原型作用: 继承  目的是:为了节省内存空间** 原型继承:改变原型的指向* 借用构造函数继承:主要解决属性的问题* 组合继承:原型继承+借用构造函数继承* 既能解决属性问题,又能解决方法问题* 拷贝继承:就是把对象中需要共享的属性或者犯法,直接遍历的方式复制到另一个对象中* */</code></pre><h3 id="原型与原型链"><a href="#原型与原型链" class="headerlink" title="原型与原型链"></a>原型与原型链</h3><p>实例对象中<strong>proto</strong>是原型,浏览器使用的<br>构造函数中的 prototype 是原型,程序员使用的<br>原型链:是一种关系,实例对象和原型对象之间的关系,关系是通过原型(<strong>proto</strong>)来联系的</p><h3 id="原型的指向是可以改变的"><a href="#原型的指向是可以改变的" class="headerlink" title="原型的指向是可以改变的"></a>原型的指向是可以改变的</h3><p>实例对象中有<strong>proto</strong>原型<br>构造函数中有 prototype 原型<br>prototype 是对象<br>所以,prototype 这个对象中也有<strong>proto</strong>,那么指向了哪里<br>实例对象中的<strong>proto</strong>指向的是构造函数的 prototype<br>所以,prototype 这个对象中<strong>proto</strong>指向的应该是某个构造函数的原型 prototype</p><p>Person 的 prototype 中的<strong>proto</strong>的指向<br>console.log(Person.prototype.<strong>proto</strong>);</p><p>per 实例对象的<strong>proto</strong>——-&gt;Person.prototype 的<strong>proto</strong>—-&gt;Object.prototype 的<strong>proto</strong>是 null</p><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">//人的构造函数</span></span><br><span class="line">   <span class="function"><span class="keyword">function</span> <span class="title">Person</span>(<span class="params">age</span>) </span>&#123;</span><br><span class="line">     <span class="keyword">this</span>.age=<span class="number">10</span>;</span><br><span class="line">   &#125;</span><br><span class="line">   <span class="comment">//人的原型对象方法</span></span><br><span class="line">   Person.prototype.eat=<span class="function"><span class="keyword">function</span> (<span class="params"></span>) </span>&#123;</span><br><span class="line">     <span class="built_in">console</span>.log(<span class="string">"人的吃"</span>);</span><br><span class="line">   &#125;;</span><br><span class="line">   <span class="comment">//学生的构造函数</span></span><br><span class="line">   <span class="function"><span class="keyword">function</span> <span class="title">Student</span>(<span class="params"></span>) </span>&#123;</span><br><span class="line"></span><br><span class="line">   &#125;</span><br><span class="line">   Student.prototype.sayHi=<span class="function"><span class="keyword">function</span> (<span class="params"></span>) </span>&#123;</span><br><span class="line">     <span class="built_in">console</span>.log(<span class="string">"嗨,小苏你好帅哦"</span>);</span><br><span class="line">   &#125;;</span><br><span class="line">   <span class="comment">//学生的原型,指向了一个人的实例对象</span></span><br><span class="line">   Student.prototype=<span class="keyword">new</span> Person(<span class="number">10</span>);</span><br><span class="line">   <span class="keyword">var</span> stu=<span class="keyword">new</span> Student();</span><br><span class="line">   stu.eat();</span><br><span class="line">   stu.sayHi();</span><br></pre></td></tr></table></figure><h3 id="如何在原型改变了指向，中添加方法和访问"><a href="#如何在原型改变了指向，中添加方法和访问" class="headerlink" title="如何在原型改变了指向，中添加方法和访问"></a>如何在原型改变了指向，中添加方法和访问</h3><p>如果原型指向改变了,那么就应该在原型改变指向之后添加原型方法</p><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br></pre></td><td class="code"><pre><span class="line"><span class="function"><span class="keyword">function</span> <span class="title">Person</span>(<span class="params">age</span>) </span>&#123;</span><br><span class="line">      <span class="keyword">this</span>.age = age;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="comment">//指向改变了</span></span><br><span class="line">    Person.prototype = &#123;</span><br><span class="line">      eat: <span class="function"><span class="keyword">function</span> (<span class="params"></span>) </span>&#123;</span><br><span class="line">        <span class="built_in">console</span>.log(<span class="string">"吃"</span>);</span><br><span class="line">      &#125;</span><br><span class="line">    &#125;;</span><br><span class="line">    <span class="comment">//先添加原型方法</span></span><br><span class="line">    Person.prototype.sayHi = <span class="function"><span class="keyword">function</span> (<span class="params"></span>) </span>&#123;</span><br><span class="line">      <span class="built_in">console</span>.log(<span class="string">"您好"</span>);</span><br><span class="line">    &#125;;</span><br><span class="line">    <span class="keyword">var</span> per = <span class="keyword">new</span> Person(<span class="number">10</span>);</span><br><span class="line">    per.sayHi();</span><br></pre></td></tr></table></figure><h3 id="实例对象的属性和原型对象中的属性重名问题"><a href="#实例对象的属性和原型对象中的属性重名问题" class="headerlink" title="实例对象的属性和原型对象中的属性重名问题"></a>实例对象的属性和原型对象中的属性重名问题</h3><p>因为JS是一门动态类型的语言,对象没有什么,只要点了,那么这个对象就有了这个东西,没有这个属性,只要对象.属性名字,对象就有这个属性了,但是,该属性没有赋值,所以,结果是:undefined<br>实例对象访问这个属性,应该先从实例对象中找,找到了就直接用，找不到就去指向的原型对象中找,找到了就使用,找不到呢?=====<br>通过实例对象能否改变原型对象中的属性值?不能<br>就想改变原型对象中属性的值,怎么办?直接通过原型对象.属性=值;可以改变<br><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br></pre></td><td class="code"><pre><span class="line"><span class="function"><span class="keyword">function</span> <span class="title">Person</span>(<span class="params">age,sex</span>) </span>&#123;</span><br><span class="line">      <span class="keyword">this</span>.age=age;</span><br><span class="line">      <span class="keyword">this</span>.sex=sex;</span><br><span class="line">    &#125;</span><br><span class="line">    Person.prototype.sex=<span class="string">"女"</span>;</span><br><span class="line">    <span class="keyword">var</span> per=<span class="keyword">new</span> Person(<span class="number">10</span>,<span class="string">"男"</span>);</span><br><span class="line">    <span class="built_in">console</span>.log(per.sex);</span><br><span class="line">    <span class="comment">//因为JS是一门动态类型的语言,对象没有什么,只要点了,那么这个对象就有了这个东西,没有这个属性,只要对象.属性名字,对象就有这个属性了,但是,该属性没有赋值,所以,结果是:undefined</span></span><br><span class="line">    <span class="built_in">console</span>.log(per.fdsfdsfsdfds);</span><br><span class="line"></span><br><span class="line"></span><br><span class="line">    <span class="built_in">console</span>.log(fsdfdsfds);</span><br></pre></td></tr></table></figure></p><h1 id="继承-1"><a href="#继承-1" class="headerlink" title="继承"></a>继承</h1><pre><code>** 面向对象编程思想:根据需求,分析对象,找到对象有什么特征和行为,通过代码的方式来实现需求,要想实现这个需求,就要创建对象,要想创建对象,就应该显示有构造函数,然后通过构造函数来创建对象.,通过对象调用属性和方法来实现相应的功能及需求,即可* 首先JS不是一门面向对象的语言,JS是一门基于对象的语言,那么为什么学习js还要学习面向对象,因为面向对象的思想适合于人的想法,编程起来会更加的方便,及后期的维护....* 面向对象的编程语言中有类(class)的概念(也是一种特殊的数据类型),但是JS不是面向对象的语言,所以,JS中没有类(class),但是JS可以模拟面向对象的思想编程,JS中会通过构造函数来模拟类的概念(class)***** 小明,小红，小丽，小白，小花 都是人* 共同的特征和行为* 特征---&gt;属性* 行为---方法** 面向对象的特性:封装,继承,多态** 封装:就是包装* 一个值存储在一个变量中--封装* 一坨重复代码放在一个函数中--封装* 一系列的属性放在一个对象中--封装* 一些功能类似的函数(方法)放在一个对象中--封装* 好多相类似的对象放在一个js文件中---封装** 继承: 首先继承是一种关系,类(class)与类之间的关系,JS中没有类,但是可以通过构造函数模拟类,然后通过原型来实现继承* 继承也是为了数据共享,js中的继承也是为了实现数据共享** 原型作用之一:数据共享,节省内存空间* 原型作用之二:为了实现继承** 继承是一种关系:** 父类级别与类级别的关系** 例子:** 小杨---&gt;人, 姓名, 有钱, 帅, 有功夫--降龙十八掌* 小杨子--&gt;人,* 继承:* 姓氏----继承* 外表----继承* 财产----继承* 功夫---继承*** 人:  姓名, 性别, 年龄 ,吃饭, 睡觉** 学生类别: 姓名, 性别, 年龄 ,吃饭, 睡觉 学习行为* 老师类别: 姓名, 性别, 年龄 ,吃饭, 睡觉 工资,教学行为* 程序员: 姓名, 性别, 年龄 ,吃饭, 睡觉 工资, 敲代码* 司机类别: 姓名, 性别, 年龄 ,吃饭, 睡觉 工资 开车*** 动物类别:  体重， 颜色, 吃* 狗类别:   体重,颜色, 吃, 咬人* 二哈类别: 体重,颜色, 吃, 咬人 逗主人开心,汪汪,你好帅******* 多态:一个对象有不同的行为,或者是同一个行为针对不同的对象,产生不同的结果,要想有多态,就要先有继承,js中可以模拟多态,但是不会去使用,也不会模拟,****** */</code></pre><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br><span class="line">64</span><br><span class="line">65</span><br><span class="line">66</span><br><span class="line">67</span><br><span class="line">68</span><br><span class="line">69</span><br><span class="line">70</span><br><span class="line">71</span><br><span class="line">72</span><br><span class="line">73</span><br><span class="line">74</span><br><span class="line">75</span><br><span class="line">76</span><br><span class="line">77</span><br><span class="line">78</span><br><span class="line">79</span><br><span class="line">80</span><br><span class="line">81</span><br><span class="line">82</span><br><span class="line">83</span><br><span class="line">84</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">//例子:</span></span><br><span class="line"><span class="comment">//人,都有姓名,性别,年龄, 吃饭, 睡觉, 玩</span></span><br><span class="line"><span class="comment">//学生,都有姓名,性别,年龄, 成绩, 吃饭, 睡觉, 玩 ,学习的行为</span></span><br><span class="line"></span><br><span class="line"></span><br><span class="line"><span class="comment">//js中通过原型来实现继承</span></span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">function</span> <span class="title">Person</span>(<span class="params">name,age,sex</span>) </span>&#123;</span><br><span class="line">  <span class="keyword">this</span>.name=name;</span><br><span class="line">  <span class="keyword">this</span>.sex=sex;</span><br><span class="line">  <span class="keyword">this</span>.age=age;</span><br><span class="line">&#125;</span><br><span class="line">Person.prototype.eat=<span class="function"><span class="keyword">function</span> (<span class="params"></span>) </span>&#123;</span><br><span class="line">  <span class="built_in">console</span>.log(<span class="string">"人可以吃东西"</span>);</span><br><span class="line">&#125;;</span><br><span class="line">Person.prototype.sleep=<span class="function"><span class="keyword">function</span> (<span class="params"></span>) </span>&#123;</span><br><span class="line">  <span class="built_in">console</span>.log(<span class="string">"人在睡觉"</span>);</span><br><span class="line">&#125;;</span><br><span class="line">Person.prototype.play=<span class="function"><span class="keyword">function</span> (<span class="params"></span>) </span>&#123;</span><br><span class="line">  <span class="built_in">console</span>.log(<span class="string">"生活就是不一样的玩法而已"</span>);</span><br><span class="line">&#125;;</span><br><span class="line"></span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">function</span> <span class="title">Student</span>(<span class="params">score</span>) </span>&#123;</span><br><span class="line">  <span class="keyword">this</span>.score=score;</span><br><span class="line">&#125;</span><br><span class="line"><span class="comment">//改变学生的原型的指向即可==========&gt;学生和人已经发生关系</span></span><br><span class="line">Student.prototype=<span class="keyword">new</span> Person(<span class="string">"小明"</span>,<span class="number">10</span>,<span class="string">"男"</span>);</span><br><span class="line">Student.prototype.study=<span class="function"><span class="keyword">function</span> (<span class="params"></span>) </span>&#123;</span><br><span class="line">  <span class="built_in">console</span>.log(<span class="string">"学习很累很累的哦."</span>);</span><br><span class="line">&#125;;</span><br><span class="line"></span><br><span class="line"><span class="comment">//相同的代码太多,造成了代码的冗余(重复的代码)</span></span><br><span class="line"></span><br><span class="line"><span class="keyword">var</span> stu=<span class="keyword">new</span> Student(<span class="number">100</span>);</span><br><span class="line"><span class="built_in">console</span>.log(stu.name);</span><br><span class="line"><span class="built_in">console</span>.log(stu.age);</span><br><span class="line"><span class="built_in">console</span>.log(stu.sex);</span><br><span class="line">stu.eat();</span><br><span class="line">stu.play();</span><br><span class="line">stu.sleep();</span><br><span class="line"><span class="built_in">console</span>.log(<span class="string">"下面的是学生对象中自己有的"</span>);</span><br><span class="line"><span class="built_in">console</span>.log(stu.score);</span><br><span class="line">stu.study();</span><br><span class="line"></span><br><span class="line"></span><br><span class="line"><span class="comment">// 例子2</span></span><br><span class="line"><span class="comment">//动物有名字,有体重,有吃东西的行为</span></span><br><span class="line"><span class="comment">//小狗有名字,有体重,有毛色, 有吃东西的行为,还有咬人的行为</span></span><br><span class="line"><span class="comment">//哈士奇名字,有体重,有毛色,性别, 有吃东西的行为,还有咬人的行为,逗主人开心的行为</span></span><br><span class="line"></span><br><span class="line"></span><br><span class="line"><span class="comment">//动物的构造韩素</span></span><br><span class="line"><span class="function"><span class="keyword">function</span> <span class="title">Animal</span>(<span class="params">name,weight</span>) </span>&#123;</span><br><span class="line">  <span class="keyword">this</span>.name=name;</span><br><span class="line">  <span class="keyword">this</span>.weight=weight;</span><br><span class="line">&#125;</span><br><span class="line"><span class="comment">//动物的原型的方法</span></span><br><span class="line">Animal.prototype.eat=<span class="function"><span class="keyword">function</span> (<span class="params"></span>) </span>&#123;</span><br><span class="line">  <span class="built_in">console</span>.log(<span class="string">"天天吃东西,就是吃"</span>);</span><br><span class="line">&#125;;</span><br><span class="line"></span><br><span class="line"><span class="comment">//狗的构造函数</span></span><br><span class="line"><span class="function"><span class="keyword">function</span> <span class="title">Dog</span>(<span class="params">color</span>) </span>&#123;</span><br><span class="line">  <span class="keyword">this</span>.color=color;</span><br><span class="line">&#125;</span><br><span class="line">Dog.prototype=<span class="keyword">new</span> Animal(<span class="string">"哮天犬"</span>,<span class="string">"50kg"</span>);</span><br><span class="line">Dog.prototype.bitePerson=<span class="function"><span class="keyword">function</span> (<span class="params"></span>) </span>&#123;</span><br><span class="line">  <span class="built_in">console</span>.log(<span class="string">"哼~汪汪~咬死你"</span>);</span><br><span class="line">&#125;;</span><br><span class="line"></span><br><span class="line"><span class="comment">//哈士奇</span></span><br><span class="line"><span class="function"><span class="keyword">function</span> <span class="title">ErHa</span>(<span class="params">sex</span>) </span>&#123;</span><br><span class="line">  <span class="keyword">this</span>.sex=sex;</span><br><span class="line">&#125;</span><br><span class="line">ErHa.prototype=<span class="keyword">new</span> Dog(<span class="string">"黑白色"</span>);</span><br><span class="line">ErHa.prototype.playHost=<span class="function"><span class="keyword">function</span> (<span class="params"></span>) </span>&#123;</span><br><span class="line">  <span class="built_in">console</span>.log(<span class="string">"哈哈~要坏衣服,要坏桌子,拆家..嘎嘎...好玩,开心不,惊喜不,意外不"</span>);</span><br><span class="line">&#125;;</span><br><span class="line"><span class="keyword">var</span> erHa=<span class="keyword">new</span> ErHa(<span class="string">"雄性"</span>);</span><br><span class="line"><span class="built_in">console</span>.log(erHa.name,erHa.weight,erHa.color);</span><br><span class="line">erHa.eat();</span><br><span class="line">erHa.bitePerson();</span><br><span class="line">erHa.playHost();</span><br></pre></td></tr></table></figure><h3 id="借用构造函数"><a href="#借用构造函数" class="headerlink" title="借用构造函数"></a>借用构造函数</h3><p>//为了数据共享,改变原型指向,做到了继承—通过改变原型指向实现的继承<br>//缺陷:因为改变原型指向的同时实现继承,直接初始化了属性，继承过来的属性的值都是一样的了,所以,这就是问题<br>//只能重新调用对象的属性进行重新赋值,</p><p>//解决方案:继承的时候,不用改变原型的指向,直接调用父级的构造函数的方式来为属性赋值就可以了——借用构造函数:把要继承的父级的构造函数拿过来,使用一下就可以了</p><p>//借用构造函数:构造函数名字.call(当前对象,属性,属性,属性….);<br>//解决了属性继承,并且值不重复的问题<br>//缺陷:父级类别中的方法不能继承</p><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br></pre></td><td class="code"><pre><span class="line"><span class="function"><span class="keyword">function</span> <span class="title">Person</span>(<span class="params">name, age, sex, weight</span>) </span>&#123;</span><br><span class="line">      <span class="keyword">this</span>.name = name;</span><br><span class="line">      <span class="keyword">this</span>.age = age;</span><br><span class="line">      <span class="keyword">this</span>.sex = sex;</span><br><span class="line">      <span class="keyword">this</span>.weight = weight;</span><br><span class="line">    &#125;</span><br><span class="line">    Person.prototype.sayHi = <span class="function"><span class="keyword">function</span> (<span class="params"></span>) </span>&#123;</span><br><span class="line">      <span class="built_in">console</span>.log(<span class="string">"您好"</span>);</span><br><span class="line">    &#125;;</span><br><span class="line">    <span class="function"><span class="keyword">function</span> <span class="title">Student</span>(<span class="params">name,age,sex,weight,score</span>) </span>&#123;</span><br><span class="line">      <span class="comment">//借用构造函数</span></span><br><span class="line">      Person.call(<span class="keyword">this</span>,name,age,sex,weight);</span><br><span class="line">      <span class="keyword">this</span>.score = score;</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">var</span> stu1 = <span class="keyword">new</span> Student(<span class="string">"小明"</span>,<span class="number">10</span>,<span class="string">"男"</span>,<span class="string">"10kg"</span>,<span class="string">"100"</span>);</span><br><span class="line">    <span class="built_in">console</span>.log(stu1.name, stu1.age, stu1.sex, stu1.weight, stu1.score);</span><br><span class="line"></span><br><span class="line">    <span class="keyword">var</span> stu2 = <span class="keyword">new</span> Student(<span class="string">"小红"</span>,<span class="number">20</span>,<span class="string">"女"</span>,<span class="string">"20kg"</span>,<span class="string">"120"</span>);</span><br><span class="line">    <span class="built_in">console</span>.log(stu2.name, stu2.age, stu2.sex, stu2.weight, stu2.score);</span><br><span class="line"></span><br><span class="line">    <span class="keyword">var</span> stu3 = <span class="keyword">new</span> Student(<span class="string">"小丽"</span>,<span class="number">30</span>,<span class="string">"妖"</span>,<span class="string">"30kg"</span>,<span class="string">"130"</span>);</span><br><span class="line">    <span class="built_in">console</span>.log(stu3.name, stu3.age, stu3.sex, stu3.weight, stu3.score);</span><br></pre></td></tr></table></figure><h3 id="组合继承"><a href="#组合继承" class="headerlink" title="组合继承"></a>组合继承</h3><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">//原型实现继承</span></span><br><span class="line">    <span class="comment">//借用构造函数实现继承</span></span><br><span class="line">    <span class="comment">//组合继承:原型继承+借用构造函数继承</span></span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">function</span> <span class="title">Person</span>(<span class="params">name,age,sex</span>) </span>&#123;</span><br><span class="line">      <span class="keyword">this</span>.name=name;</span><br><span class="line">      <span class="keyword">this</span>.age=age;</span><br><span class="line">      <span class="keyword">this</span>.sex=sex;</span><br><span class="line">    &#125;</span><br><span class="line">    Person.prototype.sayHi=<span class="function"><span class="keyword">function</span> (<span class="params"></span>) </span>&#123;</span><br><span class="line">      <span class="built_in">console</span>.log(<span class="string">"阿涅哈斯诶呦"</span>);</span><br><span class="line">    &#125;;</span><br><span class="line">    <span class="function"><span class="keyword">function</span> <span class="title">Student</span>(<span class="params">name,age,sex,score</span>) </span>&#123;</span><br><span class="line">      <span class="comment">//借用构造函数:属性值重复的问题</span></span><br><span class="line">      Person.call(<span class="keyword">this</span>,name,age,sex);</span><br><span class="line">      <span class="keyword">this</span>.score=score;</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="comment">//改变原型指向----继承</span></span><br><span class="line">    Student.prototype=<span class="keyword">new</span> Person();<span class="comment">//不传值</span></span><br><span class="line">    Student.prototype.eat=<span class="function"><span class="keyword">function</span> (<span class="params"></span>) </span>&#123;</span><br><span class="line">      <span class="built_in">console</span>.log(<span class="string">"吃东西"</span>);</span><br><span class="line">    &#125;;</span><br><span class="line">    <span class="keyword">var</span> stu=<span class="keyword">new</span> Student(<span class="string">"小黑"</span>,<span class="number">20</span>,<span class="string">"男"</span>,<span class="string">"100分"</span>);</span><br><span class="line">    <span class="built_in">console</span>.log(stu.name,stu.age,stu.sex,stu.score);</span><br><span class="line">    stu.sayHi();</span><br><span class="line">    stu.eat();</span><br><span class="line">    <span class="keyword">var</span> stu2=<span class="keyword">new</span> Student(<span class="string">"小黑黑"</span>,<span class="number">200</span>,<span class="string">"男人"</span>,<span class="string">"1010分"</span>);</span><br><span class="line">    <span class="built_in">console</span>.log(stu2.name,stu2.age,stu2.sex,stu2.score);</span><br><span class="line">    stu2.sayHi();</span><br><span class="line">    stu2.eat();</span><br><span class="line"></span><br><span class="line">    <span class="comment">//属性和方法都被继承了</span></span><br></pre></td></tr></table></figure><h3 id="拷贝继承"><a href="#拷贝继承" class="headerlink" title="拷贝继承"></a>拷贝继承</h3><p>拷贝继承；把一个对象中的属性或者方法直接复制到另一个对象中<br><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br></pre></td><td class="code"><pre><span class="line"><span class="function"><span class="keyword">function</span> <span class="title">Person</span>(<span class="params"></span>) </span>&#123;</span><br><span class="line">    &#125;</span><br><span class="line">    Person.prototype.age=<span class="number">10</span>;</span><br><span class="line">    Person.prototype.sex=<span class="string">"男"</span>;</span><br><span class="line">    Person.prototype.height=<span class="number">100</span>;</span><br><span class="line">    Person.prototype.play=<span class="function"><span class="keyword">function</span> (<span class="params"></span>) </span>&#123;</span><br><span class="line">      <span class="built_in">console</span>.log(<span class="string">"玩的好开心"</span>);</span><br><span class="line">    &#125;;</span><br><span class="line">    <span class="keyword">var</span> obj2=&#123;&#125;;</span><br><span class="line">    <span class="comment">//Person的构造中有原型prototype,prototype就是一个对象,那么里面,age,sex,height,play都是该对象中的属性或者方法</span></span><br><span class="line"></span><br><span class="line">    <span class="keyword">for</span>(<span class="keyword">var</span> key <span class="keyword">in</span> Person.prototype)&#123;</span><br><span class="line">      obj2[key]=Person.prototype[key];</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="built_in">console</span>.dir(obj2);</span><br><span class="line">    obj2.play();</span><br></pre></td></tr></table></figure></p>]]></content>
      
      
      <categories>
          
          <category> JavaScript </category>
          
      </categories>
      
      
        <tags>
            
            <tag> js笔记 </tag>
            
        </tags>
      
    </entry>
    
    <entry>
      <title>原生贪吃蛇升级版</title>
      <link href="/2018/09/10/2018-09-10/"/>
      <url>/2018/09/10/2018-09-10/</url>
      
        <content type="html"><![CDATA[<link rel="stylesheet" class="aplayer-secondary-style-marker" href="/assets/css/APlayer.min.css"><script src="/assets/js/APlayer.min.js" class="aplayer-secondary-script-marker"></script><h1 id="贪吃蛇升级版"><a href="#贪吃蛇升级版" class="headerlink" title="贪吃蛇升级版"></a>贪吃蛇升级版</h1><p>重点：<br>1.添加了开始，停止，结束按钮，改变了启动和结束的方式，修复了游戏结束后不可以再次玩游戏<br>2.改变了蛇的身体颜色，变成随机颜色<br>3.修改了蛇头方向都变化不可以返回<br>4.添加了蛇头碰到身体结束游戏<br>5.初始化游戏<br>6.添加了wasd键盘控制事件，添加了鼠标拖拽改变方向</p><h1 id="效果"><a href="#效果" class="headerlink" title="效果"></a>效果</h1><p><img src="/tcsal/sjtc1.png"><br><img src="/tcsal/sjtc2.png"></p><h1 id="案例代码"><a href="#案例代码" class="headerlink" title="案例代码"></a>案例代码</h1><h3 id="Css-外部引入style-css"><a href="#Css-外部引入style-css" class="headerlink" title="Css 外部引入style.css"></a>Css 外部引入style.css</h3><figure class="highlight css"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br></pre></td><td class="code"><pre><span class="line">* &#123;</span><br><span class="line">    <span class="attribute">padding</span>: <span class="number">0</span>;</span><br><span class="line">    <span class="attribute">margin</span>: <span class="number">0</span>;</span><br><span class="line">&#125;</span><br><span class="line"><span class="comment">/* 蛇身体的长度和分数 */</span></span><br><span class="line"><span class="selector-class">.df</span>,</span><br><span class="line"><span class="selector-class">.ssc</span> &#123;</span><br><span class="line">    <span class="attribute">position</span>: absolute;</span><br><span class="line">    <span class="attribute">top</span>: <span class="number">0px</span>;</span><br><span class="line">    <span class="attribute">left</span>: <span class="number">400px</span>;</span><br><span class="line">&#125;</span><br><span class="line"><span class="selector-class">.ssc</span> &#123;</span><br><span class="line">    <span class="attribute">left</span>: <span class="number">250px</span>;</span><br><span class="line">&#125;</span><br><span class="line"><span class="comment">/* 蛇地图的样式 */</span></span><br><span class="line"><span class="selector-class">.wrap</span> &#123;</span><br><span class="line">    <span class="attribute">width</span>: <span class="number">800px</span>;</span><br><span class="line">    <span class="attribute">height</span>: <span class="number">600px</span>;</span><br><span class="line">    <span class="attribute">position</span>: relative;</span><br><span class="line">    <span class="attribute">top</span>: <span class="number">20px</span>;</span><br><span class="line">    <span class="attribute">left</span>: <span class="number">20px</span>;</span><br><span class="line">    <span class="attribute">background-color</span>: <span class="number">#ccc</span>;</span><br><span class="line">&#125;</span><br><span class="line"><span class="comment">/* 游戏说明 */</span></span><br><span class="line"><span class="selector-class">.yx</span> &#123;</span><br><span class="line">    <span class="attribute">position</span>: absolute;</span><br><span class="line">    <span class="attribute">margin</span>: <span class="number">40px</span>;</span><br><span class="line">    <span class="attribute">font-size</span>: <span class="number">20px</span>;</span><br><span class="line">    <span class="attribute">color</span>: pink;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h3 id="Html"><a href="#Html" class="headerlink" title="Html"></a>Html</h3><figure class="highlight html"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br></pre></td><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">input</span> <span class="attr">type</span>=<span class="string">"button"</span> <span class="attr">value</span>=<span class="string">"开始游戏"</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">input</span> <span class="attr">type</span>=<span class="string">"button"</span> <span class="attr">value</span>=<span class="string">"停止游戏"</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">input</span> <span class="attr">type</span>=<span class="string">"button"</span> <span class="attr">value</span>=<span class="string">"结束游戏"</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">div</span> <span class="attr">class</span>=<span class="string">"ssc"</span>&gt;</span></span><br><span class="line">        蛇身的长度: 0</span><br><span class="line">    <span class="tag">&lt;/<span class="name">div</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">div</span> <span class="attr">class</span>=<span class="string">"df"</span>&gt;</span></span><br><span class="line">        得分: 0</span><br><span class="line">    <span class="tag">&lt;/<span class="name">div</span>&gt;</span></span><br><span class="line">    <span class="comment">&lt;!-- 蛇地图 --&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">div</span> <span class="attr">class</span>=<span class="string">"wrap"</span>&gt;</span></span><br><span class="line"></span><br><span class="line">    <span class="tag">&lt;/<span class="name">div</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">div</span> <span class="attr">class</span>=<span class="string">"yx"</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">h3</span>&gt;</span>游戏说明：<span class="tag">&lt;/<span class="name">h3</span>&gt;</span></span><br><span class="line">        玩法：上下左右键控制，w上s下a左d右控制，鼠标上下左右拖拽<span class="tag">&lt;<span class="name">br</span>&gt;</span></span><br><span class="line">        点击开始游戏，开启游戏<span class="tag">&lt;<span class="name">br</span>&gt;</span></span><br><span class="line">        点击停止游戏，暂停游戏，点击开始游戏恢复继续玩<span class="tag">&lt;<span class="name">br</span>&gt;</span></span><br><span class="line">        点击结束游戏，停止游戏要点击开启游戏重新开始<span class="tag">&lt;<span class="name">br</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;/<span class="name">div</span>&gt;</span></span><br></pre></td></tr></table></figure><h3 id="Js"><a href="#Js" class="headerlink" title="Js"></a>Js</h3><h4 id="外部引入食物-Food-js"><a href="#外部引入食物-Food-js" class="headerlink" title="外部引入食物 Food.js"></a>外部引入食物 Food.js</h4><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br><span class="line">64</span><br><span class="line">65</span><br><span class="line">66</span><br><span class="line">67</span><br><span class="line">68</span><br><span class="line">69</span><br><span class="line">70</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">/*</span></span><br><span class="line"><span class="comment"> * @Author: yhf </span></span><br><span class="line"><span class="comment"> * @Date: 2018-09-10 12:36:12 </span></span><br><span class="line"><span class="comment"> * @Last Modified by: yhf</span></span><br><span class="line"><span class="comment"> * @Last Modified time: 2018-09-11 09:08:11</span></span><br><span class="line"><span class="comment"> */</span></span><br><span class="line">(<span class="function"><span class="keyword">function</span> (<span class="params"></span>) </span>&#123;</span><br><span class="line">    <span class="comment">// 存放食物的数组</span></span><br><span class="line">    <span class="keyword">var</span> elements = [];</span><br><span class="line"></span><br><span class="line">    <span class="comment">// 食物方法</span></span><br><span class="line">    <span class="function"><span class="keyword">function</span> <span class="title">Food</span>(<span class="params">x, y, height, width, color</span>) </span>&#123;</span><br><span class="line">        <span class="comment">// 食物的横纵坐标</span></span><br><span class="line">        <span class="keyword">this</span>.x = x;</span><br><span class="line">        <span class="keyword">this</span>.y = y;</span><br><span class="line">        <span class="comment">// 食物的宽高</span></span><br><span class="line">        <span class="keyword">this</span>.height = height || <span class="number">20</span>;</span><br><span class="line">        <span class="keyword">this</span>.width = width || <span class="number">20</span>;</span><br><span class="line">        <span class="comment">// 食物的颜色</span></span><br><span class="line">        <span class="keyword">this</span>.color = color || <span class="string">"yellow"</span>;</span><br><span class="line">    &#125;;</span><br><span class="line"></span><br><span class="line">    <span class="comment">// 删除食物函数</span></span><br><span class="line">    <span class="function"><span class="keyword">function</span> <span class="title">remove</span>(<span class="params"></span>) </span>&#123;</span><br><span class="line">        <span class="keyword">var</span> i = elements.length - <span class="number">1</span>;</span><br><span class="line">        <span class="keyword">for</span> (; i &gt;= <span class="number">0</span>; i--) &#123;</span><br><span class="line">            <span class="keyword">var</span> ele = elements[i];</span><br><span class="line">            <span class="comment">// 从wrap删除</span></span><br><span class="line">            ele.parentNode.removeChild(ele);</span><br><span class="line">            elements.splice(i, <span class="number">1</span>);</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;;</span><br><span class="line"></span><br><span class="line"></span><br><span class="line">    <span class="comment">// 添加原型方法--初始化食物</span></span><br><span class="line">    Food.prototype.init = <span class="function"><span class="keyword">function</span> (<span class="params">wrap</span>) </span>&#123;</span><br><span class="line">        <span class="comment">// 删除食物</span></span><br><span class="line">        remove();</span><br><span class="line">        <span class="comment">// 创建食物</span></span><br><span class="line">        <span class="keyword">var</span> div = <span class="built_in">document</span>.createElement(<span class="string">"div"</span>);</span><br><span class="line">        <span class="comment">// 添加食物到地图</span></span><br><span class="line">        wrap.appendChild(div);</span><br><span class="line">        <span class="comment">// 设置食物div的样式</span></span><br><span class="line">        <span class="comment">// div脱离文档流</span></span><br><span class="line">        div.style.position = <span class="string">"absolute"</span>;</span><br><span class="line">        <span class="comment">// div宽高</span></span><br><span class="line">        div.style.width = <span class="keyword">this</span>.width + <span class="string">"px"</span>;</span><br><span class="line">        div.style.height = <span class="keyword">this</span>.height + <span class="string">"px"</span>;</span><br><span class="line">        <span class="comment">// div颜色</span></span><br><span class="line">        div.style.backgroundColor = <span class="keyword">this</span>.color;</span><br><span class="line"></span><br><span class="line">        <span class="comment">// 随机食物横纵坐标</span></span><br><span class="line">        <span class="keyword">this</span>.x = <span class="built_in">parseInt</span>(<span class="built_in">Math</span>.random() * (wrap.offsetWidth / <span class="keyword">this</span>.width)) * <span class="keyword">this</span>.width;</span><br><span class="line">        <span class="keyword">this</span>.y = <span class="built_in">parseInt</span>(<span class="built_in">Math</span>.random() * (wrap.offsetHeight / <span class="keyword">this</span>.height)) * <span class="keyword">this</span>.height;</span><br><span class="line">        <span class="comment">// 设置食物横纵坐标</span></span><br><span class="line">        div.style.left = <span class="keyword">this</span>.x + <span class="string">"px"</span>;</span><br><span class="line">        div.style.top = <span class="keyword">this</span>.y + <span class="string">"px"</span>;</span><br><span class="line">        <span class="comment">// 把新建的数组添加到食物数组中</span></span><br><span class="line">        elements.push(div);</span><br><span class="line">    &#125;;</span><br><span class="line"></span><br><span class="line">    <span class="comment">// 添加原型方法清空食物</span></span><br><span class="line">    Food.prototype.empty = <span class="function"><span class="keyword">function</span> (<span class="params"></span>) </span>&#123;</span><br><span class="line">        remove();</span><br><span class="line">        elements.splice(<span class="number">0</span>, elements.length);</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="comment">// 把食物暴露给window，外界可以调用</span></span><br><span class="line">    <span class="built_in">window</span>.Food = Food;</span><br><span class="line">&#125;());</span><br></pre></td></tr></table></figure><h4 id="外部引入蛇-Snake-js"><a href="#外部引入蛇-Snake-js" class="headerlink" title="外部引入蛇 Snake.js"></a>外部引入蛇 Snake.js</h4><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br><span class="line">64</span><br><span class="line">65</span><br><span class="line">66</span><br><span class="line">67</span><br><span class="line">68</span><br><span class="line">69</span><br><span class="line">70</span><br><span class="line">71</span><br><span class="line">72</span><br><span class="line">73</span><br><span class="line">74</span><br><span class="line">75</span><br><span class="line">76</span><br><span class="line">77</span><br><span class="line">78</span><br><span class="line">79</span><br><span class="line">80</span><br><span class="line">81</span><br><span class="line">82</span><br><span class="line">83</span><br><span class="line">84</span><br><span class="line">85</span><br><span class="line">86</span><br><span class="line">87</span><br><span class="line">88</span><br><span class="line">89</span><br><span class="line">90</span><br><span class="line">91</span><br><span class="line">92</span><br><span class="line">93</span><br><span class="line">94</span><br><span class="line">95</span><br><span class="line">96</span><br><span class="line">97</span><br><span class="line">98</span><br><span class="line">99</span><br><span class="line">100</span><br><span class="line">101</span><br><span class="line">102</span><br><span class="line">103</span><br><span class="line">104</span><br><span class="line">105</span><br><span class="line">106</span><br><span class="line">107</span><br><span class="line">108</span><br><span class="line">109</span><br><span class="line">110</span><br><span class="line">111</span><br><span class="line">112</span><br><span class="line">113</span><br><span class="line">114</span><br><span class="line">115</span><br><span class="line">116</span><br><span class="line">117</span><br><span class="line">118</span><br><span class="line">119</span><br><span class="line">120</span><br><span class="line">121</span><br><span class="line">122</span><br><span class="line">123</span><br><span class="line">124</span><br><span class="line">125</span><br><span class="line">126</span><br><span class="line">127</span><br><span class="line">128</span><br><span class="line">129</span><br><span class="line">130</span><br><span class="line">131</span><br><span class="line">132</span><br><span class="line">133</span><br><span class="line">134</span><br><span class="line">135</span><br><span class="line">136</span><br><span class="line">137</span><br><span class="line">138</span><br><span class="line">139</span><br><span class="line">140</span><br><span class="line">141</span><br><span class="line">142</span><br><span class="line">143</span><br><span class="line">144</span><br><span class="line">145</span><br><span class="line">146</span><br><span class="line">147</span><br><span class="line">148</span><br><span class="line">149</span><br><span class="line">150</span><br><span class="line">151</span><br><span class="line">152</span><br><span class="line">153</span><br><span class="line">154</span><br><span class="line">155</span><br><span class="line">156</span><br><span class="line">157</span><br><span class="line">158</span><br><span class="line">159</span><br><span class="line">160</span><br><span class="line">161</span><br><span class="line">162</span><br><span class="line">163</span><br><span class="line">164</span><br><span class="line">165</span><br><span class="line">166</span><br><span class="line">167</span><br><span class="line">168</span><br><span class="line">169</span><br><span class="line">170</span><br><span class="line">171</span><br><span class="line">172</span><br><span class="line">173</span><br><span class="line">174</span><br><span class="line">175</span><br><span class="line">176</span><br><span class="line">177</span><br><span class="line">178</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">/*</span></span><br><span class="line"><span class="comment"> * @Author: yhf </span></span><br><span class="line"><span class="comment"> * @Date: 2018-09-10 14:28:55 </span></span><br><span class="line"><span class="comment"> * @Last Modified by: yhf</span></span><br><span class="line"><span class="comment"> * @Last Modified time: 2018-09-11 08:28:31</span></span><br><span class="line"><span class="comment"> */</span></span><br><span class="line">(<span class="function"><span class="keyword">function</span> (<span class="params"></span>) </span>&#123;</span><br><span class="line">    <span class="comment">// 存放蛇数组·</span></span><br><span class="line">    <span class="keyword">var</span> elements = [];</span><br><span class="line"></span><br><span class="line">    <span class="comment">// 蛇的函数</span></span><br><span class="line">    <span class="function"><span class="keyword">function</span> <span class="title">Snake</span>(<span class="params">width, height, direction</span>) </span>&#123;</span><br><span class="line">        <span class="comment">// 计算得分</span></span><br><span class="line">        <span class="keyword">this</span>.df = <span class="number">0</span>;</span><br><span class="line">        <span class="comment">// 判断是否碰到身体</span></span><br><span class="line">        <span class="keyword">this</span>.stfh = <span class="literal">true</span>;</span><br><span class="line">        <span class="comment">// 蛇的宽高</span></span><br><span class="line">        <span class="keyword">this</span>.width = width || <span class="number">20</span>;</span><br><span class="line">        <span class="keyword">this</span>.height = height || <span class="number">20</span>;</span><br><span class="line">        <span class="comment">// 蛇身体</span></span><br><span class="line">        <span class="keyword">this</span>.body = [&#123;</span><br><span class="line">            x: <span class="number">3</span>,</span><br><span class="line">            y: <span class="number">2</span>,</span><br><span class="line">            color: <span class="string">"red"</span></span><br><span class="line">        &#125;, &#123;</span><br><span class="line">            x: <span class="number">2</span>,</span><br><span class="line">            y: <span class="number">2</span>,</span><br><span class="line">            color: <span class="string">"#00FFFF"</span></span><br><span class="line">        &#125;, &#123;</span><br><span class="line">            x: <span class="number">1</span>,</span><br><span class="line">            y: <span class="number">2</span>,</span><br><span class="line">            color: <span class="string">"pink"</span></span><br><span class="line">        &#125;];</span><br><span class="line">        <span class="comment">// 颜色</span></span><br><span class="line">        <span class="keyword">this</span>.col = [<span class="string">"#F0F8FF"</span>, <span class="string">"#FAEBD7"</span>, <span class="string">"#F0F8FF"</span>, <span class="string">"#FAEBD7"</span>, <span class="string">"#00FFFF"</span>, <span class="string">"#7FFFD4"</span>, <span class="string">"#F0FFFF"</span>, <span class="string">"#F5F5DC"</span>, <span class="string">"#FFE4C4"</span>, <span class="string">"#000000"</span>, <span class="string">"#FFEBCD"</span>, <span class="string">"#0000FF"</span>, <span class="string">"#8A2BE2"</span>, <span class="string">"#A52A2A"</span>, <span class="string">"#DEB887"</span>, <span class="string">"#5F9EA0"</span>, <span class="string">"#7FFF00"</span>, <span class="string">"#D2691E"</span>, <span class="string">"#FF7F50"</span>, <span class="string">"#6495ED"</span>, <span class="string">"#FFF8DC"</span>, <span class="string">"#DC143C"</span>, <span class="string">"#00FFFF"</span>, <span class="string">"#00008B"</span>, <span class="string">"#008B8B"</span>, <span class="string">"#B8860B"</span>, <span class="string">"#A9A9A9"</span>, <span class="string">"#006400"</span>, <span class="string">"#BDB76B"</span>, <span class="string">"#8B008B"</span>, <span class="string">"#556B2F"</span>, <span class="string">"#FF8C00"</span>, <span class="string">"#9932CC"</span>, <span class="string">"#8B0000"</span>, <span class="string">"#E9967A"</span>, <span class="string">"#8FBC8F"</span>, <span class="string">"#483D8B"</span>, <span class="string">"#2F4F4F"</span>, <span class="string">"#00CED1"</span>, <span class="string">"#9400D3"</span>, <span class="string">"#FF1493"</span>, <span class="string">"#00BFFF"</span>, <span class="string">"#696969"</span>, <span class="string">"#1E90FF"</span>, <span class="string">"#D19275"</span>, <span class="string">"#B22222"</span>, <span class="string">"#FFFAF0"</span>, <span class="string">"#228B22"</span>, <span class="string">"#FF00FF"</span>, <span class="string">"#DCDCDC"</span>, <span class="string">"#F8F8FF"</span>, <span class="string">"#FFD700"</span>, <span class="string">"#DAA520"</span>, <span class="string">"#808080"</span>, <span class="string">"#008000"</span>, <span class="string">"#ADFF2F"</span>, <span class="string">"#F0FFF0"</span>, <span class="string">"#FF69B4"</span>, <span class="string">"#CD5C5C"</span>, <span class="string">"#4B0082"</span>, <span class="string">"#FFFFF0"</span>, <span class="string">"#F0E68C"</span>, <span class="string">"#E6E6FA"</span>, <span class="string">"#FFF0F5"</span>, <span class="string">"#7CFC00"</span>, <span class="string">"#FFFACD"</span>, <span class="string">"#ADD8E6"</span>, <span class="string">"#F08080"</span>, <span class="string">"#E0FFFF"</span>, <span class="string">"#FAFAD2"</span>, <span class="string">"#D3D3D3"</span>, <span class="string">"#90EE90"</span>, <span class="string">"#FFB6C1"</span>, <span class="string">"#FFA07A"</span>, <span class="string">"#20B2AA"</span>, <span class="string">"#87CEFA"</span>, <span class="string">"#8470FF"</span>, <span class="string">"#778899"</span>, <span class="string">"#B0C4DE"</span>, <span class="string">"#FFFFE0"</span>, <span class="string">"#00FF00"</span>, <span class="string">"#32CD32"</span>, <span class="string">"#FAF0E6"</span>, <span class="string">"#FF00FF"</span>, <span class="string">"#800000"</span>, <span class="string">"#66CDAA"</span>, <span class="string">"#0000CD"</span>, <span class="string">"#BA55D3"</span>, <span class="string">"#9370D8"</span>, <span class="string">"#3CB371"</span>, <span class="string">"#7B68EE"</span>, <span class="string">"#00FA9A"</span>, <span class="string">"#48D1CC"</span>, <span class="string">"#C71585"</span>, <span class="string">"#191970"</span>, <span class="string">"#F5FFFA"</span>, <span class="string">"#FFE4E1"</span>, <span class="string">"#FFE4B5"</span>, <span class="string">"#FFDEAD"</span>, <span class="string">"#000080"</span>, <span class="string">"#FDF5E6"</span>, <span class="string">"#808000"</span>, <span class="string">"#6B8E23"</span>, <span class="string">"#FFA500"</span>, <span class="string">"#FF4500"</span>, <span class="string">"#DA70D6"</span>, <span class="string">"#EEE8AA"</span>, <span class="string">"#98FB98"</span>, <span class="string">"#AFEEEE"</span>, <span class="string">"#D87093"</span>, <span class="string">"#FFEFD5"</span>, <span class="string">"#FFDAB9"</span>, <span class="string">"#CD853F"</span>, <span class="string">"#FFC0CB"</span>, <span class="string">"#DDA0DD"</span>, <span class="string">"#B0E0E6"</span>, <span class="string">"#800080"</span>, <span class="string">"#FF0000"</span>, <span class="string">"#BC8F8F"</span>, <span class="string">"#4169E1"</span>, <span class="string">"#8B4513"</span>, <span class="string">"#FA8072"</span>, <span class="string">"#F4A460"</span>, <span class="string">"#2E8B57"</span>, <span class="string">"#FFF5EE"</span>, <span class="string">"#A0522D"</span>, <span class="string">"#C0C0C0"</span>, <span class="string">"#87CEEB"</span>, <span class="string">"#6A5ACD"</span>, <span class="string">"#708090"</span>, <span class="string">"#FFFAFA"</span>, <span class="string">"#00FF7F"</span>, <span class="string">"#4682B4"</span>, <span class="string">"#D2B48C"</span>, <span class="string">"#008080"</span>, <span class="string">"#D8BFD8"</span>, <span class="string">"#FF6347"</span>, <span class="string">"#40E0D0"</span>, <span class="string">"#EE82EE"</span>, <span class="string">"#D02090"</span>, <span class="string">"#F5DEB3"</span>, <span class="string">"#FFFFFF"</span>, <span class="string">"#F5F5F5"</span>, <span class="string">"#FFFF00"</span>, <span class="string">"#9ACD32"</span>];</span><br><span class="line">        <span class="comment">// 蛇的行走方向</span></span><br><span class="line">        <span class="keyword">this</span>.direction = direction || <span class="string">"right"</span>;</span><br><span class="line">    &#125;;</span><br><span class="line"></span><br><span class="line"></span><br><span class="line">    <span class="comment">// 添加原型初始化蛇</span></span><br><span class="line">    Snake.prototype.init = <span class="function"><span class="keyword">function</span> (<span class="params">wrap</span>) </span>&#123;</span><br><span class="line"></span><br><span class="line">        <span class="comment">// 初始化删除蛇</span></span><br><span class="line">        remove();</span><br><span class="line"></span><br><span class="line">        <span class="comment">// 循环创建蛇的身体</span></span><br><span class="line">        <span class="keyword">for</span> (<span class="keyword">let</span> i = <span class="number">0</span>; i &lt; <span class="keyword">this</span>.body.length; i++) &#123;</span><br><span class="line">            <span class="comment">// 初始化this.body[i]</span></span><br><span class="line">            <span class="keyword">const</span> ele = <span class="keyword">this</span>.body[i];</span><br><span class="line">            <span class="comment">// 创建蛇</span></span><br><span class="line">            <span class="keyword">var</span> div = <span class="built_in">document</span>.createElement(<span class="string">"div"</span>);</span><br><span class="line">            <span class="comment">// 添加蛇到地图</span></span><br><span class="line">            wrap.appendChild(div);</span><br><span class="line">            <span class="comment">// div脱离文档流</span></span><br><span class="line">            div.style.position = <span class="string">"absolute"</span>;</span><br><span class="line">            <span class="comment">// div宽高</span></span><br><span class="line">            div.style.width = <span class="keyword">this</span>.width + <span class="string">"px"</span>;</span><br><span class="line">            div.style.height = <span class="keyword">this</span>.height + <span class="string">"px"</span>;</span><br><span class="line">            <span class="comment">// div颜色</span></span><br><span class="line">            div.style.backgroundColor = ele.color;</span><br><span class="line">            <span class="comment">// div横纵坐标</span></span><br><span class="line">            <span class="keyword">var</span> x = <span class="keyword">this</span>.width * ele.x;</span><br><span class="line">            <span class="keyword">var</span> y = <span class="keyword">this</span>.height * ele.y;</span><br><span class="line">            <span class="comment">// 设置横纵坐标</span></span><br><span class="line">            div.style.left = x + <span class="string">"px"</span>;</span><br><span class="line">            div.style.top = y + <span class="string">"px"</span>;</span><br><span class="line">            <span class="comment">// 添加到数组</span></span><br><span class="line">            elements.push(div);</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;;</span><br><span class="line"></span><br><span class="line">    <span class="comment">// 添加原型方法--蛇动起来</span></span><br><span class="line">    Snake.prototype.move = <span class="function"><span class="keyword">function</span> (<span class="params">food, wrap</span>) </span>&#123;</span><br><span class="line"></span><br><span class="line">        <span class="comment">// 获取到蛇身体数据</span></span><br><span class="line">        <span class="keyword">var</span> i = <span class="keyword">this</span>.body.length - <span class="number">1</span>;</span><br><span class="line">        <span class="comment">// 循环设置身体的变动位置，把蛇头以外，从蛇尾开始把前一位的数据获取到</span></span><br><span class="line">        <span class="keyword">for</span> (; i &gt; <span class="number">0</span>; i--) &#123;</span><br><span class="line">            <span class="keyword">this</span>.body[i].x = <span class="keyword">this</span>.body[i - <span class="number">1</span>].x;</span><br><span class="line">            <span class="keyword">this</span>.body[i].y = <span class="keyword">this</span>.body[i - <span class="number">1</span>].y;</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="comment">// 判断键盘到移动改变蛇头到移动方向</span></span><br><span class="line">        <span class="keyword">switch</span> (<span class="keyword">this</span>.direction) &#123;</span><br><span class="line">            <span class="keyword">case</span> <span class="string">"right"</span>:</span><br><span class="line">                <span class="keyword">this</span>.body[<span class="number">0</span>].x += <span class="number">1</span>;</span><br><span class="line">                <span class="keyword">break</span>;</span><br><span class="line">            <span class="keyword">case</span> <span class="string">"left"</span>:</span><br><span class="line">                <span class="keyword">this</span>.body[<span class="number">0</span>].x -= <span class="number">1</span>;</span><br><span class="line">                <span class="keyword">break</span>;</span><br><span class="line">            <span class="keyword">case</span> <span class="string">"top"</span>:</span><br><span class="line">                <span class="keyword">this</span>.body[<span class="number">0</span>].y -= <span class="number">1</span>;</span><br><span class="line">                <span class="keyword">break</span>;</span><br><span class="line">            <span class="keyword">case</span> <span class="string">"bottom"</span>:</span><br><span class="line">                <span class="keyword">this</span>.body[<span class="number">0</span>].y += <span class="number">1</span>;</span><br><span class="line">                <span class="keyword">break</span>;</span><br><span class="line">        &#125;</span><br><span class="line"></span><br><span class="line">        <span class="comment">// 获取蛇头到横纵坐标</span></span><br><span class="line">        <span class="keyword">var</span> sx = <span class="keyword">this</span>.body[<span class="number">0</span>].x * <span class="keyword">this</span>.width;</span><br><span class="line">        <span class="keyword">var</span> sy = <span class="keyword">this</span>.body[<span class="number">0</span>].y * <span class="keyword">this</span>.height;</span><br><span class="line">        <span class="comment">// 判断蛇头是否吃到了食物</span></span><br><span class="line">        <span class="keyword">if</span> (sx == food.x &amp;&amp; sy == food.y) &#123;</span><br><span class="line">            <span class="keyword">var</span> sjys = <span class="built_in">parseInt</span>(<span class="built_in">Math</span>.random() * <span class="keyword">this</span>.col.length);</span><br><span class="line">            <span class="keyword">for</span> (<span class="keyword">let</span> i = <span class="number">0</span>; i &lt; <span class="keyword">this</span>.col.length; i++) &#123;</span><br><span class="line">                <span class="keyword">const</span> ele = <span class="keyword">this</span>.col[i];</span><br><span class="line">                <span class="keyword">if</span> (i == sjys) &#123;</span><br><span class="line">                    <span class="keyword">this</span>.df++;</span><br><span class="line">                    <span class="comment">// 获取到蛇的尾巴</span></span><br><span class="line">                    <span class="keyword">var</span> list = <span class="keyword">this</span>.body[<span class="keyword">this</span>.body.length - <span class="number">1</span>];</span><br><span class="line">                    <span class="comment">// 再蛇身体添加多一个身体值</span></span><br><span class="line">                    <span class="keyword">this</span>.body.push(&#123;</span><br><span class="line">                        x: list.x,</span><br><span class="line">                        y: list.y,</span><br><span class="line">                        color: ele</span><br><span class="line">                    &#125;);</span><br><span class="line">                    <span class="comment">// 删除食物</span></span><br><span class="line">                    food.init(wrap);</span><br><span class="line">                &#125;</span><br><span class="line">            &#125;</span><br><span class="line">            <span class="comment">// this.df++;</span></span><br><span class="line">            <span class="comment">// // 获取到蛇的尾巴</span></span><br><span class="line">            <span class="comment">// var list = this.body[this.body.length - 1];</span></span><br><span class="line">            <span class="comment">// // 再蛇身体添加多一个身体值</span></span><br><span class="line">            <span class="comment">// this.body.push(&#123;</span></span><br><span class="line">            <span class="comment">//     x: list.x,</span></span><br><span class="line">            <span class="comment">//     y: list.y,</span></span><br><span class="line">            <span class="comment">//     color: list.color</span></span><br><span class="line">            <span class="comment">// &#125;);</span></span><br><span class="line">            <span class="comment">// // 删除食物</span></span><br><span class="line">            <span class="comment">// food.init(wrap);</span></span><br><span class="line">        &#125;</span><br><span class="line"></span><br><span class="line">        <span class="comment">// 循环获取身体位置，把蛇头以外，从蛇尾开始把前一位的数据获取到，判断蛇头是否碰到身体，判断生死</span></span><br><span class="line">        <span class="keyword">for</span> (<span class="keyword">var</span> i = <span class="keyword">this</span>.body.length - <span class="number">1</span>; i &gt; <span class="number">0</span>; i--) &#123;</span><br><span class="line">            <span class="keyword">if</span> (<span class="keyword">this</span>.body[i].x * <span class="keyword">this</span>.width == sx &amp;&amp; sy == <span class="keyword">this</span>.body[i].y * <span class="keyword">this</span>.height) &#123;</span><br><span class="line">                <span class="keyword">this</span>.stfh = <span class="literal">false</span>;</span><br><span class="line">            &#125;</span><br><span class="line">        &#125;</span><br><span class="line"></span><br><span class="line">    &#125;;</span><br><span class="line"></span><br><span class="line">    <span class="comment">// 添加原型方法清空蛇</span></span><br><span class="line">    Snake.prototype.empty = <span class="function"><span class="keyword">function</span> (<span class="params"></span>) </span>&#123;</span><br><span class="line">        remove();</span><br><span class="line">        elements.splice(<span class="number">0</span>, elements.length);</span><br><span class="line">        <span class="keyword">this</span>.body = [&#123;</span><br><span class="line">            x: <span class="number">3</span>,</span><br><span class="line">            y: <span class="number">2</span>,</span><br><span class="line">            color: <span class="string">"red"</span></span><br><span class="line">        &#125;, &#123;</span><br><span class="line">            x: <span class="number">2</span>,</span><br><span class="line">            y: <span class="number">2</span>,</span><br><span class="line">            color: <span class="string">"pink"</span></span><br><span class="line">        &#125;, &#123;</span><br><span class="line">            x: <span class="number">1</span>,</span><br><span class="line">            y: <span class="number">2</span>,</span><br><span class="line">            color: <span class="string">"pink"</span></span><br><span class="line">        &#125;];</span><br><span class="line">        <span class="keyword">this</span>.direction = <span class="string">"right"</span>;</span><br><span class="line">    &#125;;</span><br><span class="line"></span><br><span class="line">    <span class="comment">// 删除蛇函数</span></span><br><span class="line">    <span class="function"><span class="keyword">function</span> <span class="title">remove</span>(<span class="params"></span>) </span>&#123;</span><br><span class="line">        <span class="keyword">var</span> i = elements.length - <span class="number">1</span>;</span><br><span class="line">        <span class="keyword">for</span> (; i &gt;= <span class="number">0</span>; i--) &#123;</span><br><span class="line">            <span class="keyword">var</span> ele = elements[i];</span><br><span class="line">            <span class="comment">// 从wrap删除</span></span><br><span class="line">            ele.parentNode.removeChild(ele);</span><br><span class="line">            <span class="comment">// 删除数组中到蛇身</span></span><br><span class="line">            elements.splice(i, <span class="number">1</span>);</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;;</span><br><span class="line"></span><br><span class="line"></span><br><span class="line">    <span class="comment">// 把Snake暴露给window</span></span><br><span class="line">    <span class="built_in">window</span>.Snake = Snake;</span><br><span class="line">&#125;());</span><br></pre></td></tr></table></figure><h4 id="外部引入初始化-Game-js"><a href="#外部引入初始化-Game-js" class="headerlink" title="外部引入初始化 Game.js"></a>外部引入初始化 Game.js</h4><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br><span class="line">64</span><br><span class="line">65</span><br><span class="line">66</span><br><span class="line">67</span><br><span class="line">68</span><br><span class="line">69</span><br><span class="line">70</span><br><span class="line">71</span><br><span class="line">72</span><br><span class="line">73</span><br><span class="line">74</span><br><span class="line">75</span><br><span class="line">76</span><br><span class="line">77</span><br><span class="line">78</span><br><span class="line">79</span><br><span class="line">80</span><br><span class="line">81</span><br><span class="line">82</span><br><span class="line">83</span><br><span class="line">84</span><br><span class="line">85</span><br><span class="line">86</span><br><span class="line">87</span><br><span class="line">88</span><br><span class="line">89</span><br><span class="line">90</span><br><span class="line">91</span><br><span class="line">92</span><br><span class="line">93</span><br><span class="line">94</span><br><span class="line">95</span><br><span class="line">96</span><br><span class="line">97</span><br><span class="line">98</span><br><span class="line">99</span><br><span class="line">100</span><br><span class="line">101</span><br><span class="line">102</span><br><span class="line">103</span><br><span class="line">104</span><br><span class="line">105</span><br><span class="line">106</span><br><span class="line">107</span><br><span class="line">108</span><br><span class="line">109</span><br><span class="line">110</span><br><span class="line">111</span><br><span class="line">112</span><br><span class="line">113</span><br><span class="line">114</span><br><span class="line">115</span><br><span class="line">116</span><br><span class="line">117</span><br><span class="line">118</span><br><span class="line">119</span><br><span class="line">120</span><br><span class="line">121</span><br><span class="line">122</span><br><span class="line">123</span><br><span class="line">124</span><br><span class="line">125</span><br><span class="line">126</span><br><span class="line">127</span><br><span class="line">128</span><br><span class="line">129</span><br><span class="line">130</span><br><span class="line">131</span><br><span class="line">132</span><br><span class="line">133</span><br><span class="line">134</span><br><span class="line">135</span><br><span class="line">136</span><br><span class="line">137</span><br><span class="line">138</span><br><span class="line">139</span><br><span class="line">140</span><br><span class="line">141</span><br><span class="line">142</span><br><span class="line">143</span><br><span class="line">144</span><br><span class="line">145</span><br><span class="line">146</span><br><span class="line">147</span><br><span class="line">148</span><br><span class="line">149</span><br><span class="line">150</span><br><span class="line">151</span><br><span class="line">152</span><br><span class="line">153</span><br><span class="line">154</span><br><span class="line">155</span><br><span class="line">156</span><br><span class="line">157</span><br><span class="line">158</span><br><span class="line">159</span><br><span class="line">160</span><br><span class="line">161</span><br><span class="line">162</span><br><span class="line">163</span><br><span class="line">164</span><br><span class="line">165</span><br><span class="line">166</span><br><span class="line">167</span><br><span class="line">168</span><br><span class="line">169</span><br><span class="line">170</span><br><span class="line">171</span><br><span class="line">172</span><br><span class="line">173</span><br><span class="line">174</span><br><span class="line">175</span><br><span class="line">176</span><br><span class="line">177</span><br><span class="line">178</span><br><span class="line">179</span><br><span class="line">180</span><br><span class="line">181</span><br><span class="line">182</span><br><span class="line">183</span><br><span class="line">184</span><br><span class="line">185</span><br><span class="line">186</span><br><span class="line">187</span><br><span class="line">188</span><br><span class="line">189</span><br><span class="line">190</span><br><span class="line">191</span><br><span class="line">192</span><br><span class="line">193</span><br><span class="line">194</span><br><span class="line">195</span><br><span class="line">196</span><br><span class="line">197</span><br><span class="line">198</span><br><span class="line">199</span><br><span class="line">200</span><br><span class="line">201</span><br><span class="line">202</span><br><span class="line">203</span><br><span class="line">204</span><br><span class="line">205</span><br><span class="line">206</span><br><span class="line">207</span><br><span class="line">208</span><br><span class="line">209</span><br><span class="line">210</span><br><span class="line">211</span><br><span class="line">212</span><br><span class="line">213</span><br><span class="line">214</span><br><span class="line">215</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">/*</span></span><br><span class="line"><span class="comment"> * @Author: yhf </span></span><br><span class="line"><span class="comment"> * @Date: 2018-09-10 15:37:16 </span></span><br><span class="line"><span class="comment"> * @Last Modified by: yhf</span></span><br><span class="line"><span class="comment"> * @Last Modified time: 2018-09-11 08:30:40</span></span><br><span class="line"><span class="comment"> */</span></span><br><span class="line">(<span class="function"><span class="keyword">function</span> (<span class="params"></span>) </span>&#123;</span><br><span class="line">    <span class="comment">// 定义this</span></span><br><span class="line">    <span class="keyword">var</span> _this = <span class="literal">null</span>;</span><br><span class="line">    <span class="comment">// 键盘方向</span></span><br><span class="line">    <span class="keyword">var</span> key = <span class="number">39</span>;</span><br><span class="line">    <span class="comment">// 定时器</span></span><br><span class="line">    <span class="keyword">var</span> time = <span class="literal">null</span>;</span><br><span class="line"></span><br><span class="line">    <span class="comment">// 启动游戏构造函数</span></span><br><span class="line">    <span class="function"><span class="keyword">function</span> <span class="title">Game</span>(<span class="params"></span>) </span>&#123;</span><br><span class="line">        <span class="comment">// 初始化食物</span></span><br><span class="line">        <span class="keyword">this</span>.food = <span class="keyword">new</span> Food();</span><br><span class="line">        <span class="comment">// 初始化蛇</span></span><br><span class="line">        <span class="keyword">this</span>.snake = <span class="keyword">new</span> Snake();</span><br><span class="line">        <span class="comment">// 定义画布</span></span><br><span class="line">        <span class="keyword">this</span>.wrap = wrap;</span><br><span class="line">        <span class="comment">// 定义this</span></span><br><span class="line">        _this = <span class="keyword">this</span>;</span><br><span class="line">        <span class="comment">// 判断是否点击开始</span></span><br><span class="line">        <span class="keyword">this</span>.bol = <span class="literal">false</span>;</span><br><span class="line">    &#125;;</span><br><span class="line"></span><br><span class="line">    <span class="comment">// 添加原型启动游戏函数</span></span><br><span class="line">    Game.prototype.init = <span class="function"><span class="keyword">function</span> (<span class="params"></span>) </span>&#123;</span><br><span class="line">        <span class="comment">// 初始化食物</span></span><br><span class="line">        <span class="keyword">this</span>.food.init(<span class="keyword">this</span>.wrap);</span><br><span class="line">        <span class="comment">// 初始化蛇</span></span><br><span class="line">        <span class="keyword">this</span>.snake.init(<span class="keyword">this</span>.wrap);</span><br><span class="line">        <span class="comment">// 蛇动</span></span><br><span class="line">        <span class="keyword">this</span>.runSnake();</span><br><span class="line">        <span class="comment">// 键盘事件</span></span><br><span class="line">        <span class="keyword">this</span>.keyDown();</span><br><span class="line">    &#125;;</span><br><span class="line"></span><br><span class="line">    <span class="comment">// 添加原型蛇动起来</span></span><br><span class="line">    Game.prototype.runSnake = <span class="function"><span class="keyword">function</span> (<span class="params"></span>) </span>&#123;</span><br><span class="line">        <span class="comment">// 添加名为time的定时器</span></span><br><span class="line">        time = setInterval(<span class="function"><span class="keyword">function</span> (<span class="params"></span>) </span>&#123;</span><br><span class="line">            <span class="comment">// 蛇动函数</span></span><br><span class="line">            <span class="keyword">this</span>.snake.move(<span class="keyword">this</span>.food, <span class="keyword">this</span>.wrap);</span><br><span class="line">            <span class="comment">// 初始化蛇</span></span><br><span class="line">            <span class="keyword">this</span>.snake.init(<span class="keyword">this</span>.wrap);</span><br><span class="line"></span><br><span class="line">            <span class="comment">// 最大横纵坐标 --蛇最大可以移动的距离</span></span><br><span class="line">            <span class="keyword">var</span> maxX = wrap.offsetWidth / <span class="keyword">this</span>.snake.width;</span><br><span class="line">            <span class="keyword">var</span> maxY = wrap.offsetHeight / <span class="keyword">this</span>.snake.height;</span><br><span class="line"></span><br><span class="line">            <span class="comment">// 获取蛇头部横纵坐标</span></span><br><span class="line">            <span class="keyword">var</span> hearX = <span class="keyword">this</span>.snake.body[<span class="number">0</span>].x;</span><br><span class="line">            <span class="keyword">var</span> hearY = <span class="keyword">this</span>.snake.body[<span class="number">0</span>].y;</span><br><span class="line"></span><br><span class="line">            <span class="comment">// 判断是否碰到墙壁结束游戏</span></span><br><span class="line">            <span class="keyword">if</span> (hearX &lt; <span class="number">0</span> || hearX &gt;= maxX) &#123;</span><br><span class="line">                <span class="comment">// 清空函数</span></span><br><span class="line">                <span class="keyword">this</span>.empty();</span><br><span class="line">            &#125;;</span><br><span class="line">            <span class="keyword">if</span> (hearY &lt; <span class="number">0</span> || hearY &gt;= maxY) &#123;</span><br><span class="line">                <span class="comment">// 清空函数</span></span><br><span class="line">                <span class="keyword">this</span>.empty();</span><br><span class="line">            &#125;;</span><br><span class="line">            <span class="keyword">if</span> (!<span class="keyword">this</span>.snake.stfh) &#123;</span><br><span class="line">                <span class="keyword">this</span>.snake.stfh = <span class="literal">true</span>;</span><br><span class="line">                <span class="keyword">this</span>.empty();</span><br><span class="line">            &#125;</span><br><span class="line">            df.innerHTML = <span class="string">"得分："</span> + <span class="keyword">this</span>.snake.df;</span><br><span class="line">            ssc.innerHTML = <span class="string">"蛇身长度："</span> + (<span class="keyword">this</span>.snake.df + <span class="number">2</span>);</span><br><span class="line"></span><br><span class="line">        &#125;.bind(_this), <span class="number">150</span>);</span><br><span class="line">    &#125;;</span><br><span class="line"></span><br><span class="line">    <span class="comment">// 添加原型方法--键盘和鼠标事件</span></span><br><span class="line">    Game.prototype.keyDown = <span class="function"><span class="keyword">function</span> (<span class="params"></span>) </span>&#123;</span><br><span class="line">        <span class="comment">// document.addEventListener("keydown", function (e) &#123;</span></span><br><span class="line">        <span class="comment">//     // 此时this应该是keydown的事件对象</span></span><br><span class="line">        <span class="comment">//     // 所以this就是document</span></span><br><span class="line">        <span class="comment">//     // 获取按键值</span></span><br><span class="line">        <span class="comment">//     keyfn(this, e.keyCode);</span></span><br><span class="line">        <span class="comment">// &#125;.bind(_this), false);</span></span><br><span class="line"></span><br><span class="line">        <span class="comment">// 鼠标拖动控制方向</span></span><br><span class="line">        <span class="keyword">var</span> dx = <span class="number">0</span>; <span class="comment">//鼠标点击时的位置</span></span><br><span class="line">        <span class="keyword">var</span> dy = <span class="number">0</span>; <span class="comment">//鼠标点击时的位置</span></span><br><span class="line">        <span class="keyword">var</span> sx = <span class="number">0</span>; <span class="comment">//鼠标当前位置</span></span><br><span class="line">        <span class="keyword">var</span> sy = <span class="number">0</span>; <span class="comment">//鼠标当前位置</span></span><br><span class="line">        <span class="comment">// 给页面添加监听事件</span></span><br><span class="line">        <span class="comment">// 监听鼠标按下</span></span><br><span class="line">        <span class="built_in">document</span>.onmousedown = <span class="function"><span class="keyword">function</span> (<span class="params">e</span>) </span>&#123;</span><br><span class="line">            bol = <span class="literal">true</span>;</span><br><span class="line">            dx = e.clientX;</span><br><span class="line">            dy = e.clientY;</span><br><span class="line">            e.preventDefault();</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="comment">// 鼠标移动</span></span><br><span class="line">        <span class="built_in">document</span>.onmousemove = <span class="function"><span class="keyword">function</span> (<span class="params">e</span>) </span>&#123;</span><br><span class="line">            sx = e.clientX;</span><br><span class="line">            sy = e.clientY;</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="comment">// 鼠标抬起</span></span><br><span class="line">        <span class="built_in">document</span>.onmouseup = <span class="function"><span class="keyword">function</span> (<span class="params"></span>) </span>&#123;</span><br><span class="line">            <span class="built_in">console</span>.log(sx - dx)</span><br><span class="line">            <span class="keyword">if</span> (<span class="built_in">Math</span>.abs(sx - dx) &gt; <span class="built_in">Math</span>.abs(sy - dy)) &#123;</span><br><span class="line">                <span class="keyword">if</span> (sx - dx &gt; <span class="number">0</span>) &#123;</span><br><span class="line">                    keyfn(<span class="keyword">this</span>, <span class="number">39</span>);</span><br><span class="line">                &#125; <span class="keyword">else</span> &#123;</span><br><span class="line">                    keyfn(<span class="keyword">this</span>, <span class="number">37</span>);</span><br><span class="line">                &#125;</span><br><span class="line">            &#125; <span class="keyword">else</span> <span class="keyword">if</span> (sy - dy == <span class="number">0</span>) &#123;</span><br><span class="line">                keyfn(<span class="keyword">this</span>, <span class="number">39</span>);</span><br><span class="line">            &#125; <span class="keyword">else</span> &#123;</span><br><span class="line">                <span class="keyword">if</span> (sy - dy &gt; <span class="number">0</span>) &#123;</span><br><span class="line">                    keyfn(<span class="keyword">this</span>, <span class="number">40</span>);</span><br><span class="line">                &#125; <span class="keyword">else</span> &#123;</span><br><span class="line">                    keyfn(<span class="keyword">this</span>, <span class="number">38</span>);</span><br><span class="line">                &#125;</span><br><span class="line">            &#125;</span><br><span class="line">        &#125;.bind(_this);</span><br><span class="line"></span><br><span class="line">        <span class="comment">// 给页面添加监听事件</span></span><br><span class="line">        <span class="comment">// 监听键盘按下</span></span><br><span class="line">        <span class="built_in">document</span>.onkeydown = <span class="function"><span class="keyword">function</span> (<span class="params">e</span>) </span>&#123;</span><br><span class="line">            keyfn(<span class="keyword">this</span>, e.keyCode);</span><br><span class="line">        &#125;.bind(_this);</span><br><span class="line">    &#125;;</span><br><span class="line">    <span class="comment">// 添加原型-停止游戏</span></span><br><span class="line">    Game.prototype.stop = <span class="function"><span class="keyword">function</span> (<span class="params"></span>) </span>&#123;</span><br><span class="line">        clearInterval(time);</span><br><span class="line">        <span class="keyword">this</span>.bol = <span class="literal">false</span>;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="comment">// 添加原型-结束游戏</span></span><br><span class="line">    Game.prototype.empty = <span class="function"><span class="keyword">function</span> (<span class="params"></span>) </span>&#123;</span><br><span class="line">        alert(<span class="string">"游戏结束"</span>);</span><br><span class="line">        <span class="comment">// 结束定时器</span></span><br><span class="line">        clearInterval(time);</span><br><span class="line">        <span class="comment">// 删除清空蛇</span></span><br><span class="line">        <span class="keyword">this</span>.snake.empty();</span><br><span class="line">        <span class="comment">// 删除清空食物</span></span><br><span class="line">        <span class="keyword">this</span>.food.empty();</span><br><span class="line">        <span class="comment">// 结束游戏</span></span><br><span class="line">        <span class="keyword">this</span>.bol = <span class="literal">false</span>;</span><br><span class="line">        <span class="comment">// 清空得分</span></span><br><span class="line">        <span class="keyword">this</span>.snake.df = <span class="number">0</span>;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="comment">// 键盘事件</span></span><br><span class="line">    <span class="function"><span class="keyword">function</span> <span class="title">keyfn</span>(<span class="params">_this, keys</span>) </span>&#123;</span><br><span class="line">        <span class="keyword">switch</span> (keys) &#123;</span><br><span class="line">            <span class="keyword">case</span> <span class="number">37</span>: <span class="comment">//左</span></span><br><span class="line">                <span class="keyword">if</span> (key != <span class="number">39</span> &amp;&amp; key != <span class="number">68</span>) &#123;</span><br><span class="line">                    _this.snake.direction = <span class="string">"left"</span>;</span><br><span class="line">                    key = keys;</span><br><span class="line">                &#125;</span><br><span class="line">                <span class="keyword">break</span>;</span><br><span class="line"></span><br><span class="line">            <span class="keyword">case</span> <span class="number">38</span>: <span class="comment">//上</span></span><br><span class="line">                <span class="keyword">if</span> (key != <span class="number">40</span> &amp;&amp; key != <span class="number">83</span>) &#123;</span><br><span class="line">                    _this.snake.direction = <span class="string">"top"</span>;</span><br><span class="line">                    key = keys;</span><br><span class="line">                &#125;</span><br><span class="line">                <span class="keyword">break</span>;</span><br><span class="line"></span><br><span class="line">            <span class="keyword">case</span> <span class="number">39</span>: <span class="comment">//右</span></span><br><span class="line">                <span class="keyword">if</span> (key != <span class="number">37</span> &amp;&amp; key != <span class="number">65</span>) &#123;</span><br><span class="line">                    _this.snake.direction = <span class="string">"right"</span>;</span><br><span class="line">                    key = keys;</span><br><span class="line">                &#125;</span><br><span class="line">                <span class="keyword">break</span>;</span><br><span class="line"></span><br><span class="line">            <span class="keyword">case</span> <span class="number">40</span>: <span class="comment">//下</span></span><br><span class="line">                <span class="keyword">if</span> (key != <span class="number">38</span> &amp;&amp; key != <span class="number">87</span>) &#123;</span><br><span class="line">                    _this.snake.direction = <span class="string">"bottom"</span>;</span><br><span class="line">                    key = keys;</span><br><span class="line">                &#125;</span><br><span class="line">                <span class="keyword">break</span>;</span><br><span class="line"></span><br><span class="line"></span><br><span class="line">            <span class="keyword">case</span> <span class="number">65</span>: <span class="comment">//左</span></span><br><span class="line">                <span class="keyword">if</span> (key != <span class="number">39</span> &amp;&amp; key != <span class="number">68</span>) &#123;</span><br><span class="line">                    _this.snake.direction = <span class="string">"left"</span>;</span><br><span class="line">                    key = keys;</span><br><span class="line">                &#125;</span><br><span class="line">                <span class="keyword">break</span>;</span><br><span class="line"></span><br><span class="line">            <span class="keyword">case</span> <span class="number">87</span>: <span class="comment">//上</span></span><br><span class="line">                <span class="keyword">if</span> (key != <span class="number">40</span> &amp;&amp; key != <span class="number">83</span>) &#123;</span><br><span class="line">                    _this.snake.direction = <span class="string">"top"</span>;</span><br><span class="line">                    key = keys;</span><br><span class="line">                &#125;</span><br><span class="line">                <span class="keyword">break</span>;</span><br><span class="line"></span><br><span class="line">            <span class="keyword">case</span> <span class="number">68</span>: <span class="comment">//右</span></span><br><span class="line">                <span class="keyword">if</span> (key != <span class="number">37</span> &amp;&amp; key != <span class="number">65</span>) &#123;</span><br><span class="line">                    _this.snake.direction = <span class="string">"right"</span>;</span><br><span class="line">                    key = keys;</span><br><span class="line">                &#125;</span><br><span class="line">                <span class="keyword">break</span>;</span><br><span class="line"></span><br><span class="line">            <span class="keyword">case</span> <span class="number">83</span>: <span class="comment">//下</span></span><br><span class="line">                <span class="keyword">if</span> (key != <span class="number">38</span> &amp;&amp; key != <span class="number">87</span>) &#123;</span><br><span class="line">                    _this.snake.direction = <span class="string">"bottom"</span>;</span><br><span class="line">                    key = keys;</span><br><span class="line">                &#125;</span><br><span class="line">                <span class="keyword">break</span>;</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="comment">// 把Game暴露给window</span></span><br><span class="line">    <span class="built_in">window</span>.Game = Game;</span><br><span class="line">&#125;());</span><br></pre></td></tr></table></figure><h4 id="外部引入开启-index-js"><a href="#外部引入开启-index-js" class="headerlink" title="外部引入开启 index.js"></a>外部引入开启 index.js</h4><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">/*</span></span><br><span class="line"><span class="comment"> * @Author: yhf </span></span><br><span class="line"><span class="comment"> * @Date: 2018-09-10 23:45:57 </span></span><br><span class="line"><span class="comment"> * @Last Modified by: yhf</span></span><br><span class="line"><span class="comment"> * @Last Modified time: 2018-09-11 08:38:58</span></span><br><span class="line"><span class="comment"> */</span></span><br><span class="line"><span class="comment">// 获取定义的蛇地图</span></span><br><span class="line"><span class="keyword">const</span> wrap = <span class="built_in">document</span>.querySelector(<span class="string">".wrap"</span>);</span><br><span class="line"><span class="keyword">const</span> btn = <span class="built_in">document</span>.querySelectorAll(<span class="string">"input"</span>);</span><br><span class="line"><span class="keyword">const</span> df = <span class="built_in">document</span>.querySelector(<span class="string">".df"</span>);</span><br><span class="line"><span class="keyword">const</span> ssc = <span class="built_in">document</span>.querySelector(<span class="string">".ssc"</span>);</span><br><span class="line"></span><br><span class="line"><span class="comment">// 定义运动函数</span></span><br><span class="line"><span class="keyword">var</span> gm = <span class="keyword">new</span> Game(wrap);</span><br><span class="line">btn[<span class="number">0</span>].onclick = <span class="function"><span class="keyword">function</span> (<span class="params"></span>) </span>&#123;</span><br><span class="line">    <span class="comment">// 判断点击了不可以再点击</span></span><br><span class="line">    <span class="keyword">if</span> (gm.bol) &#123;</span><br><span class="line">        <span class="keyword">return</span>;</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="comment">// 开关</span></span><br><span class="line">    gm.bol = <span class="string">"true"</span>;</span><br><span class="line">    <span class="comment">// 开启游戏</span></span><br><span class="line">    gm.init();</span><br><span class="line">&#125;</span><br><span class="line">btn[<span class="number">1</span>].onclick = <span class="function"><span class="keyword">function</span> (<span class="params"></span>) </span>&#123;</span><br><span class="line">    <span class="comment">// 停止游戏</span></span><br><span class="line">    gm.stop();</span><br><span class="line">&#125;</span><br><span class="line">btn[<span class="number">2</span>].onclick = <span class="function"><span class="keyword">function</span> (<span class="params"></span>) </span>&#123;</span><br><span class="line">    <span class="comment">// 未点击开始不可以点击</span></span><br><span class="line">    <span class="keyword">if</span> (!gm.bol) &#123;</span><br><span class="line">        <span class="keyword">return</span>;</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="comment">// 结束游戏</span></span><br><span class="line">    gm.empty();</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"></span><br><span class="line"></span><br><span class="line"><span class="comment">/*</span></span><br><span class="line"><span class="comment"> * 后期添加项目：</span></span><br><span class="line"><span class="comment"> * 食物颜色改变不同的颜色，加的身体值不同</span></span><br><span class="line"><span class="comment"> * 改关卡闯关</span></span><br><span class="line"><span class="comment"> * 添加其他功能</span></span><br><span class="line"><span class="comment"> * 未完待续。。。</span></span><br><span class="line"><span class="comment"> * 手机事件</span></span><br><span class="line"><span class="comment"> * </span></span><br><span class="line"><span class="comment"> */</span></span><br></pre></td></tr></table></figure>]]></content>
      
      
      <categories>
          
          <category> JavaScript </category>
          
      </categories>
      
      
        <tags>
            
            <tag> js笔记/案例 </tag>
            
        </tags>
      
    </entry>
    
    <entry>
      <title>贪吃蛇案例</title>
      <link href="/2018/09/10/2018-09-09/"/>
      <url>/2018/09/10/2018-09-09/</url>
      
        <content type="html"><![CDATA[<link rel="stylesheet" class="aplayer-secondary-style-marker" href="/assets/css/APlayer.min.css"><script src="/assets/js/APlayer.min.js" class="aplayer-secondary-script-marker"></script><h1 id="案例分析重点"><a href="#案例分析重点" class="headerlink" title="案例分析重点"></a>案例分析重点</h1><p>模拟贪吃蛇游戏,做的项目<br>地图: 宽，高，背景颜色，因为小蛇和食物都是相对于地图显示的,这里小蛇和食物都是地图的子元素,随机位置显示,脱离文档流的,地图也需要脱离文档流–css需要设置:宽,高,背景颜色,脱标</p><p>食物—div元素<br>elements—&gt;存储div的数组(将来删除的食物div时候,先从map中删除div,再从数组中移除div)<br>食物:宽,高,背景颜色,横坐标,纵坐标<br>一个食物就是一个对象,这个对象有相应的属性,这个对象需要在地图上显示<br>最终要创建食物的对象,先 有构造函数,并且把相应的值作为参数传入到构造函数中<br>食物要想显示在地图上,食物的初始化就是一个行为<br>1.食物的构造函数—&gt;创建食物对象<br>2.食物的显示的方法–&gt;通过对象调用方法,显示食物,设置相应的样式<br>2.1.1 因为食物要被小蛇吃掉,吃掉后应该再次出现食物,原来的食物就删除了<br>2.1.2 每一次初始化食物的时候先删除原来的食物,然后重新的初始化食物<br>2.1.3 通过一个私有的函数(外面不能调用的函数)删除地图上的食物,同时最开始的时候食物也相应的保存到一个数组中,再从这个数组中把食物删除<br>最后的时候,把食物的构造函数给window下的属性,这样做,外部就可以直接使用这个食物的构造函数了</p><p>小蛇<br>小蛇就是一个对象<br>属性: 每个身体都有宽，高，方向<br>属性:身体分三个部分,每个部分都是一个对象,每个部分都有横纵坐标,背景颜色<br>小蛇要想显示在地图上,先删除之前的小蛇,然后再初始化小蛇(小蛇要移动)–方法</p><p>小蛇要移动—方法<br>思路:把小蛇的头的坐标给小蛇第一部分的身体,第一部分的身体的坐标给下一个部分身体<br>小蛇的头,需要单独的设置:方向</p><h1 id="案例效果"><a href="#案例效果" class="headerlink" title="案例效果"></a>案例效果</h1><p><img src="/tcsal/tcs1.png"><br><img src="/tcsal/tcs2.png"><br><img src="/tcsal/tcs3.png"></p><h1 id="案例代码"><a href="#案例代码" class="headerlink" title="案例代码"></a>案例代码</h1><h3 id="Css"><a href="#Css" class="headerlink" title="Css"></a>Css</h3><figure class="highlight css"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br></pre></td><td class="code"><pre><span class="line">* &#123;</span><br><span class="line">    <span class="attribute">padding</span>: <span class="number">0</span>;</span><br><span class="line">    <span class="attribute">margin</span>: <span class="number">0</span>;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="selector-class">.wrap</span> &#123;</span><br><span class="line">    <span class="attribute">width</span>: <span class="number">800px</span>;</span><br><span class="line">    <span class="attribute">height</span>: <span class="number">600px</span>;</span><br><span class="line">    <span class="attribute">background-color</span>: <span class="number">#ccc</span>;</span><br><span class="line">    <span class="attribute">position</span>: relative;</span><br><span class="line">    <span class="attribute">top</span>: <span class="number">20px</span>;</span><br><span class="line">    <span class="attribute">left</span>: <span class="number">20px</span>;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h3 id="Html"><a href="#Html" class="headerlink" title="Html"></a>Html</h3><figure class="highlight html"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">&lt;!-- 贪吃蛇地图 --&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">div</span> <span class="attr">class</span>=<span class="string">"wrap"</span>&gt;</span></span><br><span class="line"></span><br><span class="line"><span class="tag">&lt;/<span class="name">div</span>&gt;</span></span><br></pre></td></tr></table></figure><h3 id="Js-Js代码均为外部引入代码"><a href="#Js-Js代码均为外部引入代码" class="headerlink" title="Js (Js代码均为外部引入代码)"></a>Js (Js代码均为外部引入代码)</h3><h3 id="引入代码一-food-js"><a href="#引入代码一-food-js" class="headerlink" title="引入代码一 food.js"></a>引入代码一 food.js</h3><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">/*</span></span><br><span class="line"><span class="comment"> * @Author: yhf </span></span><br><span class="line"><span class="comment"> * @Date: 2018-09-10 00:04:58 </span></span><br><span class="line"><span class="comment"> * @Last Modified by: yhf</span></span><br><span class="line"><span class="comment"> * @Last Modified time: 2018-09-10 10:23:05</span></span><br><span class="line"><span class="comment"> */</span></span><br><span class="line"><span class="comment">// 食物就是一个对象，有宽高颜色，横纵坐标</span></span><br><span class="line"><span class="comment">// 食物自调用</span></span><br><span class="line">(<span class="function"><span class="keyword">function</span> (<span class="params"></span>) </span>&#123;</span><br><span class="line">    <span class="keyword">var</span> elements = [];</span><br><span class="line">    <span class="comment">// 先有食物的对象</span></span><br><span class="line">    <span class="function"><span class="keyword">function</span> <span class="title">Food</span>(<span class="params">x, y, width, height, color</span>) </span>&#123;</span><br><span class="line">        <span class="keyword">this</span>.x = x;</span><br><span class="line">        <span class="keyword">this</span>.y = y;</span><br><span class="line">        <span class="keyword">this</span>.width = width || <span class="number">20</span>;</span><br><span class="line">        <span class="keyword">this</span>.height = height || <span class="number">20</span>;</span><br><span class="line">        <span class="keyword">this</span>.color = color || <span class="string">"green"</span>;</span><br><span class="line">    &#125;;</span><br><span class="line"></span><br><span class="line">    <span class="comment">// 私有函数--删除食物</span></span><br><span class="line">    <span class="function"><span class="keyword">function</span> <span class="title">remove</span>(<span class="params"></span>) </span>&#123;</span><br><span class="line">        <span class="keyword">for</span> (<span class="keyword">let</span> i = <span class="number">0</span>; i &lt; elements.length; i++) &#123;</span><br><span class="line">            <span class="keyword">const</span> ele = elements[i];</span><br><span class="line">            <span class="comment">// 找到这个子元素的父级元素，删除</span></span><br><span class="line">            ele.parentNode.removeChild(ele);</span><br><span class="line">            <span class="comment">// 再次吧elements中的元素也要删除</span></span><br><span class="line">            elements.splice(i, <span class="number">1</span>);</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="comment">// 在原始添加初始化方法（作用：再页面上显示）</span></span><br><span class="line">    <span class="comment">// 因为食物要在地图上显示，所以需要在地图的这个参数（wrap--就是页面上的.class = wrap 的这个div）</span></span><br><span class="line">    Food.prototype.init = <span class="function"><span class="keyword">function</span> (<span class="params">wrap</span>) </span>&#123;</span><br><span class="line">        <span class="comment">// 先删除这个食物</span></span><br><span class="line">        <span class="comment">// 外部无法访问</span></span><br><span class="line">        remove();</span><br><span class="line"></span><br><span class="line">        <span class="comment">// 创建div</span></span><br><span class="line">        <span class="keyword">var</span> div = <span class="built_in">document</span>.createElement(<span class="string">"div"</span>);</span><br><span class="line">        <span class="comment">// 把div添加到wrap上</span></span><br><span class="line">        wrap.appendChild(div);</span><br><span class="line">        <span class="comment">// 设置div的样式</span></span><br><span class="line">        div.style.width = <span class="keyword">this</span>.width + <span class="string">"px"</span>;</span><br><span class="line">        div.style.height = <span class="keyword">this</span>.height + <span class="string">"px"</span>;</span><br><span class="line">        div.style.backgroundColor = <span class="keyword">this</span>.color;</span><br><span class="line">        <span class="comment">// 脱离文档流</span></span><br><span class="line">        div.style.position = <span class="string">"absolute"</span>;</span><br><span class="line">        <span class="comment">// 随机横纵坐标</span></span><br><span class="line">        <span class="keyword">this</span>.x = <span class="built_in">parseInt</span>(<span class="built_in">Math</span>.random() * (wrap.offsetWidth / <span class="keyword">this</span>.width)) * <span class="keyword">this</span>.width;</span><br><span class="line">        <span class="keyword">this</span>.y = <span class="built_in">parseInt</span>(<span class="built_in">Math</span>.random() * (wrap.offsetHeight / <span class="keyword">this</span>.height)) * <span class="keyword">this</span>.height;</span><br><span class="line">        div.style.left = <span class="keyword">this</span>.x + <span class="string">"px"</span>;</span><br><span class="line">        div.style.top = <span class="keyword">this</span>.y + <span class="string">"px"</span>;</span><br><span class="line">        <span class="comment">// 把div加入到数组中</span></span><br><span class="line">        elements.push(div);</span><br><span class="line">    &#125;;</span><br><span class="line">    <span class="comment">// Food暴露给力windwo，外部可以使用</span></span><br><span class="line">    <span class="built_in">window</span>.Food = Food;</span><br><span class="line">&#125;());</span><br></pre></td></tr></table></figure><h3 id="引入代码二-Snake-js"><a href="#引入代码二-Snake-js" class="headerlink" title="引入代码二 Snake.js"></a>引入代码二 Snake.js</h3><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br><span class="line">64</span><br><span class="line">65</span><br><span class="line">66</span><br><span class="line">67</span><br><span class="line">68</span><br><span class="line">69</span><br><span class="line">70</span><br><span class="line">71</span><br><span class="line">72</span><br><span class="line">73</span><br><span class="line">74</span><br><span class="line">75</span><br><span class="line">76</span><br><span class="line">77</span><br><span class="line">78</span><br><span class="line">79</span><br><span class="line">80</span><br><span class="line">81</span><br><span class="line">82</span><br><span class="line">83</span><br><span class="line">84</span><br><span class="line">85</span><br><span class="line">86</span><br><span class="line">87</span><br><span class="line">88</span><br><span class="line">89</span><br><span class="line">90</span><br><span class="line">91</span><br><span class="line">92</span><br><span class="line">93</span><br><span class="line">94</span><br><span class="line">95</span><br><span class="line">96</span><br><span class="line">97</span><br><span class="line">98</span><br><span class="line">99</span><br><span class="line">100</span><br><span class="line">101</span><br><span class="line">102</span><br><span class="line">103</span><br><span class="line">104</span><br><span class="line">105</span><br><span class="line">106</span><br><span class="line">107</span><br><span class="line">108</span><br><span class="line">109</span><br><span class="line">110</span><br><span class="line">111</span><br><span class="line">112</span><br><span class="line">113</span><br><span class="line">114</span><br><span class="line">115</span><br><span class="line">116</span><br><span class="line">117</span><br><span class="line">118</span><br><span class="line">119</span><br><span class="line">120</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">/*</span></span><br><span class="line"><span class="comment"> * @Author: yhf </span></span><br><span class="line"><span class="comment"> * @Date: 2018-09-10 00:08:15 </span></span><br><span class="line"><span class="comment"> * @Last Modified by: yhf</span></span><br><span class="line"><span class="comment"> * @Last Modified time: 2018-09-10 00:11:02</span></span><br><span class="line"><span class="comment"> */</span></span><br><span class="line"><span class="comment">// 小蛇的自调函数</span></span><br><span class="line">(<span class="function"><span class="keyword">function</span> (<span class="params"></span>) </span>&#123;</span><br><span class="line">    <span class="comment">// 存放蛇</span></span><br><span class="line">    <span class="keyword">var</span> elements = [];</span><br><span class="line">    <span class="comment">// 小蛇的构造函数</span></span><br><span class="line">    <span class="function"><span class="keyword">function</span> <span class="title">Snake</span>(<span class="params">width, height, direction</span>) </span>&#123;</span><br><span class="line">        <span class="comment">// 蛇的每个部分的宽</span></span><br><span class="line">        <span class="keyword">this</span>.width = width || <span class="number">20</span>;</span><br><span class="line">        <span class="keyword">this</span>.height = height || <span class="number">20</span>;</span><br><span class="line"></span><br><span class="line">        <span class="comment">// 蛇的身体</span></span><br><span class="line">        <span class="keyword">this</span>.body = [&#123;</span><br><span class="line">                x: <span class="number">3</span>,</span><br><span class="line">                y: <span class="number">2</span>,</span><br><span class="line">                color: <span class="string">"red"</span></span><br><span class="line">            &#125;, <span class="comment">// 头</span></span><br><span class="line">            &#123;</span><br><span class="line">                x: <span class="number">2</span>,</span><br><span class="line">                y: <span class="number">2</span>,</span><br><span class="line">                color: <span class="string">"orange"</span></span><br><span class="line">            &#125;, <span class="comment">// 身体</span></span><br><span class="line">            &#123;</span><br><span class="line">                x: <span class="number">1</span>,</span><br><span class="line">                y: <span class="number">2</span>,</span><br><span class="line">                color: <span class="string">"orange"</span></span><br><span class="line">            &#125; <span class="comment">// 身体</span></span><br><span class="line">        ];</span><br><span class="line">        <span class="comment">// 方向</span></span><br><span class="line">        <span class="keyword">this</span>.direction = direction || <span class="string">"right"</span>;</span><br><span class="line">    &#125;;</span><br><span class="line">    <span class="comment">// 添加小蛇初始化方法</span></span><br><span class="line">    Snake.prototype.init = <span class="function"><span class="keyword">function</span> (<span class="params">wrap</span>) </span>&#123;</span><br><span class="line">        <span class="comment">// 清理蛇</span></span><br><span class="line">        remove();</span><br><span class="line">        <span class="comment">// 创建div</span></span><br><span class="line">        <span class="keyword">for</span> (<span class="keyword">let</span> i = <span class="number">0</span>; i &lt; <span class="keyword">this</span>.body.length; i++) &#123;</span><br><span class="line">            <span class="keyword">const</span> obj = <span class="keyword">this</span>.body[i]</span><br><span class="line">            <span class="comment">// 创建div</span></span><br><span class="line">            <span class="keyword">var</span> div = <span class="built_in">document</span>.createElement(<span class="string">"div"</span>);</span><br><span class="line">            <span class="comment">// 吧div加入到wrap</span></span><br><span class="line">            wrap.appendChild(div);</span><br><span class="line">            <span class="comment">// 设置div样式</span></span><br><span class="line">            div.style.position = <span class="string">"absolute"</span>;</span><br><span class="line">            div.style.width = <span class="keyword">this</span>.width + <span class="string">"px"</span>;</span><br><span class="line">            div.style.height = <span class="keyword">this</span>.height + <span class="string">"px"</span>;</span><br><span class="line">            <span class="comment">// 横纵坐标</span></span><br><span class="line">            div.style.left = obj.x * <span class="keyword">this</span>.width + <span class="string">"px"</span>;</span><br><span class="line">            div.style.top = obj.y * <span class="keyword">this</span>.height + <span class="string">"px"</span>;</span><br><span class="line">            <span class="comment">// 背景颜色</span></span><br><span class="line">            div.style.backgroundColor = obj.color;</span><br><span class="line">            <span class="comment">// 把div加入到数组</span></span><br><span class="line">            elements.push(div);</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;;</span><br><span class="line"></span><br><span class="line">    <span class="comment">// 小蛇动方法</span></span><br><span class="line">    Snake.prototype.move = <span class="function"><span class="keyword">function</span> (<span class="params">food, wrap</span>) </span>&#123;</span><br><span class="line">        <span class="comment">// 改变小蛇身体坐标位置</span></span><br><span class="line">        <span class="keyword">var</span> i = <span class="keyword">this</span>.body.length - <span class="number">1</span>;</span><br><span class="line">        <span class="keyword">for</span> (; i &gt; <span class="number">0</span>; i--) &#123;</span><br><span class="line">            <span class="keyword">this</span>.body[i].x = <span class="keyword">this</span>.body[i - <span class="number">1</span>].x;</span><br><span class="line">            <span class="keyword">this</span>.body[i].y = <span class="keyword">this</span>.body[i - <span class="number">1</span>].y;</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="comment">// 判断方向--改变小蛇头位置</span></span><br><span class="line">        <span class="keyword">switch</span> (<span class="keyword">this</span>.direction) &#123;</span><br><span class="line">            <span class="keyword">case</span> <span class="string">"right"</span>:</span><br><span class="line">                <span class="keyword">this</span>.body[<span class="number">0</span>].x += <span class="number">1</span>;</span><br><span class="line">                <span class="keyword">break</span>;</span><br><span class="line">            <span class="keyword">case</span> <span class="string">"left"</span>:</span><br><span class="line">                <span class="keyword">this</span>.body[<span class="number">0</span>].x -= <span class="number">1</span>;</span><br><span class="line">                <span class="keyword">break</span>;</span><br><span class="line">            <span class="keyword">case</span> <span class="string">"top"</span>:</span><br><span class="line">                <span class="keyword">this</span>.body[<span class="number">0</span>].y -= <span class="number">1</span>;</span><br><span class="line">                <span class="keyword">break</span>;</span><br><span class="line">            <span class="keyword">case</span> <span class="string">"bottom"</span>:</span><br><span class="line">                <span class="keyword">this</span>.body[<span class="number">0</span>].y += <span class="number">1</span>;</span><br><span class="line">                <span class="keyword">break</span>;</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="comment">// 判断有没有吃到食物</span></span><br><span class="line">        <span class="comment">// 蛇和食物的坐标一致</span></span><br><span class="line">        <span class="keyword">var</span> headX = <span class="keyword">this</span>.body[<span class="number">0</span>].x * <span class="keyword">this</span>.width;</span><br><span class="line">        <span class="keyword">var</span> headY = <span class="keyword">this</span>.body[<span class="number">0</span>].y * <span class="keyword">this</span>.height;</span><br><span class="line"></span><br><span class="line">        <span class="comment">// 判断蛇的头的坐标和食物的坐标是否相同</span></span><br><span class="line">        <span class="keyword">if</span> (headX == food.x &amp;&amp; headY == food.y) &#123;</span><br><span class="line">            <span class="comment">// 获取蛇的尾巴</span></span><br><span class="line">            <span class="keyword">var</span> last = <span class="keyword">this</span>.body[<span class="keyword">this</span>.body.length - <span class="number">1</span>];</span><br><span class="line">            <span class="comment">// 复制多一个</span></span><br><span class="line">            <span class="keyword">this</span>.body.push(&#123;</span><br><span class="line">                x: last.x,</span><br><span class="line">                y: last.y,</span><br><span class="line">                color: last.color</span><br><span class="line">            &#125;);</span><br><span class="line">            <span class="comment">// 把食物删除</span></span><br><span class="line">            food.init(wrap);</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;;</span><br><span class="line"></span><br><span class="line">    <span class="comment">// 删除小蛇都函数</span></span><br><span class="line">    <span class="function"><span class="keyword">function</span> <span class="title">remove</span>(<span class="params"></span>) </span>&#123;</span><br><span class="line">        <span class="comment">// 获取数组</span></span><br><span class="line">        <span class="keyword">var</span> i = elements.length - <span class="number">1</span>;</span><br><span class="line">        <span class="keyword">for</span> (; i &gt;= <span class="number">0</span>; i--) &#123;</span><br><span class="line">            <span class="comment">// 从当前元素找到父级元素删除</span></span><br><span class="line">            <span class="keyword">const</span> ele = elements[i];</span><br><span class="line">            <span class="comment">// 从wrap删除</span></span><br><span class="line">            ele.parentNode.removeChild(ele);</span><br><span class="line">            elements.splice(i, <span class="number">1</span>);</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="comment">// 把Snake暴露给window</span></span><br><span class="line">    <span class="built_in">window</span>.Snake = Snake;</span><br><span class="line">&#125;());</span><br></pre></td></tr></table></figure><h3 id="引入代码三-Game-js"><a href="#引入代码三-Game-js" class="headerlink" title="引入代码三 Game.js"></a>引入代码三 Game.js</h3><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br><span class="line">64</span><br><span class="line">65</span><br><span class="line">66</span><br><span class="line">67</span><br><span class="line">68</span><br><span class="line">69</span><br><span class="line">70</span><br><span class="line">71</span><br><span class="line">72</span><br><span class="line">73</span><br><span class="line">74</span><br><span class="line">75</span><br><span class="line">76</span><br><span class="line">77</span><br><span class="line">78</span><br><span class="line">79</span><br><span class="line">80</span><br><span class="line">81</span><br><span class="line">82</span><br><span class="line">83</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">/*</span></span><br><span class="line"><span class="comment"> * @Author: yhf </span></span><br><span class="line"><span class="comment"> * @Date: 2018-09-10 00:08:23 </span></span><br><span class="line"><span class="comment"> * @Last Modified by:   yhf </span></span><br><span class="line"><span class="comment"> * @Last Modified time: 2018-09-10 00:08:23 </span></span><br><span class="line"><span class="comment"> */</span></span><br><span class="line"><span class="comment">// 自调用封装游戏对象</span></span><br><span class="line">(<span class="function"><span class="keyword">function</span> (<span class="params"></span>) </span>&#123;</span><br><span class="line">    <span class="keyword">var</span> that = <span class="literal">null</span>;</span><br><span class="line">    <span class="comment">// 游戏构造函数</span></span><br><span class="line">    <span class="function"><span class="keyword">function</span> <span class="title">Game</span>(<span class="params"></span>) </span>&#123;</span><br><span class="line">        <span class="keyword">this</span>.food = <span class="keyword">new</span> Food(); <span class="comment">// 食物对象</span></span><br><span class="line">        <span class="keyword">this</span>.snake = <span class="keyword">new</span> Snake(); <span class="comment">// 蛇对象</span></span><br><span class="line">        <span class="keyword">this</span>.wrap = wrap; <span class="comment">// 地图</span></span><br><span class="line">        that = <span class="keyword">this</span>;</span><br><span class="line">    &#125;;</span><br><span class="line">    Game.prototype.init = <span class="function"><span class="keyword">function</span> (<span class="params"></span>) </span>&#123;</span><br><span class="line">        <span class="comment">// 初始化游戏</span></span><br><span class="line">        <span class="comment">// 食物初始化</span></span><br><span class="line">        <span class="keyword">this</span>.food.init(<span class="keyword">this</span>.wrap);</span><br><span class="line">        <span class="comment">// 小蛇初始化</span></span><br><span class="line">        <span class="keyword">this</span>.snake.init(<span class="keyword">this</span>.wrap);</span><br><span class="line">        <span class="comment">// 调用自动移动蛇方法</span></span><br><span class="line">        <span class="keyword">this</span>.runSnake(<span class="keyword">this</span>.food, <span class="keyword">this</span>.wrap);</span><br><span class="line">        <span class="comment">// 调用按键方法</span></span><br><span class="line">        <span class="keyword">this</span>.bindKey();</span><br><span class="line">    &#125;;</span><br><span class="line">    <span class="comment">// 添加原型，设小蛇跑起来</span></span><br><span class="line">    Game.prototype.runSnake = <span class="function"><span class="keyword">function</span> (<span class="params">food, wrap</span>) </span>&#123;</span><br><span class="line">        <span class="comment">// 自动移动</span></span><br><span class="line">        <span class="keyword">var</span> time = setInterval(<span class="function"><span class="keyword">function</span> (<span class="params"></span>) </span>&#123;</span><br><span class="line">            <span class="comment">// 此时this是window</span></span><br><span class="line">            <span class="comment">// 移动蛇</span></span><br><span class="line">            <span class="keyword">this</span>.snake.move(food, wrap);</span><br><span class="line">            <span class="comment">// 初始化蛇</span></span><br><span class="line">            <span class="keyword">this</span>.snake.init(wrap);</span><br><span class="line">            <span class="comment">// 横坐标的最大值</span></span><br><span class="line">            <span class="keyword">var</span> maxX = wrap.offsetWidth / <span class="keyword">this</span>.snake.width;</span><br><span class="line">            <span class="keyword">var</span> maxY = wrap.offsetHeight / <span class="keyword">this</span>.snake.height;</span><br><span class="line">            <span class="comment">// 小蛇头坐标</span></span><br><span class="line">            <span class="keyword">var</span> headX = <span class="keyword">this</span>.snake.body[<span class="number">0</span>].x;</span><br><span class="line">            <span class="keyword">var</span> headY = <span class="keyword">this</span>.snake.body[<span class="number">0</span>].y;</span><br><span class="line">            <span class="comment">// 横坐标</span></span><br><span class="line">            <span class="keyword">if</span> (headX &lt; <span class="number">0</span> || headX &gt;= maxX) &#123;</span><br><span class="line">                <span class="comment">// 撞墙，停止定时器</span></span><br><span class="line">                clearInterval(time);</span><br><span class="line">                alert(<span class="string">"游戏结束"</span>);</span><br><span class="line">            &#125;</span><br><span class="line">            <span class="comment">// 纵坐标</span></span><br><span class="line">            <span class="keyword">if</span> (headY &lt; <span class="number">0</span> || headY &gt;= maxY) &#123;</span><br><span class="line">                <span class="comment">// 撞墙，停止定时器</span></span><br><span class="line">                clearInterval(time);</span><br><span class="line">                alert(<span class="string">"游戏结束"</span>);</span><br><span class="line">            &#125;</span><br><span class="line">        &#125;.bind(that), <span class="number">150</span>)</span><br><span class="line">    &#125;;</span><br><span class="line"></span><br><span class="line">    <span class="comment">// 添加原型方法--设置用户按键</span></span><br><span class="line">    Game.prototype.bindKey = <span class="function"><span class="keyword">function</span> (<span class="params"></span>) </span>&#123;</span><br><span class="line">        <span class="comment">// 获取用户按键</span></span><br><span class="line">        <span class="built_in">document</span>.addEventListener(<span class="string">"keydown"</span>, <span class="function"><span class="keyword">function</span> (<span class="params">e</span>) </span>&#123;</span><br><span class="line">            <span class="comment">// 此时this应该是keydown的事件对象</span></span><br><span class="line">            <span class="comment">// 所以this就是document</span></span><br><span class="line">            <span class="comment">// 获取按键值</span></span><br><span class="line">            <span class="keyword">switch</span> (e.keyCode) &#123;</span><br><span class="line">                <span class="keyword">case</span> <span class="number">37</span>:</span><br><span class="line">                    <span class="keyword">this</span>.snake.direction = <span class="string">"left"</span>;</span><br><span class="line">                    <span class="keyword">break</span>;</span><br><span class="line">                <span class="keyword">case</span> <span class="number">38</span>:</span><br><span class="line">                    <span class="keyword">this</span>.snake.direction = <span class="string">"top"</span>;</span><br><span class="line">                    <span class="keyword">break</span>;</span><br><span class="line">                <span class="keyword">case</span> <span class="number">39</span>:</span><br><span class="line">                    <span class="keyword">this</span>.snake.direction = <span class="string">"right"</span>;</span><br><span class="line">                    <span class="keyword">break</span>;</span><br><span class="line">                <span class="keyword">case</span> <span class="number">40</span>:</span><br><span class="line">                    <span class="keyword">this</span>.snake.direction = <span class="string">"bottom"</span>;</span><br><span class="line">                    <span class="keyword">break</span>;</span><br><span class="line">            &#125;</span><br><span class="line">        &#125;.bind(that), <span class="literal">false</span>);</span><br><span class="line">    &#125;;</span><br><span class="line"></span><br><span class="line">    <span class="built_in">window</span>.Game = Game;</span><br><span class="line">&#125;());</span><br></pre></td></tr></table></figure><h3 id="内部调用代码"><a href="#内部调用代码" class="headerlink" title="内部调用代码"></a>内部调用代码</h3><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">// 方法一</span></span><br><span class="line"><span class="comment">// 获取地图</span></span><br><span class="line"><span class="keyword">const</span> wrap = <span class="built_in">document</span>.querySelector(<span class="string">".wrap"</span>);</span><br><span class="line"><span class="comment">// 初始化游戏对象</span></span><br><span class="line"><span class="keyword">var</span> gm = <span class="keyword">new</span> Game(wrap);</span><br><span class="line"><span class="comment">// 开始游戏</span></span><br><span class="line">gm.init();</span><br><span class="line"></span><br><span class="line"></span><br><span class="line"><span class="comment">// 方法二</span></span><br><span class="line"><span class="comment">// 初始化游戏对象</span></span><br><span class="line"><span class="keyword">var</span> gm = <span class="keyword">new</span> Game(<span class="built_in">document</span>.querySelector(<span class="string">".wrap"</span>));</span><br><span class="line"><span class="comment">// 开始游戏</span></span><br><span class="line">gm.init();</span><br></pre></td></tr></table></figure>]]></content>
      
      
      <categories>
          
          <category> JavaScript </category>
          
      </categories>
      
      
        <tags>
            
            <tag> js笔记/案例 </tag>
            
        </tags>
      
    </entry>
    
    <entry>
      <title>自定义滚动条 两版本</title>
      <link href="/2018/09/07/2018-09-07/"/>
      <url>/2018/09/07/2018-09-07/</url>
      
        <content type="html"><![CDATA[<link rel="stylesheet" class="aplayer-secondary-style-marker" href="/assets/css/APlayer.min.css"><script src="/assets/js/APlayer.min.js" class="aplayer-secondary-script-marker"></script><h1 id="重点"><a href="#重点" class="headerlink" title="重点"></a>重点</h1><h3 id="版本一"><a href="#版本一" class="headerlink" title="版本一"></a>版本一</h3><p>1.鼠标事件 （鼠标按下-&gt;鼠标移动-&gt;鼠标抬起）<br>2.滚动条的高度计算<br>3.滚动条的上下移动范围设置<br>4.滚动条的移动设置<br>5.阻止默认事件<br>6.计算和设置文字的移动距离</p><h3 id="版本二"><a href="#版本二" class="headerlink" title="版本二"></a>版本二</h3><p>1.增加了滚动等功能<br>2.事件的兼容问题解决</p><h1 id="项目代码"><a href="#项目代码" class="headerlink" title="项目代码"></a>项目代码</h1><h2 id="版本一-1"><a href="#版本一-1" class="headerlink" title="版本一"></a>版本一</h2><h3 id="Css"><a href="#Css" class="headerlink" title="Css"></a>Css</h3><figure class="highlight css"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br></pre></td><td class="code"><pre><span class="line">* &#123;</span><br><span class="line">    <span class="attribute">padding</span>: <span class="number">0</span>;</span><br><span class="line">    <span class="attribute">margin</span>: <span class="number">0</span>;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="selector-class">.wrap</span> &#123;</span><br><span class="line">    <span class="attribute">width</span>: <span class="number">200px</span>;</span><br><span class="line">    <span class="attribute">height</span>: <span class="number">400px</span>;</span><br><span class="line">    <span class="attribute">border</span>: <span class="number">1px</span> solid black;</span><br><span class="line">    <span class="attribute">position</span>: relative;</span><br><span class="line">    <span class="attribute">top</span>: <span class="number">100px</span>;</span><br><span class="line">    <span class="attribute">left</span>: <span class="number">100px</span>;</span><br><span class="line">    <span class="attribute">overflow</span>: hidden;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="selector-class">.con</span> &#123;</span><br><span class="line">    <span class="attribute">padding</span>: <span class="number">5px</span> <span class="number">16px</span> <span class="number">5px</span> <span class="number">5px</span>;</span><br><span class="line">    <span class="attribute">font-size</span>: <span class="number">25px</span>;</span><br><span class="line">    <span class="attribute">position</span>: relative;</span><br><span class="line">    <span class="attribute">font-size</span>: <span class="number">14px</span>;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="selector-class">.gdt</span> &#123;</span><br><span class="line">    <span class="attribute">width</span>: <span class="number">15px</span>;</span><br><span class="line">    <span class="attribute">height</span>: <span class="number">100%</span>;</span><br><span class="line">    <span class="attribute">background</span>: <span class="number">#ccc</span>;</span><br><span class="line">    <span class="attribute">position</span>: absolute;</span><br><span class="line">    <span class="attribute">right</span>: <span class="number">0</span>;</span><br><span class="line">    <span class="attribute">top</span>: <span class="number">0</span>;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="selector-class">.gd</span> &#123;</span><br><span class="line">    <span class="attribute">width</span>: <span class="number">15px</span>;</span><br><span class="line">    <span class="attribute">background-color</span>: red;</span><br><span class="line">    <span class="attribute">position</span>: absolute;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h3 id="Html"><a href="#Html" class="headerlink" title="Html"></a>Html</h3><figure class="highlight html"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br></pre></td><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">div</span> <span class="attr">class</span>=<span class="string">"wrap"</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">div</span> <span class="attr">class</span>=<span class="string">"con"</span>&gt;</span></span><br><span class="line">            start------</span><br><span class="line">            内容内容内容内容内容内容内容内容内容内容内容内容内容内容内容内容内容内容内容内容内容内容内容内容内容内容内容内容内容内容内容内容内容内容内容内容内容内容内容内容内容内容内容内容内容内容内容内容内容内容内容内容内容内容内容内容内容内容内容内容内容内容内容内容内容内容内容内容内容内容内容内容内容内容内容内容内容内容内容内容内容内容内容内容内容内容内容内容内容内容内容内容内容内容内容内容内容内容内容内容内容内容内容内容内容内容内容内容内容内容内容内容内容内容内容内容内容内容内容内容内容内容内容内容内容内容内容内容内容内容内容内容内容内容内容内容内容内容内容内容内容内容内容内容内容内容内容内容内容内容内容内容内容内容内容内容内容内容内容内容内容内容内容内容内容内容内容内容内容内容内容内容内容内容内容内容内容内容内容内容内容内容内容内容内容内容内容内容内容内容内容内容内容内容内容内容内容内容内容内容内容内容内容内容内容内容内容内容内容内容内容内容内容内容内容内容内容内容内容内容内容内容内容内容内容内容内容内容内容内容内容内容内容内容内容内容内容内容内容内容内容内容内容内容内容内容内容内容内容内容内容内容内容内容内容内容内容内容内容内容内容内容内容内容内容内容内容内容内容内容内容内容内容内容内容内容内容内容内容内容内容内容内容内容内容内容内容内容内容内容内容内容内容内容内容内容内容内容内容内容内容内容内容内容内容内容内容内容内容内容内容内容内容内容内容内容内容内容内容内容内容内容内容内容内容内容内容内容内容内容内容内容内容内容内容内容内容内</span><br><span class="line">            内容自己增加</span><br><span class="line">            ------end</span><br><span class="line">        <span class="tag">&lt;/<span class="name">div</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">div</span> <span class="attr">class</span>=<span class="string">"gdt"</span>&gt;</span></span><br><span class="line">            <span class="tag">&lt;<span class="name">div</span> <span class="attr">class</span>=<span class="string">"gd"</span>&gt;</span><span class="tag">&lt;/<span class="name">div</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;/<span class="name">div</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;/<span class="name">div</span>&gt;</span></span><br></pre></td></tr></table></figure><h3 id="Js"><a href="#Js" class="headerlink" title="Js"></a>Js</h3><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br></pre></td><td class="code"><pre><span class="line"><span class="built_in">window</span>.onload = <span class="function"><span class="params">()</span> =&gt;</span> &#123;</span><br><span class="line">        <span class="comment">// 获取元素</span></span><br><span class="line">        <span class="comment">// 外部div框架</span></span><br><span class="line">        <span class="keyword">let</span> wrap = <span class="built_in">document</span>.querySelector(<span class="string">".wrap"</span>);</span><br><span class="line">        <span class="comment">// 文字div</span></span><br><span class="line">        <span class="keyword">let</span> con = <span class="built_in">document</span>.querySelector(<span class="string">".con"</span>);</span><br><span class="line">        <span class="comment">// 滚动条div--容器</span></span><br><span class="line">        <span class="keyword">let</span> gdt = <span class="built_in">document</span>.querySelector(<span class="string">".gdt"</span>);</span><br><span class="line">        <span class="comment">// 滚动条</span></span><br><span class="line">        <span class="keyword">let</span> gd = <span class="built_in">document</span>.querySelector(<span class="string">".gd"</span>);</span><br><span class="line"></span><br><span class="line">        <span class="comment">// 设置滚动条高度</span></span><br><span class="line">        <span class="comment">// 滚动条/装滚动条的高=框架的高/文字的高</span></span><br><span class="line">        <span class="comment">// 滚动条=装滚动条的高*框架的高/文字的高</span></span><br><span class="line">        <span class="keyword">let</span> height = gdt.offsetHeight * wrap.offsetHeight / con.offsetHeight;</span><br><span class="line">        <span class="keyword">if</span> (height &lt; <span class="number">30</span>) &#123;</span><br><span class="line">            height = <span class="number">30</span>;</span><br><span class="line">        &#125;</span><br><span class="line">        gd.style.height = height + <span class="string">"px"</span>;</span><br><span class="line"></span><br><span class="line">        <span class="comment">// 移动滚动条</span></span><br><span class="line">        gd.onmousedown = <span class="function">(<span class="params">e</span>) =&gt;</span> &#123;</span><br><span class="line">            <span class="keyword">let</span> spaceY = e.clientY - gd.offsetTop;</span><br><span class="line">            <span class="built_in">document</span>.onmousemove = <span class="function">(<span class="params">e</span>) =&gt;</span> &#123;</span><br><span class="line">                <span class="keyword">let</span> y = e.clientY - spaceY;</span><br><span class="line">                y = y &lt; <span class="number">0</span> ? y = <span class="number">0</span> : y;</span><br><span class="line">                y = y &gt; gdt.offsetHeight - gd.offsetHeight ? y = gdt.offsetHeight - gd.offsetHeight : y;</span><br><span class="line">                gd.style.top = y + <span class="string">"px"</span>;</span><br><span class="line">                <span class="comment">//设置鼠标移动的时候,文字不被选中</span></span><br><span class="line"></span><br><span class="line">                <span class="built_in">window</span>.getSelection ? <span class="built_in">window</span>.getSelection().removeAllRanges() : <span class="built_in">document</span>.selection.empty();</span><br><span class="line"></span><br><span class="line">                <span class="comment">// 滚动条移动的距离/文字的距离=滚动最大的移动距离/文字最大的移动距离</span></span><br><span class="line">                <span class="comment">// 文字的移动距离 = 滚动的移动距离*文字的最大移动距离/滚动条的最大移动距离</span></span><br><span class="line">                <span class="keyword">let</span> moveY = y * (con.offsetHeight - wrap.offsetHeight) / (gdt.offsetHeight - gd.offsetHeight);</span><br><span class="line">                <span class="comment">// 设置文字的div距离</span></span><br><span class="line">                con.style.marginTop = -moveY + <span class="string">"px"</span>;</span><br><span class="line">            &#125;</span><br><span class="line">        &#125;</span><br><span class="line"></span><br><span class="line">        <span class="built_in">document</span>.onmouseup = <span class="function"><span class="params">()</span> =&gt;</span> &#123;</span><br><span class="line">            <span class="built_in">document</span>.onmousemove = <span class="literal">null</span>;</span><br><span class="line">        &#125;</span><br><span class="line"></span><br><span class="line">    &#125;</span><br></pre></td></tr></table></figure><h2 id="版本二-1"><a href="#版本二-1" class="headerlink" title="版本二"></a>版本二</h2><h3 id="Css-1"><a href="#Css-1" class="headerlink" title="Css"></a>Css</h3><figure class="highlight css"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br></pre></td><td class="code"><pre><span class="line"><span class="selector-class">.wrap</span>&#123;</span><br><span class="line">    <span class="attribute">width</span>: <span class="number">200px</span>;</span><br><span class="line">    <span class="attribute">height</span>: <span class="number">300px</span>;</span><br><span class="line">    <span class="attribute">border</span>:<span class="number">5px</span> solid black;</span><br><span class="line">    <span class="attribute">position</span>: relative;</span><br><span class="line">    <span class="attribute">overflow</span>: hidden;</span><br><span class="line">&#125;</span><br><span class="line"><span class="selector-class">.con</span>&#123;</span><br><span class="line">    <span class="comment">/*width: 185px;*/</span></span><br><span class="line">    <span class="attribute">padding-right</span>: <span class="number">15px</span>;</span><br><span class="line">    <span class="attribute">font-size</span>: <span class="number">25px</span>;</span><br><span class="line">    <span class="attribute">position</span>: relative;</span><br><span class="line">&#125;</span><br><span class="line"><span class="selector-class">.scroll</span>&#123;</span><br><span class="line">    <span class="attribute">width</span>: <span class="number">15px</span>;</span><br><span class="line">    <span class="attribute">height</span>: <span class="number">100%</span>;</span><br><span class="line">    <span class="attribute">background</span>: <span class="number">#ccc</span>;</span><br><span class="line">    <span class="attribute">position</span>: absolute;</span><br><span class="line">    <span class="attribute">right</span>: <span class="number">0</span>;</span><br><span class="line">    <span class="attribute">top</span>: <span class="number">0</span>;</span><br><span class="line">&#125;</span><br><span class="line"><span class="selector-class">.scrollbar</span>&#123;</span><br><span class="line">    <span class="attribute">width</span>: <span class="number">15px</span>;</span><br><span class="line">    <span class="attribute">background</span>: red;</span><br><span class="line">    <span class="attribute">height</span>: <span class="number">50px</span>;</span><br><span class="line">    <span class="attribute">position</span>: absolute;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h3 id="Html-1"><a href="#Html-1" class="headerlink" title="Html"></a>Html</h3><figure class="highlight html"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br></pre></td><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">div</span> <span class="attr">class</span>=<span class="string">"wrap"</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">div</span> <span class="attr">class</span>=<span class="string">"con"</span>&gt;</span></span><br><span class="line">        start------</span><br><span class="line">        内容内容内容内容内容内容内容内容内容内容内容内容内容内容内容内容内容内容内容内容内容内容内容内容内容内容内容内容内容内容内容内容内容内容内容内容内容内容内容内容内容内容内容内容内容内容内容内容内容内容内容内容内容内容内容内容内容内容内容内容内容内容内容内容内容内容内容内容内容内容内容内容内容内容内容内容内容内容内容内容内容内容内容内容内容内容内容内容内容内容内容内容内容内容内容内容内容内容内容内容内容内容内容内容内容内容内容内容内容内容内容内容内容内容内容内容内容内容内容内容内容内容内容内容内容内容内容内容内容内容内容内容内容内容内容内容内容内容内容内容内容内容内容内容内容内容内容内容内容内容内容内容内容内容内容内容内容内容内容内容内容内容内容内容内容内容内容内容内容内容内容内容内容内容内容内容内容内容内容内容内容内容内容内容内容内容内容内容内容内容内容内容内容内容内容内容内容内容内容内容内容内容内容内容内容内容内容内容内容内容内容内容内容内容内容内容内容内容内容内容内容内容内容内容内容内容内容内容内容内容内容内容内容内容内容内容内容内容内容内容内容内容内容内容内容内容内容内容内容内容内容内容内容内容内容内容内容内容内容内容内容内容内容内容内容内容内容内容内容内容内容内容内容内容内容内容内容内容内容内容内容内容内容内容内容内容内容内容内容内容内容内容内容内容内容内容内容内容内容内容内容内容内容内容内容内容内容内容内容内容内容内容内容内容内容</span><br><span class="line">        ------end</span><br><span class="line">    <span class="tag">&lt;/<span class="name">div</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">div</span> <span class="attr">class</span>=<span class="string">"scroll"</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">div</span> <span class="attr">class</span>=<span class="string">"scrollbar"</span>&gt;</span><span class="tag">&lt;/<span class="name">div</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;/<span class="name">div</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">div</span>&gt;</span></span><br></pre></td></tr></table></figure><h3 id="Js-1"><a href="#Js-1" class="headerlink" title="Js"></a>Js</h3><h2 id="外部引入的js"><a href="#外部引入的js" class="headerlink" title="外部引入的js"></a>外部引入的js</h2><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br></pre></td><td class="code"><pre><span class="line"><span class="function"><span class="keyword">function</span> <span class="title">mousewheel</span>(<span class="params">obj,callback</span>) </span>&#123;</span><br><span class="line">true<span class="comment">//判断是否火狐浏览器</span></span><br><span class="line">true<span class="keyword">if</span> (navigator.userAgent.indexOf(<span class="string">"Firefox"</span>)&gt;<span class="number">-1</span>) &#123;</span><br><span class="line">truetrueobj.addEventListener(<span class="string">"DOMMouseScroll"</span>,fn);<span class="comment">//火狐滚轮事件</span></span><br><span class="line">true&#125;<span class="keyword">else</span>&#123;</span><br><span class="line">truetrueobj.addEventListener(<span class="string">"mousewheel"</span>,fn);<span class="comment">//非火狐滚轮事件</span></span><br><span class="line">true&#125;</span><br><span class="line">true<span class="function"><span class="keyword">function</span> <span class="title">fn</span>(<span class="params">e</span>) </span>&#123;</span><br><span class="line">truetrue<span class="keyword">var</span> e = e || <span class="built_in">window</span>.event;</span><br><span class="line">truetrue<span class="comment">//火狐 detail 上-3 下3</span></span><br><span class="line">truetrue<span class="comment">//非火狐 wheelDelta 上120 下-120</span></span><br><span class="line">truetrue<span class="comment">// false:下 true:上</span></span><br><span class="line">truetrue<span class="keyword">if</span> (e.detail) &#123;</span><br><span class="line">truetruetrue<span class="comment">//e.detail&lt;0判断往上还是往下滚动小于0是上</span></span><br><span class="line">truetruetruecallback.call(obj,e,e.detail&lt;<span class="number">0</span>);</span><br><span class="line">truetrue&#125;<span class="keyword">else</span>&#123;</span><br><span class="line">truetruetrue<span class="comment">//e.wheelDelta&gt;0判断往上还是往下滚动大于0是上</span></span><br><span class="line">truetruetruecallback.call(obj,e,e.wheelDelta&gt;<span class="number">0</span>);</span><br><span class="line">truetrue&#125;</span><br><span class="line">truetrue<span class="comment">//阻止默认事件</span></span><br><span class="line">truetruee.preventDefault ? e.preventDefault() : (e.returnValue = <span class="literal">false</span>);</span><br><span class="line">true&#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br><span class="line">64</span><br><span class="line">65</span><br><span class="line">66</span><br><span class="line">67</span><br><span class="line">68</span><br><span class="line">69</span><br><span class="line">70</span><br><span class="line">71</span><br><span class="line">72</span><br><span class="line">73</span><br><span class="line">74</span><br><span class="line">75</span><br><span class="line">76</span><br><span class="line">77</span><br><span class="line">78</span><br><span class="line">79</span><br><span class="line">80</span><br><span class="line">81</span><br><span class="line">82</span><br><span class="line">83</span><br><span class="line">84</span><br><span class="line">85</span><br><span class="line">86</span><br><span class="line">87</span><br><span class="line">88</span><br><span class="line">89</span><br><span class="line">90</span><br><span class="line">91</span><br><span class="line">92</span><br><span class="line">93</span><br><span class="line">94</span><br><span class="line">95</span><br><span class="line">96</span><br><span class="line">97</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">var</span> wrap=<span class="built_in">document</span>.querySelector(<span class="string">".wrap"</span>);</span><br><span class="line"><span class="keyword">var</span> con=<span class="built_in">document</span>.querySelector(<span class="string">".con"</span>);</span><br><span class="line"><span class="keyword">var</span> scroll=<span class="built_in">document</span>.querySelector(<span class="string">".scroll"</span>);</span><br><span class="line"><span class="keyword">var</span> scrollbar=<span class="built_in">document</span>.querySelector(<span class="string">".scrollbar"</span>);</span><br><span class="line"></span><br><span class="line"><span class="comment">//计算滚动条的高度</span></span><br><span class="line"><span class="built_in">console</span>.log(wrap.clientHeight);</span><br><span class="line"><span class="built_in">console</span>.log(con.offsetHeight);</span><br><span class="line"><span class="keyword">var</span> barH = wrap.clientHeight/con.offsetHeight*scroll.offsetHeight;</span><br><span class="line"><span class="keyword">if</span> (barH&lt;<span class="number">50</span>) &#123;barH=<span class="number">50</span>&#125;</span><br><span class="line">scrollbar.style.height = barH + <span class="string">"px"</span>;</span><br><span class="line"></span><br><span class="line"></span><br><span class="line"><span class="keyword">var</span> bol=<span class="literal">false</span>;</span><br><span class="line"><span class="keyword">var</span> dy=<span class="number">0</span>;</span><br><span class="line">scrollbar.onmousedown = <span class="function"><span class="keyword">function</span> (<span class="params">e</span>) </span>&#123;</span><br><span class="line">truebol = <span class="literal">true</span>;<span class="comment">//设置可以移动</span></span><br><span class="line">truedy = e.clientY-offsetFn(scrollbar).top;<span class="comment">//计算鼠标和滚动条的位置差</span></span><br><span class="line">true</span><br><span class="line">true<span class="comment">//阻止事件冒泡</span></span><br><span class="line">trueevent.stopPropagation ? event.stopPropagation() : (event.cancelBubble = <span class="literal">true</span>);</span><br><span class="line">true<span class="comment">//阻止默认事件</span></span><br><span class="line">trueevent.preventDefault ? event.preventDefault() : (event.returnValue = <span class="literal">false</span>);</span><br><span class="line">&#125;</span><br><span class="line">scroll.onmousedown = <span class="function"><span class="keyword">function</span> (<span class="params">e</span>) </span>&#123;</span><br><span class="line">true<span class="keyword">var</span> y = e.clientY-scrollbar.offsetHeight/<span class="number">2</span><span class="number">-13</span>;</span><br><span class="line">truemove(y);</span><br><span class="line">&#125;</span><br><span class="line"><span class="built_in">document</span>.onmousemove = <span class="function"><span class="keyword">function</span> (<span class="params">e</span>) </span>&#123;</span><br><span class="line">true<span class="keyword">if</span> (bol) &#123;<span class="comment">//判断是否可以移动</span></span><br><span class="line">truetrue<span class="keyword">var</span> y = e.clientY-wrap.offsetTop<span class="number">-5</span>-dy;</span><br><span class="line">truetruemove(y)</span><br><span class="line">true&#125;</span><br><span class="line">&#125;</span><br><span class="line"><span class="built_in">document</span>.onmouseup = <span class="function"><span class="keyword">function</span> (<span class="params"></span>) </span>&#123;</span><br><span class="line">truebol = <span class="literal">false</span>;<span class="comment">//设置不可以移动</span></span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="comment">//移动滚动条和内容的函数</span></span><br><span class="line"><span class="function"><span class="keyword">function</span> <span class="title">move</span>(<span class="params">y</span>) </span>&#123;</span><br><span class="line">true<span class="comment">//判断不可以超过父级框</span></span><br><span class="line">true<span class="keyword">if</span>(y&lt;<span class="number">0</span>)&#123;y=<span class="number">0</span>&#125;</span><br><span class="line">true<span class="keyword">else</span> <span class="keyword">if</span> (y&gt;scroll.offsetHeight-scrollbar.offsetHeight) &#123;</span><br><span class="line">truetruey=scroll.offsetHeight-scrollbar.offsetHeight;</span><br><span class="line">true&#125;</span><br><span class="line">truescrollbar.style.top = y + <span class="string">"px"</span>;<span class="comment">//设置滚动条位置</span></span><br><span class="line"></span><br><span class="line">true<span class="comment">// 内容可移动距离</span></span><br><span class="line">true<span class="keyword">var</span> conDy = con.offsetHeight-wrap.clientHeight;</span><br><span class="line">true<span class="comment">// 滚动条可移动距离</span></span><br><span class="line">true<span class="keyword">var</span> scrollDy = scroll.offsetHeight-scrollbar.offsetHeight;</span><br><span class="line">true<span class="keyword">var</span> scale = conDy/scrollDy;<span class="comment">//计算比例</span></span><br><span class="line">true<span class="comment">//设置内容位置</span></span><br><span class="line">truecon.style.top = -y*scale + <span class="string">"px"</span>;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="comment">// 滚轮事件</span></span><br><span class="line">mousewheel(wrap,<span class="function"><span class="keyword">function</span> (<span class="params">e,bol</span>) </span>&#123;</span><br><span class="line">true<span class="keyword">if</span> (bol) &#123;<span class="comment">//判断往上滚还是往下滚</span></span><br><span class="line">truetruey = scrollbar.offsetTop<span class="number">-10</span>;</span><br><span class="line">true&#125;<span class="keyword">else</span>&#123;</span><br><span class="line">truetruey = scrollbar.offsetTop+<span class="number">10</span>;</span><br><span class="line">true&#125;</span><br><span class="line">truemove(y);<span class="comment">//调用移动滚动条和内容的函数</span></span><br><span class="line">&#125;)</span><br><span class="line"><span class="comment">//键盘控制滚动条移动</span></span><br><span class="line"><span class="built_in">document</span>.onkeydown = <span class="function"><span class="keyword">function</span> (<span class="params">e</span>) </span>&#123;</span><br><span class="line">true<span class="comment">// console.log(e.keyCode)</span></span><br><span class="line">true<span class="keyword">if</span> (e.keyCode==<span class="number">38</span>) &#123;<span class="comment">//键盘上</span></span><br><span class="line">truetruey = scrollbar.offsetTop<span class="number">-10</span>;</span><br><span class="line">true&#125;<span class="keyword">else</span> <span class="keyword">if</span>(e.keyCode==<span class="number">40</span>)&#123;<span class="comment">//键盘下</span></span><br><span class="line">truetruey = scrollbar.offsetTop+<span class="number">10</span>;</span><br><span class="line">true&#125;</span><br><span class="line">truemove(y);<span class="comment">//调用移动滚动条和内容的函数</span></span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">function</span> <span class="title">offsetFn</span>(<span class="params">obj</span>) </span>&#123;</span><br><span class="line">true<span class="keyword">var</span> l = obj.offsetLeft;<span class="comment">//获取自己的left</span></span><br><span class="line">true<span class="keyword">var</span> t = obj.offsetTop;<span class="comment">//获取自己的top</span></span><br><span class="line">trueobj = obj.offsetParent;<span class="comment">//获取定位父级元素</span></span><br><span class="line">true<span class="keyword">while</span>(obj)&#123;<span class="comment">//判断有没有定位父级元素</span></span><br><span class="line">truetrue<span class="comment">//加上定位父级的定位的left和top</span></span><br><span class="line">truetruel += obj.offsetLeft + <span class="built_in">parseInt</span>(getStyle(obj,<span class="string">"borderLeftWidth"</span>));</span><br><span class="line">truetruet += obj.offsetTop + <span class="built_in">parseInt</span>(getStyle(obj,<span class="string">"borderTopWidth"</span>));</span><br><span class="line">truetrueobj = obj.offsetParent;<span class="comment">//继续找定位父级</span></span><br><span class="line">true&#125;</span><br><span class="line">true<span class="keyword">return</span> &#123;<span class="string">"left"</span>:l,<span class="string">"top"</span>:t&#125;;</span><br><span class="line">&#125;</span><br><span class="line"><span class="comment">//获取计算后的样式</span></span><br><span class="line"><span class="function"><span class="keyword">function</span> <span class="title">getStyle</span>(<span class="params">obj,attr</span>) </span>&#123;</span><br><span class="line">true<span class="keyword">if</span> (obj.currentStyle) &#123;</span><br><span class="line">truetrue<span class="keyword">return</span> obj.currentStyle[attr];<span class="comment">//IE获取方法</span></span><br><span class="line">true&#125;<span class="keyword">else</span>&#123;</span><br><span class="line">truetrue<span class="keyword">return</span> getComputedStyle(obj,<span class="literal">null</span>)[attr];<span class="comment">//非IE取方法</span></span><br><span class="line">true&#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>]]></content>
      
      
      <categories>
          
          <category> JavaScript </category>
          
      </categories>
      
      
        <tags>
            
            <tag> js笔记/案例 </tag>
            
        </tags>
      
    </entry>
    
    <entry>
      <title>初始化css和阻止链接跳转</title>
      <link href="/2018/09/05/2018-09-05(3)/"/>
      <url>/2018/09/05/2018-09-05(3)/</url>
      
        <content type="html"><![CDATA[<link rel="stylesheet" class="aplayer-secondary-style-marker" href="/assets/css/APlayer.min.css"><script src="/assets/js/APlayer.min.js" class="aplayer-secondary-script-marker"></script><h2 id="重点"><a href="#重点" class="headerlink" title="重点"></a>重点</h2><p>1.初始化解决h5和兼容问题</p><h3 id="阻止跳转"><a href="#阻止跳转" class="headerlink" title="阻止跳转"></a>阻止跳转</h3><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">let</span> a = <span class="built_in">document</span>.querySelector(<span class="string">"a"</span>);</span><br><span class="line">a.onclick = <span class="function">(<span class="params">e</span>) =&gt;</span> &#123;</span><br><span class="line">    <span class="comment">// 方法一</span></span><br><span class="line">    <span class="comment">// return false;</span></span><br><span class="line">    <span class="comment">// 方法二</span></span><br><span class="line">    <span class="comment">// 不支持ie8</span></span><br><span class="line">    e.preventDefault();<span class="comment">//阻止浏览器的默认事件</span></span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h1 id="初始化css5-0"><a href="#初始化css5-0" class="headerlink" title="初始化css5.0"></a>初始化css5.0</h1><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br><span class="line">64</span><br><span class="line">65</span><br><span class="line">66</span><br><span class="line">67</span><br><span class="line">68</span><br><span class="line">69</span><br><span class="line">70</span><br><span class="line">71</span><br><span class="line">72</span><br><span class="line">73</span><br><span class="line">74</span><br><span class="line">75</span><br><span class="line">76</span><br><span class="line">77</span><br><span class="line">78</span><br><span class="line">79</span><br><span class="line">80</span><br><span class="line">81</span><br><span class="line">82</span><br><span class="line">83</span><br><span class="line">84</span><br><span class="line">85</span><br><span class="line">86</span><br><span class="line">87</span><br><span class="line">88</span><br><span class="line">89</span><br><span class="line">90</span><br><span class="line">91</span><br><span class="line">92</span><br><span class="line">93</span><br><span class="line">94</span><br><span class="line">95</span><br><span class="line">96</span><br><span class="line">97</span><br><span class="line">98</span><br><span class="line">99</span><br><span class="line">100</span><br><span class="line">101</span><br><span class="line">102</span><br><span class="line">103</span><br><span class="line">104</span><br><span class="line">105</span><br><span class="line">106</span><br><span class="line">107</span><br><span class="line">108</span><br><span class="line">109</span><br><span class="line">110</span><br><span class="line">111</span><br><span class="line">112</span><br><span class="line">113</span><br><span class="line">114</span><br><span class="line">115</span><br><span class="line">116</span><br><span class="line">117</span><br><span class="line">118</span><br><span class="line">119</span><br><span class="line">120</span><br><span class="line">121</span><br><span class="line">122</span><br><span class="line">123</span><br><span class="line">124</span><br><span class="line">125</span><br><span class="line">126</span><br><span class="line">127</span><br><span class="line">128</span><br><span class="line">129</span><br><span class="line">130</span><br><span class="line">131</span><br><span class="line">132</span><br><span class="line">133</span><br><span class="line">134</span><br><span class="line">135</span><br><span class="line">136</span><br><span class="line">137</span><br><span class="line">138</span><br><span class="line">139</span><br><span class="line">140</span><br><span class="line">141</span><br><span class="line">142</span><br><span class="line">143</span><br><span class="line">144</span><br><span class="line">145</span><br><span class="line">146</span><br><span class="line">147</span><br><span class="line">148</span><br><span class="line">149</span><br><span class="line">150</span><br><span class="line">151</span><br><span class="line">152</span><br><span class="line">153</span><br><span class="line">154</span><br><span class="line">155</span><br><span class="line">156</span><br><span class="line">157</span><br><span class="line">158</span><br><span class="line">159</span><br><span class="line">160</span><br><span class="line">161</span><br><span class="line">162</span><br><span class="line">163</span><br><span class="line">164</span><br><span class="line">165</span><br><span class="line">166</span><br><span class="line">167</span><br><span class="line">168</span><br><span class="line">169</span><br><span class="line">170</span><br><span class="line">171</span><br><span class="line">172</span><br><span class="line">173</span><br><span class="line">174</span><br><span class="line">175</span><br><span class="line">176</span><br><span class="line">177</span><br><span class="line">178</span><br><span class="line">179</span><br><span class="line">180</span><br><span class="line">181</span><br><span class="line">182</span><br><span class="line">183</span><br><span class="line">184</span><br><span class="line">185</span><br><span class="line">186</span><br><span class="line">187</span><br><span class="line">188</span><br><span class="line">189</span><br><span class="line">190</span><br><span class="line">191</span><br><span class="line">192</span><br><span class="line">193</span><br><span class="line">194</span><br><span class="line">195</span><br><span class="line">196</span><br><span class="line">197</span><br><span class="line">198</span><br><span class="line">199</span><br><span class="line">200</span><br><span class="line">201</span><br><span class="line">202</span><br><span class="line">203</span><br><span class="line">204</span><br><span class="line">205</span><br><span class="line">206</span><br><span class="line">207</span><br><span class="line">208</span><br><span class="line">209</span><br><span class="line">210</span><br><span class="line">211</span><br><span class="line">212</span><br><span class="line">213</span><br><span class="line">214</span><br><span class="line">215</span><br><span class="line">216</span><br><span class="line">217</span><br><span class="line">218</span><br><span class="line">219</span><br><span class="line">220</span><br><span class="line">221</span><br><span class="line">222</span><br><span class="line">223</span><br><span class="line">224</span><br><span class="line">225</span><br><span class="line">226</span><br><span class="line">227</span><br><span class="line">228</span><br><span class="line">229</span><br><span class="line">230</span><br><span class="line">231</span><br><span class="line">232</span><br><span class="line">233</span><br><span class="line">234</span><br><span class="line">235</span><br><span class="line">236</span><br><span class="line">237</span><br><span class="line">238</span><br><span class="line">239</span><br><span class="line">240</span><br><span class="line">241</span><br><span class="line">242</span><br><span class="line">243</span><br><span class="line">244</span><br><span class="line">245</span><br><span class="line">246</span><br><span class="line">247</span><br><span class="line">248</span><br><span class="line">249</span><br><span class="line">250</span><br><span class="line">251</span><br><span class="line">252</span><br><span class="line">253</span><br><span class="line">254</span><br><span class="line">255</span><br><span class="line">256</span><br><span class="line">257</span><br><span class="line">258</span><br><span class="line">259</span><br><span class="line">260</span><br><span class="line">261</span><br><span class="line">262</span><br><span class="line">263</span><br><span class="line">264</span><br><span class="line">265</span><br><span class="line">266</span><br><span class="line">267</span><br><span class="line">268</span><br><span class="line">269</span><br><span class="line">270</span><br><span class="line">271</span><br><span class="line">272</span><br><span class="line">273</span><br><span class="line">274</span><br><span class="line">275</span><br><span class="line">276</span><br><span class="line">277</span><br><span class="line">278</span><br><span class="line">279</span><br><span class="line">280</span><br><span class="line">281</span><br><span class="line">282</span><br><span class="line">283</span><br><span class="line">284</span><br><span class="line">285</span><br><span class="line">286</span><br><span class="line">287</span><br><span class="line">288</span><br><span class="line">289</span><br><span class="line">290</span><br><span class="line">291</span><br><span class="line">292</span><br><span class="line">293</span><br><span class="line">294</span><br><span class="line">295</span><br><span class="line">296</span><br><span class="line">297</span><br><span class="line">298</span><br><span class="line">299</span><br><span class="line">300</span><br><span class="line">301</span><br><span class="line">302</span><br><span class="line">303</span><br><span class="line">304</span><br><span class="line">305</span><br><span class="line">306</span><br><span class="line">307</span><br><span class="line">308</span><br><span class="line">309</span><br><span class="line">310</span><br><span class="line">311</span><br><span class="line">312</span><br><span class="line">313</span><br><span class="line">314</span><br><span class="line">315</span><br><span class="line">316</span><br><span class="line">317</span><br><span class="line">318</span><br><span class="line">319</span><br><span class="line">320</span><br><span class="line">321</span><br><span class="line">322</span><br><span class="line">323</span><br><span class="line">324</span><br><span class="line">325</span><br><span class="line">326</span><br><span class="line">327</span><br><span class="line">328</span><br><span class="line">329</span><br><span class="line">330</span><br><span class="line">331</span><br><span class="line">332</span><br><span class="line">333</span><br><span class="line">334</span><br><span class="line">335</span><br><span class="line">336</span><br><span class="line">337</span><br><span class="line">338</span><br><span class="line">339</span><br><span class="line">340</span><br><span class="line">341</span><br><span class="line">342</span><br><span class="line">343</span><br><span class="line">344</span><br><span class="line">345</span><br><span class="line">346</span><br><span class="line">347</span><br><span class="line">348</span><br><span class="line">349</span><br><span class="line">350</span><br><span class="line">351</span><br><span class="line">352</span><br><span class="line">353</span><br><span class="line">354</span><br><span class="line">355</span><br><span class="line">356</span><br><span class="line">357</span><br><span class="line">358</span><br><span class="line">359</span><br><span class="line">360</span><br><span class="line">361</span><br><span class="line">362</span><br><span class="line">363</span><br><span class="line">364</span><br><span class="line">365</span><br><span class="line">366</span><br><span class="line">367</span><br><span class="line">368</span><br><span class="line">369</span><br><span class="line">370</span><br><span class="line">371</span><br><span class="line">372</span><br><span class="line">373</span><br><span class="line">374</span><br><span class="line">375</span><br><span class="line">376</span><br><span class="line">377</span><br><span class="line">378</span><br><span class="line">379</span><br><span class="line">380</span><br><span class="line">381</span><br><span class="line">382</span><br><span class="line">383</span><br><span class="line">384</span><br><span class="line">385</span><br><span class="line">386</span><br><span class="line">387</span><br><span class="line">388</span><br><span class="line">389</span><br><span class="line">390</span><br><span class="line">391</span><br><span class="line">392</span><br><span class="line">393</span><br><span class="line">394</span><br><span class="line">395</span><br><span class="line">396</span><br><span class="line">397</span><br><span class="line">398</span><br><span class="line">399</span><br><span class="line">400</span><br><span class="line">401</span><br><span class="line">402</span><br><span class="line">403</span><br><span class="line">404</span><br><span class="line">405</span><br><span class="line">406</span><br><span class="line">407</span><br><span class="line">408</span><br><span class="line">409</span><br><span class="line">410</span><br><span class="line">411</span><br><span class="line">412</span><br><span class="line">413</span><br><span class="line">414</span><br><span class="line">415</span><br><span class="line">416</span><br><span class="line">417</span><br><span class="line">418</span><br><span class="line">419</span><br><span class="line">420</span><br><span class="line">421</span><br><span class="line">422</span><br><span class="line">423</span><br><span class="line">424</span><br><span class="line">425</span><br><span class="line">426</span><br><span class="line">427</span><br><span class="line">428</span><br><span class="line">429</span><br><span class="line">430</span><br><span class="line">431</span><br><span class="line">432</span><br><span class="line">433</span><br><span class="line">434</span><br><span class="line">435</span><br><span class="line">436</span><br><span class="line">437</span><br><span class="line">438</span><br><span class="line">439</span><br><span class="line">440</span><br><span class="line">441</span><br><span class="line">442</span><br><span class="line">443</span><br><span class="line">444</span><br><span class="line">445</span><br><span class="line">446</span><br><span class="line">447</span><br><span class="line">448</span><br><span class="line">449</span><br><span class="line">450</span><br><span class="line">451</span><br><span class="line">452</span><br><span class="line">453</span><br><span class="line">454</span><br><span class="line">455</span><br><span class="line">456</span><br><span class="line">457</span><br><span class="line">458</span><br><span class="line">459</span><br><span class="line">460</span><br><span class="line">461</span><br><span class="line">462</span><br><span class="line">463</span><br></pre></td><td class="code"><pre><span class="line">/*! normalize.css v5.0.0 | MIT License | github.com/necolas/normalize.css */</span><br><span class="line">/*</span><br><span class="line">http://necolas.github.io/normalize.css/</span><br><span class="line">*/</span><br><span class="line">/**</span><br><span class="line"> * 1. Change the default font family in all browsers (opinionated).</span><br><span class="line"> * 2. Correct the line height in all browsers.</span><br><span class="line"> * 3. Prevent adjustments of font size after orientation changes in</span><br><span class="line"> *    IE on Windows Phone and in iOS.</span><br><span class="line"> */</span><br><span class="line"></span><br><span class="line">/* Document</span><br><span class="line">   ========================================================================== */</span><br><span class="line"></span><br><span class="line">html &#123;</span><br><span class="line">    font-family: sans-serif; /* 1 */</span><br><span class="line">    line-height: 1.15; /* 2 */</span><br><span class="line">    -ms-text-size-adjust: 100%; /* 3 */</span><br><span class="line">    -webkit-text-size-adjust: 100%; /* 3 */</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line">/* Sections</span><br><span class="line">   ========================================================================== */</span><br><span class="line"></span><br><span class="line">/**</span><br><span class="line"> * Remove the margin in all browsers (opinionated).</span><br><span class="line"> */</span><br><span class="line"></span><br><span class="line">body &#123;</span><br><span class="line">    margin: 0;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line">/**</span><br><span class="line"> * Add the correct display in IE 9-.</span><br><span class="line"> */</span><br><span class="line"></span><br><span class="line">article,</span><br><span class="line">aside,</span><br><span class="line">footer,</span><br><span class="line">header,</span><br><span class="line">nav,</span><br><span class="line">section &#123;</span><br><span class="line">    display: block;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line">/**</span><br><span class="line"> * Correct the font size and margin on `h1` elements within `section` and</span><br><span class="line"> * `article` contexts in Chrome, Firefox, and Safari.</span><br><span class="line"> */</span><br><span class="line"></span><br><span class="line">h1 &#123;</span><br><span class="line">    font-size: 2em;</span><br><span class="line">    margin: 0.67em 0;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line">/* Grouping content</span><br><span class="line">   ========================================================================== */</span><br><span class="line"></span><br><span class="line">/**</span><br><span class="line"> * Add the correct display in IE 9-.</span><br><span class="line"> * 1. Add the correct display in IE.</span><br><span class="line"> */</span><br><span class="line"></span><br><span class="line">figcaption,</span><br><span class="line">figure,</span><br><span class="line">main &#123; /* 1 */</span><br><span class="line">    display: block;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line">/**</span><br><span class="line"> * Add the correct margin in IE 8.</span><br><span class="line"> */</span><br><span class="line"></span><br><span class="line">figure &#123;</span><br><span class="line">    margin: 1em 40px;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line">/**</span><br><span class="line"> * 1. Add the correct box sizing in Firefox.</span><br><span class="line"> * 2. Show the overflow in Edge and IE.</span><br><span class="line"> */</span><br><span class="line"></span><br><span class="line">hr &#123;</span><br><span class="line">    box-sizing: content-box; /* 1 */</span><br><span class="line">    height: 0; /* 1 */</span><br><span class="line">    overflow: visible; /* 2 */</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line">/**</span><br><span class="line"> * 1. Correct the inheritance and scaling of font size in all browsers.</span><br><span class="line"> * 2. Correct the odd `em` font sizing in all browsers.</span><br><span class="line"> */</span><br><span class="line"></span><br><span class="line">pre &#123;</span><br><span class="line">    font-family: monospace, monospace; /* 1 */</span><br><span class="line">    font-size: 1em; /* 2 */</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line">/* Text-level semantics</span><br><span class="line">   ========================================================================== */</span><br><span class="line"></span><br><span class="line">/**</span><br><span class="line"> * 1. Remove the gray background on active links in IE 10.</span><br><span class="line"> * 2. Remove gaps in links underline in iOS 8+ and Safari 8+.</span><br><span class="line"> */</span><br><span class="line"></span><br><span class="line">a &#123;</span><br><span class="line">    background-color: transparent; /* 1 */</span><br><span class="line">    -webkit-text-decoration-skip: objects; /* 2 */</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line">/**</span><br><span class="line"> * Remove the outline on focused links when they are also active or hovered</span><br><span class="line"> * in all browsers (opinionated).</span><br><span class="line"> */</span><br><span class="line"></span><br><span class="line">a:active,</span><br><span class="line">a:hover &#123;</span><br><span class="line">    outline-width: 0;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line">/**</span><br><span class="line"> * 1. Remove the bottom border in Firefox 39-.</span><br><span class="line"> * 2. Add the correct text decoration in Chrome, Edge, IE, Opera, and Safari.</span><br><span class="line"> */</span><br><span class="line"></span><br><span class="line">abbr[title] &#123;</span><br><span class="line">    border-bottom: none; /* 1 */</span><br><span class="line">    text-decoration: underline; /* 2 */</span><br><span class="line">    text-decoration: underline dotted; /* 2 */</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line">/**</span><br><span class="line"> * Prevent the duplicate application of `bolder` by the next rule in Safari 6.</span><br><span class="line"> */</span><br><span class="line"></span><br><span class="line">b,</span><br><span class="line">strong &#123;</span><br><span class="line">    font-weight: inherit;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line">/**</span><br><span class="line"> * Add the correct font weight in Chrome, Edge, and Safari.</span><br><span class="line"> */</span><br><span class="line"></span><br><span class="line">b,</span><br><span class="line">strong &#123;</span><br><span class="line">    font-weight: bolder;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line">/**</span><br><span class="line"> * 1. Correct the inheritance and scaling of font size in all browsers.</span><br><span class="line"> * 2. Correct the odd `em` font sizing in all browsers.</span><br><span class="line"> */</span><br><span class="line"></span><br><span class="line">code,</span><br><span class="line">kbd,</span><br><span class="line">samp &#123;</span><br><span class="line">    font-family: monospace, monospace; /* 1 */</span><br><span class="line">    font-size: 1em; /* 2 */</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line">/**</span><br><span class="line"> * Add the correct font style in Android 4.3-.</span><br><span class="line"> */</span><br><span class="line"></span><br><span class="line">dfn &#123;</span><br><span class="line">    font-style: italic;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line">/**</span><br><span class="line"> * Add the correct background and color in IE 9-.</span><br><span class="line"> */</span><br><span class="line"></span><br><span class="line">mark &#123;</span><br><span class="line">    background-color: #ff0;</span><br><span class="line">    color: #000;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line">/**</span><br><span class="line"> * Add the correct font size in all browsers.</span><br><span class="line"> */</span><br><span class="line"></span><br><span class="line">small &#123;</span><br><span class="line">    font-size: 80%;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line">/**</span><br><span class="line"> * Prevent `sub` and `sup` elements from affecting the line height in</span><br><span class="line"> * all browsers.</span><br><span class="line"> */</span><br><span class="line"></span><br><span class="line">sub,</span><br><span class="line">sup &#123;</span><br><span class="line">    font-size: 75%;</span><br><span class="line">    line-height: 0;</span><br><span class="line">    position: relative;</span><br><span class="line">    vertical-align: baseline;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line">sub &#123;</span><br><span class="line">    bottom: -0.25em;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line">sup &#123;</span><br><span class="line">    top: -0.5em;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line">/* Embedded content</span><br><span class="line">   ========================================================================== */</span><br><span class="line"></span><br><span class="line">/**</span><br><span class="line"> * Add the correct display in IE 9-.</span><br><span class="line"> */</span><br><span class="line"></span><br><span class="line">audio,</span><br><span class="line">video &#123;</span><br><span class="line">    display: inline-block;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line">/**</span><br><span class="line"> * Add the correct display in iOS 4-7.</span><br><span class="line"> */</span><br><span class="line"></span><br><span class="line">audio:not([controls]) &#123;</span><br><span class="line">    display: none;</span><br><span class="line">    height: 0;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line">/**</span><br><span class="line"> * Remove the border on images inside links in IE 10-.</span><br><span class="line"> */</span><br><span class="line"></span><br><span class="line">img &#123;</span><br><span class="line">    border-style: none;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line">/**</span><br><span class="line"> * Hide the overflow in IE.</span><br><span class="line"> */</span><br><span class="line"></span><br><span class="line">svg:not(:root) &#123;</span><br><span class="line">    overflow: hidden;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line">/* Forms</span><br><span class="line">   ========================================================================== */</span><br><span class="line"></span><br><span class="line">/**</span><br><span class="line"> * 1. Change the font styles in all browsers (opinionated).</span><br><span class="line"> * 2. Remove the margin in Firefox and Safari.</span><br><span class="line"> */</span><br><span class="line"></span><br><span class="line">button,</span><br><span class="line">input,</span><br><span class="line">optgroup,</span><br><span class="line">select,</span><br><span class="line">textarea &#123;</span><br><span class="line">    font-family: sans-serif; /* 1 */</span><br><span class="line">    font-size: 100%; /* 1 */</span><br><span class="line">    line-height: 1.15; /* 1 */</span><br><span class="line">    margin: 0; /* 2 */</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line">/**</span><br><span class="line"> * Show the overflow in IE.</span><br><span class="line"> * 1. Show the overflow in Edge.</span><br><span class="line"> */</span><br><span class="line"></span><br><span class="line">button,</span><br><span class="line">input &#123; /* 1 */</span><br><span class="line">    overflow: visible;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line">/**</span><br><span class="line"> * Remove the inheritance of text transform in Edge, Firefox, and IE.</span><br><span class="line"> * 1. Remove the inheritance of text transform in Firefox.</span><br><span class="line"> */</span><br><span class="line"></span><br><span class="line">button,</span><br><span class="line">select &#123; /* 1 */</span><br><span class="line">    text-transform: none;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line">/**</span><br><span class="line"> * 1. Prevent a WebKit bug where (2) destroys native `audio` and `video`</span><br><span class="line"> *    controls in Android 4.</span><br><span class="line"> * 2. Correct the inability to style clickable types in iOS and Safari.</span><br><span class="line"> */</span><br><span class="line"></span><br><span class="line">button,</span><br><span class="line">html [type=&quot;button&quot;], /* 1 */</span><br><span class="line">[type=&quot;reset&quot;],</span><br><span class="line">[type=&quot;submit&quot;] &#123;</span><br><span class="line">    -webkit-appearance: button; /* 2 */</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line">/**</span><br><span class="line"> * Remove the inner border and padding in Firefox.</span><br><span class="line"> */</span><br><span class="line"></span><br><span class="line">button::-moz-focus-inner,</span><br><span class="line">[type=&quot;button&quot;]::-moz-focus-inner,</span><br><span class="line">[type=&quot;reset&quot;]::-moz-focus-inner,</span><br><span class="line">[type=&quot;submit&quot;]::-moz-focus-inner &#123;</span><br><span class="line">    border-style: none;</span><br><span class="line">    padding: 0;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line">/**</span><br><span class="line"> * Restore the focus styles unset by the previous rule.</span><br><span class="line"> */</span><br><span class="line"></span><br><span class="line">button:-moz-focusring,</span><br><span class="line">[type=&quot;button&quot;]:-moz-focusring,</span><br><span class="line">[type=&quot;reset&quot;]:-moz-focusring,</span><br><span class="line">[type=&quot;submit&quot;]:-moz-focusring &#123;</span><br><span class="line">    outline: 1px dotted ButtonText;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line">/**</span><br><span class="line"> * Change the border, margin, and padding in all browsers (opinionated).</span><br><span class="line"> */</span><br><span class="line"></span><br><span class="line">fieldset &#123;</span><br><span class="line">    border: 1px solid #c0c0c0;</span><br><span class="line">    margin: 0 2px;</span><br><span class="line">    padding: 0.35em 0.625em 0.75em;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line">/**</span><br><span class="line"> * 1. Correct the text wrapping in Edge and IE.</span><br><span class="line"> * 2. Correct the color inheritance from `fieldset` elements in IE.</span><br><span class="line"> * 3. Remove the padding so developers are not caught out when they zero out</span><br><span class="line"> *    `fieldset` elements in all browsers.</span><br><span class="line"> */</span><br><span class="line"></span><br><span class="line">legend &#123;</span><br><span class="line">    box-sizing: border-box; /* 1 */</span><br><span class="line">    color: inherit; /* 2 */</span><br><span class="line">    display: table; /* 1 */</span><br><span class="line">    max-width: 100%; /* 1 */</span><br><span class="line">    padding: 0; /* 3 */</span><br><span class="line">    white-space: normal; /* 1 */</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line">/**</span><br><span class="line"> * 1. Add the correct display in IE 9-.</span><br><span class="line"> * 2. Add the correct vertical alignment in Chrome, Firefox, and Opera.</span><br><span class="line"> */</span><br><span class="line"></span><br><span class="line">progress &#123;</span><br><span class="line">    display: inline-block; /* 1 */</span><br><span class="line">    vertical-align: baseline; /* 2 */</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line">/**</span><br><span class="line"> * Remove the default vertical scrollbar in IE.</span><br><span class="line"> */</span><br><span class="line"></span><br><span class="line">textarea &#123;</span><br><span class="line">    overflow: auto;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line">/**</span><br><span class="line"> * 1. Add the correct box sizing in IE 10-.</span><br><span class="line"> * 2. Remove the padding in IE 10-.</span><br><span class="line"> */</span><br><span class="line"></span><br><span class="line">[type=&quot;checkbox&quot;],</span><br><span class="line">[type=&quot;radio&quot;] &#123;</span><br><span class="line">    box-sizing: border-box; /* 1 */</span><br><span class="line">    padding: 0; /* 2 */</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line">/**</span><br><span class="line"> * Correct the cursor style of increment and decrement buttons in Chrome.</span><br><span class="line"> */</span><br><span class="line"></span><br><span class="line">[type=&quot;number&quot;]::-webkit-inner-spin-button,</span><br><span class="line">[type=&quot;number&quot;]::-webkit-outer-spin-button &#123;</span><br><span class="line">    height: auto;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line">/**</span><br><span class="line"> * 1. Correct the odd appearance in Chrome and Safari.</span><br><span class="line"> * 2. Correct the outline style in Safari.</span><br><span class="line"> */</span><br><span class="line"></span><br><span class="line">[type=&quot;search&quot;] &#123;</span><br><span class="line">    -webkit-appearance: textfield; /* 1 */</span><br><span class="line">    outline-offset: -2px; /* 2 */</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line">/**</span><br><span class="line"> * Remove the inner padding and cancel buttons in Chrome and Safari on macOS.</span><br><span class="line"> */</span><br><span class="line"></span><br><span class="line">[type=&quot;search&quot;]::-webkit-search-cancel-button,</span><br><span class="line">[type=&quot;search&quot;]::-webkit-search-decoration &#123;</span><br><span class="line">    -webkit-appearance: none;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line">/**</span><br><span class="line"> * 1. Correct the inability to style clickable types in iOS and Safari.</span><br><span class="line"> * 2. Change font properties to `inherit` in Safari.</span><br><span class="line"> */</span><br><span class="line"></span><br><span class="line">::-webkit-file-upload-button &#123;</span><br><span class="line">    -webkit-appearance: button; /* 1 */</span><br><span class="line">    font: inherit; /* 2 */</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line">/* Interactive</span><br><span class="line">   ========================================================================== */</span><br><span class="line"></span><br><span class="line">/*</span><br><span class="line"> * Add the correct display in IE 9-.</span><br><span class="line"> * 1. Add the correct display in Edge, IE, and Firefox.</span><br><span class="line"> */</span><br><span class="line"></span><br><span class="line">details, /* 1 */</span><br><span class="line">menu &#123;</span><br><span class="line">    display: block;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line">/*</span><br><span class="line"> * Add the correct display in all browsers.</span><br><span class="line"> */</span><br><span class="line"></span><br><span class="line">summary &#123;</span><br><span class="line">    display: list-item;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line">/* Scripting</span><br><span class="line">   ========================================================================== */</span><br><span class="line"></span><br><span class="line">/**</span><br><span class="line"> * Add the correct display in IE 9-.</span><br><span class="line"> */</span><br><span class="line"></span><br><span class="line">canvas &#123;</span><br><span class="line">    display: inline-block;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line">/**</span><br><span class="line"> * Add the correct display in IE.</span><br><span class="line"> */</span><br><span class="line"></span><br><span class="line">template &#123;</span><br><span class="line">    display: none;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line">/* Hidden</span><br><span class="line">   ========================================================================== */</span><br><span class="line"></span><br><span class="line">/**</span><br><span class="line"> * Add the correct display in IE 10-.</span><br><span class="line"> */</span><br><span class="line"></span><br><span class="line">[hidden] &#123;</span><br><span class="line">    display: none;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h1 id="Css2-8-0"><a href="#Css2-8-0" class="headerlink" title="Css2 8.0"></a>Css2 8.0</h1><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br><span class="line">64</span><br><span class="line">65</span><br><span class="line">66</span><br><span class="line">67</span><br><span class="line">68</span><br><span class="line">69</span><br><span class="line">70</span><br><span class="line">71</span><br><span class="line">72</span><br><span class="line">73</span><br><span class="line">74</span><br><span class="line">75</span><br><span class="line">76</span><br><span class="line">77</span><br><span class="line">78</span><br><span class="line">79</span><br><span class="line">80</span><br><span class="line">81</span><br><span class="line">82</span><br><span class="line">83</span><br><span class="line">84</span><br><span class="line">85</span><br><span class="line">86</span><br><span class="line">87</span><br><span class="line">88</span><br><span class="line">89</span><br><span class="line">90</span><br><span class="line">91</span><br><span class="line">92</span><br><span class="line">93</span><br><span class="line">94</span><br><span class="line">95</span><br><span class="line">96</span><br><span class="line">97</span><br><span class="line">98</span><br><span class="line">99</span><br><span class="line">100</span><br><span class="line">101</span><br><span class="line">102</span><br><span class="line">103</span><br><span class="line">104</span><br><span class="line">105</span><br><span class="line">106</span><br><span class="line">107</span><br><span class="line">108</span><br><span class="line">109</span><br><span class="line">110</span><br><span class="line">111</span><br><span class="line">112</span><br><span class="line">113</span><br><span class="line">114</span><br><span class="line">115</span><br><span class="line">116</span><br><span class="line">117</span><br><span class="line">118</span><br><span class="line">119</span><br><span class="line">120</span><br><span class="line">121</span><br><span class="line">122</span><br><span class="line">123</span><br><span class="line">124</span><br><span class="line">125</span><br><span class="line">126</span><br><span class="line">127</span><br><span class="line">128</span><br><span class="line">129</span><br><span class="line">130</span><br><span class="line">131</span><br><span class="line">132</span><br><span class="line">133</span><br><span class="line">134</span><br><span class="line">135</span><br><span class="line">136</span><br><span class="line">137</span><br><span class="line">138</span><br><span class="line">139</span><br><span class="line">140</span><br><span class="line">141</span><br><span class="line">142</span><br><span class="line">143</span><br><span class="line">144</span><br><span class="line">145</span><br><span class="line">146</span><br><span class="line">147</span><br><span class="line">148</span><br><span class="line">149</span><br><span class="line">150</span><br><span class="line">151</span><br><span class="line">152</span><br><span class="line">153</span><br><span class="line">154</span><br><span class="line">155</span><br><span class="line">156</span><br><span class="line">157</span><br><span class="line">158</span><br><span class="line">159</span><br><span class="line">160</span><br><span class="line">161</span><br><span class="line">162</span><br><span class="line">163</span><br><span class="line">164</span><br><span class="line">165</span><br><span class="line">166</span><br><span class="line">167</span><br><span class="line">168</span><br><span class="line">169</span><br><span class="line">170</span><br><span class="line">171</span><br><span class="line">172</span><br><span class="line">173</span><br><span class="line">174</span><br><span class="line">175</span><br><span class="line">176</span><br><span class="line">177</span><br><span class="line">178</span><br><span class="line">179</span><br><span class="line">180</span><br><span class="line">181</span><br><span class="line">182</span><br><span class="line">183</span><br><span class="line">184</span><br><span class="line">185</span><br><span class="line">186</span><br><span class="line">187</span><br><span class="line">188</span><br><span class="line">189</span><br><span class="line">190</span><br><span class="line">191</span><br><span class="line">192</span><br><span class="line">193</span><br><span class="line">194</span><br><span class="line">195</span><br><span class="line">196</span><br><span class="line">197</span><br><span class="line">198</span><br><span class="line">199</span><br><span class="line">200</span><br><span class="line">201</span><br><span class="line">202</span><br><span class="line">203</span><br><span class="line">204</span><br><span class="line">205</span><br><span class="line">206</span><br><span class="line">207</span><br><span class="line">208</span><br><span class="line">209</span><br><span class="line">210</span><br><span class="line">211</span><br><span class="line">212</span><br><span class="line">213</span><br><span class="line">214</span><br><span class="line">215</span><br><span class="line">216</span><br><span class="line">217</span><br><span class="line">218</span><br><span class="line">219</span><br><span class="line">220</span><br><span class="line">221</span><br><span class="line">222</span><br><span class="line">223</span><br><span class="line">224</span><br><span class="line">225</span><br><span class="line">226</span><br><span class="line">227</span><br><span class="line">228</span><br><span class="line">229</span><br><span class="line">230</span><br><span class="line">231</span><br><span class="line">232</span><br><span class="line">233</span><br><span class="line">234</span><br><span class="line">235</span><br><span class="line">236</span><br><span class="line">237</span><br><span class="line">238</span><br><span class="line">239</span><br><span class="line">240</span><br><span class="line">241</span><br><span class="line">242</span><br><span class="line">243</span><br><span class="line">244</span><br><span class="line">245</span><br><span class="line">246</span><br><span class="line">247</span><br><span class="line">248</span><br><span class="line">249</span><br><span class="line">250</span><br><span class="line">251</span><br><span class="line">252</span><br><span class="line">253</span><br><span class="line">254</span><br><span class="line">255</span><br><span class="line">256</span><br><span class="line">257</span><br><span class="line">258</span><br><span class="line">259</span><br><span class="line">260</span><br><span class="line">261</span><br><span class="line">262</span><br><span class="line">263</span><br><span class="line">264</span><br><span class="line">265</span><br><span class="line">266</span><br><span class="line">267</span><br><span class="line">268</span><br><span class="line">269</span><br><span class="line">270</span><br><span class="line">271</span><br><span class="line">272</span><br><span class="line">273</span><br><span class="line">274</span><br><span class="line">275</span><br><span class="line">276</span><br><span class="line">277</span><br><span class="line">278</span><br><span class="line">279</span><br><span class="line">280</span><br><span class="line">281</span><br><span class="line">282</span><br><span class="line">283</span><br><span class="line">284</span><br><span class="line">285</span><br><span class="line">286</span><br><span class="line">287</span><br><span class="line">288</span><br><span class="line">289</span><br><span class="line">290</span><br><span class="line">291</span><br><span class="line">292</span><br><span class="line">293</span><br><span class="line">294</span><br><span class="line">295</span><br><span class="line">296</span><br><span class="line">297</span><br><span class="line">298</span><br><span class="line">299</span><br><span class="line">300</span><br><span class="line">301</span><br><span class="line">302</span><br><span class="line">303</span><br><span class="line">304</span><br><span class="line">305</span><br><span class="line">306</span><br><span class="line">307</span><br><span class="line">308</span><br><span class="line">309</span><br><span class="line">310</span><br><span class="line">311</span><br><span class="line">312</span><br><span class="line">313</span><br><span class="line">314</span><br><span class="line">315</span><br><span class="line">316</span><br><span class="line">317</span><br><span class="line">318</span><br><span class="line">319</span><br><span class="line">320</span><br><span class="line">321</span><br><span class="line">322</span><br><span class="line">323</span><br><span class="line">324</span><br><span class="line">325</span><br><span class="line">326</span><br><span class="line">327</span><br><span class="line">328</span><br><span class="line">329</span><br><span class="line">330</span><br><span class="line">331</span><br></pre></td><td class="code"><pre><span class="line">/*! normalize.css v8.0.0 | MIT License | github.com/necolas/normalize.css */</span><br><span class="line">/* Document</span><br><span class="line">   ========================================================================== */</span><br><span class="line">/**</span><br><span class="line"> * 1. Correct the line height in all browsers.</span><br><span class="line"> * 2. Prevent adjustments of font size after orientation changes in iOS.</span><br><span class="line"> */</span><br><span class="line">html &#123;</span><br><span class="line">    line-height: 1.15;</span><br><span class="line">    /* 1 */</span><br><span class="line">    -webkit-text-size-adjust: 100%;</span><br><span class="line">    /* 2 */</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line">/* Sections</span><br><span class="line">   ========================================================================== */</span><br><span class="line">/**</span><br><span class="line"> * Remove the margin in all browsers.</span><br><span class="line"> */</span><br><span class="line">body &#123;</span><br><span class="line">    margin: 0;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line">/**</span><br><span class="line"> * Correct the font size and margin on `h1` elements within `section` and</span><br><span class="line"> * `article` contexts in Chrome, Firefox, and Safari.</span><br><span class="line"> */</span><br><span class="line">h1 &#123;</span><br><span class="line">    font-size: 2em;</span><br><span class="line">    margin: 0.67em 0;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line">/* Grouping content</span><br><span class="line">   ========================================================================== */</span><br><span class="line">/**</span><br><span class="line"> * 1. Add the correct box sizing in Firefox.</span><br><span class="line"> * 2. Show the overflow in Edge and IE.</span><br><span class="line"> */</span><br><span class="line">hr &#123;</span><br><span class="line">    box-sizing: content-box;</span><br><span class="line">    /* 1 */</span><br><span class="line">    height: 0;</span><br><span class="line">    /* 1 */</span><br><span class="line">    overflow: visible;</span><br><span class="line">    /* 2 */</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line">/**</span><br><span class="line"> * 1. Correct the inheritance and scaling of font size in all browsers.</span><br><span class="line"> * 2. Correct the odd `em` font sizing in all browsers.</span><br><span class="line"> */</span><br><span class="line">pre &#123;</span><br><span class="line">    font-family: monospace, monospace;</span><br><span class="line">    /* 1 */</span><br><span class="line">    font-size: 1em;</span><br><span class="line">    /* 2 */</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line">/* Text-level semantics</span><br><span class="line">   ========================================================================== */</span><br><span class="line">/**</span><br><span class="line"> * Remove the gray background on active links in IE 10.</span><br><span class="line"> */</span><br><span class="line">a &#123;</span><br><span class="line">    background-color: transparent;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line">/**</span><br><span class="line"> * 1. Remove the bottom border in Chrome 57-</span><br><span class="line"> * 2. Add the correct text decoration in Chrome, Edge, IE, Opera, and Safari.</span><br><span class="line"> */</span><br><span class="line">abbr[title] &#123;</span><br><span class="line">    border-bottom: none;</span><br><span class="line">    /* 1 */</span><br><span class="line">    text-decoration: underline;</span><br><span class="line">    /* 2 */</span><br><span class="line">    text-decoration: underline dotted;</span><br><span class="line">    /* 2 */</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line">/**</span><br><span class="line"> * Add the correct font weight in Chrome, Edge, and Safari.</span><br><span class="line"> */</span><br><span class="line">b,</span><br><span class="line">strong &#123;</span><br><span class="line">    font-weight: bolder;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line">/**</span><br><span class="line"> * 1. Correct the inheritance and scaling of font size in all browsers.</span><br><span class="line"> * 2. Correct the odd `em` font sizing in all browsers.</span><br><span class="line"> */</span><br><span class="line">code,</span><br><span class="line">kbd,</span><br><span class="line">samp &#123;</span><br><span class="line">    font-family: monospace, monospace;</span><br><span class="line">    /* 1 */</span><br><span class="line">    font-size: 1em;</span><br><span class="line">    /* 2 */</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line">/**</span><br><span class="line"> * Add the correct font size in all browsers.</span><br><span class="line"> */</span><br><span class="line">small &#123;</span><br><span class="line">    font-size: 80%;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line">/**</span><br><span class="line"> * Prevent `sub` and `sup` elements from affecting the line height in</span><br><span class="line"> * all browsers.</span><br><span class="line"> */</span><br><span class="line">sub,</span><br><span class="line">sup &#123;</span><br><span class="line">    font-size: 75%;</span><br><span class="line">    line-height: 0;</span><br><span class="line">    position: relative;</span><br><span class="line">    vertical-align: baseline;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line">sub &#123;</span><br><span class="line">    bottom: -0.25em;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line">sup &#123;</span><br><span class="line">    top: -0.5em;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line">/* Embedded content</span><br><span class="line">   ========================================================================== */</span><br><span class="line">/**</span><br><span class="line"> * Remove the border on images inside links in IE 10.</span><br><span class="line"> */</span><br><span class="line">img &#123;</span><br><span class="line">    border-style: none;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line">/* Forms</span><br><span class="line">   ========================================================================== */</span><br><span class="line">/**</span><br><span class="line"> * 1. Change the font styles in all browsers.</span><br><span class="line"> * 2. Remove the margin in Firefox and Safari.</span><br><span class="line"> */</span><br><span class="line">button,</span><br><span class="line">input,</span><br><span class="line">optgroup,</span><br><span class="line">select,</span><br><span class="line">textarea &#123;</span><br><span class="line">    font-family: inherit;</span><br><span class="line">    /* 1 */</span><br><span class="line">    font-size: 100%;</span><br><span class="line">    /* 1 */</span><br><span class="line">    line-height: 1.15;</span><br><span class="line">    /* 1 */</span><br><span class="line">    margin: 0;</span><br><span class="line">    /* 2 */</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line">/**</span><br><span class="line"> * Show the overflow in IE.</span><br><span class="line"> * 1. Show the overflow in Edge.</span><br><span class="line"> */</span><br><span class="line">button,</span><br><span class="line">input &#123;</span><br><span class="line">    /* 1 */</span><br><span class="line">    overflow: visible;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line">/**</span><br><span class="line"> * Remove the inheritance of text transform in Edge, Firefox, and IE.</span><br><span class="line"> * 1. Remove the inheritance of text transform in Firefox.</span><br><span class="line"> */</span><br><span class="line">button,</span><br><span class="line">select &#123;</span><br><span class="line">    /* 1 */</span><br><span class="line">    text-transform: none;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line">/**</span><br><span class="line"> * Correct the inability to style clickable types in iOS and Safari.</span><br><span class="line"> */</span><br><span class="line">button,</span><br><span class="line">[type=&quot;button&quot;],</span><br><span class="line">[type=&quot;reset&quot;],</span><br><span class="line">[type=&quot;submit&quot;] &#123;</span><br><span class="line">    -webkit-appearance: button;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line">/**</span><br><span class="line"> * Remove the inner border and padding in Firefox.</span><br><span class="line"> */</span><br><span class="line">button::-moz-focus-inner,</span><br><span class="line">[type=&quot;button&quot;]::-moz-focus-inner,</span><br><span class="line">[type=&quot;reset&quot;]::-moz-focus-inner,</span><br><span class="line">[type=&quot;submit&quot;]::-moz-focus-inner &#123;</span><br><span class="line">    border-style: none;</span><br><span class="line">    padding: 0;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line">/**</span><br><span class="line"> * Restore the focus styles unset by the previous rule.</span><br><span class="line"> */</span><br><span class="line">button:-moz-focusring,</span><br><span class="line">[type=&quot;button&quot;]:-moz-focusring,</span><br><span class="line">[type=&quot;reset&quot;]:-moz-focusring,</span><br><span class="line">[type=&quot;submit&quot;]:-moz-focusring &#123;</span><br><span class="line">    outline: 1px dotted ButtonText;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line">/**</span><br><span class="line"> * Correct the padding in Firefox.</span><br><span class="line"> */</span><br><span class="line">fieldset &#123;</span><br><span class="line">    padding: 0.35em 0.75em 0.625em;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line">/**</span><br><span class="line"> * 1. Correct the text wrapping in Edge and IE.</span><br><span class="line"> * 2. Correct the color inheritance from `fieldset` elements in IE.</span><br><span class="line"> * 3. Remove the padding so developers are not caught out when they zero out</span><br><span class="line"> *    `fieldset` elements in all browsers.</span><br><span class="line"> */</span><br><span class="line">legend &#123;</span><br><span class="line">    box-sizing: border-box;</span><br><span class="line">    /* 1 */</span><br><span class="line">    color: inherit;</span><br><span class="line">    /* 2 */</span><br><span class="line">    display: table;</span><br><span class="line">    /* 1 */</span><br><span class="line">    max-width: 100%;</span><br><span class="line">    /* 1 */</span><br><span class="line">    padding: 0;</span><br><span class="line">    /* 3 */</span><br><span class="line">    white-space: normal;</span><br><span class="line">    /* 1 */</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line">/**</span><br><span class="line"> * Add the correct vertical alignment in Chrome, Firefox, and Opera.</span><br><span class="line"> */</span><br><span class="line">progress &#123;</span><br><span class="line">    vertical-align: baseline;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line">/**</span><br><span class="line"> * Remove the default vertical scrollbar in IE 10+.</span><br><span class="line"> */</span><br><span class="line">textarea &#123;</span><br><span class="line">    overflow: auto;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line">/**</span><br><span class="line"> * 1. Add the correct box sizing in IE 10.</span><br><span class="line"> * 2. Remove the padding in IE 10.</span><br><span class="line"> */</span><br><span class="line">[type=&quot;checkbox&quot;],</span><br><span class="line">[type=&quot;radio&quot;] &#123;</span><br><span class="line">    box-sizing: border-box;</span><br><span class="line">    /* 1 */</span><br><span class="line">    padding: 0;</span><br><span class="line">    /* 2 */</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line">/**</span><br><span class="line"> * Correct the cursor style of increment and decrement buttons in Chrome.</span><br><span class="line"> */</span><br><span class="line">[type=&quot;number&quot;]::-webkit-inner-spin-button,</span><br><span class="line">[type=&quot;number&quot;]::-webkit-outer-spin-button &#123;</span><br><span class="line">    height: auto;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line">/**</span><br><span class="line"> * 1. Correct the odd appearance in Chrome and Safari.</span><br><span class="line"> * 2. Correct the outline style in Safari.</span><br><span class="line"> */</span><br><span class="line">[type=&quot;search&quot;] &#123;</span><br><span class="line">    -webkit-appearance: textfield;</span><br><span class="line">    /* 1 */</span><br><span class="line">    outline-offset: -2px;</span><br><span class="line">    /* 2 */</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line">/**</span><br><span class="line"> * Remove the inner padding in Chrome and Safari on macOS.</span><br><span class="line"> */</span><br><span class="line">[type=&quot;search&quot;]::-webkit-search-decoration &#123;</span><br><span class="line">    -webkit-appearance: none;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line">/**</span><br><span class="line"> * 1. Correct the inability to style clickable types in iOS and Safari.</span><br><span class="line"> * 2. Change font properties to `inherit` in Safari.</span><br><span class="line"> */</span><br><span class="line">::-webkit-file-upload-button &#123;</span><br><span class="line">    -webkit-appearance: button;</span><br><span class="line">    /* 1 */</span><br><span class="line">    font: inherit;</span><br><span class="line">    /* 2 */</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line">/* Interactive</span><br><span class="line">   ========================================================================== */</span><br><span class="line">/*</span><br><span class="line"> * Add the correct display in Edge, IE 10+, and Firefox.</span><br><span class="line"> */</span><br><span class="line">details &#123;</span><br><span class="line">    display: block;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line">/*</span><br><span class="line"> * Add the correct display in all browsers.</span><br><span class="line"> */</span><br><span class="line">summary &#123;</span><br><span class="line">    display: list-item;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line">/* Misc</span><br><span class="line">   ========================================================================== */</span><br><span class="line">/**</span><br><span class="line"> * Add the correct display in IE 10+.</span><br><span class="line"> */</span><br><span class="line">template &#123;</span><br><span class="line">    display: none;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line">/**</span><br><span class="line"> * Add the correct display in IE 10.</span><br><span class="line"> */</span><br><span class="line">[hidden] &#123;</span><br><span class="line">    display: none;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>]]></content>
      
      
      <categories>
          
          <category> JavaScript </category>
          
      </categories>
      
      
        <tags>
            
            <tag> js笔记/案例 </tag>
            
        </tags>
      
    </entry>
    
    <entry>
      <title>放大镜</title>
      <link href="/2018/09/05/2018-09-05(2)/"/>
      <url>/2018/09/05/2018-09-05(2)/</url>
      
        <content type="html"><![CDATA[<link rel="stylesheet" class="aplayer-secondary-style-marker" href="/assets/css/APlayer.min.css"><script src="/assets/js/APlayer.min.js" class="aplayer-secondary-script-marker"></script><h1 id="重点"><a href="#重点" class="headerlink" title="重点"></a>重点</h1><p>1.鼠标事件<br>2.offset系列，client系列<br>3.数据</p><h2 id="效果"><a href="#效果" class="headerlink" title="效果"></a>效果</h2><p><img src="/fdjal/fa1.png"><br><img src="/fdjal/fa2.png"></p><h2 id="素材"><a href="#素材" class="headerlink" title="素材"></a>素材</h2><p><img src="/fdjal/small.png"><br><img src="/fdjal/big.jpg"></p><h2 id="案例代码"><a href="#案例代码" class="headerlink" title="案例代码"></a>案例代码</h2><h3 id="Css"><a href="#Css" class="headerlink" title="Css"></a>Css</h3><figure class="highlight css"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br></pre></td><td class="code"><pre><span class="line">*&#123;</span><br><span class="line">    <span class="attribute">padding</span>: <span class="number">0</span>;</span><br><span class="line">    <span class="attribute">margin</span>: <span class="number">0</span>;</span><br><span class="line">&#125;</span><br><span class="line"><span class="comment">/* 框架 */</span></span><br><span class="line"><span class="selector-class">.wrap</span> &#123;</span><br><span class="line">    <span class="attribute">position</span>: relative;</span><br><span class="line">    <span class="attribute">margin</span>: <span class="number">100px</span>;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="comment">/* 小图框 */</span></span><br><span class="line"><span class="selector-class">.min</span> &#123;</span><br><span class="line">    <span class="attribute">position</span>: relative;</span><br><span class="line">    <span class="attribute">width</span>: <span class="number">350px</span>;</span><br><span class="line">&#125;</span><br><span class="line"><span class="comment">/* 小图图片 */</span></span><br><span class="line"><span class="selector-class">.min</span> <span class="selector-tag">img</span> &#123;</span><br><span class="line">    <span class="attribute">width</span>: <span class="number">100%</span>;</span><br><span class="line">&#125;</span><br><span class="line"><span class="comment">/* 遮罩 */</span></span><br><span class="line"><span class="selector-class">.min_wrap</span> &#123;</span><br><span class="line">    <span class="attribute">width</span>: <span class="number">175px</span>;</span><br><span class="line">    <span class="attribute">height</span>: <span class="number">175px</span>;</span><br><span class="line">    <span class="attribute">position</span>: absolute;</span><br><span class="line">    <span class="attribute">top</span>: <span class="number">0</span>;</span><br><span class="line">    <span class="attribute">left</span>: <span class="number">0</span>;</span><br><span class="line">    <span class="attribute">cursor</span>: move;</span><br><span class="line">    <span class="attribute">background-color</span>: <span class="built_in">rgba</span>(255,255,0,.4);</span><br><span class="line">    <span class="attribute">display</span>: none;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="comment">/* 大图框 */</span></span><br><span class="line"><span class="selector-class">.max_wrap</span> &#123;</span><br><span class="line">    <span class="attribute">border</span>: <span class="number">1px</span> solid <span class="number">#000</span>;</span><br><span class="line">    <span class="attribute">position</span>: absolute;</span><br><span class="line">    <span class="attribute">top</span>: <span class="number">1px</span>;</span><br><span class="line">    <span class="attribute">left</span>: <span class="number">370px</span>;</span><br><span class="line">    <span class="attribute">width</span>: <span class="number">400px</span>;</span><br><span class="line">    <span class="attribute">height</span>: <span class="number">400px</span>;</span><br><span class="line">    <span class="attribute">overflow</span>: hidden;</span><br><span class="line">    <span class="attribute">display</span>: none;</span><br><span class="line">&#125;</span><br><span class="line"><span class="selector-class">.max_wrap</span> <span class="selector-tag">img</span> &#123;</span><br><span class="line">    <span class="attribute">position</span>: absolute;</span><br><span class="line">    <span class="attribute">width</span>: <span class="number">800px</span>;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h3 id="Html"><a href="#Html" class="headerlink" title="Html"></a>Html</h3><figure class="highlight html"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br></pre></td><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">div</span> <span class="attr">class</span>=<span class="string">"wrap"</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">div</span> <span class="attr">class</span>=<span class="string">"min"</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">img</span> <span class="attr">src</span>=<span class="string">"images/small.png"</span> <span class="attr">alt</span>=<span class="string">""</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">div</span> <span class="attr">class</span>=<span class="string">"min_wrap"</span>&gt;</span></span><br><span class="line"></span><br><span class="line">        <span class="tag">&lt;/<span class="name">div</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;/<span class="name">div</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">div</span> <span class="attr">class</span>=<span class="string">"max_wrap"</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">img</span> <span class="attr">src</span>=<span class="string">"images/big.jpg"</span> <span class="attr">alt</span>=<span class="string">""</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;/<span class="name">div</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">div</span>&gt;</span></span><br></pre></td></tr></table></figure><h3 id="Js"><a href="#Js" class="headerlink" title="Js"></a>Js</h3><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br></pre></td><td class="code"><pre><span class="line"><span class="built_in">window</span>.onload = <span class="function"><span class="params">()</span> =&gt;</span> &#123;</span><br><span class="line">    <span class="keyword">let</span> wrap = <span class="built_in">document</span>.querySelector(<span class="string">".wrap"</span>);</span><br><span class="line">    <span class="keyword">let</span> min = <span class="built_in">document</span>.querySelector(<span class="string">".min"</span>);</span><br><span class="line">    <span class="keyword">let</span> min_img = <span class="built_in">document</span>.querySelector(<span class="string">".min img"</span>);</span><br><span class="line">    <span class="keyword">let</span> min_wrap = <span class="built_in">document</span>.querySelector(<span class="string">".min_wrap"</span>);</span><br><span class="line">    <span class="keyword">let</span> max_img = <span class="built_in">document</span>.querySelector(<span class="string">".max_wrap img"</span>);</span><br><span class="line">    <span class="keyword">let</span> max_wrap = <span class="built_in">document</span>.querySelector(<span class="string">".max_wrap"</span>);</span><br><span class="line"></span><br><span class="line">    <span class="comment">// 鼠标进入框架显示遮罩和大图</span></span><br><span class="line">    min.onmouseenter = <span class="function"><span class="params">()</span> =&gt;</span> &#123;</span><br><span class="line">        min_wrap.style.display = <span class="string">"block"</span>;</span><br><span class="line">        max_wrap.style.display = <span class="string">"block"</span>;</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="comment">// 鼠标离开框架隐藏遮罩和大图</span></span><br><span class="line">    min.onmouseleave = <span class="function"><span class="params">()</span> =&gt;</span> &#123;</span><br><span class="line">        min_wrap.style.display = <span class="string">"none"</span>;</span><br><span class="line">        max_wrap.style.display = <span class="string">"none"</span>;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="comment">// 鼠标移动事件</span></span><br><span class="line">    wrap.onmousemove = <span class="function"><span class="params">e</span> =&gt;</span> &#123;</span><br><span class="line">        <span class="comment">// 兼容写法</span></span><br><span class="line">        <span class="keyword">var</span> e = e || <span class="built_in">window</span>.event;</span><br><span class="line">        <span class="comment">// 获取鼠标的移动位置</span></span><br><span class="line">        <span class="keyword">let</span> x = e.clientX - wrap.offsetLeft - min_wrap.offsetWidth / <span class="number">2</span>;</span><br><span class="line">        <span class="keyword">let</span> y = e.clientY - wrap.offsetTop - min_wrap.offsetHeight / <span class="number">2</span>;</span><br><span class="line"></span><br><span class="line">        <span class="comment">// 判断不要超出框架</span></span><br><span class="line">        <span class="keyword">if</span> (x &lt; <span class="number">0</span>) &#123;</span><br><span class="line">            x = <span class="number">0</span>;</span><br><span class="line">        &#125; <span class="keyword">else</span> <span class="keyword">if</span> (x &gt; min_img.offsetWidth - min_wrap.offsetWidth) &#123;</span><br><span class="line">            x = min_img.offsetWidth - min_wrap.offsetWidth;</span><br><span class="line">        &#125;</span><br><span class="line"></span><br><span class="line">        <span class="keyword">if</span> (y &lt; <span class="number">0</span>) &#123;</span><br><span class="line">            y = <span class="number">0</span>;</span><br><span class="line">        &#125; <span class="keyword">else</span> <span class="keyword">if</span> (y &gt; min_img.offsetHeight - min_wrap.offsetHeight) &#123;</span><br><span class="line">            y = min_img.offsetHeight - min_wrap.offsetHeight;</span><br><span class="line">        &#125;</span><br><span class="line"></span><br><span class="line">        <span class="comment">// 设置遮罩移动</span></span><br><span class="line">        min_wrap.style.left = x + <span class="string">"px"</span>;</span><br><span class="line">        min_wrap.style.top = y + <span class="string">"px"</span>;</span><br><span class="line"></span><br><span class="line">        <span class="comment">// 计算比例</span></span><br><span class="line">        <span class="keyword">let</span> bl = (max_img.offsetWidth-max_wrap.offsetWidth) / (min.offsetWidth - min_wrap.offsetWidth);</span><br><span class="line">        </span><br><span class="line">        <span class="comment">// 设置大图移动</span></span><br><span class="line">        max_img.style.left = -x * bl + <span class="string">"px"</span>;</span><br><span class="line">        max_img.style.top = -y * bl + <span class="string">"px"</span>;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>]]></content>
      
      
      <categories>
          
          <category> JavaScript </category>
          
      </categories>
      
      
        <tags>
            
            <tag> js笔记/案例 </tag>
            
        </tags>
      
    </entry>
    
    <entry>
      <title>拖拽对话框案例</title>
      <link href="/2018/09/05/2018-09-05(1)/"/>
      <url>/2018/09/05/2018-09-05(1)/</url>
      
        <content type="html"><![CDATA[<link rel="stylesheet" class="aplayer-secondary-style-marker" href="/assets/css/APlayer.min.css"><script src="/assets/js/APlayer.min.js" class="aplayer-secondary-script-marker"></script><h1 id="重点"><a href="#重点" class="headerlink" title="重点"></a>重点</h1><p>1.点击事件<br>2.样式的改变<br>3.鼠标事件<br>4.client系列运用<br>5.offset系列</p><h2 id="效果图"><a href="#效果图" class="headerlink" title="效果图"></a>效果图</h2><p><img src="/tzjhk/tz1.png"><br><img src="/tzjhk/tz2.png"><br><img src="/tzjhk/tz3.png"></p><h2 id="案例代码"><a href="#案例代码" class="headerlink" title="案例代码"></a>案例代码</h2><h2 id="Css"><a href="#Css" class="headerlink" title="Css"></a>Css</h2><figure class="highlight css"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br><span class="line">64</span><br><span class="line">65</span><br><span class="line">66</span><br><span class="line">67</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">/* 点击字 */</span></span><br><span class="line"><span class="selector-class">.top</span> &#123;</span><br><span class="line">    <span class="attribute">text-align</span>: center;</span><br><span class="line">    <span class="attribute">font-size</span>: <span class="number">34px</span>;</span><br><span class="line">    <span class="attribute">cursor</span>: pointer</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="comment">/* 背景遮罩层 */</span></span><br><span class="line"><span class="selector-class">.bg</span> &#123;</span><br><span class="line">    <span class="attribute">width</span>: <span class="number">100%</span>;</span><br><span class="line">    <span class="attribute">height</span>: <span class="number">100%</span>;</span><br><span class="line">    <span class="attribute">position</span>: fixed;</span><br><span class="line">    <span class="attribute">top</span>: <span class="number">0px</span>;</span><br><span class="line">    <span class="attribute">left</span>: <span class="number">0px</span>;</span><br><span class="line">    <span class="attribute">background</span>: <span class="number">#000</span>;</span><br><span class="line">    <span class="attribute">filter</span>: <span class="built_in">alpha</span>(opacity=30);</span><br><span class="line">    <span class="attribute">-moz-opacity</span>: <span class="number">0.3</span>;</span><br><span class="line">    <span class="attribute">-khtml-opacity</span>: <span class="number">0.3</span>;</span><br><span class="line">    <span class="attribute">opacity</span>: <span class="number">0.3</span>;</span><br><span class="line">    <span class="attribute">display</span>: none;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="comment">/* 登录框 */</span></span><br><span class="line"><span class="selector-class">.dl</span> &#123;</span><br><span class="line">    <span class="attribute">width</span>: <span class="number">500px</span>;</span><br><span class="line">    <span class="attribute">height</span>: <span class="number">250px</span>;</span><br><span class="line">    <span class="attribute">background-color</span>: <span class="number">#fff</span>;</span><br><span class="line">    <span class="attribute">position</span>: fixed;</span><br><span class="line">    <span class="attribute">top</span>: <span class="number">200px</span>;</span><br><span class="line">    <span class="attribute">left</span>: <span class="number">50%</span>;</span><br><span class="line">    <span class="attribute">transform</span>: <span class="built_in">translateX</span>(-50%);</span><br><span class="line">    <span class="attribute">display</span>: none;</span><br><span class="line">    <span class="attribute">z-index</span>: <span class="number">999</span>;</span><br><span class="line">    <span class="attribute">text-align</span>: center;</span><br><span class="line">    <span class="attribute">position</span>: relative;</span><br><span class="line">    <span class="attribute">padding</span>: <span class="number">10px</span>;</span><br><span class="line">&#125;</span><br><span class="line"><span class="selector-class">.gb</span> &#123;</span><br><span class="line">    <span class="attribute">width</span>: <span class="number">35px</span>;</span><br><span class="line">    <span class="attribute">line-height</span>: <span class="number">35px</span>;</span><br><span class="line">    <span class="attribute">border-radius</span>: <span class="number">50%</span>;</span><br><span class="line">    <span class="attribute">border</span>: <span class="number">1px</span> solid <span class="number">#ccc</span>;</span><br><span class="line">    <span class="attribute">background-color</span>: <span class="number">#fff</span>;</span><br><span class="line">    <span class="attribute">position</span>: absolute;</span><br><span class="line">    <span class="attribute">top</span>: -<span class="number">10px</span>;</span><br><span class="line">    <span class="attribute">right</span>: -<span class="number">10px</span>;</span><br><span class="line">    <span class="attribute">cursor</span>: pointer;</span><br><span class="line">&#125;</span><br><span class="line"><span class="selector-tag">h3</span> &#123;</span><br><span class="line">    <span class="attribute">cursor</span>: move;</span><br><span class="line">    <span class="attribute">font-weight</span>: normal;</span><br><span class="line">&#125;</span><br><span class="line"><span class="selector-class">.yh</span> <span class="selector-tag">input</span> &#123;</span><br><span class="line">    <span class="attribute">display</span>: inline-block;</span><br><span class="line">    <span class="attribute">width</span>: <span class="number">350px</span>;</span><br><span class="line">    <span class="attribute">height</span>: <span class="number">35px</span>;</span><br><span class="line">    <span class="attribute">margin</span>: <span class="number">10px</span> <span class="number">0</span>;</span><br><span class="line">&#125;</span><br><span class="line"><span class="selector-class">.yh</span> <span class="selector-class">.txt</span> &#123;</span><br><span class="line">    <span class="attribute">margin-right</span>: <span class="number">15px</span>;</span><br><span class="line">&#125;</span><br><span class="line"><span class="selector-class">.hy</span>&#123;</span><br><span class="line">    <span class="attribute">width</span>: <span class="number">200px</span>;</span><br><span class="line">    <span class="attribute">line-height</span>: <span class="number">35px</span>;</span><br><span class="line">    <span class="attribute">border</span>: <span class="number">1px</span> solid <span class="number">#ccc</span>;</span><br><span class="line">    <span class="attribute">margin</span>: <span class="number">10px</span> auto;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h2 id="Html"><a href="#Html" class="headerlink" title="Html"></a>Html</h2><figure class="highlight html"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br></pre></td><td class="code"><pre><span class="line">    <span class="tag">&lt;<span class="name">div</span> <span class="attr">class</span>=<span class="string">"wrap"</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">div</span> <span class="attr">class</span>=<span class="string">"top"</span>&gt;</span></span><br><span class="line">            点击，弹出登陆框!</span><br><span class="line">        <span class="tag">&lt;/<span class="name">div</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;/<span class="name">div</span>&gt;</span></span><br><span class="line"></span><br><span class="line">    <span class="comment">&lt;!-- 登陆框 --&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">div</span> <span class="attr">class</span>=<span class="string">"dl"</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">div</span> <span class="attr">class</span>=<span class="string">"gb"</span>&gt;</span></span><br><span class="line">            关闭</span><br><span class="line">        <span class="tag">&lt;/<span class="name">div</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">h3</span>&gt;</span>会员登陆<span class="tag">&lt;/<span class="name">h3</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">div</span> <span class="attr">class</span>=<span class="string">"yh"</span>&gt;</span></span><br><span class="line">用户名：<span class="tag">&lt;<span class="name">input</span> <span class="attr">type</span>=<span class="string">"text"</span> <span class="attr">placeholder</span>=<span class="string">"请输入用户名"</span>&gt;</span><span class="tag">&lt;<span class="name">br</span>&gt;</span></span><br><span class="line">登陆密码：<span class="tag">&lt;<span class="name">input</span> <span class="attr">type</span>=<span class="string">"text"</span> <span class="attr">placeholder</span>=<span class="string">"请输入登陆密码"</span> <span class="attr">class</span>=<span class="string">"txt"</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;/<span class="name">div</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">div</span> <span class="attr">class</span>=<span class="string">"hy"</span>&gt;</span></span><br><span class="line">            登陆会员</span><br><span class="line">        <span class="tag">&lt;/<span class="name">div</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;/<span class="name">div</span>&gt;</span></span><br><span class="line"></span><br><span class="line">    <span class="comment">&lt;!-- 遮罩层 --&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">div</span> <span class="attr">class</span>=<span class="string">"bg"</span>&gt;</span></span><br><span class="line"></span><br><span class="line">    <span class="tag">&lt;/<span class="name">div</span>&gt;</span></span><br></pre></td></tr></table></figure><h2 id="Js"><a href="#Js" class="headerlink" title="Js"></a>Js</h2><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br></pre></td><td class="code"><pre><span class="line"><span class="built_in">window</span>.onload = <span class="function"><span class="params">()</span> =&gt;</span> &#123;</span><br><span class="line">  <span class="keyword">let</span> dj = <span class="built_in">document</span>.querySelector(<span class="string">".top"</span>);</span><br><span class="line">  <span class="keyword">let</span> bg = <span class="built_in">document</span>.querySelector(<span class="string">".bg"</span>);</span><br><span class="line">  <span class="keyword">let</span> dl = <span class="built_in">document</span>.querySelector(<span class="string">".dl"</span>);</span><br><span class="line">  <span class="keyword">let</span> gb = <span class="built_in">document</span>.querySelector(<span class="string">".gb"</span>);</span><br><span class="line">  <span class="keyword">let</span> h = <span class="built_in">document</span>.querySelector(<span class="string">"h3"</span>);</span><br><span class="line"></span><br><span class="line">  dj.onclick = <span class="function"><span class="params">e</span> =&gt;</span> &#123;</span><br><span class="line">    bg.style.display = <span class="string">"block"</span>;</span><br><span class="line">    dl.style.display = <span class="string">"block"</span>;</span><br><span class="line">    <span class="comment">// window.event.cancelBubble = true;</span></span><br><span class="line">    e.stopPropagation();</span><br><span class="line">  &#125;;</span><br><span class="line"></span><br><span class="line"><span class="comment">//   document.onclick = () =&gt; &#123;</span></span><br><span class="line"><span class="comment">//     bg.style.display = "none";</span></span><br><span class="line"><span class="comment">//     dl.style.display = "none";</span></span><br><span class="line"><span class="comment">//   &#125;;</span></span><br><span class="line"></span><br><span class="line">  gb.onclick = <span class="function"><span class="params">()</span> =&gt;</span> &#123;</span><br><span class="line">    bg.style.display = <span class="string">"none"</span>;</span><br><span class="line">    dl.style.display = <span class="string">"none"</span>;</span><br><span class="line">  &#125;;</span><br><span class="line"></span><br><span class="line">  h.onmousedown = <span class="function"><span class="params">e</span> =&gt;</span> &#123;</span><br><span class="line">    <span class="comment">//  获取此时可视区域的横坐标</span></span><br><span class="line">    <span class="keyword">let</span> spaceX = e.clientX - dl.offsetLeft;</span><br><span class="line">    <span class="keyword">let</span> spaceY = e.clientY - dl.offsetTop;</span><br><span class="line">    <span class="comment">// 移动事件</span></span><br><span class="line">    <span class="built_in">document</span>.onmousemove = <span class="function"><span class="params">e</span> =&gt;</span> &#123;</span><br><span class="line">      <span class="keyword">let</span> x = e.clientX - spaceX;</span><br><span class="line">      <span class="keyword">let</span> y = e.clientY - spaceY;</span><br><span class="line">      dl.style.left = x + <span class="string">"px"</span>;</span><br><span class="line">      dl.style.top = y + <span class="string">"px"</span>;</span><br><span class="line">    &#125;;</span><br><span class="line">  &#125;;</span><br><span class="line">  </span><br><span class="line">  <span class="built_in">document</span>.onmouseup = <span class="function"><span class="params">()</span> =&gt;</span> &#123;</span><br><span class="line">    <span class="built_in">document</span>.onmousemove = <span class="literal">null</span>;</span><br><span class="line">  &#125;</span><br><span class="line">&#125;;</span><br></pre></td></tr></table></figure>]]></content>
      
      
      <categories>
          
          <category> JavaScript </category>
          
      </categories>
      
      
        <tags>
            
            <tag> js笔记/案例 </tag>
            
        </tags>
      
    </entry>
    
    <entry>
      <title>旋转木马案例</title>
      <link href="/2018/09/04/2018-09-04/"/>
      <url>/2018/09/04/2018-09-04/</url>
      
        <content type="html"><![CDATA[<link rel="stylesheet" class="aplayer-secondary-style-marker" href="/assets/css/APlayer.min.css"><script src="/assets/js/APlayer.min.js" class="aplayer-secondary-script-marker"></script><h1 id="重点难点"><a href="#重点难点" class="headerlink" title="重点难点"></a>重点难点</h1><p>1.数组的运用<br>2.事件的添加<br>3.逻辑关系</p><h3 id="效果图"><a href="#效果图" class="headerlink" title="效果图"></a>效果图</h3><p><img src="/xzmm/xz1.png"><br><img src="/xzmm/xz2.png"><br><img src="/xzmm/xz3.png"></p><h2 id="代码"><a href="#代码" class="headerlink" title="代码"></a>代码</h2><h3 id="Css"><a href="#Css" class="headerlink" title="Css"></a>Css</h3><figure class="highlight css"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br></pre></td><td class="code"><pre><span class="line">@<span class="keyword">charset</span> <span class="string">"UTF-8"</span>;</span><br><span class="line"><span class="comment">/*初始化  reset*/</span></span><br><span class="line"><span class="selector-tag">blockquote</span>,<span class="selector-tag">body</span>,<span class="selector-tag">button</span>,<span class="selector-tag">dd</span>,<span class="selector-tag">dl</span>,<span class="selector-tag">dt</span>,<span class="selector-tag">fieldset</span>,<span class="selector-tag">form</span>,<span class="selector-tag">h1</span>,<span class="selector-tag">h2</span>,<span class="selector-tag">h3</span>,<span class="selector-tag">h4</span>,<span class="selector-tag">h5</span>,<span class="selector-tag">h6</span>,<span class="selector-tag">hr</span>,<span class="selector-tag">input</span>,<span class="selector-tag">legend</span>,<span class="selector-tag">li</span>,<span class="selector-tag">ol</span>,<span class="selector-tag">p</span>,<span class="selector-tag">pre</span>,<span class="selector-tag">td</span>,<span class="selector-tag">textarea</span>,<span class="selector-tag">th</span>,<span class="selector-tag">ul</span>&#123;<span class="attribute">margin</span>:<span class="number">0</span>;<span class="attribute">padding</span>:<span class="number">0</span>&#125;</span><br><span class="line"><span class="selector-tag">body</span>,<span class="selector-tag">button</span>,<span class="selector-tag">input</span>,<span class="selector-tag">select</span>,<span class="selector-tag">textarea</span>&#123;<span class="attribute">font</span>:<span class="number">12px</span>/<span class="number">1.5</span> <span class="string">"Microsoft YaHei"</span>, <span class="string">"微软雅黑"</span>, SimSun, <span class="string">"宋体"</span>, sans-serif;<span class="attribute">color</span>: <span class="number">#666</span>;&#125;</span><br><span class="line"><span class="selector-tag">ol</span>,<span class="selector-tag">ul</span>&#123;<span class="attribute">list-style</span>:none&#125;</span><br><span class="line"><span class="selector-tag">a</span>&#123;<span class="attribute">text-decoration</span>:none&#125;</span><br><span class="line"><span class="selector-tag">fieldset</span>,<span class="selector-tag">img</span>&#123;<span class="attribute">border</span>:<span class="number">0</span>;<span class="attribute">vertical-align</span>:top;&#125;</span><br><span class="line"><span class="selector-tag">a</span>,<span class="selector-tag">input</span>,<span class="selector-tag">button</span>,<span class="selector-tag">select</span>,<span class="selector-tag">textarea</span>&#123;<span class="attribute">outline</span>:none;&#125;</span><br><span class="line"><span class="selector-tag">a</span>,<span class="selector-tag">button</span>&#123;<span class="attribute">cursor</span>:pointer;&#125;</span><br><span class="line"></span><br><span class="line"><span class="selector-class">.wrap</span>&#123;</span><br><span class="line">    <span class="attribute">width</span>:<span class="number">1200px</span>;</span><br><span class="line">    <span class="attribute">margin</span>:<span class="number">100px</span> auto;</span><br><span class="line">&#125;</span><br><span class="line"><span class="selector-class">.slide</span> &#123;</span><br><span class="line">    <span class="attribute">height</span>:<span class="number">500px</span>;</span><br><span class="line">    <span class="attribute">position</span>: relative;</span><br><span class="line">&#125;</span><br><span class="line"><span class="selector-class">.slide</span> <span class="selector-tag">li</span>&#123;</span><br><span class="line">    <span class="attribute">position</span>: absolute;</span><br><span class="line">    <span class="attribute">left</span>:<span class="number">200px</span>;</span><br><span class="line">    <span class="attribute">top</span>:<span class="number">0</span>;</span><br><span class="line">&#125;</span><br><span class="line"><span class="selector-class">.slide</span> <span class="selector-tag">li</span> <span class="selector-tag">img</span>&#123;</span><br><span class="line">    <span class="attribute">width</span>:<span class="number">100%</span>;</span><br><span class="line">&#125;</span><br><span class="line"><span class="selector-class">.arrow</span>&#123;</span><br><span class="line">    <span class="attribute">opacity</span>: <span class="number">0</span>;</span><br><span class="line">&#125;</span><br><span class="line"><span class="selector-class">.prev</span>,<span class="selector-class">.next</span>&#123;</span><br><span class="line">    <span class="attribute">width</span>:<span class="number">76px</span>;</span><br><span class="line">    <span class="attribute">height</span>:<span class="number">112px</span>;</span><br><span class="line">    <span class="attribute">position</span>: absolute;</span><br><span class="line">    <span class="attribute">top</span>:<span class="number">50%</span>;</span><br><span class="line">    <span class="attribute">margin-top</span>:-<span class="number">56px</span>;</span><br><span class="line">    <span class="attribute">background</span>: <span class="built_in">url</span>(../images/prev.png) no-repeat;</span><br><span class="line">    <span class="attribute">z-index</span>: <span class="number">99</span>;</span><br><span class="line">&#125;</span><br><span class="line"><span class="selector-class">.next</span>&#123;</span><br><span class="line">    <span class="attribute">right</span>:<span class="number">0</span>;</span><br><span class="line">    <span class="attribute">background-image</span>: <span class="built_in">url</span>(../images/next.png);</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h3 id="Html"><a href="#Html" class="headerlink" title="Html"></a>Html</h3><figure class="highlight html"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br></pre></td><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">div</span> <span class="attr">class</span>=<span class="string">"wrap"</span> <span class="attr">id</span>=<span class="string">"wrap"</span>&gt;</span></span><br><span class="line">  <span class="tag">&lt;<span class="name">div</span> <span class="attr">class</span>=<span class="string">"slide"</span> <span class="attr">id</span>=<span class="string">"slide"</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">ul</span>&gt;</span></span><br><span class="line">      <span class="tag">&lt;<span class="name">li</span>&gt;</span><span class="tag">&lt;<span class="name">a</span> <span class="attr">href</span>=<span class="string">"#"</span>&gt;</span><span class="tag">&lt;<span class="name">img</span> <span class="attr">src</span>=<span class="string">"images/slidepic1.jpg"</span> <span class="attr">alt</span>=<span class="string">""</span>/&gt;</span><span class="tag">&lt;/<span class="name">a</span>&gt;</span><span class="tag">&lt;/<span class="name">li</span>&gt;</span></span><br><span class="line">      <span class="tag">&lt;<span class="name">li</span>&gt;</span><span class="tag">&lt;<span class="name">a</span> <span class="attr">href</span>=<span class="string">"#"</span>&gt;</span><span class="tag">&lt;<span class="name">img</span> <span class="attr">src</span>=<span class="string">"images/slidepic2.jpg"</span> <span class="attr">alt</span>=<span class="string">""</span>/&gt;</span><span class="tag">&lt;/<span class="name">a</span>&gt;</span><span class="tag">&lt;/<span class="name">li</span>&gt;</span></span><br><span class="line">      <span class="tag">&lt;<span class="name">li</span>&gt;</span><span class="tag">&lt;<span class="name">a</span> <span class="attr">href</span>=<span class="string">"#"</span>&gt;</span><span class="tag">&lt;<span class="name">img</span> <span class="attr">src</span>=<span class="string">"images/slidepic3.jpg"</span> <span class="attr">alt</span>=<span class="string">""</span>/&gt;</span><span class="tag">&lt;/<span class="name">a</span>&gt;</span><span class="tag">&lt;/<span class="name">li</span>&gt;</span></span><br><span class="line">      <span class="tag">&lt;<span class="name">li</span>&gt;</span><span class="tag">&lt;<span class="name">a</span> <span class="attr">href</span>=<span class="string">"#"</span>&gt;</span><span class="tag">&lt;<span class="name">img</span> <span class="attr">src</span>=<span class="string">"images/slidepic4.jpg"</span> <span class="attr">alt</span>=<span class="string">""</span>/&gt;</span><span class="tag">&lt;/<span class="name">a</span>&gt;</span><span class="tag">&lt;/<span class="name">li</span>&gt;</span></span><br><span class="line">      <span class="tag">&lt;<span class="name">li</span>&gt;</span><span class="tag">&lt;<span class="name">a</span> <span class="attr">href</span>=<span class="string">"#"</span>&gt;</span><span class="tag">&lt;<span class="name">img</span> <span class="attr">src</span>=<span class="string">"images/slidepic5.jpg"</span> <span class="attr">alt</span>=<span class="string">""</span>/&gt;</span><span class="tag">&lt;/<span class="name">a</span>&gt;</span><span class="tag">&lt;/<span class="name">li</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;/<span class="name">ul</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">div</span> <span class="attr">class</span>=<span class="string">"arrow"</span> <span class="attr">id</span>=<span class="string">"arrow"</span>&gt;</span></span><br><span class="line">      <span class="tag">&lt;<span class="name">a</span> <span class="attr">href</span>=<span class="string">"javascript:;"</span> <span class="attr">class</span>=<span class="string">"prev"</span> <span class="attr">id</span>=<span class="string">"arrLeft"</span>&gt;</span><span class="tag">&lt;/<span class="name">a</span>&gt;</span></span><br><span class="line">      <span class="tag">&lt;<span class="name">a</span> <span class="attr">href</span>=<span class="string">"javascript:;"</span> <span class="attr">class</span>=<span class="string">"next"</span> <span class="attr">id</span>=<span class="string">"arrRight"</span>&gt;</span><span class="tag">&lt;/<span class="name">a</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;/<span class="name">div</span>&gt;</span></span><br><span class="line">  <span class="tag">&lt;/<span class="name">div</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">div</span>&gt;</span></span><br></pre></td></tr></table></figure><h3 id="Js"><a href="#Js" class="headerlink" title="Js"></a>Js</h3><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br><span class="line">64</span><br><span class="line">65</span><br><span class="line">66</span><br><span class="line">67</span><br><span class="line">68</span><br><span class="line">69</span><br><span class="line">70</span><br><span class="line">71</span><br><span class="line">72</span><br><span class="line">73</span><br><span class="line">74</span><br><span class="line">75</span><br><span class="line">76</span><br><span class="line">77</span><br><span class="line">78</span><br><span class="line">79</span><br><span class="line">80</span><br><span class="line">81</span><br><span class="line">82</span><br><span class="line">83</span><br><span class="line">84</span><br><span class="line">85</span><br><span class="line">86</span><br><span class="line">87</span><br><span class="line">88</span><br><span class="line">89</span><br><span class="line">90</span><br><span class="line">91</span><br><span class="line">92</span><br><span class="line">93</span><br><span class="line">94</span><br><span class="line">95</span><br><span class="line">96</span><br><span class="line">97</span><br><span class="line">98</span><br><span class="line">99</span><br><span class="line">100</span><br><span class="line">101</span><br><span class="line">102</span><br><span class="line">103</span><br><span class="line">104</span><br><span class="line">105</span><br><span class="line">106</span><br><span class="line">107</span><br><span class="line">108</span><br><span class="line">109</span><br><span class="line">110</span><br><span class="line">111</span><br><span class="line">112</span><br><span class="line">113</span><br><span class="line">114</span><br><span class="line">115</span><br><span class="line">116</span><br><span class="line">117</span><br><span class="line">118</span><br><span class="line">119</span><br><span class="line">120</span><br><span class="line">121</span><br><span class="line">122</span><br><span class="line">123</span><br><span class="line">124</span><br><span class="line">125</span><br><span class="line">126</span><br><span class="line">127</span><br><span class="line">128</span><br><span class="line">129</span><br><span class="line">130</span><br><span class="line">131</span><br><span class="line">132</span><br><span class="line">133</span><br><span class="line">134</span><br><span class="line">135</span><br><span class="line">136</span><br><span class="line">137</span><br><span class="line">138</span><br><span class="line">139</span><br><span class="line">140</span><br><span class="line">141</span><br><span class="line">142</span><br></pre></td><td class="code"><pre><span class="line"><span class="built_in">window</span>.onload = <span class="function"><span class="keyword">function</span> (<span class="params"></span>) </span>&#123;</span><br><span class="line">    <span class="keyword">let</span> slide = <span class="built_in">document</span>.querySelector(<span class="string">".slide"</span>);</span><br><span class="line">    <span class="keyword">let</span> li = <span class="built_in">document</span>.querySelectorAll(<span class="string">"li"</span>);</span><br><span class="line">    <span class="keyword">let</span> arrow = <span class="built_in">document</span>.querySelector(<span class="string">".arrow"</span>);</span><br><span class="line">    <span class="keyword">let</span> prev = <span class="keyword">this</span>.document.querySelector(<span class="string">".prev"</span>);</span><br><span class="line">    <span class="keyword">let</span> next = <span class="keyword">this</span>.document.querySelector(<span class="string">".next"</span>);</span><br><span class="line"></span><br><span class="line">    <span class="keyword">let</span> bol = <span class="literal">true</span>;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">let</span> arr = [&#123;</span><br><span class="line">            width: <span class="number">400</span>,</span><br><span class="line">            top: <span class="number">20</span>,</span><br><span class="line">            left: <span class="number">50</span>,</span><br><span class="line">            opacity: <span class="number">0.2</span>,</span><br><span class="line">            zIndex: <span class="number">2</span></span><br><span class="line">        &#125;, <span class="comment">//0</span></span><br><span class="line">        &#123;</span><br><span class="line">            width: <span class="number">600</span>,</span><br><span class="line">            top: <span class="number">70</span>,</span><br><span class="line">            left: <span class="number">0</span>,</span><br><span class="line">            opacity: <span class="number">0.8</span>,</span><br><span class="line">            zIndex: <span class="number">3</span></span><br><span class="line">        &#125;, <span class="comment">//1</span></span><br><span class="line">        &#123;</span><br><span class="line">            width: <span class="number">800</span>,</span><br><span class="line">            top: <span class="number">100</span>,</span><br><span class="line">            left: <span class="number">200</span>,</span><br><span class="line">            opacity: <span class="number">1</span>,</span><br><span class="line">            zIndex: <span class="number">4</span></span><br><span class="line">        &#125;, <span class="comment">//2</span></span><br><span class="line">        &#123;</span><br><span class="line">            width: <span class="number">600</span>,</span><br><span class="line">            top: <span class="number">70</span>,</span><br><span class="line">            left: <span class="number">600</span>,</span><br><span class="line">            opacity: <span class="number">0.8</span>,</span><br><span class="line">            zIndex: <span class="number">3</span></span><br><span class="line">        &#125;, <span class="comment">//3</span></span><br><span class="line">        &#123;</span><br><span class="line">            width: <span class="number">400</span>,</span><br><span class="line">            top: <span class="number">20</span>,</span><br><span class="line">            left: <span class="number">750</span>,</span><br><span class="line">            opacity: <span class="number">0.2</span>,</span><br><span class="line">            zIndex: <span class="number">2</span></span><br><span class="line">        &#125; <span class="comment">//4</span></span><br><span class="line"></span><br><span class="line">    ];</span><br><span class="line"></span><br><span class="line">    <span class="comment">// 封装的函数</span></span><br><span class="line">    <span class="comment">// 判断浏览器是否自持方法，得到css返回值</span></span><br><span class="line">    <span class="function"><span class="keyword">function</span> <span class="title">getStyle</span>(<span class="params">element, attr</span>) </span>&#123;</span><br><span class="line">        <span class="comment">//判断浏览器是否支持这个方法</span></span><br><span class="line">        <span class="keyword">return</span> <span class="built_in">window</span>.getComputedStyle ? <span class="built_in">window</span>.getComputedStyle(element, <span class="literal">null</span>)[attr] : element.currentStyle[attr];</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="comment">// 封装点击事件移动函数</span></span><br><span class="line">    <span class="comment">//设置任意的一个元素,移动到指定的目标位置</span></span><br><span class="line">    <span class="function"><span class="keyword">function</span> <span class="title">fn</span>(<span class="params">element, json, fn1</span>) </span>&#123;</span><br><span class="line">        clearInterval(element.timeId);</span><br><span class="line">        <span class="comment">//定时器的id值存储到对象的一个属性中</span></span><br><span class="line">        element.timeId = setInterval(<span class="function"><span class="keyword">function</span> (<span class="params"></span>) </span>&#123;</span><br><span class="line">            <span class="keyword">var</span> flag = <span class="literal">true</span>; <span class="comment">//判断目标到达</span></span><br><span class="line">            <span class="keyword">for</span> (<span class="keyword">const</span> attr <span class="keyword">in</span> json) &#123;</span><br><span class="line">                <span class="comment">//判断这个属性attr中是不是opacity</span></span><br><span class="line">                <span class="keyword">if</span> (attr == <span class="string">"opacity"</span>) &#123;</span><br><span class="line">                    <span class="comment">//获取元素的当前的透明度，放大一百倍</span></span><br><span class="line">                    <span class="keyword">var</span> current = getStyle(element, attr) * <span class="number">100</span>;</span><br><span class="line">                    <span class="comment">// 当前属性对应的目标值,放大一百倍</span></span><br><span class="line">                    <span class="keyword">var</span> target = json[attr] * <span class="number">100</span>;</span><br><span class="line">                    <span class="comment">//每次移动的距离</span></span><br><span class="line">                    <span class="keyword">var</span> step = (target - current) / <span class="number">10</span>;</span><br><span class="line">                    step = step &gt; <span class="number">0</span> ? <span class="built_in">Math</span>.ceil(step) : <span class="built_in">Math</span>.floor(step); <span class="comment">//当前移动到位置</span></span><br><span class="line">                    current += step;</span><br><span class="line">                    element.style[attr] = current / <span class="number">100</span>;</span><br><span class="line">                &#125; <span class="keyword">else</span> <span class="keyword">if</span> (attr == <span class="string">"zIndex"</span>) &#123; <span class="comment">//判断这个属性attr中是不是zIndex</span></span><br><span class="line">                    element.style[attr] = json[attr];</span><br><span class="line"></span><br><span class="line">                &#125; <span class="keyword">else</span> &#123;</span><br><span class="line">                    <span class="comment">//获取元素的当前的位置,数字类型</span></span><br><span class="line">                    <span class="keyword">var</span> current = <span class="built_in">parseInt</span>(getStyle(element, attr));</span><br><span class="line">                    <span class="comment">// 当前属性对应的目标值</span></span><br><span class="line">                    <span class="keyword">var</span> target = json[attr];</span><br><span class="line">                    <span class="comment">//每次移动的距离</span></span><br><span class="line">                    <span class="keyword">var</span> step = (target - current) / <span class="number">10</span>;</span><br><span class="line">                    step = step &gt; <span class="number">0</span> ? <span class="built_in">Math</span>.ceil(step) : <span class="built_in">Math</span>.floor(step); <span class="comment">//当前移动到位置</span></span><br><span class="line">                    current += step;</span><br><span class="line">                    element.style[attr] = current + <span class="string">"px"</span>;</span><br><span class="line">                &#125;</span><br><span class="line"></span><br><span class="line">                <span class="keyword">if</span> (current != target) &#123;</span><br><span class="line">                    flag = <span class="literal">false</span>;</span><br><span class="line">                &#125;</span><br><span class="line">            &#125;</span><br><span class="line">            <span class="keyword">if</span> (flag) &#123;</span><br><span class="line">                <span class="comment">//清理定时器</span></span><br><span class="line">                clearInterval(element.timeId);</span><br><span class="line">                <span class="comment">// 所有属性到达目标后才能使用，并且用户有输入函数</span></span><br><span class="line">                <span class="keyword">if</span> (fn1) &#123;</span><br><span class="line">                    fn1();</span><br><span class="line">                &#125;</span><br><span class="line">            &#125;</span><br><span class="line">        &#125;, <span class="number">20</span>);</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line"></span><br><span class="line">    fs = <span class="function"><span class="params">()</span> =&gt;</span> &#123;</span><br><span class="line">        <span class="keyword">for</span> (<span class="keyword">let</span> i = <span class="number">0</span>; i &lt; li.length; i++) &#123;</span><br><span class="line">            fn(li[i], arr[i], () =&gt; &#123;</span><br><span class="line">                bol = <span class="literal">true</span>;</span><br><span class="line">            &#125;);</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line">    fs();</span><br><span class="line"></span><br><span class="line">    <span class="comment">// 左</span></span><br><span class="line">    prev.onclick = <span class="function"><span class="params">()</span> =&gt;</span> &#123;</span><br><span class="line">        <span class="keyword">if</span> (bol) &#123;</span><br><span class="line">            bol = <span class="literal">false</span>;</span><br><span class="line">            arr.unshift(arr.pop());</span><br><span class="line">            fs();</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="comment">// 右</span></span><br><span class="line">    next.onclick = <span class="function"><span class="params">()</span> =&gt;</span> &#123;</span><br><span class="line">        <span class="keyword">if</span> (bol) &#123;</span><br><span class="line">            bol = <span class="literal">false</span>;</span><br><span class="line">            arr.push(arr.shift());</span><br><span class="line">            fs();</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    slide.onmouseover = <span class="function"><span class="params">()</span> =&gt;</span> &#123;</span><br><span class="line">        fn(arrow, &#123;</span><br><span class="line">            <span class="string">"opacity"</span>: <span class="number">1</span></span><br><span class="line">        &#125;)</span><br><span class="line">    &#125;</span><br><span class="line">    slide.onmouseout = <span class="function"><span class="params">()</span> =&gt;</span> &#123;</span><br><span class="line">        fn(arrow, &#123;</span><br><span class="line">            <span class="string">"opacity"</span>: <span class="number">0</span></span><br><span class="line">        &#125;)</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>]]></content>
      
      
      <categories>
          
          <category> JavaScript </category>
          
      </categories>
      
      
        <tags>
            
            <tag> js笔记/案例 </tag>
            
        </tags>
      
    </entry>
    
    <entry>
      <title>手风琴案例</title>
      <link href="/2018/09/03/2018-09-03/"/>
      <url>/2018/09/03/2018-09-03/</url>
      
        <content type="html"><![CDATA[<link rel="stylesheet" class="aplayer-secondary-style-marker" href="/assets/css/APlayer.min.css"><script src="/assets/js/APlayer.min.js" class="aplayer-secondary-script-marker"></script><h2 id="重点"><a href="#重点" class="headerlink" title="重点"></a>重点</h2><p>1.获取计算后样式函数<br>2.封装的变速移动函数<br>3.获取加载图片<br>4.添加鼠标进入事件<br>5.添加鼠标移出事件</p><h2 id="效果图"><a href="#效果图" class="headerlink" title="效果图"></a>效果图</h2><p><img src="/sfq/sf1.png"><br><img src="/sfq/sf2.png"></p><h2 id="素材"><a href="#素材" class="headerlink" title="素材"></a>素材</h2><p><img src="/sfq/1.jpg"><br><img src="/sfq/2.jpg"><br><img src="/sfq/3.jpg"><br><img src="/sfq/4.jpg"><br><img src="/sfq/5.jpg"></p><h2 id="案例代码"><a href="#案例代码" class="headerlink" title="案例代码"></a>案例代码</h2><h3 id="Css"><a href="#Css" class="headerlink" title="Css"></a>Css</h3><figure class="highlight css"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br></pre></td><td class="code"><pre><span class="line"><span class="selector-tag">ul</span> &#123;</span><br><span class="line">  <span class="attribute">list-style</span>: none;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line">* &#123;</span><br><span class="line">  <span class="attribute">margin</span>: <span class="number">0</span>;</span><br><span class="line">  <span class="attribute">padding</span>: <span class="number">0</span>;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="selector-tag">div</span> &#123;</span><br><span class="line">  <span class="attribute">width</span>: <span class="number">1150px</span>;</span><br><span class="line">  <span class="attribute">height</span>: <span class="number">400px</span>;</span><br><span class="line">  <span class="attribute">margin</span>: <span class="number">50px</span> auto;</span><br><span class="line">  <span class="attribute">border</span>: <span class="number">1px</span> solid red;</span><br><span class="line">  <span class="attribute">overflow</span>: hidden;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="selector-tag">div</span> <span class="selector-tag">li</span> &#123;</span><br><span class="line">  <span class="attribute">width</span>: <span class="number">240px</span>;</span><br><span class="line">  <span class="attribute">height</span>: <span class="number">400px</span>;</span><br><span class="line">  <span class="attribute">float</span>: left;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="selector-tag">div</span> <span class="selector-tag">ul</span> &#123;</span><br><span class="line">  <span class="attribute">width</span>: <span class="number">1300px</span>;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h3 id="Html"><a href="#Html" class="headerlink" title="Html"></a>Html</h3><figure class="highlight html"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br></pre></td><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">div</span> <span class="attr">id</span>=<span class="string">"box"</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">ul</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">li</span>&gt;</span><span class="tag">&lt;/<span class="name">li</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">li</span>&gt;</span><span class="tag">&lt;/<span class="name">li</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">li</span>&gt;</span><span class="tag">&lt;/<span class="name">li</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">li</span>&gt;</span><span class="tag">&lt;/<span class="name">li</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">li</span>&gt;</span><span class="tag">&lt;/<span class="name">li</span>&gt;</span>s</span><br><span class="line"><span class="tag">&lt;/<span class="name">ul</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">div</span>&gt;</span></span><br></pre></td></tr></table></figure><h3 id="Js"><a href="#Js" class="headerlink" title="Js"></a>Js</h3><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br><span class="line">64</span><br><span class="line">65</span><br><span class="line">66</span><br><span class="line">67</span><br><span class="line">68</span><br><span class="line">69</span><br><span class="line">70</span><br><span class="line">71</span><br><span class="line">72</span><br><span class="line">73</span><br><span class="line">74</span><br><span class="line">75</span><br><span class="line">76</span><br><span class="line">77</span><br><span class="line">78</span><br><span class="line">79</span><br><span class="line">80</span><br><span class="line">81</span><br><span class="line">82</span><br><span class="line">83</span><br><span class="line">84</span><br><span class="line">85</span><br><span class="line">86</span><br><span class="line">87</span><br><span class="line">88</span><br></pre></td><td class="code"><pre><span class="line">  <span class="keyword">let</span> li = <span class="built_in">document</span>.querySelectorAll(<span class="string">"li"</span>);</span><br><span class="line"></span><br><span class="line"><span class="comment">// 封装的函数</span></span><br><span class="line"><span class="comment">// 判断浏览器是否自持方法，得到css返回值</span></span><br><span class="line"><span class="function"><span class="keyword">function</span> <span class="title">getStyle</span>(<span class="params">element, attr</span>) </span>&#123;</span><br><span class="line">  <span class="comment">//判断浏览器是否支持这个方法</span></span><br><span class="line">  <span class="keyword">return</span> <span class="built_in">window</span>.getComputedStyle ? <span class="built_in">window</span>.getComputedStyle(element, <span class="literal">null</span>)[attr] : element.currentStyle[attr];</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="comment">// 封装点击事件移动函数</span></span><br><span class="line"><span class="comment">//设置任意的一个元素,移动到指定的目标位置</span></span><br><span class="line"><span class="function"><span class="keyword">function</span> <span class="title">fn</span>(<span class="params">element, json, fn1</span>) </span>&#123;</span><br><span class="line">  clearInterval(element.timeId);</span><br><span class="line">  <span class="comment">//定时器的id值存储到对象的一个属性中</span></span><br><span class="line">  element.timeId = setInterval(<span class="function"><span class="keyword">function</span> (<span class="params"></span>) </span>&#123;</span><br><span class="line">    <span class="keyword">var</span> flag = <span class="literal">true</span>; <span class="comment">//判断目标到达</span></span><br><span class="line">    <span class="keyword">for</span> (<span class="keyword">const</span> attr <span class="keyword">in</span> json) &#123;</span><br><span class="line">      <span class="comment">//判断这个属性attr中是不是opacity</span></span><br><span class="line">      <span class="keyword">if</span> (attr == <span class="string">"opacity"</span>) &#123;</span><br><span class="line">        <span class="comment">//获取元素的当前的透明度，放大一百倍</span></span><br><span class="line">        <span class="keyword">var</span> current = getStyle(element, attr) * <span class="number">100</span>;</span><br><span class="line">        <span class="comment">// 当前属性对应的目标值,放大一百倍</span></span><br><span class="line">        <span class="keyword">var</span> target = json[attr] * <span class="number">100</span>;</span><br><span class="line">        <span class="comment">//每次移动的距离</span></span><br><span class="line">        <span class="keyword">var</span> step = (target - current) / <span class="number">10</span>;</span><br><span class="line">        step = step &gt; <span class="number">0</span> ? <span class="built_in">Math</span>.ceil(step) : <span class="built_in">Math</span>.floor(step); <span class="comment">//当前移动到位置</span></span><br><span class="line">        current += step;</span><br><span class="line">        element.style[attr] = current / <span class="number">100</span>;</span><br><span class="line">      &#125; <span class="keyword">else</span> <span class="keyword">if</span> (attr == <span class="string">"zIndex"</span>) &#123; <span class="comment">//判断这个属性attr中是不是zIndex</span></span><br><span class="line">        element.style[attr] = json[attr];</span><br><span class="line"></span><br><span class="line">      &#125; <span class="keyword">else</span> &#123;</span><br><span class="line">        <span class="comment">//获取元素的当前的位置,数字类型</span></span><br><span class="line">        <span class="keyword">var</span> current = <span class="built_in">parseInt</span>(getStyle(element, attr));</span><br><span class="line">        <span class="comment">// 当前属性对应的目标值</span></span><br><span class="line">        <span class="keyword">var</span> target = json[attr];</span><br><span class="line">        <span class="comment">//每次移动的距离</span></span><br><span class="line">        <span class="keyword">var</span> step = (target - current) / <span class="number">10</span>;</span><br><span class="line">        step = step &gt; <span class="number">0</span> ? <span class="built_in">Math</span>.ceil(step) : <span class="built_in">Math</span>.floor(step); <span class="comment">//当前移动到位置</span></span><br><span class="line">        current += step;</span><br><span class="line">        element.style[attr] = current + <span class="string">"px"</span>;</span><br><span class="line">      &#125;</span><br><span class="line"></span><br><span class="line">      <span class="keyword">if</span> (current != target) &#123;</span><br><span class="line">        flag = <span class="literal">false</span>;</span><br><span class="line">      &#125;</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">if</span> (flag) &#123;</span><br><span class="line">      <span class="comment">//清理定时器</span></span><br><span class="line">      clearInterval(element.timeId);</span><br><span class="line">      <span class="comment">// 所有属性到达目标后才能使用，并且用户有输入函数</span></span><br><span class="line">      <span class="keyword">if</span> (fn1) &#123;</span><br><span class="line">        fn1();</span><br><span class="line">      &#125;</span><br><span class="line">    &#125;</span><br><span class="line">  &#125;, <span class="number">20</span>);</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"></span><br><span class="line"><span class="comment">// 加载图片</span></span><br><span class="line"><span class="keyword">for</span> (<span class="keyword">let</span> i = <span class="number">0</span>; i &lt; li.length; i++) &#123;</span><br><span class="line">  li[i].style.backgroundImage = <span class="string">"url(images/"</span> + (i + <span class="number">1</span>) + <span class="string">".jpg)"</span>;</span><br><span class="line"></span><br><span class="line">  <span class="comment">// 鼠标进入</span></span><br><span class="line">  li[i].onmouseover = fn1;</span><br><span class="line"></span><br><span class="line">  <span class="comment">// 鼠标离开</span></span><br><span class="line">  li[i].onmouseout = fn2;</span><br><span class="line"></span><br><span class="line">  <span class="function"><span class="keyword">function</span> <span class="title">fn1</span>(<span class="params"></span>) </span>&#123;</span><br><span class="line">    <span class="keyword">for</span> (<span class="keyword">let</span> j = <span class="number">0</span>; j &lt; li.length; j++) &#123;</span><br><span class="line">      fn(li[j], &#123;</span><br><span class="line">        <span class="string">"width"</span>: <span class="number">100</span></span><br><span class="line">      &#125;); <span class="comment">//动画效果</span></span><br><span class="line">    &#125;</span><br><span class="line">    fn(<span class="keyword">this</span>, &#123;</span><br><span class="line">      <span class="string">"width"</span>: <span class="number">800</span></span><br><span class="line">    &#125;)</span><br><span class="line">  &#125;</span><br><span class="line"></span><br><span class="line">  <span class="function"><span class="keyword">function</span> <span class="title">fn2</span>(<span class="params"></span>) </span>&#123;</span><br><span class="line">    <span class="keyword">for</span> (<span class="keyword">let</span> j = <span class="number">0</span>; j &lt; li.length; j++) &#123;</span><br><span class="line">      fn(li[j], &#123;</span><br><span class="line">        <span class="string">"width"</span>: <span class="number">235</span></span><br><span class="line">      &#125;); <span class="comment">//动画效果 </span></span><br><span class="line">      &#125;</span><br><span class="line">    &#125;</span><br><span class="line">  &#125;</span><br></pre></td></tr></table></figure>]]></content>
      
      
      <categories>
          
          <category> JavaScript </category>
          
      </categories>
      
      
        <tags>
            
            <tag> js笔记/案例 </tag>
            
        </tags>
      
    </entry>
    
    <entry>
      <title>获取计算后的样式/封装变速移动函数</title>
      <link href="/2018/09/01/2018-09-02/"/>
      <url>/2018/09/01/2018-09-02/</url>
      
        <content type="html"><![CDATA[<link rel="stylesheet" class="aplayer-secondary-style-marker" href="/assets/css/APlayer.min.css"><script src="/assets/js/APlayer.min.js" class="aplayer-secondary-script-marker"></script><h1 id="重点："><a href="#重点：" class="headerlink" title="重点："></a>重点：</h1><h3 id="获取计算后函数"><a href="#获取计算后函数" class="headerlink" title="获取计算后函数"></a>获取计算后函数</h3><p>1.获取计算后的 css 样式（返回值为 css 的一个对象包含所有的 css 元素）<br>2.封装兼容代码<br>兼容：<br>谷歌,火狐支持<br>console.log(window.getComputedStyle(dv,null).left);<br>IE8 支持<br>console.log(dv.currentStyle.left);</p><h2 id="封装变速移动函数"><a href="#封装变速移动函数" class="headerlink" title="封装变速移动函数"></a>封装变速移动函数</h2><p>1.理清思路<br>2.传入元素，对象，函数<br>3.判断 opacity 和 zindex<br>4.获取元素位置等数据<br>5.可以设置移动，大小，透明度，层级<br>6.配合获取后样式用，未优化</p><h1 id="封装代码"><a href="#封装代码" class="headerlink" title="封装代码"></a>封装代码</h1><h3 id="获取计算后样式代码"><a href="#获取计算后样式代码" class="headerlink" title="获取计算后样式代码"></a>获取计算后样式代码</h3><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">// 判断浏览器是否自持方法，得到css返回值</span></span><br><span class="line"><span class="comment">// 未设置的css样式会返回auto或者0</span></span><br><span class="line"><span class="function"><span class="keyword">function</span> <span class="title">getStyle</span>(<span class="params">element, attr</span>) </span>&#123;</span><br><span class="line">    <span class="comment">//判断浏览器是否支持这个方法</span></span><br><span class="line">    <span class="keyword">return</span> <span class="built_in">window</span>.getComputedStyle ? <span class="built_in">window</span>.getComputedStyle(element, <span class="literal">null</span>)[attr] : element.currentStyle[attr];</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h2 id="封装变速移动函数-1"><a href="#封装变速移动函数-1" class="headerlink" title="封装变速移动函数"></a>封装变速移动函数</h2><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">// 判断浏览器是否自持方法，得到css返回值</span></span><br><span class="line"><span class="function"><span class="keyword">function</span> <span class="title">getStyle</span>(<span class="params">element, attr</span>) </span>&#123;</span><br><span class="line">    <span class="comment">//判断浏览器是否支持这个方法</span></span><br><span class="line">    <span class="keyword">return</span> <span class="built_in">window</span>.getComputedStyle ? <span class="built_in">window</span>.getComputedStyle(element, <span class="literal">null</span>)[attr] : element.currentStyle[attr];</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="comment">// 封装点击事件移动函数</span></span><br><span class="line"><span class="comment">//设置任意的一个元素,移动到指定的目标位置</span></span><br><span class="line">fn = <span class="function">(<span class="params">element, json, fn1</span>) =&gt;</span> &#123;</span><br><span class="line">    clearInterval(element.timeId);</span><br><span class="line">    <span class="comment">//定时器的id值存储到对象的一个属性中</span></span><br><span class="line">    element.timeId = setInterval(<span class="function"><span class="keyword">function</span> (<span class="params"></span>) </span>&#123;</span><br><span class="line">        <span class="keyword">let</span> flag = <span class="literal">true</span>; <span class="comment">//判断目标到达</span></span><br><span class="line">        <span class="keyword">for</span> (<span class="keyword">const</span> attr <span class="keyword">in</span> json) &#123;</span><br><span class="line">            <span class="comment">//判断这个属性attr中是不是opacity</span></span><br><span class="line">            <span class="keyword">if</span> (attr == <span class="string">"opacity"</span>) &#123;</span><br><span class="line">                <span class="comment">//获取元素的当前的透明度，放大一百倍</span></span><br><span class="line">                <span class="keyword">var</span> current = getStyle(element, attr) * <span class="number">100</span>;</span><br><span class="line">                <span class="comment">// 当前属性对应的目标值,放大一百倍</span></span><br><span class="line">                <span class="keyword">var</span> target = json[attr] * <span class="number">100</span>;</span><br><span class="line">                <span class="comment">//每次移动的距离</span></span><br><span class="line">                <span class="keyword">var</span> step = (target - current) / <span class="number">10</span>;</span><br><span class="line">                step = step &gt; <span class="number">0</span> ? <span class="built_in">Math</span>.ceil(step) : <span class="built_in">Math</span>.floor(step); <span class="comment">//当前移动到位置</span></span><br><span class="line">                current += step;</span><br><span class="line">                element.style[attr] = current / <span class="number">100</span>;</span><br><span class="line">            &#125; <span class="keyword">else</span> <span class="keyword">if</span> (attr == <span class="string">"zIndex"</span>) &#123; <span class="comment">//判断这个属性attr中是不是zIndex</span></span><br><span class="line">                element.style[attr] = json[attr];</span><br><span class="line"></span><br><span class="line">            &#125; <span class="keyword">else</span> &#123;</span><br><span class="line">                <span class="comment">//获取元素的当前的位置,数字类型</span></span><br><span class="line">                <span class="keyword">var</span> current = <span class="built_in">parseInt</span>(getStyle(element, attr));</span><br><span class="line">                <span class="comment">// 当前属性对应的目标值</span></span><br><span class="line">                <span class="keyword">var</span> target = json[attr];</span><br><span class="line">                <span class="comment">//每次移动的距离</span></span><br><span class="line">                <span class="keyword">var</span> step = (target - current) / <span class="number">10</span>;</span><br><span class="line">                step = step &gt; <span class="number">0</span> ? <span class="built_in">Math</span>.ceil(step) : <span class="built_in">Math</span>.floor(step); <span class="comment">//当前移动到位置</span></span><br><span class="line">                current += step;</span><br><span class="line">                element.style[attr] = current + <span class="string">"px"</span>;</span><br><span class="line">            &#125;</span><br><span class="line"></span><br><span class="line">            <span class="keyword">if</span> (current != target) &#123;</span><br><span class="line">                flag = <span class="literal">false</span>;</span><br><span class="line">            &#125;</span><br><span class="line">            <span class="built_in">console</span>.log(<span class="string">"测试代码：当前元素"</span> + attr + <span class="string">"当前位置"</span> + current + <span class="string">" 目标值"</span> + target);</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="keyword">if</span> (flag) &#123;</span><br><span class="line">            <span class="comment">//清理定时器</span></span><br><span class="line">            clearInterval(element.timeId);</span><br><span class="line">            <span class="comment">// 所有属性到达目标后才能使用，并且用户有输入函数</span></span><br><span class="line">            <span class="keyword">if</span> (fn1) &#123;</span><br><span class="line">                fn1();</span><br><span class="line">            &#125;</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;, <span class="number">20</span>);</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h1 id="小案例代码"><a href="#小案例代码" class="headerlink" title="小案例代码"></a>小案例代码</h1><h2 id="获取计算后样式"><a href="#获取计算后样式" class="headerlink" title="获取计算后样式"></a>获取计算后样式</h2><h3 id="Css"><a href="#Css" class="headerlink" title="Css"></a>Css</h3><figure class="highlight css"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><span class="line"><span class="selector-class">.dv</span> &#123;</span><br><span class="line">    <span class="attribute">width</span>: <span class="number">200px</span>;</span><br><span class="line">    <span class="attribute">height</span>: <span class="number">200px</span>;</span><br><span class="line">    <span class="attribute">position</span>: absolute;</span><br><span class="line">    <span class="attribute">left</span>: <span class="number">100px</span>;</span><br><span class="line">    <span class="attribute">background-color</span>: pink;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h3 id="Html"><a href="#Html" class="headerlink" title="Html"></a>Html</h3><figure class="highlight html"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">input</span> <span class="attr">type</span>=<span class="string">"button"</span> <span class="attr">value</span>=<span class="string">"点击"</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">div</span> <span class="attr">class</span>=<span class="string">"dv"</span>&gt;</span></span><br><span class="line"></span><br><span class="line"><span class="tag">&lt;/<span class="name">div</span>&gt;</span></span><br></pre></td></tr></table></figure><h3 id="Js"><a href="#Js" class="headerlink" title="Js"></a>Js</h3><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">let</span> btn = <span class="built_in">document</span>.querySelector(<span class="string">"input"</span>);</span><br><span class="line"><span class="keyword">let</span> dv = <span class="built_in">document</span>.querySelector(<span class="string">".dv"</span>);</span><br><span class="line"></span><br><span class="line"><span class="comment">// //谷歌,火狐支持</span></span><br><span class="line"><span class="comment">// //console.log(window.getComputedStyle(dv,null).left);</span></span><br><span class="line"><span class="comment">//</span></span><br><span class="line"><span class="comment">// //console.log(window.getComputedStyle(dv,null)["left"]);</span></span><br><span class="line"><span class="comment">// //IE8支持</span></span><br><span class="line"><span class="comment">// //console.log(dv.currentStyle.left);</span></span><br><span class="line"></span><br><span class="line"></span><br><span class="line"><span class="comment">// 判断浏览器是否自持方法，得到css返回值</span></span><br><span class="line"><span class="comment">// 未设置的css样式会返回auto或者0</span></span><br><span class="line"><span class="function"><span class="keyword">function</span> <span class="title">getStyle</span>(<span class="params">element, attr</span>) </span>&#123;</span><br><span class="line">    <span class="comment">//判断浏览器是否支持这个方法</span></span><br><span class="line">    <span class="keyword">return</span> <span class="built_in">window</span>.getComputedStyle ? <span class="built_in">window</span>.getComputedStyle(element, <span class="literal">null</span>)[attr] : element.currentStyle[attr];</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"></span><br><span class="line">btn.onclick = <span class="function"><span class="params">()</span> =&gt;</span> &#123;</span><br><span class="line">    <span class="built_in">console</span>.log(getStyle(dv,<span class="string">"left"</span>));</span><br><span class="line">    <span class="built_in">console</span>.log(getStyle(dv,<span class="string">"backgroundColor"</span>));</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h2 id="封装变速移动小案例"><a href="#封装变速移动小案例" class="headerlink" title="封装变速移动小案例"></a>封装变速移动小案例</h2><h3 id="Css-1"><a href="#Css-1" class="headerlink" title="Css"></a>Css</h3><figure class="highlight css"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br></pre></td><td class="code"><pre><span class="line">* &#123;</span><br><span class="line">    <span class="attribute">padding</span>: <span class="number">0</span>;</span><br><span class="line">    <span class="attribute">margin</span>: <span class="number">0</span>;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="selector-tag">div</span> &#123;</span><br><span class="line">    <span class="attribute">position</span>: absolute;</span><br><span class="line">    <span class="attribute">top</span>: <span class="number">0</span>;</span><br><span class="line">    <span class="attribute">left</span>: <span class="number">0</span>;</span><br><span class="line">    <span class="attribute">width</span>: <span class="number">200px</span>;</span><br><span class="line">    <span class="attribute">height</span>: <span class="number">200px</span>;</span><br><span class="line">    <span class="attribute">background-color</span>: pink;</span><br><span class="line">&#125;</span><br><span class="line"><span class="selector-tag">input</span> &#123;</span><br><span class="line">    <span class="attribute">z-index</span>: <span class="number">10</span>;</span><br><span class="line">    <span class="attribute">position</span>: absolute;</span><br><span class="line">    <span class="attribute">top</span>: <span class="number">0</span>;</span><br><span class="line">    <span class="attribute">left</span>: <span class="number">0</span>;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h3 id="Html-1"><a href="#Html-1" class="headerlink" title="Html"></a>Html</h3><figure class="highlight html"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">input</span> <span class="attr">type</span>=<span class="string">"button"</span> <span class="attr">value</span>=<span class="string">"移动"</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">div</span>&gt;</span></span><br><span class="line"></span><br><span class="line"><span class="tag">&lt;/<span class="name">div</span>&gt;</span></span><br></pre></td></tr></table></figure><h3 id="Js-1"><a href="#Js-1" class="headerlink" title="Js"></a>Js</h3><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br><span class="line">64</span><br><span class="line">65</span><br><span class="line">66</span><br><span class="line">67</span><br><span class="line">68</span><br><span class="line">69</span><br><span class="line">70</span><br><span class="line">71</span><br><span class="line">72</span><br><span class="line">73</span><br><span class="line">74</span><br><span class="line">75</span><br><span class="line">76</span><br><span class="line">77</span><br><span class="line">78</span><br><span class="line">79</span><br><span class="line">80</span><br><span class="line">81</span><br><span class="line">82</span><br><span class="line">83</span><br><span class="line">84</span><br><span class="line">85</span><br><span class="line">86</span><br><span class="line">87</span><br><span class="line">88</span><br><span class="line">89</span><br><span class="line">90</span><br><span class="line">91</span><br><span class="line">92</span><br><span class="line">93</span><br><span class="line">94</span><br><span class="line">95</span><br><span class="line">96</span><br><span class="line">97</span><br><span class="line">98</span><br><span class="line">99</span><br><span class="line">100</span><br><span class="line">101</span><br><span class="line">102</span><br><span class="line">103</span><br><span class="line">104</span><br><span class="line">105</span><br><span class="line">106</span><br><span class="line">107</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">let</span> btn = <span class="built_in">document</span>.querySelector(<span class="string">"input"</span>);</span><br><span class="line">    <span class="keyword">let</span> dv = <span class="built_in">document</span>.querySelector(<span class="string">"div"</span>);</span><br><span class="line"></span><br><span class="line">    <span class="comment">// 判断浏览器是否自持方法，得到css返回值</span></span><br><span class="line">    <span class="function"><span class="keyword">function</span> <span class="title">getStyle</span>(<span class="params">element, attr</span>) </span>&#123;</span><br><span class="line">        <span class="comment">//判断浏览器是否支持这个方法</span></span><br><span class="line">        <span class="keyword">return</span> <span class="built_in">window</span>.getComputedStyle ? <span class="built_in">window</span>.getComputedStyle(element, <span class="literal">null</span>)[attr] : element.currentStyle[attr];</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line"></span><br><span class="line">    <span class="comment">// 封装点击事件移动函数</span></span><br><span class="line">    <span class="comment">//设置任意的一个元素,移动到指定的目标位置</span></span><br><span class="line">    fn = <span class="function">(<span class="params">element, json, fn1</span>) =&gt;</span> &#123;</span><br><span class="line">        clearInterval(element.timeId);</span><br><span class="line">        <span class="comment">//定时器的id值存储到对象的一个属性中</span></span><br><span class="line">        element.timeId = setInterval(<span class="function"><span class="keyword">function</span> (<span class="params"></span>) </span>&#123;</span><br><span class="line">            <span class="keyword">let</span> flag = <span class="literal">true</span>; <span class="comment">//判断目标到达</span></span><br><span class="line">            <span class="keyword">for</span> (<span class="keyword">const</span> attr <span class="keyword">in</span> json) &#123;</span><br><span class="line">                <span class="comment">//判断这个属性attr中是不是opacity</span></span><br><span class="line">                <span class="keyword">if</span> (attr == <span class="string">"opacity"</span>) &#123;</span><br><span class="line">                    <span class="comment">//获取元素的当前的透明度，放大一百倍</span></span><br><span class="line">                    <span class="keyword">var</span> current = getStyle(element, attr) * <span class="number">100</span>;</span><br><span class="line">                    <span class="comment">// 当前属性对应的目标值,放大一百倍</span></span><br><span class="line">                    <span class="keyword">var</span> target = json[attr] * <span class="number">100</span>;</span><br><span class="line">                    <span class="comment">//每次移动的距离</span></span><br><span class="line">                    <span class="keyword">var</span> step = (target - current) / <span class="number">10</span>;</span><br><span class="line">                    step = step &gt; <span class="number">0</span> ? <span class="built_in">Math</span>.ceil(step) : <span class="built_in">Math</span>.floor(step); <span class="comment">//当前移动到位置</span></span><br><span class="line">                    current += step;</span><br><span class="line">                    element.style[attr] = current / <span class="number">100</span>;</span><br><span class="line">                &#125; <span class="keyword">else</span> <span class="keyword">if</span> (attr == <span class="string">"zIndex"</span>) &#123; <span class="comment">//判断这个属性attr中是不是zIndex</span></span><br><span class="line">                    element.style[attr] = json[attr];</span><br><span class="line"></span><br><span class="line">                &#125; <span class="keyword">else</span> &#123;</span><br><span class="line">                    <span class="comment">//获取元素的当前的位置,数字类型</span></span><br><span class="line">                    <span class="keyword">var</span> current = <span class="built_in">parseInt</span>(getStyle(element, attr));</span><br><span class="line">                    <span class="comment">// 当前属性对应的目标值</span></span><br><span class="line">                    <span class="keyword">var</span> target = json[attr];</span><br><span class="line">                    <span class="comment">//每次移动的距离</span></span><br><span class="line">                    <span class="keyword">var</span> step = (target - current) / <span class="number">10</span>;</span><br><span class="line">                    step = step &gt; <span class="number">0</span> ? <span class="built_in">Math</span>.ceil(step) : <span class="built_in">Math</span>.floor(step); <span class="comment">//当前移动到位置</span></span><br><span class="line">                    current += step;</span><br><span class="line">                    element.style[attr] = current + <span class="string">"px"</span>;</span><br><span class="line">                &#125;</span><br><span class="line"></span><br><span class="line">                <span class="keyword">if</span> (current != target) &#123;</span><br><span class="line">                    flag = <span class="literal">false</span>;</span><br><span class="line">                &#125;</span><br><span class="line">                <span class="built_in">console</span>.log(<span class="string">"测试代码：当前元素"</span> + attr + <span class="string">"当前位置"</span> + current + <span class="string">" 目标值"</span> + target);</span><br><span class="line">            &#125;</span><br><span class="line">            <span class="keyword">if</span> (flag) &#123;</span><br><span class="line">                <span class="comment">//清理定时器</span></span><br><span class="line">                clearInterval(element.timeId);</span><br><span class="line">                <span class="comment">// 所有属性到达目标后才能使用，并且用户有输入函数</span></span><br><span class="line">                <span class="keyword">if</span> (fn1) &#123;</span><br><span class="line">                    fn1();</span><br><span class="line">                &#125;</span><br><span class="line">            &#125;</span><br><span class="line">        &#125;, <span class="number">20</span>);</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    btn.onclick = <span class="function"><span class="params">()</span> =&gt;</span> &#123;</span><br><span class="line">        <span class="keyword">let</span> json = &#123;</span><br><span class="line">            width: <span class="number">800</span>,</span><br><span class="line">            height: <span class="number">400</span>,</span><br><span class="line">            left: <span class="number">500</span>,</span><br><span class="line">            top: <span class="number">600</span>,</span><br><span class="line">            opacity: <span class="number">0.2</span></span><br><span class="line">        &#125;</span><br><span class="line">        <span class="keyword">let</span> json1 = &#123;</span><br><span class="line">            width: <span class="number">20</span>,</span><br><span class="line">            height: <span class="number">40</span>,</span><br><span class="line">            left: <span class="number">0</span>,</span><br><span class="line">            top: <span class="number">0</span>,</span><br><span class="line">            opacity: <span class="number">0.8</span>,</span><br><span class="line">            zIndex:<span class="number">1000</span></span><br><span class="line">        &#125;</span><br><span class="line">        <span class="comment">// fn(dv, json)</span></span><br><span class="line"></span><br><span class="line"></span><br><span class="line">        <span class="comment">// let date1 = &#123;</span></span><br><span class="line">        <span class="comment">//     "width": 800,</span></span><br><span class="line">        <span class="comment">//     "height": 400,</span></span><br><span class="line">        <span class="comment">//     "left": 500,</span></span><br><span class="line">        <span class="comment">//     "top": 600</span></span><br><span class="line">        <span class="comment">// &#125;;</span></span><br><span class="line">        <span class="comment">// fn(dv, date1, () =&gt; &#123;</span></span><br><span class="line">        <span class="comment">//     let date2 = &#123;</span></span><br><span class="line">        <span class="comment">//         "width": 80,</span></span><br><span class="line">        <span class="comment">//         "height": 40,</span></span><br><span class="line">        <span class="comment">//         "left": 50,</span></span><br><span class="line">        <span class="comment">//         "top": 60</span></span><br><span class="line">        <span class="comment">//     &#125;</span></span><br><span class="line">        <span class="comment">//     fn(dv, date2, () =&gt; &#123;</span></span><br><span class="line">        <span class="comment">//         let date3 = &#123;</span></span><br><span class="line">        <span class="comment">//             "width": 400,</span></span><br><span class="line">        <span class="comment">//             "height": 200,</span></span><br><span class="line">        <span class="comment">//             "left": 300,</span></span><br><span class="line">        <span class="comment">//             "top": 100</span></span><br><span class="line">        <span class="comment">//         &#125;</span></span><br><span class="line">        <span class="comment">//         fn(dv, date3)</span></span><br><span class="line">        <span class="comment">//     &#125;)</span></span><br><span class="line">        <span class="comment">// &#125;);</span></span><br><span class="line"></span><br><span class="line">        fn(dv, json, () =&gt; &#123;</span><br><span class="line">            fn(dv,json1)</span><br><span class="line">        &#125;)</span><br><span class="line">    &#125;</span><br></pre></td></tr></table></figure>]]></content>
      
      
      <categories>
          
          <category> JavaScript </category>
          
      </categories>
      
      
        <tags>
            
            <tag> js笔记/案例 </tag>
            
        </tags>
      
    </entry>
    
    <entry>
      <title>固定导航栏/筋斗云案例</title>
      <link href="/2018/09/01/2018-09-01/"/>
      <url>/2018/09/01/2018-09-01/</url>
      
        <content type="html"><![CDATA[<link rel="stylesheet" class="aplayer-secondary-style-marker" href="/assets/css/APlayer.min.css"><script src="/assets/js/APlayer.min.js" class="aplayer-secondary-script-marker"></script><h1 id="重点难点-功能"><a href="#重点难点-功能" class="headerlink" title="重点难点/功能:"></a>重点难点/功能:</h1><p>一、固定导航栏<br>1.获取页面向上向下卷曲的距离值<br>2.兼容性<br>3.window 的滚动事件<br>4.更改样式<br>5.判断向上卷曲出去的距离和最上面的 div 的高度对比<br>6.设置后面的元素值防止有跳的效果<br>7.回值时的元素设置<br>8.固定浏览器在向下滑动时标题栏还在顶部，随着浏览器的上下滑动而改变</p><p>二、筋斗云<br>1.循环遍历给元素添加事件（鼠标进出，点击）<br>2.调用封装的函数<br>3.es6 写法与 es5 写法的小问题<br>4.鼠标进入时使用变速动画快速的滑动到鼠标位置<br>5.鼠标离开时自动回复到上一次的位子<br>6.当鼠标点击时就会记录位子最为父级位置返回去</p><h1 id="效果图"><a href="#效果图" class="headerlink" title="效果图"></a>效果图</h1><h2 id="固定导航栏图"><a href="#固定导航栏图" class="headerlink" title="固定导航栏图"></a>固定导航栏图</h2><p><img src="images/gd1.png"><br><img src="images/gd2.png"></p><h2 id="筋斗云图"><a href="#筋斗云图" class="headerlink" title="筋斗云图"></a>筋斗云图</h2><p><img src="images/jd1.png"><br><img src="images/jd2.png"></p><h1 id="素材"><a href="#素材" class="headerlink" title="素材"></a>素材</h1><h2 id="固定导航栏"><a href="#固定导航栏" class="headerlink" title="固定导航栏"></a>固定导航栏</h2><p><img src="images/top.png"><br><img src="images/nav.png"><br><img src="images/main.png"></p><h2 id="筋斗云"><a href="#筋斗云" class="headerlink" title="筋斗云"></a>筋斗云</h2><p><img src="images/cloud.gif"><br><img src="images/rss.png"></p><h1 id="固定导航栏案例代码"><a href="#固定导航栏案例代码" class="headerlink" title="固定导航栏案例代码"></a>固定导航栏案例代码</h1><h3 id="Css"><a href="#Css" class="headerlink" title="Css"></a>Css</h3><figure class="highlight css"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br></pre></td><td class="code"><pre><span class="line">* &#123;</span><br><span class="line">  <span class="attribute">margin</span>: <span class="number">0</span>;</span><br><span class="line">  <span class="attribute">padding</span>: <span class="number">0</span></span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="selector-tag">img</span> &#123;</span><br><span class="line">  <span class="attribute">vertical-align</span>: top;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="selector-class">.main</span> &#123;</span><br><span class="line">  <span class="attribute">margin</span>: <span class="number">0</span> auto;</span><br><span class="line">  <span class="attribute">width</span>: <span class="number">1000px</span>;</span><br><span class="line">  <span class="attribute">margin-top</span>: <span class="number">10px</span>;</span><br><span class="line"></span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="selector-class">.fixed</span> &#123;</span><br><span class="line">  <span class="attribute">position</span>: fixed;</span><br><span class="line">  <span class="attribute">top</span>: <span class="number">0</span>;</span><br><span class="line">  <span class="attribute">left</span>: <span class="number">0</span>;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h3 id="Html"><a href="#Html" class="headerlink" title="Html"></a>Html</h3><figure class="highlight html"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br></pre></td><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">div</span> <span class="attr">class</span>=<span class="string">"top"</span> <span class="attr">id</span>=<span class="string">"topPart"</span>&gt;</span></span><br><span class="line">  <span class="tag">&lt;<span class="name">img</span> <span class="attr">src</span>=<span class="string">"images/top.png"</span> <span class="attr">alt</span>=<span class="string">""</span> /&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">div</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">div</span> <span class="attr">class</span>=<span class="string">"nav"</span> <span class="attr">id</span>=<span class="string">"navBar"</span>&gt;</span></span><br><span class="line">  <span class="tag">&lt;<span class="name">img</span> <span class="attr">src</span>=<span class="string">"images/nav.png"</span> <span class="attr">alt</span>=<span class="string">""</span> /&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">div</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">div</span> <span class="attr">class</span>=<span class="string">"main"</span> <span class="attr">id</span>=<span class="string">"mainPart"</span>&gt;</span></span><br><span class="line">  <span class="tag">&lt;<span class="name">img</span> <span class="attr">src</span>=<span class="string">"images/main.png"</span> <span class="attr">alt</span>=<span class="string">""</span> /&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">div</span>&gt;</span></span><br></pre></td></tr></table></figure><h3 id="Js"><a href="#Js" class="headerlink" title="Js"></a>Js</h3><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br></pre></td><td class="code"><pre><span class="line">  <span class="keyword">let</span> topPart = <span class="built_in">document</span>.querySelector(<span class="string">"#topPart"</span>);</span><br><span class="line"><span class="keyword">let</span> navBar = <span class="built_in">document</span>.querySelector(<span class="string">"#navBar"</span>);</span><br><span class="line"></span><br><span class="line"><span class="comment">//获取页面向上或者向左卷曲出去的距离的值</span></span><br><span class="line">getScroll = <span class="function"><span class="params">()</span> =&gt;</span> &#123;</span><br><span class="line">  <span class="keyword">return</span> &#123;</span><br><span class="line">    left: <span class="built_in">window</span>.pageXOffset || <span class="built_in">document</span>.documentElement.scrollLeft || <span class="built_in">document</span>.body.scrollLeft || <span class="number">0</span>,</span><br><span class="line">    top: <span class="built_in">window</span>.pageYOffset || <span class="built_in">document</span>.documentElement.scrollTop || <span class="built_in">document</span>.body.scrollTop || <span class="number">0</span></span><br><span class="line">  &#125;;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="comment">// 滚动事件</span></span><br><span class="line"><span class="built_in">window</span>.onscroll = <span class="function"><span class="params">()</span> =&gt;</span> &#123;</span><br><span class="line">  <span class="comment">//向上卷曲出去的距离和最上面的div的高度对比</span></span><br><span class="line">  <span class="keyword">if</span> (getScroll().top &gt;= topPart.offsetHeight) &#123;</span><br><span class="line">    <span class="comment">//设置第二个div的类样式</span></span><br><span class="line">    navBar.className = <span class="string">"nav fixed"</span></span><br><span class="line">    <span class="comment">//设置第三个div的marginTop的值</span></span><br><span class="line">    topPart.style.marginTop = navBar.offsetHeight + <span class="string">"px"</span>;</span><br><span class="line">  &#125; <span class="keyword">else</span> &#123;</span><br><span class="line">    navBar.className = <span class="string">"nav"</span></span><br><span class="line">    topPart.style.marginTop = <span class="number">10</span> + <span class="string">"px"</span>;</span><br><span class="line">  &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h1 id="筋斗云案例代码"><a href="#筋斗云案例代码" class="headerlink" title="筋斗云案例代码"></a>筋斗云案例代码</h1><h3 id="Css-1"><a href="#Css-1" class="headerlink" title="Css"></a>Css</h3><figure class="highlight css"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br></pre></td><td class="code"><pre><span class="line">* &#123;</span><br><span class="line">  <span class="attribute">margin</span>: <span class="number">0</span>;</span><br><span class="line">  <span class="attribute">padding</span>: <span class="number">0</span></span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="selector-tag">ul</span> &#123;</span><br><span class="line">  <span class="attribute">list-style</span>: none</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="selector-tag">body</span> &#123;</span><br><span class="line">  <span class="attribute">background-color</span>: <span class="number">#333</span>;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="selector-class">.nav</span> &#123;</span><br><span class="line">  <span class="attribute">width</span>: <span class="number">800px</span>;</span><br><span class="line">  <span class="attribute">height</span>: <span class="number">42px</span>;</span><br><span class="line">  <span class="attribute">margin</span>: <span class="number">100px</span> auto;</span><br><span class="line">  <span class="attribute">background</span>: <span class="built_in">url</span>(images/rss.png) right center no-repeat;</span><br><span class="line">  <span class="attribute">background-color</span>: <span class="number">#fff</span>;</span><br><span class="line">  <span class="attribute">border-radius</span>: <span class="number">10px</span>;</span><br><span class="line">  <span class="attribute">position</span>: relative;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="selector-class">.nav</span> <span class="selector-tag">li</span> &#123;</span><br><span class="line">  <span class="attribute">width</span>: <span class="number">83px</span>;</span><br><span class="line">  <span class="attribute">height</span>: <span class="number">42px</span>;</span><br><span class="line">  <span class="attribute">text-align</span>: center;</span><br><span class="line">  <span class="attribute">line-height</span>: <span class="number">42px</span>;</span><br><span class="line">  <span class="attribute">float</span>: left;</span><br><span class="line">  <span class="attribute">cursor</span>: pointer;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="selector-class">.nav</span> <span class="selector-tag">span</span> &#123;</span><br><span class="line">  <span class="attribute">position</span>: absolute;</span><br><span class="line">  <span class="attribute">top</span>: <span class="number">0</span>;</span><br><span class="line">  <span class="attribute">left</span>: <span class="number">0</span>;</span><br><span class="line">  <span class="attribute">width</span>: <span class="number">83px</span>;</span><br><span class="line">  <span class="attribute">height</span>: <span class="number">42px</span>;</span><br><span class="line">  <span class="attribute">background</span>: <span class="built_in">url</span>(images/cloud.gif) no-repeat;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="selector-tag">ul</span> &#123;</span><br><span class="line">  <span class="attribute">position</span>: relative;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h3 id="Html-1"><a href="#Html-1" class="headerlink" title="Html"></a>Html</h3><figure class="highlight html"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br></pre></td><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">div</span> <span class="attr">class</span>=<span class="string">"nav"</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">span</span> <span class="attr">id</span>=<span class="string">"cloud"</span>&gt;</span><span class="tag">&lt;/<span class="name">span</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">ul</span> <span class="attr">id</span>=<span class="string">"navBar"</span>&gt;</span></span><br><span class="line">      <span class="tag">&lt;<span class="name">li</span>&gt;</span>北京校区<span class="tag">&lt;/<span class="name">li</span>&gt;</span></span><br><span class="line">      <span class="tag">&lt;<span class="name">li</span>&gt;</span>上海校区<span class="tag">&lt;/<span class="name">li</span>&gt;</span></span><br><span class="line">      <span class="tag">&lt;<span class="name">li</span>&gt;</span>广州校区<span class="tag">&lt;/<span class="name">li</span>&gt;</span></span><br><span class="line">      <span class="tag">&lt;<span class="name">li</span>&gt;</span>深圳校区<span class="tag">&lt;/<span class="name">li</span>&gt;</span></span><br><span class="line">      <span class="tag">&lt;<span class="name">li</span>&gt;</span>武汉校区<span class="tag">&lt;/<span class="name">li</span>&gt;</span></span><br><span class="line">      <span class="tag">&lt;<span class="name">li</span>&gt;</span>关于我们<span class="tag">&lt;/<span class="name">li</span>&gt;</span></span><br><span class="line">      <span class="tag">&lt;<span class="name">li</span>&gt;</span>联系我们<span class="tag">&lt;/<span class="name">li</span>&gt;</span></span><br><span class="line">      <span class="tag">&lt;<span class="name">li</span>&gt;</span>招贤纳士<span class="tag">&lt;/<span class="name">li</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;/<span class="name">ul</span>&gt;</span></span><br><span class="line">  <span class="tag">&lt;/<span class="name">div</span>&gt;</span></span><br></pre></td></tr></table></figure><h3 id="Js-1"><a href="#Js-1" class="headerlink" title="Js"></a>Js</h3><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">let</span> cloud = <span class="built_in">document</span>.querySelector(<span class="string">"#cloud"</span>);</span><br><span class="line"><span class="keyword">let</span> li = <span class="built_in">document</span>.querySelectorAll(<span class="string">"#navBar li"</span>);</span><br><span class="line"></span><br><span class="line"><span class="comment">// es6 es6中的this调用的是windwo并不是调用当前的this</span></span><br><span class="line"><span class="comment">// mouseoverHandle = () =&gt; &#123;</span></span><br><span class="line"><span class="comment">//   fn(cloud, this.offsetLeft)</span></span><br><span class="line"><span class="comment">//   console.log(this);</span></span><br><span class="line"><span class="comment">//   console.log(this.offsetLeft);</span></span><br><span class="line"><span class="comment">// &#125;</span></span><br><span class="line"></span><br><span class="line"><span class="comment">// es5</span></span><br><span class="line"><span class="function"><span class="keyword">function</span> <span class="title">mouseoverHandle</span>(<span class="params"></span>) </span>&#123;</span><br><span class="line">  fn(cloud, <span class="keyword">this</span>.offsetLeft)</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="keyword">let</span> last = <span class="number">0</span>;</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">function</span> <span class="title">clickHandle</span>(<span class="params"></span>) </span>&#123;</span><br><span class="line">  last = <span class="keyword">this</span>.offsetLeft;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">function</span> <span class="title">mouseoutHandle</span>(<span class="params"></span>) </span>&#123;</span><br><span class="line">  fn(cloud, last);</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="keyword">for</span> (<span class="keyword">let</span> i = <span class="number">0</span>; i &lt; li.length; i++) &#123;</span><br><span class="line">  <span class="comment">// 鼠标移入</span></span><br><span class="line">  li[i].onmouseover = mouseoverHandle;</span><br><span class="line">  <span class="comment">// 鼠标点击</span></span><br><span class="line">  li[i].onclick = clickHandle;</span><br><span class="line">  <span class="comment">// 鼠标离开</span></span><br><span class="line">  li[i].onmouseout = mouseoutHandle;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="comment">// 封装点击事件移动函数</span></span><br><span class="line"><span class="comment">//设置任意的一个元素,移动到指定的目标位置</span></span><br><span class="line">fn = <span class="function">(<span class="params">element, target</span>) =&gt;</span> &#123;</span><br><span class="line">  clearInterval(element.timeId);</span><br><span class="line">  <span class="comment">//定时器的id值存储到对象的一个属性中</span></span><br><span class="line">  element.timeId = setInterval(<span class="function"><span class="keyword">function</span> (<span class="params"></span>) </span>&#123;</span><br><span class="line">    <span class="comment">//获取元素的当前的位置,数字类型</span></span><br><span class="line">    <span class="keyword">var</span> current = element.offsetLeft;</span><br><span class="line">    <span class="comment">//每次移动的距离</span></span><br><span class="line">    <span class="keyword">var</span> step = (target - current) / <span class="number">10</span>;</span><br><span class="line">    step = step &gt; <span class="number">0</span> ? <span class="built_in">Math</span>.ceil(step) : <span class="built_in">Math</span>.floor(step);</span><br><span class="line">    current += step;</span><br><span class="line">    <span class="keyword">if</span> (<span class="built_in">Math</span>.abs(current - target) &gt; <span class="built_in">Math</span>.abs(step)) &#123;</span><br><span class="line">      element.style.left = current + <span class="string">"px"</span>;</span><br><span class="line">    &#125; <span class="keyword">else</span> &#123;</span><br><span class="line">      <span class="comment">//清理定时器</span></span><br><span class="line">      clearInterval(element.timeId);</span><br><span class="line">      <span class="comment">//直接到达目标</span></span><br><span class="line">      element.style.left = target + <span class="string">"px"</span>;</span><br><span class="line">    &#125;</span><br><span class="line">  &#125;, <span class="number">20</span>);</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>]]></content>
      
      
      <categories>
          
          <category> JavaScript </category>
          
      </categories>
      
      
        <tags>
            
            <tag> js笔记/案例 </tag>
            
        </tags>
      
    </entry>
    
    <entry>
      <title>自动轮播图</title>
      <link href="/2018/08/30/2018-08-30/"/>
      <url>/2018/08/30/2018-08-30/</url>
      
        <content type="html"><![CDATA[<link rel="stylesheet" class="aplayer-secondary-style-marker" href="/assets/css/APlayer.min.css"><script src="/assets/js/APlayer.min.js" class="aplayer-secondary-script-marker"></script><h1 id="重点："><a href="#重点：" class="headerlink" title="重点："></a>重点：</h1><p>1.获取相应的元素<br>2.给元素添加上相应的事件<br>3.给事件添加相应的功能<br>4.封装函数<br>5.定时器的运用</p><h1 id="案例效果图"><a href="#案例效果图" class="headerlink" title="案例效果图"></a>案例效果图</h1><p><img src="/images/x1.png"><br><img src="/images/x2.png"></p><h2 id="素材"><a href="#素材" class="headerlink" title="素材"></a>素材</h2><p><img src="/images/1.jpg"><br><img src="/images/2.jpg"><br><img src="/images/3.jpg"><br><img src="/images/4.jpg"><br><img src="/images/5.jpg"></p><h1 id="案例代码"><a href="#案例代码" class="headerlink" title="案例代码"></a>案例代码</h1><h2 id="Css"><a href="#Css" class="headerlink" title="Css"></a>Css</h2><figure class="highlight css"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br></pre></td><td class="code"><pre><span class="line"><span class="selector-class">.wrap</span> &#123;</span><br><span class="line">            <span class="attribute">width</span>: <span class="number">500px</span>;</span><br><span class="line">            <span class="attribute">height</span>: <span class="number">200px</span>;</span><br><span class="line">            <span class="attribute">border</span>: <span class="number">5px</span> solid black;</span><br><span class="line">            <span class="attribute">position</span>: relative;</span><br><span class="line">            <span class="attribute">overflow</span>: hidden;</span><br><span class="line">            <span class="attribute">margin</span>: <span class="number">0</span> auto;</span><br><span class="line">        &#125;</span><br><span class="line"></span><br><span class="line">        <span class="selector-class">.inner</span> &#123;</span><br><span class="line">            <span class="attribute">width</span>: <span class="number">600%</span>;</span><br><span class="line">            <span class="attribute">position</span>: relative;</span><br><span class="line">        &#125;</span><br><span class="line"></span><br><span class="line">        <span class="selector-tag">img</span> &#123;</span><br><span class="line">            <span class="attribute">float</span>: left;</span><br><span class="line">        &#125;</span><br><span class="line"></span><br><span class="line">        <span class="selector-class">.wrap</span><span class="selector-pseudo">:hover</span> <span class="selector-class">.left</span>,</span><br><span class="line">        <span class="selector-class">.wrap</span><span class="selector-pseudo">:hover</span> <span class="selector-class">.right</span> &#123;</span><br><span class="line">            <span class="attribute">opacity</span>: <span class="number">1</span>;</span><br><span class="line">        &#125;</span><br><span class="line"></span><br><span class="line">        <span class="selector-class">.left</span>,</span><br><span class="line">        <span class="selector-class">.right</span> &#123;</span><br><span class="line">            <span class="attribute">position</span>: absolute;</span><br><span class="line">            <span class="attribute">top</span>: <span class="number">50%</span>;</span><br><span class="line">            <span class="attribute">color</span>: pink;</span><br><span class="line">            <span class="attribute">font-size</span>: <span class="number">30px</span>;</span><br><span class="line">            <span class="attribute">transform</span>: <span class="built_in">translateY</span>(-50%);</span><br><span class="line">            <span class="attribute">cursor</span>: pointer;</span><br><span class="line">            <span class="attribute">opacity</span>: <span class="number">0</span>;</span><br><span class="line">        &#125;</span><br><span class="line"></span><br><span class="line">        <span class="selector-class">.right</span> &#123;</span><br><span class="line">            <span class="attribute">right</span>: <span class="number">0</span>;</span><br><span class="line">        &#125;</span><br><span class="line"></span><br><span class="line">        <span class="selector-class">.an</span> &#123;</span><br><span class="line">            <span class="attribute">position</span>: absolute;</span><br><span class="line">            <span class="attribute">top</span>: <span class="number">170px</span>;</span><br><span class="line">            <span class="attribute">left</span>: <span class="number">50%</span>;</span><br><span class="line">            <span class="attribute">transform</span>: <span class="built_in">translateX</span>(-50%);</span><br><span class="line">        &#125;</span><br><span class="line"></span><br><span class="line">        <span class="selector-tag">span</span> &#123;</span><br><span class="line">            <span class="attribute">width</span>: <span class="number">10px</span>;</span><br><span class="line">            <span class="attribute">height</span>: <span class="number">10px</span>;</span><br><span class="line">            <span class="comment">/* display: inline; */</span></span><br><span class="line">            <span class="attribute">border-radius</span>: <span class="number">50%</span>;</span><br><span class="line">            <span class="attribute">background-color</span>: <span class="number">#000</span>;</span><br><span class="line">            <span class="attribute">float</span>: left;</span><br><span class="line">            <span class="attribute">margin-left</span>: <span class="number">5px</span>;</span><br><span class="line">        &#125;</span><br><span class="line"></span><br><span class="line">        <span class="selector-class">.sc</span> &#123;</span><br><span class="line">            <span class="attribute">background-color</span>: red;</span><br><span class="line">        &#125;</span><br></pre></td></tr></table></figure><h2 id="Html"><a href="#Html" class="headerlink" title="Html"></a>Html</h2><figure class="highlight html"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br></pre></td><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">div</span> <span class="attr">class</span>=<span class="string">"wrap"</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">div</span> <span class="attr">class</span>=<span class="string">"inner"</span>&gt;</span></span><br><span class="line">            <span class="tag">&lt;<span class="name">img</span> <span class="attr">src</span>=<span class="string">"images/1.jpg"</span> <span class="attr">alt</span>=<span class="string">""</span>&gt;</span></span><br><span class="line">            <span class="tag">&lt;<span class="name">img</span> <span class="attr">src</span>=<span class="string">"images/2.jpg"</span> <span class="attr">alt</span>=<span class="string">""</span>&gt;</span></span><br><span class="line">            <span class="tag">&lt;<span class="name">img</span> <span class="attr">src</span>=<span class="string">"images/3.jpg"</span> <span class="attr">alt</span>=<span class="string">""</span>&gt;</span></span><br><span class="line">            <span class="tag">&lt;<span class="name">img</span> <span class="attr">src</span>=<span class="string">"images/4.jpg"</span> <span class="attr">alt</span>=<span class="string">""</span>&gt;</span></span><br><span class="line">            <span class="tag">&lt;<span class="name">img</span> <span class="attr">src</span>=<span class="string">"images/5.jpg"</span> <span class="attr">alt</span>=<span class="string">""</span>&gt;</span></span><br><span class="line">            <span class="tag">&lt;<span class="name">img</span> <span class="attr">src</span>=<span class="string">"images/1.jpg"</span> <span class="attr">alt</span>=<span class="string">""</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;/<span class="name">div</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">div</span> <span class="attr">class</span>=<span class="string">"left"</span>&gt;</span></span><br><span class="line">            &lt; &lt;/div&gt; &lt;div class="right"&gt;</span><br><span class="line">                &gt;</span><br><span class="line">        <span class="tag">&lt;/<span class="name">div</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">div</span> <span class="attr">class</span>=<span class="string">"an"</span>&gt;</span></span><br><span class="line">            <span class="tag">&lt;<span class="name">span</span> <span class="attr">class</span>=<span class="string">"sc"</span>&gt;</span><span class="tag">&lt;/<span class="name">span</span>&gt;</span></span><br><span class="line">            <span class="tag">&lt;<span class="name">span</span>&gt;</span><span class="tag">&lt;/<span class="name">span</span>&gt;</span></span><br><span class="line">            <span class="tag">&lt;<span class="name">span</span>&gt;</span><span class="tag">&lt;/<span class="name">span</span>&gt;</span></span><br><span class="line">            <span class="tag">&lt;<span class="name">span</span>&gt;</span><span class="tag">&lt;/<span class="name">span</span>&gt;</span></span><br><span class="line">            <span class="tag">&lt;<span class="name">span</span>&gt;</span><span class="tag">&lt;/<span class="name">span</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;/<span class="name">div</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;/<span class="name">div</span>&gt;</span></span><br></pre></td></tr></table></figure><h2 id="JavaScript"><a href="#JavaScript" class="headerlink" title="JavaScript"></a>JavaScript</h2><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br><span class="line">64</span><br><span class="line">65</span><br><span class="line">66</span><br><span class="line">67</span><br><span class="line">68</span><br><span class="line">69</span><br><span class="line">70</span><br><span class="line">71</span><br><span class="line">72</span><br><span class="line">73</span><br><span class="line">74</span><br><span class="line">75</span><br><span class="line">76</span><br><span class="line">77</span><br><span class="line">78</span><br><span class="line">79</span><br><span class="line">80</span><br><span class="line">81</span><br><span class="line">82</span><br><span class="line">83</span><br><span class="line">84</span><br><span class="line">85</span><br><span class="line">86</span><br><span class="line">87</span><br><span class="line">88</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">// 获取左按钮</span></span><br><span class="line"><span class="keyword">let</span> l = <span class="built_in">document</span>.querySelector(<span class="string">".left"</span>);</span><br><span class="line"><span class="comment">// 获取右按钮</span></span><br><span class="line"><span class="keyword">let</span> r = <span class="built_in">document</span>.querySelector(<span class="string">".right"</span>);</span><br><span class="line"><span class="comment">// 图片父级</span></span><br><span class="line"><span class="keyword">let</span> inner = <span class="built_in">document</span>.querySelector(<span class="string">".inner"</span>);</span><br><span class="line"><span class="comment">// 获取span按钮</span></span><br><span class="line"><span class="keyword">let</span> span = <span class="built_in">document</span>.querySelectorAll(<span class="string">"span"</span>);</span><br><span class="line"><span class="comment">// 获取框架</span></span><br><span class="line"><span class="keyword">let</span> wrap = <span class="built_in">document</span>.querySelector(<span class="string">".wrap"</span>);</span><br><span class="line"><span class="comment">// 记录第几个</span></span><br><span class="line"><span class="keyword">let</span> index = <span class="number">0</span>;</span><br><span class="line"></span><br><span class="line"><span class="comment">// 右点击事件</span></span><br><span class="line">r.onclick = <span class="function"><span class="params">()</span> =&gt;</span> &#123;</span><br><span class="line">    index++;</span><br><span class="line">    <span class="keyword">if</span> (index &gt;= <span class="number">6</span>) &#123;</span><br><span class="line">        index = <span class="number">1</span>;</span><br><span class="line">        inner.style.left = <span class="number">0</span> + <span class="string">"px"</span>;</span><br><span class="line">    &#125;</span><br><span class="line">    chang()</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="comment">// 左点击事件</span></span><br><span class="line">l.onclick = <span class="function"><span class="params">()</span> =&gt;</span> &#123;</span><br><span class="line">    index--;</span><br><span class="line">    <span class="keyword">if</span> (index &lt; <span class="number">0</span>) &#123;</span><br><span class="line">        inner.style.left = <span class="number">-2500</span> + <span class="string">"px"</span>;</span><br><span class="line">        index = <span class="number">4</span>;</span><br><span class="line">    &#125;</span><br><span class="line">    chang()</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="comment">// 循环给sapn按钮添加点击事件</span></span><br><span class="line"><span class="keyword">for</span> (<span class="keyword">let</span> i = <span class="number">0</span>; i &lt; span.length; i++) &#123;</span><br><span class="line">    span[i].num = i;</span><br><span class="line">    span[i].onclick = <span class="function"><span class="params">()</span> =&gt;</span> &#123;</span><br><span class="line">        index = span[i].num;</span><br><span class="line">        chang();</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="comment">// 每3秒自动播放</span></span><br><span class="line"><span class="keyword">let</span> zd = setInterval(r.onclick, <span class="number">3000</span>);</span><br><span class="line"></span><br><span class="line"><span class="comment">// 鼠标进入停止播放事件</span></span><br><span class="line">wrap.onmouseover = <span class="function"><span class="params">()</span> =&gt;</span> &#123;</span><br><span class="line">    clearInterval(zd);</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="comment">// 鼠标离开继续开启鼠标点击事件</span></span><br><span class="line">wrap.onmouseout = <span class="function"><span class="params">()</span> =&gt;</span> &#123;</span><br><span class="line">    zd = setInterval(r.onclick, <span class="number">3000</span>);</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="comment">// 给按钮添加遍历和调用移动函数</span></span><br><span class="line">chang = <span class="function"><span class="params">()</span> =&gt;</span> &#123;</span><br><span class="line">    <span class="keyword">for</span> (<span class="keyword">let</span> i = <span class="number">0</span>; i &lt; span.length; i++) &#123;</span><br><span class="line">        span[i].className = <span class="string">""</span>;</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">let</span> n = index == <span class="number">5</span> ? <span class="number">0</span> : index;</span><br><span class="line">    span[n].className = <span class="string">"sc"</span>;</span><br><span class="line">    fn(inner, -index * <span class="number">500</span>);</span><br><span class="line"></span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="comment">// 封装点事件移动函数</span></span><br><span class="line"><span class="comment">//设置任意的一个元素,移动到指定的目标位置</span></span><br><span class="line">fn = <span class="function">(<span class="params">element, target</span>) =&gt;</span> &#123;</span><br><span class="line">    clearInterval(element.timeId);</span><br><span class="line">    <span class="comment">//定时器的id值存储到对象的一个属性中</span></span><br><span class="line">    element.timeId = setInterval(<span class="function"><span class="keyword">function</span> (<span class="params"></span>) </span>&#123;</span><br><span class="line">        <span class="comment">//获取元素的当前的位置,数字类型</span></span><br><span class="line">        <span class="keyword">var</span> current = element.offsetLeft;</span><br><span class="line">        <span class="comment">//每次移动的距离</span></span><br><span class="line">        <span class="keyword">var</span> step = <span class="number">20</span>;</span><br><span class="line">        step = current &lt; target ? step : -step; <span class="comment">//当前移动到位置 </span></span><br><span class="line">        current += step;</span><br><span class="line">        <span class="keyword">if</span> (<span class="built_in">Math</span>.abs(current - target) &gt; <span class="built_in">Math</span>.abs(step)) &#123;</span><br><span class="line">            element.style.left = current + <span class="string">"px"</span>;</span><br><span class="line">        &#125; <span class="keyword">else</span> &#123;</span><br><span class="line">            <span class="comment">//清理定时器</span></span><br><span class="line">            clearInterval(element.timeId);</span><br><span class="line">            <span class="comment">//直接到达目标</span></span><br><span class="line">            element.style.left = target + <span class="string">"px"</span>;</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;, <span class="number">20</span>);</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>]]></content>
      
      
      <categories>
          
          <category> JavaScript </category>
          
      </categories>
      
      
        <tags>
            
            <tag> js笔记/案例 </tag>
            
        </tags>
      
    </entry>
    
    <entry>
      <title>协议按钮/定时器小案例</title>
      <link href="/2018/08/29/2018-08-29/"/>
      <url>/2018/08/29/2018-08-29/</url>
      
        <content type="html"><![CDATA[<link rel="stylesheet" class="aplayer-secondary-style-marker" href="/assets/css/APlayer.min.css"><script src="/assets/js/APlayer.min.js" class="aplayer-secondary-script-marker"></script><h1 id="重点："><a href="#重点：" class="headerlink" title="重点："></a>重点：</h1><p>1.协议按钮<br>2.div 渐变<br>3.div 变宽<br>4.div 移动</p><p>//div要移动,要脱离文档流—position:absolute<br>//如果样式的代码是在style的标签中设置,外面是获取不到<br>//如果样式的代码是在style的属性设置,外面是可以获取<br>//获取div的当前位置<br>//console.log(div.offsetLeft);</p><h1 id="协议按钮"><a href="#协议按钮" class="headerlink" title="协议按钮"></a>协议按钮</h1><h3 id="Html"><a href="#Html" class="headerlink" title="Html"></a>Html</h3><figure class="highlight html"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">textarea</span> <span class="attr">name</span>=<span class="string">"texta"</span> <span class="attr">id</span>=<span class="string">""</span> <span class="attr">cols</span>=<span class="string">"30"</span> <span class="attr">rows</span>=<span class="string">"10"</span>&gt;</span></span><br><span class="line">    这个世界就是这么疯狂，你不同意我就不给你注册</span><br><span class="line"><span class="tag">&lt;/<span class="name">textarea</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">input</span> <span class="attr">type</span>=<span class="string">"button"</span> <span class="attr">value</span>=<span class="string">"请仔细阅读协议(5)"</span> <span class="attr">disabled</span>&gt;</span></span><br></pre></td></tr></table></figure><h3 id="Js"><a href="#Js" class="headerlink" title="Js"></a>Js</h3><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">let</span> btn = <span class="built_in">document</span>.querySelector(<span class="string">"input"</span>);</span><br><span class="line"><span class="keyword">let</span> time = <span class="number">5</span>;</span><br><span class="line"><span class="keyword">let</span> tim = setInterval(<span class="function"><span class="params">()</span> =&gt;</span> &#123;</span><br><span class="line">    time--;</span><br><span class="line">    btn.value = <span class="string">"请仔细阅读协议("</span> + time + <span class="string">")"</span>;</span><br><span class="line">    <span class="keyword">if</span> (time &lt;= <span class="number">0</span>) &#123;</span><br><span class="line">        clearInterval(tim);</span><br><span class="line">        btn.disabled = <span class="literal">false</span>;</span><br><span class="line">        btn.value = <span class="string">"同意协议"</span>;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;, <span class="number">1000</span>)</span><br></pre></td></tr></table></figure><h1 id="渐变"><a href="#渐变" class="headerlink" title="渐变"></a>渐变</h1><h3 id="Css"><a href="#Css" class="headerlink" title="Css"></a>Css</h3><figure class="highlight css"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line"><span class="selector-tag">div</span> &#123;</span><br><span class="line">    <span class="attribute">width</span>: <span class="number">300px</span>;</span><br><span class="line">    <span class="attribute">height</span>: <span class="number">200px</span>;</span><br><span class="line">    <span class="attribute">background-color</span>: pink;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h3 id="Html-1"><a href="#Html-1" class="headerlink" title="Html"></a>Html</h3><figure class="highlight html"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">div</span>&gt;</span></span><br><span class="line"></span><br><span class="line"><span class="tag">&lt;/<span class="name">div</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">input</span> <span class="attr">type</span>=<span class="string">"button"</span> <span class="attr">value</span>=<span class="string">"透明"</span>&gt;</span></span><br></pre></td></tr></table></figure><h3 id="Js-1"><a href="#Js-1" class="headerlink" title="Js"></a>Js</h3><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">let</span> dv = <span class="built_in">document</span>.querySelector(<span class="string">"div"</span>);</span><br><span class="line">    <span class="keyword">let</span> btn = <span class="built_in">document</span>.querySelector(<span class="string">"input"</span>);</span><br><span class="line">    <span class="keyword">let</span> opacity = <span class="number">10</span>;</span><br><span class="line">    btn.onclick = <span class="function"><span class="params">()</span> =&gt;</span> &#123;</span><br><span class="line">        <span class="keyword">let</span> time = setInterval(<span class="function"><span class="params">()</span> =&gt;</span> &#123;</span><br><span class="line">            opacity--;</span><br><span class="line">            dv.style.opacity = opacity / <span class="number">10</span>;</span><br><span class="line">            <span class="keyword">if</span> (opacity&lt;=<span class="number">0</span>) &#123;</span><br><span class="line">                clearInterval(time);<span class="comment">//清理定时器</span></span><br><span class="line">            &#125;</span><br><span class="line">        &#125;, <span class="number">200</span>)</span><br><span class="line">    &#125;</span><br></pre></td></tr></table></figure><h1 id="变宽"><a href="#变宽" class="headerlink" title="变宽"></a>变宽</h1><h3 id="Css-1"><a href="#Css-1" class="headerlink" title="Css"></a>Css</h3><figure class="highlight css"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br></pre></td><td class="code"><pre><span class="line">* &#123;</span><br><span class="line">    <span class="attribute">margin</span>: <span class="number">0</span>;</span><br><span class="line">    <span class="attribute">padding</span>: <span class="number">0</span>;</span><br><span class="line">&#125;</span><br><span class="line"><span class="selector-tag">div</span> &#123;</span><br><span class="line">    <span class="attribute">width</span>: <span class="number">200px</span>;</span><br><span class="line">    <span class="attribute">height</span>: <span class="number">100px</span>;</span><br><span class="line">    <span class="attribute">background-color</span>: pink;</span><br><span class="line">    </span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h3 id="Html-2"><a href="#Html-2" class="headerlink" title="Html"></a>Html</h3><figure class="highlight html"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">input</span> <span class="attr">type</span>=<span class="string">"button"</span> <span class="attr">value</span>=<span class="string">"变宽"</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">input</span> <span class="attr">type</span>=<span class="string">"button"</span> <span class="attr">value</span>=<span class="string">"停止变宽"</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">input</span> <span class="attr">type</span>=<span class="string">"button"</span> <span class="attr">value</span>=<span class="string">"变窄"</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">hr</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">input</span> <span class="attr">type</span>=<span class="string">"button"</span> <span class="attr">value</span>=<span class="string">"变长"</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">input</span> <span class="attr">type</span>=<span class="string">"button"</span> <span class="attr">value</span>=<span class="string">"停止变长"</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">input</span> <span class="attr">type</span>=<span class="string">"button"</span> <span class="attr">value</span>=<span class="string">"变短"</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">div</span>&gt;</span><span class="tag">&lt;/<span class="name">div</span>&gt;</span></span><br></pre></td></tr></table></figure><h3 id="Js-2"><a href="#Js-2" class="headerlink" title="Js"></a>Js</h3><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br><span class="line">64</span><br><span class="line">65</span><br><span class="line">66</span><br><span class="line">67</span><br><span class="line">68</span><br><span class="line">69</span><br><span class="line">70</span><br><span class="line">71</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">let</span> btn = <span class="built_in">document</span>.querySelectorAll(<span class="string">"input"</span>);</span><br><span class="line"><span class="keyword">let</span> dv = <span class="built_in">document</span>.querySelector(<span class="string">"div"</span>);</span><br><span class="line"><span class="keyword">let</span> w = <span class="number">200</span>;</span><br><span class="line"><span class="keyword">let</span> h = <span class="number">100</span>;</span><br><span class="line"><span class="keyword">let</span> time = <span class="literal">null</span>;</span><br><span class="line"><span class="keyword">let</span> time1 = <span class="literal">null</span>;</span><br><span class="line"></span><br><span class="line"><span class="keyword">let</span> bol = <span class="literal">false</span>;</span><br><span class="line"><span class="keyword">let</span> bol1 = <span class="literal">false</span>;</span><br><span class="line"></span><br><span class="line">btn[<span class="number">0</span>].onclick = <span class="function"><span class="params">()</span> =&gt;</span> &#123;</span><br><span class="line">    <span class="keyword">if</span> (bol) &#123;</span><br><span class="line">        <span class="keyword">return</span>;</span><br><span class="line">    &#125;</span><br><span class="line">    bol = <span class="literal">true</span>;</span><br><span class="line">    time = setInterval(<span class="function"><span class="params">()</span> =&gt;</span> &#123;</span><br><span class="line">        w++;</span><br><span class="line">        dv.style.width = w + <span class="string">"px"</span>;</span><br><span class="line">    &#125;, <span class="number">20</span>)</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line">btn[<span class="number">1</span>].onclick = <span class="function"><span class="params">()</span> =&gt;</span> &#123;</span><br><span class="line">    bol = <span class="literal">false</span>;</span><br><span class="line">    clearInterval(time);</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line">btn[<span class="number">2</span>].onclick = <span class="function"><span class="params">()</span> =&gt;</span> &#123;</span><br><span class="line">    <span class="keyword">if</span> (bol) &#123;</span><br><span class="line">        <span class="keyword">return</span>;</span><br><span class="line">    &#125;</span><br><span class="line">    bol = <span class="literal">true</span>;</span><br><span class="line">    time = setInterval(<span class="function"><span class="params">()</span> =&gt;</span> &#123;</span><br><span class="line">        w--;</span><br><span class="line">        dv.style.width = w + <span class="string">"px"</span>;</span><br><span class="line">        <span class="keyword">if</span> (w &lt;= <span class="number">0</span>) &#123;</span><br><span class="line">            bol = <span class="literal">false</span>;</span><br><span class="line">            clearInterval(time);</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;, <span class="number">20</span>)</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line">btn[<span class="number">3</span>].onclick = <span class="function"><span class="params">()</span> =&gt;</span> &#123;</span><br><span class="line">    <span class="keyword">if</span> (bol1) &#123;</span><br><span class="line">        <span class="keyword">return</span>;</span><br><span class="line">    &#125;</span><br><span class="line">    bol1 = <span class="literal">true</span>;</span><br><span class="line">    time1 = setInterval(<span class="function"><span class="params">()</span> =&gt;</span> &#123;</span><br><span class="line">        h++;</span><br><span class="line">        dv.style.height = h + <span class="string">"px"</span>;</span><br><span class="line">    &#125;, <span class="number">20</span>)</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line">btn[<span class="number">4</span>].onclick = <span class="function"><span class="params">()</span> =&gt;</span> &#123;</span><br><span class="line">    bol1 = <span class="literal">false</span>;</span><br><span class="line">    clearInterval(time1);</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line">btn[<span class="number">5</span>].onclick = <span class="function"><span class="params">()</span> =&gt;</span> &#123;</span><br><span class="line">    <span class="keyword">if</span> (bol1) &#123;</span><br><span class="line">        <span class="keyword">return</span>;</span><br><span class="line">    &#125;</span><br><span class="line">    bol1 = <span class="literal">true</span>;</span><br><span class="line">    time1 = setInterval(<span class="function"><span class="params">()</span> =&gt;</span> &#123;</span><br><span class="line">        h--;</span><br><span class="line">        dv.style.height = h + <span class="string">"px"</span>;</span><br><span class="line">        <span class="keyword">if</span> (h &lt;= <span class="number">0</span>) &#123;</span><br><span class="line">            bol1 = <span class="literal">false</span>;</span><br><span class="line">            clearInterval(time1);</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;, <span class="number">20</span>)</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h1 id="移动"><a href="#移动" class="headerlink" title="移动"></a>移动</h1><h3 id="Css-2"><a href="#Css-2" class="headerlink" title="Css"></a>Css</h3><figure class="highlight css"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br></pre></td><td class="code"><pre><span class="line">* &#123;</span><br><span class="line">    <span class="attribute">margin</span>: <span class="number">0</span>;</span><br><span class="line">    <span class="attribute">padding</span>: <span class="number">0</span>;</span><br><span class="line">&#125;</span><br><span class="line"><span class="selector-tag">div</span> &#123;</span><br><span class="line">    <span class="attribute">width</span>: <span class="number">200px</span>;</span><br><span class="line">    <span class="attribute">height</span>: <span class="number">100px</span>;</span><br><span class="line">    <span class="attribute">background-color</span>: pink;</span><br><span class="line">    <span class="attribute">position</span>: absolute;</span><br><span class="line">    <span class="attribute">top</span>: <span class="number">40px</span>;</span><br><span class="line">    <span class="attribute">left</span>: <span class="number">0</span>;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h3 id="Html-3"><a href="#Html-3" class="headerlink" title="Html"></a>Html</h3><figure class="highlight html"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">input</span> <span class="attr">type</span>=<span class="string">"button"</span> <span class="attr">value</span>=<span class="string">"向右移动600px"</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">input</span> <span class="attr">type</span>=<span class="string">"button"</span> <span class="attr">value</span>=<span class="string">"向左移动600px"</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">input</span> <span class="attr">type</span>=<span class="string">"button"</span> <span class="attr">value</span>=<span class="string">"向上移动600px"</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">input</span> <span class="attr">type</span>=<span class="string">"button"</span> <span class="attr">value</span>=<span class="string">"向下移动600px"</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">div</span>&gt;</span></span><br><span class="line"></span><br><span class="line"><span class="tag">&lt;/<span class="name">div</span>&gt;</span></span><br></pre></td></tr></table></figure><h3 id="Js-3"><a href="#Js-3" class="headerlink" title="Js"></a>Js</h3><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">let</span> btn = <span class="built_in">document</span>.querySelectorAll(<span class="string">"input"</span>);</span><br><span class="line"><span class="keyword">let</span> dv = <span class="built_in">document</span>.querySelector(<span class="string">"div"</span>);</span><br><span class="line"></span><br><span class="line"><span class="keyword">let</span> time = <span class="literal">null</span>;</span><br><span class="line"><span class="keyword">let</span> bol = <span class="literal">false</span>;</span><br><span class="line"><span class="keyword">let</span> x = <span class="string">"x"</span>;</span><br><span class="line"><span class="keyword">let</span> y = <span class="string">"y"</span>;</span><br><span class="line"><span class="keyword">let</span> d;</span><br><span class="line"></span><br><span class="line">fn = <span class="function">(<span class="params">t, h, l</span>) =&gt;</span> &#123;</span><br><span class="line">    <span class="keyword">if</span> (bol) &#123;</span><br><span class="line">        <span class="keyword">return</span>;</span><br><span class="line">    &#125;</span><br><span class="line">    bol = <span class="literal">true</span>;</span><br><span class="line">    <span class="keyword">if</span> (t == x) &#123;</span><br><span class="line">        d = dv.offsetLeft;</span><br><span class="line">    &#125; <span class="keyword">else</span> &#123;</span><br><span class="line">        d = dv.offsetTop;</span><br><span class="line">    &#125;</span><br><span class="line">    time = setInterval(<span class="function"><span class="params">()</span> =&gt;</span> &#123;</span><br><span class="line">        <span class="keyword">if</span> (h == <span class="number">0</span>) &#123;</span><br><span class="line">            d++;</span><br><span class="line">        &#125; <span class="keyword">else</span> <span class="keyword">if</span> (h == <span class="number">1</span>) &#123;</span><br><span class="line">            d--;</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="keyword">if</span> (t == x) &#123;</span><br><span class="line">            dv.style.left = d + <span class="string">"px"</span>;</span><br><span class="line">        &#125; <span class="keyword">else</span> &#123;</span><br><span class="line">            dv.style.top = d + <span class="string">"px"</span>;</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="keyword">if</span> (d % l == <span class="number">0</span> || d &lt;= <span class="number">0</span>) &#123;</span><br><span class="line">            clearInterval(time);</span><br><span class="line">            bol = <span class="literal">false</span>;</span><br><span class="line">        &#125; <span class="keyword">else</span> <span class="keyword">if</span> (t == y &amp;&amp; d &lt;= <span class="number">40</span>) &#123;</span><br><span class="line">            clearInterval(time);</span><br><span class="line">            bol = <span class="literal">false</span>;</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;, <span class="number">20</span>)</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"></span><br><span class="line">btn[<span class="number">0</span>].onclick = <span class="function"><span class="params">()</span> =&gt;</span> &#123;</span><br><span class="line">    fn(x, <span class="number">0</span>, <span class="number">600</span>);</span><br><span class="line">&#125;</span><br><span class="line">btn[<span class="number">1</span>].onclick = <span class="function"><span class="params">()</span> =&gt;</span> &#123;</span><br><span class="line">    fn(x, <span class="number">1</span>, <span class="number">600</span>);</span><br><span class="line">&#125;</span><br><span class="line">btn[<span class="number">2</span>].onclick = <span class="function"><span class="params">()</span> =&gt;</span> &#123;</span><br><span class="line">    fn(y, <span class="number">1</span>, <span class="number">600</span>);</span><br><span class="line">&#125;</span><br><span class="line">btn[<span class="number">3</span>].onclick = <span class="function"><span class="params">()</span> =&gt;</span> &#123;</span><br><span class="line">    fn(y, <span class="number">0</span>, <span class="number">600</span>);</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>]]></content>
      
      
      <categories>
          
          <category> JavaScript </category>
          
      </categories>
      
      
        <tags>
            
            <tag> js笔记/案例 </tag>
            
        </tags>
      
    </entry>
    
    <entry>
      <title>BOM 浏览器</title>
      <link href="/2018/08/28/2018-08-28/"/>
      <url>/2018/08/28/2018-08-28/</url>
      
        <content type="html"><![CDATA[<link rel="stylesheet" class="aplayer-secondary-style-marker" href="/assets/css/APlayer.min.css"><script src="/assets/js/APlayer.min.js" class="aplayer-secondary-script-marker"></script><h3 id="重点："><a href="#重点：" class="headerlink" title="重点："></a>重点：</h3><p>1.location 主机<br>2.history<br>3.navigator 判断浏览器所在系统<br>4.window.onload 页面加载完成<br>5.定时器 </p><h3 id="history"><a href="#history" class="headerlink" title="history"></a>history</h3><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br></pre></td><td class="code"><pre><span class="line"><span class="built_in">window</span>.onload = <span class="function"><span class="keyword">function</span> (<span class="params"></span>) </span>&#123;</span><br><span class="line">    <span class="keyword">let</span> btn = <span class="built_in">document</span>.querySelectorAll(<span class="string">"input"</span>);</span><br><span class="line"></span><br><span class="line">    btn[<span class="number">0</span>].onclick = <span class="function"><span class="keyword">function</span> (<span class="params"></span>) </span>&#123;</span><br><span class="line">        <span class="built_in">window</span>.location.href = <span class="string">"9_tui.html"</span>;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="comment">// 方法一</span></span><br><span class="line">    <span class="comment">// btn[1].onclick = function () &#123;</span></span><br><span class="line">    <span class="comment">//     window.history.forward();</span></span><br><span class="line">    <span class="comment">// &#125;</span></span><br><span class="line"></span><br><span class="line">    <span class="comment">// 方法二</span></span><br><span class="line">    btn[<span class="number">1</span>].onclick = <span class="function"><span class="keyword">function</span> (<span class="params"></span>) </span>&#123;</span><br><span class="line">        <span class="built_in">window</span>.history.go(<span class="number">1</span>);</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br></pre></td><td class="code"><pre><span class="line"><span class="built_in">window</span>.onload = <span class="function"><span class="keyword">function</span> (<span class="params"></span>) </span>&#123;</span><br><span class="line">    <span class="keyword">let</span> btn = <span class="built_in">document</span>.querySelector(<span class="string">"input"</span>);</span><br><span class="line">    <span class="comment">// 方法一</span></span><br><span class="line">    <span class="comment">// btn.onclick = function () &#123;</span></span><br><span class="line">    <span class="comment">//     window.history.back();</span></span><br><span class="line">    <span class="comment">// &#125;</span></span><br><span class="line"></span><br><span class="line">    <span class="comment">// 方法二</span></span><br><span class="line">    btn.onclick = <span class="function"><span class="keyword">function</span> (<span class="params"></span>) </span>&#123;</span><br><span class="line">        <span class="built_in">window</span>.history.go(<span class="number">-1</span>);</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h3 id="navigator"><a href="#navigator" class="headerlink" title="navigator"></a>navigator</h3><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">// 通过 platform 可以判断浏览器所在打系统平台类型</span></span><br><span class="line"><span class="built_in">console</span>.log(<span class="built_in">window</span>.navigator.platform);</span><br><span class="line"><span class="comment">//</span></span><br><span class="line"><span class="built_in">console</span>.log(<span class="built_in">window</span>.navigator.userAgent);</span><br></pre></td></tr></table></figure><h3 id="定时器一"><a href="#定时器一" class="headerlink" title="定时器一"></a>定时器一</h3><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">//定义开启定时器 setInterval</span></span><br><span class="line"><span class="keyword">let</span> time = setInterval(<span class="function"><span class="keyword">function</span> (<span class="params"></span>) </span>&#123;</span><br><span class="line">    <span class="built_in">console</span>.log(<span class="string">"ss"</span>);</span><br><span class="line">&#125;,<span class="number">1000</span>)</span><br><span class="line"></span><br><span class="line"><span class="comment">//关闭定时器 clearInterval</span></span><br><span class="line">btn.onclick = <span class="function"><span class="keyword">function</span> (<span class="params"></span>) </span>&#123;</span><br><span class="line">    <span class="built_in">window</span>.clearInterval(time);</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h3 id="定时器二-一次性定时器"><a href="#定时器二-一次性定时器" class="headerlink" title="定时器二 一次性定时器"></a>定时器二 一次性定时器</h3><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">let</span> btn = <span class="built_in">document</span>.querySelector(<span class="string">"input"</span>);</span><br><span class="line"><span class="comment">// 一次性定时器</span></span><br><span class="line"><span class="keyword">let</span> time = setTimeout(<span class="function"><span class="params">()</span> =&gt;</span> &#123;</span><br><span class="line">    alert(<span class="string">"你好"</span>);</span><br><span class="line">&#125;, <span class="number">1000</span>);</span><br><span class="line"><span class="comment">// 清理定时器</span></span><br><span class="line">btn.onclick = <span class="function"><span class="params">()</span> =&gt;</span> &#123;</span><br><span class="line">    clearTimeout(time)</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h2 id="小案例1"><a href="#小案例1" class="headerlink" title="小案例1"></a>小案例1</h2><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br></pre></td><td class="code"><pre><span class="line">&lt;!DOCTYPE html&gt;</span><br><span class="line">&lt;html lang=&quot;en&quot;&gt;</span><br><span class="line"></span><br><span class="line">&lt;head&gt;</span><br><span class="line">    &lt;meta charset=&quot;UTF-8&quot;&gt;</span><br><span class="line">    &lt;meta name=&quot;viewport&quot; content=&quot;width=device-width, initial-scale=1.0&quot;&gt;</span><br><span class="line">    &lt;meta http-equiv=&quot;X-UA-Compatible&quot; content=&quot;ie=edge&quot;&gt;</span><br><span class="line">    &lt;title&gt;Document&lt;/title&gt;</span><br><span class="line"></span><br><span class="line">    &lt;style&gt;</span><br><span class="line">        div &#123;</span><br><span class="line">            width: 600px;</span><br><span class="line">            height: 600px;</span><br><span class="line">            border: 2px solid pink;</span><br><span class="line">            background-color: #000;</span><br><span class="line">            position: relative;</span><br><span class="line">        &#125;</span><br><span class="line">        span &#123;</span><br><span class="line">            font-size: 30px;</span><br><span class="line">            color: yellow;</span><br><span class="line">            position: absolute;</span><br><span class="line">        &#125;</span><br><span class="line">    &lt;/style&gt;</span><br><span class="line"></span><br><span class="line">&lt;/head&gt;</span><br><span class="line"></span><br><span class="line">&lt;body&gt;</span><br><span class="line">    &lt;input type=&quot;button&quot; value=&quot;亮起来&quot;&gt;</span><br><span class="line">    &lt;div&gt;</span><br><span class="line"></span><br><span class="line">    &lt;/div&gt;</span><br><span class="line">&lt;/body&gt;</span><br><span class="line"></span><br><span class="line">&lt;script&gt;</span><br><span class="line">    let btn = document.querySelector(&quot;input&quot;);</span><br><span class="line">    let div = document.querySelector(&quot;div&quot;);</span><br><span class="line">    let time = null;</span><br><span class="line"></span><br><span class="line">    btn.onclick = function () &#123;</span><br><span class="line">        div.innerHTML = &quot;&lt;span&gt;⭐️&lt;/span&gt;&quot;;</span><br><span class="line">        time = setInterval(function () &#123;</span><br><span class="line">            let x = parseInt(Math.random() * 600 + 1);</span><br><span class="line">            let y = parseInt(Math.random() * 600 + 1);</span><br><span class="line">            div.firstElementChild.style.left = x + &quot;px&quot;;</span><br><span class="line">            div.firstElementChild.style.top = y + &quot;px&quot;;</span><br><span class="line">        &#125;, 500);</span><br><span class="line">    &#125;</span><br><span class="line">&lt;/script&gt;</span><br><span class="line"></span><br><span class="line">&lt;/html&gt;</span><br></pre></td></tr></table></figure><h2 id="小案例2"><a href="#小案例2" class="headerlink" title="小案例2"></a>小案例2</h2><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br></pre></td><td class="code"><pre><span class="line">&lt;!DOCTYPE html&gt;</span><br><span class="line">&lt;html lang=&quot;en&quot;&gt;</span><br><span class="line"></span><br><span class="line">&lt;head&gt;</span><br><span class="line">    &lt;meta charset=&quot;UTF-8&quot;&gt;</span><br><span class="line">    &lt;meta name=&quot;viewport&quot; content=&quot;width=device-width, initial-scale=1.0&quot;&gt;</span><br><span class="line">    &lt;meta http-equiv=&quot;X-UA-Compatible&quot; content=&quot;ie=edge&quot;&gt;</span><br><span class="line">    &lt;title&gt;Document&lt;/title&gt;</span><br><span class="line"></span><br><span class="line">    &lt;style&gt;</span><br><span class="line">        span &#123;</span><br><span class="line">            font-size: 30px;</span><br><span class="line">            color: red;</span><br><span class="line">            position: absolute;</span><br><span class="line">            top: 500px</span><br><span class="line">        &#125;</span><br><span class="line">    &lt;/style&gt;</span><br><span class="line"></span><br><span class="line">&lt;/head&gt;</span><br><span class="line"></span><br><span class="line">&lt;body&gt;</span><br><span class="line">    &lt;img src=&quot;&quot; alt=&quot;&quot;&gt;</span><br><span class="line">    &lt;div class=&quot;dv&quot;&gt;</span><br><span class="line">        &lt;span&gt;&lt;/span&gt;</span><br><span class="line">    &lt;/div&gt;</span><br><span class="line">&lt;/body&gt;</span><br><span class="line"></span><br><span class="line">&lt;script&gt;</span><br><span class="line">    f1 = () =&gt; &#123;</span><br><span class="line">        let dv = document.querySelector(&quot;.dv&quot;);</span><br><span class="line">        let span = document.querySelector(&quot;span&quot;);</span><br><span class="line">        let dt = new Date();</span><br><span class="line">        let img = document.querySelector(&quot;img&quot;);</span><br><span class="line"></span><br><span class="line">        let nian = dt.getFullYear(); //获取完整的年份(4位,1970-????)</span><br><span class="line">        let yue = dt.getMonth() + 1; //获取当前月份(0-11,0代表1月)</span><br><span class="line">        let ri = dt.getDate(); //获取当前日(1-31)</span><br><span class="line">        let hour = dt.getHours(); //获取当前小时数(0-23)</span><br><span class="line">        let fen = dt.getMinutes(); //获取当前分钟数(0-59)</span><br><span class="line">        let second = dt.getSeconds(); //获取当前秒数(0-59)</span><br><span class="line"></span><br><span class="line">        yue = yue &lt; 10 ? &quot;0&quot; + yue : yue;</span><br><span class="line">        ri = ri &lt; 10 ? &quot;0&quot; + ri : ri;</span><br><span class="line">        fen = fen &lt; 10 ? &quot;0&quot; + fen : fen;</span><br><span class="line">        hour = hour &lt; 10 ? &quot;0&quot; + hour : hour;</span><br><span class="line">        second = second &lt; 10 ? &quot;0&quot; + second : second;</span><br><span class="line">        img.src = &quot;meimei/&quot; + hour + &quot;_&quot; + second + &quot;.jpg&quot;;</span><br><span class="line">        let aa = nian + &quot;年&quot; + yue + &quot;月&quot; + ri + &quot;日&quot; + hour + &quot;时&quot; + fen + &quot;分&quot; + second + &quot;秒&quot;;</span><br><span class="line">        span.innerText = aa;</span><br><span class="line">        // dv.innerHTML = &quot;&lt;span&gt;ss&lt;/span&gt;&quot;</span><br><span class="line">        console.log(aa);</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    setInterval(f1, 1000);</span><br><span class="line">&lt;/script&gt;</span><br><span class="line"></span><br><span class="line">&lt;/html&gt;</span><br></pre></td></tr></table></figure>]]></content>
      
      
      <categories>
          
          <category> JavaScript </category>
          
      </categories>
      
      
        <tags>
            
            <tag> js笔记/案例 </tag>
            
        </tags>
      
    </entry>
    
    <entry>
      <title>模拟百度搜索</title>
      <link href="/2018/08/27/2018-08-27/"/>
      <url>/2018/08/27/2018-08-27/</url>
      
        <content type="html"><![CDATA[<link rel="stylesheet" class="aplayer-secondary-style-marker" href="/assets/css/APlayer.min.css"><script src="/assets/js/APlayer.min.js" class="aplayer-secondary-script-marker"></script><p>重点：<br>1.创建元素，添加元素，移除元素 document.createElement(“p”)   上级名.removeChild(删除的元素名);   添加到的元素名例（arr数组等）.push(追加元素)<br>2.判读获取文本框内容与数组对比 indexOf()<br>3.判断元素是否为空不为空删除<br>4.遍历数组</p><h2 id="Html"><a href="#Html" class="headerlink" title="Html"></a>Html</h2><figure class="highlight html"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">div</span> <span class="attr">class</span>=<span class="string">"box"</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">input</span> <span class="attr">type</span>=<span class="string">"text"</span> <span class="attr">class</span>=<span class="string">"txt"</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">input</span> <span class="attr">class</span>=<span class="string">"btn"</span> <span class="attr">type</span>=<span class="string">"submit"</span> <span class="attr">value</span>=<span class="string">"搜索"</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">div</span>&gt;</span></span><br></pre></td></tr></table></figure><h2 id="Css"><a href="#Css" class="headerlink" title="Css"></a>Css</h2><figure class="highlight css"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br></pre></td><td class="code"><pre><span class="line">* &#123;</span><br><span class="line">    <span class="attribute">padding</span>: <span class="number">0</span>;</span><br><span class="line">    <span class="attribute">margin</span>: <span class="number">0</span>;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="selector-class">.box</span> &#123;</span><br><span class="line">    <span class="attribute">position</span>: relative;</span><br><span class="line">    <span class="attribute">left</span>: <span class="number">50%</span>;</span><br><span class="line">    <span class="attribute">top</span>: <span class="number">200px</span>;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="selector-class">.txt</span> &#123;</span><br><span class="line">    <span class="attribute">width</span>: <span class="number">300px</span>;</span><br><span class="line">    <span class="attribute">height</span>: <span class="number">30px</span>;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="selector-class">.btn</span> &#123;</span><br><span class="line">    <span class="attribute">width</span>: <span class="number">100px</span>;</span><br><span class="line">    <span class="attribute">height</span>: <span class="number">35px</span>;</span><br><span class="line">    <span class="attribute">border</span>: <span class="number">1px</span> solid <span class="number">#000</span>;</span><br><span class="line">    <span class="attribute">background-color</span>: <span class="number">#fff</span>;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="selector-tag">p</span> &#123;</span><br><span class="line">    <span class="attribute">margin</span>: <span class="number">5px</span> <span class="number">0</span>;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h2 id="js"><a href="#js" class="headerlink" title="js"></a>js</h2><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">// 获取数据</span></span><br><span class="line"><span class="keyword">let</span> box = <span class="built_in">document</span>.querySelector(<span class="string">".box"</span>);</span><br><span class="line"><span class="keyword">let</span> txt = <span class="built_in">document</span>.querySelector(<span class="string">".txt"</span>);</span><br><span class="line"><span class="keyword">let</span> btn = <span class="built_in">document</span>.querySelector(<span class="string">".btn"</span>);</span><br><span class="line"></span><br><span class="line"><span class="comment">// 数组记录数据</span></span><br><span class="line"><span class="comment">// 本应后台获取</span></span><br><span class="line"><span class="comment">// 前端测试用数组代替</span></span><br><span class="line"><span class="keyword">let</span> keyWords = [<span class="string">"我是你爸爸"</span>, <span class="string">"我是你爸爸"</span>, <span class="string">"我是你爸爸"</span>, <span class="string">"我是你爸爸"</span>, <span class="string">"我的你爸爸"</span>, <span class="string">"儿子"</span>,<span class="string">"小杨才是最纯洁的"</span>, <span class="string">"小杨才是最帅的"</span>, <span class="string">"小段是最猥琐的"</span>, <span class="string">"小超是最龌龊的"</span>, <span class="string">"传智播客是一个培训机构"</span>, <span class="string">"传说在传智有个很帅很纯洁的小杨"</span>, <span class="string">"苹果好吃"</span>, <span class="string">"苹果此次召回还是没有中国"</span>];</span><br><span class="line"></span><br><span class="line"><span class="comment">// 文本框键盘抬起函数</span></span><br><span class="line">txt.onkeyup = <span class="function"><span class="keyword">function</span> (<span class="params"></span>) </span>&#123;</span><br><span class="line"></span><br><span class="line">    <span class="comment">// 判断是否有新创建id为obj的div元素，有就清除</span></span><br><span class="line">    <span class="keyword">if</span> ((<span class="built_in">document</span>.querySelector(<span class="string">"#obj"</span>))) &#123;</span><br><span class="line">        box.removeChild((<span class="built_in">document</span>.querySelector(<span class="string">"#obj"</span>)));</span><br><span class="line">    &#125;</span><br><span class="line">    </span><br><span class="line">    <span class="comment">// 定义现在文本框的内容</span></span><br><span class="line">    <span class="keyword">let</span> text = <span class="keyword">this</span>.value;</span><br><span class="line">    <span class="comment">// 临时数组记录数据</span></span><br><span class="line">    <span class="keyword">let</span> arr = [];</span><br><span class="line">    <span class="keyword">for</span> (<span class="keyword">let</span> i = <span class="number">0</span>; i &lt; keyWords.length; i++) &#123;</span><br><span class="line">        <span class="comment">// 是否是最开始出现</span></span><br><span class="line">        <span class="keyword">if</span> (keyWords[i].indexOf(text) == <span class="number">0</span>) &#123;</span><br><span class="line">            arr.push(keyWords[i]); <span class="comment">//追加到临时数组</span></span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line">    </span><br><span class="line">    <span class="comment">// 判断文本框或者临时数组为空时，在判断创建id为obj的div元素，有就清除，并且停止后面的代码运行</span></span><br><span class="line">    <span class="keyword">if</span> (<span class="keyword">this</span>.value.length == <span class="number">0</span> || arr.length == <span class="number">0</span>) &#123;</span><br><span class="line">        <span class="keyword">if</span> ((<span class="built_in">document</span>.querySelector(<span class="string">"#obj"</span>))) &#123;</span><br><span class="line">            box.removeChild((<span class="built_in">document</span>.querySelector(<span class="string">"#obj"</span>)));</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="keyword">return</span>;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="comment">// 创建div，加入到box中</span></span><br><span class="line">    <span class="keyword">let</span> obj = <span class="built_in">document</span>.createElement(<span class="string">"div"</span>);</span><br><span class="line">    <span class="comment">// 添加到类名为box的div中</span></span><br><span class="line">    box.appendChild(obj);</span><br><span class="line">    <span class="comment">// 设置id为obj</span></span><br><span class="line">    obj.id = <span class="string">"obj"</span>;</span><br><span class="line">    <span class="comment">// 设置样式</span></span><br><span class="line">    obj.style.width = <span class="string">"300px"</span>;</span><br><span class="line">    obj.style.border = <span class="string">"1px solid red"</span>;</span><br><span class="line">    </span><br><span class="line">    <span class="comment">// 循环遍历临时数组，并创建p标签输出数组的内容</span></span><br><span class="line">    <span class="keyword">for</span> (<span class="keyword">let</span> i = <span class="number">0</span>; i &lt; arr.length; i++) &#123;</span><br><span class="line">        <span class="keyword">let</span> p = <span class="built_in">document</span>.createElement(<span class="string">"p"</span>);</span><br><span class="line">        obj.appendChild(p);</span><br><span class="line">        p.innerText = arr[i];</span><br><span class="line">        </span><br><span class="line">        <span class="comment">// 定义p标签的鼠标进入和离开事件，改变背景颜色</span></span><br><span class="line">        p.onmouseover = <span class="function"><span class="keyword">function</span> (<span class="params"></span>) </span>&#123;</span><br><span class="line">            <span class="keyword">this</span>.style.backgroundColor = <span class="string">"yellow"</span>;</span><br><span class="line">        &#125;</span><br><span class="line">        p.onmouseout = <span class="function"><span class="keyword">function</span> (<span class="params"></span>) </span>&#123;</span><br><span class="line">            <span class="keyword">this</span>.style.backgroundColor = <span class="string">""</span>;</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h2 id="效果"><a href="#效果" class="headerlink" title="效果"></a>效果</h2><p><img src="/media/baidu1.png" alt="“有输入数据”"><br><img src="/media/baidu2.png" alt="“无输入数据”"></p>]]></content>
      
      
      <categories>
          
          <category> JavaScript </category>
          
      </categories>
      
      
        <tags>
            
            <tag> js笔记/案例 </tag>
            
        </tags>
      
    </entry>
    
    <entry>
      <title>js 事件绑/解 阻止事件冒泡</title>
      <link href="/2018/08/25/2018-08-25/"/>
      <url>/2018/08/25/2018-08-25/</url>
      
        <content type="html"><![CDATA[<link rel="stylesheet" class="aplayer-secondary-style-marker" href="/assets/css/APlayer.min.css"><script src="/assets/js/APlayer.min.js" class="aplayer-secondary-script-marker"></script><h2 id="绑-解事件"><a href="#绑-解事件" class="headerlink" title="绑/解事件"></a>绑/解事件</h2><h3 id="绑定事件的区别"><a href="#绑定事件的区别" class="headerlink" title="绑定事件的区别"></a>绑定事件的区别</h3><p>addEventListener();<br>attachEvent()<br>相同点: 都可以为元素绑定事件<br>不同点: 1.方法名不一样 2.参数个数不一样 addEventListener 三个参数,attachEvent 两个参数<br>3.addEventListener 谷歌,火狐,IE11 支持,IE8 不支持<br>attachEvent 谷歌火狐不支持,IE11 不支持,IE8 支持<br>4.this 不同,addEventListener 中的 this 是当前绑定事件的对象<br>attachEvent 中的 this 是 window<br>5.addEventListener 中事件的类型(事件的名字)没有 on<br>attachEvent 中的事件的类型(事件的名字)有 on</p><h3 id="解绑事件注意"><a href="#解绑事件注意" class="headerlink" title="解绑事件注意"></a>解绑事件注意</h3><p>注意:用什么方式绑定事件,就应该用对应的方式解绑事件 1.解绑事件<br>对象.on 事件名字=事件处理函数—&gt;绑定事件<br>对象.on 事件名字=null; 2.解绑事件<br>对象.addEventListener(“没有 on 的事件类型”,命名函数,false);—绑定事件<br>对象.removeEventListener(“没有 on 的事件类型”,函数名字,false); 3.解绑事件<br>对象.attachEvent(“on 事件类型”,命名函数);—绑定事件<br>对象.detachEvent(“on 事件类型”,函数名字);</p><h3 id="绑定事件"><a href="#绑定事件" class="headerlink" title="绑定事件"></a>绑定事件</h3><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><span class="line">btn.addEventListener(<span class="string">"click"</span>,<span class="function"><span class="keyword">function</span> (<span class="params"></span>) </span>&#123;</span><br><span class="line">    <span class="built_in">console</span>.log(<span class="keyword">this</span>);</span><br><span class="line">&#125;,<span class="literal">false</span>);</span><br><span class="line"></span><br><span class="line">btn.attachEvent(<span class="string">"onclick"</span>,<span class="function"><span class="keyword">function</span> (<span class="params"></span>) </span>&#123;</span><br><span class="line">    <span class="built_in">console</span>.log(<span class="keyword">this</span>);</span><br><span class="line">&#125;);</span><br></pre></td></tr></table></figure><h3 id="解绑事件"><a href="#解绑事件" class="headerlink" title="解绑事件"></a>解绑事件</h3><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">let</span> btn = <span class="built_in">document</span>.querySelectorAll(<span class="string">"input"</span>);</span><br><span class="line"><span class="comment">// btn[0].onclick = function () &#123;</span></span><br><span class="line"><span class="comment">//     console.log("我是你爸");</span></span><br><span class="line"><span class="comment">// &#125;</span></span><br><span class="line"><span class="comment">// btn[1].onclick = function () &#123;</span></span><br><span class="line"><span class="comment">//     // 1.解绑事件</span></span><br><span class="line"><span class="comment">//     btn[0].onclick = null;</span></span><br><span class="line"><span class="comment">// &#125;</span></span><br><span class="line"></span><br><span class="line"></span><br><span class="line"><span class="comment">// 解绑2</span></span><br><span class="line"><span class="function"><span class="keyword">function</span> <span class="title">f1</span>(<span class="params"></span>) </span>&#123;</span><br><span class="line">    <span class="built_in">console</span>.log(<span class="string">"11"</span>);</span><br><span class="line">&#125;</span><br><span class="line"><span class="function"><span class="keyword">function</span> <span class="title">f2</span>(<span class="params"></span>) </span>&#123;</span><br><span class="line">    <span class="built_in">console</span>.log(<span class="string">"22"</span>);</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="comment">// btn[0].addEventListener("click",f1,false);</span></span><br><span class="line"><span class="comment">// btn[0].addEventListener("click",f2,false);</span></span><br><span class="line"></span><br><span class="line"><span class="comment">// btn[1].onclick = function () &#123;</span></span><br><span class="line"><span class="comment">//     // 2.解绑事件</span></span><br><span class="line"><span class="comment">//     btn[0].removeEventListener("click",f1,false);</span></span><br><span class="line"><span class="comment">// &#125;</span></span><br><span class="line"></span><br><span class="line"><span class="comment">// 解绑3</span></span><br><span class="line"> btn[<span class="number">0</span>].attachEvent(<span class="string">"onclick"</span>,f1);</span><br><span class="line"> btn[<span class="number">0</span>].attachEvent(<span class="string">"onclick"</span>,f2);</span><br><span class="line"></span><br><span class="line"> btn[<span class="number">1</span>].onclick = <span class="function"><span class="keyword">function</span> (<span class="params"></span>) </span>&#123;</span><br><span class="line">     btn[<span class="number">0</span>].detachEvent(<span class="string">"onclick"</span>,f1);</span><br><span class="line"> &#125;</span><br></pre></td></tr></table></figure><h3 id="绑-解兼容写法"><a href="#绑-解兼容写法" class="headerlink" title="绑/解兼容写法"></a>绑/解兼容写法</h3><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">// 获取按钮</span></span><br><span class="line"><span class="keyword">let</span> btn = <span class="built_in">document</span>.querySelectorAll(<span class="string">"input"</span>);</span><br><span class="line"></span><br><span class="line"><span class="comment">// 事件函数</span></span><br><span class="line"><span class="function"><span class="keyword">function</span> <span class="title">f1</span>(<span class="params"></span>) </span>&#123;</span><br><span class="line">    <span class="built_in">console</span>.log(<span class="string">"11"</span>);</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">function</span> <span class="title">f2</span>(<span class="params"></span>) </span>&#123;</span><br><span class="line">    <span class="built_in">console</span>.log(<span class="string">"22"</span>);</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="comment">// 绑定</span></span><br><span class="line"><span class="function"><span class="keyword">function</span> <span class="title">addEventListener</span>(<span class="params">element, type, fn</span>) </span>&#123;</span><br><span class="line">    <span class="keyword">if</span> (element.addEventListener) &#123;</span><br><span class="line">        element.addEventListener(type, fn, <span class="literal">false</span>);</span><br><span class="line">    &#125; <span class="keyword">else</span> <span class="keyword">if</span> (element.attachEvent) &#123;</span><br><span class="line">        element.attachEvent(<span class="string">"on"</span> + type, fn)</span><br><span class="line">    &#125; <span class="keyword">else</span> &#123;</span><br><span class="line">        element[<span class="string">"on"</span> + type] = fn;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="comment">// 解绑</span></span><br><span class="line"><span class="function"><span class="keyword">function</span> <span class="title">removeEventListener</span>(<span class="params">element, type, fn</span>) </span>&#123;</span><br><span class="line">    <span class="keyword">if</span> (element.removeEventListener) &#123;</span><br><span class="line">        element.removeEventListener(type, fn, <span class="literal">false</span>);</span><br><span class="line">    &#125; <span class="keyword">else</span> <span class="keyword">if</span> (element.detachEvent) &#123;</span><br><span class="line">        element.detachEvent(<span class="string">"on"</span> + type, fn)</span><br><span class="line">    &#125; <span class="keyword">else</span> &#123;</span><br><span class="line">        element[<span class="string">"on"</span> + type] = fn;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="comment">// 调用</span></span><br><span class="line">addEventListener(btn[<span class="number">0</span>], <span class="string">"click"</span>, f1)</span><br><span class="line">addEventListener(btn[<span class="number">0</span>], <span class="string">"click"</span>, f2)</span><br><span class="line">btn[<span class="number">1</span>].onclick = <span class="function"><span class="keyword">function</span> (<span class="params"></span>) </span>&#123;</span><br><span class="line">    removeEventListener(btn[<span class="number">0</span>],<span class="string">"click"</span>,f1)</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h3 id="阻止事件冒泡"><a href="#阻止事件冒泡" class="headerlink" title="阻止事件冒泡"></a>阻止事件冒泡</h3><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">//事件冒泡:多个元素嵌套,有层次关系,这些元素都注册了相同的事件,如果里面的元素的事件触发了,外面的元素的该事件自动的触发了.</span></span><br><span class="line"><span class="comment">//事件冒泡,阻止事件冒泡,</span></span><br><span class="line"><span class="comment">//如何阻止事件冒泡: window.event.cancelBubble=true; IE特有的,谷歌支持,火狐不支持</span></span><br><span class="line"></span><br><span class="line"><span class="comment">// e.stopPropagation(); 谷歌和火狐支持</span></span><br><span class="line"></span><br><span class="line"><span class="keyword">let</span> d1 = <span class="built_in">document</span>.querySelector(<span class="string">".d1"</span>);</span><br><span class="line"><span class="keyword">let</span> d2 = <span class="built_in">document</span>.querySelector(<span class="string">".d2"</span>);</span><br><span class="line"><span class="keyword">let</span> d3 = <span class="built_in">document</span>.querySelector(<span class="string">".d3"</span>);</span><br><span class="line"></span><br><span class="line"><span class="comment">// 事件冒泡</span></span><br><span class="line">d1.onclick = <span class="function"><span class="keyword">function</span> (<span class="params"></span>) </span>&#123;</span><br><span class="line">    <span class="built_in">console</span>.log(<span class="keyword">this</span>.className);</span><br><span class="line">&#125;</span><br><span class="line">d2.onclick = <span class="function"><span class="keyword">function</span> (<span class="params"></span>) </span>&#123;</span><br><span class="line">    <span class="built_in">console</span>.log(<span class="keyword">this</span>.className);</span><br><span class="line"></span><br><span class="line">    <span class="comment">// window.event.cancelBubble = true;</span></span><br><span class="line">&#125;</span><br><span class="line"><span class="comment">// 事件处理参数对象</span></span><br><span class="line">d3.onclick = <span class="function"><span class="keyword">function</span> (<span class="params">e</span>) </span>&#123;</span><br><span class="line">    <span class="built_in">console</span>.log(<span class="keyword">this</span>.className);</span><br><span class="line">    <span class="comment">// 阻止事件冒泡</span></span><br><span class="line">    <span class="comment">// window.event.cancelBubble = true;</span></span><br><span class="line">    e.stopPropagation();</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>]]></content>
      
      
      <categories>
          
          <category> JavaScript </category>
          
      </categories>
      
      
        <tags>
            
            <tag> js笔记/案例 </tag>
            
        </tags>
      
    </entry>
    
    <entry>
      <title>hexo</title>
      <link href="/2018/08/25/hexo/"/>
      <url>/2018/08/25/hexo/</url>
      
        <content type="html"><![CDATA[<link rel="stylesheet" class="aplayer-secondary-style-marker" href="/assets/css/APlayer.min.css"><script src="/assets/js/APlayer.min.js" class="aplayer-secondary-script-marker"></script><h2 id="hexo使用"><a href="#hexo使用" class="headerlink" title="hexo使用"></a>hexo使用</h2><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">$ hexo n  //创建笔记 简写</span><br><span class="line">$ hexo new</span><br></pre></td></tr></table></figure><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">$ hexo s  //开启服务 简写</span><br><span class="line">$ hexo server</span><br></pre></td></tr></table></figure><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">$ hexo g  //打包笔记输出到public文件中，可上传至github中 简写</span><br><span class="line">$ hexo generate</span><br></pre></td></tr></table></figure><p>##在hexo中插入图片<br>图片文件夹放在source下就可以了<br><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line">![“图片描述”](/文件夹/图片名) //方法一</span><br><span class="line"></span><br><span class="line">&lt;img src=&quot;/media/Unofficial_JavaScript_logo_2.svg.png&quot; width=&quot;400&quot; alt=&quot;&quot;&gt; //方法二</span><br></pre></td></tr></table></figure></p>]]></content>
      
      
      <categories>
          
          <category> Hexo </category>
          
      </categories>
      
      
        <tags>
            
            <tag> Hexo笔记 </tag>
            
        </tags>
      
    </entry>
    
    <entry>
      <title>yhf</title>
      <link href="/2018/08/24/yhf/"/>
      <url>/2018/08/24/yhf/</url>
      
        <content type="html"><![CDATA[<link rel="stylesheet" class="aplayer-secondary-style-marker" href="/assets/css/APlayer.min.css"><script src="/assets/js/APlayer.min.js" class="aplayer-secondary-script-marker"></script><h2 id="yhf测试文章"><a href="#yhf测试文章" class="headerlink" title="yhf测试文章"></a>yhf测试文章</h2><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line"><span class="function"><span class="keyword">function</span> <span class="title">show</span>(<span class="params"></span>)</span>&#123;</span><br><span class="line">    <span class="built_in">console</span>.log(<span class="string">'hello world'</span>);</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>]]></content>
      
      
      <categories>
          
          <category> 个人 </category>
          
      </categories>
      
      
        <tags>
            
            <tag> 个人 </tag>
            
        </tags>
      
    </entry>
    
    <entry>
      <title>Hello World</title>
      <link href="/2018/08/24/hello-world/"/>
      <url>/2018/08/24/hello-world/</url>
      
        <content type="html"><![CDATA[<link rel="stylesheet" class="aplayer-secondary-style-marker" href="/assets/css/APlayer.min.css"><script src="/assets/js/APlayer.min.js" class="aplayer-secondary-script-marker"></script><p>Welcome to <a href="https://hexo.io/" target="_blank" rel="noopener">Hexo</a>! This is your very first post. Check <a href="https://hexo.io/docs/" target="_blank" rel="noopener">documentation</a> for more info. If you get any problems when using Hexo, you can find the answer in <a href="https://hexo.io/docs/troubleshooting.html" target="_blank" rel="noopener">troubleshooting</a> or you can ask me on <a href="https://github.com/hexojs/hexo/issues" target="_blank" rel="noopener">GitHub</a>.</p><h2 id="Quick-Start"><a href="#Quick-Start" class="headerlink" title="Quick Start"></a>Quick Start</h2><h3 id="Create-a-new-post"><a href="#Create-a-new-post" class="headerlink" title="Create a new post"></a>Create a new post</h3><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">$ hexo new <span class="string">"My New Post"</span></span><br></pre></td></tr></table></figure><p>More info: <a href="https://hexo.io/docs/writing.html" target="_blank" rel="noopener">Writing</a></p><h3 id="Run-server"><a href="#Run-server" class="headerlink" title="Run server"></a>Run server</h3><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">$ hexo server</span><br></pre></td></tr></table></figure><p>More info: <a href="https://hexo.io/docs/server.html" target="_blank" rel="noopener">Server</a></p><h3 id="Generate-static-files"><a href="#Generate-static-files" class="headerlink" title="Generate static files"></a>Generate static files</h3><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">$ hexo generate</span><br></pre></td></tr></table></figure><p>More info: <a href="https://hexo.io/docs/generating.html" target="_blank" rel="noopener">Generating</a></p><h3 id="Deploy-to-remote-sites"><a href="#Deploy-to-remote-sites" class="headerlink" title="Deploy to remote sites"></a>Deploy to remote sites</h3><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">$ hexo deploy</span><br></pre></td></tr></table></figure><p>More info: <a href="https://hexo.io/docs/deployment.html" target="_blank" rel="noopener">Deployment</a></p>]]></content>
      
      
      <categories>
          
          <category> Hexo </category>
          
      </categories>
      
      
        <tags>
            
            <tag> Hexo笔记 </tag>
            
        </tags>
      
    </entry>
    
    <entry>
      <title>js基础</title>
      <link href="/2017/12/06/01-JavaScript%E5%9F%BA%E7%A1%80/"/>
      <url>/2017/12/06/01-JavaScript%E5%9F%BA%E7%A1%80/</url>
      
        <content type="html"><![CDATA[<link rel="stylesheet" class="aplayer-secondary-style-marker" href="/assets/css/APlayer.min.css"><script src="/assets/js/APlayer.min.js" class="aplayer-secondary-script-marker"></script><hr><p>学习目标:</p><ul><li>掌握编程的基本思维</li><li>掌握编程的基本语法<br>typora-copy-images-to: media</li></ul><hr><h1 id="JavaScript基础"><a href="#JavaScript基础" class="headerlink" title="JavaScript基础"></a>JavaScript基础</h1><p>HTML和CSS   京东</p><h2 id="课前娱乐"><a href="#课前娱乐" class="headerlink" title="课前娱乐"></a>课前娱乐</h2><p><strong>众人皆笑我疯癫,我笑尔等看不穿</strong><br><img src="/media/yule-1.png" alt="一盘棋而已"></p><p>##课前说明<br>目标：掌握编程的基本思想<br>掌握JavaScript的基础语法,使用常见API(备注)完成相应案例及练习和作业<br>培养独立解决问题能力<br>遇到问题先独立调试(牛X从规范和调试开始)<br>能够独立写出所有案例代码<br>注意：</p><ol><li>以大多数同学的接受能力为基准，稳准狠的前行</li><li>注重基础，以最简单的案例说明问题，并以企业项目案例进行实践</li><li>课上思考，课下提问。不需要深究的地方不要钻牛角尖。</li><li>必须完成作业,基础坚挺的同学低调,基础薄弱同学多问<br>一句话送给大家:<strong>当你要放弃的时候想想当初为什么坚持到现在！</strong><br>笔记和代码是”大家的”,<br>自己写的才是自己的.<br>复制代码者,没有”男朋友”<br>不写代码者,没有”女朋友”</li></ol><p>##阶段说明<br>JavaScript基础<br>Web API<br>JavaScript高级</p><p>##第一天重点内容<br><strong>变量的声明及使用</strong><br><strong>数据类型</strong><br><strong>类型转换</strong><br><strong>运算符</strong></p><p>##课外提示<br>1.敲代码用指法,指法配图，坚持一周者即可熟练<br>2.码农不需要练就一阳指或者二指禅<br>3.可以使用金山打字通，此处并非打广告,个人建议，天天敲代码，不停的反复的敲练习和作业，速度和基本功的快速提升<br>奉劝各位:<br><strong>保护好自己的手</strong><br><strong>控制自己的右手</strong><br><img src="/media/jianpan-2.png" alt="键盘指法"><br>windows中的常用快捷键<br><img src="/media/kuaijiejian-3.png" alt="快捷键"></p><p>##浏览器说明<br>浏览器是指可以显示网页服务器或者文件系统的HTML文件内容，并让用户与这些文件交互的一种软件。<br>通俗的讲:可以显示页面的一个软件,<br>国内网民计算机上常见的网页浏览器有，QQ浏览器、Internet Explorer、Firefox、Safari，Opera、Google Chrome、百度浏览器、搜狗浏览器、猎豹浏览器、360浏览器、UC浏览器、傲游浏览器、世界之窗浏览器等，浏览器是最经常使用到的客户端程序。<br>常用的五大浏览器：chrome，firefox，Safari，ie，opera<br>我们用chrome(谷歌浏览器)<br><img src="/media/liulanqi-4.png" alt="浏览器"><br><img src="/media/liulanqiyunxing-5.png" alt="代码执行"></p><h2 id="网页、网站和应用程序"><a href="#网页、网站和应用程序" class="headerlink" title="网页、网站和应用程序"></a>网页、网站和应用程序</h2><p>网页：单独的一个页面<br>网站：一些列相关的页面组成到一起<br>应用程序：可以和用户产生交互，并实现某种功能。</p><h2 id="演示JavaScript的强大"><a href="#演示JavaScript的强大" class="headerlink" title="演示JavaScript的强大"></a>演示JavaScript的强大</h2><p><a href="http://impress.github.io/impress.js/" target="_blank" rel="noopener">http://impress.github.io/impress.js/</a><br><a href="http://naotu.baidu.com/" target="_blank" rel="noopener">http://naotu.baidu.com/</a><br><a href="https://codecombat.com/" target="_blank" rel="noopener">https://codecombat.com/</a><br><a href="https://ide.codemao.cn/" target="_blank" rel="noopener">https://ide.codemao.cn/</a></p><p>需要翻墙<br><a href="https://developers.google.com/blockly/" target="_blank" rel="noopener">https://developers.google.com/blockly/</a><br>blockly迷宫<br><a href="https://blockly-games.appspot.com" target="_blank" rel="noopener">https://blockly-games.appspot.com</a></p><p>blockly迷宫不需要翻墙<br><a href="https://blockly.uieee.com/" target="_blank" rel="noopener">https://blockly.uieee.com/</a></p><h2 id="JavaScript介绍"><a href="#JavaScript介绍" class="headerlink" title="JavaScript介绍"></a>JavaScript介绍</h2><h3 id="JavaScript是什么"><a href="#JavaScript是什么" class="headerlink" title="JavaScript是什么"></a>JavaScript是什么</h3><p>HTML CSS </p><p>JavaScript 编程语言   流程控制</p><p>Netscape在最初将其脚本语言命名为LiveScript，后来Netscape在与Sun合作之后将其改名为JavaScript。JavaScript最初受Java启发而开始设计的，目的之一就是“看上去像Java”，因此语法上有类似之处，一些名称和命名规范也借自Java。JavaScript与Java名称上的近似，是当时Netscape为了营销考虑与Sun微系统达成协议的结果。Java和JavaScript的关系就像张雨和张雨生的关系，只是名字很像。</p><p>​    Java  服务器端的编程语言</p><p>​    JavaScript  运行在客户端(浏览器)的编程语言</p><blockquote><p>JavaScript是一种运行在<strong><em>客户端</em></strong> 的<strong><em>脚本语言</em></strong><br>JavaScript的解释器被称为JavaScript引擎，为浏览器的一部分，广泛用于客户端的脚本语言，最早是在HTML（标准通用标记语言下的一个应用）网页上使用，用来给HTML网页增加动态功能。</p></blockquote><p><img src="/media/bulaideng.png" alt="发明者"></p><h3 id="JavaScript最初的目的"><a href="#JavaScript最初的目的" class="headerlink" title="JavaScript最初的目的"></a>JavaScript最初的目的</h3><p>演示：<a href="http://baixiu.uieee.com/admin/login.php" target="_blank" rel="noopener">http://baixiu.uieee.com/admin/login.php</a><br>最初的目的是为了处理表单的验证操作。</p><h3 id="JavaScript现在的意义-应用场景"><a href="#JavaScript现在的意义-应用场景" class="headerlink" title="JavaScript现在的意义(应用场景)"></a>JavaScript现在的意义(应用场景)</h3><p>JavaScript 发展到现在几乎无所不能。</p><ol><li>网页特效</li><li>服务端开发(Node.js)</li><li>命令行工具(Node.js)</li><li>桌面程序(Electron)</li><li>App(Cordova)</li><li>控制硬件-物联网(Ruff)</li><li>游戏开发(cocos2d-js)</li></ol><h3 id="JavaScript和HTML、CSS的区别"><a href="#JavaScript和HTML、CSS的区别" class="headerlink" title="JavaScript和HTML、CSS的区别"></a>JavaScript和HTML、CSS的区别</h3><ol><li>HTML：提供网页的结构，提供网页中的内容</li><li>CSS: 用来美化网页</li><li>JavaScript: 可以用来控制网页内容，给网页增加动态的效果</li></ol><h2 id="JavaScript的组成"><a href="#JavaScript的组成" class="headerlink" title="JavaScript的组成"></a>JavaScript的组成</h2><p><img src="/media/1496912475691.png" alt="1496912475691"></p><h3 id="ECMAScript-JavaScript的核心"><a href="#ECMAScript-JavaScript的核心" class="headerlink" title="ECMAScript - JavaScript的核心"></a>ECMAScript - JavaScript的核心</h3><p>ECMA 欧洲计算机制造联合会</p><p>网景：JavaScript</p><p>微软：JScript</p><p>定义了JavaScript的语法规范  </p><p>JavaScript的核心，描述了语言的基本语法和数据类型，ECMAScript是一套标准，定义了一种语言的标准与具体实现无关</p><h3 id="BOM-浏览器对象模型"><a href="#BOM-浏览器对象模型" class="headerlink" title="BOM - 浏览器对象模型"></a>BOM - 浏览器对象模型</h3><p>一套操作浏览器功能的API</p><p>通过BOM可以操作浏览器窗口，比如：弹出框、控制浏览器跳转、获取分辨率等</p><h3 id="DOM-文档对象模型"><a href="#DOM-文档对象模型" class="headerlink" title="DOM - 文档对象模型"></a>DOM - 文档对象模型</h3><p>一套操作页面元素的API</p><p>DOM可以把HTML看做是文档树，通过DOM提供的API可以对树上的节点进行操作</p><h2 id="JavaScript初体验"><a href="#JavaScript初体验" class="headerlink" title="JavaScript初体验"></a>JavaScript初体验</h2><p>CSS：行内样式、嵌入样式、外部样式</p><h3 id="JavaScript的书写位置"><a href="#JavaScript的书写位置" class="headerlink" title="JavaScript的书写位置"></a>JavaScript的书写位置</h3><ul><li>写在行内</li></ul><figure class="highlight html"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">input</span> <span class="attr">type</span>=<span class="string">"button"</span> <span class="attr">value</span>=<span class="string">"按钮"</span> <span class="attr">onclick</span>=<span class="string">"alert('Hello World')"</span> /&gt;</span></span><br></pre></td></tr></table></figure><ul><li>写在script标签中</li></ul><figure class="highlight html"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">head</span>&gt;</span></span><br><span class="line">  <span class="tag">&lt;<span class="name">script</span>&gt;</span><span class="undefined"></span></span><br><span class="line"><span class="javascript">    alert(<span class="string">'Hello World!'</span>);</span></span><br><span class="line"><span class="undefined">  </span><span class="tag">&lt;/<span class="name">script</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">head</span>&gt;</span></span><br></pre></td></tr></table></figure><ul><li>写在外部js文件中，在页面引入</li></ul><figure class="highlight html"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">script</span> <span class="attr">src</span>=<span class="string">"main.js"</span>&gt;</span><span class="undefined"></span><span class="tag">&lt;/<span class="name">script</span>&gt;</span></span><br></pre></td></tr></table></figure><ul><li><p>注意点</p><p><strong><em>引用外部js文件的script标签中不可以写JavaScript代码</em></strong></p></li></ul><h2 id="计算机组成"><a href="#计算机组成" class="headerlink" title="计算机组成"></a>计算机组成</h2><h3 id="软件"><a href="#软件" class="headerlink" title="软件"></a>软件</h3><ul><li>应用软件：浏览器(Chrome/IE/Firefox)、QQ、Sublime、Word</li><li>系统软件：Windows、Linux、mac OSX</li></ul><h3 id="硬件"><a href="#硬件" class="headerlink" title="硬件"></a>硬件</h3><ul><li>三大件：CPU、内存、硬盘    – 主板</li><li>输入设备：鼠标、键盘、手写板、摄像头等</li><li>输出设备：显示器、打印机、投影仪等</li></ul><p><img src="/media/1497317567484.png" alt="1497317567484"></p><p><img src="/media/1496916239525.png" alt="1496916239525"></p><h2 id="变量"><a href="#变量" class="headerlink" title="变量"></a>变量</h2><h3 id="什么是变量"><a href="#什么是变量" class="headerlink" title="什么是变量"></a>什么是变量</h3><ul><li><p>什么是变量</p><p>变量是计算机内存中存储数据的标识符，根据变量名称可以获取到内存中存储的数据</p></li><li><p>为什么要使用变量</p><p>使用变量可以方便的获取或者修改内存中的数据</p></li></ul><h3 id="如何使用变量"><a href="#如何使用变量" class="headerlink" title="如何使用变量"></a>如何使用变量</h3><ul><li>var声明变量</li></ul><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">var</span> age;</span><br></pre></td></tr></table></figure><ul><li>变量的赋值</li></ul><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">var</span> age;</span><br><span class="line">age = <span class="number">18</span>;</span><br></pre></td></tr></table></figure><ul><li>同时声明多个变量</li></ul><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">var</span> age, name, sex;</span><br><span class="line">age = <span class="number">10</span>;</span><br><span class="line">name = <span class="string">'zs'</span>;</span><br></pre></td></tr></table></figure><ul><li>同时声明多个变量并赋值</li></ul><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">var</span> age = <span class="number">10</span>, name = <span class="string">'zs'</span>;</span><br></pre></td></tr></table></figure><h3 id="变量在内存中的存储"><a href="#变量在内存中的存储" class="headerlink" title="变量在内存中的存储"></a>变量在内存中的存储</h3><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">var</span> age = <span class="number">18</span>;</span><br></pre></td></tr></table></figure><p><img src="/media/1496981558575.png" alt="1496981558575"></p><h3 id="变量的命名规则和规范"><a href="#变量的命名规则和规范" class="headerlink" title="变量的命名规则和规范"></a>变量的命名规则和规范</h3><ul><li><p>规则 - 必须遵守的，不遵守会报错</p><ul><li><p>由字母、数字、下划线、$符号组成，不能以数字开头</p></li><li><p>不能是关键字和保留字，例如：for、while。</p></li><li><p>区分大小写</p></li></ul></li><li><p>规范 - 建议遵守的，不遵守不会报错</p><ul><li>变量名必须有意义</li><li>遵守驼峰命名法。首字母小写，后面单词的首字母需要大写。例如：userName、userPassword</li></ul></li><li><p>下面哪些变量名不合法</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br></pre></td><td class="code"><pre><span class="line">a    </span><br><span class="line">1</span><br><span class="line">age18</span><br><span class="line">18age</span><br><span class="line">name</span><br><span class="line">$name</span><br><span class="line">_sex</span><br><span class="line">&amp;sex</span><br><span class="line">theworld  theWorld</span><br></pre></td></tr></table></figure></li></ul><h3 id="案例"><a href="#案例" class="headerlink" title="案例"></a>案例</h3><ol><li>交换两个变量的值</li><li>不使用临时变量，交换两个数值变量的值</li></ol><h2 id="数据类型"><a href="#数据类型" class="headerlink" title="数据类型"></a>数据类型</h2><h3 id="简单数据类型"><a href="#简单数据类型" class="headerlink" title="简单数据类型"></a>简单数据类型</h3><p>Number、String、Boolean、Undefined、Null</p><h4 id="Number类型"><a href="#Number类型" class="headerlink" title="Number类型"></a>Number类型</h4><ul><li><p>数值字面量：数值的固定值的表示法</p><p>110 1024  60.5</p></li><li><p>进制</p></li></ul><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br></pre></td><td class="code"><pre><span class="line">十进制</span><br><span class="line">truevar num = 9;</span><br><span class="line">true进行算数计算时，八进制和十六进制表示的数值最终都将被转换成十进制数值。</span><br><span class="line">十六进制</span><br><span class="line">truevar num = 0xA;</span><br><span class="line">true数字序列范围：0~9以及A~F</span><br><span class="line">八进制</span><br><span class="line">    var num1 = 07;   // 对应十进制的7</span><br><span class="line">    var num2 = 019;  // 对应十进制的19</span><br><span class="line">    var num3 = 08;   // 对应十进制的8</span><br><span class="line">    数字序列范围：0~7</span><br><span class="line">    如果字面值中的数值超出了范围，那么前导零将被忽略，后面的数值将被当作十进制数值解析</span><br></pre></td></tr></table></figure><ul><li><p>浮点数</p><ul><li>浮点数的精度问题</li></ul></li></ul><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line">浮点数</span><br><span class="line">truevar n = 5e-324;   // 科学计数法  5乘以10的-324次方  </span><br><span class="line">浮点数值的最高精度是 17 位小数，但在进行算术计算时其精确度远远不如整数</span><br><span class="line">   var result = 0.1 + 0.2;    // 结果不是 0.3，而是：0.30000000000000004</span><br><span class="line">   console.log(0.07 * 100);</span><br><span class="line">   不要判断两个浮点数是否相等</span><br></pre></td></tr></table></figure><ul><li>数值范围</li></ul><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line">最小值：Number.MIN_VALUE，这个值为： 5e-324</span><br><span class="line">最大值：Number.MAX_VALUE，这个值为： 1.7976931348623157e+308</span><br><span class="line">无穷大：Infinity</span><br><span class="line">无穷小：-Infinity</span><br></pre></td></tr></table></figure><ul><li><p>数值判断</p><ul><li>NaN：not a number<ul><li>NaN 与任何值都不相等，包括他本身</li></ul></li><li>isNaN: is not a number</li></ul></li></ul><h4 id="String类型"><a href="#String类型" class="headerlink" title="String类型"></a>String类型</h4><p>‘abc’   “abc”</p><ul><li><p>字符串字面量</p><p>‘程序猿’，’程序媛’, “黑马程序猿”</p><p>​</p><p>思考：如何打印以下字符串。<br>我是一个”正直”的人<br>我很喜欢”黑马’程序猿’”</p></li><li><p>转义符</p><p><img src="/media/1498289626813.png" alt="1498289626813"></p></li><li><p>字符串长度</p><p>length属性用来获取字符串的长度</p><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">var</span> str = <span class="string">'黑马程序猿 Hello World'</span>;</span><br><span class="line"><span class="built_in">console</span>.log(str.length);</span><br></pre></td></tr></table></figure></li><li><p>字符串拼接</p><p>字符串拼接使用 + 连接</p><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line"><span class="built_in">console</span>.log(<span class="number">11</span> + <span class="number">11</span>);</span><br><span class="line"><span class="built_in">console</span>.log(<span class="string">'hello'</span> + <span class="string">' world'</span>);</span><br><span class="line"><span class="built_in">console</span>.log(<span class="string">'100'</span> + <span class="string">'100'</span>);</span><br><span class="line"><span class="built_in">console</span>.log(<span class="string">'11'</span> + <span class="number">11</span>);</span><br><span class="line"><span class="built_in">console</span>.log(<span class="string">'male:'</span> + <span class="literal">true</span>);</span><br></pre></td></tr></table></figure><ol><li>两边只要有一个是字符串，那么+就是字符串拼接功能</li><li>两边如果都是数字，那么就是算术功能。</li></ol></li></ul><h4 id="Boolean类型"><a href="#Boolean类型" class="headerlink" title="Boolean类型"></a>Boolean类型</h4><ul><li>Boolean字面量：  true和false，区分大小写</li><li>计算机内部存储：true为1，false为0</li></ul><h4 id="Undefined和Null"><a href="#Undefined和Null" class="headerlink" title="Undefined和Null"></a>Undefined和Null</h4><ol><li>undefined表示一个声明了没有赋值的变量，变量只声明的时候值默认是undefined</li><li>null表示一个空，变量的值如果想为null，必须手动设置</li></ol><h3 id="复杂数据类型"><a href="#复杂数据类型" class="headerlink" title="复杂数据类型"></a>复杂数据类型</h3><p>​    Object</p><h3 id="获取变量的类型"><a href="#获取变量的类型" class="headerlink" title="获取变量的类型"></a>获取变量的类型</h3><p>typeof</p><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">var</span> age = <span class="number">18</span>;</span><br><span class="line"><span class="built_in">console</span>.log(<span class="keyword">typeof</span> age);  <span class="comment">// 'number'</span></span><br></pre></td></tr></table></figure><h3 id="字面量"><a href="#字面量" class="headerlink" title="字面量"></a>字面量</h3><p>在源代码中一个固定值的表示法。</p><p>数值字面量：8, 9, 10</p><p>字符串字面量：’黑马程序员’, “大前端”</p><p>布尔字面量：true，false</p><h2 id="注释"><a href="#注释" class="headerlink" title="注释"></a>注释</h2><h3 id="单行注释"><a href="#单行注释" class="headerlink" title="单行注释"></a>单行注释</h3><p>用来描述下面一个或多行代码的作用</p><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">// 这是一个变量</span></span><br><span class="line"><span class="keyword">var</span> name = <span class="string">'hm'</span>;</span><br></pre></td></tr></table></figure><h3 id="多行注释"><a href="#多行注释" class="headerlink" title="多行注释"></a>多行注释</h3><p>用来注释多条代码</p><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">/*</span></span><br><span class="line"><span class="comment">var age = 18;</span></span><br><span class="line"><span class="comment">var name = 'zs';</span></span><br><span class="line"><span class="comment">console.log(name, age);</span></span><br><span class="line"><span class="comment">*/</span></span><br></pre></td></tr></table></figure><h2 id="数据类型转换"><a href="#数据类型转换" class="headerlink" title="数据类型转换"></a>数据类型转换</h2><p>如何使用谷歌浏览器，快速的查看数据类型？</p><p>字符串的颜色是黑色的，数值类型是蓝色的，布尔类型也是蓝色的，undefined和null是灰色的</p><h3 id="转换成字符串类型"><a href="#转换成字符串类型" class="headerlink" title="转换成字符串类型"></a>转换成字符串类型</h3><ul><li><p>toString()</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">var num = 5;</span><br><span class="line">console.log(num.toString());</span><br></pre></td></tr></table></figure></li><li><p>String()</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">String()函数存在的意义：有些值没有toString()，这个时候可以使用String()。比如：undefined和null</span><br></pre></td></tr></table></figure></li><li><p>拼接字符串方式</p><p>num  +  “”，当 + 两边一个操作符是字符串类型，一个操作符是其它类型的时候，会先把其它类型转换成字符串再进行字符串拼接，返回字符串</p></li></ul><h3 id="转换成数值类型"><a href="#转换成数值类型" class="headerlink" title="转换成数值类型"></a>转换成数值类型</h3><ul><li><p>Number()</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">Number()可以把任意值转换成数值，如果要转换的字符串中有一个不是数值的字符，返回NaN</span><br></pre></td></tr></table></figure></li><li><p>parseInt()</p><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">var</span> num1 = <span class="built_in">parseInt</span>(<span class="string">"12.3abc"</span>);  <span class="comment">// 返回12，如果第一个字符是数字会解析知道遇到非数字结束</span></span><br><span class="line"><span class="keyword">var</span> num2 = <span class="built_in">parseInt</span>(<span class="string">"abc123"</span>);   <span class="comment">// 返回NaN，如果第一个字符不是数字或者符号就返回NaN</span></span><br></pre></td></tr></table></figure></li><li><p>parseFloat()</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line">parseFloat()把字符串转换成浮点数</span><br><span class="line">parseFloat()和parseInt非常相似，不同之处在与</span><br><span class="line">trueparseFloat会解析第一个. 遇到第二个.或者非数字结束</span><br><span class="line">true如果解析的内容里只有整数，解析成整数</span><br></pre></td></tr></table></figure></li><li><p>+，-0等运算</p><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">var</span> str = <span class="string">'500'</span>;</span><br><span class="line"><span class="built_in">console</span>.log(+str);<span class="comment">// 取正</span></span><br><span class="line"><span class="built_in">console</span>.log(-str);<span class="comment">// 取负</span></span><br><span class="line"><span class="built_in">console</span>.log(str - <span class="number">0</span>);</span><br></pre></td></tr></table></figure></li></ul><h3 id="转换成布尔类型"><a href="#转换成布尔类型" class="headerlink" title="转换成布尔类型"></a>转换成布尔类型</h3><ul><li>Boolean()</li></ul><p>0  ‘’(空字符串) null undefined NaN 会转换成false  其它都会转换成true</p><h2 id="操作符"><a href="#操作符" class="headerlink" title="操作符"></a>操作符</h2><p>运算符  operator </p><p>5 + 6   </p><p>表达式  组成 操作数和操作符，会有一个结果</p><h3 id="算术运算符"><a href="#算术运算符" class="headerlink" title="算术运算符"></a>算术运算符</h3><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">+ - * / %</span><br></pre></td></tr></table></figure><h3 id="一元运算符"><a href="#一元运算符" class="headerlink" title="一元运算符"></a>一元运算符</h3><p>一元运算符：只有一个操作数的运算符</p><p>5 + 6  两个操作数的运算符 二元运算符</p><p>++  自身加1</p><p>– 自身减1</p><ul><li><p>前置++</p><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">var</span> num1 = <span class="number">5</span>;</span><br><span class="line">++ num1; </span><br><span class="line"></span><br><span class="line"><span class="keyword">var</span> num2 = <span class="number">6</span>;</span><br><span class="line"><span class="built_in">console</span>.log(num1 + ++ num2);</span><br></pre></td></tr></table></figure></li><li><p>后置++</p><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">var</span> num1 = <span class="number">5</span>;</span><br><span class="line">num1 ++;    </span><br><span class="line"><span class="keyword">var</span> num2 = <span class="number">6</span> </span><br><span class="line"><span class="built_in">console</span>.log(num1 + num2 ++);</span><br></pre></td></tr></table></figure></li><li><p>猜猜看</p><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">var</span> a = <span class="number">1</span>; <span class="keyword">var</span> b = ++a + ++a; <span class="built_in">console</span>.log(b);    </span><br><span class="line"><span class="keyword">var</span> a = <span class="number">1</span>; <span class="keyword">var</span> b = a++ + ++a; <span class="built_in">console</span>.log(b);    </span><br><span class="line"><span class="keyword">var</span> a = <span class="number">1</span>; <span class="keyword">var</span> b = a++ + a++; <span class="built_in">console</span>.log(b);    </span><br><span class="line"><span class="keyword">var</span> a = <span class="number">1</span>; <span class="keyword">var</span> b = ++a + a++; <span class="built_in">console</span>.log(b);</span><br></pre></td></tr></table></figure><p><strong>总结</strong><br><strong>前置++：先加1，后参与运算</strong><br><strong>后置++：先参与运算，后加1</strong><br><strong>上面两个理解后，下面两个自通</strong><br><strong>前置–  ：先减1，后参与运算</strong><br><strong>后置–  ：先参与运算，后减1</strong><br>​</p></li></ul><h3 id="逻辑运算符-布尔运算符"><a href="#逻辑运算符-布尔运算符" class="headerlink" title="逻辑运算符(布尔运算符)"></a>逻辑运算符(布尔运算符)</h3><pre><code>&amp;&amp; 与 两个操作数同时为true，结果为true，否则都是false|| 或 两个操作数有一个为true，结果为true，否则为false!  非  取反</code></pre><h3 id="关系运算符-比较运算符"><a href="#关系运算符-比较运算符" class="headerlink" title="关系运算符(比较运算符)"></a>关系运算符(比较运算符)</h3><pre><code>&lt;  &gt;  &gt;=  &lt;= == != === !==</code></pre><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line">==与===的区别：==只进行值得比较，===类型和值同时相等，则相等</span><br><span class="line"></span><br><span class="line"><span class="keyword">var</span> result = <span class="string">'55'</span> == <span class="number">55</span>;  <span class="comment">// true</span></span><br><span class="line"><span class="keyword">var</span> result = <span class="string">'55'</span> === <span class="number">55</span>; <span class="comment">// false 值相等，类型不相等</span></span><br><span class="line"><span class="keyword">var</span> result = <span class="number">55</span> === <span class="number">55</span>; <span class="comment">// true</span></span><br></pre></td></tr></table></figure><h3 id="赋值运算符"><a href="#赋值运算符" class="headerlink" title="赋值运算符"></a>赋值运算符</h3><p>=   +=   -=   *=   /=   %=<br><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line">例如：</span><br><span class="line"><span class="keyword">var</span> num = <span class="number">0</span>;</span><br><span class="line">num += <span class="number">5</span>;<span class="comment">//相当于  num = num + 5;</span></span><br></pre></td></tr></table></figure></p><h3 id="运算符的优先级"><a href="#运算符的优先级" class="headerlink" title="运算符的优先级"></a>运算符的优先级</h3><pre><code>优先级从高到底    1. ()  优先级最高    2. 一元运算符  ++   --   !    3. 算数运算符  先*  /  %   后 +   -    4. 关系运算符  &gt;   &gt;=   &lt;   &lt;=    5. 相等运算符   ==   !=    ===    !==    6. 逻辑运算符 先&amp;&amp;   后||    7. 赋值运算符</code></pre><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">// 练习1：</span></span><br><span class="line"><span class="number">4</span> &gt;= <span class="number">6</span> || <span class="string">'人'</span> != <span class="string">'阿凡达'</span> &amp;&amp; !(<span class="number">12</span> * <span class="number">2</span> == <span class="number">144</span>) &amp;&amp; <span class="literal">true</span></span><br><span class="line"><span class="comment">// 练习2：</span></span><br><span class="line"><span class="keyword">var</span> num = <span class="number">10</span>;</span><br><span class="line"><span class="number">5</span> == num / <span class="number">2</span> &amp;&amp; (<span class="number">2</span> + <span class="number">2</span> * num).toString() === <span class="string">'22'</span></span><br></pre></td></tr></table></figure><h2 id="表达式和语句"><a href="#表达式和语句" class="headerlink" title="表达式和语句"></a>表达式和语句</h2><h3 id="表达式"><a href="#表达式" class="headerlink" title="表达式"></a>表达式</h3><blockquote><p>一个表达式可以产生一个值，有可能是运算、函数调用、有可能是字面量。表达式可以放在任何需要值的地方。</p></blockquote><h3 id="语句"><a href="#语句" class="headerlink" title="语句"></a>语句</h3><blockquote><p>语句可以理解为一个行为，循环语句和判断语句就是典型的语句。一个程序有很多个语句组成，一般情况下;分割一个一个的语句</p></blockquote><h2 id="流程控制"><a href="#流程控制" class="headerlink" title="流程控制"></a>流程控制</h2><blockquote><p>程序的三种基本结构</p></blockquote><h3 id="顺序结构"><a href="#顺序结构" class="headerlink" title="顺序结构"></a>顺序结构</h3><p> 从上到下执行的代码就是顺序结构</p><p><strong>程序默认就是由上到下顺序执行的</strong></p><h3 id="分支结构"><a href="#分支结构" class="headerlink" title="分支结构"></a>分支结构</h3><p>根据不同的情况，执行对应代码</p><h3 id="循环结构"><a href="#循环结构" class="headerlink" title="循环结构"></a>循环结构</h3><p>循环结构：重复做一件事情</p><h2 id="分支结构-1"><a href="#分支结构-1" class="headerlink" title="分支结构"></a>分支结构</h2><h3 id="if语句"><a href="#if语句" class="headerlink" title="if语句"></a>if语句</h3><p>语法结构</p><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">if</span> (<span class="comment">/* 条件表达式 */</span>) &#123;</span><br><span class="line">  <span class="comment">// 执行语句</span></span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="keyword">if</span> (<span class="comment">/* 条件表达式 */</span>)&#123;</span><br><span class="line">  <span class="comment">// 成立执行语句</span></span><br><span class="line">&#125; <span class="keyword">else</span> &#123;</span><br><span class="line">  <span class="comment">// 否则执行语句</span></span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="keyword">if</span> (<span class="comment">/* 条件1 */</span>)&#123;</span><br><span class="line">  <span class="comment">// 成立执行语句</span></span><br><span class="line">&#125; <span class="keyword">else</span> <span class="keyword">if</span> (<span class="comment">/* 条件2 */</span>)&#123;</span><br><span class="line">  <span class="comment">// 成立执行语句</span></span><br><span class="line">&#125; <span class="keyword">else</span> <span class="keyword">if</span> (<span class="comment">/* 条件3 */</span>)&#123;</span><br><span class="line">  <span class="comment">// 成立执行语句</span></span><br><span class="line">&#125; <span class="keyword">else</span> &#123;</span><br><span class="line">  <span class="comment">// 最后默认执行语句</span></span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>案例：<br>    求两个数的最大数<br>    判断一个数是偶数还是奇数<br>    分数转换，把百分制转换成ABCDE   &lt;60  E  60-70 D  70-80 C  80-90 B  90 - 100 A<br>作业：<br>    判断一个年份是闰年还是平年<br>      闰年：能被4整除，但不能被100整除的年份 或者 能被400整除的年份<br>    判断一个人的年龄是否满18岁(是否成年)</p><h3 id="三元运算符"><a href="#三元运算符" class="headerlink" title="三元运算符"></a>三元运算符</h3><pre><code>表达式1 ? 表达式2 : 表达式3是对if……else语句的一种简化写法</code></pre><p>案例：<br>    是否年满18岁<br>    从两个数中找最大值</p><h3 id="switch语句"><a href="#switch语句" class="headerlink" title="switch语句"></a>switch语句</h3><p>语法格式:<br><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">switch</span> (expression) &#123;</span><br><span class="line">  <span class="keyword">case</span> 常量<span class="number">1</span>:</span><br><span class="line">    语句;</span><br><span class="line">    <span class="keyword">break</span>;</span><br><span class="line">  <span class="keyword">case</span> 常量<span class="number">2</span>:</span><br><span class="line">    语句;</span><br><span class="line">    <span class="keyword">break</span>;</span><br><span class="line">  <span class="keyword">case</span> 常量<span class="number">3</span>:</span><br><span class="line">    语句;</span><br><span class="line">    <span class="keyword">break</span>;</span><br><span class="line">  …</span><br><span class="line">  <span class="keyword">case</span> 常量n:</span><br><span class="line">    语句;</span><br><span class="line">    <span class="keyword">break</span>;</span><br><span class="line">  <span class="keyword">default</span>:</span><br><span class="line">    语句;</span><br><span class="line">    <span class="keyword">break</span>;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure></p><pre><code>break可以省略，如果省略，代码会继续执行下一个caseswitch 语句在比较值时使用的是全等操作符, 因此不会发生类型转换（例如，字符串&apos;10&apos; 不等于数值 10）</code></pre><p>案例：<br>    显示星期几<br>    素质教育（把分数变成ABCDE）千万不要写100个case哟</p><h3 id="布尔类型的隐式转换"><a href="#布尔类型的隐式转换" class="headerlink" title="布尔类型的隐式转换"></a>布尔类型的隐式转换</h3><p>流程控制语句会把后面的值隐式转换成布尔类型</p><pre><code>转换为true   非空字符串  非0数字  true 任何对象转换成false  空字符串  0  false  null  undefined</code></pre><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">// 结果是什么？</span></span><br><span class="line"><span class="keyword">var</span> a = !!<span class="string">'123'</span>;</span><br></pre></td></tr></table></figure><h3 id="案例-1"><a href="#案例-1" class="headerlink" title="案例"></a>案例</h3><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">var</span> message;</span><br><span class="line"><span class="comment">// 会自动把message转换成false</span></span><br><span class="line"><span class="keyword">if</span> (message) &#123;     </span><br><span class="line">  <span class="comment">// todo...</span></span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h2 id="循环结构-1"><a href="#循环结构-1" class="headerlink" title="循环结构"></a>循环结构</h2><blockquote><p>在javascript中，循环语句有三种，while、do..while、for循环。</p></blockquote><h3 id="while语句"><a href="#while语句" class="headerlink" title="while语句"></a>while语句</h3><p>基本语法：</p><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">// 当循环条件为true时，执行循环体，</span></span><br><span class="line"><span class="comment">// 当循环条件为false时，结束循环。</span></span><br><span class="line"><span class="keyword">while</span> (循环条件) &#123;</span><br><span class="line">  <span class="comment">//循环体</span></span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>代码示例：</p><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">// 计算1-100之间所有数的和</span></span><br><span class="line"><span class="comment">// 初始化变量</span></span><br><span class="line"><span class="keyword">var</span> i = <span class="number">1</span>;</span><br><span class="line"><span class="keyword">var</span> sum = <span class="number">0</span>;</span><br><span class="line"><span class="comment">// 判断条件</span></span><br><span class="line"><span class="keyword">while</span> (i &lt;= <span class="number">100</span>) &#123;</span><br><span class="line">  <span class="comment">// 循环体</span></span><br><span class="line">  sum += i;</span><br><span class="line">  <span class="comment">// 自增</span></span><br><span class="line">  i++;</span><br><span class="line">&#125;</span><br><span class="line"><span class="built_in">console</span>.log(sum);</span><br></pre></td></tr></table></figure><p>案例：<br>    打印100以内 7的倍数<br>    打印100以内所有偶数<br>    打印100以内所有偶数的和<br>作业：<br>    打印100以内的奇数<br>    打印100以内的奇数的和</p><h3 id="do…while语句"><a href="#do…while语句" class="headerlink" title="do…while语句"></a>do…while语句</h3><blockquote><p>do..while循环和while循环非常像，二者经常可以相互替代，但是do..while的特点是不管条件成不成立，都会执行一次。</p></blockquote><p>基础语法：</p><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">do</span> &#123;</span><br><span class="line">  <span class="comment">// 循环体;</span></span><br><span class="line">&#125; <span class="keyword">while</span> (循环条件);</span><br></pre></td></tr></table></figure><p>代码示例：</p><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">// 初始化变量</span></span><br><span class="line"><span class="keyword">var</span> i = <span class="number">1</span>;</span><br><span class="line"><span class="keyword">var</span> sum = <span class="number">0</span>;</span><br><span class="line"><span class="keyword">do</span> &#123;</span><br><span class="line">  sum += i;<span class="comment">//循环体</span></span><br><span class="line">  i++;<span class="comment">//自增</span></span><br><span class="line">&#125; <span class="keyword">while</span> (i &lt;= <span class="number">100</span>);<span class="comment">//循环条件</span></span><br></pre></td></tr></table></figure><p>案例：</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">求100以内所有3的倍数的和</span><br><span class="line">使用do-while循环：输出询问“我爱你，嫁给我吧？”，选择“你喜欢我吗？(y/n):&quot;，如果输入为y则打印”我们形影不离“，若输入为n,则继续询问</span><br></pre></td></tr></table></figure><h3 id="for语句"><a href="#for语句" class="headerlink" title="for语句"></a>for语句</h3><blockquote><p> while和do…while一般用来解决无法确认次数的循环。for循环一般在循环次数确定的时候比较方便</p></blockquote><p>for循环语法：</p><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">// for循环的表达式之间用的是;号分隔的，千万不要写成,</span></span><br><span class="line"><span class="keyword">for</span> (初始化表达式<span class="number">1</span>; 判断表达式<span class="number">2</span>; 自增表达式<span class="number">3</span>) &#123;</span><br><span class="line">  <span class="comment">// 循环体4</span></span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>执行顺序：1243  —-  243   —–243(直到循环条件变成false)</p><ol><li>初始化表达式</li><li>判断表达式</li><li>自增表达式</li><li>循环体</li></ol><p>案例：</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br></pre></td><td class="code"><pre><span class="line">打印1-100之间所有数</span><br><span class="line">求1-100之间所有数的和</span><br><span class="line">求1-100之间所有数的平均值</span><br><span class="line">求1-100之间所有偶数的和</span><br><span class="line">同时求1-100之间所有偶数和奇数的和</span><br><span class="line">打印正方形</span><br><span class="line">// 使用拼字符串的方法的原因</span><br><span class="line">// console.log 输出重复内容的问题</span><br><span class="line">// console.log 默认输出内容介绍后有换行</span><br><span class="line">var start = &apos;&apos;;</span><br><span class="line">for (var i = 0; i &lt; 10; i++) &#123;</span><br><span class="line">  for (var j = 0; j &lt; 10; j++) &#123;</span><br><span class="line">    start += &apos;* &apos;;</span><br><span class="line">  &#125;</span><br><span class="line">  start += &apos;\n&apos;;</span><br><span class="line">&#125;</span><br><span class="line">console.log(start);</span><br><span class="line">打印直角三角形</span><br><span class="line">var start = &apos;&apos;;</span><br><span class="line">for (var i = 0; i &lt; 10; i++) &#123;</span><br><span class="line">  for (var j = i; j &lt; 10; j++) &#123;</span><br><span class="line">    start += &apos;* &apos;;</span><br><span class="line">  &#125;</span><br><span class="line">  start += &apos;\n&apos;;</span><br><span class="line">&#125;</span><br><span class="line">console.log(start);</span><br><span class="line"></span><br><span class="line">打印9*9乘法表</span><br><span class="line">var str = &apos;&apos;;</span><br><span class="line">for (var i = 1; i &lt;= 9; i++) &#123;</span><br><span class="line">  for (var j = i; j &lt;=9; j++) &#123;</span><br><span class="line">    str += i + &apos; * &apos; + j + &apos; = &apos; + i * j + &apos;\t&apos;;</span><br><span class="line">  &#125;</span><br><span class="line">  str += &apos;\n&apos;;</span><br><span class="line">&#125;</span><br><span class="line">console.log(str);</span><br></pre></td></tr></table></figure><p>作业：</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><span class="line">求1-100之间所有数的乘积</span><br><span class="line">求1-100之间所有奇数的和</span><br><span class="line">计算1-100之间能3整除的数的和</span><br><span class="line">计算1-100之间不能被7整除的数的和</span><br><span class="line">// 讲解思路。如果不会写程序，可以先把数学公式准备好</span><br><span class="line">本金10000元存入银行，年利率是千分之三，每过1年，将本金和利息相加作为新的本金。计算5年后，获得的本金是多少？</span><br><span class="line">有个人想知道，一年之内一对兔子能繁殖多少对？于是就筑了一道围墙把一对兔子关在里面。已知一对兔子每个月可以生一对小兔子，而一对兔子从出生后第3个月起每月生一对小兔子。假如一年内没有发生死亡现象，那么，一对兔子一年内（12个月）能繁殖成多少对？（兔子的规律为数列，1，1，2，3，5，8，13，21）</span><br></pre></td></tr></table></figure><h3 id="continue和break"><a href="#continue和break" class="headerlink" title="continue和break"></a>continue和break</h3><blockquote><p>break:立即跳出整个循环，即循环结束，开始执行循环后面的内容（直接跳到大括号）</p><p>continue:立即跳出当前循环，继续下一次循环（跳到i++的地方）</p></blockquote><p>案例：</p><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">求整数<span class="number">1</span>～<span class="number">100</span>的累加值，但要求碰到个位为<span class="number">3</span>的数则停止累加</span><br><span class="line">求整数<span class="number">1</span>～<span class="number">100</span>的累加值，但要求跳过所有个位为<span class="number">3</span>的数</span><br></pre></td></tr></table></figure><p>作业：</p><p>求1-100之间不能被7整除的整数的和（用continue）<br>求200-300之间所有的奇数的和（用continue）<br>求200-300之间第一个能被7整数的数（break）</p><h3 id="调试"><a href="#调试" class="headerlink" title="调试"></a>调试</h3><ul><li>过去调试JavaScript的方式<ul><li>alert()</li><li>console.log()</li></ul></li><li>断点调试</li></ul><blockquote><p>断点调试是指自己在程序的某一行设置一个断点，调试时，程序运行到这一行就会停住，然后你可以一步一步往下调试，调试过程中可以看各个变量当前的值，出错的话，调试到出错的代码行即显示错误，停下。</p></blockquote><ul><li>调试步骤</li></ul><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">浏览器中按F12--&gt;sources--&gt;找到需要调试的文件--&gt;在程序的某一行设置断点</span><br></pre></td></tr></table></figure><ul><li>调试中的相关操作</li></ul><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line">Watch: 监视，通过watch可以监视变量的值的变化，非常的常用。</span><br><span class="line">F10: 程序单步执行，让程序一行一行的执行，这个时候，观察watch中变量的值的变化。</span><br><span class="line">F8：跳到下一个断点处，如果后面没有断点了，则程序执行结束。</span><br></pre></td></tr></table></figure><p>tips: <strong><em>监视变量，不要监视表达式，因为监视了表达式，那么这个表达式也会执行。</em></strong></p><ol><li>代码调试的能力非常重要，只有学会了代码调试，才能学会自己解决bug的能力。初学者不要觉得调试代码麻烦就不去调试，知识点花点功夫肯定学的会，但是代码调试这个东西，自己不去练，永远都学不会。</li><li>今天学的代码调试非常的简单，只要求同学们记住代码调试的这几个按钮的作用即可，后面还会学到很多的代码调试技巧。</li></ol><h2 id="数组"><a href="#数组" class="headerlink" title="数组"></a>数组</h2><h3 id="为什么要学习数组"><a href="#为什么要学习数组" class="headerlink" title="为什么要学习数组"></a>为什么要学习数组</h3><blockquote><p>之前学习的数据类型，只能存储一个值(比如：Number/String。我们想存储班级中所有学生的姓名，此时该如何存储？</p></blockquote><h3 id="数组的概念"><a href="#数组的概念" class="headerlink" title="数组的概念"></a>数组的概念</h3><blockquote><p>所谓数组，就是将多个元素（通常是同一类型）按一定顺序排列放到一个集合中，那么这个集合我们就称之为数组。</p></blockquote><h3 id="数组的定义"><a href="#数组的定义" class="headerlink" title="数组的定义"></a>数组的定义</h3><blockquote><p>数组是一个有序的列表，可以在数组中存放任意的数据，并且数组的长度可以动态的调整。</p></blockquote><p>通过数组字面量创建数组</p><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">// 创建一个空数组</span></span><br><span class="line"><span class="keyword">var</span> arr1 = []; </span><br><span class="line"><span class="comment">// 创建一个包含3个数值的数组，多个数组项以逗号隔开</span></span><br><span class="line"><span class="keyword">var</span> arr2 = [<span class="number">1</span>, <span class="number">3</span>, <span class="number">4</span>]; </span><br><span class="line"><span class="comment">// 创建一个包含2个字符串的数组</span></span><br><span class="line"><span class="keyword">var</span> arr3 = [<span class="string">'a'</span>, <span class="string">'c'</span>]; </span><br><span class="line"></span><br><span class="line"><span class="comment">// 可以通过数组的length属性获取数组的长度</span></span><br><span class="line"><span class="built_in">console</span>.log(arr3.length);</span><br><span class="line"><span class="comment">// 可以设置length属性改变数组中元素的个数</span></span><br><span class="line">arr3.length = <span class="number">0</span>;</span><br></pre></td></tr></table></figure><h3 id="获取数组元素"><a href="#获取数组元素" class="headerlink" title="获取数组元素"></a>获取数组元素</h3><p>数组的取值</p><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">// 格式：数组名[下标]下标又称索引</span></span><br><span class="line"><span class="comment">// 功能：获取数组对应下标的那个值，如果下标不存在，则返回undefined。</span></span><br><span class="line"><span class="keyword">var</span> arr = [<span class="string">'red'</span>,, <span class="string">'green'</span>, <span class="string">'blue'</span>];</span><br><span class="line">arr[<span class="number">0</span>];<span class="comment">// red</span></span><br><span class="line">arr[<span class="number">2</span>]; <span class="comment">// blue</span></span><br><span class="line">arr[<span class="number">3</span>]; <span class="comment">// 这个数组的最大下标为2,因此返回undefined</span></span><br></pre></td></tr></table></figure><h3 id="遍历数组"><a href="#遍历数组" class="headerlink" title="遍历数组"></a>遍历数组</h3><blockquote><p>遍历：遍及所有，对数组的每一个元素都访问一次就叫遍历。</p></blockquote><p>数组遍历的基本语法：</p><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">for</span>(<span class="keyword">var</span> i = <span class="number">0</span>; i &lt; arr.length; i++) &#123;</span><br><span class="line">true<span class="comment">// 数组遍历的固定结构</span></span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h3 id="数组中新增元素"><a href="#数组中新增元素" class="headerlink" title="数组中新增元素"></a>数组中新增元素</h3><p>数组的赋值</p><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">// 格式：数组名[下标/索引] = 值;</span></span><br><span class="line"><span class="comment">// 如果下标有对应的值，会把原来的值覆盖，如果下标不存在，会给数组新增一个元素。</span></span><br><span class="line"><span class="keyword">var</span> arr = [<span class="string">"red"</span>, <span class="string">"green"</span>, <span class="string">"blue"</span>];</span><br><span class="line"><span class="comment">// 把red替换成了yellow</span></span><br><span class="line">arr[<span class="number">0</span>] = <span class="string">"yellow"</span>;</span><br><span class="line"><span class="comment">// 给数组新增加了一个pink的值</span></span><br><span class="line">arr[<span class="number">3</span>] = <span class="string">"pink"</span>;</span><br></pre></td></tr></table></figure><h3 id="案例-2"><a href="#案例-2" class="headerlink" title="案例"></a>案例</h3><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line">求一组数中的所有数的和和平均值</span><br><span class="line">求一组数中的最大值和最小值，以及所在位置</span><br><span class="line">将字符串数组用|或其他符号分割</span><br><span class="line">要求将数组中的0项去掉，将不为0的值存入一个新的数组，生成新的数组</span><br><span class="line">翻转数组</span><br><span class="line">冒泡排序，从小到大</span><br></pre></td></tr></table></figure><h2 id="函数"><a href="#函数" class="headerlink" title="函数"></a>函数</h2><h3 id="为什么要有函数"><a href="#为什么要有函数" class="headerlink" title="为什么要有函数"></a>为什么要有函数</h3><blockquote><p>如果要在多个地方求1-100之间所有数的和，应该怎么做？</p></blockquote><h3 id="什么是函数"><a href="#什么是函数" class="headerlink" title="什么是函数"></a>什么是函数</h3><blockquote><p>把一段相对独立的具有特定功能的代码块封装起来，形成一个独立实体，就是函数，起个名字（函数名），在后续开发中可以反复调用</p><p>函数的作用就是封装一段代码，将来可以重复使用</p></blockquote><h3 id="函数的定义"><a href="#函数的定义" class="headerlink" title="函数的定义"></a>函数的定义</h3><ul><li>函数声明</li></ul><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line"><span class="function"><span class="keyword">function</span> 函数名(<span class="params"></span>)</span>&#123;</span><br><span class="line">  <span class="comment">// 函数体</span></span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><ul><li>函数表达式</li></ul><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">var</span> fn = <span class="function"><span class="keyword">function</span>(<span class="params"></span>) </span>&#123;</span><br><span class="line">  <span class="comment">// 函数体</span></span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><ul><li><p>特点：</p><p>函数声明的时候，函数体并不会执行，只要当函数被调用的时候才会执行。<br>函数一般都用来干一件事情，需用使用动词+名词，表示做一件事情 <code>tellStory</code> <code>sayHello</code>等</p></li></ul><h3 id="函数的调用"><a href="#函数的调用" class="headerlink" title="函数的调用"></a>函数的调用</h3><ul><li>调用函数的语法：</li></ul><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">函数名();</span><br></pre></td></tr></table></figure><ul><li><p>特点：</p><p>函数体只有在调用的时候才会执行，调用需要()进行调用。<br>可以调用多次(重复使用)</p></li></ul><p>代码示例：</p><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">// 声明函数</span></span><br><span class="line"><span class="function"><span class="keyword">function</span> <span class="title">sayHi</span>(<span class="params"></span>) </span>&#123;</span><br><span class="line">  <span class="built_in">console</span>.log(<span class="string">"吃了没？"</span>);</span><br><span class="line">&#125;</span><br><span class="line"><span class="comment">// 调用函数</span></span><br><span class="line">sayHi();</span><br><span class="line"></span><br><span class="line"><span class="comment">// 求1-100之间所有数的和</span></span><br><span class="line"><span class="function"><span class="keyword">function</span> <span class="title">getSum</span>(<span class="params"></span>) </span>&#123;</span><br><span class="line">  <span class="keyword">var</span> sum = <span class="number">0</span>;</span><br><span class="line">  <span class="keyword">for</span> (<span class="keyword">var</span>  i = <span class="number">0</span>; i &lt; <span class="number">100</span>; i++) &#123;</span><br><span class="line">    sum += i;</span><br><span class="line">  &#125;</span><br><span class="line">  <span class="built_in">console</span>.log(sum);</span><br><span class="line">&#125;</span><br><span class="line"><span class="comment">// 调用</span></span><br><span class="line">getSum();</span><br></pre></td></tr></table></figure><h3 id="函数的参数"><a href="#函数的参数" class="headerlink" title="函数的参数"></a>函数的参数</h3><ul><li>为什么要有参数</li></ul><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br></pre></td><td class="code"><pre><span class="line"><span class="function"><span class="keyword">function</span> <span class="title">getSum</span>(<span class="params"></span>) </span>&#123;</span><br><span class="line">  <span class="keyword">var</span> sum = <span class="number">0</span>;</span><br><span class="line">  <span class="keyword">for</span> (<span class="keyword">var</span> i = <span class="number">1</span>; i &lt;= <span class="number">100</span>; i++) &#123;</span><br><span class="line">    sum += i;</span><br><span class="line">  &#125;</span><br><span class="line">  <span class="built_in">console</span>.log();</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="comment">// 虽然上面代码可以重复调用，但是只能计算1-100之间的值</span></span><br><span class="line"><span class="comment">// 如果想要计算n-m之间所有数的和，应该怎么办呢？</span></span><br></pre></td></tr></table></figure><ul><li>语法：</li></ul><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">// 函数内部是一个封闭的环境，可以通过参数的方式，把外部的值传递给函数内部</span></span><br><span class="line"><span class="comment">// 带参数的函数声明</span></span><br><span class="line"><span class="function"><span class="keyword">function</span> 函数名(<span class="params">形参<span class="number">1</span>, 形参<span class="number">2</span>, 形参...</span>)</span>&#123;</span><br><span class="line">  <span class="comment">// 函数体</span></span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="comment">// 带参数的函数调用</span></span><br><span class="line">函数名(实参<span class="number">1</span>, 实参<span class="number">2</span>, 实参<span class="number">3</span>);</span><br></pre></td></tr></table></figure><ul><li><p>形参和实参</p><blockquote><ol><li>形式参数：在声明一个函数的时候，为了函数的功能更加灵活，有些值是固定不了的，对于这些固定不了的值。我们可以给函数设置参数。这个参数没有具体的值，仅仅起到一个占位置的作用，我们通常称之为形式参数，也叫形参。</li><li>实际参数：如果函数在声明时，设置了形参，那么在函数调用的时候就需要传入对应的参数，我们把传入的参数叫做实际参数，也叫实参。</li></ol></blockquote></li></ul><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">var</span> x = <span class="number">5</span>, y = <span class="number">6</span>;</span><br><span class="line">fn(x,y); </span><br><span class="line"><span class="function"><span class="keyword">function</span> <span class="title">fn</span>(<span class="params">a, b</span>) </span>&#123;</span><br><span class="line">  <span class="built_in">console</span>.log(a + b);</span><br><span class="line">&#125;</span><br><span class="line"><span class="comment">//x,y实参，有具体的值。函数执行的时候会把x,y复制一份给函数内部的a和b，函数内部的值是复制的新值，无法修改外部的x,y</span></span><br></pre></td></tr></table></figure><h3 id="案例-3"><a href="#案例-3" class="headerlink" title="案例"></a>案例</h3><ul><li>求1-n之间所有数的和</li><li>求n-m之间所有数额和</li><li>圆的面积</li><li>求2个数中的最大值</li><li>求3个数中的最大值</li><li>判断一个数是否是素数</li></ul><h3 id="函数的返回值"><a href="#函数的返回值" class="headerlink" title="函数的返回值"></a>函数的返回值</h3><blockquote><p>当函数执行完的时候，并不是所有时候都要把结果打印。我们期望函数给我一些反馈（比如计算的结果返回进行后续的运算），这个时候可以让函数返回一些东西。也就是返回值。函数通过return返回一个返回值</p></blockquote><p>返回值语法：</p><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">//声明一个带返回值的函数</span></span><br><span class="line"><span class="function"><span class="keyword">function</span> 函数名(<span class="params">形参<span class="number">1</span>, 形参<span class="number">2</span>, 形参...</span>)</span>&#123;</span><br><span class="line">  <span class="comment">//函数体</span></span><br><span class="line">  <span class="keyword">return</span> 返回值;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="comment">//可以通过变量来接收这个返回值</span></span><br><span class="line"><span class="keyword">var</span> 变量 = 函数名(实参<span class="number">1</span>, 实参<span class="number">2</span>, 实参<span class="number">3</span>);</span><br></pre></td></tr></table></figure><p>函数的调用结果就是返回值，因此我们可以直接对函数调用结果进行操作。</p><p>返回值详解：<br>    如果函数没有显示的使用 return语句 ，那么函数有默认的返回值：undefined<br>    如果函数使用 return语句，那么跟再return后面的值，就成了函数的返回值<br>    如果函数使用 return语句，但是return后面没有任何值，那么函数的返回值也是：undefined<br>    函数使用return语句后，这个函数会在执行完 return 语句之后停止并立即退出，也就是说return后面的所有其他代码都不会再执行。</p><pre><code>推荐的做法是要么让函数始终都返回一个值，要么永远都不要返回值。</code></pre><h3 id="案例-4"><a href="#案例-4" class="headerlink" title="案例"></a>案例</h3><ul><li>求阶乘</li><li>求1!+2!+3!+….+n!</li><li>求一组数中的最大值</li><li>求一组数中的最小值</li></ul><h3 id="arguments的使用"><a href="#arguments的使用" class="headerlink" title="arguments的使用"></a>arguments的使用</h3><blockquote><p>JavaScript中，arguments对象是比较特别的一个对象，实际上是当前函数的一个内置属性。也就是说所有函数都内置了一个arguments对象，arguments对象中存储了传递的所有的实参。arguments是一个伪数组，因此及可以进行遍历</p></blockquote><ul><li>案例<figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">求任意个数的最大值</span><br><span class="line">求任意个数的和</span><br></pre></td></tr></table></figure></li></ul><h3 id="案例-5"><a href="#案例-5" class="headerlink" title="案例"></a>案例</h3><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line">求斐波那契数列Fibonacci中的第n个数是多少？      <span class="number">1</span> <span class="number">1</span> <span class="number">2</span> <span class="number">3</span> <span class="number">5</span> <span class="number">8</span> <span class="number">13</span> <span class="number">21.</span>..</span><br><span class="line">翻转数组，返回一个新数组</span><br><span class="line">对数组排序，从小到大</span><br><span class="line">输入一个年份，判断是否是闰年[闰年：能被<span class="number">4</span>整数并且不能被<span class="number">100</span>整数，或者能被<span class="number">400</span>整数]</span><br><span class="line">输入某年某月某日，判断这一天是这一年的第几天？</span><br></pre></td></tr></table></figure><h2 id="函数其它"><a href="#函数其它" class="headerlink" title="函数其它"></a>函数其它</h2><h3 id="匿名函数"><a href="#匿名函数" class="headerlink" title="匿名函数"></a>匿名函数</h3><blockquote><p>匿名函数：没有名字的函数</p></blockquote><p>匿名函数如何使用：</p><pre><code>将匿名函数赋值给一个变量，这样就可以通过变量进行调用匿名函数自调用</code></pre><p>关于自执行函数（匿名函数自调用）的作用：防止全局变量污染。</p><h3 id="自调用函数"><a href="#自调用函数" class="headerlink" title="自调用函数"></a>自调用函数</h3><blockquote><p>匿名函数不能通过直接调用来执行，因此可以通过匿名函数的自调用的方式来执行<br><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line">(<span class="function"><span class="keyword">function</span> (<span class="params"></span>) </span>&#123;</span><br><span class="line">  alert(<span class="number">123</span>);</span><br><span class="line">&#125;)();</span><br></pre></td></tr></table></figure></p></blockquote><h3 id="函数是一种数据类型"><a href="#函数是一种数据类型" class="headerlink" title="函数是一种数据类型"></a>函数是一种数据类型</h3><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line"><span class="function"><span class="keyword">function</span> <span class="title">fn</span>(<span class="params"></span>) </span>&#123;&#125;</span><br><span class="line"><span class="built_in">console</span>.log(<span class="keyword">typeof</span> fn);</span><br></pre></td></tr></table></figure><ul><li>函数作为参数</li></ul><p>因为函数也是一种类型，可以把函数作为两一个函数的参数，在两一个函数中调用</p><ul><li>函数做为返回值</li></ul><p>因为函数是一种类型，所以可以把函数可以作为返回值从函数内部返回，这种用法在后面很常见。</p><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><span class="line"><span class="function"><span class="keyword">function</span> <span class="title">fn</span>(<span class="params">b</span>) </span>&#123;</span><br><span class="line">  <span class="keyword">var</span> a = <span class="number">10</span>;</span><br><span class="line">  <span class="keyword">return</span> <span class="function"><span class="keyword">function</span> (<span class="params"></span>) </span>&#123;</span><br><span class="line">    alert(a+b);</span><br><span class="line">  &#125;</span><br><span class="line">&#125;</span><br><span class="line">fn(<span class="number">15</span>)();</span><br></pre></td></tr></table></figure><h3 id="代码规范"><a href="#代码规范" class="headerlink" title="代码规范"></a>代码规范</h3><pre><code>1.命名规范    2.变量规范       var name = &apos;zs&apos;;    3.注释规范    // 这里是注释4.空格规范5.换行规范    var arr = [1, 2, 3, 4];    if (a &gt; b) {    }    for(var i = 0; i &lt; 10; i++) {    }    function fn() {    }</code></pre><h2 id="作用域"><a href="#作用域" class="headerlink" title="作用域"></a>作用域</h2><p>作用域：变量可以起作用的范围</p><h3 id="全局变量和局部变量"><a href="#全局变量和局部变量" class="headerlink" title="全局变量和局部变量"></a>全局变量和局部变量</h3><ul><li><p>全局变量</p><p>​在任何地方都可以访问到的变量就是全局变量，对应全局作用域</p></li><li><p>局部变量</p><p>​只在固定的代码片段内可访问到的变量，最常见的例如函数内部。对应局部作用域(函数作用域)</p></li></ul><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">不使用var声明的变量是全局变量，不推荐使用。</span><br><span class="line">变量退出作用域之后会销毁，全局变量关闭网页或浏览器才会销毁</span><br></pre></td></tr></table></figure><h3 id="块级作用域"><a href="#块级作用域" class="headerlink" title="块级作用域"></a>块级作用域</h3><p>任何一对花括号（｛和｝）中的语句集都属于一个块，在这之中定义的所有变量在代码块外都是不可见的，我们称之为块级作用域。<br><strong>在es5之前没有块级作用域的的概念,只有函数作用域</strong>，现阶段可以认为JavaScript没有块级作用域</p><h3 id="词法作用域"><a href="#词法作用域" class="headerlink" title="词法作用域"></a>词法作用域</h3><p>变量的作用域是在定义时决定而不是执行时决定，也就是说词法作用域取决于源码，通过静态分析就能确定，因此词法作用域也叫做静态作用域。</p><p><strong>在 js 中词法作用域规则:</strong></p><ul><li>函数允许访问函数外的数据.</li><li>整个代码结构中只有函数可以限定作用域.</li><li>作用域规则首先使用提升规则分析</li><li>如果当前作用规则中有名字了, 就不考虑外面的名字</li></ul><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">var</span> num = <span class="number">123</span>;</span><br><span class="line"><span class="function"><span class="keyword">function</span> <span class="title">foo</span>(<span class="params"></span>) </span>&#123;</span><br><span class="line">  <span class="built_in">console</span>.log( num );</span><br><span class="line">&#125;</span><br><span class="line">foo();</span><br><span class="line"></span><br><span class="line"><span class="keyword">if</span> ( <span class="literal">false</span> ) &#123;</span><br><span class="line">    <span class="keyword">var</span> num = <span class="number">123</span>;</span><br><span class="line">&#125;</span><br><span class="line"><span class="built_in">console</span>.log( num ); <span class="comment">// undefiend</span></span><br></pre></td></tr></table></figure><h3 id="作用域链"><a href="#作用域链" class="headerlink" title="作用域链"></a>作用域链</h3><pre><code>只有函数可以制造作用域结构， 那么只要是代码，就至少有一个作用域, 即全局作用域。凡是代码中有函数，那么这个函数就构成另一个作用域。如果函数中还有函数，那么在这个作用域中就又可以诞生一个作用域。将这样的所有的作用域列出来，可以有一个结构: 函数内指向函数外的链式结构。就称作作用域链。</code></pre><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">// 案例1：</span></span><br><span class="line"><span class="function"><span class="keyword">function</span> <span class="title">f1</span>(<span class="params"></span>) </span>&#123;</span><br><span class="line">    <span class="function"><span class="keyword">function</span> <span class="title">f2</span>(<span class="params"></span>) </span>&#123;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="keyword">var</span> num = <span class="number">456</span>;</span><br><span class="line"><span class="function"><span class="keyword">function</span> <span class="title">f3</span>(<span class="params"></span>) </span>&#123;</span><br><span class="line">    <span class="function"><span class="keyword">function</span> <span class="title">f4</span>(<span class="params"></span>) </span>&#123;    </span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p><img src="/media/06-1.png" alt="06-1"></p><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">// 案例2</span></span><br><span class="line"><span class="function"><span class="keyword">function</span> <span class="title">f1</span>(<span class="params"></span>) </span>&#123;</span><br><span class="line">    <span class="keyword">var</span> num = <span class="number">123</span>;</span><br><span class="line">    <span class="function"><span class="keyword">function</span> <span class="title">f2</span>(<span class="params"></span>) </span>&#123;</span><br><span class="line">        <span class="built_in">console</span>.log( num );</span><br><span class="line">    &#125;</span><br><span class="line">    f2();</span><br><span class="line">&#125;</span><br><span class="line"><span class="keyword">var</span> num = <span class="number">456</span>;</span><br><span class="line">f1();</span><br></pre></td></tr></table></figure><p><img src="/media/06-2.png" alt="06-2"></p><h2 id="预解析"><a href="#预解析" class="headerlink" title="预解析"></a>预解析</h2><blockquote><p>JavaScript代码的执行是由浏览器中的JavaScript解析器来执行的。JavaScript解析器执行JavaScript代码的时候，分为两个过程：预解析过程和代码执行过程</p></blockquote><p>预解析过程：</p><ol><li>把变量的声明提升到当前作用域的最前面，只会提升声明，不会提升赋值。</li><li>把函数的声明提升到当前作用域的最前面，只会提升声明，不会提升调用。</li><li>先提升var，在提升function</li></ol><p>JavaScript的执行过程</p><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">var</span> a = <span class="number">25</span>;</span><br><span class="line"><span class="function"><span class="keyword">function</span> <span class="title">abc</span> (<span class="params"></span>)</span>&#123;</span><br><span class="line">  alert(a);<span class="comment">//undefined</span></span><br><span class="line">  <span class="keyword">var</span> a = <span class="number">10</span>;</span><br><span class="line">&#125;</span><br><span class="line">abc();</span><br><span class="line"><span class="comment">// 如果变量和函数同名的话，函数优先</span></span><br><span class="line"><span class="built_in">console</span>.log(a);</span><br><span class="line"><span class="function"><span class="keyword">function</span> <span class="title">a</span>(<span class="params"></span>) </span>&#123;</span><br><span class="line">  <span class="built_in">console</span>.log(<span class="string">'aaaaa'</span>);</span><br><span class="line">&#125;</span><br><span class="line"><span class="keyword">var</span> a = <span class="number">1</span>;</span><br><span class="line"><span class="built_in">console</span>.log(a);</span><br></pre></td></tr></table></figure><h3 id="全局解析规则"><a href="#全局解析规则" class="headerlink" title="全局解析规则"></a>全局解析规则</h3><h3 id="函数内部解析规则"><a href="#函数内部解析规则" class="headerlink" title="函数内部解析规则"></a>函数内部解析规则</h3><h3 id="变量提升"><a href="#变量提升" class="headerlink" title="变量提升"></a>变量提升</h3><ul><li><p>变量提升</p><p>定义变量的时候，变量的声明会被提升到作用域的最上面，变量的赋值不会提升。</p></li><li><p>函数提升</p><p>JavaScript解析器首先会把当前作用域的函数声明提前到整个作用域的最前面</p></li></ul><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">// 1、-----------------------------------</span></span><br><span class="line"><span class="keyword">var</span> num = <span class="number">10</span>;</span><br><span class="line">fun();</span><br><span class="line"><span class="function"><span class="keyword">function</span> <span class="title">fun</span>(<span class="params"></span>) </span>&#123;</span><br><span class="line">  <span class="built_in">console</span>.log(num);</span><br><span class="line">  <span class="keyword">var</span> num = <span class="number">20</span>;</span><br><span class="line">&#125;</span><br><span class="line"><span class="comment">//2、-----------------------------------</span></span><br><span class="line"><span class="keyword">var</span> a = <span class="number">18</span>;</span><br><span class="line">f1();</span><br><span class="line"><span class="function"><span class="keyword">function</span> <span class="title">f1</span>(<span class="params"></span>) </span>&#123;</span><br><span class="line">  <span class="keyword">var</span> b = <span class="number">9</span>;</span><br><span class="line">  <span class="built_in">console</span>.log(a);</span><br><span class="line">  <span class="built_in">console</span>.log(b);</span><br><span class="line">  <span class="keyword">var</span> a = <span class="string">'123'</span>;</span><br><span class="line">&#125;</span><br><span class="line"><span class="comment">// 3、-----------------------------------</span></span><br><span class="line">f1();</span><br><span class="line"><span class="built_in">console</span>.log(c);</span><br><span class="line"><span class="built_in">console</span>.log(b);</span><br><span class="line"><span class="built_in">console</span>.log(a);</span><br><span class="line"><span class="function"><span class="keyword">function</span> <span class="title">f1</span>(<span class="params"></span>) </span>&#123;</span><br><span class="line">  <span class="keyword">var</span> a = b = c = <span class="number">9</span>;</span><br><span class="line">  <span class="built_in">console</span>.log(a);</span><br><span class="line">  <span class="built_in">console</span>.log(b);</span><br><span class="line">  <span class="built_in">console</span>.log(c);</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h2 id="对象"><a href="#对象" class="headerlink" title="对象"></a>对象</h2><h3 id="为什么要有对象"><a href="#为什么要有对象" class="headerlink" title="为什么要有对象"></a>为什么要有对象</h3><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><span class="line"><span class="function"><span class="keyword">function</span> <span class="title">printPerson</span>(<span class="params">name, age, sex....</span>) </span>&#123;</span><br><span class="line">&#125;</span><br><span class="line"><span class="comment">// 函数的参数如果特别多的话，可以使用对象简化</span></span><br><span class="line"><span class="function"><span class="keyword">function</span> <span class="title">printPerson</span>(<span class="params">person</span>) </span>&#123;</span><br><span class="line">  <span class="built_in">console</span>.log(person.name);</span><br><span class="line">  ……</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h3 id="什么是对象"><a href="#什么是对象" class="headerlink" title="什么是对象"></a>什么是对象</h3><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line">现实生活中：万物皆对象，对象是一个具体的事物，一个具体的事物就会有行为和特征。</span><br><span class="line">举例： 一部车，一个手机</span><br><span class="line">车是一类事物，门口停的那辆车才是对象</span><br><span class="line">true特征：红色、四个轮子</span><br><span class="line">true行为：驾驶、刹车</span><br></pre></td></tr></table></figure><h3 id="JavaScript中的对象"><a href="#JavaScript中的对象" class="headerlink" title="JavaScript中的对象"></a>JavaScript中的对象</h3><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line">JavaScript中的对象其实就是生活中对象的一个抽象</span><br><span class="line">JavaScript的对象是无序属性的集合。</span><br><span class="line">true其属性可以包含基本值、对象或函数。对象就是一组没有顺序的值。我们可以把JavaScript中的对象想象成键值对，其中值可以是数据和函数。</span><br><span class="line">对象的行为和特征</span><br><span class="line">true特征---属性</span><br><span class="line">true行为---方法</span><br></pre></td></tr></table></figure><ul><li>事物的特征在对象中用属性来表示。</li><li>事物的行为在对象中用方法来表示。</li></ul><h3 id="对象字面量"><a href="#对象字面量" class="headerlink" title="对象字面量"></a>对象字面量</h3><blockquote><p>字面量：11 ‘abc’  true  [] {}等</p></blockquote><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">var</span> o = &#123;</span><br><span class="line">  name: <span class="string">'zs,</span></span><br><span class="line"><span class="string">  age: 18,</span></span><br><span class="line"><span class="string">  sex: true,</span></span><br><span class="line"><span class="string">  sayHi: function () &#123;</span></span><br><span class="line"><span class="string">    console.log(this.name);</span></span><br><span class="line"><span class="string">  &#125;</span></span><br><span class="line"><span class="string">&#125;;</span></span><br></pre></td></tr></table></figure><p>思考：</p><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">如何把学生对象、老师对象、英雄对象改写成字面量的方式</span><br></pre></td></tr></table></figure><h3 id="对象创建方式"><a href="#对象创建方式" class="headerlink" title="对象创建方式"></a>对象创建方式</h3><ul><li>对象字面量</li></ul><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">var</span> o = &#123;</span><br><span class="line">  name: <span class="string">'zs'</span>,</span><br><span class="line">  age: <span class="number">18</span>,</span><br><span class="line">  sex: <span class="literal">true</span>,</span><br><span class="line">  sayHi: <span class="function"><span class="keyword">function</span> (<span class="params"></span>) </span>&#123;</span><br><span class="line">    <span class="built_in">console</span>.log(<span class="keyword">this</span>.name);</span><br><span class="line">  &#125;</span><br><span class="line">&#125;;</span><br></pre></td></tr></table></figure><ul><li>new Object()创建对象</li></ul><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">var</span> person = <span class="keyword">new</span> <span class="built_in">Object</span>();</span><br><span class="line">  person.name = <span class="string">'lisi'</span>;</span><br><span class="line">  person.age = <span class="number">35</span>;</span><br><span class="line">  person.job = <span class="string">'actor'</span>;</span><br><span class="line">  person.sayHi = <span class="function"><span class="keyword">function</span>(<span class="params"></span>)</span>&#123;</span><br><span class="line">  <span class="built_in">console</span>.log(<span class="string">'Hello,everyBody'</span>);</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><ul><li><p>工厂函数创建对象</p><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br></pre></td><td class="code"><pre><span class="line"><span class="function"><span class="keyword">function</span> <span class="title">createPerson</span>(<span class="params">name, age, job</span>) </span>&#123;</span><br><span class="line">  <span class="keyword">var</span> person = <span class="keyword">new</span> <span class="built_in">Object</span>();</span><br><span class="line">  person.name = name;</span><br><span class="line">  person.age = age;</span><br><span class="line">  person.job = job;</span><br><span class="line">  person.sayHi = <span class="function"><span class="keyword">function</span>(<span class="params"></span>)</span>&#123;</span><br><span class="line">    <span class="built_in">console</span>.log(<span class="string">'Hello,everyBody'</span>);</span><br><span class="line">  &#125;</span><br><span class="line">  <span class="keyword">return</span> person;</span><br><span class="line">&#125;</span><br><span class="line"><span class="keyword">var</span> p1 = createPerson(<span class="string">'张三'</span>, <span class="number">22</span>, <span class="string">'actor'</span>);</span><br></pre></td></tr></table></figure></li><li><p>自定义构造函数</p><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br></pre></td><td class="code"><pre><span class="line"><span class="function"><span class="keyword">function</span> <span class="title">Person</span>(<span class="params">name,age,job</span>)</span>&#123;</span><br><span class="line">  <span class="keyword">this</span>.name = name;</span><br><span class="line">  <span class="keyword">this</span>.age = age;</span><br><span class="line">  <span class="keyword">this</span>.job = job;</span><br><span class="line">  <span class="keyword">this</span>.sayHi = <span class="function"><span class="keyword">function</span>(<span class="params"></span>)</span>&#123;</span><br><span class="line">  <span class="built_in">console</span>.log(<span class="string">'Hello,everyBody'</span>);</span><br><span class="line">  &#125;</span><br><span class="line">&#125;</span><br><span class="line"><span class="keyword">var</span> p1 = <span class="keyword">new</span> Person(<span class="string">'张三'</span>, <span class="number">22</span>, <span class="string">'actor'</span>);</span><br></pre></td></tr></table></figure></li></ul><h3 id="属性和方法"><a href="#属性和方法" class="headerlink" title="属性和方法"></a>属性和方法</h3><pre><code>如果一个变量属于一个对象所有，那么该变量就可以称之为该对象的一个属性，属性一般是名词，用来描述事物的特征如果一个函数属于一个对象所有，那么该函数就可以称之为该对象的一个方法，方法是动词，描述事物的行为和功能</code></pre><h3 id="new关键字"><a href="#new关键字" class="headerlink" title="new关键字"></a>new关键字</h3><blockquote><p>构造函数 ，是一种特殊的函数。主要用来在创建对象时初始化对象， 即为对象成员变量赋初始值，总与new运算符一起使用在创建对象的语句中。</p></blockquote><ol><li>构造函数用于创建一类对象，首字母要大写。</li><li>构造函数要和new一起使用才有意义。</li></ol><p>new在执行时会做四件事情</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line">new会在内存中创建一个新的空对象</span><br><span class="line">new 会让this指向这个新的对象</span><br><span class="line">执行构造函数  目的：给这个新对象加属性和方法</span><br><span class="line">new会返回这个新对象</span><br></pre></td></tr></table></figure><h3 id="this详解"><a href="#this详解" class="headerlink" title="this详解"></a>this详解</h3><pre><code>JavaScript中的this指向问题，有时候会让人难以捉摸，随着学习的深入，我们可以逐渐了解现在我们需要掌握函数内部的this几个特点    1. 函数在定义的时候this是不确定的，只有在调用的时候才可以确定    2. 一般函数直接执行，内部this指向全局window    3. 函数作为一个对象的方法，被该对象所调用，那么this指向的是该对象    4. 构造函数中的this其实是一个隐式对象，类似一个初始化的模型，所有方法和属性都挂载到了这个隐式对象身上，后续通过new关键字来调用，从而实现实例化</code></pre><h2 id="对象的使用"><a href="#对象的使用" class="headerlink" title="对象的使用"></a>对象的使用</h2><h3 id="遍历对象的属性"><a href="#遍历对象的属性" class="headerlink" title="遍历对象的属性"></a>遍历对象的属性</h3><blockquote><p>通过for..in语法可以遍历一个对象</p></blockquote><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">var</span> obj = &#123;&#125;;</span><br><span class="line"><span class="keyword">for</span> (<span class="keyword">var</span> i = <span class="number">0</span>; i &lt; <span class="number">10</span>; i++) &#123;</span><br><span class="line">  obj[i] = i * <span class="number">2</span>;</span><br><span class="line">&#125;</span><br><span class="line"><span class="keyword">for</span>(<span class="keyword">var</span> key <span class="keyword">in</span> obj) &#123;</span><br><span class="line">  <span class="built_in">console</span>.log(key + <span class="string">"=="</span> + obj[key]);</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h3 id="删除对象的属性"><a href="#删除对象的属性" class="headerlink" title="删除对象的属性"></a>删除对象的属性</h3><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><span class="line"><span class="function"><span class="keyword">function</span> <span class="title">fun</span>(<span class="params"></span>) </span>&#123; </span><br><span class="line">  <span class="keyword">this</span>.name = <span class="string">'mm'</span>;</span><br><span class="line">&#125;</span><br><span class="line"><span class="keyword">var</span> obj = <span class="keyword">new</span> fun(); </span><br><span class="line"><span class="built_in">console</span>.log(obj.name); <span class="comment">// mm </span></span><br><span class="line"><span class="keyword">delete</span> obj.name;</span><br><span class="line"><span class="built_in">console</span>.log(obj.name); <span class="comment">// undefined</span></span><br></pre></td></tr></table></figure><h3 id="简单类型和复杂类型的区别"><a href="#简单类型和复杂类型的区别" class="headerlink" title="简单类型和复杂类型的区别"></a>简单类型和复杂类型的区别</h3><blockquote><p>基本类型又叫做值类型，复杂类型又叫做引用类型</p><p>值类型：简单数据类型，基本数据类型，在存储时，变量中存储的是值本身，因此叫做值类型。</p><p>引用类型：复杂数据类型，在存储是，变量中存储的仅仅是地址（引用），因此叫做引用数据类型。</p></blockquote><ul><li><p>堆和栈</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line">堆栈空间分配区别：</span><br><span class="line">　　1、栈（操作系统）：由操作系统自动分配释放 ，存放函数的参数值，局部变量的值等。其操作方式类似于数据结构中的栈；</span><br><span class="line">　　2、堆（操作系统）： 存储复杂类型(对象)，一般由程序员分配释放， 若程序员不释放，由垃圾回收机制回收，分配方式倒是类似于链表。</span><br></pre></td></tr></table></figure></li><li><p>注意：JavaScript中没有堆和栈的概念，此处我们用堆和栈来讲解，目的方便理解和方便以后的学习。</p></li></ul><h4 id="基本类型在内存中的存储"><a href="#基本类型在内存中的存储" class="headerlink" title="基本类型在内存中的存储"></a>基本类型在内存中的存储</h4><p><img src="/media/1498288494687.png" alt="1498288494687"></p><h4 id="复杂类型在内存中的存储"><a href="#复杂类型在内存中的存储" class="headerlink" title="复杂类型在内存中的存储"></a>复杂类型在内存中的存储</h4><p><img src="/media/1498700592589.png" alt="1498700592589"></p><h4 id="基本类型作为函数的参数"><a href="#基本类型作为函数的参数" class="headerlink" title="基本类型作为函数的参数"></a>基本类型作为函数的参数</h4><p><img src="/media/1497497605587-8288640195.png" alt="1497497605587"></p><h4 id="复杂类型作为函数的参数"><a href="#复杂类型作为函数的参数" class="headerlink" title="复杂类型作为函数的参数"></a>复杂类型作为函数的参数</h4><p><img src="/media/1497497865969.png" alt="1497497865969"></p><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">// 下面代码输出的结果</span></span><br><span class="line"><span class="function"><span class="keyword">function</span> <span class="title">Person</span>(<span class="params">name,age,salary</span>) </span>&#123;</span><br><span class="line">  <span class="keyword">this</span>.name = name;</span><br><span class="line">  <span class="keyword">this</span>.age = age;</span><br><span class="line">  <span class="keyword">this</span>.salary = salary;</span><br><span class="line">&#125;</span><br><span class="line"><span class="function"><span class="keyword">function</span> <span class="title">f1</span>(<span class="params">person</span>) </span>&#123;</span><br><span class="line">  person.name = <span class="string">"ls"</span>;</span><br><span class="line">  person = <span class="keyword">new</span> Person(<span class="string">"aa"</span>,<span class="number">18</span>,<span class="number">10</span>);</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="keyword">var</span> p = <span class="keyword">new</span> Person(<span class="string">"zs"</span>,<span class="number">18</span>,<span class="number">1000</span>);</span><br><span class="line"><span class="built_in">console</span>.log(p.name);</span><br><span class="line">f1(p);</span><br><span class="line"><span class="built_in">console</span>.log(p.name);</span><br></pre></td></tr></table></figure><p>思考：</p><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">//1. </span></span><br><span class="line"><span class="keyword">var</span> num1 = <span class="number">10</span>;</span><br><span class="line"><span class="keyword">var</span> num2 = num1;</span><br><span class="line">num1 = <span class="number">20</span>;</span><br><span class="line"><span class="built_in">console</span>.log(num1);</span><br><span class="line"><span class="built_in">console</span>.log(num2);</span><br><span class="line"></span><br><span class="line"><span class="comment">//2. </span></span><br><span class="line"><span class="keyword">var</span> num = <span class="number">50</span>;</span><br><span class="line"><span class="function"><span class="keyword">function</span> <span class="title">f1</span>(<span class="params">num</span>) </span>&#123;</span><br><span class="line">    num = <span class="number">60</span>;</span><br><span class="line">    <span class="built_in">console</span>.log(num);</span><br><span class="line">&#125;</span><br><span class="line">f1(num);</span><br><span class="line"><span class="built_in">console</span>.log(num);</span><br><span class="line"></span><br><span class="line"><span class="comment">//3. </span></span><br><span class="line"><span class="keyword">var</span> num1 = <span class="number">55</span>;</span><br><span class="line"><span class="keyword">var</span> num2 = <span class="number">66</span>;</span><br><span class="line"><span class="function"><span class="keyword">function</span> <span class="title">f1</span>(<span class="params">num, num1</span>) </span>&#123;</span><br><span class="line">  num = <span class="number">100</span>;</span><br><span class="line">  num1 = <span class="number">100</span>;</span><br><span class="line">  num2 = <span class="number">100</span>;</span><br><span class="line">  <span class="built_in">console</span>.log(num);</span><br><span class="line">  <span class="built_in">console</span>.log(num1);</span><br><span class="line">  <span class="built_in">console</span>.log(num2);</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line">f1(num1, num2);</span><br><span class="line"><span class="built_in">console</span>.log(num1);</span><br><span class="line"><span class="built_in">console</span>.log(num2);</span><br><span class="line"><span class="built_in">console</span>.log(num);</span><br></pre></td></tr></table></figure><h2 id="内置对象"><a href="#内置对象" class="headerlink" title="内置对象"></a>内置对象</h2><p>JavaScript中的对象分为3种：内置对象、浏览器对象、自定义对象</p><p>JavaScript 提供多个内置对象：Math/Array/Number/String/Boolean…</p><p>对象只是带有<strong>属性</strong>和<strong>方法</strong>的特殊数据类型。</p><p>学习一个内置对象的使用，只要学会其常用的成员的使用（通过查文档学习）</p><p>可以通过MDN/W3C来查询</p><p>内置对象的方法很多，我们只需要知道内置对象提供的常用方法，使用的时候查询文档。</p><h3 id="MDN"><a href="#MDN" class="headerlink" title="MDN"></a>MDN</h3><p>Mozilla 开发者网络（MDN）提供有关开放网络技术（Open Web）的信息，包括 HTML、CSS 和万维网及 HTML5 应用的 API。</p><ul><li><a href="https://developer.mozilla.org/zh-CN/" target="_blank" rel="noopener">MDN</a></li><li>通过查询MDN学习Math对象的random()方法的使用</li></ul><h3 id="如何学习一个方法？"><a href="#如何学习一个方法？" class="headerlink" title="如何学习一个方法？"></a>如何学习一个方法？</h3><ol><li>方法的功能</li><li>参数的意义和<strong>类型</strong></li><li>返回值意义和<strong>类型</strong></li><li>demo进行测试</li></ol><h3 id="Math对象"><a href="#Math对象" class="headerlink" title="Math对象"></a>Math对象</h3><p>Math对象不是构造函数，它具有数学常数和函数的属性和方法，都是以静态成员的方式提供</p><p>跟数学相关的运算来找Math中的成员（求绝对值，取整）</p><p><a href="https://developer.mozilla.org/zh-CN/docs/Web/JavaScript/Reference/Global_Objects/Math" target="_blank" rel="noopener">Math</a></p><p>演示：Math.PI、Math.random()、Math.floor()/Math.ceil()、Math.round()、Math.abs()    、Math.max()</p><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br></pre></td><td class="code"><pre><span class="line"><span class="built_in">Math</span>.PI<span class="comment">// 圆周率</span></span><br><span class="line"><span class="built_in">Math</span>.random()<span class="comment">// 生成随机数</span></span><br><span class="line"><span class="built_in">Math</span>.floor()/<span class="built_in">Math</span>.ceil() <span class="comment">// 向下取整/向上取整</span></span><br><span class="line"><span class="built_in">Math</span>.round()<span class="comment">// 取整，四舍五入</span></span><br><span class="line"><span class="built_in">Math</span>.abs()<span class="comment">// 绝对值</span></span><br><span class="line"><span class="built_in">Math</span>.max()/<span class="built_in">Math</span>.min() <span class="comment">// 求最大和最小值</span></span><br><span class="line"></span><br><span class="line"><span class="built_in">Math</span>.sin()/<span class="built_in">Math</span>.cos() <span class="comment">// 正弦/余弦</span></span><br><span class="line"><span class="built_in">Math</span>.power()/<span class="built_in">Math</span>.sqrt() <span class="comment">// 求指数次幂/求平方根</span></span><br></pre></td></tr></table></figure><h4 id="案例-6"><a href="#案例-6" class="headerlink" title="案例"></a>案例</h4><ul><li>求10-20之间的随机数</li><li>随机生成颜色RGB</li><li>模拟实现max()/min()</li></ul><h3 id="Date对象"><a href="#Date对象" class="headerlink" title="Date对象"></a>Date对象</h3><p>创建 <code>Date</code> 实例用来处理日期和时间。Date 对象基于1970年1月1日（世界标准时间）起的毫秒数。</p><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">// 获取当前时间，UTC世界时间，距1970年1月1日（世界标准时间）起的毫秒数</span></span><br><span class="line"><span class="keyword">var</span> now = <span class="keyword">new</span> <span class="built_in">Date</span>();</span><br><span class="line"><span class="built_in">console</span>.log(now.valueOf());<span class="comment">// 获取距1970年1月1日（世界标准时间）起的毫秒数</span></span><br><span class="line"></span><br><span class="line"><span class="built_in">Date</span>构造函数的参数</span><br><span class="line"><span class="number">1.</span> 毫秒数 <span class="number">1498099000356</span><span class="keyword">new</span> <span class="built_in">Date</span>(<span class="number">1498099000356</span>)</span><br><span class="line"><span class="number">2.</span> 日期格式字符串  <span class="string">'2015-5-1'</span> <span class="keyword">new</span> <span class="built_in">Date</span>(<span class="string">'2015-5-1'</span>)</span><br><span class="line"><span class="number">3.</span> 年、月、日……  <span class="keyword">new</span> <span class="built_in">Date</span>(<span class="number">2015</span>, <span class="number">4</span>, <span class="number">1</span>)   <span class="comment">// 月份从0开始</span></span><br></pre></td></tr></table></figure><ul><li>获取日期的毫秒形式</li></ul><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">var</span> now = <span class="keyword">new</span> <span class="built_in">Date</span>();</span><br><span class="line"><span class="comment">// valueOf用于获取对象的原始值</span></span><br><span class="line"><span class="built_in">console</span>.log(date.valueOf())</span><br><span class="line"></span><br><span class="line"><span class="comment">// HTML5中提供的方法，有兼容性问题</span></span><br><span class="line"><span class="keyword">var</span> now = <span class="built_in">Date</span>.now();</span><br><span class="line"></span><br><span class="line"><span class="comment">// 不支持HTML5的浏览器，可以用下面这种方式</span></span><br><span class="line"><span class="keyword">var</span> now = + <span class="keyword">new</span> <span class="built_in">Date</span>();<span class="comment">// 调用 Date对象的valueOf()</span></span><br></pre></td></tr></table></figure><ul><li>日期格式化方法</li></ul><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><span class="line">toString()<span class="comment">// 转换成字符串</span></span><br><span class="line">valueOf()<span class="comment">// 获取毫秒值</span></span><br><span class="line"><span class="comment">// 下面格式化日期的方法，在不同浏览器可能表现不一致，一般不用</span></span><br><span class="line">toDateString()</span><br><span class="line">toTimeString()</span><br><span class="line">toLocaleDateString()</span><br><span class="line">toLocaleTimeString()</span><br></pre></td></tr></table></figure><ul><li>获取日期指定部分</li></ul><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br></pre></td><td class="code"><pre><span class="line">getTime()    <span class="comment">// 返回毫秒数和valueOf()结果一样，valueOf()内部调用的getTime()</span></span><br><span class="line">getMilliseconds() </span><br><span class="line">getSeconds()  <span class="comment">// 返回0-59</span></span><br><span class="line">getMinutes()  <span class="comment">// 返回0-59</span></span><br><span class="line">getHours()    <span class="comment">// 返回0-23</span></span><br><span class="line">getDay()      <span class="comment">// 返回星期几 0周日   6周6</span></span><br><span class="line">getDate()     <span class="comment">// 返回当前月的第几天</span></span><br><span class="line">getMonth()    <span class="comment">// 返回月份，***从0开始***</span></span><br><span class="line">getFullYear() <span class="comment">//返回4位的年份  如 2016</span></span><br></pre></td></tr></table></figure><h4 id="案例-7"><a href="#案例-7" class="headerlink" title="案例"></a>案例</h4><ul><li>写一个函数，格式化日期对象，返回yyyy-MM-dd HH:mm:ss的形式</li></ul><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br></pre></td><td class="code"><pre><span class="line"><span class="function"><span class="keyword">function</span> <span class="title">formatDate</span>(<span class="params">d</span>) </span>&#123;</span><br><span class="line">  <span class="comment">//如果date不是日期对象，返回</span></span><br><span class="line">  <span class="keyword">if</span> (!date <span class="keyword">instanceof</span> <span class="built_in">Date</span>) &#123;</span><br><span class="line">    <span class="keyword">return</span>;</span><br><span class="line">  &#125;</span><br><span class="line">  <span class="keyword">var</span> year = d.getFullYear(),</span><br><span class="line">      month = d.getMonth() + <span class="number">1</span>, </span><br><span class="line">      date = d.getDate(), </span><br><span class="line">      hour = d.getHours(), </span><br><span class="line">      minute = d.getMinutes(), </span><br><span class="line">      second = d.getSeconds();</span><br><span class="line">  month = month &lt; <span class="number">10</span> ? <span class="string">'0'</span> + month : month;</span><br><span class="line">  date = date &lt; <span class="number">10</span> ? <span class="string">'0'</span> + date : date;</span><br><span class="line">  hour = hour &lt; <span class="number">10</span> ? <span class="string">'0'</span> + hour : hour;</span><br><span class="line">  minute = minute &lt; <span class="number">10</span> ? <span class="string">'0'</span> + minute:minute;</span><br><span class="line">  second = second &lt; <span class="number">10</span> ? <span class="string">'0'</span> + second:second;</span><br><span class="line">  <span class="keyword">return</span> year + <span class="string">'-'</span> + month + <span class="string">'-'</span> + date + <span class="string">' '</span> + hour + <span class="string">':'</span> + minute + <span class="string">':'</span> + second;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><ul><li>计算时间差，返回相差的天/时/分/秒</li></ul><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br></pre></td><td class="code"><pre><span class="line"><span class="function"><span class="keyword">function</span> <span class="title">getInterval</span>(<span class="params">start, end</span>) </span>&#123;</span><br><span class="line">  <span class="keyword">var</span> day, hour, minute, second, interval;</span><br><span class="line">  interval = end - start;</span><br><span class="line">  interval /= <span class="number">1000</span>;</span><br><span class="line">  day = <span class="built_in">Math</span>.round(interval / <span class="number">60</span> /<span class="number">60</span> / <span class="number">24</span>);</span><br><span class="line">  hour = <span class="built_in">Math</span>.round(interval / <span class="number">60</span> /<span class="number">60</span> % <span class="number">24</span>);</span><br><span class="line">  minute = <span class="built_in">Math</span>.round(interval / <span class="number">60</span> % <span class="number">60</span>);</span><br><span class="line">  second = <span class="built_in">Math</span>.round(interval % <span class="number">60</span>);</span><br><span class="line">  <span class="keyword">return</span> &#123;</span><br><span class="line">    day: day,</span><br><span class="line">    hour: hour,</span><br><span class="line">    minute: minute,</span><br><span class="line">    second: second</span><br><span class="line">  &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h3 id="Array对象"><a href="#Array对象" class="headerlink" title="Array对象"></a>Array对象</h3><ul><li>创建数组对象的两种方式<ul><li>字面量方式</li><li>new Array()</li></ul></li></ul><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">// 1. 使用构造函数创建数组对象</span></span><br><span class="line"><span class="comment">// 创建了一个空数组</span></span><br><span class="line"><span class="keyword">var</span> arr = <span class="keyword">new</span> <span class="built_in">Array</span>();</span><br><span class="line"><span class="comment">// 创建了一个数组，里面存放了3个字符串</span></span><br><span class="line"><span class="keyword">var</span> arr = <span class="keyword">new</span> <span class="built_in">Array</span>(<span class="string">'zs'</span>, <span class="string">'ls'</span>, <span class="string">'ww'</span>);</span><br><span class="line"><span class="comment">// 创建了一个数组，里面存放了4个数字</span></span><br><span class="line"><span class="keyword">var</span> arr = <span class="keyword">new</span> <span class="built_in">Array</span>(<span class="number">1</span>, <span class="number">2</span>, <span class="number">3</span>, <span class="number">4</span>);</span><br><span class="line"></span><br><span class="line"></span><br><span class="line"><span class="comment">// 2. 使用字面量创建数组对象</span></span><br><span class="line"><span class="keyword">var</span> arr = [<span class="number">1</span>, <span class="number">2</span>, <span class="number">3</span>];</span><br><span class="line"></span><br><span class="line"><span class="comment">// 获取数组中元素的个数</span></span><br><span class="line"><span class="built_in">console</span>.log(arr.length);</span><br></pre></td></tr></table></figure><ul><li><p>检测一个对象是否是数组</p><ul><li>instanceof</li><li>Array.isArray()     HTML5中提供的方法，有兼容性问题</li></ul><p>函数的参数，如果要求是一个数组的话，可以用这种方式来进行判断</p></li><li><p>toString()/valueOf()</p><ul><li>toString()        把数组转换成字符串，逗号分隔每一项</li><li>valueOf()         返回数组对象本身</li></ul></li><li><p>数组常用方法</p><p>演示：push()、shift()、unshift()、reverse()、sort()、splice()、indexOf()</p></li></ul><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">// 1 栈操作(先进后出)</span></span><br><span class="line">push()</span><br><span class="line">pop() <span class="comment">//取出数组中的最后一项，修改length属性</span></span><br><span class="line"><span class="comment">// 2 队列操作(先进先出)</span></span><br><span class="line">push()</span><br><span class="line">shift()<span class="comment">//取出数组中的第一个元素，修改length属性</span></span><br><span class="line">unshift() <span class="comment">//在数组最前面插入项，返回数组的长度</span></span><br><span class="line"><span class="comment">// 3 排序方法</span></span><br><span class="line">reverse()<span class="comment">//翻转数组</span></span><br><span class="line">sort(); <span class="comment">//即使是数组sort也是根据字符，从小到大排序</span></span><br><span class="line"><span class="comment">// 带参数的sort是如何实现的？</span></span><br><span class="line"><span class="comment">// 4 操作方法</span></span><br><span class="line">concat()  <span class="comment">//把参数拼接到当前数组</span></span><br><span class="line">slice() <span class="comment">//从当前数组中截取一个新的数组，不影响原来的数组，参数start从0开始,end从1开始</span></span><br><span class="line">splice()<span class="comment">//删除或替换当前数组的某些项目，参数start, deleteCount, options(要替换的项目)</span></span><br><span class="line"><span class="comment">// 5 位置方法</span></span><br><span class="line">indexOf()、lastIndexOf()   <span class="comment">//如果没找到返回-1</span></span><br><span class="line"><span class="comment">// 6 迭代方法 不会修改原数组(可选)</span></span><br><span class="line">every()、filter()、forEach()、map()、some()</span><br><span class="line"><span class="comment">// 7 方法将数组的所有元素连接到一个字符串中。</span></span><br><span class="line">join()</span><br></pre></td></tr></table></figure><ul><li>清空数组</li></ul><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">// 方式1 推荐 </span></span><br><span class="line">arr = [];</span><br><span class="line"><span class="comment">// 方式2 </span></span><br><span class="line">arr.length = <span class="number">0</span>;</span><br><span class="line"><span class="comment">// 方式3</span></span><br><span class="line">arr.splice(<span class="number">0</span>, arr.length);</span><br></pre></td></tr></table></figure><h4 id="案例-8"><a href="#案例-8" class="headerlink" title="案例"></a>案例</h4><ul><li>将一个字符串数组输出为|分割的形式，比如“刘备|张飞|关羽”。使用两种方式实现</li></ul><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br></pre></td><td class="code"><pre><span class="line"><span class="function"><span class="keyword">function</span> <span class="title">myJoin</span>(<span class="params">array, seperator</span>) </span>&#123;</span><br><span class="line">  seperator = seperator || <span class="string">','</span>;</span><br><span class="line">  array = array || [];</span><br><span class="line">  <span class="keyword">if</span> (array.length == <span class="number">0</span>)&#123;</span><br><span class="line">    <span class="keyword">return</span> <span class="string">''</span>;</span><br><span class="line">  &#125;</span><br><span class="line">  <span class="keyword">var</span> str = array[<span class="number">0</span>];</span><br><span class="line">  <span class="keyword">for</span> (<span class="keyword">var</span> i = <span class="number">1</span>; i &lt; array.length; i++) &#123;</span><br><span class="line">    str += seperator + array[i];</span><br><span class="line">  &#125;</span><br><span class="line">  <span class="keyword">return</span> str;</span><br><span class="line">&#125;</span><br><span class="line"><span class="keyword">var</span> array = [<span class="number">6</span>, <span class="number">3</span>, <span class="number">5</span>, <span class="number">6</span>, <span class="number">7</span>, <span class="number">8</span>, <span class="number">0</span>];</span><br><span class="line"><span class="built_in">console</span>.log(myJoin(array, <span class="string">'-'</span>));</span><br><span class="line"></span><br><span class="line"><span class="built_in">console</span>.log(array.join(<span class="string">'-'</span>))</span><br></pre></td></tr></table></figure><ul><li>将一个字符串数组的元素的顺序进行反转。[“a”, “b”, “c”, “d”] -&gt; [ “d”,”c”,”b”,”a”]。使用两种种方式实现。提示：第i个和第length-i-1个进行交换</li></ul><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br></pre></td><td class="code"><pre><span class="line"><span class="function"><span class="keyword">function</span> <span class="title">myReverse</span>(<span class="params">arr</span>) </span>&#123;</span><br><span class="line">  <span class="keyword">if</span> (!arr || arr.length == <span class="number">0</span>) &#123;</span><br><span class="line">    <span class="keyword">return</span> [];</span><br><span class="line">  &#125;</span><br><span class="line">  <span class="keyword">for</span> (<span class="keyword">var</span> i = <span class="number">0</span>; i &lt; arr.length / <span class="number">2</span>; i++) &#123;</span><br><span class="line">    <span class="keyword">var</span> tmp = arr[i];</span><br><span class="line">    arr[i] = arr[<span class="keyword">this</span>.length - i - <span class="number">1</span>];</span><br><span class="line">    arr[arr.length - i - <span class="number">1</span>] = tmp;</span><br><span class="line">  &#125;</span><br><span class="line">  <span class="keyword">return</span> arr;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="keyword">var</span> array = [<span class="string">'a'</span>, <span class="string">'b'</span>, <span class="string">'c'</span>];</span><br><span class="line"><span class="built_in">console</span>.log(myReverse(array));</span><br><span class="line"></span><br><span class="line"><span class="built_in">console</span>.log(array.reverse());</span><br></pre></td></tr></table></figure><ul><li>工资的数组[1500, 1200, 2000, 2100, 1800],把工资超过2000的删除</li></ul><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">// 方式1</span></span><br><span class="line"><span class="keyword">var</span> array =  [<span class="number">1500</span>,<span class="number">1200</span>,<span class="number">2000</span>,<span class="number">2100</span>,<span class="number">1800</span>];</span><br><span class="line"><span class="keyword">var</span> tmpArray = [];</span><br><span class="line"><span class="keyword">for</span> (<span class="keyword">var</span> i = <span class="number">0</span>; i &lt; array.length; i++) &#123;</span><br><span class="line">  <span class="keyword">if</span>(array[i] &lt; <span class="number">2000</span>) &#123;</span><br><span class="line">    tmpArray.push(array[i]);</span><br><span class="line">  &#125;</span><br><span class="line">&#125;</span><br><span class="line"><span class="built_in">console</span>.log(tmpArray);</span><br><span class="line"><span class="comment">// 方式2</span></span><br><span class="line"><span class="keyword">var</span> array =  [<span class="number">1500</span>, <span class="number">1200</span>, <span class="number">2000</span>, <span class="number">2100</span>, <span class="number">1800</span>];</span><br><span class="line">array = array.filter(<span class="function"><span class="keyword">function</span> (<span class="params">item, index</span>) </span>&#123;</span><br><span class="line">  <span class="keyword">if</span> (item &lt; <span class="number">2000</span>) &#123;</span><br><span class="line">    <span class="keyword">return</span> <span class="literal">true</span>;</span><br><span class="line">  &#125;</span><br><span class="line">  <span class="keyword">return</span> <span class="literal">false</span>;</span><br><span class="line">&#125;);</span><br><span class="line"><span class="built_in">console</span>.log(array);</span><br></pre></td></tr></table></figure><ul><li>[“c”, “a”, “z”, “a”, “x”, “a”]找到数组中每一个a出现的位置</li></ul><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">var</span> array =  [<span class="string">'c'</span>, <span class="string">'a'</span>, <span class="string">'z'</span>, <span class="string">'a'</span>, <span class="string">'x'</span>, <span class="string">'a'</span>];</span><br><span class="line"><span class="keyword">do</span> &#123;</span><br><span class="line">  <span class="keyword">var</span> index = array.indexOf(<span class="string">'a'</span>,index + <span class="number">1</span>);</span><br><span class="line">  <span class="keyword">if</span> (index != <span class="number">-1</span>)&#123;</span><br><span class="line">    <span class="built_in">console</span>.log(index);</span><br><span class="line">  &#125;</span><br><span class="line">&#125; <span class="keyword">while</span> (index &gt; <span class="number">0</span>);</span><br></pre></td></tr></table></figure><ul><li>编写一个方法去掉一个数组的重复元素</li></ul><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">var</span> array =  [<span class="string">'c'</span>, <span class="string">'a'</span>, <span class="string">'z'</span>, <span class="string">'a'</span>, <span class="string">'x'</span>, <span class="string">'a'</span>];</span><br><span class="line"><span class="function"><span class="keyword">function</span> <span class="title">clear</span>(<span class="params"></span>) </span>&#123;</span><br><span class="line">  <span class="keyword">var</span> o = &#123;&#125;;</span><br><span class="line">  <span class="keyword">for</span> (<span class="keyword">var</span> i = <span class="number">0</span>; i &lt; array.length; i++) &#123;</span><br><span class="line">    <span class="keyword">var</span> item = array[i];</span><br><span class="line">    <span class="keyword">if</span> (o[item]) &#123;</span><br><span class="line">      o[item]++;</span><br><span class="line">    &#125;<span class="keyword">else</span>&#123;</span><br><span class="line">      o[item] = <span class="number">1</span>;</span><br><span class="line">    &#125;</span><br><span class="line">  &#125;</span><br><span class="line">  <span class="keyword">var</span> tmpArray = [];</span><br><span class="line">  <span class="keyword">for</span>(<span class="keyword">var</span> key <span class="keyword">in</span> o) &#123;</span><br><span class="line">    <span class="keyword">if</span> (o[key] == <span class="number">1</span>) &#123;</span><br><span class="line">      tmpArray.push(key);</span><br><span class="line">    &#125;<span class="keyword">else</span>&#123;</span><br><span class="line">      <span class="keyword">if</span>(tmpArray.indexOf(key) == <span class="number">-1</span>)&#123;</span><br><span class="line">        tmpArray.push(key);</span><br><span class="line">      &#125;</span><br><span class="line">    &#125;</span><br><span class="line">  &#125;</span><br><span class="line">  returm tmpArray;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="built_in">console</span>.log(clear(array));</span><br></pre></td></tr></table></figure><h3 id="基本包装类型"><a href="#基本包装类型" class="headerlink" title="基本包装类型"></a>基本包装类型</h3><p>为了方便操作基本数据类型，JavaScript还提供了三个特殊的引用类型：String/Number/Boolean</p><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">// 下面代码的问题？</span></span><br><span class="line"><span class="comment">// s1是基本类型，基本类型是没有方法的</span></span><br><span class="line"><span class="keyword">var</span> s1 = <span class="string">'zhangsan'</span>;</span><br><span class="line"><span class="keyword">var</span> s2 = s1.substring(<span class="number">5</span>);</span><br><span class="line"></span><br><span class="line"><span class="comment">// 当调用s1.substring(5)的时候，先把s1包装成String类型的临时对象，再调用substring方法，最后销毁临时对象, 相当于：</span></span><br><span class="line"><span class="keyword">var</span> s1 = <span class="keyword">new</span> <span class="built_in">String</span>(<span class="string">'zhangsan'</span>);</span><br><span class="line"><span class="keyword">var</span> s2 = s1.substring(<span class="number">5</span>);</span><br><span class="line">s1 = <span class="literal">null</span>;</span><br></pre></td></tr></table></figure><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">// 创建基本包装类型的对象</span></span><br><span class="line"><span class="keyword">var</span> num = <span class="number">18</span>;  <span class="comment">//数值，基本类型</span></span><br><span class="line"><span class="keyword">var</span> num = <span class="built_in">Number</span>(<span class="string">'18'</span>); <span class="comment">//类型转换</span></span><br><span class="line"><span class="keyword">var</span> num = <span class="keyword">new</span> <span class="built_in">Number</span>(<span class="number">18</span>); <span class="comment">//基本包装类型，对象</span></span><br><span class="line"><span class="comment">// Number和Boolean基本包装类型基本不用，使用的话可能会引起歧义。例如：</span></span><br><span class="line"><span class="keyword">var</span> b1 = <span class="keyword">new</span> <span class="built_in">Boolean</span>(<span class="literal">false</span>);</span><br><span class="line"><span class="keyword">var</span> b2 = b1 &amp;&amp; <span class="literal">true</span>;<span class="comment">// 结果是什么</span></span><br></pre></td></tr></table></figure><h3 id="String对象"><a href="#String对象" class="headerlink" title="String对象"></a>String对象</h3><ul><li>字符串的不可变</li></ul><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">var</span> str = <span class="string">'abc'</span>;</span><br><span class="line">str = <span class="string">'hello'</span>;</span><br><span class="line"><span class="comment">// 当重新给str赋值的时候，常量'abc'不会被修改，依然在内存中</span></span><br><span class="line"><span class="comment">// 重新给字符串赋值，会重新在内存中开辟空间，这个特点就是字符串的不可变</span></span><br><span class="line"><span class="comment">// 由于字符串的不可变，在大量拼接字符串的时候会有效率问题</span></span><br></pre></td></tr></table></figure><ul><li>创建字符串对象</li></ul><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">var</span> str = <span class="keyword">new</span> <span class="built_in">String</span>(<span class="string">'Hello World'</span>);</span><br><span class="line"></span><br><span class="line"><span class="comment">// 获取字符串中字符的个数</span></span><br><span class="line"><span class="built_in">console</span>.log(str.length);</span><br></pre></td></tr></table></figure><ul><li><p>字符串对象的常用方法</p><p>字符串所有的方法，都不会修改字符串本身(字符串是不可变的)，操作完成会返回一个新的字符串</p></li></ul><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">// 1 字符方法</span></span><br><span class="line">charAt()    <span class="comment">//获取指定位置处字符</span></span><br><span class="line">charCodeAt()  <span class="comment">//获取指定位置处字符的ASCII码</span></span><br><span class="line">str[<span class="number">0</span>]   <span class="comment">//HTML5，IE8+支持 和charAt()等效</span></span><br><span class="line"><span class="comment">// 2 字符串操作方法</span></span><br><span class="line">concat()   <span class="comment">//拼接字符串，等效于+，+更常用</span></span><br><span class="line">slice()    <span class="comment">//从start位置开始，截取到end位置，end取不到</span></span><br><span class="line">substring() <span class="comment">//从start位置开始，截取到end位置，end取不到</span></span><br><span class="line">substr()   <span class="comment">//从start位置开始，截取length个字符</span></span><br><span class="line"><span class="comment">// 3 位置方法</span></span><br><span class="line">indexOf()   <span class="comment">//返回指定内容在元字符串中的位置</span></span><br><span class="line">lastIndexOf() <span class="comment">//从后往前找，只找第一个匹配的</span></span><br><span class="line"><span class="comment">// 4 去除空白   </span></span><br><span class="line">trim()  <span class="comment">//只能去除字符串前后的空白</span></span><br><span class="line"><span class="comment">// 5 大小写转换方法</span></span><br><span class="line">to(Locale)UpperCase() <span class="comment">//转换大写</span></span><br><span class="line">to(Locale)LowerCase() <span class="comment">//转换小写</span></span><br><span class="line"><span class="comment">// 6 其它</span></span><br><span class="line">search()</span><br><span class="line">replace()</span><br><span class="line">split()</span><br><span class="line">fromCharCode()</span><br><span class="line"><span class="comment">// String.fromCharCode(101, 102, 103); //把ASCII码转换成字符串</span></span><br></pre></td></tr></table></figure><h4 id="案例-9"><a href="#案例-9" class="headerlink" title="案例"></a>案例</h4><ul><li>截取字符串”我爱中华人民共和国”，中的”中华”</li></ul><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">var</span> s = <span class="string">"我爱中华人民共和国"</span>;</span><br><span class="line">s = s.substr(<span class="number">2</span>,<span class="number">2</span>);</span><br><span class="line"><span class="built_in">console</span>.log(s);</span><br></pre></td></tr></table></figure><ul><li>“abcoefoxyozzopp”查找字符串中所有o出现的位置</li></ul><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">var</span> s = <span class="string">'abcoefoxyozzopp'</span>;</span><br><span class="line"><span class="keyword">var</span> array = [];</span><br><span class="line"><span class="keyword">do</span> &#123;</span><br><span class="line">  <span class="keyword">var</span> index = s.indexOf(<span class="string">'o'</span>, index + <span class="number">1</span>);</span><br><span class="line">  <span class="keyword">if</span> (index != <span class="number">-1</span>) &#123;</span><br><span class="line">    array.push(index);</span><br><span class="line">  &#125;</span><br><span class="line">&#125; <span class="keyword">while</span> (index &gt; <span class="number">-1</span>);</span><br><span class="line"><span class="built_in">console</span>.log(array);</span><br></pre></td></tr></table></figure><ul><li>把字符串中所有的o替换成!</li></ul><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">var</span> s = <span class="string">'abcoefoxyozzopp'</span>;</span><br><span class="line"><span class="keyword">do</span> &#123;</span><br><span class="line">  s = s.replace(<span class="string">'o'</span>, <span class="string">''</span>);</span><br><span class="line">&#125; <span class="keyword">while</span> (s.indexOf(<span class="string">'o'</span>) &gt; <span class="number">-1</span>);</span><br><span class="line"><span class="built_in">console</span>.log(s);</span><br><span class="line"></span><br><span class="line"><span class="built_in">console</span>.log(s.replace(<span class="regexp">/o/ig</span>, <span class="string">''</span>));</span><br></pre></td></tr></table></figure><ul><li>判断一个字符串中出现次数最多的字符，统计这个次数</li></ul><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">var</span> s = <span class="string">'abcoefoxyozzopp'</span>;</span><br><span class="line"><span class="keyword">var</span> o = &#123;&#125;;</span><br><span class="line"></span><br><span class="line"><span class="keyword">for</span> (<span class="keyword">var</span> i = <span class="number">0</span>; i &lt; s.length; i++) &#123;</span><br><span class="line">  <span class="keyword">var</span> item = s.charAt(i);</span><br><span class="line">  <span class="keyword">if</span> (o[item]) &#123;</span><br><span class="line">    o[item] ++;</span><br><span class="line">  &#125;<span class="keyword">else</span>&#123;</span><br><span class="line">    o[item] = <span class="number">1</span>;</span><br><span class="line">  &#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="keyword">var</span> max = <span class="number">0</span>;</span><br><span class="line"><span class="keyword">var</span> char ;</span><br><span class="line"><span class="keyword">for</span>(<span class="keyword">var</span> key <span class="keyword">in</span> o) &#123;</span><br><span class="line">  <span class="keyword">if</span> (max &lt; o[key]) &#123;</span><br><span class="line">    max = o[key];</span><br><span class="line">    char = key;</span><br><span class="line">  &#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="built_in">console</span>.log(max);</span><br><span class="line"><span class="built_in">console</span>.log(char);</span><br></pre></td></tr></table></figure><h4 id="作业"><a href="#作业" class="headerlink" title="作业"></a>作业</h4><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><span class="line">给定一个字符串如：“abaasdffggghhjjkkgfddsssss3444343”问题如下： </span><br><span class="line">1、 字符串的长度 </span><br><span class="line">2、 取出指定位置的字符，如：0,3,5,9等 </span><br><span class="line">3、 查找指定字符是否在以上字符串中存在，如：i，c ，b等 </span><br><span class="line">4、 替换指定的字符，如：g替换为22,ss替换为b等操作方法 </span><br><span class="line">5、 截取指定开始位置到结束位置的字符串，如：取得1-5的字符串</span><br><span class="line">6、 找出以上字符串中出现次数最多的字符和出现的次数 </span><br><span class="line">7、 遍历字符串，并将遍历出的字符两头添加符号“@”输出至当前的文档页面。</span><br></pre></td></tr></table></figure>]]></content>
      
      
      <categories>
          
          <category> JavaScript </category>
          
      </categories>
      
      
        <tags>
            
            <tag> js笔记 </tag>
            
        </tags>
      
    </entry>
    
    <entry>
      <title>js api</title>
      <link href="/2017/12/06/02-Web%20API/"/>
      <url>/2017/12/06/02-Web%20API/</url>
      
        <content type="html"><![CDATA[<link rel="stylesheet" class="aplayer-secondary-style-marker" href="/assets/css/APlayer.min.css"><script src="/assets/js/APlayer.min.js" class="aplayer-secondary-script-marker"></script><hr><p>学习目标:</p><ul><li>掌握API和Web API的概念</li><li>掌握常见的浏览器提供的API的调用方式</li><li>能通过API开发常见的页面交互功能</li><li>能够利用搜索引擎解决问题<br>typora-copy-images-to: media</li></ul><hr><h1 id="Web-API"><a href="#Web-API" class="headerlink" title="Web API"></a>Web API</h1><h2 id="Web-API介绍"><a href="#Web-API介绍" class="headerlink" title="Web API介绍"></a>Web API介绍</h2><h3 id="API的概念"><a href="#API的概念" class="headerlink" title="API的概念"></a>API的概念</h3><p>API（Application Programming Interface,应用程序编程接口）是一些预先定义的函数，目的是提供应用程序与开发人员基于某软件或硬件得以访问一组例程的能力，而又无需访问源码，或理解内部工作机制的细节。</p><ul><li>任何开发语言都有自己的API</li><li>API的特征输入和输出(I/O)</li><li>API的使用方法(console.log())</li></ul><h3 id="Web-API的概念"><a href="#Web-API的概念" class="headerlink" title="Web API的概念"></a>Web API的概念</h3><p>浏览器提供的一套操作浏览器功能和页面元素的API(BOM和DOM)</p><p>此处的Web API特指浏览器提供的API(一组方法)，Web API在后面的课程中有其它含义</p><h3 id="掌握常见的浏览器提供的API的调用方式"><a href="#掌握常见的浏览器提供的API的调用方式" class="headerlink" title="掌握常见的浏览器提供的API的调用方式"></a>掌握常见的浏览器提供的API的调用方式</h3><p><a href="https://developer.mozilla.org/zh-CN/docs/Web/API" target="_blank" rel="noopener">MDN-Web API</a></p><h3 id="JavaScript的组成"><a href="#JavaScript的组成" class="headerlink" title="JavaScript的组成"></a>JavaScript的组成</h3><p><img src="/media/1496912475691.png" alt="1496912475691"></p><h4 id="ECMAScript-JavaScript的核心"><a href="#ECMAScript-JavaScript的核心" class="headerlink" title="ECMAScript - JavaScript的核心"></a>ECMAScript - JavaScript的核心</h4><p>定义了javascript的语法规范</p><p>JavaScript的核心，描述了语言的基本语法和数据类型，ECMAScript是一套标准，定义了一种语言的标准与具体实现无关</p><h4 id="BOM-浏览器对象模型"><a href="#BOM-浏览器对象模型" class="headerlink" title="BOM - 浏览器对象模型"></a>BOM - 浏览器对象模型</h4><p>一套操作浏览器功能的API</p><p>通过BOM可以操作浏览器窗口，比如：弹出框、控制浏览器跳转、获取分辨率等</p><h4 id="DOM-文档对象模型"><a href="#DOM-文档对象模型" class="headerlink" title="DOM - 文档对象模型"></a>DOM - 文档对象模型</h4><p>一套操作页面元素的API</p><p>DOM可以把HTML看做是文档树，通过DOM提供的API可以对树上的节点进行操作</p><h2 id="BOM"><a href="#BOM" class="headerlink" title="BOM"></a>BOM</h2><h3 id="BOM的概念"><a href="#BOM的概念" class="headerlink" title="BOM的概念"></a>BOM的概念</h3><p>BOM(Browser Object Model) 是指浏览器对象模型，浏览器对象模型提供了独立于内容的、可以与浏览器窗口进行互动的对象结构。BOM由多个对象组成，其中代表浏览器窗口的Window对象是BOM的顶层对象，其他对象都是该对象的子对象。</p><p>我们在浏览器中的一些操作都可以使用BOM的方式进行编程处理，</p><p>比如：刷新浏览器、后退、前进、在浏览器中输入URL等</p><h3 id="BOM的顶级对象window"><a href="#BOM的顶级对象window" class="headerlink" title="BOM的顶级对象window"></a>BOM的顶级对象window</h3><p>window是浏览器的顶级对象，当调用window下的属性和方法时，可以省略window<br>注意：window下一个特殊的属性 window.name</p><h3 id="对话框"><a href="#对话框" class="headerlink" title="对话框"></a>对话框</h3><ul><li>alert()</li><li>prompt()</li><li>confirm()</li></ul><h3 id="页面加载事件"><a href="#页面加载事件" class="headerlink" title="页面加载事件"></a>页面加载事件</h3><ul><li>onload</li></ul><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line"><span class="built_in">window</span>.onload = <span class="function"><span class="keyword">function</span> (<span class="params"></span>) </span>&#123;</span><br><span class="line">  <span class="comment">// 当页面加载完成执行</span></span><br><span class="line">  <span class="comment">// 当页面完全加载所有内容（包括图像、脚本文件、CSS 文件等）执行</span></span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><ul><li>onunload</li></ul><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line"><span class="built_in">window</span>.onunload = <span class="function"><span class="keyword">function</span> (<span class="params"></span>) </span>&#123;</span><br><span class="line">  <span class="comment">// 当用户退出页面时执行</span></span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h3 id="定时器"><a href="#定时器" class="headerlink" title="定时器"></a>定时器</h3><h4 id="setTimeout-和clearTimeout"><a href="#setTimeout-和clearTimeout" class="headerlink" title="setTimeout()和clearTimeout()"></a>setTimeout()和clearTimeout()</h4><p>在指定的毫秒数到达之后执行指定的函数，只执行一次</p><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">// 创建一个定时器，1000毫秒后执行，返回定时器的标示</span></span><br><span class="line"><span class="keyword">var</span> timerId = setTimeout(<span class="function"><span class="keyword">function</span> (<span class="params"></span>) </span>&#123;</span><br><span class="line">  <span class="built_in">console</span>.log(<span class="string">'Hello World'</span>);</span><br><span class="line">&#125;, <span class="number">1000</span>);</span><br><span class="line"></span><br><span class="line"><span class="comment">// 取消定时器的执行</span></span><br><span class="line">clearTimeout(timerId);</span><br></pre></td></tr></table></figure><h4 id="setInterval-和clearInterval"><a href="#setInterval-和clearInterval" class="headerlink" title="setInterval()和clearInterval()"></a>setInterval()和clearInterval()</h4><p>定时调用的函数，可以按照给定的时间(单位毫秒)周期调用函数</p><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">// 创建一个定时器，每隔1秒调用一次</span></span><br><span class="line"><span class="keyword">var</span> timerId = setInterval(<span class="function"><span class="keyword">function</span> (<span class="params"></span>) </span>&#123;</span><br><span class="line">  <span class="keyword">var</span> date = <span class="keyword">new</span> <span class="built_in">Date</span>();</span><br><span class="line">  <span class="built_in">console</span>.log(date.toLocaleTimeString());</span><br><span class="line">&#125;, <span class="number">1000</span>);</span><br><span class="line"></span><br><span class="line"><span class="comment">// 取消定时器的执行</span></span><br><span class="line">clearInterval(timerId);</span><br></pre></td></tr></table></figure><h3 id="location对象"><a href="#location对象" class="headerlink" title="location对象"></a>location对象</h3><p>location对象是window对象下的一个属性，时候的时候可以省略window对象</p><p>location可以获取或者设置浏览器地址栏的URL</p><h4 id="URL"><a href="#URL" class="headerlink" title="URL"></a>URL</h4><p>统一资源定位符 (Uniform Resource Locator, URL)</p><ul><li>URL的组成</li></ul><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br></pre></td><td class="code"><pre><span class="line">scheme://host:port/path?query#fragment</span><br><span class="line">scheme:通信协议</span><br><span class="line">true常用的http,ftp,maito等</span><br><span class="line">host:主机</span><br><span class="line">true服务器(计算机)域名系统 (DNS) 主机名或 IP 地址。</span><br><span class="line">port:端口号</span><br><span class="line">true整数，可选，省略时使用方案的默认端口，如http的默认端口为80。</span><br><span class="line">path:路径</span><br><span class="line">true由零或多个&apos;/&apos;符号隔开的字符串，一般用来表示主机上的一个目录或文件地址。</span><br><span class="line">query:查询</span><br><span class="line">true可选，用于给动态网页传递参数，可有多个参数，用&apos;&amp;&apos;符号隔开，每个参数的名和值用&apos;=&apos;符号隔开。例如：name=zs</span><br><span class="line">fragment:信息片断</span><br><span class="line">true字符串，锚点.</span><br></pre></td></tr></table></figure><h4 id="location有哪些成员？"><a href="#location有哪些成员？" class="headerlink" title="location有哪些成员？"></a>location有哪些成员？</h4><ul><li><p>使用chrome的控制台查看</p></li><li><p>查MDN</p><p><a href="https://developer.mozilla.org/zh-CN/" target="_blank" rel="noopener">MDN</a></p></li><li><p>成员</p><ul><li>assign()/reload()/replace()</li><li>hash/host/hostname/search/href……</li></ul></li></ul><h4 id="案例"><a href="#案例" class="headerlink" title="案例"></a>案例</h4><p>解析URL中的query，并返回对象的形式</p><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br></pre></td><td class="code"><pre><span class="line"><span class="function"><span class="keyword">function</span> <span class="title">getQuery</span>(<span class="params">queryStr</span>) </span>&#123;</span><br><span class="line">  <span class="keyword">var</span> query = &#123;&#125;;</span><br><span class="line">  <span class="keyword">if</span> (queryStr.indexOf(<span class="string">'?'</span>) &gt; <span class="number">-1</span>) &#123;</span><br><span class="line">    <span class="keyword">var</span> index = queryStr.indexOf(<span class="string">'?'</span>);</span><br><span class="line">    queryStr = queryStr.substr(index + <span class="number">1</span>);</span><br><span class="line">    <span class="keyword">var</span> array = queryStr.split(<span class="string">'&amp;'</span>);</span><br><span class="line">    <span class="keyword">for</span> (<span class="keyword">var</span> i = <span class="number">0</span>; i &lt; array.length; i++) &#123;</span><br><span class="line">      <span class="keyword">var</span> tmpArr = array[i].split(<span class="string">'='</span>);</span><br><span class="line">      <span class="keyword">if</span> (tmpArr.length === <span class="number">2</span>) &#123;</span><br><span class="line">        query[tmpArr[<span class="number">0</span>]] = tmpArr[<span class="number">1</span>];</span><br><span class="line">      &#125;</span><br><span class="line">    &#125;</span><br><span class="line">  &#125;</span><br><span class="line">  <span class="keyword">return</span> query;</span><br><span class="line">&#125;</span><br><span class="line"><span class="built_in">console</span>.log(getQuery(location.search));</span><br><span class="line"><span class="built_in">console</span>.log(getQuery(location.href));</span><br></pre></td></tr></table></figure><h3 id="history对象"><a href="#history对象" class="headerlink" title="history对象"></a>history对象</h3><ul><li>back()</li><li>forward()</li><li>go()</li></ul><h3 id="navigator对象"><a href="#navigator对象" class="headerlink" title="navigator对象"></a>navigator对象</h3><ul><li>userAgent</li></ul><p>通过userAgent可以判断用户浏览器的类型</p><ul><li>platform</li></ul><p>通过platform可以判断浏览器所在的系统平台类型.</p><h2 id="DOM"><a href="#DOM" class="headerlink" title="DOM"></a>DOM</h2><h3 id="DOM的概念"><a href="#DOM的概念" class="headerlink" title="DOM的概念"></a>DOM的概念</h3><p>文档对象模型（Document Object Model，简称DOM），是<a href="http://baike.baidu.com/item/W3C" target="_blank" rel="noopener">W3C</a>组织推荐的处理可扩展标志语言的标准编程接口。在网页上，组织页面（或文档）的对象被组织在一个树形结构中，用来表示文档中对象的标准模型就称为DOM。Document Object Model的历史可以追溯至1990年代后期微软与<a href="http://baike.baidu.com/item/Netscape" target="_blank" rel="noopener">Netscape</a>的“浏览器大战”，双方为了在<a href="http://baike.baidu.com/item/JavaScript" target="_blank" rel="noopener">JavaScript</a>与<a href="http://baike.baidu.com/item/JScript" target="_blank" rel="noopener">JScript</a>一决生死，于是大规模的赋予浏览器强大的功能。微软在网页技术上加入了不少专属事物，既有<a href="http://baike.baidu.com/item/VBScript" target="_blank" rel="noopener">VBScript</a>、<a href="http://baike.baidu.com/item/ActiveX" target="_blank" rel="noopener">ActiveX</a>、以及微软自家的<a href="http://baike.baidu.com/item/DHTML" target="_blank" rel="noopener">DHTML</a>格式等，使不少网页使用非微软平台及浏览器无法正常显示。DOM即是当时蕴酿出来的杰作。</p><p>DOM又称为文档树模型</p><p><img src="/media/1497154623955.png" alt="1497154623955"></p><ul><li>文档：一个网页可以称为文档</li><li>节点：网页中的所有内容都是节点（标签、属性、文本、注释等）</li><li>元素：网页中的标签</li><li>属性：标签的属性</li></ul><h3 id="模拟文档树结构"><a href="#模拟文档树结构" class="headerlink" title="模拟文档树结构"></a>模拟文档树结构</h3><p><img src="/media/1497165666684.png" alt="1497165666684"></p><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br></pre></td><td class="code"><pre><span class="line"><span class="function"><span class="keyword">function</span> <span class="title">Element</span>(<span class="params">option</span>) </span>&#123;</span><br><span class="line">  <span class="keyword">this</span>.id = option.id || <span class="string">''</span>;</span><br><span class="line">  <span class="keyword">this</span>.nodeName = option.nodeName || <span class="string">''</span>;</span><br><span class="line">  <span class="keyword">this</span>.nodeValue = option.nodeValue || <span class="string">''</span>;</span><br><span class="line">  <span class="keyword">this</span>.nodeType = <span class="number">1</span>;</span><br><span class="line">  <span class="keyword">this</span>.children = option.children || [];</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="keyword">var</span> doc = <span class="keyword">new</span> Element(&#123;</span><br><span class="line">  nodeName: <span class="string">'html'</span></span><br><span class="line">&#125;);</span><br><span class="line"><span class="keyword">var</span> head = <span class="keyword">new</span> Element(&#123;</span><br><span class="line">  nodeName: <span class="string">'head'</span></span><br><span class="line">&#125;);</span><br><span class="line"><span class="keyword">var</span> body = <span class="keyword">new</span> Element(&#123;</span><br><span class="line">  nodeName: <span class="string">'body'</span></span><br><span class="line">&#125;)</span><br><span class="line">doc.children.push(head);</span><br><span class="line">doc.children.push(body);</span><br><span class="line"></span><br><span class="line"><span class="keyword">var</span> div = <span class="keyword">new</span> Element(&#123;</span><br><span class="line">  nodeName: <span class="string">'div'</span>,</span><br><span class="line">  nodeValue: <span class="string">'haha'</span>,</span><br><span class="line">&#125;);</span><br><span class="line"></span><br><span class="line"><span class="keyword">var</span> p = <span class="keyword">new</span> Element(&#123;</span><br><span class="line">  nodeName: <span class="string">'p'</span>,</span><br><span class="line">  nodeValue: <span class="string">'段落'</span></span><br><span class="line">&#125;)</span><br><span class="line">body.children.push(div);</span><br><span class="line">body.children.push(p);</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">function</span> <span class="title">getChildren</span>(<span class="params">ele</span>) </span>&#123;</span><br><span class="line">  <span class="keyword">for</span>(<span class="keyword">var</span> i = <span class="number">0</span>; i &lt; ele.children.length; i++) &#123;</span><br><span class="line">    <span class="keyword">var</span> child = ele.children[i];</span><br><span class="line">    <span class="built_in">console</span>.log(child.nodeName);</span><br><span class="line">    getChildren(child);</span><br><span class="line">  &#125;</span><br><span class="line">&#125;</span><br><span class="line">getChildren(doc);</span><br></pre></td></tr></table></figure><h3 id="DOM经常进行的操作"><a href="#DOM经常进行的操作" class="headerlink" title="DOM经常进行的操作"></a>DOM经常进行的操作</h3><ul><li>获取元素</li><li>动态创建元素</li><li>对元素进行操作(设置其属性或调用其方法)</li><li>事件(什么时机做相应的操作)</li></ul><h2 id="获取页面元素"><a href="#获取页面元素" class="headerlink" title="获取页面元素"></a>获取页面元素</h2><p>##案例<br>1.点击按钮弹出对话框<br>2.点击按钮修改超链接的地址和热点文字<br>3.点击(每个)图片弹出对话框<br>4.点击图片设置自身宽和高<br>5.点击按钮修改每个图片的title属性<br>6.点击按钮显示哈哈(排他功能)<br>7.点击按钮显示和隐藏div<br>8.显示和隐藏二维码<br>9.点击按钮修改所有p标签内容<br>10.点击按钮修改所有文本框内容<br>11.点击按钮切换图片<br>12.点击超链接停止跳转页面<br>13.点击小图显示大图<br>14.美女相册<br>15点击按钮选中性别和兴趣</p><h3 id="为什么要获取页面元素"><a href="#为什么要获取页面元素" class="headerlink" title="为什么要获取页面元素"></a>为什么要获取页面元素</h3><p>例如：我们想要操作页面上的某部分(显示/隐藏，动画)，需要先获取到该部分对应的元素，才进行后续操作</p><h3 id="根据id获取元素"><a href="#根据id获取元素" class="headerlink" title="根据id获取元素"></a>根据id获取元素</h3><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">var</span> div = <span class="built_in">document</span>.getElementById(<span class="string">'main'</span>);</span><br><span class="line"><span class="built_in">console</span>.log(div);</span><br><span class="line"></span><br><span class="line"><span class="comment">// 获取到的数据类型 HTMLDivElement，对象都是有类型的</span></span><br><span class="line"><span class="comment">// HTMLDivElement &lt;-- HTMLElement &lt;-- Element  &lt;-- Node  &lt;-- EventTarget</span></span><br></pre></td></tr></table></figure><p>注意：由于id名具有唯一性，部分浏览器支持直接使用id名访问元素，但不是标准方式，不推荐使用。</p><h3 id="根据标签名获取元素"><a href="#根据标签名获取元素" class="headerlink" title="根据标签名获取元素"></a>根据标签名获取元素</h3><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">var</span> divs = <span class="built_in">document</span>.getElementsByTagName(<span class="string">'div'</span>);</span><br><span class="line"><span class="keyword">for</span> (<span class="keyword">var</span> i = <span class="number">0</span>; i &lt; divs.length; i++) &#123;</span><br><span class="line">  <span class="keyword">var</span> div = divs[i];</span><br><span class="line">  <span class="built_in">console</span>.log(div);</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h3 id="根据name获取元素"><a href="#根据name获取元素" class="headerlink" title="根据name获取元素*"></a>根据name获取元素*</h3><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">var</span> inputs = <span class="built_in">document</span>.getElementsByName(<span class="string">'hobby'</span>);</span><br><span class="line"><span class="keyword">for</span> (<span class="keyword">var</span> i = <span class="number">0</span>; i &lt; inputs.length; i++) &#123;</span><br><span class="line">  <span class="keyword">var</span> input = inputs[i];</span><br><span class="line">  <span class="built_in">console</span>.log(input);</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h3 id="根据类名获取元素"><a href="#根据类名获取元素" class="headerlink" title="根据类名获取元素"></a>根据类名获取元素</h3><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">var</span> mains = <span class="built_in">document</span>.getElementsByClassName(<span class="string">'main'</span>);</span><br><span class="line"><span class="keyword">for</span> (<span class="keyword">var</span> i = <span class="number">0</span>; i &lt; mains.length; i++) &#123;</span><br><span class="line">  <span class="keyword">var</span> main = mains[i];</span><br><span class="line">  <span class="built_in">console</span>.log(main);</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h3 id="根据选择器获取元素"><a href="#根据选择器获取元素" class="headerlink" title="根据选择器获取元素"></a>根据选择器获取元素</h3><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">var</span> text = <span class="built_in">document</span>.querySelector(<span class="string">'#text'</span>);</span><br><span class="line"><span class="built_in">console</span>.log(text);</span><br><span class="line"></span><br><span class="line"><span class="keyword">var</span> boxes = <span class="built_in">document</span>.querySelectorAll(<span class="string">'.box'</span>);</span><br><span class="line"><span class="keyword">for</span> (<span class="keyword">var</span> i = <span class="number">0</span>; i &lt; boxes.length; i++) &#123;</span><br><span class="line">  <span class="keyword">var</span> box = boxes[i];</span><br><span class="line">  <span class="built_in">console</span>.log(box);</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><ul><li>总结</li></ul><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><span class="line">掌握</span><br><span class="line">truegetElementById()</span><br><span class="line">truegetElementsByTagName()</span><br><span class="line">了解</span><br><span class="line">truegetElementsByName()</span><br><span class="line">truegetElementsByClassName()</span><br><span class="line">truequerySelector()</span><br><span class="line">truequerySelectorAll()</span><br></pre></td></tr></table></figure><h2 id="事件"><a href="#事件" class="headerlink" title="事件"></a>事件</h2><p>事件：触发-响应机制</p><p>Event接口表示在DOM中发生的任何事件，一些是用户生成的（例如鼠标或键盘事件），而其他由API生成。</p><h3 id="事件三要素"><a href="#事件三要素" class="headerlink" title="事件三要素"></a>事件三要素</h3><ul><li>事件源:触发(被)事件的元素</li><li>事件类型:事件的触发方式(例如鼠标点击或键盘点击)</li><li>事件处理程序:事件触发后要执行的代码(函数形式)</li></ul><h3 id="事件的基本使用"><a href="#事件的基本使用" class="headerlink" title="事件的基本使用"></a>事件的基本使用</h3><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">var</span> box = <span class="built_in">document</span>.getElementById(<span class="string">'box'</span>);</span><br><span class="line">box.onclick = <span class="function"><span class="keyword">function</span>(<span class="params"></span>) </span>&#123;</span><br><span class="line">  <span class="built_in">console</span>.log(<span class="string">'代码会在box被点击后执行'</span>);  </span><br><span class="line">&#125;;</span><br></pre></td></tr></table></figure><h3 id="案例-1"><a href="#案例-1" class="headerlink" title="案例"></a>案例</h3><ul><li>点击按钮弹出提示框</li><li>点击按钮修改元素的样式</li></ul><h2 id="属性操作"><a href="#属性操作" class="headerlink" title="属性操作"></a>属性操作</h2><h3 id="非表单元素的属性"><a href="#非表单元素的属性" class="headerlink" title="非表单元素的属性"></a>非表单元素的属性</h3><p>href、title、id、src、className</p><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">var</span> link = <span class="built_in">document</span>.getElementById(<span class="string">'link'</span>);</span><br><span class="line"><span class="built_in">console</span>.log(link.href);</span><br><span class="line"><span class="built_in">console</span>.log(link.title);</span><br><span class="line"></span><br><span class="line"><span class="keyword">var</span> pic = <span class="built_in">document</span>.getElementById(<span class="string">'pic'</span>);</span><br><span class="line"><span class="built_in">console</span>.log(pic.src);</span><br></pre></td></tr></table></figure><p>案例：</p><p>​    点击按钮，切换img标签里的图片</p><p>​    点击按钮显示隐藏div</p><ul><li>innerHTML和innerText</li></ul><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">var</span> box = <span class="built_in">document</span>.getElementById(<span class="string">'box'</span>);</span><br><span class="line">box.innerHTML = <span class="string">'我是文本&lt;p&gt;我会生成为标签&lt;/p&gt;'</span>;</span><br><span class="line"><span class="built_in">console</span>.log(box.innerHTML);</span><br><span class="line">box.innerText = <span class="string">'我是文本&lt;p&gt;我不会生成为标签&lt;/p&gt;'</span>;</span><br><span class="line"><span class="built_in">console</span>.log(box.innerText);</span><br></pre></td></tr></table></figure><ul><li>HTML转义符</li></ul><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><span class="line">&quot;&amp;quot;</span><br><span class="line">‘&amp;apos;</span><br><span class="line">&amp;&amp;amp;</span><br><span class="line">&lt;&amp;lt;    //less than  小于</span><br><span class="line">&gt;&amp;gt;   // greater than  大于</span><br><span class="line">空格   &amp;nbsp;</span><br><span class="line">©&amp;copy;</span><br></pre></td></tr></table></figure><ul><li><p>innerHTML和innerText的区别</p></li><li><p>innerText的兼容性处理</p></li></ul><h3 id="表单元素属性"><a href="#表单元素属性" class="headerlink" title="表单元素属性"></a>表单元素属性</h3><ul><li>value 用于大部分表单元素的内容获取(option除外)</li><li>type 可以获取input标签的类型(输入框或复选框等)</li><li>disabled 禁用属性</li><li>checked 复选框选中属性</li><li>selected 下拉菜单选中属性</li></ul><h3 id="案例-2"><a href="#案例-2" class="headerlink" title="案例"></a>案例</h3><ul><li>给文本框赋值，获取文本框的值</li><li>点击按钮禁用文本框</li><li>搜索文本框</li><li>检测用户名是否是3-6位，密码是否是6-8位，如果不满足要求高亮显示文本框</li><li>设置下拉框中的选中项</li><li>全选反选</li></ul><h3 id="自定义属性操作"><a href="#自定义属性操作" class="headerlink" title="自定义属性操作"></a>自定义属性操作</h3><ul><li>getAttribute() 获取标签行内属性</li><li>setAttribute() 设置标签行内属性</li><li>removeAttribute() 移除标签行内属性</li><li>与element.属性的区别: 上述三个方法用于获取任意的行内属性。</li></ul><h3 id="样式操作"><a href="#样式操作" class="headerlink" title="样式操作"></a>样式操作</h3><ul><li><p>使用style方式设置的样式显示在标签行内</p><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">var</span> box = <span class="built_in">document</span>.getElementById(<span class="string">'box'</span>);</span><br><span class="line">box.style.width = <span class="string">'100px'</span>;</span><br><span class="line">box.style.height = <span class="string">'100px'</span>;</span><br><span class="line">box.style.backgroundColor = <span class="string">'red'</span>;</span><br></pre></td></tr></table></figure></li><li><p>注意</p><p>通过样式属性设置宽高、位置的属性类型是字符串，需要加上px</p></li></ul><h3 id="类名操作"><a href="#类名操作" class="headerlink" title="类名操作"></a>类名操作</h3><ul><li>修改标签的className属性相当于直接修改标签的类名<figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">var</span> box = <span class="built_in">document</span>.getElementById(<span class="string">'box'</span>);</span><br><span class="line">box.className = <span class="string">'clearfix'</span>;</span><br></pre></td></tr></table></figure></li></ul><h3 id="案例-3"><a href="#案例-3" class="headerlink" title="案例"></a>案例</h3><ul><li>开关灯</li><li>点击按钮变色</li><li>图片切换二维码案例</li><li>当前输入的文本框高亮显示</li><li>点击按钮改变div的大小和位置</li><li>列表隔行变色、高亮显示</li><li>京东商品展示</li><li>tab选项卡切换</li></ul><h2 id="创建元素的三种方式"><a href="#创建元素的三种方式" class="headerlink" title="创建元素的三种方式"></a>创建元素的三种方式</h2><h3 id="document-write"><a href="#document-write" class="headerlink" title="document.write()"></a>document.write()</h3><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line"><span class="built_in">document</span>.write(<span class="string">'新设置的内容&lt;p&gt;标签也可以生成&lt;/p&gt;'</span>);</span><br></pre></td></tr></table></figure><h3 id="innerHTML"><a href="#innerHTML" class="headerlink" title="innerHTML"></a>innerHTML</h3><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">var</span> box = <span class="built_in">document</span>.getElementById(<span class="string">'box'</span>);</span><br><span class="line">box.innerHTML = <span class="string">'新内容&lt;p&gt;新标签&lt;/p&gt;'</span>;</span><br></pre></td></tr></table></figure><h3 id="document-createElement"><a href="#document-createElement" class="headerlink" title="document.createElement()"></a>document.createElement()</h3><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">var</span> div = <span class="built_in">document</span>.createElement(<span class="string">'div'</span>);</span><br><span class="line"><span class="built_in">document</span>.body.appendChild(div);</span><br></pre></td></tr></table></figure><h3 id="性能问题"><a href="#性能问题" class="headerlink" title="性能问题"></a>性能问题</h3><ul><li>innerHTML方法由于会对字符串进行解析，需要避免在循环内多次使用。</li><li>可以借助字符串或数组的方式进行替换，再设置给innerHTML</li><li>优化后与document.createElement性能相近</li></ul><h3 id="案例-4"><a href="#案例-4" class="headerlink" title="案例"></a>案例</h3><ul><li>动态创建列表，高亮显示</li><li>根据数据动态创建表格</li><li>模拟百度搜索文本框</li></ul><h2 id="节点操作"><a href="#节点操作" class="headerlink" title="节点操作"></a>节点操作</h2><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">var</span> body = <span class="built_in">document</span>.body;</span><br><span class="line"><span class="keyword">var</span> div = <span class="built_in">document</span>.createElement(<span class="string">'div'</span>);</span><br><span class="line">body.appendChild(div);</span><br><span class="line"></span><br><span class="line"><span class="keyword">var</span> firstEle = body.children[<span class="number">0</span>];</span><br><span class="line">body.insertBefore(div,firstEle);</span><br><span class="line"></span><br><span class="line">body.removeChild(firstEle);</span><br><span class="line"></span><br><span class="line"><span class="keyword">var</span> text = <span class="built_in">document</span>.createElement(<span class="string">'p'</span>);</span><br><span class="line">body.replaceChild(text, div);</span><br></pre></td></tr></table></figure><p>案例：</p><p>​    权限选择</p><h3 id="节点层级"><a href="#节点层级" class="headerlink" title="节点层级"></a>节点层级</h3><p>重点讲父子属性，兄弟属性画图讲解</p><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">var</span> box = <span class="built_in">document</span>.getElementById(<span class="string">'box'</span>);</span><br><span class="line"><span class="built_in">console</span>.log(box.parentNode);</span><br><span class="line"><span class="built_in">console</span>.log(box.childNodes);</span><br><span class="line"><span class="built_in">console</span>.log(box.children);</span><br><span class="line"><span class="built_in">console</span>.log(box.nextSibling);</span><br><span class="line"><span class="built_in">console</span>.log(box.previousSibling);</span><br><span class="line"><span class="built_in">console</span>.log(box.firstChild);</span><br><span class="line"><span class="built_in">console</span>.log(box.lastChild);</span><br></pre></td></tr></table></figure><ul><li><p>注意</p><p>childNodes和children的区别，childNodes获取的是子节点，children获取的是子元素</p><p>nextSibling和previousSibling获取的是节点，获取元素对应的属性是nextElementSibling和previousElementSibling获取的是元素</p><p>​    nextElementSibling和previousElementSibling有兼容性问题，IE9以后才支持</p></li><li><p>总结</p></li></ul><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br></pre></td><td class="code"><pre><span class="line">节点操作，方法</span><br><span class="line">trueappendChild()</span><br><span class="line">trueinsertBefore()</span><br><span class="line">trueremoveChild()</span><br><span class="line">truereplaceChild()</span><br><span class="line">节点层次，属性</span><br><span class="line">trueparentNode</span><br><span class="line">truechildNodes</span><br><span class="line">truechildren</span><br><span class="line">truenextSibling/previousSibling</span><br><span class="line">truefirstChild/lastChild</span><br></pre></td></tr></table></figure><h2 id="事件详解"><a href="#事件详解" class="headerlink" title="事件详解"></a>事件详解</h2><h3 id="注册-移除事件的三种方式"><a href="#注册-移除事件的三种方式" class="headerlink" title="注册/移除事件的三种方式"></a>注册/移除事件的三种方式</h3><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">var</span> box = <span class="built_in">document</span>.getElementById(<span class="string">'box'</span>);</span><br><span class="line">box.onclick = <span class="function"><span class="keyword">function</span> (<span class="params"></span>) </span>&#123;</span><br><span class="line">  <span class="built_in">console</span>.log(<span class="string">'点击后执行'</span>);</span><br><span class="line">&#125;;</span><br><span class="line">box.onclick = <span class="literal">null</span>;</span><br><span class="line"></span><br><span class="line">box.addEventListener(<span class="string">'click'</span>, eventCode, <span class="literal">false</span>);</span><br><span class="line">box.removeEventListener(<span class="string">'click'</span>, eventCode, <span class="literal">false</span>);</span><br><span class="line"></span><br><span class="line">box.attachEvent(<span class="string">'onclick'</span>, eventCode);</span><br><span class="line">box.detachEvent(<span class="string">'onclick'</span>, eventCode);</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">function</span> <span class="title">eventCode</span>(<span class="params"></span>) </span>&#123;</span><br><span class="line">  <span class="built_in">console</span>.log(<span class="string">'点击后执行'</span>);</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h3 id="兼容代码"><a href="#兼容代码" class="headerlink" title="兼容代码"></a>兼容代码</h3><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br></pre></td><td class="code"><pre><span class="line"><span class="function"><span class="keyword">function</span> <span class="title">addEventListener</span>(<span class="params">element, type, fn</span>) </span>&#123;</span><br><span class="line">  <span class="keyword">if</span> (element.addEventListener) &#123;</span><br><span class="line">    element.addEventListener(type, fn, <span class="literal">false</span>);</span><br><span class="line">  &#125; <span class="keyword">else</span> <span class="keyword">if</span> (element.attachEvent)&#123;</span><br><span class="line">    element.attachEvent(<span class="string">'on'</span> + type,fn);</span><br><span class="line">  &#125; <span class="keyword">else</span> &#123;</span><br><span class="line">    element[<span class="string">'on'</span>+type] = fn;</span><br><span class="line">  &#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">function</span> <span class="title">removeEventListener</span>(<span class="params">element, type, fn</span>) </span>&#123;</span><br><span class="line">  <span class="keyword">if</span> (element.removeEventListener) &#123;</span><br><span class="line">    element.removeEventListener(type, fn, <span class="literal">false</span>);</span><br><span class="line">  &#125; <span class="keyword">else</span> <span class="keyword">if</span> (element.detachEvent) &#123;</span><br><span class="line">    element.detachEvent(<span class="string">'on'</span> + type, fn);</span><br><span class="line">  &#125; <span class="keyword">else</span> &#123;</span><br><span class="line">    element[<span class="string">'on'</span>+type] = <span class="literal">null</span>;</span><br><span class="line">  &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h3 id="事件的三个阶段"><a href="#事件的三个阶段" class="headerlink" title="事件的三个阶段"></a>事件的三个阶段</h3><ol><li><p>捕获阶段</p></li><li><p>当前目标阶段</p></li><li><p>冒泡阶段</p><p>事件对象.eventPhase属性可以查看事件触发时所处的阶段</p></li></ol><h3 id="事件对象的属性和方法"><a href="#事件对象的属性和方法" class="headerlink" title="事件对象的属性和方法"></a>事件对象的属性和方法</h3><ul><li>event.type 获取事件类型</li><li>clientX/clientY     所有浏览器都支持，窗口位置</li><li>pageX/pageY       IE8以前不支持，页面位置</li><li>event.target || event.srcElement 用于获取触发事件的元素</li><li>event.preventDefault() 取消默认行为</li></ul><h4 id="案例-5"><a href="#案例-5" class="headerlink" title="案例"></a>案例</h4><ul><li>跟着鼠标飞的天使</li><li>鼠标点哪图片飞到哪里</li><li>获取鼠标在div内的坐标</li></ul><h3 id="阻止事件传播的方式"><a href="#阻止事件传播的方式" class="headerlink" title="阻止事件传播的方式"></a>阻止事件传播的方式</h3><ul><li>标准方式 event.stopPropagation();</li><li>IE低版本 event.cancelBubble = true; 标准中已废弃</li></ul><h3 id="常用的鼠标和键盘事件"><a href="#常用的鼠标和键盘事件" class="headerlink" title="常用的鼠标和键盘事件"></a>常用的鼠标和键盘事件</h3><ul><li>onmouseup 鼠标按键放开时触发</li><li>onmousedown 鼠标按键按下触发</li><li>onmousemove 鼠标移动触发</li><li>onkeyup 键盘按键按下触发</li><li>onkeydown 键盘按键抬起触发</li></ul><h2 id="特效"><a href="#特效" class="headerlink" title="特效"></a>特效</h2><h3 id="偏移量"><a href="#偏移量" class="headerlink" title="偏移量"></a>偏移量</h3><ul><li>offsetParent用于获取定位的父级元素</li><li>offsetParent和parentNode的区别</li></ul><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">var</span> box = <span class="built_in">document</span>.getElementById(<span class="string">'box'</span>);</span><br><span class="line"><span class="built_in">console</span>.log(box.offsetParent);</span><br><span class="line"><span class="built_in">console</span>.log(box.offsetLeft);</span><br><span class="line"><span class="built_in">console</span>.log(box.offsetTop);</span><br><span class="line"><span class="built_in">console</span>.log(box.offsetWidth);</span><br><span class="line"><span class="built_in">console</span>.log(box.offsetHeight);</span><br></pre></td></tr></table></figure><p><img src="/media/1498743216279.png" alt="1498743216279"></p><h3 id="客户区大小"><a href="#客户区大小" class="headerlink" title="客户区大小"></a>客户区大小</h3><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">var</span> box = <span class="built_in">document</span>.getElementById(<span class="string">'box'</span>);</span><br><span class="line"><span class="built_in">console</span>.log(box.clientLeft);</span><br><span class="line"><span class="built_in">console</span>.log(box.clientTop);</span><br><span class="line"><span class="built_in">console</span>.log(box.clientWidth);</span><br><span class="line"><span class="built_in">console</span>.log(box.clientHeight);</span><br></pre></td></tr></table></figure><p><img src="/media/1498743269100.png" alt="1498743269100"></p><h3 id="滚动偏移"><a href="#滚动偏移" class="headerlink" title="滚动偏移"></a>滚动偏移</h3><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">var</span> box = <span class="built_in">document</span>.getElementById(<span class="string">'box'</span>);</span><br><span class="line"><span class="built_in">console</span>.log(box.scrollLeft)</span><br><span class="line"><span class="built_in">console</span>.log(box.scrollTop)</span><br><span class="line"><span class="built_in">console</span>.log(box.scrollWidth)</span><br><span class="line"><span class="built_in">console</span>.log(box.scrollHeight)</span><br></pre></td></tr></table></figure><p><img src="/media/1498743288621.png" alt="1498743288621"></p><h3 id="案例-6"><a href="#案例-6" class="headerlink" title="案例"></a>案例</h3><ul><li>匀速动画函数</li><li>变速动画函数</li><li>回到顶部</li><li>无缝轮播图</li><li>模拟滚动条</li><li>拖拽案例</li><li>放大镜案例</li></ul><h2 id="附录"><a href="#附录" class="headerlink" title="附录"></a>附录</h2><h3 id="元素的类型"><a href="#元素的类型" class="headerlink" title="元素的类型"></a>元素的类型</h3><p><img src="/media/1497169919418.png" alt="1497169919418"></p>]]></content>
      
      
      <categories>
          
          <category> JavaScript </category>
          
      </categories>
      
      
        <tags>
            
            <tag> js笔记 </tag>
            
        </tags>
      
    </entry>
    
    <entry>
      <title>js高级</title>
      <link href="/2017/12/06/03-JavaScript%E9%AB%98%E7%BA%A7/"/>
      <url>/2017/12/06/03-JavaScript%E9%AB%98%E7%BA%A7/</url>
      
        <content type="html"><![CDATA[<link rel="stylesheet" class="aplayer-secondary-style-marker" href="/assets/css/APlayer.min.css"><script src="/assets/js/APlayer.min.js" class="aplayer-secondary-script-marker"></script><hr><p>学习目标:</p><ul><li>理解面向对象开发思想</li><li>掌握 JavaScript 面向对象开发相关模式</li><li>掌握在 JavaScript 中使用正则表达式</li><li>typora-copy-images-to: media</li></ul><hr><h1 id="JavaScript-高级"><a href="#JavaScript-高级" class="headerlink" title="JavaScript 高级"></a>JavaScript 高级</h1><p><img src="/media/Unofficial_JavaScript_logo_2.svg.png" width="400" alt=""></p><h2 id="课程介绍"><a href="#课程介绍" class="headerlink" title="课程介绍"></a>课程介绍</h2><h3 id="课程大纲"><a href="#课程大纲" class="headerlink" title="课程大纲"></a>课程大纲</h3><p>在线地址：<a href="http://naotu.baidu.com/file/5bcd79bc4f1eaf83f96d1ad23baab345?token=d22135c63546f5ee" target="_blank" rel="noopener">JavaScript 高级</a></p><p><img src="/media/课程大纲.png" alt="课程大纲"></p><h3 id="目标"><a href="#目标" class="headerlink" title="目标"></a>目标</h3><ul><li>理解面向对象开发思想</li><li>掌握 JavaScript 面向对象开发相关模式</li><li>掌握在 JavaScript 中使用正则表达式</li></ul><h3 id="案例演示"><a href="#案例演示" class="headerlink" title="案例演示"></a>案例演示</h3><ul><li><a href="https://lipengzhou.github.io/new-snake/" target="_blank" rel="noopener">贪吃蛇</a></li></ul><hr><h2 id="基本概念复习"><a href="#基本概念复习" class="headerlink" title="基本概念复习"></a>基本概念复习</h2><blockquote><p>由于 JavaScript 高级还是针对 JavaScript 语言本身的一个进阶学习，所以在开始之前我们先对以前所学过的 JavaScript 相关知识点做一个快速复习总结。</p></blockquote><h3 id="重新介绍-JavaScript"><a href="#重新介绍-JavaScript" class="headerlink" title="重新介绍 JavaScript"></a>重新介绍 JavaScript</h3><h4 id="JavaScript-是什么"><a href="#JavaScript-是什么" class="headerlink" title="JavaScript 是什么"></a>JavaScript 是什么</h4><ul><li>解析执行：轻量级解释型的，或是 JIT 编译型的程序设计语言</li><li>语言特点：动态，头等函数 (First-class Function)<ul><li>又称函数是 JavaScript 中的一等公民</li></ul></li><li>执行环境：在宿主环境（host environment）下运行，浏览器是最常见的 JavaScript 宿主环境<ul><li>但是在很多非浏览器环境中也使用 JavaScript ，例如 node.js</li></ul></li><li>编程范式：基于原型、多范式的动态脚本语言，并且支持面向对象、命令式和声明式（如：函数式编程）编程风格</li></ul><h4 id="JavaScript-与浏览器的关系"><a href="#JavaScript-与浏览器的关系" class="headerlink" title="JavaScript 与浏览器的关系"></a>JavaScript 与浏览器的关系</h4><p><img src="/media/browser-js.png" alt=""></p><h4 id="JavaScript-的组成"><a href="#JavaScript-的组成" class="headerlink" title="JavaScript 的组成"></a>JavaScript 的组成</h4><table><thead><tr><th>组成部分</th><th>说明</th></tr></thead><tbody><tr><td>Ecmascript</td><td>描述了该语言的语法和基本对象</td></tr><tr><td>DOM</td><td>描述了处理网页内容的方法和接口</td></tr><tr><td>BOM</td><td>描述了与浏览器进行交互的方法和接口</td></tr></tbody></table><h4 id="JavaScript-可以做什么"><a href="#JavaScript-可以做什么" class="headerlink" title="JavaScript 可以做什么"></a>JavaScript 可以做什么</h4><blockquote><p>Any application that can be written in JavaScript, will eventually be written in JavaScript.<br>凡是能用 JavaScript 写出来的，最终都会用 JavaScript 写出来</p></blockquote><ul><li><a href="https://www.zhihu.com/question/20796866" target="_blank" rel="noopener">知乎 - JavaScript 能做什么，该做什么？</a></li><li><a href="https://github.com/phodal/articles/issues/1" target="_blank" rel="noopener">最流行的编程语言 JavaScript 能做什么？</a></li></ul><h4 id="JavaScript-发展历史"><a href="#JavaScript-发展历史" class="headerlink" title="JavaScript 发展历史"></a>JavaScript 发展历史</h4><blockquote><p><a href="http://javascript.ruanyifeng.com/introduction/history.html" target="_blank" rel="noopener">JavaScript 标准参考教程 - JavaScript 语言的历史</a></p></blockquote><ul><li>JavaScript 的诞生</li><li>JavaScript 与 Ecmascript 的关系</li><li>JavaScript 与 Java 的关系</li><li>JavaScript 的版本</li><li>JavaScript 周边大事记</li></ul><h4 id="小结"><a href="#小结" class="headerlink" title="小结"></a>小结</h4><h3 id="基本概念"><a href="#基本概念" class="headerlink" title="基本概念"></a>基本概念</h3><blockquote><p>本小节快速过即可，主要是对学过的内容做知识点梳理。</p></blockquote><ul><li>语法<ul><li>区分大小写</li><li>标识符</li><li>注释</li><li>严格模式</li><li>语句</li></ul></li><li>关键字和保留字</li><li>变量</li><li>数据类型<ul><li>typeof 操作符</li><li>Undefined</li><li>Null</li><li>Boolean</li><li>Number</li><li>String</li><li>Object</li></ul></li><li>操作符</li><li>流程控制语句</li><li>函数</li></ul><h3 id="JavaScript-中的数据类型"><a href="#JavaScript-中的数据类型" class="headerlink" title="JavaScript 中的数据类型"></a>JavaScript 中的数据类型</h3><p>JavaScript 有 5 种简单数据类型：<code>Undefined、Null、Boolean、Number、String</code> 和 1 种复杂数据类型 <code>Object</code> 。</p><h4 id="基本类型（值类型）"><a href="#基本类型（值类型）" class="headerlink" title="基本类型（值类型）"></a>基本类型（值类型）</h4><ul><li>Undefined</li><li>Null</li><li>Boolean</li><li>Number</li><li>String</li></ul><h4 id="复杂类型（引用类型）"><a href="#复杂类型（引用类型）" class="headerlink" title="复杂类型（引用类型）"></a>复杂类型（引用类型）</h4><ul><li>Object</li><li>Array</li><li>Date</li><li>RegExp</li><li>Function</li><li>基本包装类型<ul><li>Boolean</li><li>Number</li><li>String</li></ul></li><li>单体内置对象<ul><li>Global</li><li>Math</li></ul></li></ul><h4 id="类型检测"><a href="#类型检测" class="headerlink" title="类型检测"></a>类型检测</h4><ul><li><code>typeof</code></li><li><code>instanceof</code></li><li><code>Object.prototype.toString.call()</code></li></ul><h4 id="值类型和引用类型在内存中的存储方式（画图说明）"><a href="#值类型和引用类型在内存中的存储方式（画图说明）" class="headerlink" title="值类型和引用类型在内存中的存储方式（画图说明）"></a>值类型和引用类型在内存中的存储方式（画图说明）</h4><ul><li>值类型按值存储</li><li>引用类型按引用存储</li></ul><h4 id="值类型复制和引用类型复制（画图说明）"><a href="#值类型复制和引用类型复制（画图说明）" class="headerlink" title="值类型复制和引用类型复制（画图说明）"></a>值类型复制和引用类型复制（画图说明）</h4><ul><li>值类型按值复制</li><li>引用类型按引用复制</li></ul><h4 id="值类型和引用类型参数传递（画图说明）"><a href="#值类型和引用类型参数传递（画图说明）" class="headerlink" title="值类型和引用类型参数传递（画图说明）"></a>值类型和引用类型参数传递（画图说明）</h4><ul><li>值类型按值传递</li><li>引用类型按引用传递</li></ul><h4 id="值类型与引用类型的差别"><a href="#值类型与引用类型的差别" class="headerlink" title="值类型与引用类型的差别"></a>值类型与引用类型的差别</h4><ul><li>基本类型在内存中占据固定大小的空间，因此被保存在栈内存中</li><li>从一个变量向另一个变量复制基本类型的值，复制的是值的副本</li><li>引用类型的值是对象，保存在堆内存</li><li>包含引用类型值的变量实际上包含的并不是对象本身，而是一个指向该对象的指针</li><li>从一个变量向另一个变量复制引用类型的值的时候，复制是引用指针，因此两个变量最终都指向同一个对象</li></ul><h4 id="小结-1"><a href="#小结-1" class="headerlink" title="小结"></a>小结</h4><ul><li>类型检测方式</li><li>值类型和引用类型的存储方式</li><li>值类型复制和引用类型复制</li><li>方法参数中 值类型数据传递 和 引用类型数据传递</li></ul><h3 id="JavaScript-执行过程"><a href="#JavaScript-执行过程" class="headerlink" title="JavaScript 执行过程"></a>JavaScript 执行过程</h3><p>JavaScript 运行分为两个阶段：</p><ul><li>预解析<ul><li>全局预解析（所有变量和函数声明都会提前；同名的函数和变量函数的优先级高）</li><li>函数内部预解析（所有的变量、函数和形参都会参与预解析）<ul><li>函数</li><li>形参</li><li>普通变量</li></ul></li></ul></li><li>执行</li></ul><p>先预解析全局作用域，然后执行全局作用域中的代码，<br>在执行全局代码的过程中遇到函数调用就会先进行函数预解析，然后再执行函数内代码。</p><hr><h2 id="JavaScript-面向对象编程"><a href="#JavaScript-面向对象编程" class="headerlink" title="JavaScript 面向对象编程"></a>JavaScript 面向对象编程</h2><p><img src="/media/mxdxkf.png" width="400" alt=""></p><h3 id="面向对象介绍"><a href="#面向对象介绍" class="headerlink" title="面向对象介绍"></a>面向对象介绍</h3><h4 id="什么是对象"><a href="#什么是对象" class="headerlink" title="什么是对象"></a>什么是对象</h4><blockquote><p>Everything is object （万物皆对象）</p></blockquote><p><img src="/media/20160823024542444.jpg" alt=""></p><p>对象到底是什么，我们可以从两次层次来理解。</p><p><strong>(1) 对象是单个事物的抽象。</strong></p><p>一本书、一辆汽车、一个人都可以是对象，一个数据库、一张网页、一个与远程服务器的连接也可以是对象。当实物被抽象成对象，实物之间的关系就变成了对象之间的关系，从而就可以模拟现实情况，针对对象进行编程。</p><p><strong>(2) 对象是一个容器，封装了属性（property）和方法（method）。</strong></p><p>属性是对象的状态，方法是对象的行为（完成某种任务）。比如，我们可以把动物抽象为animal对象，使用“属性”记录具体是那一种动物，使用“方法”表示动物的某种行为（奔跑、捕猎、休息等等）。</p><p>在实际开发中，对象是一个抽象的概念，可以将其简单理解为：<strong>数据集或功能集</strong>。</p><p>ECMAScript-262 把对象定义为：<strong>无序属性的集合，其属性可以包含基本值、对象或者函数</strong>。<br>严格来讲，这就相当于说对象是一组没有特定顺序的值。对象的每个属性或方法都有一个名字，而每个名字都<br>映射到一个值。</p><p class="tip"><br>  提示：每个对象都是基于一个引用类型创建的，这些类型可以是系统内置的原生类型，也可以是开发人员自定义的类型。<br></p><h4 id="什么是面向对象"><a href="#什么是面向对象" class="headerlink" title="什么是面向对象"></a>什么是面向对象</h4><blockquote><p>面向对象不是新的东西，它只是过程式代码的一种高度封装，目的在于提高代码的开发效率和可维护性。</p></blockquote><p><img src="/media/664ba37eeee9f4623c06c066867f1d38_r.jpg" width="400" alt=""></p><p>面向对象编程 —— Object Oriented Programming，简称 OOP ，是一种编程开发思想。<br>它将真实世界各种复杂的关系，抽象为一个个对象，然后由对象之间的分工与合作，完成对真实世界的模拟。</p><p>在面向对象程序开发思想中，每一个对象都是功能中心，具有明确分工，可以完成接受信息、处理数据、发出信息等任务。<br>因此，面向对象编程具有灵活、代码可复用、高度模块化等特点，容易维护和开发，比起由一系列函数或指令组成的传统的过程式编程（procedural programming），更适合多人合作的大型软件项目。</p><p>面向对象与面向过程：</p><ul><li>面向过程就是亲力亲为，事无巨细，面面俱到，步步紧跟，有条不紊</li><li>面向对象就是找一个对象，指挥得结果</li><li>面向对象将执行者转变成指挥者</li><li>面向对象不是面向过程的替代，而是面向过程的封装</li></ul><p>面向对象的特性：</p><ul><li>封装性</li><li>继承性</li><li>[多态性]</li></ul><p>扩展阅读：</p><ul><li><a href="https://zh.wikipedia.org/wiki/%E9%9D%A2%E5%90%91%E5%AF%B9%E8%B1%A1%E7%A8%8B%E5%BA%8F%E8%AE%BE%E8%AE%A1" target="_blank" rel="noopener">维基百科 - 面向对象程序设计</a></li><li><a href="https://www.zhihu.com/question/19854505" target="_blank" rel="noopener">知乎：如何用一句话说明什么是面向对象思想？</a></li><li><a href="https://www.zhihu.com/question/31021366" target="_blank" rel="noopener">知乎：什么是面向对象编程思想？</a></li></ul><h4 id="程序中面向对象的基本体现"><a href="#程序中面向对象的基本体现" class="headerlink" title="程序中面向对象的基本体现"></a>程序中面向对象的基本体现</h4><p>在 JavaScript 中，所有数据类型都可以视为对象，当然也可以自定义对象。<br>自定义的对象数据类型就是面向对象中的类（ Class ）的概念。</p><p>我们以一个例子来说明面向过程和面向对象在程序流程上的不同之处。</p><p>假设我们要处理学生的成绩表，为了表示一个学生的成绩，面向过程的程序可以用一个对象表示：</p><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">var</span> std1 = &#123; <span class="attr">name</span>: <span class="string">'Michael'</span>, <span class="attr">score</span>: <span class="number">98</span> &#125;</span><br><span class="line"><span class="keyword">var</span> std2 = &#123; <span class="attr">name</span>: <span class="string">'Bob'</span>, <span class="attr">score</span>: <span class="number">81</span> &#125;</span><br></pre></td></tr></table></figure><p>而处理学生成绩可以通过函数实现，比如打印学生的成绩：</p><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line"><span class="function"><span class="keyword">function</span> <span class="title">printScore</span> (<span class="params">student</span>) </span>&#123;</span><br><span class="line">  <span class="built_in">console</span>.log(<span class="string">'姓名：'</span> + student.name + <span class="string">'  '</span> + <span class="string">'成绩：'</span> + student.score)</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>如果采用面向对象的程序设计思想，我们首选思考的不是程序的执行流程，<br>而是 <code>Student</code> 这种数据类型应该被视为一个对象，这个对象拥有 <code>name</code> 和 <code>score</code> 这两个属性（Property）。<br>如果要打印一个学生的成绩，首先必须创建出这个学生对应的对象，然后，给对象发一个 <code>printScore</code> 消息，让对象自己把自己的数据打印出来。</p><p>抽象数据行为模板（Class）：</p><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><span class="line"><span class="function"><span class="keyword">function</span> <span class="title">Student</span> (<span class="params">name, score</span>) </span>&#123;</span><br><span class="line">  <span class="keyword">this</span>.name = name</span><br><span class="line">  <span class="keyword">this</span>.score = score</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line">Student.prototype.printScore = <span class="function"><span class="keyword">function</span> (<span class="params"></span>) </span>&#123;</span><br><span class="line">  <span class="built_in">console</span>.log(<span class="string">'姓名：'</span> + <span class="keyword">this</span>.name + <span class="string">'  '</span> + <span class="string">'成绩：'</span> + <span class="keyword">this</span>.score)</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>根据模板创建具体实例对象（Instance）：</p><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">var</span> std1 = <span class="keyword">new</span> Student(<span class="string">'Michael'</span>, <span class="number">98</span>)</span><br><span class="line"><span class="keyword">var</span> std2 = <span class="keyword">new</span> Student(<span class="string">'Bob'</span>, <span class="number">81</span>)</span><br></pre></td></tr></table></figure><p>实例对象具有自己的具体行为（给对象发消息）：</p><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">std1.printScore() <span class="comment">// =&gt; 姓名：Michael  成绩：98</span></span><br><span class="line">std2.printScore() <span class="comment">// =&gt; 姓名：Bob  成绩 81</span></span><br></pre></td></tr></table></figure><p>面向对象的设计思想是从自然界中来的，因为在自然界中，类（Class）和实例（Instance）的概念是很自然的。<br>Class 是一种抽象概念，比如我们定义的 Class——Student ，是指学生这个概念，<br>而实例（Instance）则是一个个具体的 Student ，比如， Michael 和 Bob 是两个具体的 Student 。</p><p>所以，面向对象的设计思想是：</p><ul><li>抽象出 Class</li><li>根据 Class 创建 Instance</li><li>指挥 Instance 得结果</li></ul><p>面向对象的抽象程度又比函数要高，因为一个 Class 既包含数据，又包含操作数据的方法。</p><h3 id="创建对象"><a href="#创建对象" class="headerlink" title="创建对象"></a>创建对象</h3><h4 id="简单方式"><a href="#简单方式" class="headerlink" title="简单方式"></a>简单方式</h4><p>我们可以直接通过 <code>new Object()</code> 创建：</p><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">var</span> person = <span class="keyword">new</span> <span class="built_in">Object</span>()</span><br><span class="line">person.name = <span class="string">'Jack'</span></span><br><span class="line">person.age = <span class="number">18</span></span><br><span class="line"></span><br><span class="line">person.sayName = <span class="function"><span class="keyword">function</span> (<span class="params"></span>) </span>&#123;</span><br><span class="line">  <span class="built_in">console</span>.log(<span class="keyword">this</span>.name)</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>每次创建通过 <code>new Object()</code> 比较麻烦，所以可以通过它的简写形式对象字面量来创建：</p><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">var</span> person = &#123;</span><br><span class="line">  name: <span class="string">'Jack'</span>,</span><br><span class="line">  age: <span class="number">18</span>,</span><br><span class="line">  sayName: <span class="function"><span class="keyword">function</span> (<span class="params"></span>) </span>&#123;</span><br><span class="line">    <span class="built_in">console</span>.log(<span class="keyword">this</span>.name)</span><br><span class="line">  &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>对于上面的写法固然没有问题，但是假如我们要生成两个 <code>person</code> 实例对象呢？</p><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">var</span> person1 = &#123;</span><br><span class="line">  name: <span class="string">'Jack'</span>,</span><br><span class="line">  age: <span class="number">18</span>,</span><br><span class="line">  sayName: <span class="function"><span class="keyword">function</span> (<span class="params"></span>) </span>&#123;</span><br><span class="line">    <span class="built_in">console</span>.log(<span class="keyword">this</span>.name)</span><br><span class="line">  &#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="keyword">var</span> person2 = &#123;</span><br><span class="line">  name: <span class="string">'Mike'</span>,</span><br><span class="line">  age: <span class="number">16</span>,</span><br><span class="line">  sayName: <span class="function"><span class="keyword">function</span> (<span class="params"></span>) </span>&#123;</span><br><span class="line">    <span class="built_in">console</span>.log(<span class="keyword">this</span>.name)</span><br><span class="line">  &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>通过上面的代码我们不难看出，这样写的代码太过冗余，重复性太高。</p><h4 id="简单方式的改进：工厂函数"><a href="#简单方式的改进：工厂函数" class="headerlink" title="简单方式的改进：工厂函数"></a>简单方式的改进：工厂函数</h4><p>我们可以写一个函数，解决代码重复问题：</p><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br></pre></td><td class="code"><pre><span class="line"><span class="function"><span class="keyword">function</span> <span class="title">createPerson</span> (<span class="params">name, age</span>) </span>&#123;</span><br><span class="line">  <span class="keyword">return</span> &#123;</span><br><span class="line">    name: name,</span><br><span class="line">    age: age,</span><br><span class="line">    sayName: <span class="function"><span class="keyword">function</span> (<span class="params"></span>) </span>&#123;</span><br><span class="line">      <span class="built_in">console</span>.log(<span class="keyword">this</span>.name)</span><br><span class="line">    &#125;</span><br><span class="line">  &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>然后生成实例对象：</p><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">var</span> p1 = createPerson(<span class="string">'Jack'</span>, <span class="number">18</span>)</span><br><span class="line"><span class="keyword">var</span> p2 = createPerson(<span class="string">'Mike'</span>, <span class="number">18</span>)</span><br></pre></td></tr></table></figure><p>这样封装确实爽多了，通过工厂模式我们解决了创建多个相似对象代码冗余的问题，<br>但却没有解决对象识别的问题（即怎样知道一个对象的类型）。</p><h3 id="构造函数"><a href="#构造函数" class="headerlink" title="构造函数"></a>构造函数</h3><p>内容引导：</p><ul><li>构造函数语法</li><li>分析构造函数</li><li>构造函数和实例对象的关系<ul><li>实例的 constructor 属性</li><li>instanceof 操作符</li></ul></li><li>普通函数调用和构造函数调用的区别</li><li>构造函数的返回值</li><li>构造函数的静态成员和实例成员<ul><li>函数也是对象</li><li>实例成员</li><li>静态成员</li></ul></li><li>构造函数的问题</li></ul><h4 id="更优雅的工厂函数：构造函数"><a href="#更优雅的工厂函数：构造函数" class="headerlink" title="更优雅的工厂函数：构造函数"></a>更优雅的工厂函数：构造函数</h4><p>一种更优雅的工厂函数就是下面这样，构造函数：</p><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br></pre></td><td class="code"><pre><span class="line"><span class="function"><span class="keyword">function</span> <span class="title">Person</span> (<span class="params">name, age</span>) </span>&#123;</span><br><span class="line">  <span class="keyword">this</span>.name = name</span><br><span class="line">  <span class="keyword">this</span>.age = age</span><br><span class="line">  <span class="keyword">this</span>.sayName = <span class="function"><span class="keyword">function</span> (<span class="params"></span>) </span>&#123;</span><br><span class="line">    <span class="built_in">console</span>.log(<span class="keyword">this</span>.name)</span><br><span class="line">  &#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="keyword">var</span> p1 = <span class="keyword">new</span> Person(<span class="string">'Jack'</span>, <span class="number">18</span>)</span><br><span class="line">p1.sayName() <span class="comment">// =&gt; Jack</span></span><br><span class="line"></span><br><span class="line"><span class="keyword">var</span> p2 = <span class="keyword">new</span> Person(<span class="string">'Mike'</span>, <span class="number">23</span>)</span><br><span class="line">p2.sayName() <span class="comment">// =&gt; Mike</span></span><br></pre></td></tr></table></figure><h4 id="解析构造函数代码的执行"><a href="#解析构造函数代码的执行" class="headerlink" title="解析构造函数代码的执行"></a>解析构造函数代码的执行</h4><p>在上面的示例中，<code>Person()</code> 函数取代了 <code>createPerson()</code> 函数，但是实现效果是一样的。<br>这是为什么呢？</p><p>我们注意到，<code>Person()</code> 中的代码与 <code>createPerson()</code> 有以下几点不同之处：</p><ul><li>没有显示的创建对象</li><li>直接将属性和方法赋给了 <code>this</code> 对象</li><li>没有 <code>return</code> 语句</li><li>函数名使用的是大写的 <code>Person</code></li></ul><p>而要创建 <code>Person</code> 实例，则必须使用 <code>new</code> 操作符。<br>以这种方式调用构造函数会经历以下 4 个步骤：</p><ol><li>创建一个新对象</li><li>将构造函数的作用域赋给新对象（因此 this 就指向了这个新对象）</li><li>执行构造函数中的代码</li><li>返回新对象</li></ol><p>下面是具体的伪代码：</p><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br></pre></td><td class="code"><pre><span class="line"><span class="function"><span class="keyword">function</span> <span class="title">Person</span> (<span class="params">name, age</span>) </span>&#123;</span><br><span class="line">  <span class="comment">// 当使用 new 操作符调用 Person() 的时候，实际上这里会先创建一个对象</span></span><br><span class="line">  <span class="comment">// var instance = &#123;&#125;</span></span><br><span class="line">  <span class="comment">// 然后让内部的 this 指向 instance 对象</span></span><br><span class="line">  <span class="comment">// this = instance</span></span><br><span class="line">  <span class="comment">// 接下来所有针对 this 的操作实际上操作的就是 instance</span></span><br><span class="line"></span><br><span class="line">  <span class="keyword">this</span>.name = name</span><br><span class="line">  <span class="keyword">this</span>.age = age</span><br><span class="line">  <span class="keyword">this</span>.sayName = <span class="function"><span class="keyword">function</span> (<span class="params"></span>) </span>&#123;</span><br><span class="line">    <span class="built_in">console</span>.log(<span class="keyword">this</span>.name)</span><br><span class="line">  &#125;</span><br><span class="line"></span><br><span class="line">  <span class="comment">// 在函数的结尾处会将 this 返回，也就是 instance</span></span><br><span class="line">  <span class="comment">// return this</span></span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h4 id="构造函数和实例对象的关系"><a href="#构造函数和实例对象的关系" class="headerlink" title="构造函数和实例对象的关系"></a>构造函数和实例对象的关系</h4><p>使用构造函数的好处不仅仅在于代码的简洁性，更重要的是我们可以识别对象的具体类型了。<br>在每一个实例对象中的__proto__中同时有一个 <code>constructor</code> 属性，该属性指向创建该实例的构造函数：</p><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line"><span class="built_in">console</span>.log(p1.constructor === Person) <span class="comment">// =&gt; true</span></span><br><span class="line"><span class="built_in">console</span>.log(p2.constructor === Person) <span class="comment">// =&gt; true</span></span><br><span class="line"><span class="built_in">console</span>.log(p1.constructor === p2.constructor) <span class="comment">// =&gt; true</span></span><br></pre></td></tr></table></figure><p>对象的 <code>constructor</code> 属性最初是用来标识对象类型的，<br>但是，如果要检测对象的类型，还是使用 <code>instanceof</code> 操作符更可靠一些：</p><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line"><span class="built_in">console</span>.log(p1 <span class="keyword">instanceof</span> Person) <span class="comment">// =&gt; true</span></span><br><span class="line"><span class="built_in">console</span>.log(p2 <span class="keyword">instanceof</span> Person) <span class="comment">// =&gt; true</span></span><br></pre></td></tr></table></figure><p>总结：</p><ul><li>构造函数是根据具体的事物抽象出来的抽象模板</li><li>实例对象是根据抽象的构造函数模板得到的具体实例对象</li><li>每一个实例对象都具有一个 <code>constructor</code> 属性，指向创建该实例的构造函数<ul><li>注意： <code>constructor</code> 是实例的属性的说法不严谨，具体后面的原型会讲到</li></ul></li><li>可以通过实例的 <code>constructor</code> 属性判断实例和构造函数之间的关系<ul><li>注意：这种方式不严谨，推荐使用 <code>instanceof</code> 操作符，后面学原型会解释为什么</li></ul></li></ul><h4 id="构造函数的问题"><a href="#构造函数的问题" class="headerlink" title="构造函数的问题"></a>构造函数的问题</h4><p>使用构造函数带来的最大的好处就是创建对象更方便了，但是其本身也存在一个浪费内存的问题：</p><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br></pre></td><td class="code"><pre><span class="line"><span class="function"><span class="keyword">function</span> <span class="title">Person</span> (<span class="params">name, age</span>) </span>&#123;</span><br><span class="line">  <span class="keyword">this</span>.name = name</span><br><span class="line">  <span class="keyword">this</span>.age = age</span><br><span class="line">  <span class="keyword">this</span>.type = <span class="string">'human'</span></span><br><span class="line">  <span class="keyword">this</span>.sayHello = <span class="function"><span class="keyword">function</span> (<span class="params"></span>) </span>&#123;</span><br><span class="line">    <span class="built_in">console</span>.log(<span class="string">'hello '</span> + <span class="keyword">this</span>.name)</span><br><span class="line">  &#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="keyword">var</span> p1 = <span class="keyword">new</span> Person(<span class="string">'lpz'</span>, <span class="number">18</span>)</span><br><span class="line"><span class="keyword">var</span> p2 = <span class="keyword">new</span> Person(<span class="string">'Jack'</span>, <span class="number">16</span>)</span><br></pre></td></tr></table></figure><p>在该示例中，从表面上好像没什么问题，但是实际上这样做，有一个很大的弊端。<br>那就是对于每一个实例对象，<code>type</code> 和 <code>sayHello</code> 都是一模一样的内容，<br>每一次生成一个实例，都必须为重复的内容，多占用一些内存，如果实例对象很多，会造成极大的内存浪费。</p><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line"><span class="built_in">console</span>.log(p1.sayHello === p2.sayHello) <span class="comment">// =&gt; false</span></span><br></pre></td></tr></table></figure><p>对于这种问题我们可以把需要共享的函数定义到构造函数外部：</p><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br></pre></td><td class="code"><pre><span class="line"><span class="function"><span class="keyword">function</span> <span class="title">sayHello</span> = <span class="title">function</span> (<span class="params"></span>) </span>&#123;</span><br><span class="line">  <span class="built_in">console</span>.log(<span class="string">'hello '</span> + <span class="keyword">this</span>.name)</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">function</span> <span class="title">Person</span> (<span class="params">name, age</span>) </span>&#123;</span><br><span class="line">  <span class="keyword">this</span>.name = name</span><br><span class="line">  <span class="keyword">this</span>.age = age</span><br><span class="line">  <span class="keyword">this</span>.type = <span class="string">'human'</span></span><br><span class="line">  <span class="keyword">this</span>.sayHello = sayHello</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="keyword">var</span> p1 = <span class="keyword">new</span> Person(<span class="string">'lpz'</span>, <span class="number">18</span>)</span><br><span class="line"><span class="keyword">var</span> p2 = <span class="keyword">new</span> Person(<span class="string">'Jack'</span>, <span class="number">16</span>)</span><br><span class="line"></span><br><span class="line"><span class="built_in">console</span>.log(p1.sayHello === p2.sayHello) <span class="comment">// =&gt; true</span></span><br></pre></td></tr></table></figure><p>这样确实可以了，但是如果有多个需要共享的函数的话就会造成全局命名空间冲突的问题。</p><p>你肯定想到了可以把多个函数放到一个对象中用来避免全局命名空间冲突的问题：</p><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">var</span> fns = &#123;</span><br><span class="line">  sayHello: <span class="function"><span class="keyword">function</span> (<span class="params"></span>) </span>&#123;</span><br><span class="line">    <span class="built_in">console</span>.log(<span class="string">'hello '</span> + <span class="keyword">this</span>.name)</span><br><span class="line">  &#125;,</span><br><span class="line">  sayAge: <span class="function"><span class="keyword">function</span> (<span class="params"></span>) </span>&#123;</span><br><span class="line">    <span class="built_in">console</span>.log(<span class="keyword">this</span>.age)</span><br><span class="line">  &#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">function</span> <span class="title">Person</span> (<span class="params">name, age</span>) </span>&#123;</span><br><span class="line">  <span class="keyword">this</span>.name = name</span><br><span class="line">  <span class="keyword">this</span>.age = age</span><br><span class="line">  <span class="keyword">this</span>.type = <span class="string">'human'</span></span><br><span class="line">  <span class="keyword">this</span>.sayHello = fns.sayHello</span><br><span class="line">  <span class="keyword">this</span>.sayAge = fns.sayAge</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="keyword">var</span> p1 = <span class="keyword">new</span> Person(<span class="string">'lpz'</span>, <span class="number">18</span>)</span><br><span class="line"><span class="keyword">var</span> p2 = <span class="keyword">new</span> Person(<span class="string">'Jack'</span>, <span class="number">16</span>)</span><br><span class="line"></span><br><span class="line"><span class="built_in">console</span>.log(p1.sayHello === p2.sayHello) <span class="comment">// =&gt; true</span></span><br><span class="line"><span class="built_in">console</span>.log(p1.sayAge === p2.sayAge) <span class="comment">// =&gt; true</span></span><br></pre></td></tr></table></figure><p>至此，我们利用自己的方式基本上解决了构造函数的内存浪费问题。<br>但是代码看起来还是那么的格格不入，那有没有更好的方式呢？</p><h4 id="小结-2"><a href="#小结-2" class="headerlink" title="小结"></a>小结</h4><ul><li>构造函数语法</li><li>分析构造函数</li><li>构造函数和实例对象的关系<ul><li>实例的 constructor 属性</li><li>instanceof 操作符</li></ul></li><li>构造函数的问题</li></ul><h3 id="原型"><a href="#原型" class="headerlink" title="原型"></a>原型</h3><p>内容引导：</p><ul><li>使用 prototype 原型对象解决构造函数的问题</li><li>分析 构造函数、prototype 原型对象、实例对象 三者之间的关系</li><li>属性成员搜索原则：原型链</li><li>实例对象读写原型对象中的成员</li><li>原型对象的简写形式</li><li>原生对象的原型<ul><li>Object</li><li>Array</li><li>String</li><li>…</li></ul></li><li>原型对象的问题</li><li>构造的函数和原型对象使用建议</li></ul><h4 id="更好的解决方案：-prototype"><a href="#更好的解决方案：-prototype" class="headerlink" title="更好的解决方案： prototype"></a>更好的解决方案： <code>prototype</code></h4><p>Javascript 规定，每一个构造函数都有一个 <code>prototype</code> 属性，指向另一个对象。<br>这个对象的所有属性和方法，都会被构造函数的实例继承。</p><p>这也就意味着，我们可以把所有对象实例需要共享的属性和方法直接定义在 <code>prototype</code> 对象上。</p><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br></pre></td><td class="code"><pre><span class="line"><span class="function"><span class="keyword">function</span> <span class="title">Person</span> (<span class="params">name, age</span>) </span>&#123;</span><br><span class="line">  <span class="keyword">this</span>.name = name</span><br><span class="line">  <span class="keyword">this</span>.age = age</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="built_in">console</span>.log(Person.prototype)</span><br><span class="line"></span><br><span class="line">Person.prototype.type = <span class="string">'human'</span></span><br><span class="line"></span><br><span class="line">Person.prototype.sayName = <span class="function"><span class="keyword">function</span> (<span class="params"></span>) </span>&#123;</span><br><span class="line">  <span class="built_in">console</span>.log(<span class="keyword">this</span>.name)</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="keyword">var</span> p1 = <span class="keyword">new</span> Person(...)</span><br><span class="line"><span class="keyword">var</span> p2 = <span class="keyword">new</span> Person(...)</span><br><span class="line"></span><br><span class="line"><span class="built_in">console</span>.log(p1.sayName === p2.sayName) <span class="comment">// =&gt; true</span></span><br></pre></td></tr></table></figure><p>这时所有实例的 <code>type</code> 属性和 <code>sayName()</code> 方法，<br>其实都是同一个内存地址，指向 <code>prototype</code> 对象，因此就提高了运行效率。</p><h4 id="构造函数、实例、原型三者之间的关系"><a href="#构造函数、实例、原型三者之间的关系" class="headerlink" title="构造函数、实例、原型三者之间的关系"></a>构造函数、实例、原型三者之间的关系</h4><p><img src="/media/构造函数-实例-原型之间的关系.png" alt=""></p><p>任何函数都具有一个 <code>prototype</code> 属性，该属性是一个对象。</p><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line"><span class="function"><span class="keyword">function</span> <span class="title">F</span> (<span class="params"></span>) </span>&#123;&#125;</span><br><span class="line"><span class="built_in">console</span>.log(F.prototype) <span class="comment">// =&gt; object</span></span><br><span class="line"></span><br><span class="line">F.prototype.sayHi = <span class="function"><span class="keyword">function</span> (<span class="params"></span>) </span>&#123;</span><br><span class="line">  <span class="built_in">console</span>.log(<span class="string">'hi!'</span>)</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>构造函数的 <code>prototype</code> 对象默认都有一个 <code>constructor</code> 属性，指向 <code>prototype</code> 对象所在函数。</p><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line"><span class="built_in">console</span>.log(F.constructor === F) <span class="comment">// =&gt; true</span></span><br></pre></td></tr></table></figure><p>通过构造函数得到的实例对象内部会包含一个指向构造函数的 <code>prototype</code> 对象的指针 <code>__proto__</code>。</p><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">var</span> instance = <span class="keyword">new</span> F()</span><br><span class="line"><span class="built_in">console</span>.log(instance.__proto__ === F.prototype) <span class="comment">// =&gt; true</span></span><br></pre></td></tr></table></figure><p class="tip"><br>  <code>__proto__</code> 是非标准属性。<br></p><p>实例对象可以直接访问原型对象成员。</p><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">instance.sayHi() <span class="comment">// =&gt; hi!</span></span><br></pre></td></tr></table></figure><p>总结：</p><ul><li>任何函数都具有一个 <code>prototype</code> 属性，该属性是一个对象</li><li>构造函数的 <code>prototype</code> 对象默认都有一个 <code>constructor</code> 属性，指向 <code>prototype</code> 对象所在函数</li><li>通过构造函数得到的实例对象内部会包含一个指向构造函数的 <code>prototype</code> 对象的指针 <code>__proto__</code></li><li>所有实例都直接或间接继承了原型对象的成员</li></ul><h4 id="属性成员的搜索原则：原型链"><a href="#属性成员的搜索原则：原型链" class="headerlink" title="属性成员的搜索原则：原型链"></a>属性成员的搜索原则：原型链</h4><p>了解了 <strong>构造函数-实例-原型对象</strong> 三者之间的关系后，接下来我们来解释一下为什么实例对象可以访问原型对象中的成员。</p><p>每当代码读取某个对象的某个属性时，都会执行一次搜索，目标是具有给定名字的属性</p><ul><li>搜索首先从对象实例本身开始</li><li>如果在实例中找到了具有给定名字的属性，则返回该属性的值</li><li>如果没有找到，则继续搜索指针指向的原型对象，在原型对象中查找具有给定名字的属性</li><li>如果在原型对象中找到了这个属性，则返回该属性的值</li></ul><p>也就是说，在我们调用 <code>person1.sayName()</code> 的时候，会先后执行两次搜索：</p><ul><li>首先，解析器会问：“实例 person1 有 sayName 属性吗？”答：“没有。</li><li>”然后，它继续搜索，再问：“ person1 的原型有 sayName 属性吗？”答：“有。</li><li>”于是，它就读取那个保存在原型对象中的函数。</li><li>当我们调用 person2.sayName() 时，将会重现相同的搜索过程，得到相同的结果。</li></ul><p>而这正是多个对象实例共享原型所保存的属性和方法的基本原理。</p><p>总结：</p><ul><li>先在自己身上找，找到即返回</li><li>自己身上找不到，则沿着原型链向上查找，找到即返回</li><li>如果一直到原型链的末端还没有找到，则返回 <code>undefined</code></li></ul><h4 id="实例对象读写原型对象成员"><a href="#实例对象读写原型对象成员" class="headerlink" title="实例对象读写原型对象成员"></a>实例对象读写原型对象成员</h4><p>读取：</p><ul><li>先在自己身上找，找到即返回</li><li>自己身上找不到，则沿着原型链向上查找，找到即返回</li><li>如果一直到原型链的末端还没有找到，则返回 <code>undefined</code></li></ul><p>值类型成员写入（<code>实例对象.值类型成员 = xx</code>）：</p><ul><li>当实例期望重写原型对象中的某个普通数据成员时实际上会把该成员添加到自己身上</li><li>也就是说该行为实际上会屏蔽掉对原型对象成员的访问</li></ul><p>引用类型成员写入（<code>实例对象.引用类型成员 = xx</code>）：</p><ul><li>同上</li></ul><p>复杂类型修改（<code>实例对象.成员.xx = xx</code>）：</p><ul><li>同样会先在自己身上找该成员，如果自己身上找到则直接修改</li><li>如果自己身上找不到，则沿着原型链继续查找，如果找到则修改</li><li>如果一直到原型链的末端还没有找到该成员，则报错（<code>实例对象.undefined.xx = xx</code>）</li></ul><h4 id="更简单的原型语法"><a href="#更简单的原型语法" class="headerlink" title="更简单的原型语法"></a>更简单的原型语法</h4><p>我们注意到，前面例子中每添加一个属性和方法就要敲一遍 <code>Person.prototype</code> 。<br>为减少不必要的输入，更常见的做法是用一个包含所有属性和方法的对象字面量来重写整个原型对象：</p><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br></pre></td><td class="code"><pre><span class="line"><span class="function"><span class="keyword">function</span> <span class="title">Person</span> (<span class="params">name, age</span>) </span>&#123;</span><br><span class="line">  <span class="keyword">this</span>.name = name</span><br><span class="line">  <span class="keyword">this</span>.age = age</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line">Person.prototype = &#123;</span><br><span class="line">  type: <span class="string">'human'</span>,</span><br><span class="line">  sayHello: <span class="function"><span class="keyword">function</span> (<span class="params"></span>) </span>&#123;</span><br><span class="line">    <span class="built_in">console</span>.log(<span class="string">'我叫'</span> + <span class="keyword">this</span>.name + <span class="string">'，我今年'</span> + <span class="keyword">this</span>.age + <span class="string">'岁了'</span>)</span><br><span class="line">  &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>在该示例中，我们将 <code>Person.prototype</code> 重置到了一个新的对象。<br>这样做的好处就是为 <code>Person.prototype</code> 添加成员简单了，但是也会带来一个问题，那就是原型对象丢失了 <code>constructor</code> 成员。</p><p>所以，我们为了保持 <code>constructor</code> 的指向正确，建议的写法是：</p><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br></pre></td><td class="code"><pre><span class="line"><span class="function"><span class="keyword">function</span> <span class="title">Person</span> (<span class="params">name, age</span>) </span>&#123;</span><br><span class="line">  <span class="keyword">this</span>.name = name</span><br><span class="line">  <span class="keyword">this</span>.age = age</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line">Person.prototype = &#123;</span><br><span class="line">  <span class="keyword">constructor</span>: Person, // =&gt; 手动将 <span class="keyword">constructor</span> 指向正确的构造函数</span><br><span class="line">  type: 'human',</span><br><span class="line">  sayHello: function () &#123;</span><br><span class="line">    <span class="built_in">console</span>.log(<span class="string">'我叫'</span> + <span class="keyword">this</span>.name + <span class="string">'，我今年'</span> + <span class="keyword">this</span>.age + <span class="string">'岁了'</span>)</span><br><span class="line">  &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h4 id="原生对象的原型"><a href="#原生对象的原型" class="headerlink" title="原生对象的原型"></a>原生对象的原型</h4><p class="tip"><br>  所有函数都有 prototype 属性对象。<br></p><ul><li>Object.prototype</li><li>Function.prototype</li><li>Array.prototype</li><li>String.prototype</li><li>Number.prototype</li><li>Date.prototype</li><li>…</li></ul><p>练习：为数组对象和字符串对象扩展原型方法。</p><h4 id="原型对象的问题"><a href="#原型对象的问题" class="headerlink" title="原型对象的问题"></a>原型对象的问题</h4><ul><li>共享数组</li><li>共享对象</li></ul><p>如果真的希望可以被实例对象之间共享和修改这些共享数据那就不是问题。但是如果不希望实例之间共享和修改这些共享数据则就是问题。</p><p>一个更好的建议是，最好不要让实例之间互相共享这些数组或者对象成员，一旦修改的话会导致数据的走向很不明确而且难以维护。</p><h4 id="原型对象使用建议"><a href="#原型对象使用建议" class="headerlink" title="原型对象使用建议"></a>原型对象使用建议</h4><ul><li>私有成员（一般就是非函数成员）放到构造函数中</li><li>共享成员（一般就是函数）放到原型对象中</li><li>如果重置了 <code>prototype</code> 记得修正 <code>constructor</code> 的指向</li></ul><h3 id="案例：随机方块"><a href="#案例：随机方块" class="headerlink" title="案例：随机方块"></a>案例：随机方块</h3><hr><h2 id="面向对象游戏案例：贪吃蛇"><a href="#面向对象游戏案例：贪吃蛇" class="headerlink" title="面向对象游戏案例：贪吃蛇"></a>面向对象游戏案例：贪吃蛇</h2><p>案例相关源码以上传到 GitHub ：<a href="https://github.com/lipengzhou/new-snake" target="_blank" rel="noopener">https://github.com/lipengzhou/new-snake</a></p><h3 id="案例介绍"><a href="#案例介绍" class="headerlink" title="案例介绍"></a>案例介绍</h3><h4 id="游戏演示"><a href="#游戏演示" class="headerlink" title="游戏演示"></a>游戏演示</h4><p>在线演示地址：<a href="https://lipengzhou.github.io/new-snake/" target="_blank" rel="noopener">贪吃蛇</a></p><h4 id="案例目标"><a href="#案例目标" class="headerlink" title="案例目标"></a>案例目标</h4><p>游戏的目的是用来体会js高级语法的使用 不需要具备抽象对象的能力，使用面向对象的方式分析问题，需要一个漫长的过程。</p><h3 id="功能实现"><a href="#功能实现" class="headerlink" title="功能实现"></a>功能实现</h3><h4 id="搭建页面"><a href="#搭建页面" class="headerlink" title="搭建页面"></a>搭建页面</h4><p>放一个容器盛放游戏场景 div#map，设置样式</p><figure class="highlight css"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line"><span class="selector-id">#map</span> &#123;</span><br><span class="line">  <span class="attribute">width</span>: <span class="number">800px</span>;</span><br><span class="line">  <span class="attribute">height</span>: <span class="number">600px</span>;</span><br><span class="line">  <span class="attribute">background-color</span>: <span class="number">#ccc</span>;</span><br><span class="line">  <span class="attribute">position</span>: relative;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h4 id="分析对象"><a href="#分析对象" class="headerlink" title="分析对象"></a>分析对象</h4><ul><li>游戏对象</li><li>蛇对象</li><li>食物对象</li></ul><h4 id="创建食物对象"><a href="#创建食物对象" class="headerlink" title="创建食物对象"></a>创建食物对象</h4><ul><li><p>Food</p><ul><li><p>属性</p><ul><li>x       </li><li>y</li><li>width</li><li>height</li><li>color       </li></ul></li><li><p>方法</p><ul><li>render       随机创建一个食物对象，并输出到map上</li></ul></li></ul></li><li><p>创建Food的构造函数，并设置属性</p></li></ul><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">var</span> position = <span class="string">'absolute'</span>;</span><br><span class="line"><span class="keyword">var</span> elements = [];</span><br><span class="line"><span class="function"><span class="keyword">function</span> <span class="title">Food</span>(<span class="params">x, y, width, height, color</span>) </span>&#123;</span><br><span class="line">  <span class="keyword">this</span>.x = x || <span class="number">0</span>;</span><br><span class="line">  <span class="keyword">this</span>.y = y || <span class="number">0</span>;</span><br><span class="line">  <span class="comment">// 食物的宽度和高度(像素)</span></span><br><span class="line">  <span class="keyword">this</span>.width = width || <span class="number">20</span>;</span><br><span class="line">  <span class="keyword">this</span>.height = height || <span class="number">20</span>;</span><br><span class="line">  <span class="comment">// 食物的颜色</span></span><br><span class="line">  <span class="keyword">this</span>.color = color || <span class="string">'green'</span>;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><ul><li>通过原型设置render方法，实现随机产生食物对象，并渲染到map上</li></ul><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br></pre></td><td class="code"><pre><span class="line">Food.prototype.render = <span class="function"><span class="keyword">function</span> (<span class="params">map</span>) </span>&#123;</span><br><span class="line">  <span class="comment">// 随机食物的位置，map.宽度/food.宽度，总共有多少分food的宽度，随机一下。然后再乘以food的宽度</span></span><br><span class="line">  <span class="keyword">this</span>.x = <span class="built_in">parseInt</span>(<span class="built_in">Math</span>.random() * map.offsetWidth / <span class="keyword">this</span>.width) * <span class="keyword">this</span>.width;</span><br><span class="line">  <span class="keyword">this</span>.y = <span class="built_in">parseInt</span>(<span class="built_in">Math</span>.random() * map.offsetHeight / <span class="keyword">this</span>.height) * <span class="keyword">this</span>.height;</span><br><span class="line"></span><br><span class="line">  <span class="comment">// 动态创建食物对应的div</span></span><br><span class="line">  <span class="keyword">var</span> div = <span class="built_in">document</span>.createElement(<span class="string">'div'</span>);</span><br><span class="line">  map.appendChild(div);</span><br><span class="line">  div.style.position = position;</span><br><span class="line">  div.style.left = <span class="keyword">this</span>.x + <span class="string">'px'</span>;</span><br><span class="line">  div.style.top = <span class="keyword">this</span>.y + <span class="string">'px'</span>;</span><br><span class="line">  div.style.width = <span class="keyword">this</span>.width + <span class="string">'px'</span>;</span><br><span class="line">  div.style.height = <span class="keyword">this</span>.height + <span class="string">'px'</span>;</span><br><span class="line">  div.style.backgroundColor = <span class="keyword">this</span>.color;</span><br><span class="line">  elements.push(div);</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><ul><li>通过自调用函数，进行封装，通过window暴露Food对象</li></ul><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line"><span class="built_in">window</span>.Food = Food;</span><br></pre></td></tr></table></figure><h4 id="创建蛇对象"><a href="#创建蛇对象" class="headerlink" title="创建蛇对象"></a>创建蛇对象</h4><ul><li><p>Snake</p></li><li><p>属性</p><ul><li>width    蛇节的宽度 默认20</li><li>height   蛇节的高度 默认20</li><li>body     数组，蛇的头部和身体，第一个位置是蛇头</li><li>direction    蛇运动的方向  默认right  可以是 left  top bottom</li></ul></li><li><p>方法</p><ul><li>render  把蛇渲染到map上</li></ul></li><li><p>Snake构造函数</p></li></ul><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">var</span> position = <span class="string">'absolute'</span>;</span><br><span class="line"><span class="keyword">var</span> elements = [];</span><br><span class="line"><span class="function"><span class="keyword">function</span> <span class="title">Snake</span>(<span class="params">width, height, direction</span>) </span>&#123;</span><br><span class="line">  <span class="comment">// 设置每一个蛇节的宽度</span></span><br><span class="line">  <span class="keyword">this</span>.width = width || <span class="number">20</span>;</span><br><span class="line">  <span class="keyword">this</span>.height = height || <span class="number">20</span>;</span><br><span class="line">  <span class="comment">// 蛇的每一部分, 第一部分是蛇头</span></span><br><span class="line">  <span class="keyword">this</span>.body = [</span><br><span class="line">    &#123;<span class="attr">x</span>: <span class="number">3</span>, <span class="attr">y</span>: <span class="number">2</span>, <span class="attr">color</span>: <span class="string">'red'</span>&#125;,</span><br><span class="line">    &#123;<span class="attr">x</span>: <span class="number">2</span>, <span class="attr">y</span>: <span class="number">2</span>, <span class="attr">color</span>: <span class="string">'red'</span>&#125;,</span><br><span class="line">    &#123;<span class="attr">x</span>: <span class="number">1</span>, <span class="attr">y</span>: <span class="number">2</span>, <span class="attr">color</span>: <span class="string">'red'</span>&#125;</span><br><span class="line">  ];</span><br><span class="line">  <span class="keyword">this</span>.direction = direction || <span class="string">'right'</span>;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><ul><li>render方法</li></ul><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br></pre></td><td class="code"><pre><span class="line">Snake.prototype.render = <span class="function"><span class="keyword">function</span>(<span class="params">map</span>) </span>&#123;</span><br><span class="line">  <span class="keyword">for</span>(<span class="keyword">var</span> i = <span class="number">0</span>; i &lt; <span class="keyword">this</span>.body.length; i++) &#123;</span><br><span class="line">    <span class="keyword">var</span> obj = <span class="keyword">this</span>.body[i];</span><br><span class="line">    <span class="keyword">var</span> div = <span class="built_in">document</span>.createElement(<span class="string">'div'</span>);</span><br><span class="line">    map.appendChild(div);</span><br><span class="line">    div.style.left = obj.x * <span class="keyword">this</span>.width + <span class="string">'px'</span>;</span><br><span class="line">    div.style.top = obj.y * <span class="keyword">this</span>.height + <span class="string">'px'</span>;</span><br><span class="line">    div.style.position = position;</span><br><span class="line">    div.style.backgroundColor = obj.color;</span><br><span class="line">    div.style.width = <span class="keyword">this</span>.width + <span class="string">'px'</span>;</span><br><span class="line">    div.style.height = <span class="keyword">this</span>.height + <span class="string">'px'</span>;</span><br><span class="line">  &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><ul><li>在自调用函数中暴露Snake对象</li></ul><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line"><span class="built_in">window</span>.Snake = Snake;</span><br></pre></td></tr></table></figure><h4 id="创建游戏对象"><a href="#创建游戏对象" class="headerlink" title="创建游戏对象"></a>创建游戏对象</h4><p>游戏对象，用来管理游戏中的所有对象和开始游戏</p><ul><li><p>Game</p><ul><li><p>属性</p><ul><li><p>food</p></li><li><p>snake</p></li><li><p>map</p></li></ul></li><li><p>方法</p><ul><li>start            开始游戏（绘制所有游戏对象）</li></ul></li></ul></li></ul><ul><li>构造函数</li></ul><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line"><span class="function"><span class="keyword">function</span> <span class="title">Game</span>(<span class="params">map</span>) </span>&#123;</span><br><span class="line">  <span class="keyword">this</span>.food = <span class="keyword">new</span> Food();</span><br><span class="line">  <span class="keyword">this</span>.snake = <span class="keyword">new</span> Snake();</span><br><span class="line">  <span class="keyword">this</span>.map = map;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><ul><li>开始游戏，渲染食物对象和蛇对象</li></ul><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line">Game.prototype.start = <span class="function"><span class="keyword">function</span> (<span class="params"></span>) </span>&#123;</span><br><span class="line">  <span class="keyword">this</span>.food.render(<span class="keyword">this</span>.map);</span><br><span class="line">  <span class="keyword">this</span>.snake.render(<span class="keyword">this</span>.map);</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h3 id="游戏的逻辑"><a href="#游戏的逻辑" class="headerlink" title="游戏的逻辑"></a>游戏的逻辑</h3><h4 id="写蛇的move方法"><a href="#写蛇的move方法" class="headerlink" title="写蛇的move方法"></a>写蛇的move方法</h4><ul><li>在蛇对象(snake.js)中，在Snake的原型上新增move方法</li></ul><ol><li>让蛇移动起来，把蛇身体的每一部分往前移动一下</li><li>蛇头部分根据不同的方向决定 往哪里移动</li></ol><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br></pre></td><td class="code"><pre><span class="line">Snake.prototype.move = <span class="function"><span class="keyword">function</span> (<span class="params">food, map</span>) </span>&#123;</span><br><span class="line">  <span class="comment">// 让蛇身体的每一部分往前移动一下</span></span><br><span class="line">  <span class="keyword">var</span> i = <span class="keyword">this</span>.body.length - <span class="number">1</span>;</span><br><span class="line">  <span class="keyword">for</span>(; i &gt; <span class="number">0</span>; i--) &#123;</span><br><span class="line">    <span class="keyword">this</span>.body[i].x = <span class="keyword">this</span>.body[i - <span class="number">1</span>].x;</span><br><span class="line">    <span class="keyword">this</span>.body[i].y = <span class="keyword">this</span>.body[i - <span class="number">1</span>].y;</span><br><span class="line">  &#125;</span><br><span class="line">  <span class="comment">// 根据移动的方向，决定蛇头如何处理</span></span><br><span class="line">  <span class="keyword">switch</span>(<span class="keyword">this</span>.direction) &#123;</span><br><span class="line">    <span class="keyword">case</span> <span class="string">'left'</span>: </span><br><span class="line">      <span class="keyword">this</span>.body[<span class="number">0</span>].x -= <span class="number">1</span>;</span><br><span class="line">      <span class="keyword">break</span>;</span><br><span class="line">    <span class="keyword">case</span> <span class="string">'right'</span>:</span><br><span class="line">      <span class="keyword">this</span>.body[<span class="number">0</span>].x += <span class="number">1</span>;</span><br><span class="line">      <span class="keyword">break</span>;</span><br><span class="line">    <span class="keyword">case</span> <span class="string">'top'</span>:</span><br><span class="line">      <span class="keyword">this</span>.body[<span class="number">0</span>].y -= <span class="number">1</span>;</span><br><span class="line">      <span class="keyword">break</span>;</span><br><span class="line">    <span class="keyword">case</span> <span class="string">'bottom'</span>:</span><br><span class="line">      <span class="keyword">this</span>.body[<span class="number">0</span>].y += <span class="number">1</span>;</span><br><span class="line">      <span class="keyword">break</span>;</span><br><span class="line">  &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><ul><li>在game中测试</li></ul><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">this</span>.snake.move(<span class="keyword">this</span>.food, <span class="keyword">this</span>.map);</span><br><span class="line"><span class="keyword">this</span>.snake.render(<span class="keyword">this</span>.map);</span><br></pre></td></tr></table></figure><h4 id="让蛇自己动起来"><a href="#让蛇自己动起来" class="headerlink" title="让蛇自己动起来"></a>让蛇自己动起来</h4><ul><li><p>私有方法</p>  <figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line">什么是私有方法？</span><br><span class="line">  不能被外部访问的方法</span><br><span class="line">如何创建私有方法？</span><br><span class="line">  使用自调用函数包裹</span><br></pre></td></tr></table></figure></li><li><p>在game.js中 添加runSnake的私有方法，开启定时器调用蛇的move和render方法，让蛇动起来</p></li><li>判断蛇是否撞墙</li></ul><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br></pre></td><td class="code"><pre><span class="line"><span class="function"><span class="keyword">function</span> <span class="title">runSnake</span>(<span class="params"></span>) </span>&#123;</span><br><span class="line">  <span class="keyword">var</span> timerId = setInterval(<span class="function"><span class="keyword">function</span>(<span class="params"></span>) </span>&#123;</span><br><span class="line">    <span class="keyword">this</span>.snake.move(<span class="keyword">this</span>.food, <span class="keyword">this</span>.map);</span><br><span class="line">    <span class="comment">// 在渲染前，删除之前的蛇</span></span><br><span class="line">    <span class="keyword">this</span>.snake.render(<span class="keyword">this</span>.map);</span><br><span class="line"></span><br><span class="line">    <span class="comment">// 判断蛇是否撞墙</span></span><br><span class="line">    <span class="keyword">var</span> maxX = <span class="keyword">this</span>.map.offsetWidth / <span class="keyword">this</span>.snake.width;</span><br><span class="line">    <span class="keyword">var</span> maxY = <span class="keyword">this</span>.map.offsetHeight / <span class="keyword">this</span>.snake.height;</span><br><span class="line">    <span class="keyword">var</span> headX = <span class="keyword">this</span>.snake.body[<span class="number">0</span>].x;</span><br><span class="line">    <span class="keyword">var</span> headY = <span class="keyword">this</span>.snake.body[<span class="number">0</span>].y;</span><br><span class="line">    <span class="keyword">if</span> (headX &lt; <span class="number">0</span> || headX &gt;= maxX) &#123;</span><br><span class="line">      clearInterval(timerId);</span><br><span class="line">      alert(<span class="string">'Game Over'</span>);</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">if</span> (headY &lt; <span class="number">0</span> || headY &gt;= maxY) &#123;</span><br><span class="line">      clearInterval(timerId);</span><br><span class="line">      alert(<span class="string">'Game Over'</span>);</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">  &#125;.bind(that), <span class="number">150</span>);</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><ul><li>在snake中添加删除蛇的私有方法，在render中调用</li></ul><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br></pre></td><td class="code"><pre><span class="line"><span class="function"><span class="keyword">function</span> <span class="title">remove</span>(<span class="params"></span>) </span>&#123;</span><br><span class="line">  <span class="comment">// 删除渲染的蛇</span></span><br><span class="line">  <span class="keyword">var</span> i = elements.length - <span class="number">1</span>;</span><br><span class="line">  <span class="keyword">for</span>(; i &gt;= <span class="number">0</span>; i--) &#123;</span><br><span class="line">    <span class="comment">// 删除页面上渲染的蛇</span></span><br><span class="line">    elements[i].parentNode.removeChild(elements[i]);</span><br><span class="line">    <span class="comment">// 删除elements数组中的元素</span></span><br><span class="line">    elements.splice(i, <span class="number">1</span>);</span><br><span class="line">  &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><ul><li>在game中通过键盘控制蛇的移动方向</li></ul><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br></pre></td><td class="code"><pre><span class="line"><span class="function"><span class="keyword">function</span> <span class="title">bindKey</span>(<span class="params"></span>) </span>&#123;</span><br><span class="line">  <span class="built_in">document</span>.addEventListener(<span class="string">'keydown'</span>, <span class="function"><span class="keyword">function</span>(<span class="params">e</span>) </span>&#123;</span><br><span class="line">    <span class="keyword">switch</span> (e.keyCode) &#123;</span><br><span class="line">      <span class="keyword">case</span> <span class="number">37</span>:</span><br><span class="line">        <span class="comment">// left</span></span><br><span class="line">        <span class="keyword">this</span>.snake.direction = <span class="string">'left'</span>;</span><br><span class="line">        <span class="keyword">break</span>;</span><br><span class="line">      <span class="keyword">case</span> <span class="number">38</span>:</span><br><span class="line">        <span class="comment">// top</span></span><br><span class="line">        <span class="keyword">this</span>.snake.direction = <span class="string">'top'</span>;</span><br><span class="line">        <span class="keyword">break</span>;</span><br><span class="line">      <span class="keyword">case</span> <span class="number">39</span>:</span><br><span class="line">        <span class="comment">// right</span></span><br><span class="line">        <span class="keyword">this</span>.snake.direction = <span class="string">'right'</span>;</span><br><span class="line">        <span class="keyword">break</span>;</span><br><span class="line">      <span class="keyword">case</span> <span class="number">40</span>:</span><br><span class="line">        <span class="comment">// bottom</span></span><br><span class="line">        <span class="keyword">this</span>.snake.direction = <span class="string">'bottom'</span>;</span><br><span class="line">        <span class="keyword">break</span>;</span><br><span class="line">    &#125;</span><br><span class="line">  &#125;.bind(that), <span class="literal">false</span>);</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><ul><li>在start方法中调用</li></ul><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">bindKey();</span><br></pre></td></tr></table></figure><h4 id="判断蛇是否吃到食物"><a href="#判断蛇是否吃到食物" class="headerlink" title="判断蛇是否吃到食物"></a>判断蛇是否吃到食物</h4><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">// 在Snake的move方法中</span></span><br><span class="line"></span><br><span class="line"><span class="comment">// 在移动的过程中判断蛇是否吃到食物</span></span><br><span class="line"><span class="comment">// 如果蛇头和食物的位置重合代表吃到食物</span></span><br><span class="line"><span class="comment">// 食物的坐标是像素，蛇的坐标是几个宽度，进行转换</span></span><br><span class="line"><span class="keyword">var</span> headX = <span class="keyword">this</span>.body[<span class="number">0</span>].x * <span class="keyword">this</span>.width;</span><br><span class="line"><span class="keyword">var</span> headY = <span class="keyword">this</span>.body[<span class="number">0</span>].y * <span class="keyword">this</span>.height;</span><br><span class="line"><span class="keyword">if</span> (headX === food.x &amp;&amp; headY === food.y) &#123;</span><br><span class="line">  <span class="comment">// 吃到食物，往蛇节的最后加一节</span></span><br><span class="line">  <span class="keyword">var</span> last = <span class="keyword">this</span>.body[<span class="keyword">this</span>.body.length - <span class="number">1</span>];</span><br><span class="line">  <span class="keyword">this</span>.body.push(&#123;</span><br><span class="line">    x: last.x,</span><br><span class="line">    y: last.y,</span><br><span class="line">    color: last.color</span><br><span class="line">  &#125;)</span><br><span class="line">  <span class="comment">// 把现在的食物对象删除，并重新随机渲染一个食物对象</span></span><br><span class="line">  food.render(map);</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h3 id="其它处理"><a href="#其它处理" class="headerlink" title="其它处理"></a>其它处理</h3><h4 id="把html中的js代码放到index-js中"><a href="#把html中的js代码放到index-js中" class="headerlink" title="把html中的js代码放到index.js中"></a>把html中的js代码放到index.js中</h4><p>避免html中出现js代码</p><h4 id="自调用函数的参数"><a href="#自调用函数的参数" class="headerlink" title="自调用函数的参数"></a>自调用函数的参数</h4><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line">(<span class="function"><span class="keyword">function</span> (<span class="params">window, undefined</span>) </span>&#123;</span><br><span class="line">  <span class="keyword">var</span> <span class="built_in">document</span> = <span class="built_in">window</span>.document;</span><br><span class="line"></span><br><span class="line">&#125;(<span class="built_in">window</span>, <span class="literal">undefined</span>))</span><br></pre></td></tr></table></figure><ul><li>传入window对象</li></ul><p>将来代码压缩的时候，可以吧 function (window)  压缩成 function (w)</p><ul><li>传入undefined</li></ul><p>在将来会看到别人写的代码中会把undefined作为函数的参数(当前案例没有使用)<br>因为在有的老版本的浏览器中 undefined可以被重新赋值，防止undefined 被重新赋值</p><h4 id="整理代码"><a href="#整理代码" class="headerlink" title="整理代码"></a>整理代码</h4><p>现在的代码结构清晰，谁出问题就找到对应的js文件即可。<br>通过自调用函数，已经防止了变量命名污染的问题</p><p>但是，由于js文件数较多，需要在页面上引用，会产生文件依赖的问题(先引入那个js，再引入哪个js)<br>将来通过工具把js文件合并并压缩。现在手工合并js文件演示</p><ul><li>问题1</li></ul><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">// 如果存在多个自调用函数要用分号分割，否则语法错误</span></span><br><span class="line"><span class="comment">// 下面代码会报错</span></span><br><span class="line">(<span class="function"><span class="keyword">function</span> (<span class="params"></span>) </span>&#123;</span><br><span class="line">&#125;())</span><br><span class="line"></span><br><span class="line">(<span class="function"><span class="keyword">function</span> (<span class="params"></span>) </span>&#123;</span><br><span class="line">&#125;())</span><br><span class="line"><span class="comment">// 所以代码规范中会建议在自调用函数之前加上分号</span></span><br><span class="line"><span class="comment">// 下面代码没有问题</span></span><br><span class="line">;(<span class="function"><span class="keyword">function</span> (<span class="params"></span>) </span>&#123;</span><br><span class="line">&#125;())</span><br><span class="line"></span><br><span class="line">;(<span class="function"><span class="keyword">function</span> (<span class="params"></span>) </span>&#123;</span><br><span class="line">&#125;())</span><br></pre></td></tr></table></figure><ul><li>问题2 </li></ul><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">// 当自调用函数 前面有函数声明时，会把自调用函数作为参数</span></span><br><span class="line"><span class="comment">// 所以建议自调用函数前，加上;</span></span><br><span class="line"><span class="keyword">var</span> a = <span class="function"><span class="keyword">function</span> (<span class="params"></span>) </span>&#123;</span><br><span class="line">  alert(<span class="string">'11'</span>);</span><br><span class="line">&#125;</span><br><span class="line">    </span><br><span class="line">(<span class="function"><span class="keyword">function</span> (<span class="params"></span>) </span>&#123;</span><br><span class="line">  alert(<span class="string">'22'</span>);</span><br><span class="line">&#125;())</span><br></pre></td></tr></table></figure><hr><h2 id="继承"><a href="#继承" class="headerlink" title="继承"></a>继承</h2><h3 id="什么是继承"><a href="#什么是继承" class="headerlink" title="什么是继承"></a>什么是继承</h3><ul><li>现实生活中的继承</li><li>程序中的继承</li></ul><h3 id="构造函数的属性继承：借用构造函数"><a href="#构造函数的属性继承：借用构造函数" class="headerlink" title="构造函数的属性继承：借用构造函数"></a>构造函数的属性继承：借用构造函数</h3><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br></pre></td><td class="code"><pre><span class="line"><span class="function"><span class="keyword">function</span> <span class="title">Person</span> (<span class="params">name, age</span>) </span>&#123;</span><br><span class="line">  <span class="keyword">this</span>.type = <span class="string">'human'</span></span><br><span class="line">  <span class="keyword">this</span>.name = name</span><br><span class="line">  <span class="keyword">this</span>.age = age</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">function</span> <span class="title">Student</span> (<span class="params">name, age</span>) </span>&#123;</span><br><span class="line">  <span class="comment">// 借用构造函数继承属性成员</span></span><br><span class="line">  Person.call(<span class="keyword">this</span>, name, age)</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="keyword">var</span> s1 = Student(<span class="string">'张三'</span>, <span class="number">18</span>)</span><br><span class="line"><span class="built_in">console</span>.log(s1.type, s1.name, s1.age) <span class="comment">// =&gt; human 张三 18</span></span><br></pre></td></tr></table></figure><h3 id="构造函数的原型方法继承：拷贝继承（for-in）"><a href="#构造函数的原型方法继承：拷贝继承（for-in）" class="headerlink" title="构造函数的原型方法继承：拷贝继承（for-in）"></a>构造函数的原型方法继承：拷贝继承（for-in）</h3><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br></pre></td><td class="code"><pre><span class="line"><span class="function"><span class="keyword">function</span> <span class="title">Person</span> (<span class="params">name, age</span>) </span>&#123;</span><br><span class="line">  <span class="keyword">this</span>.type = <span class="string">'human'</span></span><br><span class="line">  <span class="keyword">this</span>.name = name</span><br><span class="line">  <span class="keyword">this</span>.age = age</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line">Person.prototype.sayName = <span class="function"><span class="keyword">function</span> (<span class="params"></span>) </span>&#123;</span><br><span class="line">  <span class="built_in">console</span>.log(<span class="string">'hello '</span> + <span class="keyword">this</span>.name)</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">function</span> <span class="title">Student</span> (<span class="params">name, age</span>) </span>&#123;</span><br><span class="line">  Person.call(<span class="keyword">this</span>, name, age)</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="comment">// 原型对象拷贝继承原型对象成员</span></span><br><span class="line"><span class="keyword">for</span>(<span class="keyword">var</span> key <span class="keyword">in</span> Person.prototype) &#123;</span><br><span class="line">  Student.prototype[key] = Person.prototype[key]</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="keyword">var</span> s1 = Student(<span class="string">'张三'</span>, <span class="number">18</span>)</span><br><span class="line"></span><br><span class="line">s1.sayName() <span class="comment">// =&gt; hello 张三</span></span><br></pre></td></tr></table></figure><h3 id="另一种继承方式：原型继承"><a href="#另一种继承方式：原型继承" class="headerlink" title="另一种继承方式：原型继承"></a>另一种继承方式：原型继承</h3><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br></pre></td><td class="code"><pre><span class="line"><span class="function"><span class="keyword">function</span> <span class="title">Person</span> (<span class="params">name, age</span>) </span>&#123;</span><br><span class="line">  <span class="keyword">this</span>.type = <span class="string">'human'</span></span><br><span class="line">  <span class="keyword">this</span>.name = name</span><br><span class="line">  <span class="keyword">this</span>.age = age</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line">Person.prototype.sayName = <span class="function"><span class="keyword">function</span> (<span class="params"></span>) </span>&#123;</span><br><span class="line">  <span class="built_in">console</span>.log(<span class="string">'hello '</span> + <span class="keyword">this</span>.name)</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">function</span> <span class="title">Student</span> (<span class="params">name, age</span>) </span>&#123;</span><br><span class="line">  Person.call(<span class="keyword">this</span>, name, age)</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="comment">// 利用原型的特性实现继承</span></span><br><span class="line">Student.prototype = <span class="keyword">new</span> Person()</span><br><span class="line"></span><br><span class="line"><span class="keyword">var</span> s1 = Student(<span class="string">'张三'</span>, <span class="number">18</span>)</span><br><span class="line"></span><br><span class="line"><span class="built_in">console</span>.log(s1.type) <span class="comment">// =&gt; human</span></span><br><span class="line"></span><br><span class="line">s1.sayName() <span class="comment">// =&gt; hello 张三</span></span><br></pre></td></tr></table></figure><hr><h2 id="函数进阶"><a href="#函数进阶" class="headerlink" title="函数进阶"></a>函数进阶</h2><h3 id="函数的定义方式"><a href="#函数的定义方式" class="headerlink" title="函数的定义方式"></a>函数的定义方式</h3><ul><li>函数声明</li><li>函数表达式</li><li><code>new Function</code></li></ul><h4 id="函数声明"><a href="#函数声明" class="headerlink" title="函数声明"></a>函数声明</h4><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line"><span class="function"><span class="keyword">function</span> <span class="title">foo</span> (<span class="params"></span>) </span>&#123;</span><br><span class="line"></span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h4 id="函数表达式"><a href="#函数表达式" class="headerlink" title="函数表达式"></a>函数表达式</h4><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">var</span> foo = <span class="function"><span class="keyword">function</span> (<span class="params"></span>) </span>&#123;</span><br><span class="line"></span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h4 id="函数声明与函数表达式的区别"><a href="#函数声明与函数表达式的区别" class="headerlink" title="函数声明与函数表达式的区别"></a>函数声明与函数表达式的区别</h4><ul><li>函数声明必须有名字</li><li>函数声明会函数提升，在预解析阶段就已创建，声明前后都可以调用</li><li>函数表达式类似于变量赋值</li><li>函数表达式可以没有名字，例如匿名函数</li><li>函数表达式没有变量提升，在执行阶段创建，必须在表达式执行之后才可以调用</li></ul><p>下面是一个根据条件定义函数的例子：</p><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">if</span> (<span class="literal">true</span>) &#123;</span><br><span class="line">  <span class="function"><span class="keyword">function</span> <span class="title">f</span> (<span class="params"></span>) </span>&#123;</span><br><span class="line">    <span class="built_in">console</span>.log(<span class="number">1</span>)</span><br><span class="line">  &#125;</span><br><span class="line">&#125; <span class="keyword">else</span> &#123;</span><br><span class="line">  <span class="function"><span class="keyword">function</span> <span class="title">f</span> (<span class="params"></span>) </span>&#123;</span><br><span class="line">    <span class="built_in">console</span>.log(<span class="number">2</span>)</span><br><span class="line">  &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>以上代码执行结果在不同浏览器中结果不一致。</p><p>不过我们可以使用函数表达式解决上面的问题：</p><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">var</span> f</span><br><span class="line"></span><br><span class="line"><span class="keyword">if</span> (<span class="literal">true</span>) &#123;</span><br><span class="line">  f = <span class="function"><span class="keyword">function</span> (<span class="params"></span>) </span>&#123;</span><br><span class="line">    <span class="built_in">console</span>.log(<span class="number">1</span>)</span><br><span class="line">  &#125;</span><br><span class="line">&#125; <span class="keyword">else</span> &#123;</span><br><span class="line">  f = <span class="function"><span class="keyword">function</span> (<span class="params"></span>) </span>&#123;</span><br><span class="line">    <span class="built_in">console</span>.log(<span class="number">2</span>)</span><br><span class="line">  &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h3 id="函数的调用方式"><a href="#函数的调用方式" class="headerlink" title="函数的调用方式"></a>函数的调用方式</h3><ul><li>普通函数</li><li>构造函数</li><li>对象方法</li></ul><h3 id="函数内-this-指向的不同场景"><a href="#函数内-this-指向的不同场景" class="headerlink" title="函数内 this 指向的不同场景"></a>函数内 <code>this</code> 指向的不同场景</h3><p>函数的调用方式决定了 <code>this</code> 指向的不同：</p><table><thead><tr><th>调用方式</th><th>非严格模式</th><th>备注</th></tr></thead><tbody><tr><td>普通函数调用</td><td>window</td><td>严格模式下是 undefined</td></tr><tr><td>构造函数调用</td><td>实例对象</td><td>原型方法中 this 也是实例对象</td></tr><tr><td>对象方法调用</td><td>该方法所属对象</td><td>紧挨着的对象</td></tr><tr><td>事件绑定方法</td><td>绑定事件对象</td><td></td></tr><tr><td>定时器函数</td><td>window</td></tr></tbody></table><p>这就是对函数内部 this 指向的基本整理，写代码写多了自然而然就熟悉了。</p><h3 id="函数也是对象"><a href="#函数也是对象" class="headerlink" title="函数也是对象"></a>函数也是对象</h3><ul><li>所有函数都是 <code>Function</code> 的实例</li></ul><h3 id="call、apply、bind"><a href="#call、apply、bind" class="headerlink" title="call、apply、bind"></a>call、apply、bind</h3><p>那了解了函数 this 指向的不同场景之后，我们知道有些情况下我们为了使用某种特定环境的 this 引用，<br>这时候时候我们就需要采用一些特殊手段来处理了，例如我们经常在定时器外部备份 this 引用，然后在定时器函数内部使用外部 this 的引用。<br>然而实际上对于这种做法我们的 JavaScript 为我们专门提供了一些函数方法用来帮我们更优雅的处理函数内部 this 指向问题。<br>这就是接下来我们要学习的 call、apply、bind 三个函数方法。</p><h4 id="call"><a href="#call" class="headerlink" title="call"></a>call</h4><p><code>call()</code> 方法调用一个函数, 其具有一个指定的 <code>this</code> 值和分别地提供的参数(参数的列表)。</p><p class="danger"><br>  注意：该方法的作用和 <code>apply()</code> 方法类似，只有一个区别，就是 <code>call()</code> 方法接受的是若干个参数的列表，而 <code>apply()</code> 方法接受的是一个包含多个参数的数组。<br></p><p>语法：</p><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">fun.call(thisArg[, arg1[, arg2[, ...]]])</span><br></pre></td></tr></table></figure><p>参数：</p><ul><li><p><code>thisArg</code></p><ul><li>在 fun 函数运行时指定的 this 值</li><li>如果指定了 null 或者 undefined 则内部 this 指向 window</li></ul></li><li><p><code>arg1, arg2, ...</code></p><ul><li>指定的参数列表</li></ul></li></ul><h4 id="apply"><a href="#apply" class="headerlink" title="apply"></a>apply</h4><p><code>apply()</code> 方法调用一个函数, 其具有一个指定的 <code>this</code> 值，以及作为一个数组（或类似数组的对象）提供的参数。</p><p class="danger"><br>  注意：该方法的作用和 <code>call()</code> 方法类似，只有一个区别，就是 <code>call()</code> 方法接受的是若干个参数的列表，而 <code>apply()</code> 方法接受的是一个包含多个参数的数组。<br></p><p>语法：</p><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">fun.apply(thisArg, [argsArray])</span><br></pre></td></tr></table></figure><p>参数：</p><ul><li><code>thisArg</code></li><li><code>argsArray</code></li></ul><p><code>apply()</code> 与 <code>call()</code> 非常相似，不同之处在于提供参数的方式。<br><code>apply()</code> 使用参数数组而不是一组参数列表。例如：</p><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">fun.apply(<span class="keyword">this</span>, [<span class="string">'eat'</span>, <span class="string">'bananas'</span>])</span><br></pre></td></tr></table></figure><h4 id="bind"><a href="#bind" class="headerlink" title="bind"></a>bind</h4><p>bind() 函数会创建一个新函数（称为绑定函数），新函数与被调函数（绑定函数的目标函数）具有相同的函数体（在 ECMAScript 5 规范中内置的call属性）。<br>当目标函数被调用时 this 值绑定到 bind() 的第一个参数，该参数不能被重写。绑定函数被调用时，bind() 也接受预设的参数提供给原函数。<br>一个绑定函数也能使用new操作符创建对象：这种行为就像把原函数当成构造器。提供的 this 值被忽略，同时调用时的参数被提供给模拟函数。</p><p>语法：</p><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">fun.bind(thisArg[, arg1[, arg2[, ...]]])</span><br></pre></td></tr></table></figure><p>参数：</p><ul><li><p>thisArg</p><ul><li>当绑定函数被调用时，该参数会作为原函数运行时的 this 指向。当使用new 操作符调用绑定函数时，该参数无效。</li></ul></li><li><p>arg1, arg2, …</p><ul><li>当绑定函数被调用时，这些参数将置于实参之前传递给被绑定的方法。</li></ul></li></ul><p>返回值：</p><p>返回由指定的this值和初始化参数改造的原函数拷贝。</p><p>示例1：</p><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">this</span>.x = <span class="number">9</span>; </span><br><span class="line"><span class="keyword">var</span> <span class="built_in">module</span> = &#123;</span><br><span class="line">  x: <span class="number">81</span>,</span><br><span class="line">  getX: <span class="function"><span class="keyword">function</span>(<span class="params"></span>) </span>&#123; <span class="keyword">return</span> <span class="keyword">this</span>.x; &#125;</span><br><span class="line">&#125;;</span><br><span class="line"></span><br><span class="line"><span class="built_in">module</span>.getX(); <span class="comment">// 返回 81</span></span><br><span class="line"></span><br><span class="line"><span class="keyword">var</span> retrieveX = <span class="built_in">module</span>.getX;</span><br><span class="line">retrieveX(); <span class="comment">// 返回 9, 在这种情况下，"this"指向全局作用域</span></span><br><span class="line"></span><br><span class="line"><span class="comment">// 创建一个新函数，将"this"绑定到module对象</span></span><br><span class="line"><span class="comment">// 新手可能会被全局的x变量和module里的属性x所迷惑</span></span><br><span class="line"><span class="keyword">var</span> boundGetX = retrieveX.bind(<span class="built_in">module</span>);</span><br><span class="line">boundGetX(); <span class="comment">// 返回 81</span></span><br></pre></td></tr></table></figure><p>示例2：</p><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br></pre></td><td class="code"><pre><span class="line"><span class="function"><span class="keyword">function</span> <span class="title">LateBloomer</span>(<span class="params"></span>) </span>&#123;</span><br><span class="line">  <span class="keyword">this</span>.petalCount = <span class="built_in">Math</span>.ceil(<span class="built_in">Math</span>.random() * <span class="number">12</span>) + <span class="number">1</span>;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="comment">// Declare bloom after a delay of 1 second</span></span><br><span class="line">LateBloomer.prototype.bloom = <span class="function"><span class="keyword">function</span>(<span class="params"></span>) </span>&#123;</span><br><span class="line">  <span class="built_in">window</span>.setTimeout(<span class="keyword">this</span>.declare.bind(<span class="keyword">this</span>), <span class="number">1000</span>);</span><br><span class="line">&#125;;</span><br><span class="line"></span><br><span class="line">LateBloomer.prototype.declare = <span class="function"><span class="keyword">function</span>(<span class="params"></span>) </span>&#123;</span><br><span class="line">  <span class="built_in">console</span>.log(<span class="string">'I am a beautiful flower with '</span> +</span><br><span class="line">    <span class="keyword">this</span>.petalCount + <span class="string">' petals!'</span>);</span><br><span class="line">&#125;;</span><br><span class="line"></span><br><span class="line"><span class="keyword">var</span> flower = <span class="keyword">new</span> LateBloomer();</span><br><span class="line">flower.bloom();  <span class="comment">// 一秒钟后, 调用'declare'方法</span></span><br></pre></td></tr></table></figure><h4 id="小结-3"><a href="#小结-3" class="headerlink" title="小结"></a>小结</h4><ul><li><p>call 和 apply 特性一样</p><ul><li>都是用来调用函数，而且是立即调用</li><li>但是可以在调用函数的同时，通过第一个参数指定函数内部 <code>this</code> 的指向</li><li>call 调用的时候，参数必须以参数列表的形式进行传递，也就是以逗号分隔的方式依次传递即可</li><li>apply 调用的时候，参数必须是一个数组，然后在执行的时候，会将数组内部的元素一个一个拿出来，与形参一一对应进行传递</li><li>如果第一个参数指定了 <code>null</code> 或者 <code>undefined</code> 则内部 this 指向 window</li></ul></li><li><p>bind</p><ul><li>可以用来指定内部 this 的指向，然后生成一个改变了 this 指向的新的函数</li><li>它和 call、apply 最大的区别是：bind 不会调用</li><li>bind 支持传递参数，它的传参方式比较特殊，一共有两个位置可以传递<ul><li><ol><li>在 bind 的同时，以参数列表的形式进行传递</li></ol></li><li><ol start="2"><li>在调用的时候，以参数列表的形式进行传递</li></ol></li><li>那到底以谁 bind 的时候传递的参数为准呢还是以调用的时候传递的参数为准</li><li>两者合并：bind 的时候传递的参数和调用的时候传递的参数会合并到一起，传递到函数内部</li></ul></li></ul></li></ul><h3 id="函数的其它成员"><a href="#函数的其它成员" class="headerlink" title="函数的其它成员"></a>函数的其它成员</h3><ul><li>arguments<ul><li>实参集合</li></ul></li><li>caller<ul><li>函数的调用者</li></ul></li><li>length<ul><li>形参的个数</li></ul></li><li>name<ul><li>函数的名称</li></ul></li></ul><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br></pre></td><td class="code"><pre><span class="line"><span class="function"><span class="keyword">function</span> <span class="title">fn</span>(<span class="params">x, y, z</span>) </span>&#123;</span><br><span class="line">  <span class="built_in">console</span>.log(fn.length) <span class="comment">// =&gt; 形参的个数</span></span><br><span class="line">  <span class="built_in">console</span>.log(<span class="built_in">arguments</span>) <span class="comment">// 伪数组实参参数集合</span></span><br><span class="line">  <span class="built_in">console</span>.log(<span class="built_in">arguments</span>.callee === fn) <span class="comment">// 函数本身</span></span><br><span class="line">  <span class="built_in">console</span>.log(fn.caller) <span class="comment">// 函数的调用者</span></span><br><span class="line">  <span class="built_in">console</span>.log(fn.name) <span class="comment">// =&gt; 函数的名字</span></span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">function</span> <span class="title">f</span>(<span class="params"></span>) </span>&#123;</span><br><span class="line">  fn(<span class="number">10</span>, <span class="number">20</span>, <span class="number">30</span>)</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line">f()</span><br></pre></td></tr></table></figure><h3 id="高阶函数"><a href="#高阶函数" class="headerlink" title="高阶函数"></a>高阶函数</h3><ul><li>函数可以作为参数</li><li>函数可以作为返回值</li></ul><h4 id="作为参数"><a href="#作为参数" class="headerlink" title="作为参数"></a>作为参数</h4><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br></pre></td><td class="code"><pre><span class="line"><span class="function"><span class="keyword">function</span> <span class="title">eat</span> (<span class="params">callback</span>) </span>&#123;</span><br><span class="line">  setTimeout(<span class="function"><span class="keyword">function</span> (<span class="params"></span>) </span>&#123;</span><br><span class="line">    <span class="built_in">console</span>.log(<span class="string">'吃完了'</span>)</span><br><span class="line">    callback()</span><br><span class="line">  &#125;, <span class="number">1000</span>)</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line">eat(<span class="function"><span class="keyword">function</span> (<span class="params"></span>) </span>&#123;</span><br><span class="line">  <span class="built_in">console</span>.log(<span class="string">'去唱歌'</span>)</span><br><span class="line">&#125;)</span><br></pre></td></tr></table></figure><h4 id="作为返回值"><a href="#作为返回值" class="headerlink" title="作为返回值"></a>作为返回值</h4><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br></pre></td><td class="code"><pre><span class="line"><span class="function"><span class="keyword">function</span> <span class="title">genFun</span> (<span class="params">type</span>) </span>&#123;</span><br><span class="line">  <span class="keyword">return</span> <span class="function"><span class="keyword">function</span> (<span class="params">obj</span>) </span>&#123;</span><br><span class="line">    <span class="keyword">return</span> <span class="built_in">Object</span>.prototype.toString.call(obj) === type</span><br><span class="line">  &#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="keyword">var</span> isArray = genFun(<span class="string">'[object Array]'</span>)</span><br><span class="line"><span class="keyword">var</span> isObject = genFun(<span class="string">'[object Object]'</span>)</span><br><span class="line"></span><br><span class="line"><span class="built_in">console</span>.log(isArray([])) <span class="comment">// =&gt; true</span></span><br><span class="line"><span class="built_in">console</span>.log(isArray(&#123;&#125;)) <span class="comment">// =&gt; true</span></span><br></pre></td></tr></table></figure><h3 id="函数闭包"><a href="#函数闭包" class="headerlink" title="函数闭包"></a>函数闭包</h3><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br></pre></td><td class="code"><pre><span class="line"><span class="function"><span class="keyword">function</span> <span class="title">fn</span> (<span class="params"></span>) </span>&#123;</span><br><span class="line">  <span class="keyword">var</span> count = <span class="number">0</span></span><br><span class="line">  <span class="keyword">return</span> &#123;</span><br><span class="line">    getCount: <span class="function"><span class="keyword">function</span> (<span class="params"></span>) </span>&#123;</span><br><span class="line">      <span class="built_in">console</span>.log(count)</span><br><span class="line">    &#125;,</span><br><span class="line">    setCount: <span class="function"><span class="keyword">function</span> (<span class="params"></span>) </span>&#123;</span><br><span class="line">      count++</span><br><span class="line">    &#125;</span><br><span class="line">  &#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="keyword">var</span> fns = fn()</span><br><span class="line"></span><br><span class="line">fns.getCount() <span class="comment">// =&gt; 0</span></span><br><span class="line">fns.setCount()</span><br><span class="line">fns.getCount() <span class="comment">// =&gt; 1</span></span><br></pre></td></tr></table></figure><h4 id="作用域、作用域链、预解析"><a href="#作用域、作用域链、预解析" class="headerlink" title="作用域、作用域链、预解析"></a>作用域、作用域链、预解析</h4><ul><li>全局作用域</li><li>函数作用域</li><li><strong>没有块级作用域</strong></li></ul><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br></pre></td><td class="code"><pre><span class="line">&#123;</span><br><span class="line">  <span class="keyword">var</span> foo = <span class="string">'bar'</span></span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="built_in">console</span>.log(foo)</span><br><span class="line"></span><br><span class="line"><span class="keyword">if</span> (<span class="literal">true</span>) &#123;</span><br><span class="line">  <span class="keyword">var</span> a = <span class="number">123</span></span><br><span class="line">&#125;</span><br><span class="line"><span class="built_in">console</span>.log(a)</span><br></pre></td></tr></table></figure><p>作用域链示例代码：</p><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">var</span> a = <span class="number">10</span></span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">function</span> <span class="title">fn</span> (<span class="params"></span>) </span>&#123;</span><br><span class="line">  <span class="keyword">var</span> b = <span class="number">20</span></span><br><span class="line"></span><br><span class="line">  <span class="function"><span class="keyword">function</span> <span class="title">fn1</span> (<span class="params"></span>) </span>&#123;</span><br><span class="line">    <span class="keyword">var</span> c = <span class="number">30</span></span><br><span class="line">    <span class="built_in">console</span>.log(a + b + c)</span><br><span class="line">  &#125;</span><br><span class="line"></span><br><span class="line">  <span class="function"><span class="keyword">function</span> <span class="title">fn2</span> (<span class="params"></span>) </span>&#123;</span><br><span class="line">    <span class="keyword">var</span> d = <span class="number">40</span></span><br><span class="line">    <span class="built_in">console</span>.log(c + d)</span><br><span class="line">  &#125;</span><br><span class="line"></span><br><span class="line">  fn1()</span><br><span class="line">  fn2()</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><ul><li>内层作用域可以访问外层作用域，反之不行</li></ul><h4 id="什么是闭包"><a href="#什么是闭包" class="headerlink" title="什么是闭包"></a>什么是闭包</h4><p>闭包就是能够读取其他函数内部变量的函数，<br>由于在 Javascript 语言中，只有函数内部的子函数才能读取局部变量，<br>因此可以把闭包简单理解成 “定义在一个函数内部的函数”。<br>所以，在本质上，闭包就是将函数内部和函数外部连接起来的一座桥梁。</p><p>闭包的用途：</p><ul><li>可以在函数外部读取函数内部成员</li><li>让函数内成员始终存活在内存中</li></ul><h4 id="一些关于闭包的例子"><a href="#一些关于闭包的例子" class="headerlink" title="一些关于闭包的例子"></a>一些关于闭包的例子</h4><p>示例1：</p><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">var</span> arr = [<span class="number">10</span>, <span class="number">20</span>, <span class="number">30</span>]</span><br><span class="line"><span class="keyword">for</span>(<span class="keyword">var</span> i = <span class="number">0</span>; i &lt; arr.length; i++) &#123;</span><br><span class="line">  arr[i] = <span class="function"><span class="keyword">function</span> (<span class="params"></span>) </span>&#123;</span><br><span class="line">    <span class="built_in">console</span>.log(i)</span><br><span class="line">  &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>示例2：</p><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><span class="line"><span class="built_in">console</span>.log(<span class="number">111</span>)</span><br><span class="line"></span><br><span class="line"><span class="keyword">for</span>(<span class="keyword">var</span> i = <span class="number">0</span>; i &lt; <span class="number">3</span>; i++) &#123;</span><br><span class="line">  setTimeout(<span class="function"><span class="keyword">function</span> (<span class="params"></span>) </span>&#123;</span><br><span class="line">    <span class="built_in">console</span>.log(i)</span><br><span class="line">  &#125;, <span class="number">0</span>)</span><br><span class="line">&#125;</span><br><span class="line"><span class="built_in">console</span>.log(<span class="number">222</span>)</span><br></pre></td></tr></table></figure><p>示例3：投票</p><p>示例4：判断类型</p><p>示例5：沙箱模式</p><h4 id="闭包的思考题"><a href="#闭包的思考题" class="headerlink" title="闭包的思考题"></a>闭包的思考题</h4><p>思考题 1：</p><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">var</span> name = <span class="string">"The Window"</span>;</span><br><span class="line"><span class="keyword">var</span> object = &#123;</span><br><span class="line">  name: <span class="string">"My Object"</span>,</span><br><span class="line">  getNameFunc: <span class="function"><span class="keyword">function</span> (<span class="params"></span>) </span>&#123;</span><br><span class="line">    <span class="keyword">return</span> <span class="function"><span class="keyword">function</span> (<span class="params"></span>) </span>&#123;</span><br><span class="line">      <span class="keyword">return</span> <span class="keyword">this</span>.name;</span><br><span class="line">    &#125;;</span><br><span class="line">  &#125;</span><br><span class="line">&#125;;</span><br><span class="line"></span><br><span class="line"><span class="built_in">console</span>.log(object.getNameFunc()())</span><br></pre></td></tr></table></figure><p>思考题 2：</p><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">var</span> name = <span class="string">"The Window"</span>;　　</span><br><span class="line"><span class="keyword">var</span> object = &#123;　　　　</span><br><span class="line">  name: <span class="string">"My Object"</span>,</span><br><span class="line">  getNameFunc: <span class="function"><span class="keyword">function</span> (<span class="params"></span>) </span>&#123;</span><br><span class="line">    <span class="keyword">var</span> that = <span class="keyword">this</span>;</span><br><span class="line">    <span class="keyword">return</span> <span class="function"><span class="keyword">function</span> (<span class="params"></span>) </span>&#123;</span><br><span class="line">      <span class="keyword">return</span> that.name;</span><br><span class="line">    &#125;;</span><br><span class="line">  &#125;</span><br><span class="line">&#125;;</span><br><span class="line"><span class="built_in">console</span>.log(object.getNameFunc()())</span><br></pre></td></tr></table></figure><h4 id="小结-4"><a href="#小结-4" class="headerlink" title="小结"></a>小结</h4><h3 id="函数递归"><a href="#函数递归" class="headerlink" title="函数递归"></a>函数递归</h3><h4 id="递归执行模型"><a href="#递归执行模型" class="headerlink" title="递归执行模型"></a>递归执行模型</h4><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br></pre></td><td class="code"><pre><span class="line"><span class="function"><span class="keyword">function</span> <span class="title">fn1</span> (<span class="params"></span>) </span>&#123;</span><br><span class="line">  <span class="built_in">console</span>.log(<span class="number">111</span>)</span><br><span class="line">  fn2()</span><br><span class="line">  <span class="built_in">console</span>.log(<span class="string">'fn1'</span>)</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">function</span> <span class="title">fn2</span> (<span class="params"></span>) </span>&#123;</span><br><span class="line">  <span class="built_in">console</span>.log(<span class="number">222</span>)</span><br><span class="line">  fn3()</span><br><span class="line">  <span class="built_in">console</span>.log(<span class="string">'fn2'</span>)</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">function</span> <span class="title">fn3</span> (<span class="params"></span>) </span>&#123;</span><br><span class="line">  <span class="built_in">console</span>.log(<span class="number">333</span>)</span><br><span class="line">  fn4()</span><br><span class="line">  <span class="built_in">console</span>.log(<span class="string">'fn3'</span>)</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">function</span> <span class="title">fn4</span> (<span class="params"></span>) </span>&#123;</span><br><span class="line">  <span class="built_in">console</span>.log(<span class="number">444</span>)</span><br><span class="line">  <span class="built_in">console</span>.log(<span class="string">'fn4'</span>)</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line">fn1()</span><br></pre></td></tr></table></figure><h4 id="举个栗子：计算阶乘的递归函数"><a href="#举个栗子：计算阶乘的递归函数" class="headerlink" title="举个栗子：计算阶乘的递归函数"></a>举个栗子：计算阶乘的递归函数</h4><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><span class="line"><span class="function"><span class="keyword">function</span> <span class="title">factorial</span> (<span class="params">num</span>) </span>&#123;</span><br><span class="line">  <span class="keyword">if</span> (num &lt;= <span class="number">1</span>) &#123;</span><br><span class="line">    <span class="keyword">return</span> <span class="number">1</span></span><br><span class="line">  &#125; <span class="keyword">else</span> &#123;</span><br><span class="line">    <span class="keyword">return</span> num * factorial(num - <span class="number">1</span>)</span><br><span class="line">  &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h4 id="递归应用场景"><a href="#递归应用场景" class="headerlink" title="递归应用场景"></a>递归应用场景</h4><ul><li>深拷贝</li><li>菜单树</li><li>遍历 DOM 树</li></ul><hr><h2 id="正则表达式"><a href="#正则表达式" class="headerlink" title="正则表达式"></a>正则表达式</h2><ul><li>了解正则表达式基本语法</li><li>能够使用JavaScript的正则对象</li></ul><h3 id="正则表达式简介"><a href="#正则表达式简介" class="headerlink" title="正则表达式简介"></a>正则表达式简介</h3><h4 id="什么是正则表达式"><a href="#什么是正则表达式" class="headerlink" title="什么是正则表达式"></a>什么是正则表达式</h4><p>正则表达式：用于匹配规律规则的表达式，正则表达式最初是科学家对人类神经系统的工作原理的早期研究，现在在编程语言中有广泛的应用。正则表通常被用来检索、替换那些符合某个模式(规则)的文本。<br>正则表达式是对字符串操作的一种逻辑公式，就是用事先定义好的一些特定字符、及这些特定字符的组合，组成一个“规则字符串”，这个“规则字符串”用来表达对字符串的一种过滤逻辑。</p><h4 id="正则表达式的作用"><a href="#正则表达式的作用" class="headerlink" title="正则表达式的作用"></a>正则表达式的作用</h4><ol><li>给定的字符串是否符合正则表达式的过滤逻辑(匹配)</li><li>可以通过正则表达式，从字符串中获取我们想要的特定部分(提取)</li><li>强大的字符串替换能力(替换)</li></ol><h4 id="正则表达式的特点"><a href="#正则表达式的特点" class="headerlink" title="正则表达式的特点"></a>正则表达式的特点</h4><ol><li>灵活性、逻辑性和功能性非常的强</li><li>可以迅速地用极简单的方式达到字符串的复杂控制</li><li>对于刚接触的人来说，比较晦涩难懂</li></ol><h3 id="正则表达式的测试"><a href="#正则表达式的测试" class="headerlink" title="正则表达式的测试"></a>正则表达式的测试</h3><ul><li><a href="https://c.runoob.com/front-end/854" target="_blank" rel="noopener">在线测试正则</a></li><li>工具中使用正则表达式<ul><li>sublime/vscode/word</li><li>演示替换所有的数字</li></ul></li></ul><h3 id="正则表达式的组成"><a href="#正则表达式的组成" class="headerlink" title="正则表达式的组成"></a>正则表达式的组成</h3><ul><li>普通字符</li><li>特殊字符(元字符)：正则表达式中有特殊意义的字符</li></ul><p>示例演示：</p><ul><li><code>\d</code> 匹配数字</li><li><code>ab\d</code> 匹配 ab1、ab2</li></ul><h3 id="元字符串"><a href="#元字符串" class="headerlink" title="元字符串"></a>元字符串</h3><p>通过测试工具演示下面元字符的使用</p><h4 id="常用元字符串"><a href="#常用元字符串" class="headerlink" title="常用元字符串"></a>常用元字符串</h4><table><thead><tr><th>元字符</th><th>说明</th></tr></thead><tbody><tr><td>\d</td><td>匹配数字</td></tr><tr><td>\D</td><td>匹配任意非数字的字符</td></tr><tr><td>\w</td><td>匹配字母或数字或下划线</td></tr><tr><td>\W</td><td>匹配任意不是字母，数字，下划线</td></tr><tr><td>\s</td><td>匹配任意的空白符</td></tr><tr><td>\S</td><td>匹配任意不是空白符的字符</td></tr><tr><td>.</td><td>匹配除换行符以外的任意单个字符</td></tr><tr><td>^</td><td>表示匹配行首的文本(以谁开始)</td></tr><tr><td>$</td><td>表示匹配行尾的文本(以谁结束)</td></tr></tbody></table><h4 id="限定符"><a href="#限定符" class="headerlink" title="限定符"></a>限定符</h4><table><thead><tr><th>限定符</th><th>说明</th></tr></thead><tbody><tr><td>*</td><td>重复零次或更多次</td></tr><tr><td>+</td><td>重复一次或更多次</td></tr><tr><td>?</td><td>重复零次或一次</td></tr><tr><td>{n}</td><td>重复n次</td></tr><tr><td>{n,}</td><td>重复n次或更多次</td></tr><tr><td>{n,m}</td><td>重复n到m次</td></tr></tbody></table><h4 id="其它"><a href="#其它" class="headerlink" title="其它"></a>其它</h4><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><span class="line">[] 字符串用中括号括起来，表示匹配其中的任一字符，相当于或的意思</span><br><span class="line">[^]  匹配除中括号以内的内容</span><br><span class="line">\ 转义符</span><br><span class="line">| 或者，选择两者中的一个。注意|将左右两边分为两部分，而不管左右两边有多长多乱</span><br><span class="line">() 从两个直接量中选择一个，分组</span><br><span class="line">   eg：gr(a|e)y匹配gray和grey</span><br><span class="line">[\u4e00-\u9fa5]  匹配汉字</span><br></pre></td></tr></table></figure><h3 id="案例"><a href="#案例" class="headerlink" title="案例"></a>案例</h3><p>验证手机号：</p><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">^\d&#123;<span class="number">11</span>&#125;$</span><br></pre></td></tr></table></figure><p>验证邮编：</p><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">^\d&#123;<span class="number">6</span>&#125;$</span><br></pre></td></tr></table></figure><p>验证日期 2012-5-01</p><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">^\d&#123;<span class="number">4</span>&#125;-\d&#123;<span class="number">1</span>,<span class="number">2</span>&#125;-\d&#123;<span class="number">1</span>,<span class="number">2</span>&#125;$</span><br></pre></td></tr></table></figure><p>验证邮箱 <a href="mailto:xxx@itcast.cn" target="_blank" rel="noopener">xxx@itcast.cn</a>：</p><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">^\w+@\w+\.\w+$</span><br></pre></td></tr></table></figure><p>验证IP地址 192.168.1.10</p><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">^\d&#123;<span class="number">1</span>,<span class="number">3</span>&#125;\(.\d&#123;<span class="number">1</span>,<span class="number">3</span>&#125;)&#123;<span class="number">3</span>&#125;$</span><br></pre></td></tr></table></figure><h2 id="JavaScript-中使用正则表达式"><a href="#JavaScript-中使用正则表达式" class="headerlink" title="JavaScript 中使用正则表达式"></a>JavaScript 中使用正则表达式</h2><h3 id="创建正则对象"><a href="#创建正则对象" class="headerlink" title="创建正则对象"></a>创建正则对象</h3><p>方式1：</p><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">var</span> reg = <span class="keyword">new</span> Regex(<span class="string">'\d'</span>, <span class="string">'i'</span>);</span><br><span class="line"><span class="keyword">var</span> reg = <span class="keyword">new</span> Regex(<span class="string">'\d'</span>, <span class="string">'gi'</span>);</span><br></pre></td></tr></table></figure><p>方式2：</p><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">var</span> reg = <span class="regexp">/\d/i</span>;</span><br><span class="line"><span class="keyword">var</span> reg = <span class="regexp">/\d/gi</span>;</span><br></pre></td></tr></table></figure><h4 id="参数"><a href="#参数" class="headerlink" title="参数"></a>参数</h4><table><thead><tr><th>标志</th><th>说明</th></tr></thead><tbody><tr><td>i</td><td>忽略大小写</td></tr><tr><td>g</td><td>全局匹配</td></tr><tr><td>gi</td><td>全局匹配+忽略大小写</td></tr></tbody></table><h3 id="正则匹配"><a href="#正则匹配" class="headerlink" title="正则匹配"></a>正则匹配</h3><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">// 匹配日期</span></span><br><span class="line"><span class="keyword">var</span> dateStr = <span class="string">'2015-10-10'</span>;</span><br><span class="line"><span class="keyword">var</span> reg = <span class="regexp">/^\d&#123;4&#125;-\d&#123;1,2&#125;-\d&#123;1,2&#125;$/</span></span><br><span class="line"><span class="built_in">console</span>.log(reg.test(dateStr));</span><br></pre></td></tr></table></figure><p>###匹配正则表达式<br>//        console.log(/./.test(“除了回车换行以为的任意字符”));//true<br>//        console.log(/.*/.test(“0个到多个”));//true<br>//        console.log(/.+/.test(“1个到多个”));//true<br>//        console.log(/.?/.test(“哈哈”));//true<br>//        console.log(/[0-9]/.test(“9527”));//true<br>//        console.log(/[a-z]/.test(“what”));//true<br>//        console.log(/[A-Z]/.test(“Are”));//true<br>//        console.log(/[a-zA-Z]/.test(“干啥子”));//false<br>//        console.log(/[0-9a-zA-Z]/.test(“9ebg”));//true<br>//        console.log(/b|(ara)/.test(“abra”));//true<br>//        console.log(/[a-z]{2,3}/.test(“arfsf”));//true</p><pre><code>console.log(/\d/.test(&quot;998&quot;));//trueconsole.log(/\d*/.test(&quot;998&quot;));//trueconsole.log(/\d+/.test(&quot;998&quot;));//trueconsole.log(/\d{0,}/.test(&quot;998&quot;));//trueconsole.log(/\d{2,3}/.test(&quot;998&quot;));//trueconsole.log(/\D/.test(&quot;eat&quot;));//trueconsole.log(/\s/.test(&quot;  &quot;));//trueconsole.log(/\S/.test(&quot;嘎嘎&quot;));//trueconsole.log(/\w/.test(&quot;_&quot;));//trueconsole.log(/\W/.test(&quot;_&quot;));//true</code></pre><p>###正则表达式案例<br>1.验证密码强弱<br>2.验证邮箱：[0-9a-zA-Z_.-]+[@][0-9a-zA-Z._-]+([.][a-zA-Z]+){1,2}<br>3.验证中文名字[\u4e00-\u9fa5]</p><h3 id="正则提取"><a href="#正则提取" class="headerlink" title="正则提取"></a>正则提取</h3><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">// 1. 提取工资</span></span><br><span class="line"><span class="keyword">var</span> str = <span class="string">"张三：1000，李四：5000，王五：8000。"</span>;</span><br><span class="line"><span class="keyword">var</span> array = str.match(<span class="regexp">/\d+/g</span>);</span><br><span class="line"><span class="built_in">console</span>.log(array);</span><br><span class="line"></span><br><span class="line"><span class="comment">// 2. 提取email地址</span></span><br><span class="line"><span class="keyword">var</span> str = <span class="string">"123123@xx.com,fangfang@valuedopinions.cn 286669312@qq.com 2、emailenglish@emailenglish.englishtown.com 286669312@qq.com..."</span>;</span><br><span class="line"><span class="keyword">var</span> array = str.match(<span class="regexp">/\w+@\w+\.\w+(\.\w+)?/g</span>);</span><br><span class="line"><span class="built_in">console</span>.log(array);</span><br><span class="line"></span><br><span class="line"><span class="comment">// 3. 分组提取  </span></span><br><span class="line"><span class="comment">// 3. 提取日期中的年部分  2015-5-10</span></span><br><span class="line"><span class="keyword">var</span> dateStr = <span class="string">'2016-1-5'</span>;</span><br><span class="line"><span class="comment">// 正则表达式中的()作为分组来使用，获取分组匹配到的结果用Regex.$1 $2 $3....来获取</span></span><br><span class="line"><span class="keyword">var</span> reg = <span class="regexp">/(\d&#123;4&#125;)-\d&#123;1,2&#125;-\d&#123;1,2&#125;/</span>;</span><br><span class="line"><span class="keyword">if</span> (reg.test(dateStr)) &#123;</span><br><span class="line">  <span class="built_in">console</span>.log(<span class="built_in">RegExp</span>.$<span class="number">1</span>);</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="comment">// 4. 提取邮件中的每一部分</span></span><br><span class="line"><span class="keyword">var</span> reg = <span class="regexp">/(\w+)@(\w+)\.(\w+)(\.\w+)?/</span>;</span><br><span class="line"><span class="keyword">var</span> str = <span class="string">"123123@xx.com"</span>;</span><br><span class="line"><span class="keyword">if</span> (reg.test(str)) &#123;</span><br><span class="line">  <span class="built_in">console</span>.log(<span class="built_in">RegExp</span>.$<span class="number">1</span>);</span><br><span class="line">  <span class="built_in">console</span>.log(<span class="built_in">RegExp</span>.$<span class="number">2</span>);</span><br><span class="line">  <span class="built_in">console</span>.log(<span class="built_in">RegExp</span>.$<span class="number">3</span>);</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h3 id="正则替换"><a href="#正则替换" class="headerlink" title="正则替换"></a>正则替换</h3><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">// 1. 替换所有空白</span></span><br><span class="line"><span class="keyword">var</span> str = <span class="string">"   123AD  asadf   asadfasf  adf "</span>;</span><br><span class="line">str = str.replace(<span class="regexp">/\s/g</span>,<span class="string">"xx"</span>);</span><br><span class="line"><span class="built_in">console</span>.log(str);</span><br><span class="line"></span><br><span class="line"><span class="comment">// 2. 替换所有,|，</span></span><br><span class="line"><span class="keyword">var</span> str = <span class="string">"abc,efg,123，abc,123，a"</span>;</span><br><span class="line">str = str.replace(<span class="regexp">/,|，/g</span>, <span class="string">"."</span>);</span><br><span class="line"><span class="built_in">console</span>.log(str);</span><br></pre></td></tr></table></figure><h3 id="案例：表单验证"><a href="#案例：表单验证" class="headerlink" title="案例：表单验证"></a>案例：表单验证</h3><figure class="highlight html"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line">QQ号：<span class="tag">&lt;<span class="name">input</span> <span class="attr">type</span>=<span class="string">"text"</span> <span class="attr">id</span>=<span class="string">"txtQQ"</span>&gt;</span><span class="tag">&lt;<span class="name">span</span>&gt;</span><span class="tag">&lt;/<span class="name">span</span>&gt;</span><span class="tag">&lt;<span class="name">br</span>&gt;</span></span><br><span class="line">邮箱：<span class="tag">&lt;<span class="name">input</span> <span class="attr">type</span>=<span class="string">"text"</span> <span class="attr">id</span>=<span class="string">"txtEMail"</span>&gt;</span><span class="tag">&lt;<span class="name">span</span>&gt;</span><span class="tag">&lt;/<span class="name">span</span>&gt;</span><span class="tag">&lt;<span class="name">br</span>&gt;</span></span><br><span class="line">手机：<span class="tag">&lt;<span class="name">input</span> <span class="attr">type</span>=<span class="string">"text"</span> <span class="attr">id</span>=<span class="string">"txtPhone"</span>&gt;</span><span class="tag">&lt;<span class="name">span</span>&gt;</span><span class="tag">&lt;/<span class="name">span</span>&gt;</span><span class="tag">&lt;<span class="name">br</span>&gt;</span></span><br><span class="line">生日：<span class="tag">&lt;<span class="name">input</span> <span class="attr">type</span>=<span class="string">"text"</span> <span class="attr">id</span>=<span class="string">"txtBirthday"</span>&gt;</span><span class="tag">&lt;<span class="name">span</span>&gt;</span><span class="tag">&lt;/<span class="name">span</span>&gt;</span><span class="tag">&lt;<span class="name">br</span>&gt;</span></span><br><span class="line">姓名：<span class="tag">&lt;<span class="name">input</span> <span class="attr">type</span>=<span class="string">"text"</span> <span class="attr">id</span>=<span class="string">"txtName"</span>&gt;</span><span class="tag">&lt;<span class="name">span</span>&gt;</span><span class="tag">&lt;/<span class="name">span</span>&gt;</span><span class="tag">&lt;<span class="name">br</span>&gt;</span></span><br></pre></td></tr></table></figure><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">//获取文本框</span></span><br><span class="line"><span class="keyword">var</span> txtQQ = <span class="built_in">document</span>.getElementById(<span class="string">"txtQQ"</span>);</span><br><span class="line"><span class="keyword">var</span> txtEMail = <span class="built_in">document</span>.getElementById(<span class="string">"txtEMail"</span>);</span><br><span class="line"><span class="keyword">var</span> txtPhone = <span class="built_in">document</span>.getElementById(<span class="string">"txtPhone"</span>);</span><br><span class="line"><span class="keyword">var</span> txtBirthday = <span class="built_in">document</span>.getElementById(<span class="string">"txtBirthday"</span>);</span><br><span class="line"><span class="keyword">var</span> txtName = <span class="built_in">document</span>.getElementById(<span class="string">"txtName"</span>);</span><br><span class="line"></span><br><span class="line"><span class="comment">//</span></span><br><span class="line">txtQQ.onblur = <span class="function"><span class="keyword">function</span> (<span class="params"></span>) </span>&#123;</span><br><span class="line">  <span class="comment">//获取当前文本框对应的span</span></span><br><span class="line">  <span class="keyword">var</span> span = <span class="keyword">this</span>.nextElementSibling;</span><br><span class="line">  <span class="keyword">var</span> reg = <span class="regexp">/^\d&#123;5,12&#125;$/</span>;</span><br><span class="line">  <span class="comment">//判断验证是否成功</span></span><br><span class="line">  <span class="keyword">if</span>(!reg.test(<span class="keyword">this</span>.value) )&#123;</span><br><span class="line">    <span class="comment">//验证不成功</span></span><br><span class="line">    span.innerText = <span class="string">"请输入正确的QQ号"</span>;</span><br><span class="line">    span.style.color = <span class="string">"red"</span>;</span><br><span class="line">  &#125;<span class="keyword">else</span>&#123;</span><br><span class="line">    <span class="comment">//验证成功</span></span><br><span class="line">    span.innerText = <span class="string">""</span>;</span><br><span class="line">    span.style.color = <span class="string">""</span>;</span><br><span class="line">  &#125;</span><br><span class="line">&#125;;</span><br><span class="line"></span><br><span class="line"><span class="comment">//txtEMail</span></span><br><span class="line">txtEMail.onblur = <span class="function"><span class="keyword">function</span> (<span class="params"></span>) </span>&#123;</span><br><span class="line">  <span class="comment">//获取当前文本框对应的span</span></span><br><span class="line">  <span class="keyword">var</span> span = <span class="keyword">this</span>.nextElementSibling;</span><br><span class="line">  <span class="keyword">var</span> reg = <span class="regexp">/^\w+@\w+\.\w+(\.\w+)?$/</span>;</span><br><span class="line">  <span class="comment">//判断验证是否成功</span></span><br><span class="line">  <span class="keyword">if</span>(!reg.test(<span class="keyword">this</span>.value) )&#123;</span><br><span class="line">    <span class="comment">//验证不成功</span></span><br><span class="line">    span.innerText = <span class="string">"请输入正确的EMail地址"</span>;</span><br><span class="line">    span.style.color = <span class="string">"red"</span>;</span><br><span class="line">  &#125;<span class="keyword">else</span>&#123;</span><br><span class="line">    <span class="comment">//验证成功</span></span><br><span class="line">    span.innerText = <span class="string">""</span>;</span><br><span class="line">    span.style.color = <span class="string">""</span>;</span><br><span class="line">  &#125;</span><br><span class="line">&#125;;</span><br></pre></td></tr></table></figure><p>表单验证部分，封装成函数：</p><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">var</span> regBirthday = <span class="regexp">/^\d&#123;4&#125;-\d&#123;1,2&#125;-\d&#123;1,2&#125;$/</span>;</span><br><span class="line">addCheck(txtBirthday, regBirthday, <span class="string">"请输入正确的出生日期"</span>);</span><br><span class="line"><span class="comment">//给文本框添加验证</span></span><br><span class="line"><span class="function"><span class="keyword">function</span> <span class="title">addCheck</span>(<span class="params">element, reg, tip</span>) </span>&#123;</span><br><span class="line">  element.onblur = <span class="function"><span class="keyword">function</span> (<span class="params"></span>) </span>&#123;</span><br><span class="line">    <span class="comment">//获取当前文本框对应的span</span></span><br><span class="line">    <span class="keyword">var</span> span = <span class="keyword">this</span>.nextElementSibling;</span><br><span class="line">    <span class="comment">//判断验证是否成功</span></span><br><span class="line">    <span class="keyword">if</span>(!reg.test(<span class="keyword">this</span>.value) )&#123;</span><br><span class="line">      <span class="comment">//验证不成功</span></span><br><span class="line">      span.innerText = tip;</span><br><span class="line">      span.style.color = <span class="string">"red"</span>;</span><br><span class="line">    &#125;<span class="keyword">else</span>&#123;</span><br><span class="line">      <span class="comment">//验证成功</span></span><br><span class="line">      span.innerText = <span class="string">""</span>;</span><br><span class="line">      span.style.color = <span class="string">""</span>;</span><br><span class="line">    &#125;</span><br><span class="line">  &#125;;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>通过给元素增加自定义验证属性对表单进行验证：</p><figure class="highlight html"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">form</span> <span class="attr">id</span>=<span class="string">"frm"</span>&gt;</span></span><br><span class="line">  QQ号：<span class="tag">&lt;<span class="name">input</span> <span class="attr">type</span>=<span class="string">"text"</span> <span class="attr">name</span>=<span class="string">"txtQQ"</span> <span class="attr">data-rule</span>=<span class="string">"qq"</span>&gt;</span><span class="tag">&lt;<span class="name">span</span>&gt;</span><span class="tag">&lt;/<span class="name">span</span>&gt;</span><span class="tag">&lt;<span class="name">br</span>&gt;</span></span><br><span class="line">  邮箱：<span class="tag">&lt;<span class="name">input</span> <span class="attr">type</span>=<span class="string">"text"</span> <span class="attr">name</span>=<span class="string">"txtEMail"</span> <span class="attr">data-rule</span>=<span class="string">"email"</span>&gt;</span><span class="tag">&lt;<span class="name">span</span>&gt;</span><span class="tag">&lt;/<span class="name">span</span>&gt;</span><span class="tag">&lt;<span class="name">br</span>&gt;</span></span><br><span class="line">  手机：<span class="tag">&lt;<span class="name">input</span> <span class="attr">type</span>=<span class="string">"text"</span> <span class="attr">name</span>=<span class="string">"txtPhone"</span> <span class="attr">data-rule</span>=<span class="string">"phone"</span>&gt;</span><span class="tag">&lt;<span class="name">span</span>&gt;</span><span class="tag">&lt;/<span class="name">span</span>&gt;</span><span class="tag">&lt;<span class="name">br</span>&gt;</span></span><br><span class="line">  生日：<span class="tag">&lt;<span class="name">input</span> <span class="attr">type</span>=<span class="string">"text"</span> <span class="attr">name</span>=<span class="string">"txtBirthday"</span> <span class="attr">data-rule</span>=<span class="string">"date"</span>&gt;</span><span class="tag">&lt;<span class="name">span</span>&gt;</span><span class="tag">&lt;/<span class="name">span</span>&gt;</span><span class="tag">&lt;<span class="name">br</span>&gt;</span></span><br><span class="line">  姓名：<span class="tag">&lt;<span class="name">input</span> <span class="attr">type</span>=<span class="string">"text"</span> <span class="attr">name</span>=<span class="string">"txtName"</span> <span class="attr">data-rule</span>=<span class="string">"cn"</span>&gt;</span><span class="tag">&lt;<span class="name">span</span>&gt;</span><span class="tag">&lt;/<span class="name">span</span>&gt;</span><span class="tag">&lt;<span class="name">br</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">form</span>&gt;</span></span><br></pre></td></tr></table></figure><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br><span class="line">64</span><br><span class="line">65</span><br><span class="line">66</span><br><span class="line">67</span><br><span class="line">68</span><br><span class="line">69</span><br><span class="line">70</span><br><span class="line">71</span><br><span class="line">72</span><br><span class="line">73</span><br><span class="line">74</span><br><span class="line">75</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">// 所有的验证规则</span></span><br><span class="line"><span class="keyword">var</span> rules = [</span><br><span class="line">  &#123;</span><br><span class="line">    name: <span class="string">'qq'</span>,</span><br><span class="line">    reg: <span class="regexp">/^\d&#123;5,12&#125;$/</span>,</span><br><span class="line">    tip: <span class="string">"请输入正确的QQ"</span></span><br><span class="line">  &#125;,</span><br><span class="line">  &#123;</span><br><span class="line">    name: <span class="string">'email'</span>,</span><br><span class="line">    reg: <span class="regexp">/^\w+@\w+\.\w+(\.\w+)?$/</span>,</span><br><span class="line">    tip: <span class="string">"请输入正确的邮箱地址"</span></span><br><span class="line">  &#125;,</span><br><span class="line">  &#123;</span><br><span class="line">    name: <span class="string">'phone'</span>,</span><br><span class="line">    reg: <span class="regexp">/^\d&#123;11&#125;$/</span>,</span><br><span class="line">    tip: <span class="string">"请输入正确的手机号码"</span></span><br><span class="line">  &#125;,</span><br><span class="line">  &#123;</span><br><span class="line">    name: <span class="string">'date'</span>,</span><br><span class="line">    reg: <span class="regexp">/^\d&#123;4&#125;-\d&#123;1,2&#125;-\d&#123;1,2&#125;$/</span>,</span><br><span class="line">    tip: <span class="string">"请输入正确的出生日期"</span></span><br><span class="line">  &#125;,</span><br><span class="line">  &#123;</span><br><span class="line">    name: <span class="string">'cn'</span>,</span><br><span class="line">    reg: <span class="regexp">/^[\u4e00-\u9fa5]&#123;2,4&#125;$/</span>,</span><br><span class="line">    tip: <span class="string">"请输入正确的姓名"</span></span><br><span class="line">  &#125;];</span><br><span class="line"></span><br><span class="line">addCheck(<span class="string">'frm'</span>);</span><br><span class="line"></span><br><span class="line"></span><br><span class="line"><span class="comment">//给文本框添加验证</span></span><br><span class="line"><span class="function"><span class="keyword">function</span> <span class="title">addCheck</span>(<span class="params">formId</span>) </span>&#123;</span><br><span class="line">  <span class="keyword">var</span> i = <span class="number">0</span>,</span><br><span class="line">      len = <span class="number">0</span>,</span><br><span class="line">      frm =<span class="built_in">document</span>.getElementById(formId);</span><br><span class="line">  len = frm.children.length;</span><br><span class="line">  <span class="keyword">for</span> (; i &lt; len; i++) &#123;</span><br><span class="line">    <span class="keyword">var</span> element = frm.children[i];</span><br><span class="line">    <span class="comment">// 表单元素中有name属性的元素添加验证</span></span><br><span class="line">    <span class="keyword">if</span> (element.name) &#123;</span><br><span class="line">      element.onblur = <span class="function"><span class="keyword">function</span> (<span class="params"></span>) </span>&#123;</span><br><span class="line">        <span class="comment">// 使用dataset获取data-自定义属性的值</span></span><br><span class="line">        <span class="keyword">var</span> ruleName = <span class="keyword">this</span>.dataset.rule;</span><br><span class="line">        <span class="keyword">var</span> rule =getRuleByRuleName(rules, ruleName);</span><br><span class="line"></span><br><span class="line">        <span class="keyword">var</span> span = <span class="keyword">this</span>.nextElementSibling;</span><br><span class="line">        <span class="comment">//判断验证是否成功</span></span><br><span class="line">        <span class="keyword">if</span>(!rule.reg.test(<span class="keyword">this</span>.value) )&#123;</span><br><span class="line">          <span class="comment">//验证不成功</span></span><br><span class="line">          span.innerText = rule.tip;</span><br><span class="line">          span.style.color = <span class="string">"red"</span>;</span><br><span class="line">        &#125;<span class="keyword">else</span>&#123;</span><br><span class="line">          <span class="comment">//验证成功</span></span><br><span class="line">          span.innerText = <span class="string">""</span>;</span><br><span class="line">          span.style.color = <span class="string">""</span>;</span><br><span class="line">        &#125;</span><br><span class="line">      &#125;</span><br><span class="line">    &#125;</span><br><span class="line">  &#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="comment">// 根据规则的名称获取规则对象</span></span><br><span class="line"><span class="function"><span class="keyword">function</span> <span class="title">getRuleByRuleName</span>(<span class="params">rules, ruleName</span>) </span>&#123;</span><br><span class="line">  <span class="keyword">var</span> i = <span class="number">0</span>,</span><br><span class="line">      len = rules.length;</span><br><span class="line">  <span class="keyword">var</span> rule = <span class="literal">null</span>;</span><br><span class="line">  <span class="keyword">for</span> (; i &lt; len; i++) &#123;</span><br><span class="line">    <span class="keyword">if</span> (rules[i].name == ruleName) &#123;</span><br><span class="line">      rule = rules[i];</span><br><span class="line">      <span class="keyword">break</span>;</span><br><span class="line">    &#125;</span><br><span class="line">  &#125;</span><br><span class="line">  <span class="keyword">return</span> rule;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h2 id="补充"><a href="#补充" class="headerlink" title="补充"></a>补充</h2><h3 id="伪数组和数组"><a href="#伪数组和数组" class="headerlink" title="伪数组和数组"></a>伪数组和数组</h3><p>在JavaScript中，除了5种原始数据类型之外，其他所有的都是对象，包括函数（Function）。</p><h4 id="对象与数组的关系"><a href="#对象与数组的关系" class="headerlink" title="对象与数组的关系"></a>对象与数组的关系</h4><p>在说区别之前，需要先提到另外一个知识，就是 JavaScript 的原型继承。<br>所有 JavaScript 的内置构造函数都是继承自 <code>Object.prototype</code> 。<br>在这个前提下，可以理解为使用 <code>new Array()</code> 或 <code>[]</code> 创建出来的数组对象，都会拥有 <code>Object.prototype</code> 的属性值。</p><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">var</span> obj = &#123;&#125;;<span class="comment">// 拥有 Object.prototype 的属性值</span></span><br><span class="line"><span class="keyword">var</span> arr = [];</span><br><span class="line"><span class="comment">//使用数组直接量创建的数组，由于 Array.prototype 的属性继承自 Object.prototype，</span></span><br><span class="line"><span class="comment">//那么，它将同时拥有 Array.prototype 和 Object.prototype 的属性值</span></span><br></pre></td></tr></table></figure><p>可以得到对象和数组的第一个区别：对象没有数组 Array.prototype 的属性值。</p><h4 id="什么是数组"><a href="#什么是数组" class="headerlink" title="什么是数组"></a>什么是数组</h4><p>数组具有一个最基本特征：索引，这是对象所没有的，下面来看一段代码：</p><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">var</span> obj = &#123;&#125;;</span><br><span class="line"><span class="keyword">var</span> arr = [];</span><br><span class="line"> </span><br><span class="line">obj[<span class="number">2</span>] = <span class="string">'a'</span>;</span><br><span class="line">arr[<span class="number">2</span>] = <span class="string">'a'</span>;</span><br><span class="line"> </span><br><span class="line"><span class="built_in">console</span>.log(obj[<span class="number">2</span>]); <span class="comment">// =&gt; a</span></span><br><span class="line"><span class="built_in">console</span>.log(arr[<span class="number">2</span>]); <span class="comment">// =&gt; a</span></span><br><span class="line"><span class="built_in">console</span>.log(obj.length); <span class="comment">// =&gt; undefined</span></span><br><span class="line"><span class="built_in">console</span>.log(arr.length); <span class="comment">// =&gt; 3</span></span><br></pre></td></tr></table></figure><ul><li>obj[2]输出’a’，是因为对象就是普通的键值对存取数据</li><li>而arr[2]输出’a’ 则不同，数组是通过索引来存取数据，arr[2]之所以输出’a’，是因为数组arr索引2的位置已经存储了数据</li><li>obj.length并不具有数组的特性，并且obj没有保存属性length，那么自然就会输出undefined</li><li>而对于数组来说，length是数组的一个内置属性，数组会根据索引长度来更改length的值</li><li>为什么arr.length输出3，而不是1<ul><li>在给数组添加元素时，并没有按照连续的索引添加，所以导致数组的索引不连续，那么就导致索引长度大于元素个数</li></ul></li></ul><h4 id="什么是伪数组"><a href="#什么是伪数组" class="headerlink" title="什么是伪数组"></a>什么是伪数组</h4><ol><li>拥有 length 属性，其它属性（索引）为非负整数(对象中的索引会被当做字符串来处理，这里你可以当做是个非负整数串来理解)</li><li>不具有数组所具有的方法</li></ol><p>伪数组，就是像数组一样有 <code>length</code> 属性，也有 <code>0、1、2、3</code> 等属性的对象，看起来就像数组一样，但不是数组，比如:</p><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">var</span> fakeArray = &#123;</span><br><span class="line">  <span class="string">"0"</span>: <span class="string">"first"</span>,</span><br><span class="line">  <span class="string">"1"</span>: <span class="string">"second"</span>,</span><br><span class="line">  <span class="string">"2"</span>: <span class="string">"third"</span>,</span><br><span class="line">  length: <span class="number">3</span></span><br><span class="line">&#125;;</span><br><span class="line"> </span><br><span class="line"><span class="keyword">for</span> (<span class="keyword">var</span> i = <span class="number">0</span>; i &lt; fakeArray.length; i++) &#123;</span><br><span class="line">  <span class="built_in">console</span>.log(fakeArray[i]);</span><br><span class="line">&#125;</span><br><span class="line"> </span><br><span class="line"><span class="built_in">Array</span>.prototype.join.call(fakeArray,<span class="string">'+'</span>);</span><br></pre></td></tr></table></figure><p>常见的伪数组有：</p><ul><li>函数内部的 <code>arguments</code></li><li>DOM 对象列表（比如通过 <code>document.getElementsByTags</code> 得到的列表）</li><li>jQuery 对象（比如 <code>$(&quot;div&quot;)</code> ）</li></ul><p>伪数组是一个 Object，而真实的数组是一个 Array。</p><p>伪数组存在的意义，是可以让普通的对象也能正常使用数组的很多方法，比如：</p><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">var</span> arr = <span class="built_in">Array</span>.prototype.slice.call(<span class="built_in">arguments</span>);</span><br><span class="line"> </span><br><span class="line"><span class="built_in">Array</span>.prototype.forEach.call(<span class="built_in">arguments</span>, <span class="function"><span class="keyword">function</span>(<span class="params">v</span>) </span>&#123;</span><br><span class="line">  <span class="comment">// 循环arguments对象</span></span><br><span class="line">&#125;);</span><br><span class="line"></span><br><span class="line"><span class="comment">// push</span></span><br><span class="line"><span class="comment">// some</span></span><br><span class="line"><span class="comment">// every</span></span><br><span class="line"><span class="comment">// filter</span></span><br><span class="line"><span class="comment">// map</span></span><br><span class="line"><span class="comment">// ...</span></span><br></pre></td></tr></table></figure><p>以上在借用数组的原型方法的时候都可以通过数组直接量来简化使用：</p><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">var</span> obj = &#123;</span><br><span class="line">  <span class="number">0</span>: <span class="string">'a'</span>,</span><br><span class="line">  <span class="number">1</span>: <span class="string">'b'</span>,</span><br><span class="line">  <span class="number">2</span>: <span class="string">'c'</span>,</span><br><span class="line">  length: <span class="number">3</span></span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line">;[].push.call(obj, <span class="string">'d'</span>)</span><br><span class="line"></span><br><span class="line"><span class="built_in">console</span>.log([].slice.call(obj))</span><br><span class="line"></span><br><span class="line">;[].forEach.call(obj, <span class="function"><span class="keyword">function</span> (<span class="params">num, index</span>) </span>&#123;</span><br><span class="line">  <span class="built_in">console</span>.log(num)</span><br><span class="line">&#125;)</span><br></pre></td></tr></table></figure><h4 id="小结-5"><a href="#小结-5" class="headerlink" title="小结"></a>小结</h4><ul><li>对象没有数组 Array.prototype 的属性值，类型是 Object ，而数组类型是 Array</li><li>数组是基于索引的实现， length 会自动更新，而对象是键值对</li><li>使用对象可以创建伪数组，伪数组可以正常使用数组的大部分方法</li></ul><h3 id="JavaScript-垃圾回收机制"><a href="#JavaScript-垃圾回收机制" class="headerlink" title="JavaScript 垃圾回收机制"></a>JavaScript 垃圾回收机制</h3><h3 id="JavaScript-运行机制：Event-Loop"><a href="#JavaScript-运行机制：Event-Loop" class="headerlink" title="JavaScript 运行机制：Event Loop"></a>JavaScript 运行机制：Event Loop</h3><h3 id="Object"><a href="#Object" class="headerlink" title="Object"></a>Object</h3><h4 id="静态成员"><a href="#静态成员" class="headerlink" title="静态成员"></a>静态成员</h4><ul><li>Object.assign()</li><li>Object.create()</li><li>Object.keys()</li><li>Object.defineProperty()</li></ul><h4 id="实例成员"><a href="#实例成员" class="headerlink" title="实例成员"></a>实例成员</h4><ul><li>constructor</li><li>hasOwnProperty()</li><li>isPrototypeOf</li><li>propertyIsEnumerable()</li><li>toString()</li><li>valueOf()</li></ul><hr><h2 id="附录"><a href="#附录" class="headerlink" title="附录"></a>附录</h2><h3 id="A-代码规范"><a href="#A-代码规范" class="headerlink" title="A 代码规范"></a>A 代码规范</h3><h4 id="代码风格"><a href="#代码风格" class="headerlink" title="代码风格"></a>代码风格</h4><ul><li><a href="https://github.com/feross/standard" target="_blank" rel="noopener">JavaScript Standard Style </a></li><li><a href="https://github.com/airbnb/javascript" target="_blank" rel="noopener">Airbnb JavaScript Style Guide() {</a></li></ul><h4 id="校验工具"><a href="#校验工具" class="headerlink" title="校验工具"></a>校验工具</h4><ul><li><a href="https://github.com/douglascrockford/JSLint" target="_blank" rel="noopener">JSLint</a></li><li><a href="https://github.com/jshint/jshint" target="_blank" rel="noopener">JSHint</a></li><li><a href="https://github.com/eslint/eslint" target="_blank" rel="noopener">ESLint</a></li></ul><h3 id="B-Chrome-开发者工具"><a href="#B-Chrome-开发者工具" class="headerlink" title="B Chrome 开发者工具"></a>B Chrome 开发者工具</h3><h3 id="C-文档相关工具"><a href="#C-文档相关工具" class="headerlink" title="C 文档相关工具"></a>C 文档相关工具</h3><ul><li>电子文档制作工具: <a href="https://github.com/egoist/docute" target="_blank" rel="noopener">docute</a></li><li>流程图工具：<a href="http://logicnet.dk/DiagramDesigner/" target="_blank" rel="noopener">DiagramDesigner</a></li></ul>]]></content>
      
      
      <categories>
          
          <category> JavaScript </category>
          
      </categories>
      
      
        <tags>
            
            <tag> js笔记 </tag>
            
        </tags>
      
    </entry>
    
    <entry>
      <title>JD案例</title>
      <link href="/2017/08/07/jd/"/>
      <url>/2017/08/07/jd/</url>
      
        <content type="html"><![CDATA[<link rel="stylesheet" class="aplayer-secondary-style-marker" href="/assets/css/APlayer.min.css"><script src="/assets/js/APlayer.min.js" class="aplayer-secondary-script-marker"></script><hr><p>学习目标:</p><ul><li>掌握京东项目流程体系</li><li>掌握网站三大标签优化</li><li>掌握京东头部和尾部制作</li><li>掌握京导航栏制作</li><li>掌握京东焦点图制作</li><li>了解网站三大标签优化</li><li>理解BFC</li><li><p>了解渐进增强和优雅降级</p><p>typora-copy-images-to: media</p></li></ul><hr><hr><h1 id="京东项目-一"><a href="#京东项目-一" class="headerlink" title="京东项目(一)"></a>京东项目(一)</h1><h2 id="京东项目介绍"><a href="#京东项目介绍" class="headerlink" title="京东项目介绍"></a>京东项目介绍</h2><p>项目名称：京东网<br>项目描述：京东首页公共部分的头部和尾部制作，京东首页中间部分。</p><p><img src="/media/jd.png"></p><h2 id="项目背景"><a href="#项目背景" class="headerlink" title="项目背景"></a>项目背景</h2><p>现阶段电商类网站很流行，很多同学毕业之后会进入电商类企业工作，同时电商类网站需要的技术也是较为复杂的，这里用京东电商网站复习、总结、提高前面所学布局技术。其实，最主要的原因还是，为啥写京东？  因为刘强东，赚了我们的钱，抢了我们的女神， 我们也要学刘强东，赚别人的钱，抢别人..额，自己的女神。。。</p><h2 id="设计目标"><a href="#设计目标" class="headerlink" title="设计目标"></a>设计目标</h2><ul><li><p>保证浏览器 ie7及以上, 火狐, 360, safari，chrome等。谁让我再测ie6，就跟谁急。。</p></li><li><p>熟悉CSS+DIV布局，页面的搭建工作</p></li><li><p>了解常用电商类网站的布局模式</p></li><li><p>为后期京东移动端做铺垫</p></li></ul><h2 id="几点思考"><a href="#几点思考" class="headerlink" title="几点思考"></a>几点思考</h2><p>(1). 开发工具  sublime  、fireworks（ps）、各种浏览器(ie6.7 要测看心情)</p><p>(2). CSS Rest 类库,为跨浏览器兼容做准备(也可以直接运用jd网站的初始化)</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br></pre></td><td class="code"><pre><span class="line">normalize.css   只是一个很小的CSS文件，但它在默认的HTML元素样式上提供了跨浏览器的高度一致性。相比于传统的CSS reset，Normalize.css是一种现代的、为HTML5准备的优质替代方案。Normalize.css现在已经被用于Twitter Bootstrap、HTML5 Boilerplate、GOV.UK、Rdio、CSS Tricks 以及许许多多其他框架、工具和网站上。 你值得拥有。。 </span><br><span class="line"></span><br><span class="line">- 保护有用的浏览器默认样式而不是完全去掉它们</span><br><span class="line"></span><br><span class="line">- 一般化的样式：为大部分HTML元素提供</span><br><span class="line"></span><br><span class="line">- 修复浏览器自身的bug并保证各浏览器的一致性</span><br><span class="line"></span><br><span class="line">- 优化CSS可用性：用一些小技巧</span><br><span class="line"></span><br><span class="line">- 解释代码：用注释和详细的文档来</span><br></pre></td></tr></table></figure><p>(3). 技术栈</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">HTML5 结构 + CSS3  布局 (因为我们就会这些。。。嘻嘻)</span><br></pre></td></tr></table></figure><p>(4). 低版本浏览器 单独制作一个跳转页面 (都是孩子，也舍不得打，舍不得扔)</p><p><a href="https://h5.m.jd.com/dev/3dm8aE4LDBNMkDfcCaRxLnVQ7rqo/index.html" target="_blank" rel="noopener">https://h5.m.jd.com/dev/3dm8aE4LDBNMkDfcCaRxLnVQ7rqo/index.html</a></p><p><img src="/media/di.png" width="600"></p><h2 id="目录说明"><a href="#目录说明" class="headerlink" title="目录说明"></a>目录说明</h2><p>要实现结构和样式相分离的设计思想。 根目录下有这4个文件（目录）。</p><table><thead><tr><th>名称</th><th>说明</th></tr></thead><tbody><tr><td>css</td><td>用于存放CSS文件</td></tr><tr><td>images</td><td>用于存放图片</td></tr><tr><td>index</td><td>京东首页 HTML</td></tr><tr><td>js</td><td>用于后期存放javascript文件</td></tr></tbody></table><h2 id="运用知识点"><a href="#运用知识点" class="headerlink" title="运用知识点"></a>运用知识点</h2><h3 id="引入ico图标"><a href="#引入ico图标" class="headerlink" title="引入ico图标"></a>引入ico图标</h3><p><img src="/media/ico.png" style="border: 1px dashed #ccc; padding:3px;">  </p><pre><code>代码：  &lt;link rel=&quot;shortcut icon&quot; href=&quot;favicon.ico&quot;  type=&quot;image/x-icon&quot;/&gt;     </code></pre><p>注意： </p><ol><li><p>她(它)不是iconfont字体哦。</p></li><li><p>位置是放到 head 标签中间。</p></li><li><p>后面的type=”image/x-icon”  属性可以省略。（我相信你也愿意省略。）</p></li><li><p>为了兼容性，请将favicon.ico 这个图标放到根目录下。（我们就不要任性了，听话放位置，省很多麻烦。。你好，我也好）</p><p><img src="/media/icotu.png"></p></li></ol><h3 id="转换ico图标"><a href="#转换ico图标" class="headerlink" title="转换ico图标"></a>转换ico图标</h3><p>我们可以自己做的图片，转换为 ico图标，以便放到我们站点里面。 <a href="http://www.bitbug.net/" target="_blank" rel="noopener">http://www.bitbug.net/</a></p><h3 id="网站优化三大标签"><a href="#网站优化三大标签" class="headerlink" title="网站优化三大标签"></a>网站优化三大标签</h3><p>SEO是由英文Search Engine Optimization缩写而来， 中文意译为“搜索引擎优化”！SEO是指通过对网站进行站内优化、网站结构调整、网站内容建设、网站代码优化等)和站外优化，从而提高网站的关键词排名以及公司产品的曝光度。 简单的说就是，把产品做好，搜索引擎就会介绍客户来。  </p><p> 我们现在阶段主要进行站内优化。网站优化，我们应该要懂。。。</p><p><img src="/media/san.png"></p><h4 id="网页title-标题"><a href="#网页title-标题" class="headerlink" title="网页title 标题"></a>网页title 标题</h4><p>title具有不可替代性，是我们的内页第一个重要标签，是搜索引擎了解网页的入口，和对网页主题归属的最佳判断点。</p><p><img src="/media/title.png" width="500"></p><p>建议：</p><p>首页标题：网站名（产品名）- 网站的介绍    </p><p>例如：</p><p>京东(JD.COM)-综合网购首选-正品低价、品质保障、配送及时、轻松购物！</p><p>小米商城 - 小米5s、红米Note 4、小米MIX、小米笔记本官方网站</p><h4 id="Description-网站说明"><a href="#Description-网站说明" class="headerlink" title="Description  网站说明"></a>Description  网站说明</h4><p>对于关键词的作用明显降低，但由于很多搜索引擎，仍然大量采用网页的MATA标签中描述部分作为搜索结果的“内容摘要”。 就是简要说明我们网站的主要做什么的。<br>我们提倡，Description作为网站的总体业务和主题概括，多采用“我们是…”“我们提供…”“×××网作为…”“电话：010…”之类语句。</p><p>京东网：</p><pre><code>&lt;meta name=&quot;description&quot; content=&quot;京东JD.COM-专业的综合网上购物商城,销售家电、数码通讯、电脑、家居百货、服装服饰、母婴、图书、食品等数万个品牌优质商品.便捷、诚信的服务，为您提供愉悦的网上购物体验!&quot; /&gt;</code></pre><p>注意点：</p><ol><li>描述中出现关键词，与正文内容相关，这部分内容是给人看的，所以要写的很详细，让人感兴趣， 吸引用户点击。</li><li>同样遵循简短原则，字符数含空格在内不要超过 120  个汉字。</li><li>补充在 title  和 keywords  中未能充分表述的说明.</li><li>用英文逗号 关键词1,关键词2</li></ol><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">&lt;meta name=&quot;description&quot; content=&quot;小米商城直营小米公司旗下所有产品，囊括小米手机系列小米MIX、小米Note 2，红米手机系列红米Note 4、红米4，智能硬件，配件及小米生活周边，同时提供小米客户服务及售后支持。&quot; /&gt;</span><br></pre></td></tr></table></figure><h4 id="Keywords-关键字"><a href="#Keywords-关键字" class="headerlink" title="Keywords 关键字"></a>Keywords 关键字</h4><p>Keywords是页面关键词，是搜索引擎关注点之一。Keywords应该限制在6～8个关键词左右，电商类网站可以多 少许。</p><p>京东网：</p><pre><code>&lt;meta name=&quot;Keywords&quot; content=&quot;网上购物,网上商城,手机,笔记本,电脑,MP3,CD,VCD,DV,相机,数码,配件,手表,存储卡,京东&quot; /&gt;</code></pre><p>小米网：</p><pre><code>&lt;meta name=&quot;keywords&quot; content=&quot;小米,小米6,红米Note4,小米MIX,小米商城&quot; /&gt;</code></pre><h2 id="顶部（快捷菜单）所用知识点"><a href="#顶部（快捷菜单）所用知识点" class="headerlink" title="顶部（快捷菜单）所用知识点"></a>顶部（快捷菜单）所用知识点</h2><table><thead><tr><th>知识点</th><th>说明</th></tr></thead><tbody><tr><td>通栏的盒子</td><td>不用给宽度  默认为 100% &nbsp;但是加了浮动和定位的盒子需要 添加 100%</td></tr><tr><td>盒子居中对齐</td><td>margin: auto;  注意必须有宽度的块级元素，文字水平居中对齐是 text-align:center;</td></tr><tr><td>行高会继承</td><td>文字性质的，比如 颜色、文字大小、字体、行高等会继承父级元素</td></tr><tr><td>浮动元素、固定定位，绝对定位会模式转换</td><td>具有行内块特性，比如一行放多个，有高度和宽度，如果没有指定宽度，则会根据内容多少撑开。</td></tr></tbody></table><h2 id="logo-和搜索-header-区域所用知识点"><a href="#logo-和搜索-header-区域所用知识点" class="headerlink" title="logo 和搜索 header 区域所用知识点"></a>logo 和搜索 header 区域所用知识点</h2><h3 id="网页布局稳定性"><a href="#网页布局稳定性" class="headerlink" title="网页布局稳定性"></a>网页布局稳定性</h3><p><img src="/media/x.png"></p><h3 id="宽度剩余法："><a href="#宽度剩余法：" class="headerlink" title="宽度剩余法："></a>宽度剩余法：</h3><p><img src="/media/w.png"></p><table><thead><tr><th>知识点</th><th>说明</th></tr></thead><tbody><tr><td>浮动元素特性</td><td>1. 浮动可以让多个元素同一行显示 2. 浮动的元素是顶部对齐</td></tr><tr><td>logo优化</td><td>text-indent: -20000px; 隐藏文字， 背景图片</td></tr><tr><td>清除浮动</td><td>清除浮动的目的就是为了解决父亲高度为0的问题</td></tr><tr><td>鼠标样式</td><td>cursor: pointer;           小手      cursor: move;            四角箭头     cursor: text;  插入光标     cursor: default;  小白</td></tr><tr><td>不允许换行</td><td>white-space: nowrap;</td></tr></tbody></table><h2 id="nav导航栏所用知识点"><a href="#nav导航栏所用知识点" class="headerlink" title="nav导航栏所用知识点"></a>nav导航栏所用知识点</h2><table><thead><tr><th>名称</th><th>说明</th></tr></thead><tbody><tr><td>边框底侧</td><td>border-bottom: 2px solid #ccc;</td></tr><tr><td>定位重点</td><td>绝对定位不占位置  相对定位占有位置</td></tr><tr><td>标签语义化dl</td><td>dl也是块级元素 dt 是 定义标题  dd 是定义描述，dd是围绕这dt来描述的，也就是说，dd算是dt 的解释说明详细分解。</td></tr><tr><td>标题标签h</td><td>尽量少用h1，可以多用h2和h3等标签</td></tr></tbody></table><h2 id="页面底部所用知识点"><a href="#页面底部所用知识点" class="headerlink" title="页面底部所用知识点"></a>页面底部所用知识点</h2><table><thead><tr><th>名称</th><th>说明</th></tr></thead><tbody><tr><td>绝对定位的盒子居中对齐</td><td>盒子 left 50%  然后通过 margin 负值自己的宽度一半（固定定位也是如此）</td></tr></tbody></table><h3 id="固定定位的盒子靠近版心右侧对齐"><a href="#固定定位的盒子靠近版心右侧对齐" class="headerlink" title="固定定位的盒子靠近版心右侧对齐"></a>固定定位的盒子靠近版心右侧对齐</h3><p>跟绝对定位的盒子居中对齐原理差不多。</p><p>left 50%   然后 margin-left  版心宽度一半。</p><p><img src="/media/guding.png" width="500"></p><p>学习目标:</p><ul><li>掌握京东中间部分制作</li><li>理解BFC使用</li><li>了解优雅降级和渐进增强</li><li><p>了解CSS压缩和验证工具</p><p>typora-copy-images-to: /media</p></li></ul><hr><h1 id="京东项目-二"><a href="#京东项目-二" class="headerlink" title="京东项目(二)"></a>京东项目(二)</h1><h2 id="nav导航栏所用知识点-1"><a href="#nav导航栏所用知识点-1" class="headerlink" title="nav导航栏所用知识点"></a>nav导航栏所用知识点</h2><table><thead><tr><th>名称</th><th>说明</th></tr></thead><tbody><tr><td>边框底侧</td><td>border-bottom: 2px solid #ccc;</td></tr><tr><td>定位重点</td><td>绝对定位不占位置  相对定位占有位置</td></tr><tr><td>标签语义化dl</td><td>dl也是块级元素 dt 是 定义标题  dd 是定义描述，dd是围绕这dt来描述的，也就是说，dd算是dt 的解释说明详细分解。</td></tr><tr><td>标题标签h</td><td>尽量少用h1，可以多用h2和h3等标签</td></tr></tbody></table><h3 id="固定定位的盒子靠近版心右侧对齐-1"><a href="#固定定位的盒子靠近版心右侧对齐-1" class="headerlink" title="固定定位的盒子靠近版心右侧对齐"></a>固定定位的盒子靠近版心右侧对齐</h3><p>跟绝对定位的盒子居中对齐原理差不多。</p><p>left 50%   然后 margin-left  版心宽度一半。</p><p><img src="/media/guding.png" width="500"></p><h2 id="焦点图部分所用知识点"><a href="#焦点图部分所用知识点" class="headerlink" title="焦点图部分所用知识点"></a>焦点图部分所用知识点</h2><table><thead><tr><th>名称</th><th>说明</th></tr></thead><tbody><tr><td>圆角矩形</td><td>border-radius: 左上角 右上角 右下角  左下角。</td></tr></tbody></table><p>负值自己的宽度一半（固定定位也是如此）</p><h2 id="背景半透明"><a href="#背景半透明" class="headerlink" title="背景半透明"></a>背景半透明</h2><p>1.强烈推荐：  background: rgba(r,g,b,alpha);</p><p>​     r,g,b 是红绿蓝的颜色，  alpha 是透明度的意思，取值范围是 0~1 之间。</p><p>2.了解ie低版本浏览器 半透明</p><p>filter:Alpha(opacity=50) ；   // opacity值为0 到 100</p><p>但是 此属性是盒子半透明，不是背景半透明哦，因为里面的内容也一起半透明了</p><p>因此，低版本的 ie6.7浏览器，我们不需要透明了，直接采用优雅降级的做法。</p><p>background: gary;</p><p>background: rgba(0,0,0,.2);</p><p>写上两句 背景， 低版本ie只执行gray， 其他浏览器执行 半透明下面这一句。</p><h2 id="BFC-块级格式化上下文"><a href="#BFC-块级格式化上下文" class="headerlink" title="BFC(块级格式化上下文)"></a>BFC(块级格式化上下文)</h2><p>BFC(Block formatting context)</p><p>直译为”块级格式化上下文”。</p><h3 id="元素的显示模式"><a href="#元素的显示模式" class="headerlink" title="元素的显示模式"></a>元素的显示模式</h3><p>我们前面讲过 元素的显示模式 display。 </p><p>分为 块级元素   行内元素  行内块元素 ，其实，它还有很多其他显示模式。</p><p><img src="/media/dis.png" style="border: 1px dashed #ccc; padding: 5px;"></p><h3 id="那些元素会具有BFC的条件"><a href="#那些元素会具有BFC的条件" class="headerlink" title="那些元素会具有BFC的条件"></a>那些元素会具有BFC的条件</h3><p>不是所有的元素模式都能产生BFC，w3c 规范： </p><p>display 属性为 block, list-item, table 的元素，会产生BFC.</p><p>大家有么有发现这个三个都是用来布局最为合理的元素，因为他们就是用来可视化布局。</p><p>注意其他的，display属性，比如 line 等等，他们创建的是 IFC ，我们暂且不研究。</p><p>这个BFC 有着具体的布局特性： </p><p><img src="/media/box.gif"></p><p>有宽度和高度 ， 有 外边距margin  有内边距padding 有边框 border。</p><p>就好比，你有了练习武术的体格了。 有潜力，有资质。</p><p><img src="/media/gu.jpeg" width="400"></p><h3 id="什么情况下可以让元素产生BFC"><a href="#什么情况下可以让元素产生BFC" class="headerlink" title="什么情况下可以让元素产生BFC"></a>什么情况下可以让元素产生BFC</h3><p>以上盒子具有BFC条件了，就是说有资质了，但是怎样触发才会产生BFC，从而创造这个封闭的环境呢？ </p><p>在好比，你光有资质还不行，你需要一定额外效果才能出发的武学潜力，要么你掉到悬崖下面，捡到了一本九阴真经，要么你学习葵花宝典，欲练此功必先….</p><p><img src="/media/kuihua.png"><br>同样，要给这些元素添加如下属性就可以触发BFC。</p><p>-float属性不为none</p><p>-position为absolute或fixed</p><p>-display为inline-block, table-cell, table-caption, flex, inline-flex</p><p>-overflow不为visible。</p><h3 id="BFC元素所具有的特性"><a href="#BFC元素所具有的特性" class="headerlink" title="BFC元素所具有的特性"></a>BFC元素所具有的特性</h3><p>BFC布局规则特性：</p><p>1.在BFC中，盒子从顶端开始垂直地一个接一个地排列.</p><p>2.盒子垂直方向的距离由margin决定。属于同一个BFC的两个相邻盒子的margin会发生重叠</p><p>3.在BFC中，每一个盒子的左外边缘（margin-left）会触碰到容器的左边缘(border-left)（对于从右到左的格式来说，则触碰到右边缘）。</p><ol><li>BFC的区域不会与浮动盒子产生交集，而是紧贴浮动边缘。</li><li>计算BFC的高度时，自然也会检测浮动或者定位的盒子高度。</li></ol><p>它是一个独立的渲染区域，只有Block-level box参与， 它规定了内部的Block-level Box如何布局，并且与这个区域外部毫不相干。</p><p>白话文： 孩子在家里愿意怎么折腾都行，但是出了家门口，你就的乖乖的，不能影响外面的任何人。</p><p><img src="/media/xiong.jpeg" width="400"></p><h3 id="BFC的主要用途"><a href="#BFC的主要用途" class="headerlink" title="BFC的主要用途"></a>BFC的主要用途</h3><p>BFC能用来做什么？</p><p>(1) 清除元素内部浮动</p><p>只要把父元素设为BFC就可以清理子元素的浮动了，最常见的用法就是在父元素上设置overflow: hidden样式，对于IE6加上zoom:1就可以了。</p><p>主要用到 </p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">计算BFC的高度时，自然也会检测浮动或者定位的盒子高度。</span><br></pre></td></tr></table></figure><p><img src="/media/fu.jpg"><br>(2) 解决外边距合并问题</p><p>外边距合并的问题。</p><p>主要用到 </p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">盒子垂直方向的距离由margin决定。属于同一个BFC的两个相邻盒子的margin会发生重叠</span><br></pre></td></tr></table></figure><p>属于同一个BFC的两个相邻盒子的margin会发生重叠，那么我们创建不属于同一个BFC，就不会发生margin重叠了。</p><p><img src="/media/ma.png"></p><p>(3) 制作右侧自适应的盒子问题</p><p>主要用到 </p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">普通流体元素BFC后，为了和浮动元素不产生任何交集，顺着浮动边缘形成自己的封闭上下文</span><br></pre></td></tr></table></figure><p><img src="/media/you.png"></p><h3 id="BFC-总结"><a href="#BFC-总结" class="headerlink" title="BFC 总结"></a>BFC 总结</h3><p>BFC就是页面上的一个隔离的独立容器，容器里面的子元素不会影响到外面的元素。反之也如此。包括浮动，和外边距合并等等，因此，有了这个特性，我们布局的时候就不会出现意外情况了。</p><h2 id="优雅降级和渐进增强"><a href="#优雅降级和渐进增强" class="headerlink" title="优雅降级和渐进增强"></a>优雅降级和渐进增强</h2><p>什么是渐进增强（progressive enhancement）、优雅降级（graceful degradation）呢？</p><p>渐进增强 progressive enhancement：</p><p>针对低版本浏览器进行构建页面，保证最基本的功能，然后再针对高级浏览器进行效果、交互等改进和追加功能达到更好的用户体验。</p><p> 类似 爬山，由低出往高处爬</p><p>  <img src="/media/pa.png" width="400"></p><p>  <b>优雅降级 graceful degradation：</b></p><p>一开始就构建完整的功能，然后再针对低版本浏览器进行兼容。</p><p>类似蹦极，由高处往低处下落</p><p><img src="/media/xia.jpg"></p><p>　　区别：渐进增强是向上兼容，优雅降级是向下兼容。</p><p>个人建议： 现在互联网发展很快， 连微软公司都抛弃了ie浏览器，转而支持 edge这样的高版本浏览器，我们很多情况下没有必要再时刻想着低版本浏览器了，而是一开始就构建完整的效果，根据实际情况，修补低版本浏览器问题。</p><h2 id="浏览器前缀"><a href="#浏览器前缀" class="headerlink" title="浏览器前缀"></a>浏览器前缀</h2><table><thead><tr><th>浏览器前缀</th><th>浏览器</th></tr></thead><tbody><tr><td>-webkit-</td><td>Google Chrome, Safari, Android Browser</td></tr><tr><td>-moz-</td><td>Firefox</td></tr><tr><td>-o-</td><td>Opera</td></tr><tr><td>-ms-</td><td>Internet Explorer, Edge</td></tr><tr><td>-khtml-</td><td>Konqueror</td></tr></tbody></table><p>后面我们会有 常用的解决H5和C3 的兼容解决文件， 我们这里暂且不涉及。</p><h2 id="背景渐变"><a href="#背景渐变" class="headerlink" title="背景渐变"></a>背景渐变</h2><p>在线性渐变过程中，颜色沿着一条直线过渡：从左侧到右侧、从右侧到左侧、从顶部到底部、从底部到顶部或着沿任何任意轴。如果你曾使用过制作图件，比如说Photoshop，你对线性渐变并不会陌生。</p><p>兼容性问题很严重，我们这里之讲解线性渐变</p><p>语法格式： </p><figure class="highlight css"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line"><span class="selector-tag">background</span><span class="selector-pseudo">:-webkit-linear-gradient(</span>渐变的起始位置， 起始颜色， 结束颜色)；</span><br></pre></td></tr></table></figure><figure class="highlight css"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line"><span class="selector-tag">background</span><span class="selector-pseudo">:-webkit-linear-gradient(</span>渐变的起始位置， 颜色 位置， 颜色位置....)；</span><br></pre></td></tr></table></figure><h2 id="CSS-W3C-统一验证工具"><a href="#CSS-W3C-统一验证工具" class="headerlink" title="CSS W3C 统一验证工具"></a>CSS W3C 统一验证工具</h2><p>CssStats 是一个在线的 CSS 代码分析工具</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">网址是：  http://www.cssstats.com/</span><br></pre></td></tr></table></figure><p>如果你想要更全面的，这个神奇，你值得拥有：</p><p>W3C 统一验证工具：    <a href="http://validator.w3.org/unicorn/" target="_blank" rel="noopener">http://validator.w3.org/unicorn/</a>  ☆☆☆☆☆</p><p>因为它可以检测本地文件哦！！</p><h2 id="CSS-压缩"><a href="#CSS-压缩" class="headerlink" title="CSS 压缩"></a>CSS 压缩</h2><p>通过上面的检测没有错误，为了提高加载速度和节约空间（相对来说，css量很少的情况下，几乎没啥区别），可以通过css压缩工具把css进行压缩。</p><p> w3c css压缩   <a href="http://tool.chinaz.com/Tools/CssFormat.aspx" target="_blank" rel="noopener">http://tool.chinaz.com/Tools/CssFormat.aspx</a>   网速比较慢</p><p> 还可以去站长之家进行快速压缩。</p><p> <a href="http://tool.chinaz.com/Tools/CssFormat.aspx" target="_blank" rel="noopener">http://tool.chinaz.com/Tools/CssFormat.aspx</a>  </p><h2 id="旋转轮播图"><a href="#旋转轮播图" class="headerlink" title="旋转轮播图"></a>旋转轮播图</h2><p><img src="/media/rotate.png"></p><p>这个效果我们需要用到  透视  过渡还有 子元素  preserve-3d</p><h3 id="transform-style"><a href="#transform-style" class="headerlink" title="transform-style"></a>transform-style</h3><p><code>transform-style</code>属性是3D空间一个重要属性，指定嵌套元素如何在3D空间中呈现。他主要有两个属性值：<code>flat</code>和<code>preserve-3d</code>。</p><p>其中<code>flat</code>值为默认值，表示所有子元素在2D平面呈现。<code>preserve-3d</code>表示所有子元素在3D空间中呈现。</p><figure class="highlight css"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br></pre></td><td class="code"><pre><span class="line"><span class="selector-tag">body</span> &#123;</span><br><span class="line">       <span class="attribute">perspective</span>: <span class="number">1000px</span>;</span><br><span class="line">       &#125;</span><br><span class="line">true<span class="selector-tag">section</span> &#123;</span><br><span class="line">truetrue<span class="attribute">width</span>: <span class="number">300px</span>;</span><br><span class="line">truetrue<span class="attribute">height</span>: <span class="number">200px</span>;</span><br><span class="line">truetrue<span class="attribute">margin</span>: <span class="number">100px</span> auto;</span><br><span class="line">truetrue<span class="attribute">background</span>: <span class="built_in">url</span>(images/img-1.jpg) no-repeat;</span><br><span class="line">truetrue<span class="attribute">background-size</span>: cover;</span><br><span class="line">truetrue<span class="attribute">position</span>: relative;</span><br><span class="line">truetrue<span class="attribute">transform-style</span>: preserve-<span class="number">3</span>d;  <span class="comment">/* 让父盒子里面的子盒子以3d效果显示 */</span></span><br><span class="line">truetrue<span class="attribute">transition</span>:  <span class="number">5s</span> linear;  <span class="comment">/* 匀速  all 是可以省略的， 省略默认的all*/</span></span><br><span class="line">true&#125;</span><br><span class="line">true<span class="selector-tag">section</span><span class="selector-pseudo">:hover</span> &#123;</span><br><span class="line">truetrue<span class="attribute">transform</span>: <span class="built_in">rotateY</span>(360deg);</span><br><span class="line">true&#125;</span><br><span class="line">true<span class="selector-tag">section</span> <span class="selector-tag">div</span> &#123;</span><br><span class="line">truetrue<span class="attribute">width</span>: <span class="number">100%</span>;</span><br><span class="line">truetrue<span class="attribute">height</span>: <span class="number">100%</span>;</span><br><span class="line">truetrue<span class="attribute">background</span>: <span class="built_in">url</span>(images/dog.gif) no-repeat;</span><br><span class="line">truetrue<span class="attribute">background-size</span>: cover;</span><br><span class="line">truetrue<span class="attribute">position</span>: absolute;</span><br><span class="line">truetrue<span class="attribute">top</span>: <span class="number">0</span>;</span><br><span class="line">truetrue<span class="attribute">left</span>: <span class="number">0</span>;</span><br><span class="line">true&#125;</span><br><span class="line">true<span class="selector-tag">section</span> <span class="selector-tag">div</span><span class="selector-pseudo">:nth-child(1)</span> &#123;</span><br><span class="line">truetrue<span class="attribute">transform</span>: <span class="built_in">rotateY</span>(0deg)  <span class="built_in">translateZ</span>(400px);</span><br><span class="line">true&#125;</span><br><span class="line">true<span class="selector-tag">section</span> <span class="selector-tag">div</span><span class="selector-pseudo">:nth-child(2)</span> &#123;</span><br><span class="line">truetrue<span class="attribute">transform</span>: <span class="built_in">rotateY</span>(60deg)  <span class="built_in">translateZ</span>(400px);</span><br><span class="line">true&#125;</span><br><span class="line">true<span class="selector-tag">section</span> <span class="selector-tag">div</span><span class="selector-pseudo">:nth-child(3)</span> &#123;</span><br><span class="line">truetrue<span class="attribute">transform</span>: <span class="built_in">rotateY</span>(120deg)  <span class="built_in">translateZ</span>(400px);</span><br><span class="line">true&#125;</span><br><span class="line">true<span class="selector-tag">section</span> <span class="selector-tag">div</span><span class="selector-pseudo">:nth-child(4)</span> &#123;</span><br><span class="line">truetrue<span class="attribute">transform</span>: <span class="built_in">rotateY</span>(180deg)  <span class="built_in">translateZ</span>(400px);</span><br><span class="line">true&#125;</span><br><span class="line">true<span class="selector-tag">section</span> <span class="selector-tag">div</span><span class="selector-pseudo">:nth-child(5)</span> &#123;</span><br><span class="line">truetrue<span class="attribute">transform</span>: <span class="built_in">rotateY</span>(240deg)  <span class="built_in">translateZ</span>(400px);</span><br><span class="line">true&#125;</span><br><span class="line">true<span class="selector-tag">section</span> <span class="selector-tag">div</span><span class="selector-pseudo">:nth-child(6)</span> &#123;</span><br><span class="line">truetrue<span class="attribute">transform</span>: <span class="built_in">rotateY</span>(300deg)  <span class="built_in">translateZ</span>(400px);</span><br><span class="line">true&#125;</span><br></pre></td></tr></table></figure>]]></content>
      
      
      <categories>
          
          <category> Css </category>
          
      </categories>
      
      
        <tags>
            
            <tag> Css笔记/案例 </tag>
            
        </tags>
      
    </entry>
    
    <entry>
      <title>Css1</title>
      <link href="/2017/08/07/CSS(1)/"/>
      <url>/2017/08/07/CSS(1)/</url>
      
        <content type="html"><![CDATA[<link rel="stylesheet" class="aplayer-secondary-style-marker" href="/assets/css/APlayer.min.css"><script src="/assets/js/APlayer.min.js" class="aplayer-secondary-script-marker"></script><hr><h2 id="课程目标"><a href="#课程目标" class="headerlink" title="课程目标:"></a>课程目标:</h2><blockquote><ol><li>学会使用CSS选择器</li><li>熟记CSS样式和外观属性</li><li>熟练掌握CSS各种选择器</li><li>熟练掌握CSS各种选择器</li><li>熟练掌握CSS三种显示模式</li><li>熟练掌握CSS背景属性</li><li>熟练掌握CSS三大特性</li><li>熟练掌握CSS盒子模型</li><li>熟练掌握CSS浮动<br>10.熟练掌握CSS定位<br>11.熟练掌握CSS高级技巧强化CSS</li></ol></blockquote><h2 id="typora-copy-images-to-media"><a href="#typora-copy-images-to-media" class="headerlink" title="typora-copy-images-to: media"></a>typora-copy-images-to: media</h2><h1 id="CSS的发展历程"><a href="#CSS的发展历程" class="headerlink" title="CSS的发展历程"></a>CSS的发展历程</h1><p>从HTML被发明开始，样式就以各种形式存在。不同的浏览器结合它们各自的样式语言为用户提供页面效果的控制。最初的HTML只包含很少的显示属性。<br>随着HTML的成长，为了满足页面设计者的要求，HTML添加了很多显示功能。但是随着这些功能的增加，HTML变的越来越杂乱，而且HTML页面也越来越臃肿。于是CSS便诞生了。</p><h1 id="CSS-网页的美容师"><a href="#CSS-网页的美容师" class="headerlink" title="CSS 网页的美容师"></a>CSS 网页的美容师</h1><p>CSS的出现，拯救了混乱的HTML，当让更加拯救了我们web开发者。 让我们的网页更加丰富多彩。   </p><p>CSS的最大贡献就是：  让 HTML 从样式中解脱苦海，  实现了 HTML 专注去做 结构呈现。 而样式交给 CSS 后，你完全可以放心的早点洗洗睡了！</p><p><img src="/media/x.jpg" width="250"></p><p>而且。。。。。 CSS 做的很出色，如果JavaScript是网页的魔法师，那么CSS它是我们网页的美容师，不信，你看:</p><p><img src="/media/baby.jpeg"></p><p>ps:  你跟Angelababy只差了一个妆容的距离</p><p>来个更直观的认识吧： </p><p><img src="/media/db.png"></p><p>有人说， 没有不漂亮的女人，只有不会打扮的女人。</p><p>我想说， 没有不好看的网页，只有不会CSS的前端。</p><p>网页添加 CSS和不添加CSS 的对比：</p><p>带有CSS的页面</p><p><img src="/media/Cc.png"></p><p>没有CSS的页面</p><p><img src="/media/fff.png"></p><h1 id="CSS初识"><a href="#CSS初识" class="headerlink" title="CSS初识"></a>CSS初识</h1><p>CSS(Cascading Style Sheets)</p><p>CSS通常称为CSS样式表或层叠样式表（级联样式表），主要用于设置HTML页面中的文本内容（字体、大小、对齐方式等）、图片的外形（宽高、边框样式、边距等）以及版面的布局等外观显示样式。</p><p>CSS以HTML为基础，提供了丰富的功能，如字体、颜色、背景的控制及整体排版等，而且还可以针对不同的浏览器设置不同的样式。</p><h1 id="CSS样式规则"><a href="#CSS样式规则" class="headerlink" title="CSS样式规则"></a>CSS样式规则</h1><p>使用HTML时，需要遵从一定的规范。CSS亦如此，要想熟练地使用CSS对网页进行修饰，首先需要了解CSS样式规则，具体格式如下：                                          </p><p><img src="/media/gz.png"></p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><span class="line">在上面的样式规则中:</span><br><span class="line"></span><br><span class="line">1.选择器用于指定CSS样式作用的HTML对象，花括号内是对该对象设置的具体样式。</span><br><span class="line">2.属性和属性值以“键值对”的形式出现。</span><br><span class="line">3.属性是对指定的对象设置的样式属性，例如字体大小、文本颜色等。</span><br><span class="line">4.属性和属性值之间用英文“:”连接。</span><br><span class="line">5.多个“键值对”之间用英文“;”进行区分。</span><br><span class="line">可以用段落 和 表格的对齐的演示。</span><br></pre></td></tr></table></figure><h1 id="CSS字体样式属性"><a href="#CSS字体样式属性" class="headerlink" title="CSS字体样式属性"></a>CSS字体样式属性</h1><h2 id="font-size-字号大小"><a href="#font-size-字号大小" class="headerlink" title="font-size:字号大小"></a>font-size:字号大小</h2><p>font-size属性用于设置字号，该属性的值可以使用相对长度单位，也可以使用绝对长度单位。其中，相对长度单位比较常用，推荐使用像素单位px，绝对长度单位使用较少。具体如下：</p><p><img src="/media/dd.png"></p><h2 id="font-family-字体"><a href="#font-family-字体" class="headerlink" title="font-family:字体"></a>font-family:字体</h2><p>font-family属性用于设置字体。网页中常用的字体有宋体、微软雅黑、黑体等，例如将网页中所有段落文本的字体设置为微软雅黑，可以使用如下CSS样式代码：</p><p>p{ font-family:”微软雅黑”;}</p><p>可以同时指定多个字体，中间以逗号隔开，表示如果浏览器不支持第一个字体，则会尝试下一个，直到找到合适的字体。</p><blockquote><p><img src="/media/good.png">常用技巧：</p></blockquote><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line">1. 现在网页中普遍使用14px+。</span><br><span class="line">2. 尽量使用偶数的数字字号。ie6等老式浏览器支持奇数会有bug。</span><br><span class="line">3. 各种字体之间必须使用英文状态下的逗号隔开。</span><br><span class="line">4. 中文字体需要加英文状态下的引号，英文字体一般不需要加引号。当需要设置英文字体时，英文字体名必须位于中文字体名之前。</span><br><span class="line">5. 如果字体名中包含空格、#、$等符号，则该字体必须加英文状态下的单引号或双引号，例如font-family: &quot;Times New Roman&quot;;。</span><br><span class="line">6. 尽量使用系统默认字体，保证在任何用户的浏览器中都能正确显示。</span><br></pre></td></tr></table></figure><h2 id="CSS-Unicode字体"><a href="#CSS-Unicode字体" class="headerlink" title="CSS Unicode字体"></a>CSS Unicode字体</h2><p>在 CSS 中设置字体名称，直接写中文是可以的。但是在文件编码（GB2312、UTF-8 等）不匹配时会产生乱码的错误。xp 系统不支持 类似微软雅黑的中文。</p><p>方案一： 你可以使用英文来替代。 比如 font-family:”Microsoft Yahei”。</p><p>方案二： 在 CSS 直接使用 Unicode 编码来写字体名称可以避免这些错误。使用 Unicode 写中文字体名称，浏览器是可以正确的解析的。<br>font-family: “\5FAE\8F6F\96C5\9ED1”，表示设置字体为“微软雅黑”。</p><p><img src="/media/shs.png"></p><p>可以通过escape()  来测试属于什么字体。</p><table><thead><tr><th>字体名称</th><th>英文名称</th><th>Unicode 编码</th></tr></thead><tbody><tr><td>宋体</td><td>SimSun</td><td>\5B8B\4F53</td></tr><tr><td>新宋体</td><td>NSimSun</td><td>\65B0\5B8B\4F53</td></tr><tr><td>黑体</td><td>SimHei</td><td>\9ED1\4F53</td></tr><tr><td>微软雅黑</td><td>Microsoft YaHei</td><td>\5FAE\8F6F\96C5\9ED1</td></tr><tr><td>楷体_GB2312</td><td>KaiTi_GB2312</td><td>\6977\4F53_GB2312</td></tr><tr><td>隶书</td><td>LiSu</td><td>\96B6\4E66</td></tr><tr><td>幼园</td><td>YouYuan</td><td>\5E7C\5706</td></tr><tr><td>华文细黑</td><td>STXihei</td><td>\534E\6587\7EC6\9ED1</td></tr><tr><td>细明体</td><td>MingLiU</td><td>\7EC6\660E\4F53</td></tr><tr><td>新细明体</td><td>PMingLiU</td><td>\65B0\7EC6\660E\4F53</td></tr></tbody></table><p>为了照顾不同电脑的字体安装问题，我们尽量只使用宋体和微软雅黑中文字体</p><h2 id="font-weight-字体粗细"><a href="#font-weight-字体粗细" class="headerlink" title="font-weight:字体粗细"></a>font-weight:字体粗细</h2><p>字体加粗除了用 b  和 strong 标签之外，可以使用CSS 来实现，但是CSS 是没有语义的。</p><figure class="highlight html"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">font-weight属性用于定义字体的粗细，其可用属性值：normal、bold、bolder、lighter、100~900（100的整数倍）。</span><br></pre></td></tr></table></figure><p><img src="/media/good.png">小技巧： </p> <figure class="highlight css"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">数字 400 等价于 <span class="selector-tag">normal</span>，而 700 等价于 <span class="selector-tag">bold</span>。  但是我们更喜欢用数字来表示。</span><br></pre></td></tr></table></figure><h2 id="font-style-字体风格"><a href="#font-style-字体风格" class="headerlink" title="font-style:字体风格"></a>font-style:字体风格</h2><p>字体倾斜除了用 i  和 em 标签之外，可以使用CSS 来实现，但是CSS 是没有语义的。</p><p>font-style属性用于定义字体风格，如设置斜体、倾斜或正常字体，其可用属性值如下：</p><p>normal：默认值，浏览器会显示标准的字体样式。</p><p>italic：浏览器会显示斜体的字体样式。</p><p>oblique：浏览器会显示倾斜的字体样式。</p><p><img src="/media/good.png">小技巧： </p> <figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">平时我们很少给文字加斜体，反而喜欢给斜体标签（em，i）改为普通模式。</span><br></pre></td></tr></table></figure><h2 id="font-综合设置字体样式-重点"><a href="#font-综合设置字体样式-重点" class="headerlink" title="font:综合设置字体样式 (重点)"></a>font:综合设置字体样式 (重点)</h2><p>font属性用于对字体样式进行综合设置，其基本语法格式如下：</p><figure class="highlight css"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">选择器&#123;<span class="attribute">font</span>: font-style  font-weight  font-size/line-height  font-family;&#125;</span><br></pre></td></tr></table></figure><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line">使用font属性时，必须按上面语法格式中的顺序书写，不能更换顺序，各个属性以空格隔开。</span><br><span class="line"></span><br><span class="line">注意：其中不需要设置的属性可以省略（取默认值），但必须保留font-size和font-family属性，否则font属性将不起作用。</span><br></pre></td></tr></table></figure><h1 id="开发者工具（chrome）"><a href="#开发者工具（chrome）" class="headerlink" title="开发者工具（chrome）"></a>开发者工具（chrome）</h1><p>此工具是我们的必备工具，以后代码出了问题，我们首先第一反应就是：</p><p>“按F12”或者是 “shift+ctrl+i”   打开 开发者工具。</p><p>菜单：   右击网页空白出—查看 </p><p><img src="/media/chrome.png"></p><p><img src="/media/good.png">小技巧：</p><ol><li>ctrl+滚轮 可以 放大开发者工具代码大小。</li><li>左边是HTML元素结构   右边是CSS样式。</li><li>右边CSS样式可以改动数值和颜色查看更改后效果。</li></ol><h1 id="选择器（重点）"><a href="#选择器（重点）" class="headerlink" title="选择器（重点）"></a>选择器（重点）</h1><p>要想将CSS样式应用于特定的HTML元素，首先需要找到该目标元素。在CSS中，执行这一任务的样式规则部分被称为选择器（选择符）。</p><p><img src="/media/ax.png"></p><p>如上图所以，要把里面的小黄人分为2组，最快的方法怎办？  </p><p>很多， 比如 一只眼睛的一组，剩下的一组  </p><p>这就用到基础选择器组：</p><h2 id="标签选择器（元素选择器）"><a href="#标签选择器（元素选择器）" class="headerlink" title="标签选择器（元素选择器）"></a>标签选择器（元素选择器）</h2><p>标签选择器是指用HTML标签名称作为选择器，按标签名称分类，为页面中某一类标签指定统一的CSS样式。其基本语法格式如下：</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">标签名&#123;属性1:属性值1; 属性2:属性值2; 属性3:属性值3; &#125;  或者</span><br><span class="line">元素名&#123;属性1:属性值1; 属性2:属性值2; 属性3:属性值3; &#125;</span><br></pre></td></tr></table></figure><p>标签选择器最大的优点是能快速为页面中同类型的标签统一样式，同时这也是他的缺点，不能设计差异化样式。</p><p>课堂案例：</p><p> 传智简介</p><h2 id="类选择器"><a href="#类选择器" class="headerlink" title="类选择器"></a>类选择器</h2><p>类选择器使用“.”（英文点号）进行标识，后面紧跟类名，其基本语法格式如下：</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">.类名&#123;属性1:属性值1; 属性2:属性值2; 属性3:属性值3; &#125;</span><br></pre></td></tr></table></figure><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">标签调用的时候用 class=“类名”  即可。</span><br></pre></td></tr></table></figure><p>类选择器最大的优势是可以为元素对象定义单独或相同的样式。</p><p><img src="/media/good.png">小技巧：</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">1.长名称或词组可以使用中横线来为选择器命名。</span><br><span class="line">2.不建议使用“_”下划线来命名CSS选择器。</span><br></pre></td></tr></table></figure><p>​    输入的时候少按一个shift键;<br>　浏览器兼容问题 (比如使用<em>tips的选择器命名，在IE6是无效的)<br>　能良好区分JavaScript变量命名(JS变量命名是用“</em>”)</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">3.不要纯数字、中文等命名， 尽量使用英文字母来表示。</span><br></pre></td></tr></table></figure><p>猜谜底游戏：</p><p><img src="/media/midi.png" width="450">   你猜？</p><p>命名规范：  见附件（Web前端开发规范手册.doc）</p><p>命名是我们通俗约定的，但是没有规定必须用这些常用的命名。</p><p>课堂案例：</p><p> <img src="/media/go.png"></p><figure class="highlight html"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br></pre></td><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">head</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">meta</span> <span class="attr">charset</span>=<span class="string">"utf-8"</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">style</span>&gt;</span><span class="undefined"></span></span><br><span class="line"><span class="undefined">        span &#123;</span></span><br><span class="line"><span class="undefined">        font-size: 100px;</span></span><br><span class="line"><span class="undefined">        &#125;</span></span><br><span class="line"><span class="css">        <span class="selector-class">.blue</span> &#123;</span></span><br><span class="line"><span class="undefined">        color: blue;</span></span><br><span class="line"><span class="undefined">        &#125;</span></span><br><span class="line"><span class="css">        <span class="selector-class">.red</span> &#123;</span></span><br><span class="line"><span class="undefined">        color: red;</span></span><br><span class="line"><span class="undefined">        &#125;</span></span><br><span class="line"><span class="css">        <span class="selector-class">.orange</span> &#123;</span></span><br><span class="line"><span class="undefined">color: orange;</span></span><br><span class="line"><span class="undefined">        &#125;</span></span><br><span class="line"><span class="css"><span class="selector-class">.green</span> &#123;</span></span><br><span class="line"><span class="undefined">color: green;</span></span><br><span class="line"><span class="undefined">&#125;</span></span><br><span class="line"><span class="undefined">        </span><span class="tag">&lt;/<span class="name">style</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;/<span class="name">head</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">body</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">span</span> <span class="attr">class</span>=<span class="string">"blue"</span>&gt;</span>G<span class="tag">&lt;/<span class="name">span</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">span</span> <span class="attr">class</span>=<span class="string">"red"</span>&gt;</span>o<span class="tag">&lt;/<span class="name">span</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">span</span> <span class="attr">class</span>=<span class="string">"orange"</span>&gt;</span>o<span class="tag">&lt;/<span class="name">span</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">span</span> <span class="attr">class</span>=<span class="string">"blue"</span>&gt;</span>g<span class="tag">&lt;/<span class="name">span</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">span</span> <span class="attr">class</span>=<span class="string">"green"</span>&gt;</span>l<span class="tag">&lt;/<span class="name">span</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">span</span> <span class="attr">class</span>=<span class="string">"red"</span>&gt;</span>e<span class="tag">&lt;/<span class="name">span</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;/<span class="name">body</span>&gt;</span></span><br></pre></td></tr></table></figure><h2 id="多类名选择器"><a href="#多类名选择器" class="headerlink" title="多类名选择器"></a>多类名选择器</h2><p>我们可以给标签指定多个类名，从而达到更多的选择目的。</p><p><img src="/media/lei.png"></p><p>注意：</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">1. 样式显示效果跟HTML元素中的类名先后顺序没有关系,受CSS样式书写的上下顺序有关。</span><br><span class="line">2. 各个类名中间用空格隔开。</span><br></pre></td></tr></table></figure><p>多类名选择器在后期布局比较复杂的情况下，还是较多使用的。</p><figure class="highlight html"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">div</span> <span class="attr">class</span>=<span class="string">"pink fontWeight font20"</span>&gt;</span>亚瑟<span class="tag">&lt;/<span class="name">div</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">div</span> <span class="attr">class</span>=<span class="string">"font20"</span>&gt;</span>刘备<span class="tag">&lt;/<span class="name">div</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">div</span> <span class="attr">class</span>=<span class="string">"font14 pink"</span>&gt;</span>安其拉<span class="tag">&lt;/<span class="name">div</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">div</span> <span class="attr">class</span>=<span class="string">"font14"</span>&gt;</span>貂蝉<span class="tag">&lt;/<span class="name">div</span>&gt;</span></span><br></pre></td></tr></table></figure><h2 id="id选择器"><a href="#id选择器" class="headerlink" title="id选择器"></a>id选择器</h2><p>id选择器使用“#”进行标识，后面紧跟id名，其基本语法格式如下：</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">#id名&#123;属性1:属性值1; 属性2:属性值2; 属性3:属性值3; &#125;</span><br></pre></td></tr></table></figure><p>该语法中，id名即为HTML元素的id属性值，大多数HTML元素都可以定义id属性，元素的id值是唯一的，只能对应于文档中某一个具体的元素。</p><p>用法基本和类选择器相同。</p><h2 id="id选择器和类选择器区别"><a href="#id选择器和类选择器区别" class="headerlink" title="id选择器和类选择器区别"></a>id选择器和类选择器区别</h2><p>W3C标准规定，在同一个页面内，不允许有相同名字的id对象出现，但是允许相同名字的class。</p><p>类选择器（class） 好比人的名字，  是可以多次重复使用的， 比如  张伟  王伟  李伟  李娜</p><p>id选择器     好比人的身份证号码，  全中国是唯一的， 不得重复。 只能使用一次。</p><p><strong><em>id选择器和类选择器最大的不同在于 使用次数上。</em></strong></p><p><img src="/media/zfb.jpg"></p><h2 id="通配符选择器"><a href="#通配符选择器" class="headerlink" title="通配符选择器"></a>通配符选择器</h2><p>通配符选择器用“*”号表示，他是所有选择器中作用范围最广的，能匹配页面中所有的元素。其基本语法格式如下：</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">* &#123; 属性1:属性值1; 属性2:属性值2; 属性3:属性值3; &#125;</span><br></pre></td></tr></table></figure><p>例如下面的代码，使用通配符选择器定义CSS样式，清除所有HTML标记的默认边距。</p><figure class="highlight css"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line">* &#123;</span><br><span class="line">  <span class="attribute">margin</span>: <span class="number">0</span>;                    <span class="comment">/* 定义外边距*/</span></span><br><span class="line">  <span class="attribute">padding</span>: <span class="number">0</span>;                   <span class="comment">/* 定义内边距*/</span></span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>注意：</p><p>  这个通配符选择器，就像我们的电影明星中的梦中情人， 想想它就好了，但是它不会和你过日子。 </p><h2 id="伪类选择器"><a href="#伪类选择器" class="headerlink" title="伪类选择器"></a>伪类选择器</h2><p>  伪类选择器用于向某些选择器添加特殊的效果。比如给链接添加特殊效果， 比如可以选择 第1个，第n个元素。</p><figure class="highlight css"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">为了和我们刚才学的类选择器相区别，  类选择器是一个点 比如 <span class="selector-class">.demo</span> &#123;&#125;   而我们的伪类 用 2个点 就是 冒号  比如  <span class="selector-pseudo">:link</span>&#123;&#125;</span><br></pre></td></tr></table></figure><h3 id="链接伪类选择器"><a href="#链接伪类选择器" class="headerlink" title="链接伪类选择器"></a>链接伪类选择器</h3><ul><li>:link      /<em> 未访问的链接 </em>/</li><li>:visited   /<em> 已访问的链接 </em>/</li><li>:hover     /<em> 鼠标移动到链接上 </em>/</li><li>:active    /<em> 选定的链接 </em>/</li></ul><p>   注意写的时候，他们的顺序尽量不要颠倒  按照  lvha 的顺序。   love   hate  爱上了讨厌 记忆法    或者   lv 包包 非常 hao </p><figure class="highlight css"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><span class="line"><span class="selector-tag">a</span> &#123;   <span class="comment">/* a是标签选择器  所有的链接 */</span></span><br><span class="line">truetruetrue<span class="attribute">font-weight</span>: <span class="number">700</span>;</span><br><span class="line">truetruetrue<span class="attribute">font-size</span>: <span class="number">16px</span>;</span><br><span class="line">truetruetrue<span class="attribute">color</span>: gray;</span><br><span class="line">truetrue&#125;</span><br><span class="line"><span class="selector-tag">a</span><span class="selector-pseudo">:hover</span> &#123;   <span class="comment">/* :hover 是链接伪类选择器 鼠标经过 */</span></span><br><span class="line">truetruetrue<span class="attribute">color</span>: red; <span class="comment">/*  鼠标经过的时候，由原来的 灰色 变成了红色 */</span></span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h3 id="结构-位置-伪类选择器（CSS3"><a href="#结构-位置-伪类选择器（CSS3" class="headerlink" title="结构(位置)伪类选择器（CSS3)"></a>结构(位置)伪类选择器（CSS3)</h3><ul><li>:first-child :选取属于其父元素的首个子元素的指定选择器</li><li>:last-child :选取属于其父元素的最后一个子元素的指定选择器</li><li>:nth-child(n) ： 匹配属于其父元素的第 N 个子元素，不论元素的类型</li><li>:nth-last-child(n) ：选择器匹配属于其元素的第 N 个子元素的每个元素，不论元素的类型，从最后一个子元素开始计数。<br>n 可以是数字、关键词或公式</li><li>​</li></ul><figure class="highlight css"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br></pre></td><td class="code"><pre><span class="line"><span class="selector-tag">li</span><span class="selector-pseudo">:first-child</span> &#123; <span class="comment">/*  选择第一个孩子 */</span></span><br><span class="line">        <span class="attribute">color</span>: pink; </span><br><span class="line">        &#125;</span><br><span class="line"><span class="selector-tag">li</span><span class="selector-pseudo">:last-child</span> &#123;   <span class="comment">/* 最后一个孩子 */</span></span><br><span class="line">        <span class="attribute">color</span>: purple;</span><br><span class="line">        &#125;</span><br><span class="line"><span class="selector-tag">li</span><span class="selector-pseudo">:nth-child(4)</span> &#123;   <span class="comment">/* 选择第4个孩子  n  代表 第几个的意思 */</span> </span><br><span class="line">truetruetruetrue<span class="attribute">color</span>: skyblue;</span><br><span class="line">        &#125;</span><br></pre></td></tr></table></figure><h3 id="目标伪类选择器-CSS3"><a href="#目标伪类选择器-CSS3" class="headerlink" title="目标伪类选择器(CSS3)"></a>目标伪类选择器(CSS3)</h3><p> :target目标伪类选择器 :选择器可用于选取当前活动的目标元素</p><figure class="highlight css"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line"><span class="selector-pseudo">:target</span> &#123;</span><br><span class="line">truetrue<span class="attribute">color</span>: red;</span><br><span class="line">truetrue<span class="attribute">font-size</span>: <span class="number">30px</span>;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h1 id="CSS注释"><a href="#CSS注释" class="headerlink" title="CSS注释"></a>CSS注释</h1><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">CSS规则是使用     /*  需要注释的内容  */  进行注释的，即在需要注释的内容前使用 “/*” 标记开始注释，在内容的结尾使用 “*/”结束。</span><br></pre></td></tr></table></figure><p>   例如：</p><figure class="highlight css"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line"><span class="selector-tag">p</span> &#123;</span><br><span class="line">  <span class="attribute">font-size</span>: <span class="number">14px</span>;                 <span class="comment">/* 所有的字体是14像素大小*/</span></span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h1 id="CSS外观属性"><a href="#CSS外观属性" class="headerlink" title="CSS外观属性"></a>CSS外观属性</h1><h2 id="color-文本颜色"><a href="#color-文本颜色" class="headerlink" title="color:文本颜色"></a>color:文本颜色</h2><p>color属性用于定义文本的颜色，其取值方式有如下3种：</p><p>1.预定义的颜色值，如red，green，blue等。</p><p>2.十六进制，如#FF0000，#FF6600，#29D794等。实际工作中，十六进制是最常用的定义颜色的方式。</p><p>3.RGB代码，如红色可以表示为rgb(255,0,0)或rgb(100%,0%,0%)。</p><p>需要注意的是，如果使用RGB代码的百分比颜色值，取值为0时也不能省略百分号，必须写为0%。</p><h2 id="line-height-行间距"><a href="#line-height-行间距" class="headerlink" title="line-height:行间距"></a>line-height:行间距</h2><p>ine-height属性用于设置行间距，就是行与行之间的距离，即字符的垂直间距，一般称为行高。line-height常用的属性值单位有三种，分别为像素px，相对值em和百分比%，实际工作中使用最多的是像素px</p><p>一般情况下，行距比字号大7.8像素左右就可以了。</p><h2 id="text-align-水平对齐方式"><a href="#text-align-水平对齐方式" class="headerlink" title="text-align:水平对齐方式"></a>text-align:水平对齐方式</h2><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">text-align属性用于设置文本内容的水平对齐，相当于html中的align对齐属性。其可用属性值如下：</span><br></pre></td></tr></table></figure><p>left：左对齐（默认值）</p><p>right：右对齐</p><p>center：居中对齐</p><h2 id="text-indent-首行缩进"><a href="#text-indent-首行缩进" class="headerlink" title="text-indent:首行缩进"></a>text-indent:首行缩进</h2><p>text-indent属性用于设置首行文本的缩进，其属性值可为不同单位的数值、em字符宽度的倍数、或相对于浏览器窗口宽度的百分比%，允许使用负值, 建议使用em作为设置单位。</p><p>1em 就是一个字的宽度   如果是汉字的段落， 1em 就是一个汉字的宽度</p><h2 id="letter-spacing-字间距"><a href="#letter-spacing-字间距" class="headerlink" title="letter-spacing:字间距"></a>letter-spacing:字间距</h2><p>letter-spacing属性用于定义字间距，所谓字间距就是字符与字符之间的空白。其属性值可为不同单位的数值，允许使用负值，默认为normal。</p><h2 id="word-spacing-单词间距"><a href="#word-spacing-单词间距" class="headerlink" title="word-spacing:单词间距"></a>word-spacing:单词间距</h2><p>word-spacing属性用于定义英文单词之间的间距，对中文字符无效。和letter-spacing一样，其属性值可为不同单位的数值，允许使用负值，默认为normal。</p><p>word-spacing和letter-spacing均可对英文进行设置。不同的是letter-spacing定义的为字母之间的间距，而word-spacing定义的为英文单词之间的间距。</p><h2 id="颜色半透明-css3"><a href="#颜色半透明-css3" class="headerlink" title="颜色半透明(css3)"></a>颜色半透明(css3)</h2><p>文字颜色到了CSS3我们可以采取半透明的格式了语法格式如下：</p><figure class="highlight css"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line"><span class="selector-tag">color</span>: <span class="selector-tag">rgba</span>(<span class="selector-tag">r</span>,<span class="selector-tag">g</span>,<span class="selector-tag">b</span>,<span class="selector-tag">a</span>)  <span class="selector-tag">a</span> 是<span class="selector-tag">alpha</span>  透明的意思  取值范围 0~1之间    <span class="selector-tag">color</span>: <span class="selector-tag">rgba</span>(0,0,0,0<span class="selector-class">.3</span>)</span><br></pre></td></tr></table></figure><h2 id="文字阴影-CSS3"><a href="#文字阴影-CSS3" class="headerlink" title="文字阴影(CSS3)"></a>文字阴影(CSS3)</h2><p>以后我们可以给我们的文字添加阴影效果了  Shadow  影子  </p><figure class="highlight css"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line"><span class="selector-tag">text-shadow</span>:水平位置 垂直位置 模糊距离 阴影颜色;</span><br></pre></td></tr></table></figure><p><img src="/media/1498467502625.png" alt="1498467502625"> </p><ol><li>前两项是必须写的。  后两项可以选写。</li></ol><p><img src="/media/1498467519665.png" alt="1498467519665">    </p><h1 id="sublime快捷方式"><a href="#sublime快捷方式" class="headerlink" title="sublime快捷方式"></a>sublime快捷方式</h1><p>sublime可以快速提高我们代码的书写方式</p><ol><li><p>生成标签 直接输入标签名 按tab键即可   比如  div   然后tab 键， 就可以生成 <div></div></p></li><li><p>如果想要生成多个相同标签  加上 <em> 就可以了 比如   div</em>3  就可以快速生成3个div</p></li><li><p>如果有父子级关系的标签，可以用 &gt;  比如   ul &gt; li就可以了</p></li><li><p>如果有兄弟关系的标签，用  +  就可以了 比如 div+p  </p></li><li><p>如果生成带有类名或者id名字的，  直接写  .demo  或者  #two   tab 键就可以了</p><p>​</p></li></ol><h1 id="引入CSS样式表（书写位置）"><a href="#引入CSS样式表（书写位置）" class="headerlink" title="引入CSS样式表（书写位置）"></a>引入CSS样式表（书写位置）</h1><p>CSS可以写到那个位置？ 是不是一定写到html文件里面呢？</p><h2 id="内部样式表"><a href="#内部样式表" class="headerlink" title="内部样式表"></a>内部样式表</h2><p>内嵌式是将CSS代码集中写在HTML文档的head头部标签中，并且用style标签定义，其基本语法格式如下：</p><figure class="highlight html"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">head</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">style</span> <span class="attr">type</span>=<span class="string">"text/CSS"</span>&gt;</span><span class="undefined"></span></span><br><span class="line"><span class="undefined">    选择器 &#123;属性1:属性值1; 属性2:属性值2; 属性3:属性值3;&#125;</span></span><br><span class="line"><span class="undefined"></span><span class="tag">&lt;/<span class="name">style</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">head</span>&gt;</span></span><br></pre></td></tr></table></figure><p>语法中，style标签一般位于head标签中title标签之后，也可以把他放在HTML文档的任何地方。</p><p>type=”text/CSS”  在html5中可以省略， 写上也比较符合规范， 所以这个地方可以写也可以省略。</p><h2 id="行内式（内联样式）"><a href="#行内式（内联样式）" class="headerlink" title="行内式（内联样式）"></a>行内式（内联样式）</h2><p>内联样式，又有人称行内样式、行间样式、内嵌样式。是通过标签的style属性来设置元素的样式，其基本语法格式如下：</p><figure class="highlight html"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">标签名</span> <span class="attr">style</span>=<span class="string">"属性1:属性值1; 属性2:属性值2; 属性3:属性值3;"</span>&gt;</span> 内容 <span class="tag">&lt;/<span class="name">标签名</span>&gt;</span></span><br></pre></td></tr></table></figure><p>语法中style是标签的属性，实际上任何HTML标签都拥有style属性，用来设置行内式。其中属性和值的书写规范与CSS样式规则相同，行内式只对其所在的标签及嵌套在其中的子标签起作用。</p><h2 id="外部样式表（外链式）"><a href="#外部样式表（外链式）" class="headerlink" title="外部样式表（外链式）"></a>外部样式表（外链式）</h2><p>链入式是将所有的样式放在一个或多个以.CSS为扩展名的外部样式表文件中，通过link标签将外部样式表文件链接到HTML文档中，其基本语法格式如下：</p><figure class="highlight html"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">head</span>&gt;</span></span><br><span class="line">  <span class="tag">&lt;<span class="name">link</span> <span class="attr">href</span>=<span class="string">"CSS文件的路径"</span> <span class="attr">type</span>=<span class="string">"text/CSS"</span> <span class="attr">rel</span>=<span class="string">"stylesheet"</span> /&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">head</span>&gt;</span></span><br></pre></td></tr></table></figure><p>注意：  link 是个单标签哦!!!</p><p>该语法中，link标签需要放在head头部标签中，并且必须指定link标签的三个属性，具体如下：</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line">href：定义所链接外部样式表文件的URL，可以是相对路径，也可以是绝对路径。</span><br><span class="line">type：定义所链接文档的类型，在这里需要指定为“text/CSS”，表示链接的外部文件为CSS样式表。</span><br><span class="line">rel：定义当前文档与被链接文档之间的关系，在这里需要指定为“stylesheet”，表示被链接的文档是一个样式表文件。</span><br></pre></td></tr></table></figure><h2 id="三种样式表总结"><a href="#三种样式表总结" class="headerlink" title="三种样式表总结"></a>三种样式表总结</h2><table><thead><tr><th>样式表</th><th>优点</th><th>缺点</th><th>使用情况</th><th>控制范围</th></tr></thead><tbody><tr><td>行内样式表</td><td>书写方便，权重高</td><td>没有实现样式和结构相分离</td><td>较少</td><td>控制一个标签（少）</td></tr><tr><td>内部样式表</td><td>部分结构和样式相分离</td><td>没有彻底分离</td><td>较多</td><td>控制一个页面（中）</td></tr><tr><td>外部样式表</td><td>完全实现结构和样式相分离</td><td>需要引入</td><td>最多，强烈推荐</td><td>控制整个站点（多）</td></tr></tbody></table><h1 id="标签显示模式（display）"><a href="#标签显示模式（display）" class="headerlink" title="标签显示模式（display）"></a>标签显示模式（display）</h1><p><img src="/media/people.png"></p><p>非洲黑人：  皮肤内黑色素含量高，以吸收阳光中的紫外线，保护皮肤内部结构免遭损害，头发象羊毛一样卷曲，使每根卷发周围都有许多空隙，空隙充满空气，卷发有隔热作用。</p><p>欧洲白人： 生活寒带或着是说常年温度较低的地缘,加上年日照时间少，身体的黑色素沉淀比较少<code></code>所以出现皮肤、发色、瞳晕都呈现浅色</p><p>传智黄人：  我中间的。。。  <img src="/media/h.jpg" alt=""></p><p>最重要的总结：  是为了更好的适应环境而完成的自然选择。 </p><p>同理，我们网页的标签非常多，再不同地方会用到不同类型的标签，以便更好的完成我们的网页。</p><p>标签的类型(显示模式)</p><p>HTML标签一般分为块标签和行内标签两种类型，它们也称块元素和行内元素。具体如下：</p><h2 id="块级元素-block-level"><a href="#块级元素-block-level" class="headerlink" title="块级元素(block-level)"></a>块级元素(block-level)</h2><p>每个块元素通常都会独自占据一整行或多整行，可以对其设置宽度、高度、对齐等属性，常用于网页布局和网页结构的搭建。</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">常见的块元素有&lt;h1&gt;~&lt;h6&gt;、&lt;p&gt;、&lt;div&gt;、&lt;ul&gt;、&lt;ol&gt;、&lt;li&gt;等，其中&lt;div&gt;标签是最典型的块元素。</span><br></pre></td></tr></table></figure><p>  <img src="/media/xtf.jpg"></p><p>块级元素的特点：</p><p>（1）总是从新行开始</p><p>（2）高度，行高、外边距以及内边距都可以控制。</p><p>（3）宽度默认是容器的100%</p><p>（4）可以容纳内联元素和其他块元素。</p><h2 id="行内元素-inline-level"><a href="#行内元素-inline-level" class="headerlink" title="行内元素(inline-level)"></a>行内元素(inline-level)</h2><p>行内元素（内联元素）不占有独立的区域，仅仅靠自身的字体大小和图像尺寸来支撑结构，一般不可以设置宽度、高度、对齐等属性，常用于控制页面中文本的样式。</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">常见的行内元素有&lt;a&gt;、&lt;strong&gt;、&lt;b&gt;、&lt;em&gt;、&lt;i&gt;、&lt;del&gt;、&lt;s&gt;、&lt;ins&gt;、&lt;u&gt;、&lt;span&gt;等，其中&lt;span&gt;标签最典型的行内元素。</span><br></pre></td></tr></table></figure><p>  <img src="/media/wf.jpg">  我一样重要</p><p>行内元素的特点：</p><p>（1）和相邻行内元素在一行上。</p><p>（2）高、宽无效，但水平方向的padding和margin可以设置，垂直方向的无效。</p><p>（3）默认宽度就是它本身内容的宽度。</p><p>（4）行内元素只能容纳文本或则其他行内元素。（a特殊）</p><p>  <img src="/media/w.jpg">    注意：</p><ol><li>只有 文字才 能组成段落  因此 p  里面不能放块级元素，同理还有这些标签h1,h2,h3,h4,h5,h6,dt，他们都是文字类块级标签，里面不能放其他块级元素。</li><li>链接里面不能再放链接。</li></ol><h2 id="块级元素和行内元素区别"><a href="#块级元素和行内元素区别" class="headerlink" title="块级元素和行内元素区别"></a>块级元素和行内元素区别</h2><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line">块级元素的特点：</span><br><span class="line">（1）总是从新行开始</span><br><span class="line">（2）高度，行高、外边距以及内边距都可以控制。</span><br><span class="line">（3）宽度默认是容器的100%</span><br><span class="line">（4）可以容纳内联元素和其他块元素。</span><br></pre></td></tr></table></figure><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line">行内元素的特点：</span><br><span class="line">（1）和相邻行内元素在一行上。</span><br><span class="line">（2）高、宽无效，但水平方向的padding和margin可以设置，垂直方向的无效。</span><br><span class="line">（3）默认宽度就是它本身内容的宽度。</span><br><span class="line">（4）行内元素只能容纳文本或则其他行内元素。</span><br></pre></td></tr></table></figure><h2 id="行内块元素（inline-block）"><a href="#行内块元素（inline-block）" class="headerlink" title="行内块元素（inline-block）"></a>行内块元素（inline-block）</h2><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line">在行内元素中有几个特殊的标签——&lt;img /&gt;、&lt;input /&gt;、&lt;td&gt;，可以对它们设置宽高和对齐属性，有些资料可能会称它们为行内块元素。</span><br><span class="line"></span><br><span class="line">行内块元素的特点：</span><br><span class="line">（1）和相邻行内元素（行内块）在一行上,但是之间会有空白缝隙。</span><br><span class="line">（2）默认宽度就是它本身内容的宽度。</span><br><span class="line">（3）高度，行高、外边距以及内边距都可以控制。</span><br></pre></td></tr></table></figure><p><img src="/media/lyc.jpg" width="400"></p><h2 id="标签显示模式转换-display"><a href="#标签显示模式转换-display" class="headerlink" title="标签显示模式转换 display"></a>标签显示模式转换 display</h2><p>块转行内：display:inline;</p><p>行内转块：display:block;</p><p>块、行内元素转换为行内块： display: inline-block;</p><p>此阶段，我们只需关心这三个，其他的是我们后面的工作。</p><h1 id="CSS复合选择器"><a href="#CSS复合选择器" class="headerlink" title="CSS复合选择器"></a>CSS复合选择器</h1><p>复合选择器是由两个或多个基础选择器，通过不同的方式组合而成的,目的是为了可以选择更准确更精细的目标元素标签。</p><h2 id="交集选择器"><a href="#交集选择器" class="headerlink" title="交集选择器"></a>交集选择器</h2><p>交集选择器由两个选择器构成，其中第一个为标签选择器，第二个为class选择器，两个选择器之间不能有空格，如h3.special。</p><p><img src="/media/jiao.png"></p><p><strong>记忆技巧：</strong></p><p>交集选择器 是 并且的意思。  即…又…的意思</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">比如：   p.one   选择的是： 类名为 .one  的 段落标签。</span><br></pre></td></tr></table></figure><p>用的相对来说比较少，不太建议使用。</p><h2 id="并集选择器"><a href="#并集选择器" class="headerlink" title="并集选择器"></a>并集选择器</h2><p>并集选择器（CSS选择器分组）是各个选择器通过<strong style="color:#f00">逗号</strong>连接而成的，任何形式的选择器（包括标签选择器、class类选择器id选择器等），都可以作为并集选择器的一部分。如果某些选择器定义的样式完全相同，或部分相同，就可以利用并集选择器为它们定义相同的CSS样式。</p><p><img src="/media/bing.png"></p><p>记忆技巧：</p><p>并集选择器  和 的意思，  就是说，只要逗号隔开的，所有选择器都会执行后面样式。</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">比如  .one, p , #test &#123;color: #F00;&#125;  表示   .one 和 p  和 #test 这三个选择器都会执行颜色为红色。  通常用于集体声明。</span><br></pre></td></tr></table></figure><p><img src="/media/hu.gif">  他和他，在一起， 在一起    一起的意思</p><h2 id="后代选择器"><a href="#后代选择器" class="headerlink" title="后代选择器"></a>后代选择器</h2><p>后代选择器又称为包含选择器，用来选择元素或元素组的后代，其写法就是把外层标签写在前面，内层标签写在后面，中间用空格分隔。当标签发生嵌套时，内层标签就成为外层标签的后代。</p><p><img src="/media/hou.png"></p><p>子孙后代都可以这么选择。 或者说，它能选择任何包含在内 的标签。 </p><p><img src="/media/li.png"></p><h2 id="子元素选择器"><a href="#子元素选择器" class="headerlink" title="子元素选择器"></a>子元素选择器</h2><p>子元素选择器只能选择作为某元素子元素的元素。其写法就是把父级标签写在前面，子级标签写在后面，中间跟一个 &gt; 进行连接，注意，符号左右两侧各保留一个空格。</p><p><img src="/media/zi1.png"></p><p>白话：  这里的子 指的是 亲儿子  不包含孙子 重孙子之类。</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">比如：  .demo &gt; h3 &#123;color: red;&#125;   说明  h3 一定是demo 亲儿子。  demo 元素包含着h3。</span><br></pre></td></tr></table></figure><p><img src="/media/san.jpg"></p><h2 id="测试题"><a href="#测试题" class="headerlink" title="测试题"></a>测试题</h2><figure class="highlight html"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br></pre></td><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">div</span> <span class="attr">class</span>=<span class="string">"nav"</span>&gt;</span>    <span class="comment">&lt;!-- 主导航栏 --&gt;</span></span><br><span class="line">  <span class="tag">&lt;<span class="name">ul</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">li</span>&gt;</span><span class="tag">&lt;<span class="name">a</span> <span class="attr">href</span>=<span class="string">"#"</span>&gt;</span>公司首页<span class="tag">&lt;/<span class="name">a</span>&gt;</span><span class="tag">&lt;/<span class="name">li</span>&gt;</span></span><br><span class="line">true<span class="tag">&lt;<span class="name">li</span>&gt;</span><span class="tag">&lt;<span class="name">a</span> <span class="attr">href</span>=<span class="string">"#"</span>&gt;</span>公司简介<span class="tag">&lt;/<span class="name">a</span>&gt;</span><span class="tag">&lt;/<span class="name">li</span>&gt;</span></span><br><span class="line">true<span class="tag">&lt;<span class="name">li</span>&gt;</span><span class="tag">&lt;<span class="name">a</span> <span class="attr">href</span>=<span class="string">"#"</span>&gt;</span>公司产品<span class="tag">&lt;/<span class="name">a</span>&gt;</span><span class="tag">&lt;/<span class="name">li</span>&gt;</span></span><br><span class="line">true<span class="tag">&lt;<span class="name">li</span>&gt;</span></span><br><span class="line">         <span class="tag">&lt;<span class="name">a</span> <span class="attr">href</span>=<span class="string">"#"</span>&gt;</span>联系我们<span class="tag">&lt;/<span class="name">a</span>&gt;</span></span><br><span class="line">truetrue <span class="tag">&lt;<span class="name">ul</span>&gt;</span></span><br><span class="line">truetrue    <span class="tag">&lt;<span class="name">li</span>&gt;</span><span class="tag">&lt;<span class="name">a</span> <span class="attr">href</span>=<span class="string">"#"</span>&gt;</span>公司邮箱<span class="tag">&lt;/<span class="name">a</span>&gt;</span><span class="tag">&lt;/<span class="name">li</span>&gt;</span></span><br><span class="line">truetrue    <span class="tag">&lt;<span class="name">li</span>&gt;</span><span class="tag">&lt;<span class="name">a</span> <span class="attr">href</span>=<span class="string">"#"</span>&gt;</span>公司电话<span class="tag">&lt;/<span class="name">a</span>&gt;</span><span class="tag">&lt;/<span class="name">li</span>&gt;</span></span><br><span class="line">truetrue <span class="tag">&lt;/<span class="name">ul</span>&gt;</span></span><br><span class="line">true<span class="tag">&lt;/<span class="name">li</span>&gt;</span></span><br><span class="line">  <span class="tag">&lt;/<span class="name">ul</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">div</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">div</span> <span class="attr">class</span>=<span class="string">"sitenav"</span>&gt;</span>    <span class="comment">&lt;!-- 侧导航栏 --&gt;</span></span><br><span class="line">  <span class="tag">&lt;<span class="name">div</span> <span class="attr">class</span>=<span class="string">"site-l"</span>&gt;</span>左侧侧导航栏<span class="tag">&lt;/<span class="name">div</span>&gt;</span></span><br><span class="line">  <span class="tag">&lt;<span class="name">div</span> <span class="attr">class</span>=<span class="string">"site-r"</span>&gt;</span><span class="tag">&lt;<span class="name">a</span> <span class="attr">href</span>=<span class="string">"#"</span>&gt;</span>登录<span class="tag">&lt;/<span class="name">a</span>&gt;</span><span class="tag">&lt;/<span class="name">div</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">div</span>&gt;</span></span><br></pre></td></tr></table></figure><p>在不修改以上代码的前提下，完成以下任务：</p><ol><li><p>链接 登录 的颜色为红色,同时主导航栏里面的所有的链接改为蓝色     (简单)</p></li><li><p>主导航栏和侧导航栏里面文字都是14像素并且是微软雅黑。（中等)</p></li><li><p>主导航栏里面的一级菜单链接文字颜色为绿色。（难)</p><p>​</p></li></ol><h2 id="属性选择器"><a href="#属性选择器" class="headerlink" title="属性选择器"></a>属性选择器</h2><p>选取标签带有某些特殊属性的选择器 我们成为属性选择器</p><figure class="highlight css"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">/* 获取到 拥有 该属性的元素 */</span></span><br><span class="line"><span class="selector-tag">div</span><span class="selector-attr">[class^=font]</span> &#123; <span class="comment">/*  class^=font 表示 font 开始位置就行了 */</span></span><br><span class="line">truetruetrue<span class="attribute">color</span>: pink;</span><br><span class="line">truetrue&#125;</span><br><span class="line"><span class="selector-tag">div</span><span class="selector-attr">[class$=footer]</span> &#123; <span class="comment">/*  class$=footer 表示 footer 结束位置就行了 */</span></span><br><span class="line">truetruetrue<span class="attribute">color</span>: skyblue;</span><br><span class="line">truetrue&#125;</span><br><span class="line"><span class="selector-tag">div</span><span class="selector-attr">[class*=tao]</span> &#123; <span class="comment">/* class*=tao  *=  表示tao 在任意位置都可以 */</span></span><br><span class="line">truetruetrue<span class="attribute">color</span>: green;</span><br><span class="line">truetrue&#125;</span><br></pre></td></tr></table></figure><figure class="highlight html"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br></pre></td><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">div</span> <span class="attr">class</span>=<span class="string">"font12"</span>&gt;</span>属性选择器<span class="tag">&lt;/<span class="name">div</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">div</span> <span class="attr">class</span>=<span class="string">"font12"</span>&gt;</span>属性选择器<span class="tag">&lt;/<span class="name">div</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">div</span> <span class="attr">class</span>=<span class="string">"font24"</span>&gt;</span>属性选择器<span class="tag">&lt;/<span class="name">div</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">div</span> <span class="attr">class</span>=<span class="string">"font24"</span>&gt;</span>属性选择器<span class="tag">&lt;/<span class="name">div</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">div</span> <span class="attr">class</span>=<span class="string">"font24"</span>&gt;</span>属性选择器<span class="tag">&lt;/<span class="name">div</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">div</span> <span class="attr">class</span>=<span class="string">"24font"</span>&gt;</span>属性选择器123<span class="tag">&lt;/<span class="name">div</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">div</span> <span class="attr">class</span>=<span class="string">"sub-footer"</span>&gt;</span>属性选择器footer<span class="tag">&lt;/<span class="name">div</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">div</span> <span class="attr">class</span>=<span class="string">"jd-footer"</span>&gt;</span>属性选择器footer<span class="tag">&lt;/<span class="name">div</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">div</span> <span class="attr">class</span>=<span class="string">"news-tao-nav"</span>&gt;</span>属性选择器<span class="tag">&lt;/<span class="name">div</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">div</span> <span class="attr">class</span>=<span class="string">"news-tao-header"</span>&gt;</span>属性选择器<span class="tag">&lt;/<span class="name">div</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">div</span> <span class="attr">class</span>=<span class="string">"tao-header"</span>&gt;</span>属性选择器<span class="tag">&lt;/<span class="name">div</span>&gt;</span></span><br></pre></td></tr></table></figure><h2 id="伪元素选择器（CSS3"><a href="#伪元素选择器（CSS3" class="headerlink" title="伪元素选择器（CSS3)"></a>伪元素选择器（CSS3)</h2><ol><li>E::first-letter文本的第一个单词或字（如中文、日文、韩文等）</li><li>E::first-line 文本第一行；</li><li>E::selection 可改变选中文本的样式；</li></ol><figure class="highlight css"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br></pre></td><td class="code"><pre><span class="line"><span class="selector-tag">p</span><span class="selector-pseudo">::first-letter</span> &#123;</span><br><span class="line">  <span class="attribute">font-size</span>: <span class="number">20px</span>;</span><br><span class="line">  <span class="attribute">color</span>: hotpink;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="comment">/* 首行特殊样式 */</span></span><br><span class="line"><span class="selector-tag">p</span><span class="selector-pseudo">::first-line</span> &#123;</span><br><span class="line">  <span class="attribute">color</span>: skyblue;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="selector-tag">p</span><span class="selector-pseudo">::selection</span> &#123;</span><br><span class="line">  <span class="comment">/* font-size: 50px; */</span></span><br><span class="line">  <span class="attribute">color</span>: orange;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>4、E::before和E::after</p><p>在E元素内部的开始位置和结束位创建一个元素，该元素为行内元素，且必须要结合content属性使用。</p><figure class="highlight css"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line"><span class="selector-tag">div</span><span class="selector-pseudo">::befor</span> &#123;</span><br><span class="line">  <span class="attribute">content</span>:<span class="string">"开始"</span>;</span><br><span class="line">&#125;</span><br><span class="line"><span class="selector-tag">div</span><span class="selector-pseudo">::after</span> &#123;</span><br><span class="line">  <span class="attribute">content</span>:<span class="string">"结束"</span>;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>E:after、E:before 在旧版本里是伪元素，CSS3的规范里“:”用来表示伪类，“::”用来表示伪元素，但是在高版本浏览器下E:after、E:before会被自动识别为E::after、E::before，这样做的目的是用来做兼容处理。</p><p>E:after、E:before后面的练习中会反复用到，目前只需要有个大致了解</p><p>“:” 与 “::” 区别在于区分伪类和伪元素</p><h1 id="CSS书写规范"><a href="#CSS书写规范" class="headerlink" title="CSS书写规范"></a>CSS书写规范</h1><p>开始就形成良好的书写规范，是你专业化的开始。</p><h2 id="空格规范"><a href="#空格规范" class="headerlink" title="空格规范"></a>空格规范</h2><p>【强制】 选择器 与 { 之间必须包含空格。</p><p>示例： .selector { }</p><p>【强制】 属性名 与之后的 : 之间不允许包含空格， : 与 属性值 之间必须包含空格。</p><p>示例：</p><p>font-size: 12px;</p><h2 id="选择器规范"><a href="#选择器规范" class="headerlink" title="选择器规范"></a>选择器规范</h2><p>【强制】 当一个 rule 包含多个 selector 时，每个选择器声明必须独占一行。</p><p>示例：</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br></pre></td><td class="code"><pre><span class="line">/* good */</span><br><span class="line">.post,</span><br><span class="line">.page,</span><br><span class="line">.comment &#123;</span><br><span class="line">    line-height: 1.5;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"></span><br><span class="line">/* bad */</span><br><span class="line">.post, .page, .comment &#123;</span><br><span class="line">    line-height: 1.5;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>【建议】 选择器的嵌套层级应不大于 3 级，位置靠后的限定条件应尽可能精确。</p><p>示例：</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><span class="line">/* good */</span><br><span class="line">#username input &#123;&#125;</span><br><span class="line">.comment .avatar &#123;&#125;</span><br><span class="line"></span><br><span class="line">/* bad */</span><br><span class="line">.page .header .login #username input &#123;&#125;</span><br><span class="line">.comment div * &#123;&#125;</span><br></pre></td></tr></table></figure><h2 id="属性规范"><a href="#属性规范" class="headerlink" title="属性规范"></a>属性规范</h2><p>【强制】 属性定义必须另起一行。</p><p>示例：</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><span class="line">/* good */</span><br><span class="line">.selector &#123;</span><br><span class="line">    margin: 0;</span><br><span class="line">    padding: 0;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line">/* bad */</span><br><span class="line">.selector &#123; margin: 0; padding: 0; &#125;</span><br></pre></td></tr></table></figure><p>【强制】 属性定义后必须以分号结尾。</p><p>示例：</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br></pre></td><td class="code"><pre><span class="line">/* good */</span><br><span class="line">.selector &#123;</span><br><span class="line">    margin: 0;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line">/* bad */</span><br><span class="line">.selector &#123;</span><br><span class="line">    margin: 0</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h1 id="CSS-背景-background"><a href="#CSS-背景-background" class="headerlink" title="CSS 背景(background)"></a>CSS 背景(background)</h1><p>CSS 可以添加背景颜色和背景图片，以及来进行图片设置。</p><table><thead><tr><th>background-color</th><th>背景颜色</th></tr></thead><tbody><tr><td>background-image</td><td>背景图片地址</td></tr><tr><td>background-repeat</td><td>是否平铺</td></tr><tr><td>background-position</td><td>背景位置</td></tr><tr><td>background-attachment</td><td>背景固定还是滚动</td></tr><tr><td>背景的合写（复合属性）</td><td></td></tr><tr><td>background:背景颜色 背景图片地址 背景平铺 背景滚动 背景位置</td></tr></tbody></table><h2 id="背景图片-image"><a href="#背景图片-image" class="headerlink" title="背景图片(image)"></a>背景图片(image)</h2><p>语法： </p><figure class="highlight"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">background-image : none | url (url)</span><br></pre></td></tr></table></figure><p>参数： </p><p>none : 　无背景图（默认的）<br>url : 　使用绝对或相对地址指定背景图像 </p><p>background-image 属性允许指定一个图片展示在背景中（只有CSS3才可以多背景）可以和 background-color 连用。 如果图片不重复地话，图片覆盖不到地地方都会被背景色填充。 如果有背景图片平铺，则会覆盖背景颜色。</p><p>小技巧：  我们提倡 背景图片后面的地址，url不要加引号。</p><h2 id="背景平铺（repeat）"><a href="#背景平铺（repeat）" class="headerlink" title="背景平铺（repeat）"></a>背景平铺（repeat）</h2><p>语法： </p><figure class="highlight"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">background-repeat : repeat | no-repeat | repeat-x | repeat-y</span><br></pre></td></tr></table></figure><p>参数： </p><p>repeat : 　背景图像在纵向和横向上平铺（默认的）</p><p>no-repeat : 　背景图像不平铺</p><p>repeat-x : 　背景图像在横向上平铺</p><p>repeat-y : 　背景图像在纵向平铺 </p><p>设置背景图片时，默认把图片在水平和垂直方向平铺以铺满整个元素。</p><p>repeat-x : 　背景图像在横向上平铺  </p><p>repeat-y : 　背景图像在纵向平铺 </p><p><img src="/media/y.png" width="600"></p><p>设置背景图片时，默认把图片在水平和垂直方向平铺以铺满整个元素。</p><p><img src="/media/q.png" width="600"></p><h2 id="背景位置-position"><a href="#背景位置-position" class="headerlink" title="背景位置(position)"></a>背景位置(position)</h2><p>语法： </p><figure class="highlight"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line">background-position : length || length</span><br><span class="line"></span><br><span class="line">background-position : position || position</span><br></pre></td></tr></table></figure><p>参数： </p><p>length : 　百分数 | 由浮点数字和单位标识符组成的长度值。请参阅长度单位<br>position : 　top | center | bottom | left | center | right </p><p>说明： </p><p>设置或检索对象的背景图像位置。必须先指定background-image属性。默认值为：(0% 0%)。<br>如果只指定了一个值，该值将用于横坐标。纵坐标将默认为50%。第二个值将用于纵坐标。</p><p>注意：</p><ol><li>position 后面是x坐标和y坐标。 可以使用方位名词或者 精确单位。</li><li>如果和精确单位和方位名字混合使用，则必须是x坐标在前，y坐标后面。比如 background-position: 15px top;   则 15px 一定是  x坐标   top是 y坐标。</li></ol><p>实际工作用的最多的，就是背景图片居中对齐了。</p><h2 id="背景附着"><a href="#背景附着" class="headerlink" title="背景附着"></a>背景附着</h2><p>语法： </p><figure class="highlight"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">background-attachment : scroll | fixed</span><br></pre></td></tr></table></figure><p>参数： </p><p>scroll : 　背景图像是随对象内容滚动<br>fixed : 　背景图像固定 </p><p>说明： </p><p>设置或检索背景图像是随对象内容滚动还是固定的。</p><h2 id="背景简写"><a href="#背景简写" class="headerlink" title="背景简写"></a>背景简写</h2><p>background属性的值的书写顺序官方并没有强制标准的。为了可读性，建议大家如下写：</p><p>background:背景颜色 背景图片地址 背景平铺 背景滚动 背景位置</p><figure class="highlight css"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line"><span class="selector-tag">background</span>: <span class="selector-tag">transparent</span> <span class="selector-tag">url</span>(<span class="selector-tag">image</span><span class="selector-class">.jpg</span>) <span class="selector-tag">repeat-y</span>  <span class="selector-tag">scroll</span> 50% 0 ;</span><br></pre></td></tr></table></figure><h2 id="背景透明-CSS3"><a href="#背景透明-CSS3" class="headerlink" title="背景透明(CSS3)"></a>背景透明(CSS3)</h2><p>CSS3支持背景半透明的写法语法格式是:</p><figure class="highlight css"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line"><span class="selector-tag">background</span>: <span class="selector-tag">rgba</span>(0,0,0,0<span class="selector-class">.3</span>);</span><br></pre></td></tr></table></figure><p> 最后一个参数是alpha 透明度  取值范围 0~1之间</p><p> 注意：  背景半透明是指盒子背景半透明， 盒子里面的内容不收影响。</p><h2 id="背景缩放-CSS3"><a href="#背景缩放-CSS3" class="headerlink" title="背景缩放(CSS3)"></a>背景缩放(CSS3)</h2><p>通过background-size设置背景图片的尺寸，就像我们设置img的尺寸一样，在移动Web开发中做屏幕适配应用非常广泛。</p><p>其参数设置如下：</p><p>a) 可以设置长度单位(px)或百分比（设置百分比时，参照盒子的宽高）</p><p>b) 设置为cover时，会自动调整缩放比例，保证图片始终填充满背景区域，如有溢出部分则会被隐藏。我们平时用的cover 最多</p><p>c) 设置为contain会自动调整缩放比例，保证图片始终完整显示在背景区域。</p><figure class="highlight css"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line">background-image: url('images/gyt.jpg');</span><br><span class="line">truetruetrue<span class="selector-tag">background-size</span>: 300<span class="selector-tag">px</span> 100<span class="selector-tag">px</span>;</span><br><span class="line">truetruetrue<span class="comment">/* background-size: contain; */</span></span><br><span class="line">truetruetrue<span class="comment">/* background-size: cover; */</span></span><br></pre></td></tr></table></figure><h2 id="多背景-CSS3"><a href="#多背景-CSS3" class="headerlink" title="多背景(CSS3)"></a>多背景(CSS3)</h2><p>以逗号分隔可以设置多背景，可用于自适应布局  做法就是 用逗号隔开就好了。</p><ul><li>一个元素可以设置多重背景图像。 </li><li>每组属性间使用逗号分隔。 </li><li>如果设置的多重背景图之间存在着交集（即存在着重叠关系），前面的背景图会覆盖在后面的背景图之上。</li><li>为了避免背景色将图像盖住，背景色通常都定义在最后一组上，</li></ul><figure class="highlight"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line">background:url(test1.jpg) no-repeat scroll 10px 20px/50px 60px  ,</span><br><span class="line">true   url(test1.jpg) no-repeat scroll 10px 20px/70px 90px ,</span><br><span class="line">true   url(test1.jpg) no-repeat scroll 10px 20px/110px 130px c #aaa;</span><br></pre></td></tr></table></figure><ul><li>​</li></ul><h2 id="凹凸文字"><a href="#凹凸文字" class="headerlink" title="凹凸文字"></a>凹凸文字</h2><figure class="highlight"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br></pre></td><td class="code"><pre><span class="line">&lt;<span class="selector-tag">head</span>&gt;</span><br><span class="line">        &lt;meta charset="utf-8"&gt;</span><br><span class="line">        &lt;<span class="selector-tag">style</span>&gt;</span><br><span class="line">        <span class="selector-tag">body</span> &#123;</span><br><span class="line">        <span class="attribute">background-color</span>: <span class="number">#ccc</span>;</span><br><span class="line">        &#125;</span><br><span class="line">truetrue<span class="selector-tag">div</span> &#123;</span><br><span class="line">truetruetrue<span class="attribute">color</span>: <span class="number">#ccc</span>;</span><br><span class="line">truetruetrue<span class="attribute">font</span>: <span class="number">700</span> <span class="number">80px</span> <span class="string">"微软雅黑"</span>;</span><br><span class="line">truetrue&#125;</span><br><span class="line">truetrue<span class="selector-tag">div</span><span class="selector-pseudo">:first-child</span> &#123;</span><br><span class="line">truetruetrue<span class="comment">/* text-shadow: 水平位置  垂直位置  模糊距离 阴影颜色; */</span></span><br><span class="line">truetruetrue<span class="attribute">text-shadow</span>: <span class="number">1px</span> <span class="number">1px</span> <span class="number">1px</span> <span class="number">#000</span>, -<span class="number">1px</span> -<span class="number">1px</span> <span class="number">1px</span> <span class="number">#fff</span>;</span><br><span class="line">truetrue&#125;</span><br><span class="line">truetrue<span class="selector-tag">div</span><span class="selector-pseudo">:last-child</span> &#123;</span><br><span class="line">truetruetrue<span class="comment">/* text-shadow: 水平位置  垂直位置  模糊距离 阴影颜色; */</span></span><br><span class="line">truetruetrue<span class="attribute">text-shadow</span>: -<span class="number">1px</span> -<span class="number">1px</span> <span class="number">1px</span> <span class="number">#000</span>, <span class="number">1px</span> <span class="number">1px</span> <span class="number">1px</span> <span class="number">#fff</span>;</span><br><span class="line">truetrue&#125;</span><br><span class="line"></span><br><span class="line">        &lt;/style&gt;</span><br><span class="line">    &lt;/head&gt;</span><br><span class="line">    &lt;<span class="selector-tag">body</span>&gt;</span><br><span class="line">    &lt;div&gt;我是凸起的文字&lt;/div&gt;</span><br><span class="line">    &lt;div&gt;我是凹下的文字&lt;/div&gt;</span><br><span class="line">    &lt;/body&gt;</span><br></pre></td></tr></table></figure><p><img src="/media/1498467533412.png" alt="1498467533412"></p><h2 id="导航栏案例"><a href="#导航栏案例" class="headerlink" title="导航栏案例"></a>导航栏案例</h2><h3 id="文本的装饰"><a href="#文本的装饰" class="headerlink" title="文本的装饰"></a>文本的装饰</h3><p>text-decoration   通常我们用于给链接修改装饰效果</p><table><thead><tr><th>值</th><th>描述</th></tr></thead><tbody><tr><td>none</td><td>默认。定义标准的文本。</td></tr><tr><td>underline</td><td>定义文本下的一条线。下划线 也是我们链接自带的</td></tr><tr><td>overline</td><td>定义文本上的一条线。</td></tr><tr><td>line-through</td><td>定义穿过文本下的一条线。</td></tr><tr><td></td><td></td></tr><tr><td></td></tr></tbody></table><p><strong>使用技巧</strong>：在一行内的盒子内，我们设定行高等于盒子的高度，就可以使文字垂直居中。</p><figure class="highlight html"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br></pre></td><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">head</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">meta</span> <span class="attr">charset</span>=<span class="string">"utf-8"</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">style</span>&gt;</span><span class="undefined"></span></span><br><span class="line"><span class="undefined">body &#123;</span></span><br><span class="line"><span class="css"><span class="selector-tag">background-color</span>: <span class="selector-id">#000</span>;</span></span><br><span class="line"><span class="undefined">&#125;</span></span><br><span class="line"><span class="undefined">a &#123;</span></span><br><span class="line"><span class="undefined">width: 200px;</span></span><br><span class="line"><span class="undefined">height: 50px;</span></span><br><span class="line"><span class="css"><span class="comment">/* background-color: orange; */</span></span></span><br><span class="line"><span class="css"><span class="selector-tag">display</span>: <span class="selector-tag">inline-block</span>;  <span class="comment">/* 把a 行内元素转换为行内块元素 */</span></span></span><br><span class="line"><span class="css"><span class="selector-tag">text-align</span>: <span class="selector-tag">center</span>;  <span class="comment">/* 文字水平居中 */</span></span></span><br><span class="line"><span class="css"><span class="selector-tag">line-height</span>: 50<span class="selector-tag">px</span>;  <span class="comment">/* 我们设定行高等于盒子的高度，就可以使文字垂直居中 */</span></span></span><br><span class="line"><span class="css"><span class="selector-tag">color</span>: <span class="selector-id">#fff</span>;</span></span><br><span class="line"><span class="undefined">font-size: 22px;</span></span><br><span class="line"><span class="css"><span class="selector-tag">text-decoration</span>: <span class="selector-tag">none</span>;  <span class="comment">/* 取消下划线 文本装饰 */</span></span></span><br><span class="line"><span class="undefined">&#125;</span></span><br><span class="line"><span class="css"><span class="selector-tag">a</span><span class="selector-pseudo">:hover</span> &#123;  <span class="comment">/* 鼠标经过 给我们的链接添加背景图片*/</span></span></span><br><span class="line"><span class="undefined">background: url(images/h.png) no-repeat; </span></span><br><span class="line"><span class="undefined">&#125;</span></span><br><span class="line"><span class="undefined">        </span><span class="tag">&lt;/<span class="name">style</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;/<span class="name">head</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">body</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">a</span> <span class="attr">href</span>=<span class="string">"#"</span>&gt;</span>专区说明<span class="tag">&lt;/<span class="name">a</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">a</span> <span class="attr">href</span>=<span class="string">"#"</span>&gt;</span>申请资格<span class="tag">&lt;/<span class="name">a</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">a</span> <span class="attr">href</span>=<span class="string">"#"</span>&gt;</span>兑换奖励<span class="tag">&lt;/<span class="name">a</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">a</span> <span class="attr">href</span>=<span class="string">"#"</span>&gt;</span>下载游戏<span class="tag">&lt;/<span class="name">a</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;/<span class="name">body</span>&gt;</span></span><br></pre></td></tr></table></figure><h1 id="CSS-三大特性"><a href="#CSS-三大特性" class="headerlink" title="CSS 三大特性"></a>CSS 三大特性</h1><p>层叠 继承  优先级 是我们学习CSS 必须掌握的三个特性。</p><h2 id="CSS层叠性"><a href="#CSS层叠性" class="headerlink" title="CSS层叠性"></a>CSS层叠性</h2><p>所谓层叠性是指多种CSS样式的叠加。</p><p>是浏览器处理冲突的一个能力,如果一个属性通过两个相同选择器设置到同一个元素上，那么这个时候一个属性就会将另一个属性层叠掉</p><p>比如先给某个标签指定了内部文字颜色为红色，接着又指定了颜色为蓝色，此时出现一个标签指定了相同样式不同值的情况，这就是样式冲突。</p><p>一般情况下，如果出现样式冲突，则会按照CSS书写的顺序，以最后的样式为准。</p><ol><li>样式冲突，遵循的原则是就近原则。 那个样式离着结构近，就执行那个样式。</li><li>样式不冲突，不会层叠</li></ol><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">CSS最后的执行口诀：  长江后浪推前浪，前浪死在沙滩上。</span><br></pre></td></tr></table></figure><p><img src="/media/hai.gif" width="600" height="400"></p><h2 id="CSS继承性"><a href="#CSS继承性" class="headerlink" title="CSS继承性"></a>CSS继承性</h2><p>所谓继承性是指书写CSS样式表时，子标签会继承父标签的某些样式，如文本颜色和字号。想要设置一个可继承的属性，只需将它应用于父元素即可。</p><p>简单的理解就是：  子承父业。</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">CSS最后的执行口诀：  龙生龙，凤生凤，老鼠生的孩子会打洞。</span><br></pre></td></tr></table></figure><p><img src="/media/shu.gif"></p><p>注意：</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">恰当地使用继承可以简化代码，降低CSS样式的复杂性。子元素可以继承父元素的样式（text-，font-，line-这些元素开头的都可以继承，以及color属性）</span><br></pre></td></tr></table></figure><h2 id="CSS优先级"><a href="#CSS优先级" class="headerlink" title="CSS优先级"></a>CSS优先级</h2><p>定义CSS样式时，经常出现两个或更多规则应用在同一元素上，这时就会出现优先级的问题。</p><p>在考虑权重时，初学者还需要注意一些特殊的情况，具体如下：</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><span class="line">继承样式的权重为0。即在嵌套结构中，不管父元素样式的权重多大，被子元素继承时，他的权重都为0，也就是说子元素定义的样式会覆盖继承来的样式。</span><br><span class="line"></span><br><span class="line">行内样式优先。应用style属性的元素，其行内样式的权重非常高，可以理解为远大于100。总之，他拥有比上面提高的选择器都大的优先级。</span><br><span class="line"></span><br><span class="line">权重相同时，CSS遵循就近原则。也就是说靠近元素的样式具有最大的优先级，或者说排在最后的样式优先级最大。</span><br><span class="line"></span><br><span class="line">CSS定义了一个!important命令，该命令被赋予最大的优先级。也就是说不管权重如何以及样式位置的远近，!important都具有最大优先级。</span><br></pre></td></tr></table></figure><h3 id="CSS特殊性（Specificity）"><a href="#CSS特殊性（Specificity）" class="headerlink" title="CSS特殊性（Specificity）"></a>CSS特殊性（Specificity）</h3><p>关于CSS权重，我们需要一套计算公式来去计算，这个就是 CSS Specificity，我们称为CSS 特性或称非凡性，它是一个衡量CSS值优先级的一个标准 具体规范入如下：</p><p>specificity用一个四位的数 字串(CSS2是三位)来表示，更像四个级别，值从左到右，左面的最大，一级大于一级，数位之间没有进制，级别之间不可超越。 </p><table><thead><tr><th>继承或者* 的贡献值</th><th>0,0,0,0</th></tr></thead><tbody><tr><td>每个元素（标签）贡献值为</td><td>0,0,0,1</td></tr><tr><td>每个类，伪类贡献值为</td><td>0,0,1,0</td></tr><tr><td>每个ID贡献值为</td><td>0,1,0,0</td></tr><tr><td>每个行内样式贡献值</td><td>1,0,0,0</td></tr><tr><td>每个!important贡献值</td><td>∞ 无穷大</td></tr></tbody></table><p>权重是可以叠加的</p><p> 比如的例子：</p> <figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br></pre></td><td class="code"><pre><span class="line">div ul  li   ------&gt;      0,0,0,3</span><br><span class="line"></span><br><span class="line">.nav ul li   ------&gt;      0,0,1,2</span><br><span class="line"></span><br><span class="line">a:hover      -----—&gt;      0,0,1,1</span><br><span class="line"></span><br><span class="line">.nav a       ------&gt;      0,0,1,1   </span><br><span class="line"></span><br><span class="line">#nav p       -----&gt;       0,1,0,1</span><br></pre></td></tr></table></figure><p>​   </p><p>​      </p><p> <img src="/media/w.jpg"> 注意： </p><p>1.数位之间没有进制 比如说： 0,0,0,5 + 0,0,0,5 =0,0,0,10 而不是 0,0, 1, 0， 所以不会存在10个div能赶上一个类选择器的情况。</p><ol start="2"><li>继承的 权重是 0</li></ol><p>总结优先级：</p><ol><li>使用了 !important声明的规则。</li><li>内嵌在 HTML 元素的 style属性里面的声明。</li><li>使用了 ID 选择器的规则。</li><li>使用了类选择器、属性选择器、伪元素和伪类选择器的规则。</li><li>使用了元素选择器的规则。</li><li>只包含一个通用选择器的规则。</li><li>同一类选择器则遵循就近原则。</li></ol><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">总结：权重是优先级的算法，层叠是优先级的表现</span><br></pre></td></tr></table></figure><h1 id="盒子模型（CSS重点）"><a href="#盒子模型（CSS重点）" class="headerlink" title="盒子模型（CSS重点）"></a>盒子模型（CSS重点）</h1><p>其实，CSS就三个大模块：  盒子模型 、 浮动 、 定位，其余的都是细节。要求这三部分，无论如何也要学的非常精通。  </p><p>所谓盒子模型就是把HTML页面中的元素看作是一个矩形的盒子，也就是一个盛装内容的容器。每个矩形都由元素的内容、内边距（padding）、边框（border）和外边距（margin）组成。</p><h2 id="看透网页布局的本质"><a href="#看透网页布局的本质" class="headerlink" title="看透网页布局的本质"></a>看透网页布局的本质</h2><p>网页布局中，我们是如何把里面的文字，图片，按照美工给我们的效果图排列的整齐有序呢？</p><p><img src="/media/t.png"></p><p>牛奶是怎样运输，让消费者购买的呢？</p><p><img src="/media/m.jpg"></p><p>我们说过，行内元素比如 文字 类似牛奶，也需要一个盒子把他们装起来，我们前面学过的双标签都是一个盒子。有了盒子，我们就可以随意的，自由的，摆放位置了。</p><p>看透网页布局的本质：  把网页元素比如文字图片等等，放入盒子里面，然后利用CSS摆放盒子的过程，就是网页布局。</p><p><img src="/media/t1.png"></p><p>CSS 其实没有太多逻辑可言 ， 类似我们小时候玩的积木,我们可以自由的，随意的摆放出我们想要的效果。</p><p><img src="/media/j.jpg" width="300"></p><h2 id="盒子模型（Box-Model）"><a href="#盒子模型（Box-Model）" class="headerlink" title="盒子模型（Box Model）"></a>盒子模型（Box Model）</h2><p>这里略过 老旧的ie盒子模型（IE6以下），对不起，我都没见过IE5的浏览器。 </p><p><img src="/media/d.jpg"></p><p>。首先，我们来看一张图，来体会下什么是盒子模型。</p><p><img src="/media/box.png" width="700"></p><p>所有的文档元素（标签）都会生成一个矩形框，我们成为元素框（element box），它描述了一个文档元素再网页布局汇总所占的位置大小。因此，<strong style="color: #f00;">每个盒子除了有自己大小和位置外，还影响着其他盒子的大小和位置。</strong></p><p><img src="/media/boxs.png" width="700"></p><h2 id="盒子边框（border）"><a href="#盒子边框（border）" class="headerlink" title="盒子边框（border）"></a>盒子边框（border）</h2><p>边框就是那层皮。  橘子皮。。柚子皮。。橙子皮。。。</p><p>语法： </p><figure class="highlight"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">border : border-width || border-style || border-color</span><br></pre></td></tr></table></figure><p>边框属性—设置边框样式（border-style）</p><p>边框样式用于定义页面中边框的风格，常用属性值如下：</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br></pre></td><td class="code"><pre><span class="line">none：没有边框即忽略所有边框的宽度（默认值）</span><br><span class="line"></span><br><span class="line">solid：边框为单实线(最为常用的)</span><br><span class="line"></span><br><span class="line">dashed：边框为虚线  </span><br><span class="line"></span><br><span class="line">dotted：边框为点线</span><br><span class="line"></span><br><span class="line">double：边框为双实线</span><br></pre></td></tr></table></figure><h3 id="盒子边框写法总结表"><a href="#盒子边框写法总结表" class="headerlink" title="盒子边框写法总结表"></a>盒子边框写法总结表</h3><table><thead><tr><th></th><th></th><th></th></tr></thead><tbody><tr><td>设置内容</td><td>样式属性</td><td>常用属性值</td></tr><tr><td>上边框</td><td>border-top-style:样式; border-top-width:宽度;border-top-color:颜色;border-top:宽度 样式 颜色;</td><td></td></tr><tr><td>下边框</td><td>border-bottom-style:样式;border- bottom-width:宽度;border- bottom-color:颜色;border-bottom:宽度 样式 颜色;</td><td></td></tr><tr><td>左边框</td><td>border-left-style:样式; border-left-width:宽度;border-left-color:颜色;border-left:宽度 样式 颜色;</td><td></td></tr><tr><td>右边框</td><td>border-right-style:样式;border-right-width:宽度;border-right-color:颜色;border-right:宽度 样式 颜色;</td><td></td></tr><tr><td>样式综合设置</td><td>border-style:上边 [右边 下边 左边];</td><td>none无（默认）、solid单实线、dashed虚线、dotted点线、double双实线</td></tr><tr><td>宽度综合设置</td><td>border-width:上边 [右边 下边 左边];</td><td>像素值</td></tr><tr><td>颜色综合设置</td><td>border-color:上边 [右边 下边 左边];</td><td>颜色值、#十六进制、rgb(r,g,b)、rgb(r%,g%,b%)</td></tr><tr><td>边框综合设置</td><td>border:四边宽度 四边样式 四边颜色;</td></tr></tbody></table><h3 id="表格的细线边框"><a href="#表格的细线边框" class="headerlink" title="表格的细线边框"></a>表格的细线边框</h3><p>以前学过的html表格边框很粗，这里只需要CSS一句话就可以美观起来。 让我们真的相信，CSS就是我们的白马王子（白雪公主）。</p><p>table{ border-collapse:collapse; }  collapse 单词是合并的意思</p><p>border-collapse:collapse; 表示边框合并在一起。</p><h3 id="圆角边框-CSS3"><a href="#圆角边框-CSS3" class="headerlink" title="圆角边框(CSS3)"></a>圆角边框(CSS3)</h3><p>从此以后，我们的世界不只有矩形。radius 半径（距离）</p><p>语法格式：</p><figure class="highlight css"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line"><span class="selector-tag">border-radius</span>: 左上角  右上角  右下角  左下角;</span><br></pre></td></tr></table></figure><p>课堂案例:</p><figure class="highlight html"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br></pre></td><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">style</span>&gt;</span><span class="undefined"></span></span><br><span class="line"><span class="undefined">div &#123;</span></span><br><span class="line"><span class="undefined">width: 200px;</span></span><br><span class="line"><span class="undefined">height: 200px;</span></span><br><span class="line"><span class="undefined">border: 1px solid red;</span></span><br><span class="line"><span class="undefined">&#125;</span></span><br><span class="line"><span class="css"><span class="selector-tag">div</span><span class="selector-pseudo">:first-child</span> &#123;  <span class="comment">/* 结构伪类选择器 选亲兄弟 */</span></span></span><br><span class="line"><span class="css"><span class="selector-tag">border-radius</span>: 10<span class="selector-tag">px</span>;  <span class="comment">/*  一个数值表示4个角都是相同的 10px 的弧度 */</span> </span></span><br><span class="line"><span class="undefined">&#125;</span></span><br><span class="line"><span class="undefined"></span></span><br><span class="line"><span class="css"><span class="selector-tag">div</span><span class="selector-pseudo">:nth-child(2)</span> &#123;</span></span><br><span class="line"><span class="css"><span class="comment">/*border-radius: 100px;    取宽度和高度 一半  则会变成一个圆形 */</span></span></span><br><span class="line"><span class="css"><span class="selector-tag">border-radius</span>: 50%;   <span class="comment">/*  100px   50% 取宽度和高度 一半  则会变成一个圆形 */</span></span></span><br><span class="line"><span class="undefined">&#125;</span></span><br><span class="line"><span class="undefined"></span></span><br><span class="line"><span class="css"><span class="selector-tag">div</span><span class="selector-pseudo">:nth-child(3)</span> &#123;</span></span><br><span class="line"><span class="css"><span class="selector-tag">border-radius</span>: 10<span class="selector-tag">px</span> 40<span class="selector-tag">px</span>;  <span class="comment">/* 左上角  和 右下角  是 10px  右上角 左下角 40 对角线 */</span></span></span><br><span class="line"><span class="undefined">&#125;</span></span><br><span class="line"><span class="undefined"></span></span><br><span class="line"><span class="css"><span class="selector-tag">div</span><span class="selector-pseudo">:nth-child(4)</span> &#123;</span></span><br><span class="line"><span class="css"><span class="selector-tag">border-radius</span>: 10<span class="selector-tag">px</span> 40<span class="selector-tag">px</span>  80<span class="selector-tag">px</span>;   <span class="comment">/* 左上角 10    右上角  左下角 40   右下角80 */</span></span></span><br><span class="line"><span class="undefined">&#125;</span></span><br><span class="line"><span class="css"><span class="selector-tag">div</span><span class="selector-pseudo">:nth-child(5)</span> &#123;</span></span><br><span class="line"><span class="css"><span class="selector-tag">border-radius</span>: 10<span class="selector-tag">px</span> 40<span class="selector-tag">px</span>  80<span class="selector-tag">px</span>  100<span class="selector-tag">px</span>;   <span class="comment">/* 左上角 10    右上角 40  右下角 80   左下角   右下角100 */</span></span></span><br><span class="line"><span class="undefined">&#125;</span></span><br><span class="line"><span class="css"><span class="selector-tag">div</span><span class="selector-pseudo">:nth-child(6)</span> &#123;</span></span><br><span class="line"><span class="undefined">border-radius: 100px;  </span></span><br><span class="line"><span class="undefined">height: 100px; </span></span><br><span class="line"><span class="undefined">&#125;</span></span><br><span class="line"><span class="css"><span class="selector-tag">div</span><span class="selector-pseudo">:nth-child(7)</span> &#123;</span></span><br><span class="line"><span class="undefined">border-radius: 100px 0;  </span></span><br><span class="line"><span class="undefined">&#125;</span></span><br><span class="line"><span class="undefined">        </span><span class="tag">&lt;/<span class="name">style</span>&gt;</span></span><br></pre></td></tr></table></figure><h2 id="内边距（padding）"><a href="#内边距（padding）" class="headerlink" title="内边距（padding）"></a>内边距（padding）</h2><p>padding属性用于设置内边距。  是指 边框与内容之间的距离。</p><p>padding-top:上内边距</p><p>padding-right:右内边距</p><p>padding-bottom:下内边距</p><p>padding-left:左内边距</p><p> <img src="/media/w.jpg">注意：  后面跟几个数值表示的意思是不一样的。</p><table><thead><tr><th>值的个数</th><th>表达意思</th></tr></thead><tbody><tr><td>1个值</td><td>padding：上下左右边距 比如padding: 3px; 表示上下左右都是3像素</td></tr><tr><td>2个值</td><td>padding: 上下边距 左右边距 比如 padding: 3px 5px; 表示 上下3像素 左右 5像素</td></tr><tr><td>3个值</td><td>padding：上边距 左右边距 下边距 比如 padding: 3px 5px 10px; 表示 上是3像素 左右是5像素 下是10像素</td></tr><tr><td>4个值</td><td>padding:上内边距 右内边距 下内边距 左内边距 比如: padding: 3px 5px 10px 15px; 表示 上3px 右是5px 下 10px 左15px 顺时针</td></tr></tbody></table><p>课堂案例：  新浪导航</p><p><img src="/media/al.gif"></p><h2 id="外边距（margin）"><a href="#外边距（margin）" class="headerlink" title="外边距（margin）"></a>外边距（margin）</h2><p>margin属性用于设置外边距。  设置外边距会在元素之间创建“空白”， 这段空白通常不能放置其他内容。</p><p>margin-top:上外边距</p><p>margin-right:右外边距</p><p>margin-bottom:下外边距</p><p>margin-left:上外边距</p><p>margin:上外边距 右外边距  下外边距  左外边</p><p>取值顺序跟内边距相同。</p><h3 id="外边距实现盒子居中"><a href="#外边距实现盒子居中" class="headerlink" title="外边距实现盒子居中"></a>外边距实现盒子居中</h3><p>可以让一个盒子实现水平居中，需要满足一下两个条件：</p><ol><li>必须是块级元素。     </li><li>盒子必须指定了宽度（width）</li></ol><p>然后就给<strong>左右的外边距都设置为auto</strong>，就可使块级元素水平居中。</p><p>实际工作中常用这种方式进行网页布局，示例代码如下：</p><figure class="highlight css"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line"><span class="selector-class">.header</span>&#123; <span class="attribute">width</span>:<span class="number">960px</span>; <span class="attribute">margin</span>:<span class="number">0</span> auto;&#125;</span><br></pre></td></tr></table></figure><h3 id="文字盒子居中图片和背景区别"><a href="#文字盒子居中图片和背景区别" class="headerlink" title="文字盒子居中图片和背景区别"></a>文字盒子居中图片和背景区别</h3><ol><li>文字水平居中是  text-align: center</li><li>盒子水平居中  左右margin 改为 auto </li></ol><figure class="highlight css"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line"><span class="selector-tag">text-align</span>: <span class="selector-tag">center</span>; <span class="comment">/*  文字居中水平 */</span></span><br><span class="line"><span class="selector-tag">margin</span>: 10<span class="selector-tag">px</span> <span class="selector-tag">auto</span>;  <span class="comment">/* 盒子水平居中  左右margin 改为 auto 就阔以了 */</span></span><br></pre></td></tr></table></figure><ol start="3"><li>插入图片 我们用的最多 比如产品展示类</li><li>背景图片我们一般用于小图标背景 或者 超大背景图片</li></ol><figure class="highlight css"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br></pre></td><td class="code"><pre><span class="line"><span class="selector-tag">section</span> <span class="selector-tag">img</span> &#123;  </span><br><span class="line">truetrue<span class="attribute">width</span>: <span class="number">200px</span>;<span class="comment">/* 插入图片更改大小 width 和 height */</span></span><br><span class="line">truetrue<span class="attribute">height</span>: <span class="number">210px</span>;</span><br><span class="line">truetrue<span class="attribute">margin-top</span>: <span class="number">30px</span>;  <span class="comment">/* 插入图片更改位置 可以用margin 或padding  盒模型 */</span></span><br><span class="line">truetrue<span class="attribute">margin-left</span>: <span class="number">50px</span>; <span class="comment">/* 插入当图片也是一个盒子 */</span></span><br><span class="line">true&#125;</span><br><span class="line"></span><br><span class="line"><span class="selector-tag">aside</span> &#123;</span><br><span class="line">truetrue<span class="attribute">width</span>: <span class="number">400px</span>;</span><br><span class="line">truetrue<span class="attribute">height</span>: <span class="number">400px</span>;</span><br><span class="line">truetrue<span class="attribute">border</span>: <span class="number">1px</span> solid purple;</span><br><span class="line">truetrue<span class="attribute">background</span>: <span class="number">#fff</span> <span class="built_in">url</span>(images/sun.jpg) no-repeat;</span><br><span class="line">true</span><br><span class="line">truetrue<span class="attribute">background-size</span>: <span class="number">200px</span> <span class="number">210px</span>; <span class="comment">/*  背景图片更改大小只能用 background-size */</span></span><br><span class="line">truetrue<span class="attribute">background-position</span>: <span class="number">30px</span> <span class="number">50px</span>; <span class="comment">/* 背景图片更该位置 我用 background-position */</span></span><br><span class="line">true&#125;</span><br></pre></td></tr></table></figure><h3 id="清除元素的默认内外边距"><a href="#清除元素的默认内外边距" class="headerlink" title="清除元素的默认内外边距"></a>清除元素的默认内外边距</h3><p>为了更方便地控制网页中的元素，制作网页时，可使用如下代码清除元素的默认内外边距： </p><figure class="highlight css"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line">* &#123;</span><br><span class="line">   <span class="attribute">padding</span>:<span class="number">0</span>;         <span class="comment">/* 清除内边距 */</span></span><br><span class="line">   <span class="attribute">margin</span>:<span class="number">0</span>;          <span class="comment">/* 清除外边距 */</span></span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>注意：  行内元素是只有左右外边距的，是没有上下外边距的。 内边距，在ie6等低版本浏览器也会有问题。</p><p>我们尽量不要给行内元素指定上下的内外边距就好了。</p><h2 id="外边距合并"><a href="#外边距合并" class="headerlink" title="外边距合并"></a>外边距合并</h2><p>使用margin定义块元素的垂直外边距时，可能会出现外边距的合并。</p><h3 id="相邻块元素垂直外边距的合并"><a href="#相邻块元素垂直外边距的合并" class="headerlink" title="相邻块元素垂直外边距的合并"></a>相邻块元素垂直外边距的合并</h3><p>当上下相邻的两个块元素相遇时，如果上面的元素有下外边距margin-bottom，下面的元素有上外边距margin-top，则他们之间的垂直间距不是margin-bottom与margin-top之和，而是两者中的较大者。这种现象被称为相邻块元素垂直外边距的合并（也称外边距塌陷）。</p><p><img src="/media/www.png"></p><p>解决方案：  避免就好了。</p><h3 id="嵌套块元素垂直外边距的合并"><a href="#嵌套块元素垂直外边距的合并" class="headerlink" title="嵌套块元素垂直外边距的合并"></a>嵌套块元素垂直外边距的合并</h3><p>对于两个嵌套关系的块元素，如果父元素没有上内边距及边框，则父元素的上外边距会与子元素的上外边距发生合并，合并后的外边距为两者中的较大者，即使父元素的上外边距为0，也会发生合并。</p><p><img src="/media/n.png"></p><p>解决方案：</p><ol><li>可以为父元素定义1像素的上边框或上内边距。</li><li>可以为父元素添加overflow:hidden。</li></ol><p>待续。。。。</p><h2 id="content宽度和高度"><a href="#content宽度和高度" class="headerlink" title="content宽度和高度"></a>content宽度和高度</h2><p>使用宽度属性width和高度属性height可以对盒子的大小进行控制。</p><p>width和height的属性值可以为不同单位的数值或相对于父元素的百分比%，实际工作中最常用的是像素值。</p><p>大多数浏览器，如Firefox、IE6及以上版本都采用了W3C规范，符合CSS规范的盒子模型的总宽度和总高度的计算原则是：</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line">/*外盒尺寸计算（元素空间尺寸）*/</span><br><span class="line">Element空间高度 = content height + padding + border + margin</span><br><span class="line">Element 空间宽度 = content width + padding + border + margin</span><br><span class="line">/*内盒尺寸计算（元素实际大小）*/</span><br><span class="line">Element Height = content height + padding + border （Height为内容高度）</span><br><span class="line">Element Width = content width + padding + border （Width为内容宽度）</span><br></pre></td></tr></table></figure><p>注意：</p><p>1、宽度属性width和高度属性height仅适用于块级元素，对行内元素无效（ img 标签和 input除外）。</p><p>2、计算盒子模型的总高度时，还应考虑上下两个盒子垂直外边距合并的情况。</p><p>3、<strong>如果一个盒子没有给定宽度/高度或者继承父亲的宽度/高度，则padding 不会影响本盒子大小</strong>。</p><h2 id="盒子模型布局稳定性"><a href="#盒子模型布局稳定性" class="headerlink" title="盒子模型布局稳定性"></a>盒子模型布局稳定性</h2><p>开始学习盒子模型，同学们最大的困惑就是， 分不清内外边距的使用，什么情况下使用内边距，什么情况下使用外边距？</p><p>答案是：  其实他们大部分情况下是可以混用的。  就是说，你用内边距也可以，用外边距也可以。 你觉得哪个方便，就用哪个。</p><p>但是，总有一个最好用的吧，我们根据稳定性来分，建议如下：</p><p>按照 优先使用  宽度 （width）  其次 使用内边距（padding）    再次  外边距（margin）。   </p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">width &gt;  padding  &gt;   margin</span><br></pre></td></tr></table></figure><p>原因：</p><ol><li><p>margin 会有外边距合并 还有 ie6下面margin 加倍的bug（讨厌）所以最后使用。</p></li><li><p>padding  会影响盒子大小， 需要进行加减计算（麻烦） 其次使用。</p></li><li><p>width   没有问题（嗨皮）我们经常使用宽度剩余法 高度剩余法来做。</p><p>​</p></li></ol><h2 id="CSS3盒模型"><a href="#CSS3盒模型" class="headerlink" title="CSS3盒模型"></a>CSS3盒模型</h2><p>CSS3中可以通过box-sizing 来指定盒模型，即可指定为content-box、border-box，这样我们计算盒子大小的方式就发生了改变。</p><p>可以分成两种情况：</p><p>1、box-sizing: content-box  盒子大小为 width + padding + border   content-box:此值为其默认值，其让元素维持W3C的标准Box Mode</p><p>2、box-sizing: border-box  盒子大小为 width    就是说  padding 和 border 是包含到width里面的</p><p>注：上面的标注的width指的是CSS属性里设置的width: length，content的值是会自动调整的。</p><figure class="highlight css"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br></pre></td><td class="code"><pre><span class="line"><span class="selector-tag">div</span><span class="selector-pseudo">:first-child</span> &#123;</span><br><span class="line">truetruetrue<span class="attribute">width</span>: <span class="number">200px</span>;</span><br><span class="line">truetruetrue<span class="attribute">height</span>: <span class="number">200px</span>;</span><br><span class="line">truetruetrue<span class="attribute">background-color</span>: pink; </span><br><span class="line">truetruetrue<span class="attribute">box-sizing</span>: content-box;  <span class="comment">/*  就是以前的标准盒模型  w3c */</span></span><br><span class="line">truetruetrue<span class="attribute">padding</span>: <span class="number">10px</span>;</span><br><span class="line">truetruetrue<span class="attribute">border</span>: <span class="number">15px</span> solid red;</span><br><span class="line">truetruetrue<span class="comment">/* 盒子大小为 width + padding + border   content-box:此值为其默认值，其让元素维持W3C的标准Box Mode */</span></span><br><span class="line">truetrue&#125;</span><br><span class="line">truetrue<span class="selector-tag">div</span><span class="selector-pseudo">:last-child</span> &#123;</span><br><span class="line">truetruetrue<span class="attribute">width</span>: <span class="number">200px</span>;</span><br><span class="line">truetruetrue<span class="attribute">height</span>: <span class="number">200px</span>;</span><br><span class="line">truetruetrue<span class="attribute">background-color</span>: purple;</span><br><span class="line">truetruetrue<span class="attribute">padding</span>: <span class="number">10px</span>;</span><br><span class="line">truetruetrue<span class="attribute">box-sizing</span>: border-box;   <span class="comment">/* padding border  不撑开盒子 */</span></span><br><span class="line">truetruetrue<span class="attribute">border</span>: <span class="number">15px</span> solid red;</span><br><span class="line">truetruetrue<span class="comment">/* margin: 10px; */</span></span><br><span class="line">truetruetrue<span class="comment">/* 盒子大小为 width    就是说  padding 和 border 是包含到width里面的 */</span></span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h2 id="盒子阴影"><a href="#盒子阴影" class="headerlink" title="盒子阴影"></a>盒子阴影</h2><p>语法格式：</p><figure class="highlight"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">box-shadow:水平阴影 垂直阴影 模糊距离 阴影尺寸 阴影颜色  内/外阴影；</span><br></pre></td></tr></table></figure><p><img src="/media/1498467567011.png" alt="1498467567011"></p><ol><li>前两个属性是必须写的。其余的可以省略。</li><li>外阴影 (outset) 但是不能写    默认      想要内阴影  inset </li></ol><figure class="highlight css"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br></pre></td><td class="code"><pre><span class="line"><span class="selector-tag">div</span> &#123;</span><br><span class="line">truetruetrue<span class="attribute">width</span>: <span class="number">200px</span>;</span><br><span class="line">truetruetrue<span class="attribute">height</span>: <span class="number">200px</span>;</span><br><span class="line">truetruetrue<span class="attribute">border</span>: <span class="number">10px</span> solid red;</span><br><span class="line">truetruetrue<span class="comment">/* box-shadow: 5px 5px 3px 4px rgba(0, 0, 0, .4);  */</span></span><br><span class="line">truetruetrue<span class="comment">/* box-shadow:水平位置 垂直位置 模糊距离 阴影尺寸（影子大小） 阴影颜色  内/外阴影； */</span></span><br><span class="line">truetruetrue<span class="attribute">box-shadow</span>: <span class="number">0</span> <span class="number">15px</span> <span class="number">30px</span>  <span class="built_in">rgba</span>(0, 0, 0, .4);</span><br><span class="line">truetruetrue</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h1 id="浮动-float"><a href="#浮动-float" class="headerlink" title="浮动(float)"></a>浮动(float)</h1><h2 id="普通流-normal-flow"><a href="#普通流-normal-flow" class="headerlink" title="普通流(normal flow)"></a>普通流(normal flow)</h2><p>这个单词很多人翻译为 文档流 ， 字面翻译  普通流 或者标准流都可以。</p><p>前面我们说过，网页布局的核心，就是用CSS来摆放盒子位置。如何把盒子摆放到合适的位置？  </p><p>CSS的定位机制有3种：普通流（标准流）、浮动和定位。</p><p>html语言当中另外一个相当重要的概念———-标准流！或者普通流。普通流实际上就是一个网页内标签元素正常从上到下，从左到右排列顺序的意思，比如块级元素会独占一行，行内元素会按顺序依次前后排列；按照这种大前提的布局排列之下绝对不会出现例外的情况叫做普通流布局。</p><p><img src="/media/t.jpg"></p><h2 id="浮动-float-1"><a href="#浮动-float-1" class="headerlink" title="浮动(float)"></a>浮动(float)</h2><p>浮动最早是用来控制图片，以便达到其他元素（特别是文字）实现“环绕”图片的效果。</p><p><img src="/media/l.png" style="width: 600px; border: 2px solid #000;"></p><p>后来，我们发现浮动有个很有意思的事情：就是让任何盒子可以一行排列,因此我们就慢慢的偏离主题，用浮动的特性来布局了。（CSS3已经我们真正意义上的网页布局，具体CSS3我们会详细解释）</p><p><img src="/media/d.png"></p><h2 id="什么是浮动？"><a href="#什么是浮动？" class="headerlink" title="什么是浮动？"></a>什么是浮动？</h2><p>元素的浮动是指设置了浮动属性的元素会脱离标准普通流的控制，移动到其父元素中指定位置的过程。</p><p>在CSS中，通过float属性来定义浮动，其基本语法格式如下：</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">选择器&#123;float:属性值;&#125;</span><br></pre></td></tr></table></figure><table><thead><tr><th>属性值</th><th>描述</th></tr></thead><tbody><tr><td>left</td><td>元素向左浮动</td></tr><tr><td>right</td><td>元素向右浮动</td></tr><tr><td>none</td><td>元素不浮动（默认值）</td></tr></tbody></table><h2 id="浮动详细内幕特性"><a href="#浮动详细内幕特性" class="headerlink" title="浮动详细内幕特性"></a>浮动详细内幕特性</h2><p>浮动脱离标准流，不占位置，会影响标准流。浮动只有左右浮动。</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">浮动首先创建包含块的概念（包裹）。就是说， 浮动的元素总是找理它最近的父级元素对齐。但是不会超出内边距的范围。</span><br></pre></td></tr></table></figure><p>   <img src="/media/one.jpg" width="500"> </p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">浮动的元素排列位置，跟上一个元素（块级）有关系。如果上一个元素有浮动，则A元素顶部会和上一个元素的顶部对齐；如果上一个元素是标准流，则A元素的顶部会和上一个元素的底部对齐。</span><br></pre></td></tr></table></figure><p>  <img src="/media/two.jpg" width="400"></p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">由2可以推断出，一个父盒子里面的子盒子，如果其中一个子级有浮动的，则其他子级都需要浮动。这样才能一行对齐显示。</span><br></pre></td></tr></table></figure><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">元素添加浮动后，元素会具有行内块元素的特性。元素的大小完全取决于定义的大小或者默认的内容多少浮动根据元素书写的位置来显示相应的浮动。</span><br></pre></td></tr></table></figure><p>总结：  浮动 —&gt;    </p><p>浮动的目的就是为了让多个块级元素同一行上显示。</p><p>float      浮 漏 特   </p><p>浮：    加了浮动的元素盒子是浮起来的，漂浮在其他的标准流盒子上面。<br>漏：    加了浮动的盒子，不占位置的，它浮起来了，它原来的位置漏 给了标准流的盒子。<br>特：    特别注意，首先浮动的盒子需要和标准流的父级搭配使用， 其次 特别的注意浮动可以使元素显示模式体现为行内块特性。</p><h1 id="版心和布局流程"><a href="#版心和布局流程" class="headerlink" title="版心和布局流程"></a>版心和布局流程</h1><p>阅读报纸时容易发现，虽然报纸中的内容很多，但是经过合理地排版，版面依然清晰、易读。同样，在制作网页时，要想使页面结构清晰、有条理，也需要对网页进行“排版”。</p><p>“版心”(可视区) 是指网页中主体内容所在的区域。一般在浏览器窗口中水平居中显示，常见的宽度值为960px、980px、1000px、1200px等。</p><h2 id="布局流程"><a href="#布局流程" class="headerlink" title="布局流程"></a>布局流程</h2><p>为了提高网页制作的效率，布局时通常需要遵守一定的布局流程，具体如下：</p><p>1、确定页面的版心（可视区）。</p><p>2、分析页面中的行模块，以及每个行模块中的列模块。</p><p>3、制作HTML结构 。</p><p>4、CSS初始化，然后开始运用盒子模型的原理，通过DIV+CSS布局来控制网页的各个模块。</p><h2 id="一列固定宽度且居中"><a href="#一列固定宽度且居中" class="headerlink" title="一列固定宽度且居中"></a>一列固定宽度且居中</h2><p><img src="/media/yl.jpg" width="400"></p><p>最普通的，最为常用的结构</p><h2 id="两列左窄右宽型"><a href="#两列左窄右宽型" class="headerlink" title="两列左窄右宽型"></a>两列左窄右宽型</h2><p><img src="/media/ll.jpg" width="400"></p><p>比如小米    <a href="http://www.mi.com" target="_blank"> 小米官网 </a></p><h2 id="通栏平均分布型"><a href="#通栏平均分布型" class="headerlink" title="通栏平均分布型"></a>通栏平均分布型</h2><p><img src="/media/tl.jpg" width="600"></p><p>比如锤子    <a href="http://www.smartisan.com/" target="_blank"> 锤子官网 </a></p><h1 id="清除浮动"><a href="#清除浮动" class="headerlink" title="清除浮动"></a>清除浮动</h1><p>人生就像乘坐北京地铁一号线：</p><p>途经国贸，羡慕繁华；</p><p>途经天安门，幻想权力；</p><p>途经金融街，梦想发财；</p><p>经过公主坟，遥想华丽家族；</p><p>经过玉泉路，依然雄心勃勃…</p><p>这时，有个声音飘然入耳:乘客你好,八宝山马上就要到了！</p><p>顿时醒悟：人生苦短，有始有终。 </p><p>好比我们的浮动，有浮动开始，则就应该有浮动结束。</p><h2 id="为什么要清除浮动"><a href="#为什么要清除浮动" class="headerlink" title="为什么要清除浮动"></a>为什么要清除浮动</h2><p>我们前面说过，浮动本质是用来做一些文字混排效果的，但是被我们拿来做布局用，则会有很多的问题出现， 但是，你不能说浮动不好 <img src="/media/wq.jpg" height="100">。  </p><p>由于浮动元素不再占用原文档流的位置，所以它会对后面的元素排版产生影响，为了解决这些问题，此时就需要在该元素中清除浮动。</p><p>准确地说，并不是清除浮动，而是<strong>清除浮动后造成的影响</strong></p><p>如果浮动一开始就是一个美丽的错误，那么请用正确的方法挽救它。</p><h2 id="清除浮动本质"><a href="#清除浮动本质" class="headerlink" title="清除浮动本质"></a>清除浮动本质</h2><p>清除浮动主要为了解决父级元素因为子级浮动引起内部高度为0 的问题。</p><p><img src="/media/n.jpg"></p><p><img src="/media/no.jpg"></p><p><img src="/media/kc.jpg"></p><h2 id="清除浮动的方法"><a href="#清除浮动的方法" class="headerlink" title="清除浮动的方法"></a>清除浮动的方法</h2><p>其实本质叫做闭合浮动更好一些, 记住，清除浮动就是把浮动的盒子圈到里面，让父盒子闭合出口和入口不让他们出来影响其他元素。</p><p>在CSS中，clear属性用于清除浮动，其基本语法格式如下：</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">选择器&#123;clear:属性值;&#125;</span><br></pre></td></tr></table></figure><table><thead><tr><th>属性值</th><th>描述</th></tr></thead><tbody><tr><td>left</td><td>不允许左侧有浮动元素（清除左侧浮动的影响）</td></tr><tr><td>right</td><td>不允许右侧有浮动元素（清除右侧浮动的影响）</td></tr><tr><td>both</td><td>同时清除左右两侧浮动的影响</td></tr></tbody></table><h3 id="额外标签法"><a href="#额外标签法" class="headerlink" title="额外标签法"></a>额外标签法</h3><figure class="highlight html"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">是W3C推荐的做法是通过在浮动元素末尾添加一个空的标签例如 <span class="tag">&lt;<span class="name">div</span> <span class="attr">style</span>=<span class="string">”clear:both”</span>&gt;</span><span class="tag">&lt;/<span class="name">div</span>&gt;</span>，或则其他标签br等亦可。</span><br></pre></td></tr></table></figure><p>优点： 通俗易懂，书写方便</p><p>缺点： 添加许多无意义的标签，结构化较差。  我只能说，w3c你推荐的方法我不接受，你不值得拥有。。。</p><h3 id="父级添加overflow属性方法"><a href="#父级添加overflow属性方法" class="headerlink" title="父级添加overflow属性方法"></a>父级添加overflow属性方法</h3><p>可以通过触发BFC的方式，可以实现清除浮动效果。（BFC后面讲解）</p><figure class="highlight"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">可以给父级添加： overflow为 hidden|auto|scroll  都可以实现。</span><br></pre></td></tr></table></figure><p>优点：  代码简洁</p><p>缺点：  内容增多时候容易造成不会自动换行导致内容被隐藏掉，无法显示需要溢出的元素。</p><h3 id="使用after伪元素清除浮动"><a href="#使用after伪元素清除浮动" class="headerlink" title="使用after伪元素清除浮动"></a>使用after伪元素清除浮动</h3><p><strong>:after 方式为空元素的升级版，好处是不用单独加标签了</strong> </p><p>使用方法：</p><figure class="highlight"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line"><span class="selector-class">.clearfix</span><span class="selector-pseudo">:after</span> &#123;  <span class="attribute">content</span>: <span class="string">"."</span>; <span class="attribute">display</span>: block; <span class="attribute">height</span>: <span class="number">0</span>; <span class="attribute">clear</span>: both; <span class="attribute">visibility</span>: hidden;  &#125;   </span><br><span class="line"></span><br><span class="line">.clearfix &#123;*zoom: 1;&#125;   /* IE6、7 专有 */</span><br></pre></td></tr></table></figure><p>优点： 符合闭合浮动思想  结构语义化正确</p><p>缺点： 由于IE6-7不支持:after，使用 zoom:1触发 hasLayout。</p><p>代表网站： 百度、淘宝网、网易等</p><p><img src="/media/163.png" style="border: 1px dashed #3c3c3c;"></p><p>注意： content:”.”  里面尽量跟一个小点，或者其他，尽量不要为空，否则再firefox 7.0前的版本会有生成空格。</p><h3 id="使用before和after双伪元素清除浮动"><a href="#使用before和after双伪元素清除浮动" class="headerlink" title="使用before和after双伪元素清除浮动"></a>使用before和after双伪元素清除浮动</h3><p>使用方法：</p><figure class="highlight css"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br></pre></td><td class="code"><pre><span class="line"><span class="selector-class">.clearfix</span><span class="selector-pseudo">:before</span>,<span class="selector-class">.clearfix</span><span class="selector-pseudo">:after</span> &#123; </span><br><span class="line">  <span class="attribute">content</span>:<span class="string">""</span>;</span><br><span class="line">  <span class="attribute">display</span>:table;  <span class="comment">/* 这句话可以出发BFC BFC可以清除浮动,BFC我们后面讲 */</span></span><br><span class="line">&#125;</span><br><span class="line"><span class="selector-class">.clearfix</span><span class="selector-pseudo">:after</span> &#123;</span><br><span class="line"> <span class="attribute">clear</span>:both;</span><br><span class="line">&#125;</span><br><span class="line"><span class="selector-class">.clearfix</span> &#123;</span><br><span class="line">  *zoom:1;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>优点：  代码更简洁</p><p>缺点：  由于IE6-7不支持:after，使用 zoom:1触发 hasLayout。</p><p>代表网站： 小米、腾讯等</p><h1 id="Photoshop图像处理专家"><a href="#Photoshop图像处理专家" class="headerlink" title="Photoshop图像处理专家"></a>Photoshop图像处理专家</h1><p><img src="/media/1498465020015.png" alt="1498465020015"></p><p>PS 工具是我们使用频率比较高的软件之一， 我们学习PS目的不是为了设计海报做电商和UI的，而是要求：</p><ol><li>会简单的抠图</li><li>会简单的修改PSD效果图</li><li><strong>熟练的切图</strong></li><li>能和网站美工美眉有共同话题。。。。。</li></ol><h2 id="Photoshop基本使用"><a href="#Photoshop基本使用" class="headerlink" title="Photoshop基本使用"></a>Photoshop基本使用</h2><h2 id="PS界面组成："><a href="#PS界面组成：" class="headerlink" title="PS界面组成："></a>PS界面组成：</h2><p>菜单栏、选项栏、工具栏、浮动面板（拖拽名称，可单独操作面板）、绘图窗口<br>​    窗口菜单，可显示隐藏所有面板</p><p>工作区：（新建）</p><p>调整浮动面板</p><p><img src="/media/jiemian.png"></p><h2 id="基本操作"><a href="#基本操作" class="headerlink" title="基本操作"></a>基本操作</h2><p>文件下拉菜单：<br>​    1、新建      新建文档      CTRL+N</p><p>单位：像素   厘米   毫米</p><p>屏幕显示： 单位  像素      72像素/英寸    RGB颜色模式</p><p><img src="/media/huabu.png"></p><p>2、关闭文档     CTRL+W </p><p>3、存储    CTRL+S    （替存）</p><p>4、存储为  CTRL+SHIFT+S    另存一份文件</p><p><img src="/media/baocun.png"></p><p>5、格式：<br>​      .psd     PS源文件格式   图层、文字、样式等，可再次编辑<br>​      （给自己）<br>​      .jpg     有损压缩格式   （给客户）  品质  最高12</p><p>6、文件打开：<br>​      1）文件下拉菜单-打开（CTRL+O欧）</p><p>​      2）双击软件空白处也能打开<br>​    </p><h2 id="移动工具-V"><a href="#移动工具-V" class="headerlink" title="移动工具 V"></a>移动工具 V</h2><p>1、不同文件之间拖拽图像。</p><h2 id="自由变形"><a href="#自由变形" class="headerlink" title="自由变形"></a>自由变形</h2><p>ctrl + T 可以改变图像的大小</p><p><img src="/media/bianhuan.png"></p><p>按下enter 回车确认操作。</p><h2 id="图层操作-重点"><a href="#图层操作-重点" class="headerlink" title="图层操作(重点)"></a>图层操作(重点)</h2><p> 图层面板快捷键   F7  其实图层就是一张张透明的纸  可以实现叠加问题。</p><p><img src="/media/tuceng.png"></p><p> 图层选择： 使用移动工具V </p><p> 1、图层缩览图判断</p><p> 2、按住CTRL,在目标图像上单击</p><p> 3、将光标放置在目标图像上右键，选择图层名称</p><p>图层面板中加选图层：</p><p>1、按SHIFT，单击另一目标图层     中间所有图层被选中</p><p>2、按CTRL，单击另一目标图层     只选中目标图层</p><p>复制图层：选中目标图层后（移动工具状态下）</p><p>   1、按ALT拖拽图像</p><p>   2、CTRL+J      （重合）</p><p>案例： 摆放一个自行车</p><p><img src="/media/bike.jpg"></p><h2 id="图层编组"><a href="#图层编组" class="headerlink" title="图层编组"></a>图层编组</h2><p>选中目标图层，CTRL+G   </p><p>取消编组：CTRL+SHIFT+G</p><p>双击图层名称可重新命名</p><p>双击组名称，可命名组</p><p>  移动工具V选择组或图层时，需设置选项栏</p><p><img src="/media/1498465862231.png" alt="1498465862231"></p><h2 id="图层上下位置移动"><a href="#图层上下位置移动" class="headerlink" title="图层上下位置移动"></a>图层上下位置移动</h2><p>1、选中目标图层，在图层面拖拽</p><p>2、CTRL+]    向上移动图层<br>​       CTRL+[    向下移动图层</p><p>3、CTRL+SHIFT+]   图层置顶<br>​       CTRL+SHIFT+[   图层置底</p><p>移动选区或图像时：</p><p>移动过程中，没释放鼠标，按住SHIFT，可同一水平线、同一垂线、45度移动。</p><p>ps中的撤销操作是：</p><p>ctrl+z  撤销一步</p><p>ctrl+alt+z  撤销多步</p><h2 id="图层合并"><a href="#图层合并" class="headerlink" title="图层合并"></a>图层合并</h2><p>ctrl+e 可以合并图层</p><p><img src="/media/hebing.png"></p><h2 id="图层透明度"><a href="#图层透明度" class="headerlink" title="图层透明度"></a>图层透明度</h2><p>不透明度：设置图层的不透明程度    0%完全透明，不可见</p><p>​                                  100%完全不透明，真实可见</p><p>填充：与不透明度效果类似</p><p><img src="/media/1498465905203.png" alt="1498465905203">)</p><p>键盘数字键，可快速设置透明度数值     </p><h2 id="矩形选区工具-M"><a href="#矩形选区工具-M" class="headerlink" title="矩形选区工具 M"></a>矩形选区工具 M</h2><p>用来选择某部分区域  我们成为选区工具 </p><p><img src="/media/gongjuxiang.png"></p><p>取消选区：  ctrl+d </p><h2 id="颜色填充"><a href="#颜色填充" class="headerlink" title="颜色填充"></a>颜色填充</h2><p><img src="/media/yanse1.png"></p><p><img src="/media/yanse2.png"></p><p><img src="/media/miqi.jpg"></p><h2 id="套索工具-L"><a href="#套索工具-L" class="headerlink" title="套索工具 L"></a>套索工具 L</h2><p>1、套索工具      L  在屏幕上拖拽鼠标左键，释放后生成选区</p><p>2、多边形套索    L  连续单击绘制多边形选区</p><p>​                  闭合方法：1、单击起始点  2、双击任意位置</p><p>​                  DELETE删除当前点</p><p><img src="/media/shiboguan.jpg"></p><h2 id="磁性套索-L"><a href="#磁性套索-L" class="headerlink" title="磁性套索 L"></a>磁性套索 L</h2><p>L   在颜色交界的位置单击后拖动。单击起始点后，生成选区。      </p><p><img src="/media/cixing.jpg"></p><h2 id="魔棒工具-W"><a href="#魔棒工具-W" class="headerlink" title="魔棒工具   W"></a>魔棒工具   W</h2><p>以单击位置为选择色，选择相似颜色生成选区。</p><p><img src="/media/1498465928343.png" alt="1498465928343"> </p><p>容差：选择颜色的范围     容差小，颜色选择精确。    0-255</p><p>连续：勾选连续时，相连颜色生成选区。</p><p>​     不勾选，画面中所有相似颜色被选中生成选区。</p><p>按SHIFT在未生成选区位置单击，可选区相加。</p><p>选区反选：CTRL+SHIFT+I </p><h2 id="选区布尔运算"><a href="#选区布尔运算" class="headerlink" title="选区布尔运算"></a>选区布尔运算</h2><p><img src="/media/1498465944087.png" alt="1498465944087"></p><p>选区面积大小的变化。</p><p>新选区：保持选中状态</p><p>添加到选区：相加运算（按住SHIFT再绘制选区）</p><p>从选区减去：相减（按住ALT再绘制选区）</p><p>与选区交叉：重合部分保留。（按住ALT+SHIFT再绘制选区）</p><p>梦幻星球</p><p><img src="/media/chengshi.jpg"></p><h2 id="钢笔工具：-P"><a href="#钢笔工具：-P" class="headerlink" title="钢笔工具：   P"></a>钢笔工具：   P</h2><p>作用：绘制路径，生成选区，抠图。</p><p>组成;路径线和锚点</p><p>绘制路径后，CTRL+回车，生成选区。</p><p>路径类型：</p><p>直线型路径：连续单击</p><p>曲线型路径：第一点单击，第二点拖动鼠标。</p><p><img src="/media/jiu.png"></p><h2 id="文字工具"><a href="#文字工具" class="headerlink" title="文字工具"></a>文字工具</h2><p>T  可以直接输入文字</p><h2 id="Photoshop-切图"><a href="#Photoshop-切图" class="headerlink" title="Photoshop 切图"></a>Photoshop 切图</h2><p>PS切图 可以 分为 手动 利用切片切图 以及 利用PS的插件快速切图</p><h3 id="切片工具"><a href="#切片工具" class="headerlink" title="切片工具"></a>切片工具</h3><p><img src="/media/1498466173246.png" alt="1498466173246"></p><ol><li><p>利用切片工具手动划出</p></li><li><p>图层菜单—新建基于图层的切片</p></li><li><p>利用标尺   基于参考线的切片 （选择切片工具）</p><p>​</p><p><img src="/media/1498466734205.png" alt="1498466734205"></p></li><li><p>先选个一个整个的切片，  切片选择工具– 属性面板中有 “划分”   –可以等分数平分切图</p></li></ol><p>导出切片： 文件– 存储为web设备所用格式</p><h3 id="辅助线和切片使用及清除"><a href="#辅助线和切片使用及清除" class="headerlink" title="辅助线和切片使用及清除"></a>辅助线和切片使用及清除</h3><p>视图菜单– 清除 辅助线/ 清除切片</p><h3 id="切图插件"><a href="#切图插件" class="headerlink" title="切图插件"></a>切图插件</h3><p>Cutterman是一款运行在photoshop中的插件，能够自动将你需要的图层进行输出， 以替代传统的手工 “导出web所用格式” 以及使用切片工具进行挨个切图的繁琐流程。 它支持各种各样的图片尺寸、格式、形态输出，方便你在pc、ios、Android等端上使用。 它不需要你记住一堆的语法、规则，纯点击操作，方便、快捷，易于上手。</p><p>官网: <a href="http://www.cutterman.cn/zh/cutterman" target="_blank" rel="noopener">http://www.cutterman.cn/zh/cutterman</a></p><p>注意： cutterman插件要求你的ps 必须是完整版，不能是绿色版，所以大家需要从新安装完整版本。</p><p><img src="/media/sample1.gif"></p><h1 id="项目案例：-学成网"><a href="#项目案例：-学成网" class="headerlink" title="项目案例： 学成网"></a>项目案例： 学成网</h1><p>案例练习目的是总结以前的css和html</p><p>还有ps的使用。</p><p>制作步骤：</p><ol><li>准备相关文件。（内部样式表) html文件(index.html)   图片文件</li><li>准备CSS 初始化。 书写结构和样式</li><li>确定版心（是1200像素)和各个模块。</li></ol><h1 id="定位-position"><a href="#定位-position" class="headerlink" title="定位(position)"></a>定位(position)</h1><p>如果，说浮动， 关键在一个 “浮” 字上面， 那么 我们的定位，关键在于一个 “位” 上。</p><p>PS: 定位是我们CSS算是数一数二难点的了，但是，你务必要学好它，我们CSS离不开定位，特别是后面的js特效，天天和定位打交道。不要抵触它，反而要爱上它，它可以让我们工作更加轻松哦！</p><h2 id="为什么要用定位？"><a href="#为什么要用定位？" class="headerlink" title="为什么要用定位？"></a>为什么要用定位？</h2><p>那么定位，最长运用的场景再那里呢？   来看几幅图片，你一定会有感悟！</p><p>第一幅图， 小黄色块可以再图片上移动：</p><p><img src="/media/1.gif" style="border: 1px dashed #3c3c3c;"></p><p>第二幅图， 左右箭头压住图片：</p><p><img src="/media/2.gif" style="border: 1px dashed #3c3c3c;"></p><p>第三幅图,  hot 再盒子外面多出一块，更加突出：</p><p><img src="/media/it.png" style="border: 1px dashed #3c3c3c;"></p><p>以上三个小地方，如果用标准流或者浮动，实现会比较复杂或者难以实现，此时我们用定位来做，just soso！</p><h2 id="元素的定位属性"><a href="#元素的定位属性" class="headerlink" title="元素的定位属性"></a>元素的定位属性</h2><p>元素的定位属性主要包括定位模式和边偏移两部分。</p><p>1、边偏移</p><table><thead><tr><th>边偏移属性</th><th>描述</th></tr></thead><tbody><tr><td>top</td><td>顶端偏移量，定义元素相对于其父元素上边线的距离</td></tr><tr><td>bottom</td><td>底部偏移量，定义元素相对于其父元素下边线的距离</td></tr><tr><td>left</td><td>左侧偏移量，定义元素相对于其父元素左边线的距离</td></tr><tr><td>right</td><td>右侧偏移量，定义元素相对于其父元素右边线的距离</td></tr></tbody></table><p>也就说，以后定位要和这边偏移搭配使用了， 比如 top: 100px;  left: 30px; 等等</p><p>2、定位模式(定位的分类)</p><p>在CSS中，position属性用于定义元素的定位模式，其基本语法格式如下：</p><p>选择器{position:属性值;}</p><p>position属性的常用值</p><table><thead><tr><th>值</th><th>描述</th></tr></thead><tbody><tr><td>static</td><td>自动定位（默认定位方式）</td></tr><tr><td>relative</td><td>相对定位，相对于其原文档流的位置进行定位</td></tr><tr><td>absolute</td><td>绝对定位，相对于其上一个已经定位的父元素进行定位</td></tr><tr><td>fixed</td><td>固定定位，相对于浏览器窗口进行定位</td></tr></tbody></table><h2 id="静态定位-static"><a href="#静态定位-static" class="headerlink" title="静态定位(static)"></a>静态定位(static)</h2><p>静态定位是所有元素的默认定位方式，当position属性的取值为static时，可以将元素定位于静态位置。 所谓静态位置就是各个元素在HTML文档流中默认的位置。</p><p>上面的话翻译成白话：  就是网页中所有元素都默认的是静态定位哦！ 其实就是标准流的特性。</p><p>在静态定位状态下，无法通过边偏移属性（top、bottom、left或right）来改变元素的位置。</p><p>PS： 静态定位其实没啥可说的。</p><h2 id="相对定位relative-自恋型"><a href="#相对定位relative-自恋型" class="headerlink" title="相对定位relative(自恋型)"></a>相对定位relative(自恋型)</h2><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">小笑话： </span><br><span class="line">刚刚看到一个超级超级帅的帅哥，看得我都忍不住想和他搞基了。世间怎会有如此之完美的男人。我和他就这样一动不动的对视着，就仿佛一见钟情。时间也在这一瞬间停止了。直到我的手麻了。才恋恋不舍的放下镜子。。。。</span><br></pre></td></tr></table></figure><p><img src="/media/smail.gif" width="100"></p><p>相对定位是将元素相对于它在标准流中的位置进行定位，当position属性的取值为relative时，可以将元素定位于相对位置。</p><p>对元素设置相对定位后，可以通过边偏移属性改变元素的位置，但是它在文档流中的位置仍然保留。如下图所示，即是一个相对定位的效果展示：</p><p><img src="/media/r.png"></p><p>注意：   </p><ol><li>相对定位最重要的一点是，它可以通过边偏移移动位置，但是原来的所占的位置，继续占有。</li><li>其次，每次移动的位置，是以自己的左上角为基点移动（相对于自己来移动位置）</li></ol><p>就是说，相对定位的盒子仍在标准流中，它后面的盒子仍以标准流方式对待它。（相对定位不脱标）</p><p>如果说浮动的主要目的是 让多个块级元素一行显示，那么定位的主要价值就是 移动位置， 让盒子到我们想要的位置上去。</p><h2 id="绝对定位absolute-拼爹型"><a href="#绝对定位absolute-拼爹型" class="headerlink" title="绝对定位absolute (拼爹型)"></a>绝对定位absolute (拼爹型)</h2><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><span class="line">小笑话：</span><br><span class="line"></span><br><span class="line">吃早饭时，老婆往儿子碗里放了两个煎蛋，儿子全给了我，还一本正经地说：“爸爸，多吃点，男人养家不容易。” &lt;br/&gt;</span><br><span class="line"></span><br><span class="line">我一阵感动，刚想夸他两句。 </span><br><span class="line"></span><br><span class="line">儿子接着说：“以后全靠你让我拼爹了！”</span><br></pre></td></tr></table></figure><p><img src="/media/smail.gif" width="100"></p><p>　[注意] 如果文档可滚动，绝对定位元素会随着它滚动，因为元素最终会相对于正常流的某一部分定位。</p><p>当position属性的取值为absolute时，可以将元素的定位模式设置为绝对定位。</p><p>注意：    绝对定位最重要的一点是，它可以通过边偏移移动位置，但是它完全脱标，完全不占位置。</p><h3 id="父级没有定位"><a href="#父级没有定位" class="headerlink" title="父级没有定位"></a>父级没有定位</h3><p>若所有父元素都没有定位，以浏览器为准对齐(document文档)。</p><p><img src="/media/ab.png"></p><h3 id="父级有定位"><a href="#父级有定位" class="headerlink" title="父级有定位"></a>父级有定位</h3><p>绝对定位是将元素依据最近的已经定位（绝对、固定或相对定位）的父元素（祖先）进行定位。 </p><p><img src="/media/ab1.png"></p><h3 id="子绝父相"><a href="#子绝父相" class="headerlink" title="子绝父相"></a>子绝父相</h3><p>这个“子绝父相”太重要了，是我们学习定位的口诀，时时刻刻记住的。</p><p>这句话的意思是 子级是绝对定位的话， 父级要用相对定位。</p><p>首先， 我们说下， 绝对定位是将元素依据最近的已经定位绝对、固定或相对定位）的父元素（祖先）进行定位。</p><p>就是说， 子级是绝对定位，父亲只要是定位即可（不管父亲是绝对定位还是相对定位，甚至是固定定位都可以），就是说， 子绝父绝，子绝父相都是正确的。</p><p>但是，在我们网页布局的时候， 最常说的 子绝父相是怎么来的呢？ 请看如下图：</p><p><img src="/media/zi.png" style="border: 1px dashed #3c3c3c;"></p><p>所以，我们可以得出如下结论：</p><p>因为子级是绝对定位，不会占有位置， 可以放到父盒子里面的任何一个地方。</p><p>父盒子布局时，需要占有位置，因此父亲只能是 相对定位. </p><p>这就是子绝父相的由来。</p><h2 id="绝对定位的盒子水平-垂直居中"><a href="#绝对定位的盒子水平-垂直居中" class="headerlink" title="绝对定位的盒子水平/垂直居中"></a>绝对定位的盒子水平/垂直居中</h2><p>普通的盒子是左右margin 改为 auto就可， 但是对于绝对定位就无效了</p><p>定位的盒子也可以水平或者垂直居中，有一个算法。</p><ol><li><p>首先left 50%   父盒子的一半大小</p></li><li><p>然后走自己外边距负的一半值就可以了 margin-left。</p><p>​</p></li></ol><h2 id="固定定位fixed-认死理型"><a href="#固定定位fixed-认死理型" class="headerlink" title="固定定位fixed(认死理型)"></a>固定定位fixed(认死理型)</h2><p>固定定位是绝对定位的一种特殊形式，类似于 正方形是一个特殊的 矩形。它以浏览器窗口作为参照物来定义网页元素。当position属性的取值为fixed时，即可将元素的定位模式设置为固定定位。</p><p>当对元素设置固定定位后，它将脱离标准文档流的控制，始终依据浏览器窗口来定义自己的显示位置。不管浏览器滚动条如何滚动也不管浏览器窗口的大小如何变化，该元素都会始终显示在浏览器窗口的固定位置。</p><p>固定定位有两点：</p><ol><li>固定定位的元素跟父亲没有任何关系，只认浏览器。</li><li>固定定位完全脱标，不占有位置，不随着滚动条滚动。</li></ol><p>记忆法：  就类似于孙猴子， 无父无母，好不容易找到一个可靠的师傅（浏览器），就听的师傅的，别的都不听。</p><p><img src="/media/sun.jpg" width="100"></p><p>ie6等低版本浏览器不支持固定定位。</p><h2 id="叠放次序（z-index）"><a href="#叠放次序（z-index）" class="headerlink" title="叠放次序（z-index）"></a>叠放次序（z-index）</h2><p>当对多个元素同时设置定位时，定位元素之间有可能会发生重叠。</p><p><img src="/media/zzz.png"></p><p>在CSS中，要想调整重叠定位元素的堆叠顺序，可以对定位元素应用z-index层叠等级属性，其取值可为正整数、负整数和0。</p><p>比如：  z-index: 2;</p><p>注意：</p><ol><li><p>z-index的默认属性值是0，取值越大，定位元素在层叠元素中越居上。</p></li><li><p>如果取值相同，则根据书写顺序，后来居上。</p></li><li><p>后面数字一定不能加单位。</p></li><li><p>只有相对定位，绝对定位，固定定位有此属性，其余标准流，浮动，静态定位都无此属性，亦不可指定此属性。</p></li></ol><h1 id="四种定位总结"><a href="#四种定位总结" class="headerlink" title="四种定位总结"></a>四种定位总结</h1><table><thead><tr><th>定位模式</th><th>是否脱标占有位置</th><th>是否可以使用边偏移</th><th>移动位置基准</th></tr></thead><tbody><tr><td>静态static</td><td>不脱标，正常模式</td><td>不可以</td><td>正常模式</td></tr><tr><td>相对定位relative</td><td>不脱标，占有位置</td><td>可以</td><td>相对自身位置移动（自恋型）</td></tr><tr><td>绝对定位absolute</td><td>完全脱标，不占有位置</td><td>可以</td><td>相对于定位父级移动位置（拼爹型）</td></tr><tr><td>固定定位fixed</td><td>完全脱标，不占有位置</td><td>可以</td><td>相对于浏览器移动位置（认死理型）</td></tr></tbody></table><h1 id="定位模式转换"><a href="#定位模式转换" class="headerlink" title="定位模式转换"></a>定位模式转换</h1><p>跟 浮动一样， 元素添加了 绝对定位和固定定位之后， 元素模式也会发生转换， 都转换为 行内块模式，</p><p><strong> 因此 比如 行内元素 如果添加了 绝对定位或者 固定定位后 浮动后，可以不用转换模式，直接给高度和宽度就可以了。</strong></p><h1 id="元素的显示与隐藏"><a href="#元素的显示与隐藏" class="headerlink" title="元素的显示与隐藏"></a>元素的显示与隐藏</h1><p>在CSS中有三个显示和隐藏的单词比较常见，我们要区分开，他们分别是 display visibility 和 overflow。</p><p>他们的主要目的是让一个元素在页面中消失，但是不在文档源码中删除。 最常见的是网站广告，当我们点击类似关闭不见了，但是我们重新刷新页面，它们又会出现和你玩躲猫猫！！</p><h2 id="display-显示"><a href="#display-显示" class="headerlink" title="display 显示"></a>display 显示</h2><p>display 设置或检索对象是否及如何显示。</p><p>display : none 隐藏对象 与它相反的是 display:block 除了转换为块级元素之外，同时还有显示元素的意思。</p><p>特点： 隐藏之后，不再保留位置。</p><h2 id="visibility-可见性"><a href="#visibility-可见性" class="headerlink" title="visibility 可见性"></a>visibility 可见性</h2><p>设置或检索是否显示对象。</p><p>visible : 　对象可视</p><p>hidden : 　对象隐藏</p><p>特点： 隐藏之后，继续保留原有位置。（停职留薪）</p><h2 id="overflow-溢出"><a href="#overflow-溢出" class="headerlink" title="overflow 溢出"></a>overflow 溢出</h2><p>检索或设置当对象的内容超过其指定高度及宽度时如何管理内容。</p><p>visible : 　不剪切内容也不添加滚动条。</p><p>auto : 　 超出自动显示滚动条，不超出不显示滚动条</p><p>hidden : 　不显示超过对象尺寸的内容，超出的部分隐藏掉</p><p>scroll : 　不管超出内容否，总是显示滚动条</p><h1 id="CSS高级技巧"><a href="#CSS高级技巧" class="headerlink" title="CSS高级技巧"></a>CSS高级技巧</h1><h2 id="CSS用户界面样式"><a href="#CSS用户界面样式" class="headerlink" title="CSS用户界面样式"></a>CSS用户界面样式</h2><p> 所谓的界面样式， 就是更改一些用户操作样式， 比如 更改用户的鼠标样式， 表单轮廓等。但是比如滚动条的样式改动受到了很多浏览器的抵制，因此我们就放弃了。 防止表单域拖拽</p><h3 id="鼠标样式cursor"><a href="#鼠标样式cursor" class="headerlink" title="鼠标样式cursor"></a>鼠标样式cursor</h3><p> 设置或检索在对象上移动的鼠标指针采用何种系统预定义的光标形状。 </p><figure class="highlight html"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">cursor :  default  小白 | pointer  小手  | move  移动  |  text  文本</span><br></pre></td></tr></table></figure><p> 鼠标放我身上查看效果哦：</p><figure class="highlight html"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">ul</span>&gt;</span></span><br><span class="line">  <span class="tag">&lt;<span class="name">li</span> <span class="attr">style</span>=<span class="string">"cursor:default"</span>&gt;</span>我是小白<span class="tag">&lt;/<span class="name">li</span>&gt;</span></span><br><span class="line">  <span class="tag">&lt;<span class="name">li</span> <span class="attr">style</span>=<span class="string">"cursor:pointer"</span>&gt;</span>我是小手<span class="tag">&lt;/<span class="name">li</span>&gt;</span></span><br><span class="line">  <span class="tag">&lt;<span class="name">li</span> <span class="attr">style</span>=<span class="string">"cursor:move"</span>&gt;</span>我是移动<span class="tag">&lt;/<span class="name">li</span>&gt;</span></span><br><span class="line">  <span class="tag">&lt;<span class="name">li</span> <span class="attr">style</span>=<span class="string">"cursor:text"</span>&gt;</span>我是文本<span class="tag">&lt;/<span class="name">li</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">ul</span>&gt;</span></span><br></pre></td></tr></table></figure><p> 尽量不要用hand  因为 火狐不支持     pointer ie6以上都支持的尽量用</p><h3 id="轮廓-outline"><a href="#轮廓-outline" class="headerlink" title="轮廓 outline"></a>轮廓 outline</h3><p> 是绘制于元素周围的一条线，位于边框边缘的外围，可起到突出元素的作用。</p><figure class="highlight"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">outline : outline-color ||outline-style || outline-width</span><br></pre></td></tr></table></figure><p> 但是我们都不关心可以设置多少，我们平时都是去掉的。</p><p>最直接的写法是 ：  outline: 0;   或者  outline: none;</p><figure class="highlight html"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">input</span>  <span class="attr">type</span>=<span class="string">"text"</span>  <span class="attr">style</span>=<span class="string">"outline: 0;"</span>/&gt;</span></span><br></pre></td></tr></table></figure><h3 id="防止拖拽文本域resize"><a href="#防止拖拽文本域resize" class="headerlink" title="防止拖拽文本域resize"></a>防止拖拽文本域resize</h3><p>resize：none    这个单词可以防止 火狐 谷歌等浏览器随意的拖动 文本域。</p><p>右下角可以拖拽： </p><textarea></textarea><p>右下角不可以拖拽： </p><figure class="highlight html"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">textarea</span>  <span class="attr">style</span>=<span class="string">"resize: none;"</span>&gt;</span><span class="tag">&lt;/<span class="name">textarea</span>&gt;</span></span><br></pre></td></tr></table></figure><h2 id="vertical-align-垂直对齐"><a href="#vertical-align-垂直对齐" class="headerlink" title="vertical-align 垂直对齐"></a>vertical-align 垂直对齐</h2><p>以前我们讲过让带有宽度的块级元素居中对齐，是margin: 0 auto;</p><p>以前我们还讲过让文字居中对齐，是 text-align: center;</p><p>但是我们从来没有讲过有垂直居中的属性， 我们的妈妈一直很担心我们的垂直居中怎么做。</p><p>vertical-align 垂直对齐， 这个看上去很美好的一个属性， 实际有着不可捉摸的脾气，否则我们也不会这么晚来讲解。</p><p><img src="/media/xian.jpg"></p><figure class="highlight"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">vertical-align : baseline |top |middle |bottom</span><br></pre></td></tr></table></figure><p>设置或检索对象内容的垂直对其方式。 </p><p>vertical-align 不影响块级元素中的内容对齐，它只针对于 行内元素或者行内块元素，特别是行内块元素， <strong>通常用来控制图片/表单与文字的对齐</strong>。</p><p><img src="/media/1498467742995.png" alt="1498467742995"></p><h3 id="图片、表单和文字对齐"><a href="#图片、表单和文字对齐" class="headerlink" title="图片、表单和文字对齐"></a>图片、表单和文字对齐</h3><p>所以我们知道，我们可以通过vertical-align 控制图片和文字的垂直关系了。 默认的图片会和文字基线对齐。</p><h3 id="去除图片底侧空白缝隙"><a href="#去除图片底侧空白缝隙" class="headerlink" title="去除图片底侧空白缝隙"></a>去除图片底侧空白缝隙</h3><p>有个很重要特性你要记住： 图片或者表单等行内块元素，他的底线会和父级盒子的基线对齐。这样会造成一个问题，就是图片底侧会有一个空白缝隙。</p><p><img src="/media/3.jpg"></p><p>解决的方法就是：  </p><ol><li>给img vertical-align:middle | top等等。  让图片不要和基线对齐。<img src="/media/1633.png" width="500" style="border: 1px dashed #ccc;"></li></ol><ol><li>给img 添加 display：block; 转换为块级元素就不会存在问题了。<img src="/media/sina1.png" width="500" style="border: 1px dashed #ccc;"></li></ol><h1 id="溢出的文字隐藏"><a href="#溢出的文字隐藏" class="headerlink" title="溢出的文字隐藏"></a>溢出的文字隐藏</h1><h2 id="word-break-自动换行"><a href="#word-break-自动换行" class="headerlink" title="word-break:自动换行"></a>word-break:自动换行</h2><p>normal   使用浏览器默认的换行规则。</p><p>break-all   允许在单词内换行。</p><p>keep-all    只能在半角空格或连字符处换行。</p><p>主要处理英文单词</p><h2 id="white-space"><a href="#white-space" class="headerlink" title="white-space"></a>white-space</h2><p>white-space设置或检索对象内文本显示方式。通常我们使用于强制一行显示内容 </p><p>normal : 　默认处理方式<br>nowrap : 　强制在同一行内显示所有文本，直到文本结束或者遭遇br标签对象才换行。</p><p>可以处理中文</p><h2 id="text-overflow-文字溢出"><a href="#text-overflow-文字溢出" class="headerlink" title="text-overflow 文字溢出"></a>text-overflow 文字溢出</h2><p>text-overflow : clip | ellipsis</p><p>设置或检索是否使用一个省略标记（…）标示对象内文本的溢出</p><p>clip : 　不显示省略标记（…），而是简单的裁切 </p><p>ellipsis : 　当对象内文本溢出时显示省略标记（…）</p><p>注意一定要首先强制一行内显示，再次和overflow属性  搭配使用</p><h2 id="CSS精灵技术（sprite）-小妖精-雪碧"><a href="#CSS精灵技术（sprite）-小妖精-雪碧" class="headerlink" title="CSS精灵技术（sprite） 小妖精  雪碧"></a>CSS精灵技术（sprite） 小妖精  雪碧</h2><h3 id="精灵技术产生的背景"><a href="#精灵技术产生的背景" class="headerlink" title="精灵技术产生的背景"></a>精灵技术产生的背景</h3><p><img src="/media/sss.png"></p><p>图所示为网页的请求原理图，当用户访问一个网站时，需要向服务器发送请求，网页上的每张图像都要经过一次请求才能展现给用户。</p><p>然而，一个网页中往往会应用很多小的背景图像作为修饰，当网页中的图像过多时，服务器就会频繁地接受和发送请求，这将大大降低页面的加载速度。为了有效地减少服务器接受和发送请求的次数，提高页面的加载速度，出现了CSS精灵技术（也称CSS Sprites、CSS雪碧）。</p><h3 id="精灵技术本质"><a href="#精灵技术本质" class="headerlink" title="精灵技术本质"></a>精灵技术本质</h3><p>简单地说，CSS精灵是一种处理网页背景图像的方式。它将一个页面涉及到的所有零星背景图像都集中到一张大图中去，然后将大图应用于网页，这样，当用户访问该页面时，只需向服务发送一次请求，网页中的背景图像即可全部展示出来。通常情况下，这个由很多小的背景图像合成的大图被称为精灵图（雪碧图），如下图所示为京东网站中的一个精灵图。</p><p><img src="/media/jds.png" style="border: 1px dashed #ccc;"></p><h3 id="精灵技术的使用"><a href="#精灵技术的使用" class="headerlink" title="精灵技术的使用"></a>精灵技术的使用</h3><p>CSS 精灵其实是将网页中的一些背景图像整合到一张大图中（精灵图），然而，各个网页元素通常只需要精灵图中不同位置的某个小图，要想精确定位到精灵图中的某个小图，就需要使用CSS的background-image、background-repeat和background-position属性进行背景定位，其中最关键的是使用background-position属性精确地定位。</p><h3 id="制作精灵图"><a href="#制作精灵图" class="headerlink" title="制作精灵图"></a>制作精灵图</h3><p>CSS 精灵其实是将网页中的一些背景图像整合到一张大图中（精灵图），那我们要做的，就是把小图拼合成一张大图。</p><p>大部分情况下，精灵图都是网页美工做。</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line">我们精灵图上放的都是小的装饰性质的背景图片。 插入图片不能往上放。</span><br><span class="line">我们精灵图的宽度取决于最宽的那个背景。 </span><br><span class="line">我们可以横向摆放也可以纵向摆放，但是每个图片之间，间隔至少隔开偶数像素合适。</span><br><span class="line">在我们精灵图的最低端，留一片空隙，方便我们以后添加其他精灵图。</span><br></pre></td></tr></table></figure><p>结束语：   小公司，背景图片很少的情况，没有必要使用精灵技术，维护成本太高。 如果是背景图片比较多，可以建议使用精灵技术。</p><h2 id="字体图标"><a href="#字体图标" class="headerlink" title="字体图标"></a>字体图标</h2><p>图片是有诸多优点的，但是缺点很明显，比如图片不但增加了总文件的大小，还增加了很多额外的”http请求”，这都会大大降低网页的性能的。更重要的是图片不能很好的进行“缩放”，因为图片放大和缩小会失真。 我们后面会学习移动端响应式，很多情况下希望我们的图标是可以缩放的。此时，一个非常重要的技术出现了，额不是出现了，是以前就有，是被从新”宠幸”啦。。 这就是字体图标（iconfont).</p><h3 id="字体图标优点"><a href="#字体图标优点" class="headerlink" title="字体图标优点"></a>字体图标优点</h3><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line">可以做出跟图片一样可以做的事情,改变透明度、旋转度，等..</span><br><span class="line">但是本质其实是文字，可以很随意的改变颜色、产生阴影、透明效果等等...</span><br><span class="line">本身体积更小，但携带的信息并没有削减。</span><br><span class="line">几乎支持所有的浏览器</span><br><span class="line">移动端设备必备良药...</span><br></pre></td></tr></table></figure><h3 id="字体图标使用流程"><a href="#字体图标使用流程" class="headerlink" title="字体图标使用流程"></a>字体图标使用流程</h3><p>总体来说，字体图标按照如下流程：</p><p><img src="/media/fontt.png"></p><h4 id="设计字体图标"><a href="#设计字体图标" class="headerlink" title="设计字体图标"></a>设计字体图标</h4><p>假如图标是我们公司单独设计，那就需要第一步了，这个属于UI设计人员的工作， 他们在 illustrator 或 Sketch 这类矢量图形软件里创建 icon图标， 比如下图：</p><p><img src="/media/03.jpg"></p><p>  之后保存为svg格式，然后给我们前端人员就好了。 </p><p>  其实第一步，我们不需要关心，只需要给我们这些图标就可以了，如果图标是大众的，网上本来就有的，可以直接跳过第一步，进入第三步。</p><h4 id="上传生成字体包"><a href="#上传生成字体包" class="headerlink" title="上传生成字体包"></a>上传生成字体包</h4><p>   当UI设计人员给我们svg文件的时候，我们需要转换成我们页面能使用的字体文件， 而且需要生成的是兼容性的适合各个浏览器的。</p><p>​    推荐网站： <a href="http://icomoon.io" target="_blank" rel="noopener">http://icomoon.io</a></p><p><strong>icomoon字库</strong></p><p>IcoMoon成立于2011年，推出的第一个自定义图标字体生成器，它允许用户选择他们所需要的图标，使它们成一字型。 内容种类繁多，非常全面，唯一的遗憾是国外服务器，打开网速较慢。</p><p>   推荐网站： <a href="http://www.iconfont.cn/" target="_blank" rel="noopener">http://www.iconfont.cn/</a></p><p><strong>阿里icon font字库</strong></p><p><a href="http://www.iconfont.cn/" target="_blank" rel="noopener">http://www.iconfont.cn/</a></p><p>这个是阿里妈妈M2UX的一个icon font字体图标字库，包含了淘宝图标库和阿里妈妈图标库。可以使用AI制作图标上传生成。 一个字，免费，免费！！</p><p><strong>fontello</strong></p><p><a href="http://fontello.com/" target="_blank" rel="noopener">http://fontello.com/</a></p><p>在线定制你自己的icon font字体图标字库，也可以直接从GitHub下载整个图标集，该项目也是开源的。</p><p><strong>Font-Awesome</strong></p><p><a href="http://fortawesome.github.io/Font-Awesome/" target="_blank" rel="noopener">http://fortawesome.github.io/Font-Awesome/</a></p><p>这是我最喜欢的字库之一了，更新比较快。目前已经有369个图标了。</p><p><strong>Glyphicon Halflings</strong></p><p><a href="http://glyphicons.com/" target="_blank" rel="noopener">http://glyphicons.com/</a></p><p>这个字体图标可以在Bootstrap下免费使用。自带了200多个图标。</p><p><strong>Icons8</strong></p><p><a href="https://icons8.com/" target="_blank" rel="noopener">https://icons8.com/</a></p><p>提供PNG免费下载，像素大能到500PX</p><h4 id="下载兼容字体包"><a href="#下载兼容字体包" class="headerlink" title="下载兼容字体包"></a>下载兼容字体包</h4><p>刚才上传完毕， 网站会给我们把UI做的svg图片转换为我们的字体格式， 然后下载下来就好了</p><p>当然，我们不需要自己专门的图标，是想网上找几个图标使用，以上2步可以直接省略了， 直接到刚才的网站上找喜欢的下载使用吧。</p><p><img src="/media/fontt1.png"></p><p><img src="/media/fontt2.png"></p><h4 id="字体引入到HTML"><a href="#字体引入到HTML" class="headerlink" title="字体引入到HTML"></a>字体引入到HTML</h4><p>得到压缩包之后，最后一步，是最重要的一步了， 就是字体文件已经有了，我们需要引入到我们页面中。</p><ol><li><p>首先把 以下4个文件放入到 fonts文件夹里面。 通俗的做法</p><p><img src="/media/1498032122244.png" alt="1498032122244"></p><h5 id="第一步：在样式里面声明字体：-告诉别人我们自己定义的字体"><a href="#第一步：在样式里面声明字体：-告诉别人我们自己定义的字体" class="headerlink" title="第一步：在样式里面声明字体： 告诉别人我们自己定义的字体"></a>第一步：在样式里面声明字体： 告诉别人我们自己定义的字体</h5><figure class="highlight css"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br></pre></td><td class="code"><pre><span class="line">@<span class="keyword">font-face</span> &#123;</span><br><span class="line">  <span class="attribute">font-family</span>: <span class="string">'icomoon'</span>;</span><br><span class="line">  <span class="attribute">src</span>:  <span class="built_in">url</span>(<span class="string">'fonts/icomoon.eot?7kkyc2'</span>);</span><br><span class="line">  <span class="attribute">src</span>:  <span class="built_in">url</span>(<span class="string">'fonts/icomoon.eot?7kkyc2#iefix'</span>) <span class="built_in">format</span>(<span class="string">'embedded-opentype'</span>),</span><br><span class="line">    <span class="built_in">url</span>(<span class="string">'fonts/icomoon.ttf?7kkyc2'</span>) <span class="built_in">format</span>(<span class="string">'truetype'</span>),</span><br><span class="line">    <span class="built_in">url</span>(<span class="string">'fonts/icomoon.woff?7kkyc2'</span>) <span class="built_in">format</span>(<span class="string">'woff'</span>),</span><br><span class="line">    <span class="built_in">url</span>(<span class="string">'fonts/icomoon.svg?7kkyc2#icomoon'</span>) <span class="built_in">format</span>(<span class="string">'svg'</span>);</span><br><span class="line">  <span class="attribute">font-weight</span>: normal;</span><br><span class="line">  <span class="attribute">font-style</span>: normal;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h5 id="第二步：给盒子使用字体"><a href="#第二步：给盒子使用字体" class="headerlink" title="第二步：给盒子使用字体"></a>第二步：给盒子使用字体</h5><figure class="highlight css"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line"><span class="selector-tag">span</span> &#123;</span><br><span class="line">truetrue<span class="attribute">font-family</span>: <span class="string">"icomoon"</span>;</span><br><span class="line">true&#125;</span><br></pre></td></tr></table></figure><h5 id="第三步：盒子里面添加结构"><a href="#第三步：盒子里面添加结构" class="headerlink" title="第三步：盒子里面添加结构"></a>第三步：盒子里面添加结构</h5><figure class="highlight"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line"><span class="selector-tag">span</span><span class="selector-pseudo">::before</span> &#123;</span><br><span class="line">truetrue <span class="attribute">content</span>: <span class="string">"\e900"</span>;</span><br><span class="line">true&#125;</span><br><span class="line">或者  </span><br><span class="line">&lt;span&gt;&lt;/span&gt;</span><br></pre></td></tr></table></figure><h3 id="追加新图标到原来库里面"><a href="#追加新图标到原来库里面" class="headerlink" title="追加新图标到原来库里面"></a>追加新图标到原来库里面</h3><p>如果工作中，原来的字体图标不够用了，我们需要添加新的字体图标，但是原来的不能删除，继续使用，此时我们需要这样做</p><p>把压缩包里面的selection.json 从新上传，然后，选中自己想要新的图标，从新下载压缩包，替换原来文件即可。</p><p><img src="/media/fontt5.png"></p></li></ol><h2 id="滑动门"><a href="#滑动门" class="headerlink" title="滑动门"></a>滑动门</h2><p>先来体会下现实中的滑动门,或者你可以叫做推拉门：</p><p><img src="/media/h.gif"></p><h3 id="滑动门出现的背景"><a href="#滑动门出现的背景" class="headerlink" title="滑动门出现的背景"></a>滑动门出现的背景</h3><p>制作网页时，为了美观，常常需要为网页元素设置特殊形状的背景，比如微信导航栏，有凸起和凹下去的感觉，最大的问题是里面的字数不一样多，咋办？</p><p><img src="/media/wxx.jpg"></p><p>为了使各种特殊形状的背景能够自适应元素中文本内容的多少，出现了CSS滑动门技术。它从新的角度构建页面，使各种特殊形状的背景能够自由拉伸滑动，以适应元素内部的文本内容，可用性更强。 最常见于各种导航栏的滑动门。</p><h3 id="核心技术"><a href="#核心技术" class="headerlink" title="核心技术"></a>核心技术</h3><p>核心技术就是利用CSS精灵（主要是背景位置）和盒子padding撑开宽度, 以便能适应不同字数的导航栏。</p><p>一般的经典布局都是这样的：</p><figure class="highlight html"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">li</span>&gt;</span></span><br><span class="line">  <span class="tag">&lt;<span class="name">a</span> <span class="attr">href</span>=<span class="string">"#"</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">span</span>&gt;</span>导航栏内容<span class="tag">&lt;/<span class="name">span</span>&gt;</span></span><br><span class="line">  <span class="tag">&lt;/<span class="name">a</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">li</span>&gt;</span></span><br></pre></td></tr></table></figure><p>总结： </p><ol><li>a 设置 背景左侧，padding撑开合适宽度。    </li><li>span 设置背景右侧， padding撑开合适宽度 剩下由文字继续撑开宽度。</li><li>之所以a包含span就是因为 整个导航都是可以点击的。</li></ol><h2 id="before和after伪元素-详解"><a href="#before和after伪元素-详解" class="headerlink" title="before和after伪元素(详解)"></a>before和after伪元素(详解)</h2><p>之所以被称为伪元素，是因为他们不是真正的页面元素，html没有对应的元素，但是其所有用法和表现行为与真正的页面元素一样，可以对其使用诸如页面元素一样的css样式，表面上看上去貌似是页面的某些元素来展现，实际上是css样式展现的行为，因此被称为伪元素。是伪元素在html代码机构中的展现，可以看出无法伪元素的结构无法审查</p><p><strong>注意</strong></p><p>伪元素:before和:after添加的内容默认是inline元素**；这个两个伪元素的<code>content</code>属性，表示伪元素的内容,设置:before和:after时必须设置其<code>content</code>属性，否则伪元素就不起作用。</p><h2 id="过渡-CSS3"><a href="#过渡-CSS3" class="headerlink" title="过渡(CSS3)"></a>过渡(CSS3)</h2><p>过渡（transition)是CSS3中具有颠覆性的特征之一，我们可以在不使用 Flash 动画或 JavaScript 的情况下，当元素从一种样式变换为另一种样式时为元素添加效果。</p><p>帧动画：通过一帧一帧的画面按照固定顺序和速度播放。如电影胶片</p><p><img src="/media/1498445034712.png" alt="1498445034712"></p><p><img src="/media/zhen.gif"></p><p>在CSS3里使用transition可以实现补间动画（过渡效果），并且当前元素只要有“属性”发生变化时即存在两种状态(我们用A和B代指），就可以实现平滑的过渡，为了方便演示采用hover切换两种状态，但是并不仅仅局限于hover状态来实现过渡。</p><p>语法格式:</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">transition: 要过渡的属性  花费时间  运动曲线  何时开始;</span><br><span class="line">如果有多组属性变化，还是用逗号隔开。</span><br></pre></td></tr></table></figure><table><thead><tr><th>属性</th><th>描述</th><th>CSS</th></tr></thead><tbody><tr><td>transition</td><td>简写属性，用于在一个属性中设置四个过渡属性。</td><td>3</td></tr><tr><td>transition-property</td><td>规定应用过渡的 CSS 属性的名称。</td><td>3</td></tr><tr><td>transition-duration</td><td>定义过渡效果花费的时间。默认是 0。</td><td>3</td></tr><tr><td>transition-timing-function</td><td>规定过渡效果的时间曲线。默认是 “ease”。</td><td>3</td></tr><tr><td>transition-delay</td><td>规定过渡效果何时开始。默认是 0。</td><td>3</td></tr></tbody></table><p>如果想要所有的属性都变化过渡， 写一个all 就可以</p><p>transition-duration  花费时间  单位是  秒     s    比如 0.5s    这个s单位必须写      ms 毫秒</p><p>运动曲线   默认是 ease</p><p> 何时开始  默认是 0s  立马开始</p><p>运动曲线示意图：</p><p><img src="/media/1498445454760.png" alt="1498445454760"></p><figure class="highlight css"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br></pre></td><td class="code"><pre><span class="line"><span class="selector-tag">div</span> &#123;</span><br><span class="line">truetruetrue<span class="attribute">width</span>: <span class="number">200px</span>;</span><br><span class="line">truetruetrue<span class="attribute">height</span>: <span class="number">100px</span>;</span><br><span class="line">truetruetrue<span class="attribute">background-color</span>: pink;</span><br><span class="line">truetruetrue<span class="comment">/* transition: 要过渡的属性  花费时间  运动曲线  何时开始; */</span></span><br><span class="line">truetruetrue<span class="attribute">transition</span>: width <span class="number">0.6s</span> ease <span class="number">0s</span>, height <span class="number">0.3s</span> ease-in <span class="number">1s</span>;</span><br><span class="line">truetruetrue<span class="comment">/* transtion 过渡的意思  这句话写到div里面而不是 hover里面 */</span></span><br><span class="line">  </span><br><span class="line">truetruetrue</span><br><span class="line">&#125;</span><br><span class="line"><span class="selector-tag">div</span><span class="selector-pseudo">:hover</span> &#123;  <span class="comment">/* 鼠标经过盒子，我们的宽度变为400 */</span></span><br><span class="line"></span><br><span class="line">truetruetrue<span class="attribute">width</span>: <span class="number">600px</span>;</span><br><span class="line">truetruetrue<span class="attribute">height</span>: <span class="number">300px</span></span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="selector-tag">transition</span>: <span class="selector-tag">all</span> 0<span class="selector-class">.6s</span>;  <span class="comment">/* 所有属性都变化用all 就可以了  后面俩个属性可以省略 */</span></span><br></pre></td></tr></table></figure><h2 id="2D变形-CSS3-transform"><a href="#2D变形-CSS3-transform" class="headerlink" title="2D变形(CSS3) transform"></a>2D变形(CSS3) transform</h2><p>transform是CSS3中具有颠覆性的特征之一，可以实现元素的位移、旋转、倾斜、缩放，甚至支持矩阵方式，配合过渡和即将学习的动画知识，可以取代大量之前只能靠Flash才可以实现的效果。</p><p>变形转换 transform    transform  变换 变形的意思             《 transformers 变形金刚》</p><h3 id="移动-translate-x-y"><a href="#移动-translate-x-y" class="headerlink" title="移动 translate(x, y)"></a>移动 translate(x, y)</h3><p>translate 移动平移的意思</p><p><img src="/media/1498443715586.png" alt="1498443715586"></p><figure class="highlight css"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line"><span class="selector-tag">translate</span>(50<span class="selector-tag">px</span>,50<span class="selector-tag">px</span>);</span><br></pre></td></tr></table></figure><p>使用translate方法来将文字或图像在水平方向和垂直方向上分别垂直移动50像素。</p><p>可以改变元素的位置，x、y可为负值；</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line">translate(x,y)水平方向和垂直方向同时移动（也就是X轴和Y轴同时移动）</span><br><span class="line">translateX(x)仅水平方向移动（X轴移动）</span><br><span class="line">translateY(Y)仅垂直方向移动（Y轴移动）</span><br></pre></td></tr></table></figure><figure class="highlight css"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br></pre></td><td class="code"><pre><span class="line"><span class="selector-class">.box</span> &#123;</span><br><span class="line">  <span class="attribute">width</span>: <span class="number">499.9999px</span>;</span><br><span class="line">  <span class="attribute">height</span>: <span class="number">400px</span>;</span><br><span class="line">  <span class="attribute">background</span>: pink;</span><br><span class="line">  <span class="attribute">position</span>: absolute;</span><br><span class="line">  <span class="attribute">left</span>:<span class="number">50%</span>;</span><br><span class="line">  <span class="attribute">top</span>:<span class="number">50%</span>;</span><br><span class="line">  <span class="attribute">transform</span>:<span class="built_in">translate</span>(-50%,-50%);  <span class="comment">/* 走的自己的一半 */</span></span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p> 让定位的盒子水平居中</p><h3 id="缩放-scale-x-y"><a href="#缩放-scale-x-y" class="headerlink" title="缩放 scale(x, y)"></a>缩放 scale(x, y)</h3><p><img src="/media/1498444645795.png" alt="1498444645795"></p><figure class="highlight css"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line"><span class="selector-tag">transform</span><span class="selector-pseudo">:scale(0.8</span>,1);</span><br></pre></td></tr></table></figure><p>可以对元素进行水平和垂直方向的缩放。该语句使用scale方法使该元素在水平方向上缩小了20%，垂直方向上不缩放。</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line">scale(X,Y)使元素水平方向和垂直方向同时缩放（也就是X轴和Y轴同时缩放）</span><br><span class="line">scaleX(x)元素仅水平方向缩放（X轴缩放）</span><br><span class="line">scaleY(y)元素仅垂直方向缩放（Y轴缩放）</span><br></pre></td></tr></table></figure><p> scale()的取值默认的值为1，当值设置为0.01到0.99之间的任何值，作用使一个元素缩小；而任何大于或等于1.01的值，作用是让元素放大</p><h3 id="旋转-rotate-deg"><a href="#旋转-rotate-deg" class="headerlink" title="旋转 rotate(deg)"></a>旋转 rotate(deg)</h3><p>可以对元素进行旋转，正值为顺时针，负值为逆时针；</p><p><img src="/media/1498443651293.png" alt="1498443651293"></p><figure class="highlight css"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line"><span class="selector-tag">transform</span><span class="selector-pseudo">:rotate(45deg)</span>;</span><br></pre></td></tr></table></figure><p> 注意单位是 deg 度数      </p><h3 id="transform-origin可以调整元素转换变形的原点"><a href="#transform-origin可以调整元素转换变形的原点" class="headerlink" title="transform-origin可以调整元素转换变形的原点"></a>transform-origin可以调整元素转换变形的原点</h3><p><img src="/media/1498443912530.png" alt="1498443912530"></p><figure class="highlight css"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line"><span class="selector-tag">div</span>&#123;<span class="attribute">transform-origin</span>: left top;<span class="attribute">transform</span>: <span class="built_in">rotate</span>(45deg); &#125;  <span class="comment">/* 改变元素原点到左上角，然后进行顺时旋转45度 */</span></span><br></pre></td></tr></table></figure><p> 如果是4个角，可以用 left top这些，如果想要精确的位置， 可以用  px 像素。</p><figure class="highlight css"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line"><span class="selector-tag">div</span>&#123;<span class="attribute">transform-origin</span>: <span class="number">10px</span> <span class="number">10px</span>;<span class="attribute">transform</span>: <span class="built_in">rotate</span>(45deg); &#125;  <span class="comment">/* 改变元素原点到x 为10  y 为10，然后进行顺时旋转45度 */</span></span><br></pre></td></tr></table></figure><p>案例旋转楚乔传</p><figure class="highlight css"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br></pre></td><td class="code"><pre><span class="line"><span class="selector-tag">div</span> &#123;</span><br><span class="line">truetruetrue<span class="attribute">width</span>: <span class="number">250px</span>;</span><br><span class="line">truetruetrue<span class="attribute">height</span>: <span class="number">170px</span>;</span><br><span class="line">truetruetrue<span class="attribute">border</span>: <span class="number">1px</span> solid pink;</span><br><span class="line">truetruetrue<span class="attribute">margin</span>: <span class="number">200px</span> auto;</span><br><span class="line">truetruetrue<span class="attribute">position</span>: relative;</span><br><span class="line"></span><br><span class="line">truetrue&#125;</span><br><span class="line">truetrue<span class="selector-tag">div</span> <span class="selector-tag">img</span> &#123;</span><br><span class="line">truetruetrue<span class="attribute">width</span>: <span class="number">100%</span>;</span><br><span class="line">truetruetrue<span class="attribute">height</span>: <span class="number">100%</span>;</span><br><span class="line">truetruetrue<span class="attribute">position</span>: absolute;</span><br><span class="line">truetruetrue<span class="attribute">top</span>: <span class="number">0</span>;</span><br><span class="line">truetruetrue<span class="attribute">left</span>: <span class="number">0</span>;</span><br><span class="line">truetruetrue<span class="attribute">transition</span>: all <span class="number">0.6s</span>;</span><br><span class="line">truetruetrue<span class="attribute">transform-origin</span>: top right;</span><br><span class="line">truetrue</span><br><span class="line">truetrue&#125;</span><br><span class="line">truetrue<span class="selector-tag">div</span><span class="selector-pseudo">:hover</span> <span class="selector-tag">img</span><span class="selector-pseudo">:nth-child(1)</span> &#123;  <span class="comment">/* 鼠标经过div  第一张图片旋转 */</span></span><br><span class="line">truetruetrue<span class="attribute">transform</span>: <span class="built_in">rotate</span>(60deg);</span><br><span class="line">truetrue&#125;</span><br><span class="line">truetrue<span class="selector-tag">div</span><span class="selector-pseudo">:hover</span> <span class="selector-tag">img</span><span class="selector-pseudo">:nth-child(2)</span> &#123;  </span><br><span class="line">truetruetrue<span class="attribute">transform</span>: <span class="built_in">rotate</span>(120deg);</span><br><span class="line">truetrue&#125;</span><br><span class="line">truetrue<span class="selector-tag">div</span><span class="selector-pseudo">:hover</span> <span class="selector-tag">img</span><span class="selector-pseudo">:nth-child(3)</span> &#123;  </span><br><span class="line">truetruetrue<span class="attribute">transform</span>: <span class="built_in">rotate</span>(180deg);</span><br><span class="line">truetrue&#125;</span><br><span class="line">truetrue<span class="selector-tag">div</span><span class="selector-pseudo">:hover</span> <span class="selector-tag">img</span><span class="selector-pseudo">:nth-child(4)</span> &#123;  </span><br><span class="line">truetruetrue<span class="attribute">transform</span>: <span class="built_in">rotate</span>(240deg);</span><br><span class="line">truetrue&#125;</span><br><span class="line">truetrue<span class="selector-tag">div</span><span class="selector-pseudo">:hover</span> <span class="selector-tag">img</span><span class="selector-pseudo">:nth-child(5)</span> &#123;  </span><br><span class="line">truetruetrue<span class="attribute">transform</span>: <span class="built_in">rotate</span>(300deg);</span><br><span class="line">truetrue&#125;</span><br><span class="line">truetrue<span class="selector-tag">div</span><span class="selector-pseudo">:hover</span> <span class="selector-tag">img</span><span class="selector-pseudo">:nth-child(6)</span> &#123;  </span><br><span class="line">truetruetrue<span class="attribute">transform</span>: <span class="built_in">rotate</span>(360deg);</span><br><span class="line">truetrue&#125;</span><br></pre></td></tr></table></figure><h3 id="倾斜-skew-deg-deg"><a href="#倾斜-skew-deg-deg" class="headerlink" title="倾斜 skew(deg, deg)"></a>倾斜 skew(deg, deg)</h3><p><img src="/media/1498443827389.png" alt="1498443827389"></p><figure class="highlight css"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line"><span class="selector-tag">transform</span><span class="selector-pseudo">:skew(30deg</span>,0<span class="selector-tag">deg</span>);</span><br></pre></td></tr></table></figure><p>该实例通过skew方法把元素水平方向上倾斜30度，处置方向保持不变。</p><p>可以使元素按一定的角度进行倾斜，可为负值，第二个参数不写默认为0。</p><h2 id="3D变形-CSS3-transform"><a href="#3D变形-CSS3-transform" class="headerlink" title="3D变形(CSS3) transform"></a>3D变形(CSS3) transform</h2><p>2d    x  y  </p><p>3d  x  y  z</p><p> 左手坐标系</p><p>伸出左手，让拇指和食指成“L”形，大拇指向右，食指向上，中指指向前方。这样我们就建立了一个左手坐标系，拇指、食指和中指分别代表X、Y、Z轴的正方向。如下图</p><p><img src="/media/1498445587576.png" alt="1498445587576"></p><p>CSS3中的3D坐标系与上述的3D坐标系是有一定区别的，相当于其绕着X轴旋转了180度，如下图</p><p><img src="/media/1498459001951.png" alt="1498459001951"></p><p>简单记住他们的坐标：</p><p> x左边是负的，右边是正的</p><p>y 上面是负的， 下面是正的</p><p>z 里面是负的， 外面是正的</p><h3 id="rotateX"><a href="#rotateX" class="headerlink" title="rotateX()"></a>rotateX()</h3><p> 就是沿着 x 立体旋转.</p><p><img src="/media/1498445756802.png" alt="1498445756802"></p><figure class="highlight css"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><span class="line"><span class="selector-tag">img</span> &#123;</span><br><span class="line">  <span class="attribute">transition</span>:all <span class="number">0.5s</span> ease <span class="number">0s</span>;</span><br><span class="line">&#125;</span><br><span class="line"><span class="selector-tag">img</span><span class="selector-pseudo">:hove</span> &#123;</span><br><span class="line"></span><br><span class="line">  <span class="attribute">transform</span>:<span class="built_in">rotateX</span>(180deg);</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h3 id="rotateY"><a href="#rotateY" class="headerlink" title="rotateY()"></a>rotateY()</h3><p>沿着y轴进行旋转</p><p><img src="/media/1498446043198.png" alt="1498446043198"></p><figure class="highlight css"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><span class="line"><span class="selector-tag">img</span> &#123;</span><br><span class="line">  <span class="attribute">transition</span>:all <span class="number">0.5s</span> ease <span class="number">0s</span>;</span><br><span class="line">&#125;</span><br><span class="line"><span class="selector-tag">img</span><span class="selector-pseudo">:hove</span> &#123;</span><br><span class="line"></span><br><span class="line">  <span class="attribute">transform</span>:<span class="built_in">rotateX</span>(180deg);</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h3 id="rotateZ-"><a href="#rotateZ-" class="headerlink" title="rotateZ()"></a>rotateZ()</h3><p>沿着z轴进行旋转</p><figure class="highlight css"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br></pre></td><td class="code"><pre><span class="line"><span class="selector-tag">img</span> &#123;</span><br><span class="line">  <span class="attribute">transition</span>:all .<span class="number">25s</span> ease-in <span class="number">0s</span>;</span><br><span class="line">&#125;</span><br><span class="line"><span class="selector-tag">img</span><span class="selector-pseudo">:hover</span> &#123;</span><br><span class="line">  <span class="comment">/* transform:rotateX(180deg); */</span></span><br><span class="line">  <span class="comment">/* transform:rotateY(180deg); */</span></span><br><span class="line">  <span class="comment">/* transform:rotateZ(180deg); */</span></span><br><span class="line">  <span class="comment">/* transform:rotateX(45deg) rotateY(180deg) rotateZ(90deg) skew(0,10deg); */</span></span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h3 id="透视-perspective"><a href="#透视-perspective" class="headerlink" title="透视(perspective)"></a>透视(perspective)</h3><p>电脑显示屏是一个2D平面，图像之所以具有立体感（3D效果），其实只是一种视觉呈现，通过透视可以实现此目的。</p><p>透视可以将一个2D平面，在转换的过程当中，呈现3D效果。</p><ul><li>透视原理： 近大远小 。</li><li>浏览器透视：把近大远小的所有图像，透视在屏幕上。</li><li>perspective：视距，表示视点距离屏幕的长短。视点，用于模拟透视效果时人眼的位置</li></ul><p>注：并非任何情况下需要透视效果，根据开发需要进行设置。</p><p>perspective 一般作为一个属性，设置给父元素，作用于所有3D转换的子元素</p><p>理解透视距离原理：</p><p><img src="/media/1498446715314.png" alt="1498446715314"></p><h3 id="translateX-x"><a href="#translateX-x" class="headerlink" title="translateX(x)"></a>translateX(x)</h3><p>仅水平方向移动**（X轴移动）</p><p><img src="/media/1498459697576.png" alt="1498459697576"></p><p>主要目的实现移动效果</p><h3 id="translateY-y"><a href="#translateY-y" class="headerlink" title="translateY(y)"></a>translateY(y)</h3><p>仅垂直方向移动（Y轴移动）</p><p><img src="/media/1498459770252.png" alt="1498459770252"></p><h3 id="translateZ-z"><a href="#translateZ-z" class="headerlink" title="translateZ(z)"></a>translateZ(z)</h3><p>transformZ的直观表现形式就是大小变化，实质是XY平面相对于视点的远近变化（说远近就一定会说到离什么参照物远或近，在这里参照物就是perspective属性）。比如设置了perspective为200px;那么transformZ的值越接近200，就是离的越近，看上去也就越大，超过200就看不到了，因为相当于跑到后脑勺去了，我相信你正常情况下，是看不到自己的后脑勺的。</p><h3 id="translate3d-x-y-z"><a href="#translate3d-x-y-z" class="headerlink" title="translate3d(x,y,z)"></a>translate3d(x,y,z)</h3><p>[注意]其中，x和y可以是长度值，也可以是百分比，百分比是相对于其本身元素水平方向的宽度和垂直方向的高度和；z只能设置长度值</p><h3 id="开门案例"><a href="#开门案例" class="headerlink" title="开门案例"></a>开门案例</h3><figure class="highlight css"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br></pre></td><td class="code"><pre><span class="line"><span class="selector-tag">body</span> &#123;</span><br><span class="line">&#125;</span><br><span class="line"><span class="selector-class">.door</span> &#123;</span><br><span class="line">  <span class="attribute">width</span>: <span class="number">300px</span>;</span><br><span class="line">  <span class="attribute">height</span>: <span class="number">300px</span>;</span><br><span class="line">  <span class="attribute">margin</span>: <span class="number">100px</span> auto;</span><br><span class="line">  <span class="attribute">border</span>: <span class="number">1px</span> solid gray;</span><br><span class="line">  <span class="attribute">perspective</span>: <span class="number">1000px</span>;</span><br><span class="line">  <span class="attribute">background</span>: <span class="built_in">url</span>(<span class="string">'images/dog.gif'</span>) no-repeat cover;</span><br><span class="line">  <span class="attribute">position</span>: relative;</span><br><span class="line">&#125;</span><br><span class="line"><span class="selector-class">.door</span> &gt; <span class="selector-tag">div</span> &#123;</span><br><span class="line">  <span class="attribute">box-sizing</span>: border-box;</span><br><span class="line">  <span class="attribute">border</span>: <span class="number">1px</span> solid black;</span><br><span class="line">&#125;</span><br><span class="line"><span class="selector-class">.left</span> &#123;</span><br><span class="line">  <span class="attribute">float</span>: left;</span><br><span class="line">  <span class="attribute">width</span>: <span class="number">50%</span>;</span><br><span class="line">  <span class="attribute">height</span>: <span class="number">100%</span>;</span><br><span class="line">  <span class="attribute">background-color</span>: brown;</span><br><span class="line">  <span class="attribute">transform-origin</span>: left center;</span><br><span class="line">  <span class="attribute">transition</span>: <span class="number">1s</span>;</span><br><span class="line">  <span class="attribute">position</span>: relative;</span><br><span class="line">&#125;</span><br><span class="line"><span class="selector-class">.left</span><span class="selector-pseudo">::before</span> &#123;</span><br><span class="line">  <span class="attribute">content</span>: <span class="string">''</span>;</span><br><span class="line">  <span class="attribute">position</span>: absolute;</span><br><span class="line">  <span class="attribute">width</span>: <span class="number">20px</span>;</span><br><span class="line">  <span class="attribute">height</span>: <span class="number">20px</span>;</span><br><span class="line">  <span class="attribute">border-radius</span>: <span class="number">50%</span>;</span><br><span class="line">  <span class="attribute">top</span>: <span class="number">50%</span>;</span><br><span class="line">  <span class="attribute">right</span>: <span class="number">0px</span>;</span><br><span class="line">  <span class="attribute">transform</span>: <span class="built_in">translateY</span>(-10px);</span><br><span class="line">  <span class="attribute">border</span>: <span class="number">1px</span> solid whitesmoke;</span><br><span class="line">&#125;</span><br><span class="line"><span class="selector-class">.right</span> &#123;</span><br><span class="line">  <span class="attribute">width</span>: <span class="number">50%</span>;</span><br><span class="line">  <span class="attribute">height</span>: <span class="number">100%</span>;</span><br><span class="line">  <span class="attribute">float</span>: left;</span><br><span class="line">  <span class="attribute">background-color</span>: brown;</span><br><span class="line">  <span class="attribute">transform-origin</span>: right center;</span><br><span class="line">  <span class="attribute">transition</span>: <span class="number">1s</span>;</span><br><span class="line">  <span class="attribute">position</span>: relative;</span><br><span class="line">&#125;</span><br><span class="line"><span class="selector-class">.right</span><span class="selector-pseudo">::before</span> &#123;</span><br><span class="line">  <span class="attribute">content</span>: <span class="string">''</span>;</span><br><span class="line">  <span class="attribute">position</span>: absolute;</span><br><span class="line">  <span class="attribute">width</span>: <span class="number">20px</span>;</span><br><span class="line">  <span class="attribute">height</span>: <span class="number">20px</span>;</span><br><span class="line">  <span class="attribute">border-radius</span>: <span class="number">50%</span>;</span><br><span class="line">  <span class="attribute">top</span>: <span class="number">50%</span>;</span><br><span class="line">  <span class="attribute">left</span>: <span class="number">0px</span>;</span><br><span class="line">  <span class="attribute">transform</span>: <span class="built_in">translateY</span>(-10px);</span><br><span class="line">  <span class="attribute">border</span>: <span class="number">1px</span> solid whitesmoke;</span><br><span class="line">&#125;</span><br><span class="line"><span class="selector-class">.door</span><span class="selector-pseudo">:hover</span> <span class="selector-class">.left</span> &#123;</span><br><span class="line">  <span class="attribute">transform</span>: <span class="built_in">rotateY</span>(-130deg);</span><br><span class="line">&#125;</span><br><span class="line"><span class="selector-class">.door</span><span class="selector-pseudo">:hover</span> <span class="selector-class">.right</span> &#123;</span><br><span class="line">  <span class="attribute">transform</span>: <span class="built_in">rotateY</span>(130deg);</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h3 id="backface-visibility"><a href="#backface-visibility" class="headerlink" title="backface-visibility"></a>backface-visibility</h3><p>backface-visibility 属性定义当元素不面向屏幕时是否可见。</p><h3 id="翻转盒子案例"><a href="#翻转盒子案例" class="headerlink" title="翻转盒子案例"></a>翻转盒子案例</h3><figure class="highlight css"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br></pre></td><td class="code"><pre><span class="line"><span class="selector-tag">div</span> &#123;</span><br><span class="line">truetruetrue<span class="attribute">width</span>: <span class="number">224px</span>;</span><br><span class="line">truetruetrue<span class="attribute">height</span>: <span class="number">224px</span>;</span><br><span class="line">truetruetrue<span class="attribute">margin</span>: <span class="number">100px</span> auto;</span><br><span class="line">truetruetrue<span class="attribute">position</span>: relative;</span><br><span class="line">truetrue&#125;</span><br><span class="line">truetrue<span class="selector-tag">div</span> <span class="selector-tag">img</span> &#123;</span><br><span class="line">truetruetrue<span class="attribute">position</span>: absolute;</span><br><span class="line">truetruetrue<span class="attribute">top</span>: <span class="number">0</span>;</span><br><span class="line">truetruetrue<span class="attribute">left</span>: <span class="number">0</span>;</span><br><span class="line">truetruetrue<span class="attribute">transition</span>: all <span class="number">1s</span>; </span><br><span class="line">truetrue&#125;</span><br><span class="line">truetrue<span class="selector-tag">div</span> <span class="selector-tag">img</span><span class="selector-pseudo">:first-child</span> &#123;</span><br><span class="line">truetruetrue<span class="attribute">z-index</span>: <span class="number">1</span>;</span><br><span class="line">truetruetrue<span class="attribute">backface-visibility</span>: hidden; <span class="comment">/* 不是正面对象屏幕，就隐藏 */</span></span><br><span class="line">truetrue&#125;</span><br><span class="line">truetrue<span class="selector-tag">div</span><span class="selector-pseudo">:hover</span> <span class="selector-tag">img</span> &#123;</span><br><span class="line">truetruetrue<span class="attribute">transform</span>: <span class="built_in">rotateY</span>(180deg);</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h2 id="动画-CSS3-animation"><a href="#动画-CSS3-animation" class="headerlink" title="动画(CSS3) animation"></a>动画(CSS3) animation</h2><p>动画是CSS3中具有颠覆性的特征之一，可通过设置多个节点来精确控制一个或一组动画，常用来实现复杂的动画效果。</p><p>语法格式：</p><figure class="highlight css"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line"><span class="selector-tag">animation</span>:动画名称 动画时间 运动曲线  何时开始  播放次数  是否反方向;</span><br></pre></td></tr></table></figure><p><img src="/media/1498461096243.png" alt="1498461096243"></p><p>关于几个值，除了名字，动画时间，延时有严格顺序要求其它随意r</p><figure class="highlight css"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line">@<span class="keyword">keyframes</span> 动画名称 &#123;</span><br><span class="line">  from&#123; 开始位置 &#125;  0%</span><br><span class="line">  to&#123;  结束  &#125;  100%</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">animation-iteration-count:infinite;  无限循环播放</span><br><span class="line">animation-play-state:paused;   暂停动画&quot;</span><br></pre></td></tr></table></figure><h3 id="小汽车案例"><a href="#小汽车案例" class="headerlink" title="小汽车案例"></a>小汽车案例</h3><figure class="highlight css"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br></pre></td><td class="code"><pre><span class="line"><span class="selector-tag">body</span> &#123;</span><br><span class="line">  <span class="attribute">background</span>: white;</span><br><span class="line">&#125;</span><br><span class="line"><span class="selector-tag">img</span> &#123;</span><br><span class="line">  <span class="attribute">width</span>: <span class="number">200px</span>;</span><br><span class="line">&#125;</span><br><span class="line"><span class="selector-class">.animation</span> &#123;</span><br><span class="line">  <span class="attribute">animation-name</span>: goback;</span><br><span class="line">  <span class="attribute">animation-duration</span>: <span class="number">5s</span>;</span><br><span class="line">  <span class="attribute">animation-timing-function</span>: ease;</span><br><span class="line">  <span class="attribute">animation-iteration-count</span>: infinite;</span><br><span class="line">&#125;</span><br><span class="line">@<span class="keyword">keyframes</span> goback &#123;</span><br><span class="line">  0%&#123;&#125;</span><br><span class="line">  49%&#123;</span><br><span class="line">    <span class="attribute">transform</span>: <span class="built_in">translateX</span>(1000px);</span><br><span class="line">  &#125;</span><br><span class="line">  55%&#123;</span><br><span class="line">    <span class="attribute">transform</span>: <span class="built_in">translateX</span>(1000px) <span class="built_in">rotateY</span>(180deg);</span><br><span class="line">  &#125;</span><br><span class="line">  95%&#123;</span><br><span class="line">    <span class="attribute">transform</span>: <span class="built_in">translateX</span>(0) <span class="built_in">rotateY</span>(180deg);</span><br><span class="line">  &#125;</span><br><span class="line">  100%&#123;</span><br><span class="line">    <span class="attribute">transform</span>: <span class="built_in">translateX</span>(0) <span class="built_in">rotateY</span>(0deg);</span><br><span class="line">  &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h2 id="伸缩布局-CSS3"><a href="#伸缩布局-CSS3" class="headerlink" title="伸缩布局(CSS3)"></a>伸缩布局(CSS3)</h2><p>CSS3在布局方面做了非常大的改进，使得我们对块级元素的布局排列变得十分灵活，适应性非常强，其强大的伸缩性，在响应式开中可以发挥极大的作用。</p><p>主轴：Flex容器的主轴主要用来配置Flex项目，默认是水平方向</p><p>侧轴：与主轴垂直的轴称作侧轴，默认是垂直方向的</p><p>方向：默认主轴从左向右，侧轴默认从上到下</p><p>主轴和侧轴并不是固定不变的，通过flex-direction可以互换。</p><p><img src="/media/1498441839910.png" alt="1498441839910"></p><p>Flex布局的语法规范经过几年发生了很大的变化，也给Flexbox的使用带来一定的局限性，因为语法规范版本众多，浏览器支持不一致，致使Flexbox布局使用不多</p><p><strong>2、各属性详解<em>**</em></strong></p><p>1.flex子项目在主轴的缩放比例，不指定flex属性，则不参与伸缩分配</p><p>min-width  最小值      min-width: 280px  最小宽度  不能小于 280</p><p>max-width: 1280px  最大宽度  不能大于 1280</p><p>2.flex-direction调整主轴方向（默认为水平方向）</p><p>flex-direction: column 垂直排列</p><p>flex-direction: row  水平排列</p><p><a href="http://m.ctrip.com/html5/" target="_blank" rel="noopener">http://m.ctrip.com/html5/</a>   携程网手机端地址</p><p>3、justify-content调整主轴对齐（水平对齐）</p><p>子盒子如何在父盒子里面水平对齐</p><table><thead><tr><th>值</th><th>描述</th><th>白话文</th></tr></thead><tbody><tr><td>flex-start</td><td>默认值。项目位于容器的开头。</td><td>让子元素从父容器的开头开始排序但是盒子顺序不变</td></tr><tr><td>flex-end</td><td>项目位于容器的结尾。</td><td>让子元素从父容器的后面开始排序但是盒子顺序不变</td></tr><tr><td>center</td><td>项目位于容器的中心。</td><td>让子元素在父容器中间显示</td></tr><tr><td>space-between</td><td>项目位于各行之间留有空白的容器内。</td><td>左右的盒子贴近父盒子，中间的平均分布空白间距</td></tr><tr><td>space-around</td><td>项目位于各行之前、之间、之后都留有空白的容器内。</td><td>相当于给每个盒子添加了左右margin外边距</td></tr></tbody></table><p>4、align-items调整侧轴对齐（垂直对齐）</p><p>子盒子如何在父盒子里面垂直对齐（单行）</p><table><thead><tr><th>值</th><th>描述</th><th>白话文</th></tr></thead><tbody><tr><td>stretch</td><td>默认值。项目被拉伸以适应容器。</td><td>让子元素的高度拉伸适用父容器（子元素不给高度的前提下)</td></tr><tr><td>center</td><td>项目位于容器的中心。</td><td>垂直居中</td></tr><tr><td>flex-start</td><td>项目位于容器的开头。</td><td>垂直对齐开始位置 上对齐</td></tr><tr><td>flex-end</td><td>项目位于容器的结尾。</td><td>垂直对齐结束位置 底对齐</td></tr><tr><td></td><td></td></tr></tbody></table><p>5、flex-wrap控制是否换行</p><p>当我们子盒子内容宽度多于父盒子的时候如何处理</p><table><thead><tr><th>值</th><th>描述</th></tr></thead><tbody><tr><td>nowrap</td><td>默认值。规定灵活的项目不拆行或不拆列。  不换行，则 收缩（压缩） 显示  强制一行内显示</td></tr><tr><td>wrap</td><td>规定灵活的项目在必要的时候拆行或拆列。</td></tr><tr><td>wrap-reverse</td><td>规定灵活的项目在必要的时候拆行或拆列，但是以相反的顺序。</td></tr><tr><td></td><td></td></tr><tr><td></td></tr></tbody></table><p>6、flex-flow是flex-direction、flex-wrap的简写形式</p><figure class="highlight css"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line"><span class="selector-tag">flex-flow</span>: <span class="selector-tag">flex-direction</span>  <span class="selector-tag">flex-wrap</span>;</span><br></pre></td></tr></table></figure><p>白话记：    flex-flow: 排列方向   换不换行; </p><p>两个中间用空格</p><p>例如：</p><figure class="highlight css"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line"><span class="selector-tag">display</span>: <span class="selector-tag">flex</span>;</span><br><span class="line"><span class="comment">/* flex-direction: row;</span></span><br><span class="line"><span class="comment">flex-wrap: wrap;   这两句话等价于下面的这句话*/</span></span><br><span class="line"><span class="selector-tag">flex-flow</span>: <span class="selector-tag">column</span> <span class="selector-tag">wrap</span>;  <span class="comment">/* 两者的综合 */</span></span><br></pre></td></tr></table></figure><p>7、align-content堆栈（由flex-wrap产生的独立行）多行垂直对齐方式齐</p><p>align-content是针对flex容器里面多轴(多行)的情况,align-items是针对一行的情况进行排列。</p><p>必须对父元素设置自由盒属性display:flex;，并且设置排列方式为横向排列flex-direction:row;并且设置换行，flex-wrap:wrap;这样这个属性的设置才会起作用。</p><table><thead><tr><th>值</th><th>描述</th><th>测试</th></tr></thead><tbody><tr><td>stretch</td><td>默认值。项目被拉伸以适应容器。</td><td></td></tr><tr><td>center</td><td>项目位于容器的中心。</td><td></td></tr><tr><td>flex-start</td><td>项目位于容器的开头。</td><td></td></tr><tr><td>flex-end</td><td>项目位于容器的结尾。</td><td></td></tr><tr><td>space-between</td><td>项目位于各行之间留有空白的容器内。</td><td></td></tr><tr><td>space-around</td><td>项目位于各行之前、之间、之后都留有空白的容器内。</td></tr></tbody></table><p>8、order控制子项目的排列顺序，正序方式排序，从小到大</p><p>用css 来控制盒子的前后顺序。  用order 就可以</p><p>用整数值来定义排列顺序，数值小的排在前面。可以为负值。 默认值是 0</p><figure class="highlight css"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line"><span class="selector-tag">order</span>: 1;</span><br></pre></td></tr></table></figure><p>此知识点重在理解，要明确找出主轴、侧轴、方向，各属性对应的属性值</p>]]></content>
      
      
      <categories>
          
          <category> Css </category>
          
      </categories>
      
      
        <tags>
            
            <tag> Css笔记 </tag>
            
        </tags>
      
    </entry>
    
    <entry>
      <title>Css2</title>
      <link href="/2017/08/07/02-CSS/"/>
      <url>/2017/08/07/02-CSS/</url>
      
        <content type="html"><![CDATA[<link rel="stylesheet" class="aplayer-secondary-style-marker" href="/assets/css/APlayer.min.css"><script src="/assets/js/APlayer.min.js" class="aplayer-secondary-script-marker"></script><hr><h2 id="课程目标"><a href="#课程目标" class="headerlink" title="课程目标:"></a>课程目标:</h2><ol><li>学会使用CSS选择器</li><li>熟记CSS样式和外观属性</li><li>熟练掌握CSS各种选择器</li><li>熟练掌握CSS各种选择器</li><li>熟练掌握CSS三种显示模式</li><li>熟练掌握CSS背景属性</li><li>熟练掌握CSS三大特性</li><li>熟练掌握CSS盒子模型</li><li>熟练掌握CSS浮动<br>10.熟练掌握CSS定位<br>11.熟练掌握CSS高级技巧强化CSS<br>typora-copy-images-to: media</li></ol><hr><h1 id="CSS的发展历程"><a href="#CSS的发展历程" class="headerlink" title="CSS的发展历程"></a>CSS的发展历程</h1><p>从HTML被发明开始，样式就以各种形式存在。不同的浏览器结合它们各自的样式语言为用户提供页面效果的控制。最初的HTML只包含很少的显示属性。<br>随着HTML的成长，为了满足页面设计者的要求，HTML添加了很多显示功能。但是随着这些功能的增加，HTML变的越来越杂乱，而且HTML页面也越来越臃肿。于是CSS便诞生了。</p><h1 id="CSS-网页的美容师"><a href="#CSS-网页的美容师" class="headerlink" title="CSS 网页的美容师"></a>CSS 网页的美容师</h1><p>CSS的出现，拯救了混乱的HTML，当让更加拯救了我们web开发者。 让我们的网页更加丰富多彩。   </p><p>CSS的最大贡献就是：  让 HTML 从样式中解脱苦海，  实现了 HTML 专注去做 结构呈现。 而样式交给 CSS 后，你完全可以放心的早点洗洗睡了！</p><p><img src="/media/x.jpg" width="250"></p><p>而且。。。。。 CSS 做的很出色，如果JavaScript是网页的魔法师，那么CSS它是我们网页的美容师，不信，你看:</p><p><img src="/media/baby.jpeg"></p><p>ps:  你跟Angelababy只差了一个妆容的距离</p><p>来个更直观的认识吧： </p><p><img src="/media/db.png"></p><p>有人说， 没有不漂亮的女人，只有不会打扮的女人。</p><p>我想说， 没有不好看的网页，只有不会CSS的前端。</p><p>网页添加 CSS和不添加CSS 的对比：</p><p>带有CSS的页面</p><p><img src="/media/Cc.png"></p><p>没有CSS的页面</p><p><img src="/media/fff.png"></p><h1 id="CSS初识"><a href="#CSS初识" class="headerlink" title="CSS初识"></a>CSS初识</h1><p>CSS(Cascading Style Sheets)</p><p>CSS通常称为CSS样式表或层叠样式表（级联样式表），主要用于设置HTML页面中的文本内容（字体、大小、对齐方式等）、图片的外形（宽高、边框样式、边距等）以及版面的布局等外观显示样式。</p><p>CSS以HTML为基础，提供了丰富的功能，如字体、颜色、背景的控制及整体排版等，而且还可以针对不同的浏览器设置不同的样式。</p><h1 id="CSS样式规则"><a href="#CSS样式规则" class="headerlink" title="CSS样式规则"></a>CSS样式规则</h1><p>使用HTML时，需要遵从一定的规范。CSS亦如此，要想熟练地使用CSS对网页进行修饰，首先需要了解CSS样式规则，具体格式如下：                                          </p><p><img src="/media/gz.png"></p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><span class="line">在上面的样式规则中:</span><br><span class="line"></span><br><span class="line">1.选择器用于指定CSS样式作用的HTML对象，花括号内是对该对象设置的具体样式。</span><br><span class="line">2.属性和属性值以“键值对”的形式出现。</span><br><span class="line">3.属性是对指定的对象设置的样式属性，例如字体大小、文本颜色等。</span><br><span class="line">4.属性和属性值之间用英文“:”连接。</span><br><span class="line">5.多个“键值对”之间用英文“;”进行区分。</span><br><span class="line">可以用段落 和 表格的对齐的演示。</span><br></pre></td></tr></table></figure><h1 id="CSS字体样式属性"><a href="#CSS字体样式属性" class="headerlink" title="CSS字体样式属性"></a>CSS字体样式属性</h1><h2 id="font-size-字号大小"><a href="#font-size-字号大小" class="headerlink" title="font-size:字号大小"></a>font-size:字号大小</h2><p>font-size属性用于设置字号，该属性的值可以使用相对长度单位，也可以使用绝对长度单位。其中，相对长度单位比较常用，推荐使用像素单位px，绝对长度单位使用较少。具体如下：</p><p><img src="/media/dd.png"></p><h2 id="font-family-字体"><a href="#font-family-字体" class="headerlink" title="font-family:字体"></a>font-family:字体</h2><p>font-family属性用于设置字体。网页中常用的字体有宋体、微软雅黑、黑体等，例如将网页中所有段落文本的字体设置为微软雅黑，可以使用如下CSS样式代码：</p><p>p{ font-family:”微软雅黑”;}</p><p>可以同时指定多个字体，中间以逗号隔开，表示如果浏览器不支持第一个字体，则会尝试下一个，直到找到合适的字体。</p><blockquote><p><img src="/media/good.png">常用技巧：</p></blockquote><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line">1. 现在网页中普遍使用14px+。</span><br><span class="line">2. 尽量使用偶数的数字字号。ie6等老式浏览器支持奇数会有bug。</span><br><span class="line">3. 各种字体之间必须使用英文状态下的逗号隔开。</span><br><span class="line">4. 中文字体需要加英文状态下的引号，英文字体一般不需要加引号。当需要设置英文字体时，英文字体名必须位于中文字体名之前。</span><br><span class="line">5. 如果字体名中包含空格、#、$等符号，则该字体必须加英文状态下的单引号或双引号，例如font-family: &quot;Times New Roman&quot;;。</span><br><span class="line">6. 尽量使用系统默认字体，保证在任何用户的浏览器中都能正确显示。</span><br></pre></td></tr></table></figure><h2 id="CSS-Unicode字体"><a href="#CSS-Unicode字体" class="headerlink" title="CSS Unicode字体"></a>CSS Unicode字体</h2><p>在 CSS 中设置字体名称，直接写中文是可以的。但是在文件编码（GB2312、UTF-8 等）不匹配时会产生乱码的错误。xp 系统不支持 类似微软雅黑的中文。</p><p>方案一： 你可以使用英文来替代。 比如 font-family:”Microsoft Yahei”。</p><p>方案二： 在 CSS 直接使用 Unicode 编码来写字体名称可以避免这些错误。使用 Unicode 写中文字体名称，浏览器是可以正确的解析的。<br>font-family: “\5FAE\8F6F\96C5\9ED1”，表示设置字体为“微软雅黑”。</p><p><img src="/media/shs.png"></p><p>可以通过escape()  来测试属于什么字体。</p><table><thead><tr><th>字体名称</th><th>英文名称</th><th>Unicode 编码</th></tr></thead><tbody><tr><td>宋体</td><td>SimSun</td><td>\5B8B\4F53</td></tr><tr><td>新宋体</td><td>NSimSun</td><td>\65B0\5B8B\4F53</td></tr><tr><td>黑体</td><td>SimHei</td><td>\9ED1\4F53</td></tr><tr><td>微软雅黑</td><td>Microsoft YaHei</td><td>\5FAE\8F6F\96C5\9ED1</td></tr><tr><td>楷体_GB2312</td><td>KaiTi_GB2312</td><td>\6977\4F53_GB2312</td></tr><tr><td>隶书</td><td>LiSu</td><td>\96B6\4E66</td></tr><tr><td>幼园</td><td>YouYuan</td><td>\5E7C\5706</td></tr><tr><td>华文细黑</td><td>STXihei</td><td>\534E\6587\7EC6\9ED1</td></tr><tr><td>细明体</td><td>MingLiU</td><td>\7EC6\660E\4F53</td></tr><tr><td>新细明体</td><td>PMingLiU</td><td>\65B0\7EC6\660E\4F53</td></tr></tbody></table><p>为了照顾不同电脑的字体安装问题，我们尽量只使用宋体和微软雅黑中文字体</p><h2 id="font-weight-字体粗细"><a href="#font-weight-字体粗细" class="headerlink" title="font-weight:字体粗细"></a>font-weight:字体粗细</h2><p>字体加粗除了用 b  和 strong 标签之外，可以使用CSS 来实现，但是CSS 是没有语义的。</p><figure class="highlight html"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">font-weight属性用于定义字体的粗细，其可用属性值：normal、bold、bolder、lighter、100~900（100的整数倍）。</span><br></pre></td></tr></table></figure><p><img src="/media/good.png">小技巧： </p> <figure class="highlight css"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">数字 400 等价于 <span class="selector-tag">normal</span>，而 700 等价于 <span class="selector-tag">bold</span>。  但是我们更喜欢用数字来表示。</span><br></pre></td></tr></table></figure><h2 id="font-style-字体风格"><a href="#font-style-字体风格" class="headerlink" title="font-style:字体风格"></a>font-style:字体风格</h2><p>字体倾斜除了用 i  和 em 标签之外，可以使用CSS 来实现，但是CSS 是没有语义的。</p><p>font-style属性用于定义字体风格，如设置斜体、倾斜或正常字体，其可用属性值如下：</p><p>normal：默认值，浏览器会显示标准的字体样式。</p><p>italic：浏览器会显示斜体的字体样式。</p><p>oblique：浏览器会显示倾斜的字体样式。</p><p><img src="/media/good.png">小技巧： </p> <figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">平时我们很少给文字加斜体，反而喜欢给斜体标签（em，i）改为普通模式。</span><br></pre></td></tr></table></figure><h2 id="font-综合设置字体样式-重点"><a href="#font-综合设置字体样式-重点" class="headerlink" title="font:综合设置字体样式 (重点)"></a>font:综合设置字体样式 (重点)</h2><p>font属性用于对字体样式进行综合设置，其基本语法格式如下：</p><figure class="highlight css"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">选择器&#123;<span class="attribute">font</span>: font-style  font-weight  font-size/line-height  font-family;&#125;</span><br></pre></td></tr></table></figure><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line">使用font属性时，必须按上面语法格式中的顺序书写，不能更换顺序，各个属性以空格隔开。</span><br><span class="line"></span><br><span class="line">注意：其中不需要设置的属性可以省略（取默认值），但必须保留font-size和font-family属性，否则font属性将不起作用。</span><br></pre></td></tr></table></figure><h1 id="开发者工具（chrome）"><a href="#开发者工具（chrome）" class="headerlink" title="开发者工具（chrome）"></a>开发者工具（chrome）</h1><p>此工具是我们的必备工具，以后代码出了问题，我们首先第一反应就是：</p><p>“按F12”或者是 “shift+ctrl+i”   打开 开发者工具。</p><p>菜单：   右击网页空白出—查看 </p><p><img src="/media/chrome.png"></p><p><img src="/media/good.png">小技巧：</p><ol><li>ctrl+滚轮 可以 放大开发者工具代码大小。</li><li>左边是HTML元素结构   右边是CSS样式。</li><li>右边CSS样式可以改动数值和颜色查看更改后效果。</li></ol><h1 id="选择器（重点）"><a href="#选择器（重点）" class="headerlink" title="选择器（重点）"></a>选择器（重点）</h1><p>要想将CSS样式应用于特定的HTML元素，首先需要找到该目标元素。在CSS中，执行这一任务的样式规则部分被称为选择器（选择符）。</p><p><img src="/media/ax.png"></p><p>如上图所以，要把里面的小黄人分为2组，最快的方法怎办？  </p><p>很多， 比如 一只眼睛的一组，剩下的一组  </p><p>这就用到基础选择器组：</p><h2 id="标签选择器（元素选择器）"><a href="#标签选择器（元素选择器）" class="headerlink" title="标签选择器（元素选择器）"></a>标签选择器（元素选择器）</h2><p>标签选择器是指用HTML标签名称作为选择器，按标签名称分类，为页面中某一类标签指定统一的CSS样式。其基本语法格式如下：</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">标签名&#123;属性1:属性值1; 属性2:属性值2; 属性3:属性值3; &#125;  或者</span><br><span class="line">元素名&#123;属性1:属性值1; 属性2:属性值2; 属性3:属性值3; &#125;</span><br></pre></td></tr></table></figure><p>标签选择器最大的优点是能快速为页面中同类型的标签统一样式，同时这也是他的缺点，不能设计差异化样式。</p><p>课堂案例：</p><p> 传智简介</p><h2 id="类选择器"><a href="#类选择器" class="headerlink" title="类选择器"></a>类选择器</h2><p>类选择器使用“.”（英文点号）进行标识，后面紧跟类名，其基本语法格式如下：</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">.类名&#123;属性1:属性值1; 属性2:属性值2; 属性3:属性值3; &#125;</span><br></pre></td></tr></table></figure><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">标签调用的时候用 class=“类名”  即可。</span><br></pre></td></tr></table></figure><p>类选择器最大的优势是可以为元素对象定义单独或相同的样式。</p><p><img src="/media/good.png">小技巧：</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">1.长名称或词组可以使用中横线来为选择器命名。</span><br><span class="line">2.不建议使用“_”下划线来命名CSS选择器。</span><br></pre></td></tr></table></figure><p>​    输入的时候少按一个shift键;<br>　浏览器兼容问题 (比如使用<em>tips的选择器命名，在IE6是无效的)<br>　能良好区分JavaScript变量命名(JS变量命名是用“</em>”)</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">3.不要纯数字、中文等命名， 尽量使用英文字母来表示。</span><br></pre></td></tr></table></figure><p>猜谜底游戏：</p><p><img src="/media/midi.png" width="450">   你猜？</p><p>命名规范：  见附件（Web前端开发规范手册.doc）</p><p>命名是我们通俗约定的，但是没有规定必须用这些常用的命名。</p><p>课堂案例：</p><p> <img src="/media/go.png"></p><figure class="highlight html"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br></pre></td><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">head</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">meta</span> <span class="attr">charset</span>=<span class="string">"utf-8"</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">style</span>&gt;</span><span class="undefined"></span></span><br><span class="line"><span class="undefined">        span &#123;</span></span><br><span class="line"><span class="undefined">        font-size: 100px;</span></span><br><span class="line"><span class="undefined">        &#125;</span></span><br><span class="line"><span class="css">        <span class="selector-class">.blue</span> &#123;</span></span><br><span class="line"><span class="undefined">        color: blue;</span></span><br><span class="line"><span class="undefined">        &#125;</span></span><br><span class="line"><span class="css">        <span class="selector-class">.red</span> &#123;</span></span><br><span class="line"><span class="undefined">        color: red;</span></span><br><span class="line"><span class="undefined">        &#125;</span></span><br><span class="line"><span class="css">        <span class="selector-class">.orange</span> &#123;</span></span><br><span class="line"><span class="undefined">color: orange;</span></span><br><span class="line"><span class="undefined">        &#125;</span></span><br><span class="line"><span class="css"><span class="selector-class">.green</span> &#123;</span></span><br><span class="line"><span class="undefined">color: green;</span></span><br><span class="line"><span class="undefined">&#125;</span></span><br><span class="line"><span class="undefined">        </span><span class="tag">&lt;/<span class="name">style</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;/<span class="name">head</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">body</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">span</span> <span class="attr">class</span>=<span class="string">"blue"</span>&gt;</span>G<span class="tag">&lt;/<span class="name">span</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">span</span> <span class="attr">class</span>=<span class="string">"red"</span>&gt;</span>o<span class="tag">&lt;/<span class="name">span</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">span</span> <span class="attr">class</span>=<span class="string">"orange"</span>&gt;</span>o<span class="tag">&lt;/<span class="name">span</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">span</span> <span class="attr">class</span>=<span class="string">"blue"</span>&gt;</span>g<span class="tag">&lt;/<span class="name">span</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">span</span> <span class="attr">class</span>=<span class="string">"green"</span>&gt;</span>l<span class="tag">&lt;/<span class="name">span</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">span</span> <span class="attr">class</span>=<span class="string">"red"</span>&gt;</span>e<span class="tag">&lt;/<span class="name">span</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;/<span class="name">body</span>&gt;</span></span><br></pre></td></tr></table></figure><h2 id="多类名选择器"><a href="#多类名选择器" class="headerlink" title="多类名选择器"></a>多类名选择器</h2><p>我们可以给标签指定多个类名，从而达到更多的选择目的。</p><p><img src="/media/lei.png"></p><p>注意：</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">1. 样式显示效果跟HTML元素中的类名先后顺序没有关系,受CSS样式书写的上下顺序有关。</span><br><span class="line">2. 各个类名中间用空格隔开。</span><br></pre></td></tr></table></figure><p>多类名选择器在后期布局比较复杂的情况下，还是较多使用的。</p><figure class="highlight html"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">div</span> <span class="attr">class</span>=<span class="string">"pink fontWeight font20"</span>&gt;</span>亚瑟<span class="tag">&lt;/<span class="name">div</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">div</span> <span class="attr">class</span>=<span class="string">"font20"</span>&gt;</span>刘备<span class="tag">&lt;/<span class="name">div</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">div</span> <span class="attr">class</span>=<span class="string">"font14 pink"</span>&gt;</span>安其拉<span class="tag">&lt;/<span class="name">div</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">div</span> <span class="attr">class</span>=<span class="string">"font14"</span>&gt;</span>貂蝉<span class="tag">&lt;/<span class="name">div</span>&gt;</span></span><br></pre></td></tr></table></figure><h2 id="id选择器"><a href="#id选择器" class="headerlink" title="id选择器"></a>id选择器</h2><p>id选择器使用“#”进行标识，后面紧跟id名，其基本语法格式如下：</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">#id名&#123;属性1:属性值1; 属性2:属性值2; 属性3:属性值3; &#125;</span><br></pre></td></tr></table></figure><p>该语法中，id名即为HTML元素的id属性值，大多数HTML元素都可以定义id属性，元素的id值是唯一的，只能对应于文档中某一个具体的元素。</p><p>用法基本和类选择器相同。</p><h2 id="id选择器和类选择器区别"><a href="#id选择器和类选择器区别" class="headerlink" title="id选择器和类选择器区别"></a>id选择器和类选择器区别</h2><p>W3C标准规定，在同一个页面内，不允许有相同名字的id对象出现，但是允许相同名字的class。</p><p>类选择器（class） 好比人的名字，  是可以多次重复使用的， 比如  张伟  王伟  李伟  李娜</p><p>id选择器     好比人的身份证号码，  全中国是唯一的， 不得重复。 只能使用一次。</p><p><strong><em>id选择器和类选择器最大的不同在于 使用次数上。</em></strong></p><p><img src="/media/zfb.jpg"></p><h2 id="通配符选择器"><a href="#通配符选择器" class="headerlink" title="通配符选择器"></a>通配符选择器</h2><p>通配符选择器用“*”号表示，他是所有选择器中作用范围最广的，能匹配页面中所有的元素。其基本语法格式如下：</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">* &#123; 属性1:属性值1; 属性2:属性值2; 属性3:属性值3; &#125;</span><br></pre></td></tr></table></figure><p>例如下面的代码，使用通配符选择器定义CSS样式，清除所有HTML标记的默认边距。</p><figure class="highlight css"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line">* &#123;</span><br><span class="line">  <span class="attribute">margin</span>: <span class="number">0</span>;                    <span class="comment">/* 定义外边距*/</span></span><br><span class="line">  <span class="attribute">padding</span>: <span class="number">0</span>;                   <span class="comment">/* 定义内边距*/</span></span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>注意：</p><p>  这个通配符选择器，就像我们的电影明星中的梦中情人， 想想它就好了，但是它不会和你过日子。 </p><h2 id="伪类选择器"><a href="#伪类选择器" class="headerlink" title="伪类选择器"></a>伪类选择器</h2><p>  伪类选择器用于向某些选择器添加特殊的效果。比如给链接添加特殊效果， 比如可以选择 第1个，第n个元素。</p><figure class="highlight css"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">为了和我们刚才学的类选择器相区别，  类选择器是一个点 比如 <span class="selector-class">.demo</span> &#123;&#125;   而我们的伪类 用 2个点 就是 冒号  比如  <span class="selector-pseudo">:link</span>&#123;&#125;</span><br></pre></td></tr></table></figure><h3 id="链接伪类选择器"><a href="#链接伪类选择器" class="headerlink" title="链接伪类选择器"></a>链接伪类选择器</h3><ul><li>:link      /<em> 未访问的链接 </em>/</li><li>:visited   /<em> 已访问的链接 </em>/</li><li>:hover     /<em> 鼠标移动到链接上 </em>/</li><li>:active    /<em> 选定的链接 </em>/</li></ul><p>   注意写的时候，他们的顺序尽量不要颠倒  按照  lvha 的顺序。   love   hate  爱上了讨厌 记忆法    或者   lv 包包 非常 hao </p><figure class="highlight css"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><span class="line"><span class="selector-tag">a</span> &#123;   <span class="comment">/* a是标签选择器  所有的链接 */</span></span><br><span class="line">truetruetrue<span class="attribute">font-weight</span>: <span class="number">700</span>;</span><br><span class="line">truetruetrue<span class="attribute">font-size</span>: <span class="number">16px</span>;</span><br><span class="line">truetruetrue<span class="attribute">color</span>: gray;</span><br><span class="line">truetrue&#125;</span><br><span class="line"><span class="selector-tag">a</span><span class="selector-pseudo">:hover</span> &#123;   <span class="comment">/* :hover 是链接伪类选择器 鼠标经过 */</span></span><br><span class="line">truetruetrue<span class="attribute">color</span>: red; <span class="comment">/*  鼠标经过的时候，由原来的 灰色 变成了红色 */</span></span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h3 id="结构-位置-伪类选择器（CSS3"><a href="#结构-位置-伪类选择器（CSS3" class="headerlink" title="结构(位置)伪类选择器（CSS3)"></a>结构(位置)伪类选择器（CSS3)</h3><ul><li>:first-child :选取属于其父元素的首个子元素的指定选择器</li><li>:last-child :选取属于其父元素的最后一个子元素的指定选择器</li><li>:nth-child(n) ： 匹配属于其父元素的第 N 个子元素，不论元素的类型</li><li>:nth-last-child(n) ：选择器匹配属于其元素的第 N 个子元素的每个元素，不论元素的类型，从最后一个子元素开始计数。<br>n 可以是数字、关键词或公式</li><li>​</li></ul><figure class="highlight css"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br></pre></td><td class="code"><pre><span class="line"><span class="selector-tag">li</span><span class="selector-pseudo">:first-child</span> &#123; <span class="comment">/*  选择第一个孩子 */</span></span><br><span class="line">        <span class="attribute">color</span>: pink; </span><br><span class="line">        &#125;</span><br><span class="line"><span class="selector-tag">li</span><span class="selector-pseudo">:last-child</span> &#123;   <span class="comment">/* 最后一个孩子 */</span></span><br><span class="line">        <span class="attribute">color</span>: purple;</span><br><span class="line">        &#125;</span><br><span class="line"><span class="selector-tag">li</span><span class="selector-pseudo">:nth-child(4)</span> &#123;   <span class="comment">/* 选择第4个孩子  n  代表 第几个的意思 */</span> </span><br><span class="line">truetruetruetrue<span class="attribute">color</span>: skyblue;</span><br><span class="line">        &#125;</span><br></pre></td></tr></table></figure><h3 id="目标伪类选择器-CSS3"><a href="#目标伪类选择器-CSS3" class="headerlink" title="目标伪类选择器(CSS3)"></a>目标伪类选择器(CSS3)</h3><p> :target目标伪类选择器 :选择器可用于选取当前活动的目标元素</p><figure class="highlight css"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line"><span class="selector-pseudo">:target</span> &#123;</span><br><span class="line">truetrue<span class="attribute">color</span>: red;</span><br><span class="line">truetrue<span class="attribute">font-size</span>: <span class="number">30px</span>;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h1 id="CSS注释"><a href="#CSS注释" class="headerlink" title="CSS注释"></a>CSS注释</h1><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">CSS规则是使用     /*  需要注释的内容  */  进行注释的，即在需要注释的内容前使用 “/*” 标记开始注释，在内容的结尾使用 “*/”结束。</span><br></pre></td></tr></table></figure><p>   例如：</p><figure class="highlight css"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line"><span class="selector-tag">p</span> &#123;</span><br><span class="line">  <span class="attribute">font-size</span>: <span class="number">14px</span>;                 <span class="comment">/* 所有的字体是14像素大小*/</span></span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h1 id="CSS外观属性"><a href="#CSS外观属性" class="headerlink" title="CSS外观属性"></a>CSS外观属性</h1><h2 id="color-文本颜色"><a href="#color-文本颜色" class="headerlink" title="color:文本颜色"></a>color:文本颜色</h2><p>color属性用于定义文本的颜色，其取值方式有如下3种：</p><p>1.预定义的颜色值，如red，green，blue等。</p><p>2.十六进制，如#FF0000，#FF6600，#29D794等。实际工作中，十六进制是最常用的定义颜色的方式。</p><p>3.RGB代码，如红色可以表示为rgb(255,0,0)或rgb(100%,0%,0%)。</p><p>需要注意的是，如果使用RGB代码的百分比颜色值，取值为0时也不能省略百分号，必须写为0%。</p><h2 id="line-height-行间距"><a href="#line-height-行间距" class="headerlink" title="line-height:行间距"></a>line-height:行间距</h2><p>ine-height属性用于设置行间距，就是行与行之间的距离，即字符的垂直间距，一般称为行高。line-height常用的属性值单位有三种，分别为像素px，相对值em和百分比%，实际工作中使用最多的是像素px</p><p>一般情况下，行距比字号大7.8像素左右就可以了。</p><h2 id="text-align-水平对齐方式"><a href="#text-align-水平对齐方式" class="headerlink" title="text-align:水平对齐方式"></a>text-align:水平对齐方式</h2><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">text-align属性用于设置文本内容的水平对齐，相当于html中的align对齐属性。其可用属性值如下：</span><br></pre></td></tr></table></figure><p>left：左对齐（默认值）</p><p>right：右对齐</p><p>center：居中对齐</p><h2 id="text-indent-首行缩进"><a href="#text-indent-首行缩进" class="headerlink" title="text-indent:首行缩进"></a>text-indent:首行缩进</h2><p>text-indent属性用于设置首行文本的缩进，其属性值可为不同单位的数值、em字符宽度的倍数、或相对于浏览器窗口宽度的百分比%，允许使用负值, 建议使用em作为设置单位。</p><p>1em 就是一个字的宽度   如果是汉字的段落， 1em 就是一个汉字的宽度</p><h2 id="letter-spacing-字间距"><a href="#letter-spacing-字间距" class="headerlink" title="letter-spacing:字间距"></a>letter-spacing:字间距</h2><p>letter-spacing属性用于定义字间距，所谓字间距就是字符与字符之间的空白。其属性值可为不同单位的数值，允许使用负值，默认为normal。</p><h2 id="word-spacing-单词间距"><a href="#word-spacing-单词间距" class="headerlink" title="word-spacing:单词间距"></a>word-spacing:单词间距</h2><p>word-spacing属性用于定义英文单词之间的间距，对中文字符无效。和letter-spacing一样，其属性值可为不同单位的数值，允许使用负值，默认为normal。</p><p>word-spacing和letter-spacing均可对英文进行设置。不同的是letter-spacing定义的为字母之间的间距，而word-spacing定义的为英文单词之间的间距。</p><h2 id="颜色半透明-css3"><a href="#颜色半透明-css3" class="headerlink" title="颜色半透明(css3)"></a>颜色半透明(css3)</h2><p>文字颜色到了CSS3我们可以采取半透明的格式了语法格式如下：</p><figure class="highlight css"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line"><span class="selector-tag">color</span>: <span class="selector-tag">rgba</span>(<span class="selector-tag">r</span>,<span class="selector-tag">g</span>,<span class="selector-tag">b</span>,<span class="selector-tag">a</span>)  <span class="selector-tag">a</span> 是<span class="selector-tag">alpha</span>  透明的意思  取值范围 0~1之间    <span class="selector-tag">color</span>: <span class="selector-tag">rgba</span>(0,0,0,0<span class="selector-class">.3</span>)</span><br></pre></td></tr></table></figure><h2 id="文字阴影-CSS3"><a href="#文字阴影-CSS3" class="headerlink" title="文字阴影(CSS3)"></a>文字阴影(CSS3)</h2><p>以后我们可以给我们的文字添加阴影效果了  Shadow  影子  </p><figure class="highlight css"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line"><span class="selector-tag">text-shadow</span>:水平位置 垂直位置 模糊距离 阴影颜色;</span><br></pre></td></tr></table></figure><p><img src="/media/1498467502625.png" alt="1498467502625"> </p><ol><li>前两项是必须写的。  后两项可以选写。</li></ol><p><img src="/media/1498467519665.png" alt="1498467519665">    </p><h1 id="sublime快捷方式"><a href="#sublime快捷方式" class="headerlink" title="sublime快捷方式"></a>sublime快捷方式</h1><p>sublime可以快速提高我们代码的书写方式</p><ol><li><p>生成标签 直接输入标签名 按tab键即可   比如  div   然后tab 键， 就可以生成 <div></div></p></li><li><p>如果想要生成多个相同标签  加上 <em> 就可以了 比如   div</em>3  就可以快速生成3个div</p></li><li><p>如果有父子级关系的标签，可以用 &gt;  比如   ul &gt; li就可以了</p></li><li><p>如果有兄弟关系的标签，用  +  就可以了 比如 div+p  </p></li><li><p>如果生成带有类名或者id名字的，  直接写  .demo  或者  #two   tab 键就可以了</p><p>​</p></li></ol><h1 id="引入CSS样式表（书写位置）"><a href="#引入CSS样式表（书写位置）" class="headerlink" title="引入CSS样式表（书写位置）"></a>引入CSS样式表（书写位置）</h1><p>CSS可以写到那个位置？ 是不是一定写到html文件里面呢？</p><h2 id="内部样式表"><a href="#内部样式表" class="headerlink" title="内部样式表"></a>内部样式表</h2><p>内嵌式是将CSS代码集中写在HTML文档的head头部标签中，并且用style标签定义，其基本语法格式如下：</p><figure class="highlight html"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">head</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">style</span> <span class="attr">type</span>=<span class="string">"text/CSS"</span>&gt;</span><span class="undefined"></span></span><br><span class="line"><span class="undefined">    选择器 &#123;属性1:属性值1; 属性2:属性值2; 属性3:属性值3;&#125;</span></span><br><span class="line"><span class="undefined"></span><span class="tag">&lt;/<span class="name">style</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">head</span>&gt;</span></span><br></pre></td></tr></table></figure><p>语法中，style标签一般位于head标签中title标签之后，也可以把他放在HTML文档的任何地方。</p><p>type=”text/CSS”  在html5中可以省略， 写上也比较符合规范， 所以这个地方可以写也可以省略。</p><h2 id="行内式（内联样式）"><a href="#行内式（内联样式）" class="headerlink" title="行内式（内联样式）"></a>行内式（内联样式）</h2><p>内联样式，又有人称行内样式、行间样式、内嵌样式。是通过标签的style属性来设置元素的样式，其基本语法格式如下：</p><figure class="highlight html"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">标签名</span> <span class="attr">style</span>=<span class="string">"属性1:属性值1; 属性2:属性值2; 属性3:属性值3;"</span>&gt;</span> 内容 <span class="tag">&lt;/<span class="name">标签名</span>&gt;</span></span><br></pre></td></tr></table></figure><p>语法中style是标签的属性，实际上任何HTML标签都拥有style属性，用来设置行内式。其中属性和值的书写规范与CSS样式规则相同，行内式只对其所在的标签及嵌套在其中的子标签起作用。</p><h2 id="外部样式表（外链式）"><a href="#外部样式表（外链式）" class="headerlink" title="外部样式表（外链式）"></a>外部样式表（外链式）</h2><p>链入式是将所有的样式放在一个或多个以.CSS为扩展名的外部样式表文件中，通过link标签将外部样式表文件链接到HTML文档中，其基本语法格式如下：</p><figure class="highlight html"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">head</span>&gt;</span></span><br><span class="line">  <span class="tag">&lt;<span class="name">link</span> <span class="attr">href</span>=<span class="string">"CSS文件的路径"</span> <span class="attr">type</span>=<span class="string">"text/CSS"</span> <span class="attr">rel</span>=<span class="string">"stylesheet"</span> /&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">head</span>&gt;</span></span><br></pre></td></tr></table></figure><p>注意：  link 是个单标签哦!!!</p><p>该语法中，link标签需要放在head头部标签中，并且必须指定link标签的三个属性，具体如下：</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line">href：定义所链接外部样式表文件的URL，可以是相对路径，也可以是绝对路径。</span><br><span class="line">type：定义所链接文档的类型，在这里需要指定为“text/CSS”，表示链接的外部文件为CSS样式表。</span><br><span class="line">rel：定义当前文档与被链接文档之间的关系，在这里需要指定为“stylesheet”，表示被链接的文档是一个样式表文件。</span><br></pre></td></tr></table></figure><h2 id="三种样式表总结"><a href="#三种样式表总结" class="headerlink" title="三种样式表总结"></a>三种样式表总结</h2><table><thead><tr><th>样式表</th><th>优点</th><th>缺点</th><th>使用情况</th><th>控制范围</th></tr></thead><tbody><tr><td>行内样式表</td><td>书写方便，权重高</td><td>没有实现样式和结构相分离</td><td>较少</td><td>控制一个标签（少）</td></tr><tr><td>内部样式表</td><td>部分结构和样式相分离</td><td>没有彻底分离</td><td>较多</td><td>控制一个页面（中）</td></tr><tr><td>外部样式表</td><td>完全实现结构和样式相分离</td><td>需要引入</td><td>最多，强烈推荐</td><td>控制整个站点（多）</td></tr></tbody></table><h1 id="标签显示模式（display）"><a href="#标签显示模式（display）" class="headerlink" title="标签显示模式（display）"></a>标签显示模式（display）</h1><p><img src="/media/people.png"></p><p>非洲黑人：  皮肤内黑色素含量高，以吸收阳光中的紫外线，保护皮肤内部结构免遭损害，头发象羊毛一样卷曲，使每根卷发周围都有许多空隙，空隙充满空气，卷发有隔热作用。</p><p>欧洲白人： 生活寒带或着是说常年温度较低的地缘,加上年日照时间少，身体的黑色素沉淀比较少<code></code>所以出现皮肤、发色、瞳晕都呈现浅色</p><p>传智黄人：  我中间的。。。  <img src="/media/h.jpg" alt=""></p><p>最重要的总结：  是为了更好的适应环境而完成的自然选择。 </p><p>同理，我们网页的标签非常多，再不同地方会用到不同类型的标签，以便更好的完成我们的网页。</p><p>标签的类型(显示模式)</p><p>HTML标签一般分为块标签和行内标签两种类型，它们也称块元素和行内元素。具体如下：</p><h2 id="块级元素-block-level"><a href="#块级元素-block-level" class="headerlink" title="块级元素(block-level)"></a>块级元素(block-level)</h2><p>每个块元素通常都会独自占据一整行或多整行，可以对其设置宽度、高度、对齐等属性，常用于网页布局和网页结构的搭建。</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">常见的块元素有&lt;h1&gt;~&lt;h6&gt;、&lt;p&gt;、&lt;div&gt;、&lt;ul&gt;、&lt;ol&gt;、&lt;li&gt;等，其中&lt;div&gt;标签是最典型的块元素。</span><br></pre></td></tr></table></figure><p>  <img src="/media/xtf.jpg"></p><p>块级元素的特点：</p><p>（1）总是从新行开始</p><p>（2）高度，行高、外边距以及内边距都可以控制。</p><p>（3）宽度默认是容器的100%</p><p>（4）可以容纳内联元素和其他块元素。</p><h2 id="行内元素-inline-level"><a href="#行内元素-inline-level" class="headerlink" title="行内元素(inline-level)"></a>行内元素(inline-level)</h2><p>行内元素（内联元素）不占有独立的区域，仅仅靠自身的字体大小和图像尺寸来支撑结构，一般不可以设置宽度、高度、对齐等属性，常用于控制页面中文本的样式。</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">常见的行内元素有&lt;a&gt;、&lt;strong&gt;、&lt;b&gt;、&lt;em&gt;、&lt;i&gt;、&lt;del&gt;、&lt;s&gt;、&lt;ins&gt;、&lt;u&gt;、&lt;span&gt;等，其中&lt;span&gt;标签最典型的行内元素。</span><br></pre></td></tr></table></figure><p>  <img src="/media/wf.jpg">  我一样重要</p><p>行内元素的特点：</p><p>（1）和相邻行内元素在一行上。</p><p>（2）高、宽无效，但水平方向的padding和margin可以设置，垂直方向的无效。</p><p>（3）默认宽度就是它本身内容的宽度。</p><p>（4）行内元素只能容纳文本或则其他行内元素。（a特殊）</p><p>  <img src="/media/w.jpg">    注意：</p><ol><li>只有 文字才 能组成段落  因此 p  里面不能放块级元素，同理还有这些标签h1,h2,h3,h4,h5,h6,dt，他们都是文字类块级标签，里面不能放其他块级元素。</li><li>链接里面不能再放链接。</li></ol><h2 id="块级元素和行内元素区别"><a href="#块级元素和行内元素区别" class="headerlink" title="块级元素和行内元素区别"></a>块级元素和行内元素区别</h2><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line">块级元素的特点：</span><br><span class="line">（1）总是从新行开始</span><br><span class="line">（2）高度，行高、外边距以及内边距都可以控制。</span><br><span class="line">（3）宽度默认是容器的100%</span><br><span class="line">（4）可以容纳内联元素和其他块元素。</span><br></pre></td></tr></table></figure><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line">行内元素的特点：</span><br><span class="line">（1）和相邻行内元素在一行上。</span><br><span class="line">（2）高、宽无效，但水平方向的padding和margin可以设置，垂直方向的无效。</span><br><span class="line">（3）默认宽度就是它本身内容的宽度。</span><br><span class="line">（4）行内元素只能容纳文本或则其他行内元素。</span><br></pre></td></tr></table></figure><h2 id="行内块元素（inline-block）"><a href="#行内块元素（inline-block）" class="headerlink" title="行内块元素（inline-block）"></a>行内块元素（inline-block）</h2><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line">在行内元素中有几个特殊的标签——&lt;img /&gt;、&lt;input /&gt;、&lt;td&gt;，可以对它们设置宽高和对齐属性，有些资料可能会称它们为行内块元素。</span><br><span class="line"></span><br><span class="line">行内块元素的特点：</span><br><span class="line">（1）和相邻行内元素（行内块）在一行上,但是之间会有空白缝隙。</span><br><span class="line">（2）默认宽度就是它本身内容的宽度。</span><br><span class="line">（3）高度，行高、外边距以及内边距都可以控制。</span><br></pre></td></tr></table></figure><p><img src="/media/lyc.jpg" width="400"></p><h2 id="标签显示模式转换-display"><a href="#标签显示模式转换-display" class="headerlink" title="标签显示模式转换 display"></a>标签显示模式转换 display</h2><p>块转行内：display:inline;</p><p>行内转块：display:block;</p><p>块、行内元素转换为行内块： display: inline-block;</p><p>此阶段，我们只需关心这三个，其他的是我们后面的工作。</p><h1 id="CSS复合选择器"><a href="#CSS复合选择器" class="headerlink" title="CSS复合选择器"></a>CSS复合选择器</h1><p>复合选择器是由两个或多个基础选择器，通过不同的方式组合而成的,目的是为了可以选择更准确更精细的目标元素标签。</p><h2 id="交集选择器"><a href="#交集选择器" class="headerlink" title="交集选择器"></a>交集选择器</h2><p>交集选择器由两个选择器构成，其中第一个为标签选择器，第二个为class选择器，两个选择器之间不能有空格，如h3.special。</p><p><img src="/media/jiao.png"></p><p><strong>记忆技巧：</strong></p><p>交集选择器 是 并且的意思。  即…又…的意思</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">比如：   p.one   选择的是： 类名为 .one  的 段落标签。</span><br></pre></td></tr></table></figure><p>用的相对来说比较少，不太建议使用。</p><h2 id="并集选择器"><a href="#并集选择器" class="headerlink" title="并集选择器"></a>并集选择器</h2><p>并集选择器（CSS选择器分组）是各个选择器通过<strong style="color:#f00">逗号</strong>连接而成的，任何形式的选择器（包括标签选择器、class类选择器id选择器等），都可以作为并集选择器的一部分。如果某些选择器定义的样式完全相同，或部分相同，就可以利用并集选择器为它们定义相同的CSS样式。</p><p><img src="/media/bing.png"></p><p>记忆技巧：</p><p>并集选择器  和 的意思，  就是说，只要逗号隔开的，所有选择器都会执行后面样式。</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">比如  .one, p , #test &#123;color: #F00;&#125;  表示   .one 和 p  和 #test 这三个选择器都会执行颜色为红色。  通常用于集体声明。</span><br></pre></td></tr></table></figure><p><img src="/media/hu.gif">  他和他，在一起， 在一起    一起的意思</p><h2 id="后代选择器"><a href="#后代选择器" class="headerlink" title="后代选择器"></a>后代选择器</h2><p>后代选择器又称为包含选择器，用来选择元素或元素组的后代，其写法就是把外层标签写在前面，内层标签写在后面，中间用空格分隔。当标签发生嵌套时，内层标签就成为外层标签的后代。</p><p><img src="/media/hou.png"></p><p>子孙后代都可以这么选择。 或者说，它能选择任何包含在内 的标签。 </p><p><img src="/media/li.png"></p><h2 id="子元素选择器"><a href="#子元素选择器" class="headerlink" title="子元素选择器"></a>子元素选择器</h2><p>子元素选择器只能选择作为某元素子元素的元素。其写法就是把父级标签写在前面，子级标签写在后面，中间跟一个 &gt; 进行连接，注意，符号左右两侧各保留一个空格。</p><p><img src="/media/zi1.png"></p><p>白话：  这里的子 指的是 亲儿子  不包含孙子 重孙子之类。</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">比如：  .demo &gt; h3 &#123;color: red;&#125;   说明  h3 一定是demo 亲儿子。  demo 元素包含着h3。</span><br></pre></td></tr></table></figure><p><img src="/media/san.jpg"></p><h2 id="测试题"><a href="#测试题" class="headerlink" title="测试题"></a>测试题</h2><figure class="highlight html"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br></pre></td><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">div</span> <span class="attr">class</span>=<span class="string">"nav"</span>&gt;</span>    <span class="comment">&lt;!-- 主导航栏 --&gt;</span></span><br><span class="line">  <span class="tag">&lt;<span class="name">ul</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">li</span>&gt;</span><span class="tag">&lt;<span class="name">a</span> <span class="attr">href</span>=<span class="string">"#"</span>&gt;</span>公司首页<span class="tag">&lt;/<span class="name">a</span>&gt;</span><span class="tag">&lt;/<span class="name">li</span>&gt;</span></span><br><span class="line">true<span class="tag">&lt;<span class="name">li</span>&gt;</span><span class="tag">&lt;<span class="name">a</span> <span class="attr">href</span>=<span class="string">"#"</span>&gt;</span>公司简介<span class="tag">&lt;/<span class="name">a</span>&gt;</span><span class="tag">&lt;/<span class="name">li</span>&gt;</span></span><br><span class="line">true<span class="tag">&lt;<span class="name">li</span>&gt;</span><span class="tag">&lt;<span class="name">a</span> <span class="attr">href</span>=<span class="string">"#"</span>&gt;</span>公司产品<span class="tag">&lt;/<span class="name">a</span>&gt;</span><span class="tag">&lt;/<span class="name">li</span>&gt;</span></span><br><span class="line">true<span class="tag">&lt;<span class="name">li</span>&gt;</span></span><br><span class="line">         <span class="tag">&lt;<span class="name">a</span> <span class="attr">href</span>=<span class="string">"#"</span>&gt;</span>联系我们<span class="tag">&lt;/<span class="name">a</span>&gt;</span></span><br><span class="line">truetrue <span class="tag">&lt;<span class="name">ul</span>&gt;</span></span><br><span class="line">truetrue    <span class="tag">&lt;<span class="name">li</span>&gt;</span><span class="tag">&lt;<span class="name">a</span> <span class="attr">href</span>=<span class="string">"#"</span>&gt;</span>公司邮箱<span class="tag">&lt;/<span class="name">a</span>&gt;</span><span class="tag">&lt;/<span class="name">li</span>&gt;</span></span><br><span class="line">truetrue    <span class="tag">&lt;<span class="name">li</span>&gt;</span><span class="tag">&lt;<span class="name">a</span> <span class="attr">href</span>=<span class="string">"#"</span>&gt;</span>公司电话<span class="tag">&lt;/<span class="name">a</span>&gt;</span><span class="tag">&lt;/<span class="name">li</span>&gt;</span></span><br><span class="line">truetrue <span class="tag">&lt;/<span class="name">ul</span>&gt;</span></span><br><span class="line">true<span class="tag">&lt;/<span class="name">li</span>&gt;</span></span><br><span class="line">  <span class="tag">&lt;/<span class="name">ul</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">div</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">div</span> <span class="attr">class</span>=<span class="string">"sitenav"</span>&gt;</span>    <span class="comment">&lt;!-- 侧导航栏 --&gt;</span></span><br><span class="line">  <span class="tag">&lt;<span class="name">div</span> <span class="attr">class</span>=<span class="string">"site-l"</span>&gt;</span>左侧侧导航栏<span class="tag">&lt;/<span class="name">div</span>&gt;</span></span><br><span class="line">  <span class="tag">&lt;<span class="name">div</span> <span class="attr">class</span>=<span class="string">"site-r"</span>&gt;</span><span class="tag">&lt;<span class="name">a</span> <span class="attr">href</span>=<span class="string">"#"</span>&gt;</span>登录<span class="tag">&lt;/<span class="name">a</span>&gt;</span><span class="tag">&lt;/<span class="name">div</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">div</span>&gt;</span></span><br></pre></td></tr></table></figure><p>在不修改以上代码的前提下，完成以下任务：</p><ol><li><p>链接 登录 的颜色为红色,同时主导航栏里面的所有的链接改为蓝色     (简单)</p></li><li><p>主导航栏和侧导航栏里面文字都是14像素并且是微软雅黑。（中等)</p></li><li><p>主导航栏里面的一级菜单链接文字颜色为绿色。（难)</p><p>​</p></li></ol><h2 id="属性选择器"><a href="#属性选择器" class="headerlink" title="属性选择器"></a>属性选择器</h2><p>选取标签带有某些特殊属性的选择器 我们成为属性选择器</p><figure class="highlight css"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">/* 获取到 拥有 该属性的元素 */</span></span><br><span class="line"><span class="selector-tag">div</span><span class="selector-attr">[class^=font]</span> &#123; <span class="comment">/*  class^=font 表示 font 开始位置就行了 */</span></span><br><span class="line">truetruetrue<span class="attribute">color</span>: pink;</span><br><span class="line">truetrue&#125;</span><br><span class="line"><span class="selector-tag">div</span><span class="selector-attr">[class$=footer]</span> &#123; <span class="comment">/*  class$=footer 表示 footer 结束位置就行了 */</span></span><br><span class="line">truetruetrue<span class="attribute">color</span>: skyblue;</span><br><span class="line">truetrue&#125;</span><br><span class="line"><span class="selector-tag">div</span><span class="selector-attr">[class*=tao]</span> &#123; <span class="comment">/* class*=tao  *=  表示tao 在任意位置都可以 */</span></span><br><span class="line">truetruetrue<span class="attribute">color</span>: green;</span><br><span class="line">truetrue&#125;</span><br></pre></td></tr></table></figure><figure class="highlight html"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br></pre></td><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">div</span> <span class="attr">class</span>=<span class="string">"font12"</span>&gt;</span>属性选择器<span class="tag">&lt;/<span class="name">div</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">div</span> <span class="attr">class</span>=<span class="string">"font12"</span>&gt;</span>属性选择器<span class="tag">&lt;/<span class="name">div</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">div</span> <span class="attr">class</span>=<span class="string">"font24"</span>&gt;</span>属性选择器<span class="tag">&lt;/<span class="name">div</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">div</span> <span class="attr">class</span>=<span class="string">"font24"</span>&gt;</span>属性选择器<span class="tag">&lt;/<span class="name">div</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">div</span> <span class="attr">class</span>=<span class="string">"font24"</span>&gt;</span>属性选择器<span class="tag">&lt;/<span class="name">div</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">div</span> <span class="attr">class</span>=<span class="string">"24font"</span>&gt;</span>属性选择器123<span class="tag">&lt;/<span class="name">div</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">div</span> <span class="attr">class</span>=<span class="string">"sub-footer"</span>&gt;</span>属性选择器footer<span class="tag">&lt;/<span class="name">div</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">div</span> <span class="attr">class</span>=<span class="string">"jd-footer"</span>&gt;</span>属性选择器footer<span class="tag">&lt;/<span class="name">div</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">div</span> <span class="attr">class</span>=<span class="string">"news-tao-nav"</span>&gt;</span>属性选择器<span class="tag">&lt;/<span class="name">div</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">div</span> <span class="attr">class</span>=<span class="string">"news-tao-header"</span>&gt;</span>属性选择器<span class="tag">&lt;/<span class="name">div</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">div</span> <span class="attr">class</span>=<span class="string">"tao-header"</span>&gt;</span>属性选择器<span class="tag">&lt;/<span class="name">div</span>&gt;</span></span><br></pre></td></tr></table></figure><h2 id="伪元素选择器（CSS3"><a href="#伪元素选择器（CSS3" class="headerlink" title="伪元素选择器（CSS3)"></a>伪元素选择器（CSS3)</h2><ol><li>E::first-letter文本的第一个单词或字（如中文、日文、韩文等）</li><li>E::first-line 文本第一行；</li><li>E::selection 可改变选中文本的样式；</li></ol><figure class="highlight css"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br></pre></td><td class="code"><pre><span class="line"><span class="selector-tag">p</span><span class="selector-pseudo">::first-letter</span> &#123;</span><br><span class="line">  <span class="attribute">font-size</span>: <span class="number">20px</span>;</span><br><span class="line">  <span class="attribute">color</span>: hotpink;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="comment">/* 首行特殊样式 */</span></span><br><span class="line"><span class="selector-tag">p</span><span class="selector-pseudo">::first-line</span> &#123;</span><br><span class="line">  <span class="attribute">color</span>: skyblue;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="selector-tag">p</span><span class="selector-pseudo">::selection</span> &#123;</span><br><span class="line">  <span class="comment">/* font-size: 50px; */</span></span><br><span class="line">  <span class="attribute">color</span>: orange;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>4、E::before和E::after</p><p>在E元素内部的开始位置和结束位创建一个元素，该元素为行内元素，且必须要结合content属性使用。</p><figure class="highlight css"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line"><span class="selector-tag">div</span><span class="selector-pseudo">::befor</span> &#123;</span><br><span class="line">  <span class="attribute">content</span>:<span class="string">"开始"</span>;</span><br><span class="line">&#125;</span><br><span class="line"><span class="selector-tag">div</span><span class="selector-pseudo">::after</span> &#123;</span><br><span class="line">  <span class="attribute">content</span>:<span class="string">"结束"</span>;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>E:after、E:before 在旧版本里是伪元素，CSS3的规范里“:”用来表示伪类，“::”用来表示伪元素，但是在高版本浏览器下E:after、E:before会被自动识别为E::after、E::before，这样做的目的是用来做兼容处理。</p><p>E:after、E:before后面的练习中会反复用到，目前只需要有个大致了解</p><p>“:” 与 “::” 区别在于区分伪类和伪元素</p><h1 id="CSS书写规范"><a href="#CSS书写规范" class="headerlink" title="CSS书写规范"></a>CSS书写规范</h1><p>开始就形成良好的书写规范，是你专业化的开始。</p><h2 id="空格规范"><a href="#空格规范" class="headerlink" title="空格规范"></a>空格规范</h2><p>【强制】 选择器 与 { 之间必须包含空格。</p><p>示例： .selector { }</p><p>【强制】 属性名 与之后的 : 之间不允许包含空格， : 与 属性值 之间必须包含空格。</p><p>示例：</p><p>font-size: 12px;</p><h2 id="选择器规范"><a href="#选择器规范" class="headerlink" title="选择器规范"></a>选择器规范</h2><p>【强制】 当一个 rule 包含多个 selector 时，每个选择器声明必须独占一行。</p><p>示例：</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br></pre></td><td class="code"><pre><span class="line">/* good */</span><br><span class="line">.post,</span><br><span class="line">.page,</span><br><span class="line">.comment &#123;</span><br><span class="line">    line-height: 1.5;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"></span><br><span class="line">/* bad */</span><br><span class="line">.post, .page, .comment &#123;</span><br><span class="line">    line-height: 1.5;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>【建议】 选择器的嵌套层级应不大于 3 级，位置靠后的限定条件应尽可能精确。</p><p>示例：</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><span class="line">/* good */</span><br><span class="line">#username input &#123;&#125;</span><br><span class="line">.comment .avatar &#123;&#125;</span><br><span class="line"></span><br><span class="line">/* bad */</span><br><span class="line">.page .header .login #username input &#123;&#125;</span><br><span class="line">.comment div * &#123;&#125;</span><br></pre></td></tr></table></figure><h2 id="属性规范"><a href="#属性规范" class="headerlink" title="属性规范"></a>属性规范</h2><p>【强制】 属性定义必须另起一行。</p><p>示例：</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><span class="line">/* good */</span><br><span class="line">.selector &#123;</span><br><span class="line">    margin: 0;</span><br><span class="line">    padding: 0;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line">/* bad */</span><br><span class="line">.selector &#123; margin: 0; padding: 0; &#125;</span><br></pre></td></tr></table></figure><p>【强制】 属性定义后必须以分号结尾。</p><p>示例：</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br></pre></td><td class="code"><pre><span class="line">/* good */</span><br><span class="line">.selector &#123;</span><br><span class="line">    margin: 0;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line">/* bad */</span><br><span class="line">.selector &#123;</span><br><span class="line">    margin: 0</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h1 id="CSS-背景-background"><a href="#CSS-背景-background" class="headerlink" title="CSS 背景(background)"></a>CSS 背景(background)</h1><p>CSS 可以添加背景颜色和背景图片，以及来进行图片设置。</p><table><thead><tr><th>background-color</th><th>背景颜色</th></tr></thead><tbody><tr><td>background-image</td><td>背景图片地址</td></tr><tr><td>background-repeat</td><td>是否平铺</td></tr><tr><td>background-position</td><td>背景位置</td></tr><tr><td>background-attachment</td><td>背景固定还是滚动</td></tr><tr><td>背景的合写（复合属性）</td><td></td></tr><tr><td>background:背景颜色 背景图片地址 背景平铺 背景滚动 背景位置</td></tr></tbody></table><h2 id="背景图片-image"><a href="#背景图片-image" class="headerlink" title="背景图片(image)"></a>背景图片(image)</h2><p>语法： </p><figure class="highlight"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">background-image : none | url (url)</span><br></pre></td></tr></table></figure><p>参数： </p><p>none : 　无背景图（默认的）<br>url : 　使用绝对或相对地址指定背景图像 </p><p>background-image 属性允许指定一个图片展示在背景中（只有CSS3才可以多背景）可以和 background-color 连用。 如果图片不重复地话，图片覆盖不到地地方都会被背景色填充。 如果有背景图片平铺，则会覆盖背景颜色。</p><p>小技巧：  我们提倡 背景图片后面的地址，url不要加引号。</p><h2 id="背景平铺（repeat）"><a href="#背景平铺（repeat）" class="headerlink" title="背景平铺（repeat）"></a>背景平铺（repeat）</h2><p>语法： </p><figure class="highlight"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">background-repeat : repeat | no-repeat | repeat-x | repeat-y</span><br></pre></td></tr></table></figure><p>参数： </p><p>repeat : 　背景图像在纵向和横向上平铺（默认的）</p><p>no-repeat : 　背景图像不平铺</p><p>repeat-x : 　背景图像在横向上平铺</p><p>repeat-y : 　背景图像在纵向平铺 </p><p>设置背景图片时，默认把图片在水平和垂直方向平铺以铺满整个元素。</p><p>repeat-x : 　背景图像在横向上平铺  </p><p>repeat-y : 　背景图像在纵向平铺 </p><p><img src="/media/y.png" width="600"></p><p>设置背景图片时，默认把图片在水平和垂直方向平铺以铺满整个元素。</p><p><img src="/media/q.png" width="600"></p><h2 id="背景位置-position"><a href="#背景位置-position" class="headerlink" title="背景位置(position)"></a>背景位置(position)</h2><p>语法： </p><figure class="highlight"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line">background-position : length || length</span><br><span class="line"></span><br><span class="line">background-position : position || position</span><br></pre></td></tr></table></figure><p>参数： </p><p>length : 　百分数 | 由浮点数字和单位标识符组成的长度值。请参阅长度单位<br>position : 　top | center | bottom | left | center | right </p><p>说明： </p><p>设置或检索对象的背景图像位置。必须先指定background-image属性。默认值为：(0% 0%)。<br>如果只指定了一个值，该值将用于横坐标。纵坐标将默认为50%。第二个值将用于纵坐标。</p><p>注意：</p><ol><li>position 后面是x坐标和y坐标。 可以使用方位名词或者 精确单位。</li><li>如果和精确单位和方位名字混合使用，则必须是x坐标在前，y坐标后面。比如 background-position: 15px top;   则 15px 一定是  x坐标   top是 y坐标。</li></ol><p>实际工作用的最多的，就是背景图片居中对齐了。</p><h2 id="背景附着"><a href="#背景附着" class="headerlink" title="背景附着"></a>背景附着</h2><p>语法： </p><figure class="highlight"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">background-attachment : scroll | fixed</span><br></pre></td></tr></table></figure><p>参数： </p><p>scroll : 　背景图像是随对象内容滚动<br>fixed : 　背景图像固定 </p><p>说明： </p><p>设置或检索背景图像是随对象内容滚动还是固定的。</p><h2 id="背景简写"><a href="#背景简写" class="headerlink" title="背景简写"></a>背景简写</h2><p>background属性的值的书写顺序官方并没有强制标准的。为了可读性，建议大家如下写：</p><p>background:背景颜色 背景图片地址 背景平铺 背景滚动 背景位置</p><figure class="highlight css"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line"><span class="selector-tag">background</span>: <span class="selector-tag">transparent</span> <span class="selector-tag">url</span>(<span class="selector-tag">image</span><span class="selector-class">.jpg</span>) <span class="selector-tag">repeat-y</span>  <span class="selector-tag">scroll</span> 50% 0 ;</span><br></pre></td></tr></table></figure><h2 id="背景透明-CSS3"><a href="#背景透明-CSS3" class="headerlink" title="背景透明(CSS3)"></a>背景透明(CSS3)</h2><p>CSS3支持背景半透明的写法语法格式是:</p><figure class="highlight css"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line"><span class="selector-tag">background</span>: <span class="selector-tag">rgba</span>(0,0,0,0<span class="selector-class">.3</span>);</span><br></pre></td></tr></table></figure><p> 最后一个参数是alpha 透明度  取值范围 0~1之间</p><p> 注意：  背景半透明是指盒子背景半透明， 盒子里面的内容不收影响。</p><h2 id="背景缩放-CSS3"><a href="#背景缩放-CSS3" class="headerlink" title="背景缩放(CSS3)"></a>背景缩放(CSS3)</h2><p>通过background-size设置背景图片的尺寸，就像我们设置img的尺寸一样，在移动Web开发中做屏幕适配应用非常广泛。</p><p>其参数设置如下：</p><p>a) 可以设置长度单位(px)或百分比（设置百分比时，参照盒子的宽高）</p><p>b) 设置为cover时，会自动调整缩放比例，保证图片始终填充满背景区域，如有溢出部分则会被隐藏。我们平时用的cover 最多</p><p>c) 设置为contain会自动调整缩放比例，保证图片始终完整显示在背景区域。</p><figure class="highlight css"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line">background-image: url('images/gyt.jpg');</span><br><span class="line">truetruetrue<span class="selector-tag">background-size</span>: 300<span class="selector-tag">px</span> 100<span class="selector-tag">px</span>;</span><br><span class="line">truetruetrue<span class="comment">/* background-size: contain; */</span></span><br><span class="line">truetruetrue<span class="comment">/* background-size: cover; */</span></span><br></pre></td></tr></table></figure><h2 id="多背景-CSS3"><a href="#多背景-CSS3" class="headerlink" title="多背景(CSS3)"></a>多背景(CSS3)</h2><p>以逗号分隔可以设置多背景，可用于自适应布局  做法就是 用逗号隔开就好了。</p><ul><li>一个元素可以设置多重背景图像。 </li><li>每组属性间使用逗号分隔。 </li><li>如果设置的多重背景图之间存在着交集（即存在着重叠关系），前面的背景图会覆盖在后面的背景图之上。</li><li>为了避免背景色将图像盖住，背景色通常都定义在最后一组上，</li></ul><figure class="highlight"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line">background:url(test1.jpg) no-repeat scroll 10px 20px/50px 60px  ,</span><br><span class="line">true   url(test1.jpg) no-repeat scroll 10px 20px/70px 90px ,</span><br><span class="line">true   url(test1.jpg) no-repeat scroll 10px 20px/110px 130px c #aaa;</span><br></pre></td></tr></table></figure><ul><li>​</li></ul><h2 id="凹凸文字"><a href="#凹凸文字" class="headerlink" title="凹凸文字"></a>凹凸文字</h2><figure class="highlight"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br></pre></td><td class="code"><pre><span class="line">&lt;<span class="selector-tag">head</span>&gt;</span><br><span class="line">        &lt;meta charset="utf-8"&gt;</span><br><span class="line">        &lt;<span class="selector-tag">style</span>&gt;</span><br><span class="line">        <span class="selector-tag">body</span> &#123;</span><br><span class="line">        <span class="attribute">background-color</span>: <span class="number">#ccc</span>;</span><br><span class="line">        &#125;</span><br><span class="line">truetrue<span class="selector-tag">div</span> &#123;</span><br><span class="line">truetruetrue<span class="attribute">color</span>: <span class="number">#ccc</span>;</span><br><span class="line">truetruetrue<span class="attribute">font</span>: <span class="number">700</span> <span class="number">80px</span> <span class="string">"微软雅黑"</span>;</span><br><span class="line">truetrue&#125;</span><br><span class="line">truetrue<span class="selector-tag">div</span><span class="selector-pseudo">:first-child</span> &#123;</span><br><span class="line">truetruetrue<span class="comment">/* text-shadow: 水平位置  垂直位置  模糊距离 阴影颜色; */</span></span><br><span class="line">truetruetrue<span class="attribute">text-shadow</span>: <span class="number">1px</span> <span class="number">1px</span> <span class="number">1px</span> <span class="number">#000</span>, -<span class="number">1px</span> -<span class="number">1px</span> <span class="number">1px</span> <span class="number">#fff</span>;</span><br><span class="line">truetrue&#125;</span><br><span class="line">truetrue<span class="selector-tag">div</span><span class="selector-pseudo">:last-child</span> &#123;</span><br><span class="line">truetruetrue<span class="comment">/* text-shadow: 水平位置  垂直位置  模糊距离 阴影颜色; */</span></span><br><span class="line">truetruetrue<span class="attribute">text-shadow</span>: -<span class="number">1px</span> -<span class="number">1px</span> <span class="number">1px</span> <span class="number">#000</span>, <span class="number">1px</span> <span class="number">1px</span> <span class="number">1px</span> <span class="number">#fff</span>;</span><br><span class="line">truetrue&#125;</span><br><span class="line"></span><br><span class="line">        &lt;/style&gt;</span><br><span class="line">    &lt;/head&gt;</span><br><span class="line">    &lt;<span class="selector-tag">body</span>&gt;</span><br><span class="line">    &lt;div&gt;我是凸起的文字&lt;/div&gt;</span><br><span class="line">    &lt;div&gt;我是凹下的文字&lt;/div&gt;</span><br><span class="line">    &lt;/body&gt;</span><br></pre></td></tr></table></figure><p><img src="/media/1498467533412.png" alt="1498467533412"></p><h2 id="导航栏案例"><a href="#导航栏案例" class="headerlink" title="导航栏案例"></a>导航栏案例</h2><h3 id="文本的装饰"><a href="#文本的装饰" class="headerlink" title="文本的装饰"></a>文本的装饰</h3><p>text-decoration   通常我们用于给链接修改装饰效果</p><table><thead><tr><th>值</th><th>描述</th></tr></thead><tbody><tr><td>none</td><td>默认。定义标准的文本。</td></tr><tr><td>underline</td><td>定义文本下的一条线。下划线 也是我们链接自带的</td></tr><tr><td>overline</td><td>定义文本上的一条线。</td></tr><tr><td>line-through</td><td>定义穿过文本下的一条线。</td></tr><tr><td></td><td></td></tr><tr><td></td></tr></tbody></table><p><strong>使用技巧</strong>：在一行内的盒子内，我们设定行高等于盒子的高度，就可以使文字垂直居中。</p><figure class="highlight html"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br></pre></td><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">head</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">meta</span> <span class="attr">charset</span>=<span class="string">"utf-8"</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">style</span>&gt;</span><span class="undefined"></span></span><br><span class="line"><span class="undefined">body &#123;</span></span><br><span class="line"><span class="css"><span class="selector-tag">background-color</span>: <span class="selector-id">#000</span>;</span></span><br><span class="line"><span class="undefined">&#125;</span></span><br><span class="line"><span class="undefined">a &#123;</span></span><br><span class="line"><span class="undefined">width: 200px;</span></span><br><span class="line"><span class="undefined">height: 50px;</span></span><br><span class="line"><span class="css"><span class="comment">/* background-color: orange; */</span></span></span><br><span class="line"><span class="css"><span class="selector-tag">display</span>: <span class="selector-tag">inline-block</span>;  <span class="comment">/* 把a 行内元素转换为行内块元素 */</span></span></span><br><span class="line"><span class="css"><span class="selector-tag">text-align</span>: <span class="selector-tag">center</span>;  <span class="comment">/* 文字水平居中 */</span></span></span><br><span class="line"><span class="css"><span class="selector-tag">line-height</span>: 50<span class="selector-tag">px</span>;  <span class="comment">/* 我们设定行高等于盒子的高度，就可以使文字垂直居中 */</span></span></span><br><span class="line"><span class="css"><span class="selector-tag">color</span>: <span class="selector-id">#fff</span>;</span></span><br><span class="line"><span class="undefined">font-size: 22px;</span></span><br><span class="line"><span class="css"><span class="selector-tag">text-decoration</span>: <span class="selector-tag">none</span>;  <span class="comment">/* 取消下划线 文本装饰 */</span></span></span><br><span class="line"><span class="undefined">&#125;</span></span><br><span class="line"><span class="css"><span class="selector-tag">a</span><span class="selector-pseudo">:hover</span> &#123;  <span class="comment">/* 鼠标经过 给我们的链接添加背景图片*/</span></span></span><br><span class="line"><span class="undefined">background: url(images/h.png) no-repeat; </span></span><br><span class="line"><span class="undefined">&#125;</span></span><br><span class="line"><span class="undefined">        </span><span class="tag">&lt;/<span class="name">style</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;/<span class="name">head</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">body</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">a</span> <span class="attr">href</span>=<span class="string">"#"</span>&gt;</span>专区说明<span class="tag">&lt;/<span class="name">a</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">a</span> <span class="attr">href</span>=<span class="string">"#"</span>&gt;</span>申请资格<span class="tag">&lt;/<span class="name">a</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">a</span> <span class="attr">href</span>=<span class="string">"#"</span>&gt;</span>兑换奖励<span class="tag">&lt;/<span class="name">a</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">a</span> <span class="attr">href</span>=<span class="string">"#"</span>&gt;</span>下载游戏<span class="tag">&lt;/<span class="name">a</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;/<span class="name">body</span>&gt;</span></span><br></pre></td></tr></table></figure><h1 id="CSS-三大特性"><a href="#CSS-三大特性" class="headerlink" title="CSS 三大特性"></a>CSS 三大特性</h1><p>层叠 继承  优先级 是我们学习CSS 必须掌握的三个特性。</p><h2 id="CSS层叠性"><a href="#CSS层叠性" class="headerlink" title="CSS层叠性"></a>CSS层叠性</h2><p>所谓层叠性是指多种CSS样式的叠加。</p><p>是浏览器处理冲突的一个能力,如果一个属性通过两个相同选择器设置到同一个元素上，那么这个时候一个属性就会将另一个属性层叠掉</p><p>比如先给某个标签指定了内部文字颜色为红色，接着又指定了颜色为蓝色，此时出现一个标签指定了相同样式不同值的情况，这就是样式冲突。</p><p>一般情况下，如果出现样式冲突，则会按照CSS书写的顺序，以最后的样式为准。</p><ol><li>样式冲突，遵循的原则是就近原则。 那个样式离着结构近，就执行那个样式。</li><li>样式不冲突，不会层叠</li></ol><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">CSS最后的执行口诀：  长江后浪推前浪，前浪死在沙滩上。</span><br></pre></td></tr></table></figure><p><img src="/media/hai.gif" width="600" height="400"></p><h2 id="CSS继承性"><a href="#CSS继承性" class="headerlink" title="CSS继承性"></a>CSS继承性</h2><p>所谓继承性是指书写CSS样式表时，子标签会继承父标签的某些样式，如文本颜色和字号。想要设置一个可继承的属性，只需将它应用于父元素即可。</p><p>简单的理解就是：  子承父业。</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">CSS最后的执行口诀：  龙生龙，凤生凤，老鼠生的孩子会打洞。</span><br></pre></td></tr></table></figure><p><img src="/media/shu.gif"></p><p>注意：</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">恰当地使用继承可以简化代码，降低CSS样式的复杂性。子元素可以继承父元素的样式（text-，font-，line-这些元素开头的都可以继承，以及color属性）</span><br></pre></td></tr></table></figure><h2 id="CSS优先级"><a href="#CSS优先级" class="headerlink" title="CSS优先级"></a>CSS优先级</h2><p>定义CSS样式时，经常出现两个或更多规则应用在同一元素上，这时就会出现优先级的问题。</p><p>在考虑权重时，初学者还需要注意一些特殊的情况，具体如下：</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><span class="line">继承样式的权重为0。即在嵌套结构中，不管父元素样式的权重多大，被子元素继承时，他的权重都为0，也就是说子元素定义的样式会覆盖继承来的样式。</span><br><span class="line"></span><br><span class="line">行内样式优先。应用style属性的元素，其行内样式的权重非常高，可以理解为远大于100。总之，他拥有比上面提高的选择器都大的优先级。</span><br><span class="line"></span><br><span class="line">权重相同时，CSS遵循就近原则。也就是说靠近元素的样式具有最大的优先级，或者说排在最后的样式优先级最大。</span><br><span class="line"></span><br><span class="line">CSS定义了一个!important命令，该命令被赋予最大的优先级。也就是说不管权重如何以及样式位置的远近，!important都具有最大优先级。</span><br></pre></td></tr></table></figure><h3 id="CSS特殊性（Specificity）"><a href="#CSS特殊性（Specificity）" class="headerlink" title="CSS特殊性（Specificity）"></a>CSS特殊性（Specificity）</h3><p>关于CSS权重，我们需要一套计算公式来去计算，这个就是 CSS Specificity，我们称为CSS 特性或称非凡性，它是一个衡量CSS值优先级的一个标准 具体规范入如下：</p><p>specificity用一个四位的数 字串(CSS2是三位)来表示，更像四个级别，值从左到右，左面的最大，一级大于一级，数位之间没有进制，级别之间不可超越。 </p><table><thead><tr><th>继承或者* 的贡献值</th><th>0,0,0,0</th></tr></thead><tbody><tr><td>每个元素（标签）贡献值为</td><td>0,0,0,1</td></tr><tr><td>每个类，伪类贡献值为</td><td>0,0,1,0</td></tr><tr><td>每个ID贡献值为</td><td>0,1,0,0</td></tr><tr><td>每个行内样式贡献值</td><td>1,0,0,0</td></tr><tr><td>每个!important贡献值</td><td>∞ 无穷大</td></tr></tbody></table><p>权重是可以叠加的</p><p> 比如的例子：</p> <figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br></pre></td><td class="code"><pre><span class="line">div ul  li   ------&gt;      0,0,0,3</span><br><span class="line"></span><br><span class="line">.nav ul li   ------&gt;      0,0,1,2</span><br><span class="line"></span><br><span class="line">a:hover      -----—&gt;      0,0,1,1</span><br><span class="line"></span><br><span class="line">.nav a       ------&gt;      0,0,1,1   </span><br><span class="line"></span><br><span class="line">#nav p       -----&gt;       0,1,0,1</span><br></pre></td></tr></table></figure><p>​   </p><p>​      </p><p> <img src="/media/w.jpg"> 注意： </p><p>1.数位之间没有进制 比如说： 0,0,0,5 + 0,0,0,5 =0,0,0,10 而不是 0,0, 1, 0， 所以不会存在10个div能赶上一个类选择器的情况。</p><ol start="2"><li>继承的 权重是 0</li></ol><p>总结优先级：</p><ol><li>使用了 !important声明的规则。</li><li>内嵌在 HTML 元素的 style属性里面的声明。</li><li>使用了 ID 选择器的规则。</li><li>使用了类选择器、属性选择器、伪元素和伪类选择器的规则。</li><li>使用了元素选择器的规则。</li><li>只包含一个通用选择器的规则。</li><li>同一类选择器则遵循就近原则。</li></ol><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">总结：权重是优先级的算法，层叠是优先级的表现</span><br></pre></td></tr></table></figure><h1 id="盒子模型（CSS重点）"><a href="#盒子模型（CSS重点）" class="headerlink" title="盒子模型（CSS重点）"></a>盒子模型（CSS重点）</h1><p>其实，CSS就三个大模块：  盒子模型 、 浮动 、 定位，其余的都是细节。要求这三部分，无论如何也要学的非常精通。  </p><p>所谓盒子模型就是把HTML页面中的元素看作是一个矩形的盒子，也就是一个盛装内容的容器。每个矩形都由元素的内容、内边距（padding）、边框（border）和外边距（margin）组成。</p><h2 id="看透网页布局的本质"><a href="#看透网页布局的本质" class="headerlink" title="看透网页布局的本质"></a>看透网页布局的本质</h2><p>网页布局中，我们是如何把里面的文字，图片，按照美工给我们的效果图排列的整齐有序呢？</p><p><img src="/media/t.png"></p><p>牛奶是怎样运输，让消费者购买的呢？</p><p><img src="/media/m.jpg"></p><p>我们说过，行内元素比如 文字 类似牛奶，也需要一个盒子把他们装起来，我们前面学过的双标签都是一个盒子。有了盒子，我们就可以随意的，自由的，摆放位置了。</p><p>看透网页布局的本质：  把网页元素比如文字图片等等，放入盒子里面，然后利用CSS摆放盒子的过程，就是网页布局。</p><p><img src="/media/t1.png"></p><p>CSS 其实没有太多逻辑可言 ， 类似我们小时候玩的积木,我们可以自由的，随意的摆放出我们想要的效果。</p><p><img src="/media/j.jpg" width="300"></p><h2 id="盒子模型（Box-Model）"><a href="#盒子模型（Box-Model）" class="headerlink" title="盒子模型（Box Model）"></a>盒子模型（Box Model）</h2><p>这里略过 老旧的ie盒子模型（IE6以下），对不起，我都没见过IE5的浏览器。 </p><p><img src="/media/d.jpg"></p><p>。首先，我们来看一张图，来体会下什么是盒子模型。</p><p><img src="/media/box.png" width="700"></p><p>所有的文档元素（标签）都会生成一个矩形框，我们成为元素框（element box），它描述了一个文档元素再网页布局汇总所占的位置大小。因此，<strong style="color: #f00;">每个盒子除了有自己大小和位置外，还影响着其他盒子的大小和位置。</strong></p><p><img src="/media/boxs.png" width="700"></p><h2 id="盒子边框（border）"><a href="#盒子边框（border）" class="headerlink" title="盒子边框（border）"></a>盒子边框（border）</h2><p>边框就是那层皮。  橘子皮。。柚子皮。。橙子皮。。。</p><p>语法： </p><figure class="highlight"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">border : border-width || border-style || border-color</span><br></pre></td></tr></table></figure><p>边框属性—设置边框样式（border-style）</p><p>边框样式用于定义页面中边框的风格，常用属性值如下：</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br></pre></td><td class="code"><pre><span class="line">none：没有边框即忽略所有边框的宽度（默认值）</span><br><span class="line"></span><br><span class="line">solid：边框为单实线(最为常用的)</span><br><span class="line"></span><br><span class="line">dashed：边框为虚线  </span><br><span class="line"></span><br><span class="line">dotted：边框为点线</span><br><span class="line"></span><br><span class="line">double：边框为双实线</span><br></pre></td></tr></table></figure><h3 id="盒子边框写法总结表"><a href="#盒子边框写法总结表" class="headerlink" title="盒子边框写法总结表"></a>盒子边框写法总结表</h3><table><thead><tr><th></th><th></th><th></th></tr></thead><tbody><tr><td>设置内容</td><td>样式属性</td><td>常用属性值</td></tr><tr><td>上边框</td><td>border-top-style:样式; border-top-width:宽度;border-top-color:颜色;border-top:宽度 样式 颜色;</td><td></td></tr><tr><td>下边框</td><td>border-bottom-style:样式;border- bottom-width:宽度;border- bottom-color:颜色;border-bottom:宽度 样式 颜色;</td><td></td></tr><tr><td>左边框</td><td>border-left-style:样式; border-left-width:宽度;border-left-color:颜色;border-left:宽度 样式 颜色;</td><td></td></tr><tr><td>右边框</td><td>border-right-style:样式;border-right-width:宽度;border-right-color:颜色;border-right:宽度 样式 颜色;</td><td></td></tr><tr><td>样式综合设置</td><td>border-style:上边 [右边 下边 左边];</td><td>none无（默认）、solid单实线、dashed虚线、dotted点线、double双实线</td></tr><tr><td>宽度综合设置</td><td>border-width:上边 [右边 下边 左边];</td><td>像素值</td></tr><tr><td>颜色综合设置</td><td>border-color:上边 [右边 下边 左边];</td><td>颜色值、#十六进制、rgb(r,g,b)、rgb(r%,g%,b%)</td></tr><tr><td>边框综合设置</td><td>border:四边宽度 四边样式 四边颜色;</td></tr></tbody></table><h3 id="表格的细线边框"><a href="#表格的细线边框" class="headerlink" title="表格的细线边框"></a>表格的细线边框</h3><p>以前学过的html表格边框很粗，这里只需要CSS一句话就可以美观起来。 让我们真的相信，CSS就是我们的白马王子（白雪公主）。</p><p>table{ border-collapse:collapse; }  collapse 单词是合并的意思</p><p>border-collapse:collapse; 表示边框合并在一起。</p><h3 id="圆角边框-CSS3"><a href="#圆角边框-CSS3" class="headerlink" title="圆角边框(CSS3)"></a>圆角边框(CSS3)</h3><p>从此以后，我们的世界不只有矩形。radius 半径（距离）</p><p>语法格式：</p><figure class="highlight css"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line"><span class="selector-tag">border-radius</span>: 左上角  右上角  右下角  左下角;</span><br></pre></td></tr></table></figure><p>课堂案例:</p><figure class="highlight html"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br></pre></td><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">style</span>&gt;</span><span class="undefined"></span></span><br><span class="line"><span class="undefined">div &#123;</span></span><br><span class="line"><span class="undefined">width: 200px;</span></span><br><span class="line"><span class="undefined">height: 200px;</span></span><br><span class="line"><span class="undefined">border: 1px solid red;</span></span><br><span class="line"><span class="undefined">&#125;</span></span><br><span class="line"><span class="css"><span class="selector-tag">div</span><span class="selector-pseudo">:first-child</span> &#123;  <span class="comment">/* 结构伪类选择器 选亲兄弟 */</span></span></span><br><span class="line"><span class="css"><span class="selector-tag">border-radius</span>: 10<span class="selector-tag">px</span>;  <span class="comment">/*  一个数值表示4个角都是相同的 10px 的弧度 */</span> </span></span><br><span class="line"><span class="undefined">&#125;</span></span><br><span class="line"><span class="undefined"></span></span><br><span class="line"><span class="css"><span class="selector-tag">div</span><span class="selector-pseudo">:nth-child(2)</span> &#123;</span></span><br><span class="line"><span class="css"><span class="comment">/*border-radius: 100px;    取宽度和高度 一半  则会变成一个圆形 */</span></span></span><br><span class="line"><span class="css"><span class="selector-tag">border-radius</span>: 50%;   <span class="comment">/*  100px   50% 取宽度和高度 一半  则会变成一个圆形 */</span></span></span><br><span class="line"><span class="undefined">&#125;</span></span><br><span class="line"><span class="undefined"></span></span><br><span class="line"><span class="css"><span class="selector-tag">div</span><span class="selector-pseudo">:nth-child(3)</span> &#123;</span></span><br><span class="line"><span class="css"><span class="selector-tag">border-radius</span>: 10<span class="selector-tag">px</span> 40<span class="selector-tag">px</span>;  <span class="comment">/* 左上角  和 右下角  是 10px  右上角 左下角 40 对角线 */</span></span></span><br><span class="line"><span class="undefined">&#125;</span></span><br><span class="line"><span class="undefined"></span></span><br><span class="line"><span class="css"><span class="selector-tag">div</span><span class="selector-pseudo">:nth-child(4)</span> &#123;</span></span><br><span class="line"><span class="css"><span class="selector-tag">border-radius</span>: 10<span class="selector-tag">px</span> 40<span class="selector-tag">px</span>  80<span class="selector-tag">px</span>;   <span class="comment">/* 左上角 10    右上角  左下角 40   右下角80 */</span></span></span><br><span class="line"><span class="undefined">&#125;</span></span><br><span class="line"><span class="css"><span class="selector-tag">div</span><span class="selector-pseudo">:nth-child(5)</span> &#123;</span></span><br><span class="line"><span class="css"><span class="selector-tag">border-radius</span>: 10<span class="selector-tag">px</span> 40<span class="selector-tag">px</span>  80<span class="selector-tag">px</span>  100<span class="selector-tag">px</span>;   <span class="comment">/* 左上角 10    右上角 40  右下角 80   左下角   右下角100 */</span></span></span><br><span class="line"><span class="undefined">&#125;</span></span><br><span class="line"><span class="css"><span class="selector-tag">div</span><span class="selector-pseudo">:nth-child(6)</span> &#123;</span></span><br><span class="line"><span class="undefined">border-radius: 100px;  </span></span><br><span class="line"><span class="undefined">height: 100px; </span></span><br><span class="line"><span class="undefined">&#125;</span></span><br><span class="line"><span class="css"><span class="selector-tag">div</span><span class="selector-pseudo">:nth-child(7)</span> &#123;</span></span><br><span class="line"><span class="undefined">border-radius: 100px 0;  </span></span><br><span class="line"><span class="undefined">&#125;</span></span><br><span class="line"><span class="undefined">        </span><span class="tag">&lt;/<span class="name">style</span>&gt;</span></span><br></pre></td></tr></table></figure><h2 id="内边距（padding）"><a href="#内边距（padding）" class="headerlink" title="内边距（padding）"></a>内边距（padding）</h2><p>padding属性用于设置内边距。  是指 边框与内容之间的距离。</p><p>padding-top:上内边距</p><p>padding-right:右内边距</p><p>padding-bottom:下内边距</p><p>padding-left:左内边距</p><p> <img src="/media/w.jpg">注意：  后面跟几个数值表示的意思是不一样的。</p><table><thead><tr><th>值的个数</th><th>表达意思</th></tr></thead><tbody><tr><td>1个值</td><td>padding：上下左右边距 比如padding: 3px; 表示上下左右都是3像素</td></tr><tr><td>2个值</td><td>padding: 上下边距 左右边距 比如 padding: 3px 5px; 表示 上下3像素 左右 5像素</td></tr><tr><td>3个值</td><td>padding：上边距 左右边距 下边距 比如 padding: 3px 5px 10px; 表示 上是3像素 左右是5像素 下是10像素</td></tr><tr><td>4个值</td><td>padding:上内边距 右内边距 下内边距 左内边距 比如: padding: 3px 5px 10px 15px; 表示 上3px 右是5px 下 10px 左15px 顺时针</td></tr></tbody></table><p>课堂案例：  新浪导航</p><p><img src="/media/al.gif"></p><h2 id="外边距（margin）"><a href="#外边距（margin）" class="headerlink" title="外边距（margin）"></a>外边距（margin）</h2><p>margin属性用于设置外边距。  设置外边距会在元素之间创建“空白”， 这段空白通常不能放置其他内容。</p><p>margin-top:上外边距</p><p>margin-right:右外边距</p><p>margin-bottom:下外边距</p><p>margin-left:上外边距</p><p>margin:上外边距 右外边距  下外边距  左外边</p><p>取值顺序跟内边距相同。</p><h3 id="外边距实现盒子居中"><a href="#外边距实现盒子居中" class="headerlink" title="外边距实现盒子居中"></a>外边距实现盒子居中</h3><p>可以让一个盒子实现水平居中，需要满足一下两个条件：</p><ol><li>必须是块级元素。     </li><li>盒子必须指定了宽度（width）</li></ol><p>然后就给<strong>左右的外边距都设置为auto</strong>，就可使块级元素水平居中。</p><p>实际工作中常用这种方式进行网页布局，示例代码如下：</p><figure class="highlight css"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line"><span class="selector-class">.header</span>&#123; <span class="attribute">width</span>:<span class="number">960px</span>; <span class="attribute">margin</span>:<span class="number">0</span> auto;&#125;</span><br></pre></td></tr></table></figure><h3 id="文字盒子居中图片和背景区别"><a href="#文字盒子居中图片和背景区别" class="headerlink" title="文字盒子居中图片和背景区别"></a>文字盒子居中图片和背景区别</h3><ol><li>文字水平居中是  text-align: center</li><li>盒子水平居中  左右margin 改为 auto </li></ol><figure class="highlight css"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line"><span class="selector-tag">text-align</span>: <span class="selector-tag">center</span>; <span class="comment">/*  文字居中水平 */</span></span><br><span class="line"><span class="selector-tag">margin</span>: 10<span class="selector-tag">px</span> <span class="selector-tag">auto</span>;  <span class="comment">/* 盒子水平居中  左右margin 改为 auto 就阔以了 */</span></span><br></pre></td></tr></table></figure><ol start="3"><li>插入图片 我们用的最多 比如产品展示类</li><li>背景图片我们一般用于小图标背景 或者 超大背景图片</li></ol><figure class="highlight css"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br></pre></td><td class="code"><pre><span class="line"><span class="selector-tag">section</span> <span class="selector-tag">img</span> &#123;  </span><br><span class="line">truetrue<span class="attribute">width</span>: <span class="number">200px</span>;<span class="comment">/* 插入图片更改大小 width 和 height */</span></span><br><span class="line">truetrue<span class="attribute">height</span>: <span class="number">210px</span>;</span><br><span class="line">truetrue<span class="attribute">margin-top</span>: <span class="number">30px</span>;  <span class="comment">/* 插入图片更改位置 可以用margin 或padding  盒模型 */</span></span><br><span class="line">truetrue<span class="attribute">margin-left</span>: <span class="number">50px</span>; <span class="comment">/* 插入当图片也是一个盒子 */</span></span><br><span class="line">true&#125;</span><br><span class="line"></span><br><span class="line"><span class="selector-tag">aside</span> &#123;</span><br><span class="line">truetrue<span class="attribute">width</span>: <span class="number">400px</span>;</span><br><span class="line">truetrue<span class="attribute">height</span>: <span class="number">400px</span>;</span><br><span class="line">truetrue<span class="attribute">border</span>: <span class="number">1px</span> solid purple;</span><br><span class="line">truetrue<span class="attribute">background</span>: <span class="number">#fff</span> <span class="built_in">url</span>(images/sun.jpg) no-repeat;</span><br><span class="line">true</span><br><span class="line">truetrue<span class="attribute">background-size</span>: <span class="number">200px</span> <span class="number">210px</span>; <span class="comment">/*  背景图片更改大小只能用 background-size */</span></span><br><span class="line">truetrue<span class="attribute">background-position</span>: <span class="number">30px</span> <span class="number">50px</span>; <span class="comment">/* 背景图片更该位置 我用 background-position */</span></span><br><span class="line">true&#125;</span><br></pre></td></tr></table></figure><h3 id="清除元素的默认内外边距"><a href="#清除元素的默认内外边距" class="headerlink" title="清除元素的默认内外边距"></a>清除元素的默认内外边距</h3><p>为了更方便地控制网页中的元素，制作网页时，可使用如下代码清除元素的默认内外边距： </p><figure class="highlight css"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line">* &#123;</span><br><span class="line">   <span class="attribute">padding</span>:<span class="number">0</span>;         <span class="comment">/* 清除内边距 */</span></span><br><span class="line">   <span class="attribute">margin</span>:<span class="number">0</span>;          <span class="comment">/* 清除外边距 */</span></span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>注意：  行内元素是只有左右外边距的，是没有上下外边距的。 内边距，在ie6等低版本浏览器也会有问题。</p><p>我们尽量不要给行内元素指定上下的内外边距就好了。</p><h2 id="外边距合并"><a href="#外边距合并" class="headerlink" title="外边距合并"></a>外边距合并</h2><p>使用margin定义块元素的垂直外边距时，可能会出现外边距的合并。</p><h3 id="相邻块元素垂直外边距的合并"><a href="#相邻块元素垂直外边距的合并" class="headerlink" title="相邻块元素垂直外边距的合并"></a>相邻块元素垂直外边距的合并</h3><p>当上下相邻的两个块元素相遇时，如果上面的元素有下外边距margin-bottom，下面的元素有上外边距margin-top，则他们之间的垂直间距不是margin-bottom与margin-top之和，而是两者中的较大者。这种现象被称为相邻块元素垂直外边距的合并（也称外边距塌陷）。</p><p><img src="/media/www.png"></p><p>解决方案：  避免就好了。</p><h3 id="嵌套块元素垂直外边距的合并"><a href="#嵌套块元素垂直外边距的合并" class="headerlink" title="嵌套块元素垂直外边距的合并"></a>嵌套块元素垂直外边距的合并</h3><p>对于两个嵌套关系的块元素，如果父元素没有上内边距及边框，则父元素的上外边距会与子元素的上外边距发生合并，合并后的外边距为两者中的较大者，即使父元素的上外边距为0，也会发生合并。</p><p><img src="/media/n.png"></p><p>解决方案：</p><ol><li>可以为父元素定义1像素的上边框或上内边距。</li><li>可以为父元素添加overflow:hidden。</li></ol><p>待续。。。。</p><h2 id="content宽度和高度"><a href="#content宽度和高度" class="headerlink" title="content宽度和高度"></a>content宽度和高度</h2><p>使用宽度属性width和高度属性height可以对盒子的大小进行控制。</p><p>width和height的属性值可以为不同单位的数值或相对于父元素的百分比%，实际工作中最常用的是像素值。</p><p>大多数浏览器，如Firefox、IE6及以上版本都采用了W3C规范，符合CSS规范的盒子模型的总宽度和总高度的计算原则是：</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line">/*外盒尺寸计算（元素空间尺寸）*/</span><br><span class="line">Element空间高度 = content height + padding + border + margin</span><br><span class="line">Element 空间宽度 = content width + padding + border + margin</span><br><span class="line">/*内盒尺寸计算（元素实际大小）*/</span><br><span class="line">Element Height = content height + padding + border （Height为内容高度）</span><br><span class="line">Element Width = content width + padding + border （Width为内容宽度）</span><br></pre></td></tr></table></figure><p>注意：</p><p>1、宽度属性width和高度属性height仅适用于块级元素，对行内元素无效（ img 标签和 input除外）。</p><p>2、计算盒子模型的总高度时，还应考虑上下两个盒子垂直外边距合并的情况。</p><p>3、<strong>如果一个盒子没有给定宽度/高度或者继承父亲的宽度/高度，则padding 不会影响本盒子大小</strong>。</p><h2 id="盒子模型布局稳定性"><a href="#盒子模型布局稳定性" class="headerlink" title="盒子模型布局稳定性"></a>盒子模型布局稳定性</h2><p>开始学习盒子模型，同学们最大的困惑就是， 分不清内外边距的使用，什么情况下使用内边距，什么情况下使用外边距？</p><p>答案是：  其实他们大部分情况下是可以混用的。  就是说，你用内边距也可以，用外边距也可以。 你觉得哪个方便，就用哪个。</p><p>但是，总有一个最好用的吧，我们根据稳定性来分，建议如下：</p><p>按照 优先使用  宽度 （width）  其次 使用内边距（padding）    再次  外边距（margin）。   </p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">width &gt;  padding  &gt;   margin</span><br></pre></td></tr></table></figure><p>原因：</p><ol><li><p>margin 会有外边距合并 还有 ie6下面margin 加倍的bug（讨厌）所以最后使用。</p></li><li><p>padding  会影响盒子大小， 需要进行加减计算（麻烦） 其次使用。</p></li><li><p>width   没有问题（嗨皮）我们经常使用宽度剩余法 高度剩余法来做。</p><p>​</p></li></ol><h2 id="CSS3盒模型"><a href="#CSS3盒模型" class="headerlink" title="CSS3盒模型"></a>CSS3盒模型</h2><p>CSS3中可以通过box-sizing 来指定盒模型，即可指定为content-box、border-box，这样我们计算盒子大小的方式就发生了改变。</p><p>可以分成两种情况：</p><p>1、box-sizing: content-box  盒子大小为 width + padding + border   content-box:此值为其默认值，其让元素维持W3C的标准Box Mode</p><p>2、box-sizing: border-box  盒子大小为 width    就是说  padding 和 border 是包含到width里面的</p><p>注：上面的标注的width指的是CSS属性里设置的width: length，content的值是会自动调整的。</p><figure class="highlight css"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br></pre></td><td class="code"><pre><span class="line"><span class="selector-tag">div</span><span class="selector-pseudo">:first-child</span> &#123;</span><br><span class="line">truetruetrue<span class="attribute">width</span>: <span class="number">200px</span>;</span><br><span class="line">truetruetrue<span class="attribute">height</span>: <span class="number">200px</span>;</span><br><span class="line">truetruetrue<span class="attribute">background-color</span>: pink; </span><br><span class="line">truetruetrue<span class="attribute">box-sizing</span>: content-box;  <span class="comment">/*  就是以前的标准盒模型  w3c */</span></span><br><span class="line">truetruetrue<span class="attribute">padding</span>: <span class="number">10px</span>;</span><br><span class="line">truetruetrue<span class="attribute">border</span>: <span class="number">15px</span> solid red;</span><br><span class="line">truetruetrue<span class="comment">/* 盒子大小为 width + padding + border   content-box:此值为其默认值，其让元素维持W3C的标准Box Mode */</span></span><br><span class="line">truetrue&#125;</span><br><span class="line">truetrue<span class="selector-tag">div</span><span class="selector-pseudo">:last-child</span> &#123;</span><br><span class="line">truetruetrue<span class="attribute">width</span>: <span class="number">200px</span>;</span><br><span class="line">truetruetrue<span class="attribute">height</span>: <span class="number">200px</span>;</span><br><span class="line">truetruetrue<span class="attribute">background-color</span>: purple;</span><br><span class="line">truetruetrue<span class="attribute">padding</span>: <span class="number">10px</span>;</span><br><span class="line">truetruetrue<span class="attribute">box-sizing</span>: border-box;   <span class="comment">/* padding border  不撑开盒子 */</span></span><br><span class="line">truetruetrue<span class="attribute">border</span>: <span class="number">15px</span> solid red;</span><br><span class="line">truetruetrue<span class="comment">/* margin: 10px; */</span></span><br><span class="line">truetruetrue<span class="comment">/* 盒子大小为 width    就是说  padding 和 border 是包含到width里面的 */</span></span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h2 id="盒子阴影"><a href="#盒子阴影" class="headerlink" title="盒子阴影"></a>盒子阴影</h2><p>语法格式：</p><figure class="highlight"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">box-shadow:水平阴影 垂直阴影 模糊距离 阴影尺寸 阴影颜色  内/外阴影；</span><br></pre></td></tr></table></figure><p><img src="/media/1498467567011.png" alt="1498467567011"></p><ol><li>前两个属性是必须写的。其余的可以省略。</li><li>外阴影 (outset) 但是不能写    默认      想要内阴影  inset </li></ol><figure class="highlight css"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br></pre></td><td class="code"><pre><span class="line"><span class="selector-tag">div</span> &#123;</span><br><span class="line">truetruetrue<span class="attribute">width</span>: <span class="number">200px</span>;</span><br><span class="line">truetruetrue<span class="attribute">height</span>: <span class="number">200px</span>;</span><br><span class="line">truetruetrue<span class="attribute">border</span>: <span class="number">10px</span> solid red;</span><br><span class="line">truetruetrue<span class="comment">/* box-shadow: 5px 5px 3px 4px rgba(0, 0, 0, .4);  */</span></span><br><span class="line">truetruetrue<span class="comment">/* box-shadow:水平位置 垂直位置 模糊距离 阴影尺寸（影子大小） 阴影颜色  内/外阴影； */</span></span><br><span class="line">truetruetrue<span class="attribute">box-shadow</span>: <span class="number">0</span> <span class="number">15px</span> <span class="number">30px</span>  <span class="built_in">rgba</span>(0, 0, 0, .4);</span><br><span class="line">truetruetrue</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h1 id="浮动-float"><a href="#浮动-float" class="headerlink" title="浮动(float)"></a>浮动(float)</h1><h2 id="普通流-normal-flow"><a href="#普通流-normal-flow" class="headerlink" title="普通流(normal flow)"></a>普通流(normal flow)</h2><p>这个单词很多人翻译为 文档流 ， 字面翻译  普通流 或者标准流都可以。</p><p>前面我们说过，网页布局的核心，就是用CSS来摆放盒子位置。如何把盒子摆放到合适的位置？  </p><p>CSS的定位机制有3种：普通流（标准流）、浮动和定位。</p><p>html语言当中另外一个相当重要的概念———-标准流！或者普通流。普通流实际上就是一个网页内标签元素正常从上到下，从左到右排列顺序的意思，比如块级元素会独占一行，行内元素会按顺序依次前后排列；按照这种大前提的布局排列之下绝对不会出现例外的情况叫做普通流布局。</p><p><img src="/media/t.jpg"></p><h2 id="浮动-float-1"><a href="#浮动-float-1" class="headerlink" title="浮动(float)"></a>浮动(float)</h2><p>浮动最早是用来控制图片，以便达到其他元素（特别是文字）实现“环绕”图片的效果。</p><p><img src="/media/l.png" style="width: 600px; border: 2px solid #000;"></p><p>后来，我们发现浮动有个很有意思的事情：就是让任何盒子可以一行排列,因此我们就慢慢的偏离主题，用浮动的特性来布局了。（CSS3已经我们真正意义上的网页布局，具体CSS3我们会详细解释）</p><p><img src="/media/d.png"></p><h2 id="什么是浮动？"><a href="#什么是浮动？" class="headerlink" title="什么是浮动？"></a>什么是浮动？</h2><p>元素的浮动是指设置了浮动属性的元素会脱离标准普通流的控制，移动到其父元素中指定位置的过程。</p><p>在CSS中，通过float属性来定义浮动，其基本语法格式如下：</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">选择器&#123;float:属性值;&#125;</span><br></pre></td></tr></table></figure><table><thead><tr><th>属性值</th><th>描述</th></tr></thead><tbody><tr><td>left</td><td>元素向左浮动</td></tr><tr><td>right</td><td>元素向右浮动</td></tr><tr><td>none</td><td>元素不浮动（默认值）</td></tr></tbody></table><h2 id="浮动详细内幕特性"><a href="#浮动详细内幕特性" class="headerlink" title="浮动详细内幕特性"></a>浮动详细内幕特性</h2><p>浮动脱离标准流，不占位置，会影响标准流。浮动只有左右浮动。</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">浮动首先创建包含块的概念（包裹）。就是说， 浮动的元素总是找理它最近的父级元素对齐。但是不会超出内边距的范围。</span><br></pre></td></tr></table></figure><p>   <img src="/media/one.jpg" width="500"> </p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">浮动的元素排列位置，跟上一个元素（块级）有关系。如果上一个元素有浮动，则A元素顶部会和上一个元素的顶部对齐；如果上一个元素是标准流，则A元素的顶部会和上一个元素的底部对齐。</span><br></pre></td></tr></table></figure><p>  <img src="/media/two.jpg" width="400"></p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">由2可以推断出，一个父盒子里面的子盒子，如果其中一个子级有浮动的，则其他子级都需要浮动。这样才能一行对齐显示。</span><br></pre></td></tr></table></figure><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">元素添加浮动后，元素会具有行内块元素的特性。元素的大小完全取决于定义的大小或者默认的内容多少浮动根据元素书写的位置来显示相应的浮动。</span><br></pre></td></tr></table></figure><p>总结：  浮动 —&gt;    </p><p>浮动的目的就是为了让多个块级元素同一行上显示。</p><p>float      浮 漏 特   </p><p>浮：    加了浮动的元素盒子是浮起来的，漂浮在其他的标准流盒子上面。<br>漏：    加了浮动的盒子，不占位置的，它浮起来了，它原来的位置漏 给了标准流的盒子。<br>特：    特别注意，首先浮动的盒子需要和标准流的父级搭配使用， 其次 特别的注意浮动可以使元素显示模式体现为行内块特性。</p><h1 id="版心和布局流程"><a href="#版心和布局流程" class="headerlink" title="版心和布局流程"></a>版心和布局流程</h1><p>阅读报纸时容易发现，虽然报纸中的内容很多，但是经过合理地排版，版面依然清晰、易读。同样，在制作网页时，要想使页面结构清晰、有条理，也需要对网页进行“排版”。</p><p>“版心”(可视区) 是指网页中主体内容所在的区域。一般在浏览器窗口中水平居中显示，常见的宽度值为960px、980px、1000px、1200px等。</p><h2 id="布局流程"><a href="#布局流程" class="headerlink" title="布局流程"></a>布局流程</h2><p>为了提高网页制作的效率，布局时通常需要遵守一定的布局流程，具体如下：</p><p>1、确定页面的版心（可视区）。</p><p>2、分析页面中的行模块，以及每个行模块中的列模块。</p><p>3、制作HTML结构 。</p><p>4、CSS初始化，然后开始运用盒子模型的原理，通过DIV+CSS布局来控制网页的各个模块。</p><h2 id="一列固定宽度且居中"><a href="#一列固定宽度且居中" class="headerlink" title="一列固定宽度且居中"></a>一列固定宽度且居中</h2><p><img src="/media/yl.jpg" width="400"></p><p>最普通的，最为常用的结构</p><h2 id="两列左窄右宽型"><a href="#两列左窄右宽型" class="headerlink" title="两列左窄右宽型"></a>两列左窄右宽型</h2><p><img src="/media/ll.jpg" width="400"></p><p>比如小米    <a href="http://www.mi.com" target="_blank"> 小米官网 </a></p><h2 id="通栏平均分布型"><a href="#通栏平均分布型" class="headerlink" title="通栏平均分布型"></a>通栏平均分布型</h2><p><img src="/media/tl.jpg" width="600"></p><p>比如锤子    <a href="http://www.smartisan.com/" target="_blank"> 锤子官网 </a></p><h1 id="清除浮动"><a href="#清除浮动" class="headerlink" title="清除浮动"></a>清除浮动</h1><p>人生就像乘坐北京地铁一号线：</p><p>途经国贸，羡慕繁华；</p><p>途经天安门，幻想权力；</p><p>途经金融街，梦想发财；</p><p>经过公主坟，遥想华丽家族；</p><p>经过玉泉路，依然雄心勃勃…</p><p>这时，有个声音飘然入耳:乘客你好,八宝山马上就要到了！</p><p>顿时醒悟：人生苦短，有始有终。 </p><p>好比我们的浮动，有浮动开始，则就应该有浮动结束。</p><h2 id="为什么要清除浮动"><a href="#为什么要清除浮动" class="headerlink" title="为什么要清除浮动"></a>为什么要清除浮动</h2><p>我们前面说过，浮动本质是用来做一些文字混排效果的，但是被我们拿来做布局用，则会有很多的问题出现， 但是，你不能说浮动不好 <img src="/media/wq.jpg" height="100">。  </p><p>由于浮动元素不再占用原文档流的位置，所以它会对后面的元素排版产生影响，为了解决这些问题，此时就需要在该元素中清除浮动。</p><p>准确地说，并不是清除浮动，而是<strong>清除浮动后造成的影响</strong></p><p>如果浮动一开始就是一个美丽的错误，那么请用正确的方法挽救它。</p><h2 id="清除浮动本质"><a href="#清除浮动本质" class="headerlink" title="清除浮动本质"></a>清除浮动本质</h2><p>清除浮动主要为了解决父级元素因为子级浮动引起内部高度为0 的问题。</p><p><img src="/media/n.jpg"></p><p><img src="/media/no.jpg"></p><p><img src="/media/kc.jpg"></p><h2 id="清除浮动的方法"><a href="#清除浮动的方法" class="headerlink" title="清除浮动的方法"></a>清除浮动的方法</h2><p>其实本质叫做闭合浮动更好一些, 记住，清除浮动就是把浮动的盒子圈到里面，让父盒子闭合出口和入口不让他们出来影响其他元素。</p><p>在CSS中，clear属性用于清除浮动，其基本语法格式如下：</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">选择器&#123;clear:属性值;&#125;</span><br></pre></td></tr></table></figure><table><thead><tr><th>属性值</th><th>描述</th></tr></thead><tbody><tr><td>left</td><td>不允许左侧有浮动元素（清除左侧浮动的影响）</td></tr><tr><td>right</td><td>不允许右侧有浮动元素（清除右侧浮动的影响）</td></tr><tr><td>both</td><td>同时清除左右两侧浮动的影响</td></tr></tbody></table><h3 id="额外标签法"><a href="#额外标签法" class="headerlink" title="额外标签法"></a>额外标签法</h3><figure class="highlight html"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">是W3C推荐的做法是通过在浮动元素末尾添加一个空的标签例如 <span class="tag">&lt;<span class="name">div</span> <span class="attr">style</span>=<span class="string">”clear:both”</span>&gt;</span><span class="tag">&lt;/<span class="name">div</span>&gt;</span>，或则其他标签br等亦可。</span><br></pre></td></tr></table></figure><p>优点： 通俗易懂，书写方便</p><p>缺点： 添加许多无意义的标签，结构化较差。  我只能说，w3c你推荐的方法我不接受，你不值得拥有。。。</p><h3 id="父级添加overflow属性方法"><a href="#父级添加overflow属性方法" class="headerlink" title="父级添加overflow属性方法"></a>父级添加overflow属性方法</h3><p>可以通过触发BFC的方式，可以实现清除浮动效果。（BFC后面讲解）</p><figure class="highlight"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">可以给父级添加： overflow为 hidden|auto|scroll  都可以实现。</span><br></pre></td></tr></table></figure><p>优点：  代码简洁</p><p>缺点：  内容增多时候容易造成不会自动换行导致内容被隐藏掉，无法显示需要溢出的元素。</p><h3 id="使用after伪元素清除浮动"><a href="#使用after伪元素清除浮动" class="headerlink" title="使用after伪元素清除浮动"></a>使用after伪元素清除浮动</h3><p><strong>:after 方式为空元素的升级版，好处是不用单独加标签了</strong> </p><p>使用方法：</p><figure class="highlight"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line"><span class="selector-class">.clearfix</span><span class="selector-pseudo">:after</span> &#123;  <span class="attribute">content</span>: <span class="string">"."</span>; <span class="attribute">display</span>: block; <span class="attribute">height</span>: <span class="number">0</span>; <span class="attribute">clear</span>: both; <span class="attribute">visibility</span>: hidden;  &#125;   </span><br><span class="line"></span><br><span class="line">.clearfix &#123;*zoom: 1;&#125;   /* IE6、7 专有 */</span><br></pre></td></tr></table></figure><p>优点： 符合闭合浮动思想  结构语义化正确</p><p>缺点： 由于IE6-7不支持:after，使用 zoom:1触发 hasLayout。</p><p>代表网站： 百度、淘宝网、网易等</p><p><img src="/media/163.png" style="border: 1px dashed #3c3c3c;"></p><p>注意： content:”.”  里面尽量跟一个小点，或者其他，尽量不要为空，否则再firefox 7.0前的版本会有生成空格。</p><h3 id="使用before和after双伪元素清除浮动"><a href="#使用before和after双伪元素清除浮动" class="headerlink" title="使用before和after双伪元素清除浮动"></a>使用before和after双伪元素清除浮动</h3><p>使用方法：</p><figure class="highlight css"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br></pre></td><td class="code"><pre><span class="line"><span class="selector-class">.clearfix</span><span class="selector-pseudo">:before</span>,<span class="selector-class">.clearfix</span><span class="selector-pseudo">:after</span> &#123; </span><br><span class="line">  <span class="attribute">content</span>:<span class="string">""</span>;</span><br><span class="line">  <span class="attribute">display</span>:table;  <span class="comment">/* 这句话可以出发BFC BFC可以清除浮动,BFC我们后面讲 */</span></span><br><span class="line">&#125;</span><br><span class="line"><span class="selector-class">.clearfix</span><span class="selector-pseudo">:after</span> &#123;</span><br><span class="line"> <span class="attribute">clear</span>:both;</span><br><span class="line">&#125;</span><br><span class="line"><span class="selector-class">.clearfix</span> &#123;</span><br><span class="line">  *zoom:1;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>优点：  代码更简洁</p><p>缺点：  由于IE6-7不支持:after，使用 zoom:1触发 hasLayout。</p><p>代表网站： 小米、腾讯等</p><h1 id="Photoshop图像处理专家"><a href="#Photoshop图像处理专家" class="headerlink" title="Photoshop图像处理专家"></a>Photoshop图像处理专家</h1><p><img src="/media/1498465020015.png" alt="1498465020015"></p><p>PS 工具是我们使用频率比较高的软件之一， 我们学习PS目的不是为了设计海报做电商和UI的，而是要求：</p><ol><li>会简单的抠图</li><li>会简单的修改PSD效果图</li><li><strong>熟练的切图</strong></li><li>能和网站美工美眉有共同话题。。。。。</li></ol><h2 id="Photoshop基本使用"><a href="#Photoshop基本使用" class="headerlink" title="Photoshop基本使用"></a>Photoshop基本使用</h2><h2 id="PS界面组成："><a href="#PS界面组成：" class="headerlink" title="PS界面组成："></a>PS界面组成：</h2><p>菜单栏、选项栏、工具栏、浮动面板（拖拽名称，可单独操作面板）、绘图窗口<br>​    窗口菜单，可显示隐藏所有面板</p><p>工作区：（新建）</p><p>调整浮动面板</p><p><img src="/media/jiemian.png"></p><h2 id="基本操作"><a href="#基本操作" class="headerlink" title="基本操作"></a>基本操作</h2><p>文件下拉菜单：<br>​    1、新建      新建文档      CTRL+N</p><p>单位：像素   厘米   毫米</p><p>屏幕显示： 单位  像素      72像素/英寸    RGB颜色模式</p><p><img src="/media/huabu.png"></p><p>2、关闭文档     CTRL+W </p><p>3、存储    CTRL+S    （替存）</p><p>4、存储为  CTRL+SHIFT+S    另存一份文件</p><p><img src="/media/baocun.png"></p><p>5、格式：<br>​      .psd     PS源文件格式   图层、文字、样式等，可再次编辑<br>​      （给自己）<br>​      .jpg     有损压缩格式   （给客户）  品质  最高12</p><p>6、文件打开：<br>​      1）文件下拉菜单-打开（CTRL+O欧）</p><p>​      2）双击软件空白处也能打开<br>​    </p><h2 id="移动工具-V"><a href="#移动工具-V" class="headerlink" title="移动工具 V"></a>移动工具 V</h2><p>1、不同文件之间拖拽图像。</p><h2 id="自由变形"><a href="#自由变形" class="headerlink" title="自由变形"></a>自由变形</h2><p>ctrl + T 可以改变图像的大小</p><p><img src="/media/bianhuan.png"></p><p>按下enter 回车确认操作。</p><h2 id="图层操作-重点"><a href="#图层操作-重点" class="headerlink" title="图层操作(重点)"></a>图层操作(重点)</h2><p> 图层面板快捷键   F7  其实图层就是一张张透明的纸  可以实现叠加问题。</p><p><img src="/media/tuceng.png"></p><p> 图层选择： 使用移动工具V </p><p> 1、图层缩览图判断</p><p> 2、按住CTRL,在目标图像上单击</p><p> 3、将光标放置在目标图像上右键，选择图层名称</p><p>图层面板中加选图层：</p><p>1、按SHIFT，单击另一目标图层     中间所有图层被选中</p><p>2、按CTRL，单击另一目标图层     只选中目标图层</p><p>复制图层：选中目标图层后（移动工具状态下）</p><p>   1、按ALT拖拽图像</p><p>   2、CTRL+J      （重合）</p><p>案例： 摆放一个自行车</p><p><img src="/media/bike.jpg"></p><h2 id="图层编组"><a href="#图层编组" class="headerlink" title="图层编组"></a>图层编组</h2><p>选中目标图层，CTRL+G   </p><p>取消编组：CTRL+SHIFT+G</p><p>双击图层名称可重新命名</p><p>双击组名称，可命名组</p><p>  移动工具V选择组或图层时，需设置选项栏</p><p><img src="/media/1498465862231.png" alt="1498465862231"></p><h2 id="图层上下位置移动"><a href="#图层上下位置移动" class="headerlink" title="图层上下位置移动"></a>图层上下位置移动</h2><p>1、选中目标图层，在图层面拖拽</p><p>2、CTRL+]    向上移动图层<br>​       CTRL+[    向下移动图层</p><p>3、CTRL+SHIFT+]   图层置顶<br>​       CTRL+SHIFT+[   图层置底</p><p>移动选区或图像时：</p><p>移动过程中，没释放鼠标，按住SHIFT，可同一水平线、同一垂线、45度移动。</p><p>ps中的撤销操作是：</p><p>ctrl+z  撤销一步</p><p>ctrl+alt+z  撤销多步</p><h2 id="图层合并"><a href="#图层合并" class="headerlink" title="图层合并"></a>图层合并</h2><p>ctrl+e 可以合并图层</p><p><img src="/media/hebing.png"></p><h2 id="图层透明度"><a href="#图层透明度" class="headerlink" title="图层透明度"></a>图层透明度</h2><p>不透明度：设置图层的不透明程度    0%完全透明，不可见</p><p>​                                  100%完全不透明，真实可见</p><p>填充：与不透明度效果类似</p><p><img src="/media/1498465905203.png" alt="1498465905203">)</p><p>键盘数字键，可快速设置透明度数值     </p><h2 id="矩形选区工具-M"><a href="#矩形选区工具-M" class="headerlink" title="矩形选区工具 M"></a>矩形选区工具 M</h2><p>用来选择某部分区域  我们成为选区工具 </p><p><img src="/media/gongjuxiang.png"></p><p>取消选区：  ctrl+d </p><h2 id="颜色填充"><a href="#颜色填充" class="headerlink" title="颜色填充"></a>颜色填充</h2><p><img src="/media/yanse1.png"></p><p><img src="/media/yanse2.png"></p><p><img src="/media/miqi.jpg"></p><h2 id="套索工具-L"><a href="#套索工具-L" class="headerlink" title="套索工具 L"></a>套索工具 L</h2><p>1、套索工具      L  在屏幕上拖拽鼠标左键，释放后生成选区</p><p>2、多边形套索    L  连续单击绘制多边形选区</p><p>​                  闭合方法：1、单击起始点  2、双击任意位置</p><p>​                  DELETE删除当前点</p><p><img src="/media/shiboguan.jpg"></p><h2 id="磁性套索-L"><a href="#磁性套索-L" class="headerlink" title="磁性套索 L"></a>磁性套索 L</h2><p>L   在颜色交界的位置单击后拖动。单击起始点后，生成选区。      </p><p><img src="/media/cixing.jpg"></p><h2 id="魔棒工具-W"><a href="#魔棒工具-W" class="headerlink" title="魔棒工具   W"></a>魔棒工具   W</h2><p>以单击位置为选择色，选择相似颜色生成选区。</p><p><img src="/media/1498465928343.png" alt="1498465928343"> </p><p>容差：选择颜色的范围     容差小，颜色选择精确。    0-255</p><p>连续：勾选连续时，相连颜色生成选区。</p><p>​     不勾选，画面中所有相似颜色被选中生成选区。</p><p>按SHIFT在未生成选区位置单击，可选区相加。</p><p>选区反选：CTRL+SHIFT+I </p><h2 id="选区布尔运算"><a href="#选区布尔运算" class="headerlink" title="选区布尔运算"></a>选区布尔运算</h2><p><img src="/media/1498465944087.png" alt="1498465944087"></p><p>选区面积大小的变化。</p><p>新选区：保持选中状态</p><p>添加到选区：相加运算（按住SHIFT再绘制选区）</p><p>从选区减去：相减（按住ALT再绘制选区）</p><p>与选区交叉：重合部分保留。（按住ALT+SHIFT再绘制选区）</p><p>梦幻星球</p><p><img src="/media/chengshi.jpg"></p><h2 id="钢笔工具：-P"><a href="#钢笔工具：-P" class="headerlink" title="钢笔工具：   P"></a>钢笔工具：   P</h2><p>作用：绘制路径，生成选区，抠图。</p><p>组成;路径线和锚点</p><p>绘制路径后，CTRL+回车，生成选区。</p><p>路径类型：</p><p>直线型路径：连续单击</p><p>曲线型路径：第一点单击，第二点拖动鼠标。</p><p><img src="/media/jiu.png"></p><h2 id="文字工具"><a href="#文字工具" class="headerlink" title="文字工具"></a>文字工具</h2><p>T  可以直接输入文字</p><h2 id="Photoshop-切图"><a href="#Photoshop-切图" class="headerlink" title="Photoshop 切图"></a>Photoshop 切图</h2><p>PS切图 可以 分为 手动 利用切片切图 以及 利用PS的插件快速切图</p><h3 id="切片工具"><a href="#切片工具" class="headerlink" title="切片工具"></a>切片工具</h3><p><img src="/media/1498466173246.png" alt="1498466173246"></p><ol><li><p>利用切片工具手动划出</p></li><li><p>图层菜单—新建基于图层的切片</p></li><li><p>利用标尺   基于参考线的切片 （选择切片工具）</p><p>​</p><p><img src="/media/1498466734205.png" alt="1498466734205"></p></li><li><p>先选个一个整个的切片，  切片选择工具– 属性面板中有 “划分”   –可以等分数平分切图</p></li></ol><p>导出切片： 文件– 存储为web设备所用格式</p><h3 id="辅助线和切片使用及清除"><a href="#辅助线和切片使用及清除" class="headerlink" title="辅助线和切片使用及清除"></a>辅助线和切片使用及清除</h3><p>视图菜单– 清除 辅助线/ 清除切片</p><h3 id="切图插件"><a href="#切图插件" class="headerlink" title="切图插件"></a>切图插件</h3><p>Cutterman是一款运行在photoshop中的插件，能够自动将你需要的图层进行输出， 以替代传统的手工 “导出web所用格式” 以及使用切片工具进行挨个切图的繁琐流程。 它支持各种各样的图片尺寸、格式、形态输出，方便你在pc、ios、Android等端上使用。 它不需要你记住一堆的语法、规则，纯点击操作，方便、快捷，易于上手。</p><p>官网: <a href="http://www.cutterman.cn/zh/cutterman" target="_blank" rel="noopener">http://www.cutterman.cn/zh/cutterman</a></p><p>注意： cutterman插件要求你的ps 必须是完整版，不能是绿色版，所以大家需要从新安装完整版本。</p><p><img src="/media/sample1.gif"></p><h1 id="项目案例：-学成网"><a href="#项目案例：-学成网" class="headerlink" title="项目案例： 学成网"></a>项目案例： 学成网</h1><p>案例练习目的是总结以前的css和html</p><p>还有ps的使用。</p><p>制作步骤：</p><ol><li>准备相关文件。（内部样式表) html文件(index.html)   图片文件</li><li>准备CSS 初始化。 书写结构和样式</li><li>确定版心（是1200像素)和各个模块。</li></ol><h1 id="定位-position"><a href="#定位-position" class="headerlink" title="定位(position)"></a>定位(position)</h1><p>如果，说浮动， 关键在一个 “浮” 字上面， 那么 我们的定位，关键在于一个 “位” 上。</p><p>PS: 定位是我们CSS算是数一数二难点的了，但是，你务必要学好它，我们CSS离不开定位，特别是后面的js特效，天天和定位打交道。不要抵触它，反而要爱上它，它可以让我们工作更加轻松哦！</p><h2 id="为什么要用定位？"><a href="#为什么要用定位？" class="headerlink" title="为什么要用定位？"></a>为什么要用定位？</h2><p>那么定位，最长运用的场景再那里呢？   来看几幅图片，你一定会有感悟！</p><p>第一幅图， 小黄色块可以再图片上移动：</p><p><img src="/media/1.gif" style="border: 1px dashed #3c3c3c;"></p><p>第二幅图， 左右箭头压住图片：</p><p><img src="/media/2.gif" style="border: 1px dashed #3c3c3c;"></p><p>第三幅图,  hot 再盒子外面多出一块，更加突出：</p><p><img src="/media/it.png" style="border: 1px dashed #3c3c3c;"></p><p>以上三个小地方，如果用标准流或者浮动，实现会比较复杂或者难以实现，此时我们用定位来做，just soso！</p><h2 id="元素的定位属性"><a href="#元素的定位属性" class="headerlink" title="元素的定位属性"></a>元素的定位属性</h2><p>元素的定位属性主要包括定位模式和边偏移两部分。</p><p>1、边偏移</p><table><thead><tr><th>边偏移属性</th><th>描述</th></tr></thead><tbody><tr><td>top</td><td>顶端偏移量，定义元素相对于其父元素上边线的距离</td></tr><tr><td>bottom</td><td>底部偏移量，定义元素相对于其父元素下边线的距离</td></tr><tr><td>left</td><td>左侧偏移量，定义元素相对于其父元素左边线的距离</td></tr><tr><td>right</td><td>右侧偏移量，定义元素相对于其父元素右边线的距离</td></tr></tbody></table><p>也就说，以后定位要和这边偏移搭配使用了， 比如 top: 100px;  left: 30px; 等等</p><p>2、定位模式(定位的分类)</p><p>在CSS中，position属性用于定义元素的定位模式，其基本语法格式如下：</p><p>选择器{position:属性值;}</p><p>position属性的常用值</p><table><thead><tr><th>值</th><th>描述</th></tr></thead><tbody><tr><td>static</td><td>自动定位（默认定位方式）</td></tr><tr><td>relative</td><td>相对定位，相对于其原文档流的位置进行定位</td></tr><tr><td>absolute</td><td>绝对定位，相对于其上一个已经定位的父元素进行定位</td></tr><tr><td>fixed</td><td>固定定位，相对于浏览器窗口进行定位</td></tr></tbody></table><h2 id="静态定位-static"><a href="#静态定位-static" class="headerlink" title="静态定位(static)"></a>静态定位(static)</h2><p>静态定位是所有元素的默认定位方式，当position属性的取值为static时，可以将元素定位于静态位置。 所谓静态位置就是各个元素在HTML文档流中默认的位置。</p><p>上面的话翻译成白话：  就是网页中所有元素都默认的是静态定位哦！ 其实就是标准流的特性。</p><p>在静态定位状态下，无法通过边偏移属性（top、bottom、left或right）来改变元素的位置。</p><p>PS： 静态定位其实没啥可说的。</p><h2 id="相对定位relative-自恋型"><a href="#相对定位relative-自恋型" class="headerlink" title="相对定位relative(自恋型)"></a>相对定位relative(自恋型)</h2><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">小笑话： </span><br><span class="line">刚刚看到一个超级超级帅的帅哥，看得我都忍不住想和他搞基了。世间怎会有如此之完美的男人。我和他就这样一动不动的对视着，就仿佛一见钟情。时间也在这一瞬间停止了。直到我的手麻了。才恋恋不舍的放下镜子。。。。</span><br></pre></td></tr></table></figure><p><img src="/media/smail.gif" width="100"></p><p>相对定位是将元素相对于它在标准流中的位置进行定位，当position属性的取值为relative时，可以将元素定位于相对位置。</p><p>对元素设置相对定位后，可以通过边偏移属性改变元素的位置，但是它在文档流中的位置仍然保留。如下图所示，即是一个相对定位的效果展示：</p><p><img src="/media/r.png"></p><p>注意：   </p><ol><li>相对定位最重要的一点是，它可以通过边偏移移动位置，但是原来的所占的位置，继续占有。</li><li>其次，每次移动的位置，是以自己的左上角为基点移动（相对于自己来移动位置）</li></ol><p>就是说，相对定位的盒子仍在标准流中，它后面的盒子仍以标准流方式对待它。（相对定位不脱标）</p><p>如果说浮动的主要目的是 让多个块级元素一行显示，那么定位的主要价值就是 移动位置， 让盒子到我们想要的位置上去。</p><h2 id="绝对定位absolute-拼爹型"><a href="#绝对定位absolute-拼爹型" class="headerlink" title="绝对定位absolute (拼爹型)"></a>绝对定位absolute (拼爹型)</h2><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><span class="line">小笑话：</span><br><span class="line"></span><br><span class="line">吃早饭时，老婆往儿子碗里放了两个煎蛋，儿子全给了我，还一本正经地说：“爸爸，多吃点，男人养家不容易。” &lt;br/&gt;</span><br><span class="line"></span><br><span class="line">我一阵感动，刚想夸他两句。 </span><br><span class="line"></span><br><span class="line">儿子接着说：“以后全靠你让我拼爹了！”</span><br></pre></td></tr></table></figure><p><img src="/media/smail.gif" width="100"></p><p>　[注意] 如果文档可滚动，绝对定位元素会随着它滚动，因为元素最终会相对于正常流的某一部分定位。</p><p>当position属性的取值为absolute时，可以将元素的定位模式设置为绝对定位。</p><p>注意：    绝对定位最重要的一点是，它可以通过边偏移移动位置，但是它完全脱标，完全不占位置。</p><h3 id="父级没有定位"><a href="#父级没有定位" class="headerlink" title="父级没有定位"></a>父级没有定位</h3><p>若所有父元素都没有定位，以浏览器为准对齐(document文档)。</p><p><img src="/media/ab.png"></p><h3 id="父级有定位"><a href="#父级有定位" class="headerlink" title="父级有定位"></a>父级有定位</h3><p>绝对定位是将元素依据最近的已经定位（绝对、固定或相对定位）的父元素（祖先）进行定位。 </p><p><img src="/media/ab1.png"></p><h3 id="子绝父相"><a href="#子绝父相" class="headerlink" title="子绝父相"></a>子绝父相</h3><p>这个“子绝父相”太重要了，是我们学习定位的口诀，时时刻刻记住的。</p><p>这句话的意思是 子级是绝对定位的话， 父级要用相对定位。</p><p>首先， 我们说下， 绝对定位是将元素依据最近的已经定位绝对、固定或相对定位）的父元素（祖先）进行定位。</p><p>就是说， 子级是绝对定位，父亲只要是定位即可（不管父亲是绝对定位还是相对定位，甚至是固定定位都可以），就是说， 子绝父绝，子绝父相都是正确的。</p><p>但是，在我们网页布局的时候， 最常说的 子绝父相是怎么来的呢？ 请看如下图：</p><p><img src="/media/zi.png" style="border: 1px dashed #3c3c3c;"></p><p>所以，我们可以得出如下结论：</p><p>因为子级是绝对定位，不会占有位置， 可以放到父盒子里面的任何一个地方。</p><p>父盒子布局时，需要占有位置，因此父亲只能是 相对定位. </p><p>这就是子绝父相的由来。</p><h2 id="绝对定位的盒子水平-垂直居中"><a href="#绝对定位的盒子水平-垂直居中" class="headerlink" title="绝对定位的盒子水平/垂直居中"></a>绝对定位的盒子水平/垂直居中</h2><p>普通的盒子是左右margin 改为 auto就可， 但是对于绝对定位就无效了</p><p>定位的盒子也可以水平或者垂直居中，有一个算法。</p><ol><li><p>首先left 50%   父盒子的一半大小</p></li><li><p>然后走自己外边距负的一半值就可以了 margin-left。</p><p>​</p></li></ol><h2 id="固定定位fixed-认死理型"><a href="#固定定位fixed-认死理型" class="headerlink" title="固定定位fixed(认死理型)"></a>固定定位fixed(认死理型)</h2><p>固定定位是绝对定位的一种特殊形式，类似于 正方形是一个特殊的 矩形。它以浏览器窗口作为参照物来定义网页元素。当position属性的取值为fixed时，即可将元素的定位模式设置为固定定位。</p><p>当对元素设置固定定位后，它将脱离标准文档流的控制，始终依据浏览器窗口来定义自己的显示位置。不管浏览器滚动条如何滚动也不管浏览器窗口的大小如何变化，该元素都会始终显示在浏览器窗口的固定位置。</p><p>固定定位有两点：</p><ol><li>固定定位的元素跟父亲没有任何关系，只认浏览器。</li><li>固定定位完全脱标，不占有位置，不随着滚动条滚动。</li></ol><p>记忆法：  就类似于孙猴子， 无父无母，好不容易找到一个可靠的师傅（浏览器），就听的师傅的，别的都不听。</p><p><img src="/media/sun.jpg" width="100"></p><p>ie6等低版本浏览器不支持固定定位。</p><h2 id="叠放次序（z-index）"><a href="#叠放次序（z-index）" class="headerlink" title="叠放次序（z-index）"></a>叠放次序（z-index）</h2><p>当对多个元素同时设置定位时，定位元素之间有可能会发生重叠。</p><p><img src="/media/zzz.png"></p><p>在CSS中，要想调整重叠定位元素的堆叠顺序，可以对定位元素应用z-index层叠等级属性，其取值可为正整数、负整数和0。</p><p>比如：  z-index: 2;</p><p>注意：</p><ol><li><p>z-index的默认属性值是0，取值越大，定位元素在层叠元素中越居上。</p></li><li><p>如果取值相同，则根据书写顺序，后来居上。</p></li><li><p>后面数字一定不能加单位。</p></li><li><p>只有相对定位，绝对定位，固定定位有此属性，其余标准流，浮动，静态定位都无此属性，亦不可指定此属性。</p></li></ol><h1 id="四种定位总结"><a href="#四种定位总结" class="headerlink" title="四种定位总结"></a>四种定位总结</h1><table><thead><tr><th>定位模式</th><th>是否脱标占有位置</th><th>是否可以使用边偏移</th><th>移动位置基准</th></tr></thead><tbody><tr><td>静态static</td><td>不脱标，正常模式</td><td>不可以</td><td>正常模式</td></tr><tr><td>相对定位relative</td><td>不脱标，占有位置</td><td>可以</td><td>相对自身位置移动（自恋型）</td></tr><tr><td>绝对定位absolute</td><td>完全脱标，不占有位置</td><td>可以</td><td>相对于定位父级移动位置（拼爹型）</td></tr><tr><td>固定定位fixed</td><td>完全脱标，不占有位置</td><td>可以</td><td>相对于浏览器移动位置（认死理型）</td></tr></tbody></table><h1 id="定位模式转换"><a href="#定位模式转换" class="headerlink" title="定位模式转换"></a>定位模式转换</h1><p>跟 浮动一样， 元素添加了 绝对定位和固定定位之后， 元素模式也会发生转换， 都转换为 行内块模式，</p><p><strong> 因此 比如 行内元素 如果添加了 绝对定位或者 固定定位后 浮动后，可以不用转换模式，直接给高度和宽度就可以了。</strong></p><h1 id="元素的显示与隐藏"><a href="#元素的显示与隐藏" class="headerlink" title="元素的显示与隐藏"></a>元素的显示与隐藏</h1><p>在CSS中有三个显示和隐藏的单词比较常见，我们要区分开，他们分别是 display visibility 和 overflow。</p><p>他们的主要目的是让一个元素在页面中消失，但是不在文档源码中删除。 最常见的是网站广告，当我们点击类似关闭不见了，但是我们重新刷新页面，它们又会出现和你玩躲猫猫！！</p><h2 id="display-显示"><a href="#display-显示" class="headerlink" title="display 显示"></a>display 显示</h2><p>display 设置或检索对象是否及如何显示。</p><p>display : none 隐藏对象 与它相反的是 display:block 除了转换为块级元素之外，同时还有显示元素的意思。</p><p>特点： 隐藏之后，不再保留位置。</p><h2 id="visibility-可见性"><a href="#visibility-可见性" class="headerlink" title="visibility 可见性"></a>visibility 可见性</h2><p>设置或检索是否显示对象。</p><p>visible : 　对象可视</p><p>hidden : 　对象隐藏</p><p>特点： 隐藏之后，继续保留原有位置。（停职留薪）</p><h2 id="overflow-溢出"><a href="#overflow-溢出" class="headerlink" title="overflow 溢出"></a>overflow 溢出</h2><p>检索或设置当对象的内容超过其指定高度及宽度时如何管理内容。</p><p>visible : 　不剪切内容也不添加滚动条。</p><p>auto : 　 超出自动显示滚动条，不超出不显示滚动条</p><p>hidden : 　不显示超过对象尺寸的内容，超出的部分隐藏掉</p><p>scroll : 　不管超出内容否，总是显示滚动条</p><h1 id="CSS高级技巧"><a href="#CSS高级技巧" class="headerlink" title="CSS高级技巧"></a>CSS高级技巧</h1><h2 id="CSS用户界面样式"><a href="#CSS用户界面样式" class="headerlink" title="CSS用户界面样式"></a>CSS用户界面样式</h2><p> 所谓的界面样式， 就是更改一些用户操作样式， 比如 更改用户的鼠标样式， 表单轮廓等。但是比如滚动条的样式改动受到了很多浏览器的抵制，因此我们就放弃了。 防止表单域拖拽</p><h3 id="鼠标样式cursor"><a href="#鼠标样式cursor" class="headerlink" title="鼠标样式cursor"></a>鼠标样式cursor</h3><p> 设置或检索在对象上移动的鼠标指针采用何种系统预定义的光标形状。 </p><figure class="highlight html"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">cursor :  default  小白 | pointer  小手  | move  移动  |  text  文本</span><br></pre></td></tr></table></figure><p> 鼠标放我身上查看效果哦：</p><figure class="highlight html"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">ul</span>&gt;</span></span><br><span class="line">  <span class="tag">&lt;<span class="name">li</span> <span class="attr">style</span>=<span class="string">"cursor:default"</span>&gt;</span>我是小白<span class="tag">&lt;/<span class="name">li</span>&gt;</span></span><br><span class="line">  <span class="tag">&lt;<span class="name">li</span> <span class="attr">style</span>=<span class="string">"cursor:pointer"</span>&gt;</span>我是小手<span class="tag">&lt;/<span class="name">li</span>&gt;</span></span><br><span class="line">  <span class="tag">&lt;<span class="name">li</span> <span class="attr">style</span>=<span class="string">"cursor:move"</span>&gt;</span>我是移动<span class="tag">&lt;/<span class="name">li</span>&gt;</span></span><br><span class="line">  <span class="tag">&lt;<span class="name">li</span> <span class="attr">style</span>=<span class="string">"cursor:text"</span>&gt;</span>我是文本<span class="tag">&lt;/<span class="name">li</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">ul</span>&gt;</span></span><br></pre></td></tr></table></figure><p> 尽量不要用hand  因为 火狐不支持     pointer ie6以上都支持的尽量用</p><h3 id="轮廓-outline"><a href="#轮廓-outline" class="headerlink" title="轮廓 outline"></a>轮廓 outline</h3><p> 是绘制于元素周围的一条线，位于边框边缘的外围，可起到突出元素的作用。</p><figure class="highlight"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">outline : outline-color ||outline-style || outline-width</span><br></pre></td></tr></table></figure><p> 但是我们都不关心可以设置多少，我们平时都是去掉的。</p><p>最直接的写法是 ：  outline: 0; </p><figure class="highlight html"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">input</span>  <span class="attr">type</span>=<span class="string">"text"</span>  <span class="attr">style</span>=<span class="string">"outline: 0;"</span>/&gt;</span></span><br></pre></td></tr></table></figure><h3 id="防止拖拽文本域resize"><a href="#防止拖拽文本域resize" class="headerlink" title="防止拖拽文本域resize"></a>防止拖拽文本域resize</h3><p>resize：none    这个单词可以防止 火狐 谷歌等浏览器随意的拖动 文本域。</p><p>右下角可以拖拽： </p><textarea></textarea><p>右下角不可以拖拽： </p><figure class="highlight html"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">textarea</span>  <span class="attr">style</span>=<span class="string">"resize: none;"</span>&gt;</span><span class="tag">&lt;/<span class="name">textarea</span>&gt;</span></span><br></pre></td></tr></table></figure><h2 id="vertical-align-垂直对齐"><a href="#vertical-align-垂直对齐" class="headerlink" title="vertical-align 垂直对齐"></a>vertical-align 垂直对齐</h2><p>以前我们讲过让带有宽度的块级元素居中对齐，是margin: 0 auto;</p><p>以前我们还讲过让文字居中对齐，是 text-align: center;</p><p>但是我们从来没有讲过有垂直居中的属性， 我们的妈妈一直很担心我们的垂直居中怎么做。</p><p>vertical-align 垂直对齐， 这个看上去很美好的一个属性， 实际有着不可捉摸的脾气，否则我们也不会这么晚来讲解。</p><p><img src="/media/1.jpg"></p><figure class="highlight"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">vertical-align : baseline |top |middle |bottom</span><br></pre></td></tr></table></figure><p>设置或检索对象内容的垂直对其方式。 </p><p><img src="/media/1498467742995.png" alt="1498467742995"></p><p>vertical-align 不影响块级元素中的内容对齐，它只针对于 行内元素或者行内块元素，特别是行内块元素， 通常用来控制图片和表单等。</p><h3 id="图片和文字对齐"><a href="#图片和文字对齐" class="headerlink" title="图片和文字对齐"></a>图片和文字对齐</h3><p>所以我们知道，我们可以通过vertical-align 控制图片和文字的垂直关系了。 默认的图片会和文字基线对齐。</p><h3 id="去除图片底侧空白缝隙"><a href="#去除图片底侧空白缝隙" class="headerlink" title="去除图片底侧空白缝隙"></a>去除图片底侧空白缝隙</h3><p>有个很重要特性你要记住： 如果一个元素没有基线，比如图片或者表单等行内块元素，则他的底线会和父级盒子的基线对齐。 这样会造成一个问题，就是图片底侧会有一个空白缝隙。</p><p><img src="/media/3.jpg"></p><p>解决的方法就是：  </p><ol><li>给img vertical-align:middle | top等等。  让图片不要和基线对齐。<img src="/media/1633.png" width="500" style="border: 1px dashed #ccc;"></li></ol><ol><li>给img 添加 display：block; 转换为块级元素就不会存在问题了。<img src="/media/sina1.png" width="500" style="border: 1px dashed #ccc;"></li></ol><h1 id="溢出的文字隐藏"><a href="#溢出的文字隐藏" class="headerlink" title="溢出的文字隐藏"></a>溢出的文字隐藏</h1><h2 id="word-break-自动换行"><a href="#word-break-自动换行" class="headerlink" title="word-break:自动换行"></a>word-break:自动换行</h2><p>normal   使用浏览器默认的换行规则。</p><p>break-all   允许在单词内换行。</p><p>keep-all    只能在半角空格或连字符处换行。</p><h2 id="text-overflow-文字溢出"><a href="#text-overflow-文字溢出" class="headerlink" title="text-overflow 文字溢出"></a>text-overflow 文字溢出</h2><p>text-overflow : clip | ellipsis</p><p>设置或检索是否使用一个省略标记（…）标示对象内文本的溢出</p><p>clip : 　不显示省略标记（…），而是简单的裁切 </p><p>ellipsis : 　当对象内文本溢出时显示省略标记（…）</p><h2 id="CSS精灵技术（sprite）"><a href="#CSS精灵技术（sprite）" class="headerlink" title="CSS精灵技术（sprite）"></a>CSS精灵技术（sprite）</h2><h3 id="精灵技术产生的背景"><a href="#精灵技术产生的背景" class="headerlink" title="精灵技术产生的背景"></a>精灵技术产生的背景</h3><p><img src="/media/s.png"></p><p>图所示为网页的请求原理图，当用户访问一个网站时，需要向服务器发送请求，网页上的每张图像都要经过一次请求才能展现给用户。</p><p>然而，一个网页中往往会应用很多小的背景图像作为修饰，当网页中的图像过多时，服务器就会频繁地接受和发送请求，这将大大降低页面的加载速度。为了有效地减少服务器接受和发送请求的次数，提高页面的加载速度，出现了CSS精灵技术（也称CSS Sprites、CSS雪碧）。</p><h3 id="精灵技术本质"><a href="#精灵技术本质" class="headerlink" title="精灵技术本质"></a>精灵技术本质</h3><p>简单地说，CSS精灵是一种处理网页背景图像的方式。它将一个页面涉及到的所有零星背景图像都集中到一张大图中去，然后将大图应用于网页，这样，当用户访问该页面时，只需向服务发送一次请求，网页中的背景图像即可全部展示出来。通常情况下，这个由很多小的背景图像合成的大图被称为精灵图，如下图所示为京东网站中的一个精灵图。</p><p><img src="/media/jd.png" style="border: 1px dashed #ccc;"></p><h3 id="精灵技术的使用"><a href="#精灵技术的使用" class="headerlink" title="精灵技术的使用"></a>精灵技术的使用</h3><p>CSS 精灵其实是将网页中的一些背景图像整合到一张大图中（精灵图），然而，各个网页元素通常只需要精灵图中不同位置的某个小图，要想精确定位到精灵图中的某个小图，就需要使用CSS的background-image、background-repeat和background-position属性进行背景定位，其中最关键的是使用background-position属性精确地定位。</p><h3 id="制作精灵图"><a href="#制作精灵图" class="headerlink" title="制作精灵图"></a>制作精灵图</h3><p>CSS 精灵其实是将网页中的一些背景图像整合到一张大图中（精灵图），那我们要做的，就是把小图拼合成一张大图。</p><p>大部分情况下，精灵图都是网页美工做。</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line">我们精灵图上放的都是小的装饰性质的背景图片。 插入图片不能往上放。</span><br><span class="line">我们精灵图的宽度取决于最宽的那个背景。 </span><br><span class="line">我们可以横向摆放也可以纵向摆放，但是每个图片之间，间隔至少隔开偶数像素合适。</span><br><span class="line">在我们精灵图的最低端，留一片空隙，方便我们以后添加其他精灵图。</span><br></pre></td></tr></table></figure><p>结束语：   小公司，背景图片很少的情况，没有必要使用精灵技术，维护成本太高。 如果是背景图片比较多，可以建议使用精灵技术。</p><h2 id="字体图标"><a href="#字体图标" class="headerlink" title="字体图标"></a>字体图标</h2><p>图片是有诸多优点的，但是缺点很明显，比如图片不但增加了总文件的大小，还增加了很多额外的”http请求”，这都会大大降低网页的性能的。更重要的是图片不能很好的进行“缩放”，因为图片放大和缩小会失真。 我们后面会学习移动端响应式，很多情况下希望我们的图标是可以缩放的。此时，一个非常重要的技术出现了，额不是出现了，是以前就有，是被从新”宠幸”啦。。 这就是字体图标（iconfont).</p><h3 id="字体图标优点"><a href="#字体图标优点" class="headerlink" title="字体图标优点"></a>字体图标优点</h3><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line">可以做出跟图片一样可以做的事情,改变透明度、旋转度，等..</span><br><span class="line">但是本质其实是文字，可以很随意的改变颜色、产生阴影、透明效果等等...</span><br><span class="line">本身体积更小，但携带的信息并没有削减。</span><br><span class="line">几乎支持所有的浏览器</span><br><span class="line">移动端设备必备良药...</span><br></pre></td></tr></table></figure><h3 id="字体图标使用流程"><a href="#字体图标使用流程" class="headerlink" title="字体图标使用流程"></a>字体图标使用流程</h3><p>总体来说，字体图标按照如下流程：</p><p><img src="/media/fontt.png"></p><h4 id="设计字体图标"><a href="#设计字体图标" class="headerlink" title="设计字体图标"></a>设计字体图标</h4><p>假如图标是我们公司单独设计，那就需要第一步了，这个属于UI设计人员的工作， 他们在 illustrator 或 Sketch 这类矢量图形软件里创建 icon图标， 比如下图：</p><p><img src="/media/03.jpg"></p><p>  之后保存为svg格式，然后给我们前端人员就好了。 </p><p>  其实第一步，我们不需要关心，只需要给我们这些图标就可以了，如果图标是大众的，网上本来就有的，可以直接跳过第一步，进入第三步。</p><h4 id="上传生成字体包"><a href="#上传生成字体包" class="headerlink" title="上传生成字体包"></a>上传生成字体包</h4><p>   当UI设计人员给我们svg文件的时候，我们需要转换成我们页面能使用的字体文件， 而且需要生成的是兼容性的适合各个浏览器的。</p><p>​    推荐网站： <a href="http://icomoon.io" target="_blank" rel="noopener">http://icomoon.io</a></p><p><strong>icomoon字库</strong></p><p>IcoMoon成立于2011年，推出的第一个自定义图标字体生成器，它允许用户选择他们所需要的图标，使它们成一字型。 内容种类繁多，非常全面，唯一的遗憾是国外服务器，打开网速较慢。</p><p>   推荐网站： <a href="http://www.iconfont.cn/" target="_blank" rel="noopener">http://www.iconfont.cn/</a></p><p><strong>阿里icon font字库</strong></p><p><a href="http://www.iconfont.cn/" target="_blank" rel="noopener">http://www.iconfont.cn/</a></p><p>这个是阿里妈妈M2UX的一个icon font字体图标字库，包含了淘宝图标库和阿里妈妈图标库。可以使用AI制作图标上传生成。 一个字，免费，免费！！</p><p><strong>fontello</strong></p><p><a href="http://fontello.com/" target="_blank" rel="noopener">http://fontello.com/</a></p><p>在线定制你自己的icon font字体图标字库，也可以直接从GitHub下载整个图标集，该项目也是开源的。</p><p><strong>Font-Awesome</strong></p><p><a href="http://fortawesome.github.io/Font-Awesome/" target="_blank" rel="noopener">http://fortawesome.github.io/Font-Awesome/</a></p><p>这是我最喜欢的字库之一了，更新比较快。目前已经有369个图标了。</p><p><strong>Glyphicon Halflings</strong></p><p><a href="http://glyphicons.com/" target="_blank" rel="noopener">http://glyphicons.com/</a></p><p>这个字体图标可以在Bootstrap下免费使用。自带了200多个图标。</p><p><strong>Icons8</strong></p><p><a href="https://icons8.com/" target="_blank" rel="noopener">https://icons8.com/</a></p><p>提供PNG免费下载，像素大能到500PX</p><h4 id="下载兼容字体包"><a href="#下载兼容字体包" class="headerlink" title="下载兼容字体包"></a>下载兼容字体包</h4><p>刚才上传完毕， 网站会给我们把UI做的svg图片转换为我们的字体格式， 然后下载下来就好了</p><p>当然，我们不需要自己专门的图标，是想网上找几个图标使用，以上2步可以直接省略了， 直接到刚才的网站上找喜欢的下载使用吧。</p><p><img src="/media/fontt1.png"></p><p><img src="/media/fontt2.png"></p><h4 id="字体引入到HTML"><a href="#字体引入到HTML" class="headerlink" title="字体引入到HTML"></a>字体引入到HTML</h4><p>最后一步，是最重要的一步了， 就是字体文件已经有了，我们需要引入到我们页面中。</p><ol><li><p>首先把 以下4个文件放入到 fonts文件夹里面。 通俗的做法</p><p><img src="/media/1498032122244.png" alt="1498032122244"></p><h3 id="第一步：引入项目下面生成的fontclass代码："><a href="#第一步：引入项目下面生成的fontclass代码：" class="headerlink" title="第一步：引入项目下面生成的fontclass代码："></a>第一步：引入项目下面生成的fontclass代码：</h3><figure class="highlight html"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">link</span> <span class="attr">rel</span>=<span class="string">"stylesheet"</span> <span class="attr">type</span>=<span class="string">"text/CSS"</span> <span class="attr">href</span>=<span class="string">"./iconfont.CSS"</span>&gt;</span></span><br></pre></td></tr></table></figure><h3 id="第二步：挑选相应图标并获取类名，应用于页面："><a href="#第二步：挑选相应图标并获取类名，应用于页面：" class="headerlink" title="第二步：挑选相应图标并获取类名，应用于页面："></a>第二步：挑选相应图标并获取类名，应用于页面：</h3><figure class="highlight html"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">i</span> <span class="attr">class</span>=<span class="string">"iconfont icon-xxx"</span>&gt;</span><span class="tag">&lt;/<span class="name">i</span>&gt;</span></span><br></pre></td></tr></table></figure></li></ol><h2 id="滑动门"><a href="#滑动门" class="headerlink" title="滑动门"></a>滑动门</h2><p>先来体会下现实中的滑动门,或者你可以叫做推拉门：</p><p><img src="/media/h.gif"></p><h3 id="滑动门出现的背景"><a href="#滑动门出现的背景" class="headerlink" title="滑动门出现的背景"></a>滑动门出现的背景</h3><p>制作网页时，为了美观，常常需要为网页元素设置特殊形状的背景，比如微信导航栏，有凸起和凹下去的感觉，最大的问题是里面的字数不一样多，咋办？</p><p><img src="/media/wxx.jpg"></p><p>为了使各种特殊形状的背景能够自适应元素中文本内容的多少，出现了CSS滑动门技术。它从新的角度构建页面，使各种特殊形状的背景能够自由拉伸滑动，以适应元素内部的文本内容，可用性更强。 最常见于各种导航栏的滑动门。</p><h3 id="核心技术"><a href="#核心技术" class="headerlink" title="核心技术"></a>核心技术</h3><p>核心技术就是利用CSS精灵（主要是背景位置）和盒子padding撑开宽度, 以便能适应不同字数的导航栏。</p><p>一般的经典布局都是这样的：</p><figure class="highlight html"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">li</span>&gt;</span></span><br><span class="line">  <span class="tag">&lt;<span class="name">a</span> <span class="attr">href</span>=<span class="string">"#"</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">span</span>&gt;</span>导航栏内容<span class="tag">&lt;/<span class="name">span</span>&gt;</span></span><br><span class="line">  <span class="tag">&lt;/<span class="name">a</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">li</span>&gt;</span></span><br></pre></td></tr></table></figure><p>总结： </p><ol><li>a 设置 背景左侧，padding撑开合适宽度。    </li><li>span 设置背景右侧， padding撑开合适宽度 剩下由文字继续撑开宽度。</li><li>之所以a包含span就是因为 整个导航都是可以点击的。</li></ol><h2 id="伸缩布局-CSS3"><a href="#伸缩布局-CSS3" class="headerlink" title="伸缩布局(CSS3)"></a>伸缩布局(CSS3)</h2><p>CSS3在布局方面做了非常大的改进，使得我们对块级元素的布局排列变得十分灵活，适应性非常强，其强大的伸缩性，在响应式开中可以发挥极大的作用。</p><p>主轴：Flex容器的主轴主要用来配置Flex项目，默认是水平方向</p><p>侧轴：与主轴垂直的轴称作侧轴，默认是垂直方向的</p><p>方向：默认主轴从左向右，侧轴默认从上到下</p><p>主轴和侧轴并不是固定不变的，通过flex-direction可以互换。</p><p><img src="/media/1498441839910.png" alt="1498441839910"></p><p>Flex布局的语法规范经过几年发生了很大的变化，也给Flexbox的使用带来一定的局限性，因为语法规范版本众多，浏览器支持不一致，致使Flexbox布局使用不多</p><p><strong>2、各属性详解<em>**</em></strong></p><p>a、flex-direction调整主轴方向（默认为水平方向）</p><p>b、justify-content调整主轴对齐</p><p>c、align-items调整侧轴对齐</p><p>d、flex-wrap控制是否换行</p><p>e、align-content堆栈（由flex-wrap产生的独立行）对齐</p><p>f、flex-flow是flex-direction、flex-wrap的简写形式</p><p>g、flex子项目在主轴的缩放比例，不指定flex属性，则不参与伸缩分配</p><p>h、order控制子项目的排列顺序，正序方式排序，从小到大</p><p>此知识点重在理解，要明确找出主轴、侧轴、方向，各属性对应的属性值</p><h1 id="before和after伪元素"><a href="#before和after伪元素" class="headerlink" title="before和after伪元素"></a>before和after伪元素</h1><h2 id="过渡-CSS3"><a href="#过渡-CSS3" class="headerlink" title="过渡(CSS3)"></a>过渡(CSS3)</h2><p>过渡（transition)是CSS3中具有颠覆性的特征之一，我们可以在不使用 Flash 动画或 JavaScript 的情况下，当元素从一种样式变换为另一种样式时为元素添加效果。</p><p>帧动画：通过一帧一帧的画面按照固定顺序和速度播放。如电影胶片</p><p><img src="/media/1498445034712.png" alt="1498445034712"></p><p><img src="/media/zhen.gif"></p><p>在CSS3里使用transition可以实现补间动画（过渡效果），并且当前元素只要有“属性”发生变化时即存在两种状态(我们用A和B代指），就可以实现平滑的过渡，为了方便演示采用hover切换两种状态，但是并不仅仅局限于hover状态来实现过渡。</p><p>语法格式:</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">transition: 要过渡的属性  花费时间  运动曲线  何时开始;</span><br></pre></td></tr></table></figure><table><thead><tr><th>属性</th><th>描述</th><th>CSS</th></tr></thead><tbody><tr><td>transition</td><td>简写属性，用于在一个属性中设置四个过渡属性。</td><td>3</td></tr><tr><td>transition-property</td><td>规定应用过渡的 CSS 属性的名称。</td><td>3</td></tr><tr><td>transition-duration</td><td>定义过渡效果花费的时间。默认是 0。</td><td>3</td></tr><tr><td>transition-timing-function</td><td>规定过渡效果的时间曲线。默认是 “ease”。</td><td>3</td></tr><tr><td>transition-delay</td><td>规定过渡效果何时开始。默认是 0。</td><td>3</td></tr></tbody></table><p>运动曲线示意图：</p><p><img src="/media/1498445454760.png" alt="1498445454760"></p><figure class="highlight css"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><span class="line"><span class="selector-tag">img</span> &#123;</span><br><span class="line">  <span class="attribute">width</span>:<span class="number">80px</span>; <span class="attribute">height</span>: <span class="number">80px</span>; <span class="attribute">border</span>:<span class="number">8px</span> solid <span class="number">#ccc</span>; <span class="attribute">border-radius</span>: <span class="number">50%</span>;</span><br><span class="line">  <span class="attribute">transition</span>:transform <span class="number">0.5s</span> ease-in <span class="number">0s</span>;</span><br><span class="line">&#125;</span><br><span class="line"><span class="selector-tag">img</span><span class="selector-pseudo">:hover</span> &#123;</span><br><span class="line">  <span class="attribute">transform</span>:<span class="built_in">rotate</span>(180deg);</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h2 id="2D变形-CSS3"><a href="#2D变形-CSS3" class="headerlink" title="2D变形(CSS3)"></a>2D变形(CSS3)</h2><p>转换是CSS3中具有颠覆性的特征之一，可以实现元素的位移、旋转、变形、缩放，甚至支持矩阵方式，配合过渡和即将学习的动画知识，可以取代大量之前只能靠Flash才可以实现的效果。</p><p>变形转换 transform  </p><ul><li>移动 translate(x, y) </li></ul><p><img src="/media/1498443715586.png" alt="1498443715586"></p><figure class="highlight css"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line"><span class="selector-tag">translate</span>(50<span class="selector-tag">px</span>,50<span class="selector-tag">px</span>);</span><br></pre></td></tr></table></figure><p>使用translate方法来将文字或图像在水平方向和垂直方向上分别垂直移动50像素。</p><p>可以改变元素的位置，x、y可为负值；</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line">translate(x,y)水平方向和垂直方向同时移动（也就是X轴和Y轴同时移动）</span><br><span class="line">translateX(x)仅水平方向移动（X轴移动）</span><br><span class="line">translateY(Y)仅垂直方向移动（Y轴移动）</span><br></pre></td></tr></table></figure><figure class="highlight css"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br></pre></td><td class="code"><pre><span class="line"><span class="selector-class">.box</span> &#123;</span><br><span class="line">  <span class="attribute">width</span>: <span class="number">499.9999px</span>;</span><br><span class="line">  <span class="attribute">height</span>: <span class="number">400px</span>;</span><br><span class="line">  <span class="attribute">background</span>: pink;</span><br><span class="line">  <span class="attribute">position</span>: absolute;</span><br><span class="line">  <span class="attribute">left</span>:<span class="number">50%</span>;</span><br><span class="line">  <span class="attribute">top</span>:<span class="number">50%</span>;</span><br><span class="line">  <span class="attribute">transform</span>:<span class="built_in">translate</span>(-50%,-50%);  <span class="comment">/* 走的自己的一半 */</span></span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p> 让定位的盒子水平居中</p><ul><li>缩放 scale(x, y) </li></ul><p><img src="/media/1498444645795.png" alt="1498444645795"></p><figure class="highlight css"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line"><span class="selector-tag">transform</span><span class="selector-pseudo">:scale(0.8</span>,1);</span><br></pre></td></tr></table></figure><p>可以对元素进行水平和垂直方向的缩放。该语句使用scale方法使该元素在水平方向上缩小了20%，垂直方向上不缩放。</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line">scale(X,Y)使元素水平方向和垂直方向同时缩放（也就是X轴和Y轴同时缩放）</span><br><span class="line">scaleX(x)元素仅水平方向缩放（X轴缩放）</span><br><span class="line">scaleY(y)元素仅垂直方向缩放（Y轴缩放）</span><br></pre></td></tr></table></figure><p> scale()的取值默认的值为1，当值设置为0.01到0.99之间的任何值，作用使一个元素缩小；而任何大于或等于1.01的值，作用是让元素放大</p><ul><li>旋转 rotate(deg) </li></ul><p>可以对元素进行旋转，正值为顺时针，负值为逆时针；</p><p><img src="/media/1498443651293.png" alt="1498443651293"></p><figure class="highlight css"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line"><span class="selector-tag">transform</span><span class="selector-pseudo">:rotate(45deg)</span>;</span><br></pre></td></tr></table></figure><ol><li>当元素旋转以后，坐标轴也跟着发生的转变</li><li>调整顺序可以解决，把旋转放到最后</li><li>注意单位是 deg 度数</li></ol><p>案例旋转扑克牌</p><figure class="highlight css"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br></pre></td><td class="code"><pre><span class="line"><span class="selector-tag">body</span> &#123;</span><br><span class="line">  <span class="attribute">background-color</span>: skyblue;</span><br><span class="line">&#125;</span><br><span class="line"><span class="selector-class">.container</span> &#123;</span><br><span class="line">  <span class="attribute">width</span>: <span class="number">100px</span>;</span><br><span class="line">  <span class="attribute">height</span>: <span class="number">150px</span>;</span><br><span class="line">  <span class="attribute">border</span>: <span class="number">1px</span> solid gray;</span><br><span class="line">  <span class="attribute">margin</span>: <span class="number">300px</span> auto;</span><br><span class="line">  <span class="attribute">position</span>: relative;</span><br><span class="line">&#125;</span><br><span class="line"><span class="selector-class">.container</span> &gt; <span class="selector-tag">img</span> &#123;</span><br><span class="line">  <span class="attribute">display</span>: block;</span><br><span class="line">  <span class="attribute">width</span>: <span class="number">100%</span>;</span><br><span class="line">  <span class="attribute">height</span>: <span class="number">100%</span>;</span><br><span class="line">  <span class="attribute">position</span>: absolute;</span><br><span class="line">  <span class="attribute">transform-origin</span>: top right;</span><br><span class="line">  <span class="comment">/* 添加过渡 */</span></span><br><span class="line">  <span class="attribute">transition</span>: all <span class="number">1s</span>;</span><br><span class="line">&#125;</span><br><span class="line"><span class="selector-class">.container</span><span class="selector-pseudo">:hover</span> <span class="selector-tag">img</span><span class="selector-pseudo">:nth-child(1)</span> &#123;</span><br><span class="line">  <span class="attribute">transform</span>: <span class="built_in">rotate</span>(60deg);</span><br><span class="line">&#125;</span><br><span class="line"><span class="selector-class">.container</span><span class="selector-pseudo">:hover</span> <span class="selector-tag">img</span><span class="selector-pseudo">:nth-child(2)</span> &#123;</span><br><span class="line">  <span class="attribute">transform</span>: <span class="built_in">rotate</span>(120deg);</span><br><span class="line">&#125;</span><br><span class="line"><span class="selector-class">.container</span><span class="selector-pseudo">:hover</span> <span class="selector-tag">img</span><span class="selector-pseudo">:nth-child(3)</span> &#123;</span><br><span class="line">  <span class="attribute">transform</span>: <span class="built_in">rotate</span>(180deg);</span><br><span class="line">&#125;</span><br><span class="line"><span class="selector-class">.container</span><span class="selector-pseudo">:hover</span> <span class="selector-tag">img</span><span class="selector-pseudo">:nth-child(4)</span> &#123;</span><br><span class="line">  <span class="attribute">transform</span>: <span class="built_in">rotate</span>(240deg);</span><br><span class="line">&#125;</span><br><span class="line"><span class="selector-class">.container</span><span class="selector-pseudo">:hover</span> <span class="selector-tag">img</span><span class="selector-pseudo">:nth-child(5)</span> &#123;</span><br><span class="line">  <span class="attribute">transform</span>: <span class="built_in">rotate</span>(300deg);</span><br><span class="line">&#125;</span><br><span class="line"><span class="selector-class">.container</span><span class="selector-pseudo">:hover</span> <span class="selector-tag">img</span><span class="selector-pseudo">:nth-child(6)</span> &#123;</span><br><span class="line">  <span class="attribute">transform</span>: <span class="built_in">rotate</span>(360deg);</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><ul><li>倾斜 skew(deg, deg) </li></ul><p><img src="/media/1498443827389.png" alt="1498443827389"></p><figure class="highlight css"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line"><span class="selector-tag">transform</span><span class="selector-pseudo">:skew(30deg</span>,0<span class="selector-tag">deg</span>);</span><br></pre></td></tr></table></figure><p>该实例通过skew方法把元素水平方向上倾斜30度，处置方向保持不变。</p><p>可以使元素按一定的角度进行倾斜，可为负值，第二个参数不写默认为0。</p><p>5.transform-origin可以调整元素转换的原点</p><p><img src="/media/1498443912530.png" alt="1498443912530"></p><figure class="highlight css"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line"><span class="selector-tag">div</span>&#123;<span class="attribute">transform-origin</span>: left top;<span class="attribute">transform</span>: <span class="built_in">rotate</span>(45deg); &#125;  <span class="comment">/* 改变元素原点到左上角，然后进行顺时旋转45度 */</span></span><br></pre></td></tr></table></figure><p>案例：  菱形照片        三角盒子  </p><h2 id="3D变形"><a href="#3D变形" class="headerlink" title="3D变形"></a>3D变形</h2><p>左手坐标系</p><p>伸出左手，让拇指和食指成“L”形，大拇指向右，食指向上，中指指向前方。这样我们就建立了一个左手坐标系，拇指、食指和中指分别代表X、Y、Z轴的正方向。如下图</p><p><img src="/media/1498445587576.png" alt="1498445587576"></p><p>CSS3中的3D坐标系与上述的3D坐标系是有一定区别的，相当于其绕着X轴旋转了180度，如下图</p><p><img src="/media/1498459001951.png" alt="1498459001951"></p><h3 id="rotateX"><a href="#rotateX" class="headerlink" title="rotateX()"></a>rotateX()</h3><p> 就是沿着 x 立体旋转.</p><p><img src="/media/1498445756802.png" alt="1498445756802"></p><figure class="highlight css"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><span class="line"><span class="selector-tag">img</span> &#123;</span><br><span class="line">  <span class="attribute">transition</span>:all <span class="number">0.5s</span> ease <span class="number">0s</span>;</span><br><span class="line">&#125;</span><br><span class="line"><span class="selector-tag">img</span><span class="selector-pseudo">:hove</span> &#123;</span><br><span class="line"></span><br><span class="line">  <span class="attribute">transform</span>:<span class="built_in">rotateX</span>(180deg);</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h3 id="rotateY"><a href="#rotateY" class="headerlink" title="rotateY()"></a>rotateY()</h3><p>沿着y轴进行旋转</p><p><img src="/media/1498446043198.png" alt="1498446043198"></p><figure class="highlight css"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><span class="line"><span class="selector-tag">img</span> &#123;</span><br><span class="line">  <span class="attribute">transition</span>:all <span class="number">0.5s</span> ease <span class="number">0s</span>;</span><br><span class="line">&#125;</span><br><span class="line"><span class="selector-tag">img</span><span class="selector-pseudo">:hove</span> &#123;</span><br><span class="line"></span><br><span class="line">  <span class="attribute">transform</span>:<span class="built_in">rotateX</span>(180deg);</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h3 id="rotateZ-"><a href="#rotateZ-" class="headerlink" title="rotateZ()"></a>rotateZ()</h3><p>沿着z轴进行旋转</p><figure class="highlight css"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br></pre></td><td class="code"><pre><span class="line"><span class="selector-tag">img</span> &#123;</span><br><span class="line">  <span class="attribute">transition</span>:all .<span class="number">25s</span> ease-in <span class="number">0s</span>;</span><br><span class="line">&#125;</span><br><span class="line"><span class="selector-tag">img</span><span class="selector-pseudo">:hover</span> &#123;</span><br><span class="line">  <span class="comment">/* transform:rotateX(180deg); */</span></span><br><span class="line">  <span class="comment">/* transform:rotateY(180deg); */</span></span><br><span class="line">  <span class="comment">/* transform:rotateZ(180deg); */</span></span><br><span class="line">  <span class="comment">/* transform:rotateX(45deg) rotateY(180deg) rotateZ(90deg) skew(0,10deg); */</span></span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h3 id="透视-perspective"><a href="#透视-perspective" class="headerlink" title="透视(perspective)"></a>透视(perspective)</h3><p>电脑显示屏是一个2D平面，图像之所以具有立体感（3D效果），其实只是一种视觉呈现，通过透视可以实现此目的。</p><p>透视可以将一个2D平面，在转换的过程当中，呈现3D效果。</p><p>注：并非任何情况下需要透视效果，根据开发需要进行设置。</p><p>perspective有两种写法</p><ol><li>作为一个属性，设置给父元素，作用于所有3D转换的子元素</li><li>作为transform属性的一个值，做用于元素自身</li></ol><p>理解透视距离原理：</p><p><img src="/media/1498446715314.png" alt="1498446715314"></p><h3 id="开门案例"><a href="#开门案例" class="headerlink" title="开门案例"></a>开门案例</h3><figure class="highlight css"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br></pre></td><td class="code"><pre><span class="line"><span class="selector-tag">body</span> &#123;</span><br><span class="line">&#125;</span><br><span class="line"><span class="selector-class">.door</span> &#123;</span><br><span class="line">  <span class="attribute">width</span>: <span class="number">300px</span>;</span><br><span class="line">  <span class="attribute">height</span>: <span class="number">300px</span>;</span><br><span class="line">  <span class="attribute">margin</span>: <span class="number">100px</span> auto;</span><br><span class="line">  <span class="attribute">border</span>: <span class="number">1px</span> solid gray;</span><br><span class="line">  <span class="attribute">perspective</span>: <span class="number">1000px</span>;</span><br><span class="line">  <span class="attribute">background</span>: <span class="built_in">url</span>(<span class="string">'images/dog.gif'</span>) no-repeat center/cover;</span><br><span class="line">  <span class="attribute">position</span>: relative;</span><br><span class="line">&#125;</span><br><span class="line"><span class="selector-class">.door</span> &gt; <span class="selector-tag">div</span> &#123;</span><br><span class="line">  <span class="attribute">box-sizing</span>: border-box;</span><br><span class="line">  <span class="attribute">border</span>: <span class="number">1px</span> solid black;</span><br><span class="line">&#125;</span><br><span class="line"><span class="selector-class">.left</span> &#123;</span><br><span class="line">  <span class="attribute">float</span>: left;</span><br><span class="line">  <span class="attribute">width</span>: <span class="number">50%</span>;</span><br><span class="line">  <span class="attribute">height</span>: <span class="number">100%</span>;</span><br><span class="line">  <span class="attribute">background-color</span>: brown;</span><br><span class="line">  <span class="attribute">transform-origin</span>: left center;</span><br><span class="line">  <span class="attribute">transition</span>: <span class="number">1s</span>;</span><br><span class="line">  <span class="attribute">position</span>: relative;</span><br><span class="line">&#125;</span><br><span class="line"><span class="selector-class">.left</span><span class="selector-pseudo">::before</span> &#123;</span><br><span class="line">  <span class="attribute">content</span>: <span class="string">''</span>;</span><br><span class="line">  <span class="attribute">position</span>: absolute;</span><br><span class="line">  <span class="attribute">width</span>: <span class="number">20px</span>;</span><br><span class="line">  <span class="attribute">height</span>: <span class="number">20px</span>;</span><br><span class="line">  <span class="attribute">border-radius</span>: <span class="number">50%</span>;</span><br><span class="line">  <span class="attribute">top</span>: <span class="number">50%</span>;</span><br><span class="line">  <span class="attribute">right</span>: <span class="number">0px</span>;</span><br><span class="line">  <span class="attribute">transform</span>: <span class="built_in">translateY</span>(-10px);</span><br><span class="line">  <span class="attribute">border</span>: <span class="number">1px</span> solid whitesmoke;</span><br><span class="line">&#125;</span><br><span class="line"><span class="selector-class">.right</span> &#123;</span><br><span class="line">  <span class="attribute">width</span>: <span class="number">50%</span>;</span><br><span class="line">  <span class="attribute">height</span>: <span class="number">100%</span>;</span><br><span class="line">  <span class="attribute">float</span>: left;</span><br><span class="line">  <span class="attribute">background-color</span>: brown;</span><br><span class="line">  <span class="attribute">transform-origin</span>: right center;</span><br><span class="line">  <span class="attribute">transition</span>: <span class="number">1s</span>;</span><br><span class="line">  <span class="attribute">position</span>: relative;</span><br><span class="line">&#125;</span><br><span class="line"><span class="selector-class">.right</span><span class="selector-pseudo">::before</span> &#123;</span><br><span class="line">  <span class="attribute">content</span>: <span class="string">''</span>;</span><br><span class="line">  <span class="attribute">position</span>: absolute;</span><br><span class="line">  <span class="attribute">width</span>: <span class="number">20px</span>;</span><br><span class="line">  <span class="attribute">height</span>: <span class="number">20px</span>;</span><br><span class="line">  <span class="attribute">border-radius</span>: <span class="number">50%</span>;</span><br><span class="line">  <span class="attribute">top</span>: <span class="number">50%</span>;</span><br><span class="line">  <span class="attribute">left</span>: <span class="number">0px</span>;</span><br><span class="line">  <span class="attribute">transform</span>: <span class="built_in">translateY</span>(-10px);</span><br><span class="line">  <span class="attribute">border</span>: <span class="number">1px</span> solid whitesmoke;</span><br><span class="line">&#125;</span><br><span class="line"><span class="selector-class">.door</span><span class="selector-pseudo">:hover</span> <span class="selector-class">.left</span> &#123;</span><br><span class="line">  <span class="attribute">transform</span>: <span class="built_in">rotateY</span>(-130deg);</span><br><span class="line">&#125;</span><br><span class="line"><span class="selector-class">.door</span><span class="selector-pseudo">:hover</span> <span class="selector-class">.right</span> &#123;</span><br><span class="line">  <span class="attribute">transform</span>: <span class="built_in">rotateY</span>(130deg);</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h3 id="translateX-x"><a href="#translateX-x" class="headerlink" title="translateX(x)"></a>translateX(x)</h3><p>仅水平方向移动**（X轴移动）</p><p><img src="/media/1498459697576.png" alt="1498459697576"></p><p>主要目的实现移动效果</p><h3 id="translateY-y"><a href="#translateY-y" class="headerlink" title="translateY(y)"></a>translateY(y)</h3><p>仅垂直方向移动（Y轴移动）</p><p><img src="/media/1498459770252.png" alt="1498459770252"></p><h3 id="translateZ-z"><a href="#translateZ-z" class="headerlink" title="translateZ(z)"></a>translateZ(z)</h3><p>transformZ的直观表现形式就是大小变化，实质是XY平面相对于视点的远近变化（说远近就一定会说到离什么参照物远或近，在这里参照物就是perspective属性）。比如设置了perspective为200px;那么transformZ的值越接近200，就是离的越近，看上去也就越大，超过200就看不到了，因为相当于跑到后脑勺去了，我相信你正常情况下，是看不到自己的后脑勺的。</p><h3 id="3D呈现（transform-style）"><a href="#3D呈现（transform-style）" class="headerlink" title="3D呈现（transform-style）"></a>3D呈现（transform-style）</h3><p>设置内嵌的元素在 3D 空间如何呈现，这些子元素必须为转换原素。</p><p>flat：所有子元素在 2D 平面呈现</p><p>preserve-3d：保留3D空间</p><p>3D元素构建是指某个图形是由多个元素构成的，可以给这些元素的父元素设置transform-style: preserve-3d来使其变成一个真正的3D图形。</p><p>一般而言，该声明应用在3D变换的兄弟元素们的父元素上。</p><h3 id="翻转盒子案例-百度钱包"><a href="#翻转盒子案例-百度钱包" class="headerlink" title="翻转盒子案例(百度钱包)"></a>翻转盒子案例(百度钱包)</h3><figure class="highlight css"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br></pre></td><td class="code"><pre><span class="line"><span class="selector-tag">body</span> &#123;</span><br><span class="line">  <span class="attribute">margin</span>: <span class="number">0</span>;</span><br><span class="line">  <span class="attribute">padding</span>: <span class="number">0</span>;</span><br><span class="line">  <span class="attribute">background-color</span>: <span class="number">#B3C04C</span>;</span><br><span class="line"></span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="selector-class">.wallet</span> &#123;</span><br><span class="line">  <span class="attribute">width</span>: <span class="number">300px</span>;</span><br><span class="line">  <span class="attribute">height</span>: <span class="number">300px</span>;</span><br><span class="line">  <span class="attribute">margin</span>: <span class="number">50px</span> auto;</span><br><span class="line">  <span class="attribute">position</span>: relative;</span><br><span class="line">  <span class="attribute">transform-style</span>: preserve-<span class="number">3</span>d;</span><br><span class="line">  <span class="attribute">transition</span>: all <span class="number">0.5s</span>;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="selector-class">.wallet</span><span class="selector-pseudo">::before</span>, <span class="selector-class">.wallet</span><span class="selector-pseudo">::after</span> &#123;</span><br><span class="line">  <span class="attribute">content</span>: <span class="string">''</span>;</span><br><span class="line">  <span class="attribute">position</span>: absolute;</span><br><span class="line">  <span class="attribute">left</span>: <span class="number">0</span>;</span><br><span class="line">  <span class="attribute">top</span>: <span class="number">0</span>;</span><br><span class="line">  <span class="attribute">display</span>: block;</span><br><span class="line">  <span class="attribute">width</span>: <span class="number">100%</span>;</span><br><span class="line">  <span class="attribute">height</span>: <span class="number">100%</span>;</span><br><span class="line">  <span class="attribute">background-image</span>: <span class="built_in">url</span>(./images/bg.png);</span><br><span class="line">  <span class="attribute">background-repeat</span>: no-repeat;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="selector-class">.wallet</span><span class="selector-pseudo">::before</span> &#123;</span><br><span class="line">  <span class="attribute">background-position</span>: right top;</span><br><span class="line">  <span class="attribute">transform</span>: <span class="built_in">rotateY</span>(180deg);</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="selector-class">.wallet</span><span class="selector-pseudo">::after</span> &#123;</span><br><span class="line">  <span class="attribute">background-position</span>: left top;</span><br><span class="line">  <span class="attribute">transform</span>: <span class="built_in">translateZ</span>(2px);</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="selector-class">.wallet</span><span class="selector-pseudo">:hover</span> &#123;</span><br><span class="line">  <span class="attribute">transform</span>: <span class="built_in">rotateY</span>(180deg);</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h2 id="动画-CSS3"><a href="#动画-CSS3" class="headerlink" title="动画(CSS3)"></a>动画(CSS3)</h2><p>动画是CSS3中具有颠覆性的特征之一，可通过设置多个节点来精确控制一个或一组动画，常用来实现复杂的动画效果。</p><p>语法格式：</p><figure class="highlight css"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line"><span class="selector-tag">animation</span>:动画名称 动画时间 运动曲线  何时开始  播放次数  是否反方向;</span><br></pre></td></tr></table></figure><p><img src="/media/1498461096243.png" alt="1498461096243"></p><p>关于几个值，除了名字，动画时间，延时有严格顺序要求其它随意r</p><figure class="highlight css"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line">@<span class="keyword">keyframes</span> 动画名称 &#123;</span><br><span class="line">  from&#123; 开始位置 &#125;  0%</span><br><span class="line">  to&#123;  结束  &#125;  100%</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">animation-iteration-count:infinite;  无限循环播放</span><br><span class="line">animation-play-state:paused;   暂停动画&quot;</span><br></pre></td></tr></table></figure><h3 id="小汽车案例"><a href="#小汽车案例" class="headerlink" title="小汽车案例"></a>小汽车案例</h3><figure class="highlight css"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br></pre></td><td class="code"><pre><span class="line"><span class="selector-tag">body</span> &#123;</span><br><span class="line">  <span class="attribute">background</span>: white;</span><br><span class="line">&#125;</span><br><span class="line"><span class="selector-tag">img</span> &#123;</span><br><span class="line">  <span class="attribute">width</span>: <span class="number">200px</span>;</span><br><span class="line">&#125;</span><br><span class="line"><span class="selector-class">.animation</span> &#123;</span><br><span class="line">  <span class="attribute">animation-name</span>: goback;</span><br><span class="line">  <span class="attribute">animation-duration</span>: <span class="number">5s</span>;</span><br><span class="line">  <span class="attribute">animation-timing-function</span>: ease;</span><br><span class="line">  <span class="attribute">animation-iteration-count</span>: infinite;</span><br><span class="line">&#125;</span><br><span class="line">@<span class="keyword">keyframes</span> goback &#123;</span><br><span class="line">  0%&#123;&#125;</span><br><span class="line">  49%&#123;</span><br><span class="line">    <span class="attribute">transform</span>: <span class="built_in">translateX</span>(1000px);</span><br><span class="line">  &#125;</span><br><span class="line">  55%&#123;</span><br><span class="line">    <span class="attribute">transform</span>: <span class="built_in">translateX</span>(1000px) <span class="built_in">rotateY</span>(180deg);</span><br><span class="line">  &#125;</span><br><span class="line">  95%&#123;</span><br><span class="line">    <span class="attribute">transform</span>: <span class="built_in">translateX</span>(0) <span class="built_in">rotateY</span>(180deg);</span><br><span class="line">  &#125;</span><br><span class="line">  100%&#123;</span><br><span class="line">    <span class="attribute">transform</span>: <span class="built_in">translateX</span>(0) <span class="built_in">rotateY</span>(0deg);</span><br><span class="line">  &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>]]></content>
      
      
      <categories>
          
          <category> Css </category>
          
      </categories>
      
      
        <tags>
            
            <tag> Css笔记 </tag>
            
        </tags>
      
    </entry>
    
    <entry>
      <title>HTML</title>
      <link href="/2017/07/05/01-HTML/"/>
      <url>/2017/07/05/01-HTML/</url>
      
        <content type="html"><![CDATA[<link rel="stylesheet" class="aplayer-secondary-style-marker" href="/assets/css/APlayer.min.css"><script src="/assets/js/APlayer.min.js" class="aplayer-secondary-script-marker"></script><hr><p> 学习目标:</p><ul><li>了解常用浏览器</li><li>掌握WEB标准</li><li>理解标签语义化</li><li>掌握常用的排版标签</li><li>掌握常用的文本格式化图像链接等标签</li><li>掌握三种列表标签</li><li>掌握表格标签</li><li>掌握表格标签</li><li>掌握表单标签</li><li>掌握H5新增表单和表单属性<br>typora-copy-images-to: media</li></ul><hr><h1 id="认识网页"><a href="#认识网页" class="headerlink" title="认识网页"></a>认识网页</h1><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">网页主要由文字、图像和超链接等元素构成。当然，除了这些元素，网页中还可以包含音频、视频以及Flash等。</span><br></pre></td></tr></table></figure><p><img src="/media/mi.png"></p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">思考：  网页是如何形成的呢?</span><br></pre></td></tr></table></figure><p><img src="/media/web.png"></p><h1 id="常见浏览器介绍"><a href="#常见浏览器介绍" class="headerlink" title="常见浏览器介绍"></a>常见浏览器介绍</h1><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">浏览器是网页运行的平台，常用的浏览器有IE、火狐（Firefox）、谷歌（Chrome）、Safari和Opera等。我们平时称为五大浏览器。</span><br></pre></td></tr></table></figure><p><img src="/media/b.png"></p><h2 id="查看浏览器占有的市场份额（知晓）"><a href="#查看浏览器占有的市场份额（知晓）" class="headerlink" title="查看浏览器占有的市场份额（知晓）"></a>查看浏览器占有的市场份额（知晓）</h2><p>查看网站： <a href="http://tongji.baidu.com/data/browser" target="_blank">http://tongji.baidu.com/data/browser</a></p><p><img src="/media/count.png"></p><h2 id="浏览器内核（理解）"><a href="#浏览器内核（理解）" class="headerlink" title="浏览器内核（理解）"></a>浏览器内核（理解）</h2><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line">浏览器内核又可以分成两部分：渲染引擎(layout engineer 或者 Rendering Engine)和 JS 引擎。</span><br><span class="line">渲染引擎 它负责取得网页的内容（HTML、XML、图像等等）、整理讯息（例如加入 CSS 等），以及计算网页的显示方式，然后会输出至显示器或打印机。浏览器的内核的不同对于网页的语法解释会有不同，所以渲染的效果也不相同。</span><br><span class="line">JS 引擎 则是解析 Javascript 语言，执行 javascript语言来实现网页的动态效果。</span><br><span class="line"></span><br><span class="line">最开始渲染引擎和 JS 引擎并没有区分的很明确，后来 JS 引擎越来越独立，内核就倾向于只指渲染引擎。有一个网页标准计划小组制作了一个 ACID 来测试引擎的兼容性和性能。内核的种类很多，如加上没什么人使用的非商业的免费内核，可能会有10多种，但是常见的浏览器内核可以分这四种：Trident、Gecko、Blink、Webkit。</span><br></pre></td></tr></table></figure><p>（1）Trident(IE内核) </p><p>国内很多的双核浏览器的其中一核便是 Trident，美其名曰 “兼容模式”。</p><p>代表： IE、傲游、世界之窗浏览器、Avant、腾讯TT、猎豹安全浏览器、360极速浏览器、百度浏览器等。</p><p>Window10 发布后，IE 将其内置浏览器命名为 Edge，Edge 最显著的特点就是新内核 EdgeHTML。</p><p>（2）Gecko(firefox) </p><p>Gecko(Firefox 内核)： Mozilla FireFox(火狐浏览器) 采用该内核，Gecko 的特点是代码完全公开，因此，其可开发程度很高，全世界的程序员都可以为其编写代码，增加功能。 可惜这几年已经没落了， 比如 打开速度慢、升级频繁、猪一样的队友flash、神一样的对手chrome。</p><p>（3） webkit(Safari)  </p><p> Safari 是苹果公司开发的浏览器，所用浏览器内核的名称是大名鼎鼎的 WebKit。</p><p> 现在很多人错误地把 webkit 叫做 chrome内核（即使 chrome内核已经是 blink 了），苹果感觉像被别人抢了媳妇，都哭晕再厕所里面了。</p><p> 代表浏览器：傲游浏览器3、 Apple Safari (Win/Mac/iPhone/iPad)、Symbian手机浏览器、Android 默认浏览器，</p><p>（4） Chromium/Bink(chrome) </p><p>   在 Chromium 项目中研发 Blink 渲染引擎（即浏览器核心），内置于 Chrome 浏览器之中。Blink 其实是 WebKit 的分支。 </p><p>​     大部分国产浏览器最新版都采用Blink内核。</p><p>（5） Presto(Opera) </p><p>  Presto 是挪威产浏览器 opera 的 “前任” 内核，为何说是 “前任”，因为最新的 opera 浏览器早已将之抛弃从而投入到了谷歌怀抱了。</p><p>  <img src="/media/s.jpg"></p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">了解一点：</span><br></pre></td></tr></table></figure><p>移动端的浏览器内核主要说的是系统内置浏览器的内核。</p><p>目前移动设备浏览器上常用的内核有 Webkit，Blink，Trident，Gecko 等，其中 iPhone 和 iPad 等苹果 iOS 平台主要是 WebKit，Android 4.4 之前的 Android 系统浏览器内核是 WebKit，Android4.4 系统浏览器切换到了Chromium，内核是 Webkit 的分支 Blink，Windows Phone 8 系统浏览器内核是 Trident。</p><h1 id="Web标准（重点）"><a href="#Web标准（重点）" class="headerlink" title="Web标准（重点）"></a>Web标准（重点）</h1><p>通过以上浏览器的内核不同，我们知道他们工作原理、解析肯定不同，显示就会有差别。</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">问：  哪个语言再全国基本都可以听得懂？</span><br></pre></td></tr></table></figure><p><img src="/media/bz.png"></p><h2 id="Web-标准的好处"><a href="#Web-标准的好处" class="headerlink" title="Web 标准的好处"></a>Web 标准的好处</h2><p><em>1</em>、让Web的发展前景更广阔<br><em>2</em>、内容能被更广泛的设备访问<br><em>3</em>、更容易被搜寻引擎搜索<br><em>4</em>、降低网站流量费用<br><em>5</em>、使网站更易于维护<br><em>6</em>、提高页面浏览速度</p><h2 id="Web-标准构成"><a href="#Web-标准构成" class="headerlink" title="Web 标准构成"></a>Web 标准构成</h2><p> Web标准不是某一个标准，而是由W3C和其他标准化组织制定的一系列标准的集合。主要包括结构（Structure）、表现（Presentation）和行为（Behavior）三个方面。</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line">结构标准：结构用于对网页元素进行整理和分类，主要包括XML和XHTML两个部分。</span><br><span class="line">样式标准：表现用于设置网页元素的版式、颜色、大小等外观样式，主要指的是CSS。</span><br><span class="line">行为标准：行为是指网页模型的定义及交互的编写，主要包括DOM和ECMAScript两个部分</span><br></pre></td></tr></table></figure><p>理想状态我们的源码： .HTML    .css   .js </p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">专业的人，写专业的代码</span><br></pre></td></tr></table></figure><p><img src="/media/wk.png"></p><p>直观感受：</p><p><img src="/media/gx.png"></p><p>总结WEB标准：</p><p>结构标准：   <img src="/media/hb1.png">  决定你是否有个好天然身体 </p><p>样式标准：   <img src="/media/hb2.png">  决定你是否打扮的美丽外观</p><p>行为标准：   <img src="/media/hb3.jpg" width="420">  决定你是否有吸引人的行为</p><h1 id="HTML-初识"><a href="#HTML-初识" class="headerlink" title="HTML 初识"></a>HTML 初识</h1><p>一般先学习HTML+CSS， 这里我们先定一个小目标，先学HTML,后学习CSS。</p><p>HTML（英文Hyper Text Markup Language的缩写）中文译为“超文本标签语言”，主要是通过HTML标签对网页中的文本、图片、声音等内容进行描述。</p><figure class="highlight html"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">strong</span>&gt;</span> 我是加粗的字体 <span class="tag">&lt;/<span class="name">strong</span>&gt;</span></span><br></pre></td></tr></table></figure><p>   注意：   体会 文本    标签    语言   几个词语  </p><h2 id="HTML骨架格式"><a href="#HTML骨架格式" class="headerlink" title="HTML骨架格式"></a>HTML骨架格式</h2><p>日常生活的书信，我们要遵循共同的约定。 </p><p><img src="/media/mess.png" alt=""></p><p>同理：HTML 有自己的语言语法骨架格式：</p><figure class="highlight html"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">HTML</span>&gt;</span>   </span><br><span class="line">    <span class="tag">&lt;<span class="name">head</span>&gt;</span>     </span><br><span class="line">        <span class="tag">&lt;<span class="name">title</span>&gt;</span><span class="tag">&lt;/<span class="name">title</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;/<span class="name">head</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">body</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;/<span class="name">body</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">HTML</span>&gt;</span></span><br></pre></td></tr></table></figure><p>课堂练习1：    书写我们的第一个HTML 页面！</p><ol><li>新建一个demo 的 TXT 文件。</li><li>里面写入刚才的HTML 骨架。</li><li>把后缀名改为 .HTML。</li><li>右击–谷歌浏览器打开。</li></ol><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br></pre></td><td class="code"><pre><span class="line">1 HTML标签：</span><br><span class="line"></span><br><span class="line">作用所有HTML中标签的一个根节点。</span><br><span class="line"></span><br><span class="line">2 head标签：</span><br><span class="line"></span><br><span class="line">作用：用于存放：</span><br><span class="line"></span><br><span class="line">title,meta,base,style,script,link</span><br><span class="line"></span><br><span class="line">注意在head标签中我们必须要设置的标签是title</span><br><span class="line"></span><br><span class="line">3.title标签：</span><br><span class="line"></span><br><span class="line">作用：让页面拥有一个属于自己的标题。</span><br><span class="line"></span><br><span class="line">4.body标签：</span><br><span class="line"></span><br><span class="line">作用：页面在的主体部分，用于存放所有的HTML标签：</span><br><span class="line"></span><br><span class="line">p,h,a,b,u,i,s,em,del,ins,strong,img</span><br></pre></td></tr></table></figure><p>为了便于记忆，我们请出刚才要辞职回家养猪的二师兄来帮忙， 我称之为  猪八戒记忆法</p><p><img src="/media/pig.png"></p><h2 id="HTML标签分类"><a href="#HTML标签分类" class="headerlink" title="HTML标签分类"></a>HTML标签分类</h2><p>  在HTML页面中，带有“&lt; &gt;”符号的元素被称为HTML标签，如上面提到的 &lt;HTML&gt;、&lt;head&gt;、&lt;body&gt;都是HTML标签。所谓标签就是放在“&lt; &gt;” 标签符中表示某个功能的编码命令，也称为HTML标签或 HTML元素</p><p>1.双标签</p><figure class="highlight html"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">标签名</span>&gt;</span> 内容 <span class="tag">&lt;/<span class="name">标签名</span>&gt;</span></span><br></pre></td></tr></table></figure><p>该语法中“&lt;标签名&gt;”表示该标签的作用开始，一般称为“开始标签（start tag）”，“&lt;/标签名&gt;” 表示该标签的作用结束，一般称为“结束标签（end tag）”。和开始标签相比，结束标签只是在前面加了一个关闭符“/”。</p><blockquote><figure class="highlight html"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">&gt; 比如 <span class="tag">&lt;<span class="name">body</span>&gt;</span>我是文字  <span class="tag">&lt;/<span class="name">body</span>&gt;</span></span><br><span class="line">&gt;</span><br></pre></td></tr></table></figure></blockquote><p>2.单标签</p><figure class="highlight html"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">标签名</span> /&gt;</span></span><br></pre></td></tr></table></figure><p>  单标签也称空标签，是指用一个标签符号即可完整地描述某个功能的标签。</p><blockquote><figure class="highlight html"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">&gt; 比如  <span class="tag">&lt;<span class="name">br</span> /&gt;</span></span><br><span class="line">&gt;</span><br></pre></td></tr></table></figure></blockquote><h2 id="HTML标签关系"><a href="#HTML标签关系" class="headerlink" title="HTML标签关系"></a>HTML标签关系</h2><p>标签的相互关系就分为两种：</p><p>1.嵌套关系</p><figure class="highlight html"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">head</span>&gt;</span>  <span class="tag">&lt;<span class="name">title</span>&gt;</span> <span class="tag">&lt;/<span class="name">title</span>&gt;</span>  <span class="tag">&lt;/<span class="name">head</span>&gt;</span></span><br></pre></td></tr></table></figure><p><img src="/media/father.jpg"></p><p>2.并列关系</p><figure class="highlight html"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">head</span>&gt;</span><span class="tag">&lt;/<span class="name">head</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">body</span>&gt;</span><span class="tag">&lt;/<span class="name">body</span>&gt;</span></span><br></pre></td></tr></table></figure><p><img src="/media/xiong.jpg"></p><p>测试题：</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">请问下列哪个标签是错误的？</span><br></pre></td></tr></table></figure><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">A  &lt;head&gt;&lt;/head&gt;&lt;body&gt;&lt;/body&gt;</span><br></pre></td></tr></table></figure><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">B  &lt;strong&gt;&lt;div&gt;&lt;/div&gt;&lt;/strong&gt;</span><br></pre></td></tr></table></figure><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">C  &lt;head&gt;&lt;title&gt;&lt;/head&gt;&lt;/title&gt;</span><br></pre></td></tr></table></figure><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">D  &lt;body&gt;&lt;div&gt;&lt;/div&gt;&lt;/body&gt;</span><br></pre></td></tr></table></figure><p> 倡议： 如果两个标签之间的关系是嵌套关系，子元素最好缩进一个tab键的身位。如果是并列关系，最好上下对齐。</p><h1 id="开发工具"><a href="#开发工具" class="headerlink" title="开发工具"></a>开发工具</h1><p> 这些工具你认识几个？</p><p> <img src="/media/s.png"></p><p>  普通青年    Dreamweaver</p><p>  文艺青年    sublime</p><p>  高手和傻子  用记事本</p><p>  其实。。。。</p><p>  <img src="/media/node.png"></p><p>  <a href="key.HTML" target="_blank">sublime 一些常用快捷键  点我查看 </a></p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line">再页面中输入 以下2个单词</span><br><span class="line">1.  html: 5   </span><br><span class="line">2.  !</span><br><span class="line">   在sublime里面然后按下tab键盘即可生成HTML骨架</span><br></pre></td></tr></table></figure><h1 id="文档类型-lt-DOCTYPE-gt"><a href="#文档类型-lt-DOCTYPE-gt" class="headerlink" title="文档类型&lt;!DOCTYPE&gt;"></a>文档类型&lt;!DOCTYPE&gt;</h1><figure class="highlight html"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">&lt;!DOCTYPE html&gt;</span></span><br></pre></td></tr></table></figure><p>这句话就是告诉我们使用哪个html版本？  我们使用的是 html 5 的版本。  html有很多版本，那我们应该告诉用户和浏览器我们使用的版本号。</p><p>&lt;!DOCTYPE&gt; 标签位于文档的最前面，用于向浏览器说明当前文档使用哪种 HTML 或 XHTML 标准规范，必需在开头处使用&lt;!DOCTYPE&gt;标签为所有的XHTML文档指定XHTML版本和类型，只有这样浏览器才能按指定的文档类型进行解析。</p><p>注意：  一些老网站可能用的还是老版本的文档类型比如 XHTML之类的，但是我们学的是HTML5,而且HTML5的文档类型兼容很好(向下兼容的原则)，所以大家放心的使用HTML5的文档类型就好了。</p><h1 id="字符集"><a href="#字符集" class="headerlink" title="字符集"></a>字符集</h1><meta charset="UTF-8"><p>utf-8是目前最常用的字符集编码方式，常用的字符集编码方式还有gbk和gb2312。</p><p>gb2312 简单中文  包括6763个汉字</p><p>BIG5   繁体中文 港澳台等用</p><p>GBK包含全部中文字符    是GB2312的扩展，加入对繁体字的支持，兼容GB2312</p><p>UTF-8则包含全世界所有国家需要用到的字符</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">记住一点，以后我们统统使用UTF-8 字符集, 这样就避免出现字符集不统一而引起乱码的情况了。</span><br></pre></td></tr></table></figure><h1 id="HTML标签的语义化"><a href="#HTML标签的语义化" class="headerlink" title="HTML标签的语义化"></a>HTML标签的语义化</h1><p>白话： 所谓标签语义化，就是指标签的含义。</p><h2 id="为什么要有语义化标签"><a href="#为什么要有语义化标签" class="headerlink" title="为什么要有语义化标签"></a>为什么要有语义化标签</h2><ol><li><p>方便代码的阅读和维护</p></li><li><p>同时让浏览器或是网络爬虫可以很好地解析，从而更好分析其中的内容 </p></li><li><p>使用语义化标签会具有更好地搜索引擎优化 </p></li></ol><p>核心：合适的地方给一个最为合理的标签。</p><p>语义是否良好： 当我们去掉CSS之后，网页结构依然组织有序，并且有良好的可读性。</p><p>不管是谁都能看懂这块内容是什么。</p><p>遵循的原则：先确定语义的HTML ，再选合适的CSS。</p><h1 id="HTML标签"><a href="#HTML标签" class="headerlink" title="HTML标签"></a>HTML标签</h1><p> 首先 HTML和CSS是两种完全不同的语言，我们学的是结构，就只写HTML标签，认识标签就可以了。 不会再给结构标签指定样式了。</p><p> HTML标签有很多，这里我们学习最为常用的，后面有些较少用的，我们可以查下手册就可以了。 </p><h2 id="排版标签"><a href="#排版标签" class="headerlink" title="排版标签"></a>排版标签</h2><p>排版标签主要和css搭配使用，显示网页结构的标签，是网页布局最常用的标签。</p><h3 id="标题标签-熟记"><a href="#标题标签-熟记" class="headerlink" title="标题标签 (熟记)"></a>标题标签 (熟记)</h3><p> 单词缩写：  head   头部. 标题 </p><p>为了使网页更具有语义化，我们经常会在页面中用到标题标签，HTML提供了6个等级的标题，即</p><p> </p><h1>、<h2>、<h3>、<h4>、<h5>和<h6><p></p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">标题标签语义：  作为标题使用，并且依据重要性递减</span><br></pre></td></tr></table></figure><p>其基本语法格式如下：</p><figure class="highlight html"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">hn</span>&gt;</span>   标题文本   <span class="tag">&lt;/<span class="name">hn</span>&gt;</span></span><br></pre></td></tr></table></figure><blockquote><p>注意：  h1 标签因为重要，尽量少用，不要动不动就向你扔了一个h1。 一般h1 都是给logo使用。</p></blockquote><p>  <img src="/media/dog.gif"></p><h3 id="段落标签-熟记"><a href="#段落标签-熟记" class="headerlink" title="段落标签( 熟记)"></a>段落标签( 熟记)</h3><p>单词缩写：  paragraph  段落</p><p> 在网页中要把文字有条理地显示出来，离不开段落标签，就如同我们平常写文章一样，整个网页也可以分为若干个段落，而段落的标签就是</p><figure class="highlight html"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">p</span>&gt;</span>  文本内容  <span class="tag">&lt;/<span class="name">p</span>&gt;</span></span><br></pre></td></tr></table></figure><p>是HTML文档中最常见的标签，默认情况下，文本在一个段落中会根据浏览器窗口的大小自动换行。</p><h3 id="水平线标签-认识"><a href="#水平线标签-认识" class="headerlink" title="水平线标签(认识)"></a>水平线标签(认识)</h3><p>单词缩写：  horizontal  横线</p><p>在网页中常常看到一些水平线将段落与段落之间隔开，使得文档结构清晰，层次分明。这些水平线可以通过插入图片实现，也可以简单地通过标签来完成，<hr>就是创建横跨网页水平线的标签。其基本语法格式如下：</p><figure class="highlight html"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">hr</span> /&gt;</span>是单标签</span><br></pre></td></tr></table></figure><p> 在网页中显示默认样式的水平线。</p><p>课堂练习2：    新闻页面</p><p><img src="/media/sh.png"> </p><h3 id="换行标签-熟记"><a href="#换行标签-熟记" class="headerlink" title="换行标签(熟记)"></a>换行标签(熟记)</h3><p>单词缩写：  break   打断 ,换行</p><p>在HTML中，一个段落中的文字会从左到右依次排列，直到浏览器窗口的右端，然后自动换行。如果希望某段文本强制换行显示，就需要使用换行标签</p><figure class="highlight html"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">br</span> /&gt;</span></span><br></pre></td></tr></table></figure><p>这时如果还像在word中直接敲回车键换行就不起作用了。</p><h3 id="div-span标签-重点"><a href="#div-span标签-重点" class="headerlink" title="div span标签(重点)"></a>div span标签(重点)</h3><p>div  span    是没有语义的     是我们网页布局主要的2个盒子</p><p>div 就是  division  的缩写   分割， 分区的意思  其实有很多div 来组合网页。</p><p>span, 跨度，跨距；范围    </p><p>语法格式：</p><figure class="highlight html"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">div</span>&gt;</span> 这是头部 <span class="tag">&lt;/<span class="name">div</span>&gt;</span>    <span class="tag">&lt;<span class="name">span</span>&gt;</span>今日价格<span class="tag">&lt;/<span class="name">span</span>&gt;</span></span><br></pre></td></tr></table></figure><h2 id="文本格式化标签-熟记"><a href="#文本格式化标签-熟记" class="headerlink" title="文本格式化标签(熟记)"></a>文本格式化标签(熟记)</h2><p>在网页中，有时需要为文字设置粗体、斜体或下划线效果，这时就需要用到HTML中的文本格式化标签，使文字以特殊的方式显示。</p><p><img src="/media/tab.png"></p><p>  b  i  s  u   只有使用 没有 强调的意思       strong   em  del   ins  语义更强烈</p><h2 id="标签属性"><a href="#标签属性" class="headerlink" title="标签属性"></a>标签属性</h2><p><img src="/media/ttt.jpg" width="300"></p><p>属性就是特性 比如 手机的颜色 手机的尺寸 ，总结就是手机的。。</p><p>使用HTML制作网页时，如果想让HTML标签提供更多的信息，可以使用HTML标签的属性加以设置。其基本语法格式如下：</p><figure class="highlight html"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">标签名</span> 属性<span class="attr">1</span>=<span class="string">"属性值1"</span> 属性<span class="attr">2</span>=<span class="string">"属性值2"</span> …&gt;</span> 内容 <span class="tag">&lt;/<span class="name">标签名</span>&gt;</span></span><br></pre></td></tr></table></figure><p>在上面的语法中，</p><p>1.标签可以拥有多个属性，必须写在开始标签中，位于标签名后面。</p><p>2.属性之间不分先后顺序，标签名与属性、属性与属性之间均以空格分开。</p><p>3.任何标签的属性都有默认值，省略该属性则取默认值。</p><p>采取  键值对 的格式   key=”value”  的格式  </p><p>比如:  </p><figure class="highlight html"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">hr</span> <span class="attr">width</span>=<span class="string">"400"</span> /&gt;</span></span><br></pre></td></tr></table></figure><p>属性  是 宽度  </p><p>值    是 400 </p><p>提倡：   尽量不使用 样式属性。   <img src="/media/sm.jpg"> </p><h2 id="图像标签img-重点"><a href="#图像标签img-重点" class="headerlink" title="图像标签img (重点)"></a>图像标签img (重点)</h2><p>单词缩写：   image  图像</p><p>HTML网页中任何元素的实现都要依靠HTML标签，要想在网页中显示图像就需要使用图像标签，接下来将详细介绍图像标签<img>以及和他相关的属性。其基本语法格式如下：</p><p>该语法中src属性用于指定图像文件的路径和文件名，他是img标签的必需属性。</p><figure class="highlight html"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">img</span> <span class="attr">src</span>=<span class="string">"图像URL"</span> /&gt;</span></span><br></pre></td></tr></table></figure><p><img src="/media/img.png"></p><h2 id="链接标签-重点"><a href="#链接标签-重点" class="headerlink" title="链接标签(重点)"></a>链接标签(重点)</h2><p>单词缩写：  anchor 的缩写 。基本解释 锚, 铁锚 的</p><p>在HTML中创建超链接非常简单，只需用标签环绕需要被链接的对象即可，其基本语法格式如下：</p><figure class="highlight html"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">a</span> <span class="attr">href</span>=<span class="string">"跳转目标"</span> <span class="attr">target</span>=<span class="string">"目标窗口的弹出方式"</span>&gt;</span>文本或图像<span class="tag">&lt;/<span class="name">a</span>&gt;</span></span><br></pre></td></tr></table></figure><p>href：用于指定链接目标的url地址，当为标签应用href属性时，它就具有了超链接的功能。  Hypertext Reference的缩写。意思是超文本引用</p><p>target：用于指定链接页面的打开方式，其取值有_self和_blank两种，其中_self为默认值，_blank为在新窗口中打开方式。</p><p>注意：</p><p>1.外部链接 需要添加 http:// <a href="http://www.baidu.com" target="_blank" rel="noopener">www.baidu.com</a></p><p>2.内部链接 直接链接内部页面名称即可 比如 &lt; a href=”index.html”&gt; 首页 </p><p>3.如果当时没有确定链接目标时，通常将链接标签的href属性值定义为“#”(即href=”#”)，表示该链接暂时为一个空链接。</p><p>4.不仅可以创建文本超链接，在网页中各种网页元素，如图像、表格、音频、视频等都可以添加超链接。</p><h3 id="锚点定位-（难点）"><a href="#锚点定位-（难点）" class="headerlink" title="锚点定位 （难点）"></a>锚点定位 （难点）</h3><p>通过创建锚点链接，用户能够快速定位到目标内容。<br>创建锚点链接分为两步：</p><figure class="highlight html"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line">1.使用“a href=”#id名&gt;“链接文本"<span class="tag">&lt;/<span class="name">a</span>&gt;</span>创建链接文本。</span><br><span class="line"></span><br><span class="line">2.使用相应的id名标注跳转目标的位置。</span><br></pre></td></tr></table></figure><h3 id="base-标签"><a href="#base-标签" class="headerlink" title="base 标签"></a>base 标签</h3><p>base 可以设置整体链接的打开状态   </p><p>base 写到  <head>  </head>  之间</p><p> <img src="/media/base.png"></p><h2 id="特殊字符标签-（理解）"><a href="#特殊字符标签-（理解）" class="headerlink" title="特殊字符标签 （理解）"></a>特殊字符标签 （理解）</h2><p> <img src="/media/zifu.png"></p><h2 id="注释标签"><a href="#注释标签" class="headerlink" title="注释标签"></a>注释标签</h2><p>在HTML中还有一种特殊的标签——注释标签。如果需要在HTML文档中添加一些便于阅读和理解但又不需要显示在页面中的注释文字，就需要使用注释标签。其基本语法格式如下：<br>​        </p><figure class="highlight html"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">&lt;!-- 注释语句 --&gt;</span></span><br></pre></td></tr></table></figure><p>注释内容不会显示在浏览器窗口中，但是作为HTML文档内容的一部分，也会被下载到用户的计算机上，查看源代码时就可以看到。</p><p>注释重要性：</p><p><img src="/media/zs.png"></p><h1 id="路径-重点、难点"><a href="#路径-重点、难点" class="headerlink" title="路径(重点、难点)"></a>路径(重点、难点)</h1><p><img src="/media/dt.png"></p><p><img src="/media/lj.png"></p><p>实际工作中，通常新建一个文件夹专门用于存放图像文件，这时再插入图像，就需要采用“路径”的方式来指定图像文件的位置。</p><p>路径可以分为： 相对路径和绝对路径</p><h2 id="相对路径"><a href="#相对路径" class="headerlink" title="相对路径"></a>相对路径</h2><ol><li>图像文件和HTML文件位于同一文件夹：只需输入图像文件的名称即可，如&lt;img src=”logo.gif” /&gt;。</li><li>图像文件位于HTML文件的下一级文件夹：输入文件夹名和文件名，之间用“/”隔开，如&lt;img src=”img/img01/logo.gif” /&gt;。</li><li>图像文件位于HTML文件的上一级文件夹：在文件名之前加入“../” ，如果是上两级，则需要使用 “../ ../”，以此类推，如&lt;img src=”../logo.gif” /&gt;。</li></ol><h2 id="绝对路径"><a href="#绝对路径" class="headerlink" title="绝对路径"></a>绝对路径</h2><p>绝对路径</p><p>“D:\web\img\logo.gif”，或完整的网络地址，例如“<a href="http://www.itcast.cn/images/logo.gif”。" target="_blank" rel="noopener">http://www.itcast.cn/images/logo.gif”。</a></p><h1 id="列表标签"><a href="#列表标签" class="headerlink" title="列表标签"></a>列表标签</h1><p>什么是列表？</p><p><img src="/media/list.png"></p><p>把…制成表,以表显示</p><p>容器里面装载着文字或图表的一种形式，叫列表。</p><p>列表最大的特点就是  整齐 、整洁、 有序</p><h2 id="无序列表-ul-（重点）"><a href="#无序列表-ul-（重点）" class="headerlink" title="无序列表 ul （重点）"></a>无序列表 ul （重点）</h2><p>无序列表的各个列表项之间没有顺序级别之分，是并列的。其基本语法格式如下：</p><figure class="highlight html"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">ul</span>&gt;</span></span><br><span class="line">  <span class="tag">&lt;<span class="name">li</span>&gt;</span>列表项1<span class="tag">&lt;/<span class="name">li</span>&gt;</span></span><br><span class="line">  <span class="tag">&lt;<span class="name">li</span>&gt;</span>列表项2<span class="tag">&lt;/<span class="name">li</span>&gt;</span></span><br><span class="line">  <span class="tag">&lt;<span class="name">li</span>&gt;</span>列表项3<span class="tag">&lt;/<span class="name">li</span>&gt;</span></span><br><span class="line">  ......</span><br><span class="line"><span class="tag">&lt;/<span class="name">ul</span>&gt;</span></span><br></pre></td></tr></table></figure><p>比如下面这些，新闻是没有顺序的，不用排队，先到先得，后发布先显示。</p><p><img src="/media/ul.png"></p><p>脚下留心：</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line">1. &lt;ul&gt;&lt;/ul&gt;中只能嵌套&lt;li&gt;&lt;/li&gt;，直接在&lt;ul&gt;&lt;/ul&gt;标签中输入其他标签或者文字的做法是不被允许的。</span><br><span class="line">2. &lt;li&gt;与&lt;/li&gt;之间相当于一个容器，可以容纳所有元素。</span><br><span class="line">3. 无序列表会带有自己样式属性，放下那个样式，一会让CSS来！</span><br></pre></td></tr></table></figure><h2 id="有序列表-ol-（了解）"><a href="#有序列表-ol-（了解）" class="headerlink" title="有序列表 ol （了解）"></a>有序列表 ol （了解）</h2><p><img src="/media/gold.png"></p><p>有序列表即为有排列顺序的列表，其各个列表项按照一定的顺序排列定义，有序列表的基本语法格式如下：</p><figure class="highlight html"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">ol</span>&gt;</span></span><br><span class="line">  <span class="tag">&lt;<span class="name">li</span>&gt;</span>列表项1<span class="tag">&lt;/<span class="name">li</span>&gt;</span></span><br><span class="line">  <span class="tag">&lt;<span class="name">li</span>&gt;</span>列表项2<span class="tag">&lt;/<span class="name">li</span>&gt;</span></span><br><span class="line">  <span class="tag">&lt;<span class="name">li</span>&gt;</span>列表项3<span class="tag">&lt;/<span class="name">li</span>&gt;</span></span><br><span class="line">  ......</span><br><span class="line"><span class="tag">&lt;/<span class="name">ol</span>&gt;</span></span><br></pre></td></tr></table></figure><p>  所有特性基本与ul 一致。  </p><p>  但是实际工作中， 较少用 ol ，因此我们用一句话来总结下 ol： </p><p>  <img src="/media/1.jpg"></p><h2 id="自定义列表（理解）"><a href="#自定义列表（理解）" class="headerlink" title="自定义列表（理解）"></a>自定义列表（理解）</h2><p>定义列表常用于对术语或名词进行解释和描述，定义列表的列表项前没有任何项目符号。其基本语法如下：</p><figure class="highlight html"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br></pre></td><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">dl</span>&gt;</span></span><br><span class="line">  <span class="tag">&lt;<span class="name">dt</span>&gt;</span>名词1<span class="tag">&lt;/<span class="name">dt</span>&gt;</span></span><br><span class="line">  <span class="tag">&lt;<span class="name">dd</span>&gt;</span>名词1解释1<span class="tag">&lt;/<span class="name">dd</span>&gt;</span></span><br><span class="line">  <span class="tag">&lt;<span class="name">dd</span>&gt;</span>名词1解释2<span class="tag">&lt;/<span class="name">dd</span>&gt;</span></span><br><span class="line">  ...</span><br><span class="line">  <span class="tag">&lt;<span class="name">dt</span>&gt;</span>名词2<span class="tag">&lt;/<span class="name">dt</span>&gt;</span></span><br><span class="line">  <span class="tag">&lt;<span class="name">dd</span>&gt;</span>名词2解释1<span class="tag">&lt;/<span class="name">dd</span>&gt;</span></span><br><span class="line">  <span class="tag">&lt;<span class="name">dd</span>&gt;</span>名词2解释2<span class="tag">&lt;/<span class="name">dd</span>&gt;</span></span><br><span class="line">  ...</span><br><span class="line"><span class="tag">&lt;/<span class="name">dl</span>&gt;</span></span><br></pre></td></tr></table></figure><p> <img src="/media/2.jpg"> </p><p>用的还可以：</p><p><img src="/media/mix.png"></p><h1 id="总结"><a href="#总结" class="headerlink" title="总结"></a>总结</h1><p>  每一天都有一个主题 我们HTML第一天的主题就是 &lt;认识标签&gt;</p><p>学HTML 之前 觉得 很神秘  </p><p><img src="/media/z.png"></p><p>等你学完之后忽然发现</p><p><img src="/media/rh.jpg" width="615"></p><p>总结今天的思路贯穿线：</p><p><img src="/media/a.png" width="1000"></p><h1 id="表格-table-会使用"><a href="#表格-table-会使用" class="headerlink" title="表格 table(会使用)"></a>表格 table(会使用)</h1><p>存在即是合理的。  表格的现在还是较为常用的一种标签，但不是用来布局，常见处理表格式数据。</p><p><img src="/media/table.png"></p><p>ps:  这些地方用表格，你会觉得生活还是那么美好。。。。忍不住想说  PPAP i hava a pen  </p><h2 id="创建表格"><a href="#创建表格" class="headerlink" title="创建表格"></a>创建表格</h2><p>在HTML网页中，要想创建表格，就需要使用表格相关的标签。创建表格的基本语法格式如下：</p><figure class="highlight html"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">table</span>&gt;</span></span><br><span class="line">  <span class="tag">&lt;<span class="name">tr</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">td</span>&gt;</span>单元格内的文字<span class="tag">&lt;/<span class="name">td</span>&gt;</span></span><br><span class="line">    ...</span><br><span class="line">  <span class="tag">&lt;/<span class="name">tr</span>&gt;</span></span><br><span class="line">  ...</span><br><span class="line"><span class="tag">&lt;/<span class="name">table</span>&gt;</span></span><br></pre></td></tr></table></figure><p>在上面的语法中包含三对HTML标签，分别为 &lt;table&gt;&lt;/table&gt;、&lt;tr&gt;&lt;/tr&gt;、&lt;td&gt;&lt;/td&gt;，他们是创建表格的基本标签，缺一不可，下面对他们进行具体地解释。</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line">1.table用于定义一个表格。</span><br><span class="line"></span><br><span class="line">2.tr 用于定义表格中的一行，必须嵌套在 table /table标签中，在 table /table中包含几对 tr /tr，就有几行表格。</span><br><span class="line"></span><br><span class="line">3.td /td：用于定义表格中的单元格，必须嵌套在&lt;tr&gt;&lt;/tr&gt;标签中，一对 &lt;tr&gt; &lt;/tr&gt;中包含几对&lt;td&gt;&lt;/td&gt;，就表示该行中有多少列（或多少个单元格）。</span><br></pre></td></tr></table></figure><p>注意：</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">1. &lt;tr&gt;&lt;/tr&gt;中只能嵌套&lt;td&gt;&lt;/td&gt;</span><br></pre></td></tr></table></figure><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">2. &lt;td&gt;&lt;/td&gt;标签，他就像一个容器，可以容纳所有的元素</span><br></pre></td></tr></table></figure><h2 id="表格属性"><a href="#表格属性" class="headerlink" title="表格属性"></a>表格属性</h2><p><img src="/media/tt.png"></p><h2 id="表头标签"><a href="#表头标签" class="headerlink" title="表头标签"></a>表头标签</h2><p>表头一般位于表格的第一行或第一列，其文本加粗居中，如下图所示，即为设置了表头的表格。设置表头非常简单，只需用表头标签&lt;th&gt;&lt;/th&gt;替代相应的单元格标签&lt;td&gt;&lt;/td&gt;即可。</p><p> <img src="/media/th.png"></p><h2 id="表格结构（了解）"><a href="#表格结构（了解）" class="headerlink" title="表格结构（了解）"></a>表格结构（了解）</h2><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br></pre></td><td class="code"><pre><span class="line">在使用表格进行布局时，可以将表格划分为头部、主体和页脚（页脚因为有兼容性问题，我们不在赘述），具体 如下所示：</span><br><span class="line"></span><br><span class="line">&lt;thead&gt;&lt;/thead&gt;：用于定义表格的头部。</span><br><span class="line"></span><br><span class="line">必须位于&lt;table&gt;&lt;/table&gt; 标签中，一般包含网页的logo和导航等头部信息。</span><br><span class="line"></span><br><span class="line"></span><br><span class="line">&lt;tbody&gt;&lt;/tbody&gt;：用于定义表格的主体。</span><br><span class="line"></span><br><span class="line">位于&lt;table&gt;&lt;/table&gt;标签中，一般包含网页中除头部和底部之外的其他内容。</span><br></pre></td></tr></table></figure><p><img src="/media/thead.png"></p><h2 id="合并单元格"><a href="#合并单元格" class="headerlink" title="合并单元格"></a>合并单元格</h2><p>跨行合并：rowspan    跨列合并：colspan</p><p>合并单元格的思想：</p><p>​     将多个内容合并的时候，就会有多余的东西，把它删除。    例如 把 3个 td 合并成一个， 那就多余了2个，需要删除。</p><p>​     公式：  删除的个数  =  合并的个数  - 1   </p><h2 id="总结表格"><a href="#总结表格" class="headerlink" title="总结表格"></a>总结表格</h2><ol><li>表格提供了HTML 中定义表格式数据的方法。</li><li>表格中由行中的单元格组成。</li><li>表格中没有列元素，列的个数取决于行的单元格个数。</li><li>表格不要纠结于外观，那是CSS 的作用。</li></ol><h1 id="表单标签-掌握"><a href="#表单标签-掌握" class="headerlink" title="表单标签(掌握)"></a>表单标签(掌握)</h1><p>现实中的表单，类似我们去银行办理信用卡填写的单子。 如下图</p><p><img src="/media/car.jpg" width="500"></p><p>目的是为了收集用户信息。</p><p>在我们网页中， 我们也需要跟用户进行交互，收集用户资料，此时也需要表单。</p><p>在HTML中，一个完整的表单通常由表单控件（也称为表单元素）、提示信息和表单域3个部分构成。</p><p><img src="/media/bd.png"></p><p>  表单控件：</p><p>​       包含了具体的表单功能项，如单行文本输入框、密码输入框、复选框、提交按钮、重置按钮等。</p><p>  提示信息：</p><p>​        一个表单中通常还需要包含一些说明性的文字，提示用户进行填写和操作。</p><p>  表单域：  </p><p>​      他相当于一个容器，用来容纳所有的表单控件和提示信息，可以通过他定义处理表单数据所用程序的url地址，以及数据提交到服务器的方法。如果不定义表单域，表单中的数据就无法传送到后台服务器。</p><h2 id="input-控件-重点"><a href="#input-控件-重点" class="headerlink" title="input 控件(重点)"></a>input 控件(重点)</h2><p>在上面的语法中，&lt;input /&gt;标签为单标签，type属性为其最基本的属性，其取值有多种，用于指定不同的控件类型。除了type属性之外，&lt;input /&gt;标签还可以定义很多其他的属性，其常用属性如下表所示。</p><p><img src="/media/input.png"></p><h2 id="label标签-理解"><a href="#label标签-理解" class="headerlink" title="label标签(理解)"></a>label标签(理解)</h2><p>label 标签为 input 元素定义标注（标签）。</p><p>作用：  用于绑定一个表单元素, 当点击label标签的时候, 被绑定的表单元素就会获得输入焦点</p><p>如何绑定元素呢？</p><p>for 属性规定 label 与哪个表单元素绑定。</p><figure class="highlight html"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">label</span> <span class="attr">for</span>=<span class="string">"male"</span>&gt;</span>Male<span class="tag">&lt;/<span class="name">label</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">input</span> <span class="attr">type</span>=<span class="string">"radio"</span> <span class="attr">name</span>=<span class="string">"sex"</span> <span class="attr">id</span>=<span class="string">"male"</span> <span class="attr">value</span>=<span class="string">"male"</span>&gt;</span></span><br></pre></td></tr></table></figure><h2 id="textarea控件-文本域"><a href="#textarea控件-文本域" class="headerlink" title="textarea控件(文本域)"></a>textarea控件(文本域)</h2><p>如果需要输入大量的信息，就需要用到&lt;textarea&gt;&lt;/textarea&gt;标签。通过textarea控件可以轻松地创建多行文本输入框，其基本语法格式如下：</p><figure class="highlight html"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">textarea</span> <span class="attr">cols</span>=<span class="string">"每行中的字符数"</span> <span class="attr">rows</span>=<span class="string">"显示的行数"</span>&gt;</span></span><br><span class="line">  文本内容</span><br><span class="line"><span class="tag">&lt;/<span class="name">textarea</span>&gt;</span></span><br></pre></td></tr></table></figure><p><img src="/media/textarea.png"></p><h2 id="下拉菜单"><a href="#下拉菜单" class="headerlink" title="下拉菜单"></a>下拉菜单</h2><p>使用select控件定义下拉菜单的基本语法格式如下</p><figure class="highlight html"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">select</span>&gt;</span></span><br><span class="line">  <span class="tag">&lt;<span class="name">option</span>&gt;</span>选项1<span class="tag">&lt;/<span class="name">option</span>&gt;</span></span><br><span class="line">  <span class="tag">&lt;<span class="name">option</span>&gt;</span>选项2<span class="tag">&lt;/<span class="name">option</span>&gt;</span></span><br><span class="line">  <span class="tag">&lt;<span class="name">option</span>&gt;</span>选项3<span class="tag">&lt;/<span class="name">option</span>&gt;</span></span><br><span class="line">  ...</span><br><span class="line"><span class="tag">&lt;/<span class="name">select</span>&gt;</span></span><br></pre></td></tr></table></figure><p>注意：</p><ol><li>&lt;select&gt;&lt;/select&gt;中至少应包含一对&lt;option&gt;&lt;/option&gt;。</li><li>在option 中定义selected =” selected “时，当前项即为默认选中项。</li></ol><h2 id="表单域"><a href="#表单域" class="headerlink" title="表单域"></a>表单域</h2><p>在HTML中，form标签被用于定义表单域，即创建一个表单，以实现用户信息的收集和传递，form中的所有内容都会被提交给服务器。创建表单的基本语法格式如下：</p><figure class="highlight html"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">form</span> <span class="attr">action</span>=<span class="string">"url地址"</span> <span class="attr">method</span>=<span class="string">"提交方式"</span> <span class="attr">name</span>=<span class="string">"表单名称"</span>&gt;</span></span><br><span class="line">  各种表单控件</span><br><span class="line"><span class="tag">&lt;/<span class="name">form</span>&gt;</span></span><br></pre></td></tr></table></figure><p>常用属性：</p><ol><li>Action<br>在表单收集到信息后，需要将信息传递给服务器进行处理，action属性用于指定接收并处理表单数据的服务器程序的url地址。</li><li>method<br>用于设置表单数据的提交方式，其取值为get或post。</li><li>name<br>用于指定表单的名称，以区分同一个页面中的多个表单。</li></ol><p>注意：  每个表单都应该有自己表单域。</p><h1 id="HTML5新标签与特性"><a href="#HTML5新标签与特性" class="headerlink" title="HTML5新标签与特性"></a>HTML5新标签与特性</h1><h2 id="文档类型设定"><a href="#文档类型设定" class="headerlink" title="文档类型设定"></a>文档类型设定</h2><ul><li>document<ul><li>HTML:</li><li>XHTML:</li><li>HTML5</li></ul></li></ul><h2 id="字符设定"><a href="#字符设定" class="headerlink" title="字符设定"></a>字符设定</h2><ul><li><meta http-equiv="charset" content="utf-8">：HTML与XHTML中建议这样去写</li><li><meta charset="utf-8">：HTML5的标签中建议这样去写</li></ul><h2 id="常用新标签"><a href="#常用新标签" class="headerlink" title="常用新标签"></a>常用新标签</h2><ul><li>header：定义文档的页眉</li><li>nav：定义导航链接的部分</li><li>footer：定义文档或节的页脚</li><li>article：标签规定独立的自包含内容</li><li>section：定义文档中的节（section、区段）</li><li>aside：定义其所处内容之外的内容</li></ul><h2 id="常用新属性"><a href="#常用新属性" class="headerlink" title="常用新属性"></a>常用新属性</h2><table><thead><tr><th><strong>属性<em>**</em></strong></th><th><strong>用法<em>**</em></strong></th><th><strong>含义<em>**</em></strong></th></tr></thead><tbody><tr><td><strong>placeholder<em>**</em></strong></td><td><input type="text" placeholder="请输入用户名"></td><td>占位符提供可描述输入字段预期值的提示信息</td></tr><tr><td><strong>autofocus<em>**</em></strong></td><td><input type="text" autofocus></td><td>规定当页面加载时 input 元素应该自动获得焦点</td></tr><tr><td><strong>multiple<em>**</em></strong></td><td><input type="file" multiple></td><td>多文件上传</td></tr><tr><td><strong>autocomplete<em>**</em></strong></td><td><input type="text" autocomplete="off"></td><td>规定表单是否应该启用自动完成功能</td></tr><tr><td><strong>required<em>**</em></strong></td><td><input type="text" required></td><td>必填项</td></tr><tr><td><strong>accesskey<em>**</em></strong></td><td><input type="text" accesskey="s"></td><td>规定激活（使元素获得焦点）元素的快捷键</td></tr></tbody></table><h2 id="新增的type属性值："><a href="#新增的type属性值：" class="headerlink" title="新增的type属性值："></a>新增的type属性值：</h2><table><thead><tr><th><strong>类型<em>**</em></strong></th><th><strong>使用示例<em>**</em></strong></th><th><strong>含义<em>**</em></strong></th></tr></thead><tbody><tr><td><strong>email<em>**</em></strong></td><td><input type="email"></td><td>输入邮箱格式</td></tr><tr><td><strong>tel<em>**</em></strong></td><td><input type="tel"></td><td>输入手机号码格式</td></tr><tr><td><strong>url<em>**</em></strong></td><td><input type="url"></td><td>输入url格式</td></tr><tr><td><strong>number<em>**</em></strong></td><td><input type="number"></td><td>输入数字格式</td></tr><tr><td><strong>search<em>**</em></strong></td><td><input type="search"></td><td>搜索框（体现语义化）</td></tr><tr><td><strong>range<em>**</em></strong></td><td><input type="range"></td><td>自由拖动滑块</td></tr><tr><td><strong>time<em>**</em></strong></td><td><input type="time"></td><td></td></tr><tr><td><strong>date<em>**</em></strong></td><td><input type="date"></td><td></td></tr><tr><td><strong>datetime<em>**</em></strong></td><td><input type="datetime"></td><td></td></tr><tr><td><strong>month<em>**</em></strong></td><td><input type="month"></td><td></td></tr><tr><td><strong>week<em>**</em></strong></td><td><input type="week"></td></tr></tbody></table><h2 id="综合案例"><a href="#综合案例" class="headerlink" title="综合案例"></a>综合案例</h2><figure class="highlight html"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br></pre></td><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">form</span> <span class="attr">action</span>=<span class="string">""</span>&gt;</span></span><br><span class="line">  <span class="tag">&lt;<span class="name">fieldset</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">legend</span>&gt;</span>学生档案<span class="tag">&lt;/<span class="name">legend</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">label</span> <span class="attr">for</span>=<span class="string">"userName"</span>&gt;</span>姓名:<span class="tag">&lt;/<span class="name">label</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">input</span> <span class="attr">type</span>=<span class="string">"text"</span> <span class="attr">name</span>=<span class="string">"userName"</span> <span class="attr">id</span>=<span class="string">"userName"</span> <span class="attr">placeholder</span>=<span class="string">"请输入用户名"</span>&gt;</span> <span class="tag">&lt;<span class="name">br</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">label</span> <span class="attr">for</span>=<span class="string">"userPhone"</span>&gt;</span>手机号码:<span class="tag">&lt;/<span class="name">label</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">input</span> <span class="attr">type</span>=<span class="string">"tel"</span> <span class="attr">name</span>=<span class="string">"userPhone"</span> <span class="attr">id</span>=<span class="string">"userPhone"</span> <span class="attr">pattern</span>=<span class="string">"^1\d&#123;10&#125;$"</span>&gt;</span><span class="tag">&lt;<span class="name">br</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">label</span> <span class="attr">for</span>=<span class="string">"email"</span>&gt;</span>邮箱地址:<span class="tag">&lt;/<span class="name">label</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">input</span> <span class="attr">type</span>=<span class="string">"email"</span> <span class="attr">required</span> <span class="attr">name</span>=<span class="string">"email"</span> <span class="attr">id</span>=<span class="string">"email"</span>&gt;</span><span class="tag">&lt;<span class="name">br</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">label</span> <span class="attr">for</span>=<span class="string">"collage"</span>&gt;</span>所属学院:<span class="tag">&lt;/<span class="name">label</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">input</span> <span class="attr">type</span>=<span class="string">"text"</span> <span class="attr">name</span>=<span class="string">"collage"</span> <span class="attr">id</span>=<span class="string">"collage"</span> <span class="attr">list</span>=<span class="string">"cList"</span> <span class="attr">placeholder</span>=<span class="string">"请选择"</span>&gt;</span><span class="tag">&lt;<span class="name">br</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">datalist</span> <span class="attr">id</span>=<span class="string">"cList"</span>&gt;</span></span><br><span class="line">      <span class="tag">&lt;<span class="name">option</span> <span class="attr">value</span>=<span class="string">"前端与移动开发学院"</span>&gt;</span><span class="tag">&lt;/<span class="name">option</span>&gt;</span></span><br><span class="line">      <span class="tag">&lt;<span class="name">option</span> <span class="attr">value</span>=<span class="string">"java学院"</span>&gt;</span><span class="tag">&lt;/<span class="name">option</span>&gt;</span></span><br><span class="line">      <span class="tag">&lt;<span class="name">option</span> <span class="attr">value</span>=<span class="string">"c++学院"</span>&gt;</span><span class="tag">&lt;/<span class="name">option</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;/<span class="name">datalist</span>&gt;</span><span class="tag">&lt;<span class="name">br</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">label</span> <span class="attr">for</span>=<span class="string">"score"</span>&gt;</span>入学成绩:<span class="tag">&lt;/<span class="name">label</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">input</span> <span class="attr">type</span>=<span class="string">"number"</span> <span class="attr">max</span>=<span class="string">"100"</span> <span class="attr">min</span>=<span class="string">"0"</span> <span class="attr">value</span>=<span class="string">"0"</span> <span class="attr">id</span>=<span class="string">"score"</span>&gt;</span><span class="tag">&lt;<span class="name">br</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">label</span> <span class="attr">for</span>=<span class="string">"level"</span>&gt;</span>基础水平:<span class="tag">&lt;/<span class="name">label</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">meter</span> <span class="attr">id</span>=<span class="string">"level"</span> <span class="attr">max</span>=<span class="string">"100"</span> <span class="attr">min</span>=<span class="string">"0"</span> <span class="attr">low</span>=<span class="string">"59"</span> <span class="attr">high</span>=<span class="string">"90"</span>&gt;</span><span class="tag">&lt;/<span class="name">meter</span>&gt;</span><span class="tag">&lt;<span class="name">br</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">label</span> <span class="attr">for</span>=<span class="string">"inTime"</span>&gt;</span>入学日期:<span class="tag">&lt;/<span class="name">label</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">input</span> <span class="attr">type</span>=<span class="string">"date"</span> <span class="attr">id</span>=<span class="string">"inTime"</span> <span class="attr">name</span>=<span class="string">"inTime"</span>&gt;</span><span class="tag">&lt;<span class="name">br</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">label</span> <span class="attr">for</span>=<span class="string">"leaveTime"</span>&gt;</span>毕业日期:<span class="tag">&lt;/<span class="name">label</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">input</span> <span class="attr">type</span>=<span class="string">"date"</span> <span class="attr">id</span>=<span class="string">"leaveTime"</span> <span class="attr">name</span>=<span class="string">"leaveTime"</span>&gt;</span><span class="tag">&lt;<span class="name">br</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">input</span> <span class="attr">type</span>=<span class="string">"submit"</span>&gt;</span></span><br><span class="line">  <span class="tag">&lt;/<span class="name">fieldset</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">form</span>&gt;</span></span><br></pre></td></tr></table></figure><h2 id="多媒体标签"><a href="#多媒体标签" class="headerlink" title="多媒体标签"></a>多媒体标签</h2><ul><li><p>embed：标签定义嵌入的内容</p></li><li><p>audio：播放音频</p></li><li><p>video：播放视频</p></li></ul><h3 id="多媒体-embed（会使用）"><a href="#多媒体-embed（会使用）" class="headerlink" title="多媒体 embed（会使用）"></a>多媒体 embed（会使用）</h3><p>embed可以用来插入各种多媒体，格式可以是 Midi、Wav、AIFF、AU、MP3等等。url为音频或视频文件及其路径，可以是相对路径或绝对路径。</p><p>因为兼容性问题，我们这里只讲解 插入网络视频， 后面H5会讲解 audio 和video 视频多媒体。 </p><figure class="highlight html"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">embed</span> <span class="attr">src</span>=<span class="string">"http://player.youku.com/player.php/sid/XMTI4MzM2MDIwOA==/v.swf"</span> <span class="attr">allowFullScreen</span>=<span class="string">"true"</span> <span class="attr">quality</span>=<span class="string">"high"</span> <span class="attr">width</span>=<span class="string">"480"</span> <span class="attr">height</span>=<span class="string">"400"</span> <span class="attr">align</span>=<span class="string">"middle"</span> <span class="attr">allowScriptAccess</span>=<span class="string">"always"</span> <span class="attr">type</span>=<span class="string">"application/x-shockwave-flash"</span>&gt;</span><span class="tag">&lt;/<span class="name">embed</span>&gt;</span></span><br></pre></td></tr></table></figure><p>​</p><p> <img src="/media/embed.png"></p><p> 优酷，土豆，爱奇艺，腾讯、乐视等等</p><ol><li>先上传   </li><li>在分享</li></ol><h3 id="多媒体-audio"><a href="#多媒体-audio" class="headerlink" title="多媒体 audio"></a>多媒体 audio</h3><p>HTML5通过<audio>标签来解决音频播放的问题。</audio></p><p>使用相当简单，如下图所示</p><p><img src="/media/1498468026526.png" alt="1498468026526"> </p><p>并且可以通过附加属性可以更友好控制音频的播放，如：</p><p>autoplay 自动播放</p><p>controls 是否显不默认播放控件</p><p>loop 循环播放</p><p>由于版权等原因，不同的浏览器可支持播放的格式是不一样的，如下图供参考</p><p><img src="/media/1498468041058.png" alt="1498468041058"> </p><p>多浏览器支持的方案，如下图</p><p><img src="/media/1498468052965.png" alt="1498468052965"> </p><h3 id="多媒体-video"><a href="#多媒体-video" class="headerlink" title="多媒体 video"></a>多媒体 video</h3><p>#HTML5通过video标签来解决音频播放的问题。</p><p>#同音频播放一样，video使用也相当简单，如下图</p><p><img src="/media/1498468072194.png" alt="1498468072194"> </p><p>同样，通过附加属性可以更友好的控制视频的播放</p><p>autoplay 自动播放</p><p>controls 是否显示默认播放控件</p><p>loop 循环播放</p><p>width 设置播放窗口宽度</p><p>height 设置播放窗口的高度</p><p>由于版权等原因，不同的浏览器可支持播放的格式是不一样的，如下图供参考</p><p><img src="/media/1498468086199.png" alt="1498468086199"> </p><p><strong>多浏览器支持的方案，如下图<em>**</em></strong></p><p><img src="/media/1498468097509.png" alt="1498468097509"></p><h1 id="总结-1"><a href="#总结-1" class="headerlink" title="总结"></a>总结</h1><p> HTML 第二天的主题：</p><p>  熟悉列表—  会使用表格  —  掌握常用表单 </p></h6></h5></h4></h3></h2></h1>]]></content>
      
      
      <categories>
          
          <category> HTML </category>
          
      </categories>
      
      
        <tags>
            
            <tag> Html笔记 </tag>
            
        </tags>
      
    </entry>
    
  
  
</search>
