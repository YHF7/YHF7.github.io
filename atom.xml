<?xml version="1.0" encoding="utf-8"?>
<feed xmlns="http://www.w3.org/2005/Atom">
  <title>不懂IT的男孩</title>
  
  <subtitle>不忘初心，方得始终</subtitle>
  <link href="/atom.xml" rel="self"/>
  
  <link href="http://yoursite.com/"/>
  <updated>2019-01-06T07:34:58.017Z</updated>
  <id>http://yoursite.com/</id>
  
  <author>
    <name>Detail</name>
    
  </author>
  
  <generator uri="http://hexo.io/">Hexo</generator>
  
  <entry>
    <title>网上抓取 Git进阶笔记</title>
    <link href="http://yoursite.com/2019/01/06/Git%E8%BF%9B%E9%98%B6/"/>
    <id>http://yoursite.com/2019/01/06/Git进阶/</id>
    <published>2019-01-06T04:19:49.741Z</published>
    <updated>2019-01-06T07:34:58.017Z</updated>
    
    <content type="html"><![CDATA[<link rel="stylesheet" class="aplayer-secondary-style-marker" href="/assets/css/APlayer.min.css"><script src="/assets/js/APlayer.min.js" class="aplayer-secondary-script-marker"></script><h1 id="前言"><a href="#前言" class="headerlink" title="前言"></a>前言</h1><ul><li>这个git的解说是我在网上看到然后觉得挺好抓取下来给自己用的，并非个人所写</li></ul><p>Git 进阶知识点<br>作为分布式的版本控制系统，Git 的操作指令非常多，但是我们可以灵活的组合使用一些常用指令，就可以玩转大多数的日常 Git 使用场景。</p><h1 id="1、温习-Git-工作-区域"><a href="#1、温习-Git-工作-区域" class="headerlink" title="1、温习 Git 工作  区域"></a>1、温习 Git 工作  区域</h1><p>先来温习一下 Git 的工作区域划分：<b>工作目录、暂存区、本地仓库</b>，实际操作中，我们需要知道每一步操作发生在哪个工作区域，那么再复杂的 Git 问题都能  轻松解决。</p><p>先看一张逻辑工作区域划分图：<br><img src="/git/git_07.png" alt="git_07.png"></p><p>物理  工作区域划分图：<br><img src="/git/git_08.png" alt="git_07.png"></p><p>.git 是隐藏文件夹，大多版本控制软件都会用一个隐藏的文件夹作为其本地版本仓库，SVN 也是如此。用户的每一步操作都被这个隐藏文件夹里的代码记录着。</p><h1 id="2、一次完整的本地提交"><a href="#2、一次完整的本地提交" class="headerlink" title="2、一次完整的本地提交"></a>2、一次完整的本地提交</h1><p>虽然 Git 是分布式的  版本控制系统，工作中，我们都会有远程仓库的概念，但只需熟练玩转本地仓库即可，因为远程仓库不过是别人电脑上的本地仓库。接下来我们来看看一次完整的提交，是如何在三个工作区域之间转换的：<br><img src="/git/git_09.png" alt="git_07.png"></p><p>上图中也引出了 git reset 回滚命令的三个参数：–soft –mixed –hard，三个  参数回滚的程度  逐渐增强，实际使用中可以根据具体需求灵活使用。</p><p>另外不要忽略了 git commit 只提交那些被记录到了暂存区的修改。</p><h1 id="3、使用好-checkout"><a href="#3、使用好-checkout" class="headerlink" title="3、使用好 checkout"></a>3、使用好 checkout</h1><p>checkout 可能是 git 中比较多功能的一个命令。</p><ul><li>git checkout [分支名] : 切换分支。</li><li>git checkout [commit 序列号] : 穿越到指定的某次 commit。</li><li>git checkout -b [分支名] : 创建并切换分支。</li><li>git checkout –ours/theirs : 解决冲突时用来检出某方的提交。</li><li>git checkout [文件名/路径/.] : 丢弃某些文件/文件夹/所有修改。</li></ul><p>所以 checkout 这个检出操作，不仅仅是用来切换分支，还有很多强大的功能；注意点：git checkout . 指令丢弃的文件是无法找回的，使用请谨慎，防止车祸现场。</p><h1 id="4、使用简单的组合命令进行历史修改"><a href="#4、使用简单的组合命令进行历史修改" class="headerlink" title="4、使用简单的组合命令进行历史修改"></a>4、使用简单的组合命令进行历史修改</h1><h3 id="修改历史中的某次提交信息"><a href="#修改历史中的某次提交信息" class="headerlink" title="修改历史中的某次提交信息"></a><b>修改历史中的某次提交信息</b></h3><p>由于某些原因， 有时候总要修改一下提交历史，或者叫重写历史，最简单的修改最近一次提交命令 git commit –amend，然后会进入文本编辑状态，修改你的提交信息。</p><p>但是如果不是最近一次提交，而是历史中较远的前几条信息，那么单纯使用 git commit –amend 就不行了，比如下图这种情况，想要将 “第一次提交” 改为 “首次提交”。<br><img src="/git/git_10.png" alt="git_07.png"></p><p>这时你可能马上会想到 git rebase 变基命令，但是对于这种情况，我们可以使用  git checkout 组合 git commit –amend 完成同样的工作:</p><p>1、先用 git checkout 36ae20…  穿越回第一次提交的节点中，此时我们执行 git log 看到的只有第一次提交的 commit:<br><img src="/git/git_11.png" alt="git_07.png"></p><p>2、那么接下来你也猜到了，执行 git commit –amend 吧。<br>3、然后再次 git checkout master  穿越回当前分支的最新节点。</p><h3 id="合并多次提交历史-为一次"><a href="#合并多次提交历史-为一次" class="headerlink" title="合并多次提交历史  为一次"></a><b>合并多次提交历史  为一次</b></h3><p>合并多次历史是比较常见的需求，同样我们先不用 rebase，使用一些常用的命令；例如我们要将上边例子中的三次提交合并为一次，我们可以先用 reset 回滚多次历史提交，然后 commit –amend 重写提交即可：</p><p>1、 先用 git reset –soft 36ae20…，软回滚到第一次提交(36ae20…是历史中第一次的提交序列号，这里也可以使用 HEAD~3 这种头指针回数的形式)，这时候  git log 又变成了只有第一次的 commit 信息：</p><p><img src="/git/git_11.png" alt="git_07.png"></p><p>但是通过 git status 可以看到其他两次提交都已经被我们  使用 reset –soft 将最近两次提交回滚到了暂存区：<br><img src="/git/git_13.png" alt="git_07.png"></p><p>2、接下来，使用 git commit –amend 重新提交并修改最近一次的 commit 信息即可。</p><p>使用 reset –soft 我们将提交回滚到暂存区，这样可以在重新提交的时候，少写一次 git add。<br>如果多次合并的 commit 不是从最近一次的提交历史  开始，那么久多使用一次 git checkout 。</p><p>你看，貌似不需要  学习 rebase 也能完成 Git 重写历史。</p><h1 id="5、使用-git-rebase-修改历史"><a href="#5、使用-git-rebase-修改历史" class="headerlink" title="5、使用 git rebase  修改历史"></a>5、使用 git rebase  修改历史</h1><p>对于  4、使用简单的组合命令进行历史修改 中的案例，我们可以使用更加高级的 git 工具 rebase，使用 rebase 来干这些事情会显得更加专业，当然 rebase 的功能也更加强大一些。但是依然要写出来 4、使用简单的组合命令进行历史修改 这一部分内容，是想表达，有时候一些问题的解决办法并不唯一，灵活使用一些我们已经学过的  知识点也能曲线救国；假如你还不会使用 rebase，眼下又个紧急的 git 历史合并任务要做，马上去学习 rebase 又有些来不及，那么只能急中生智了。</p><p>接着  4 中的例子，我们使用 git rebase -i 36ae20… ，然后我们会看到如下的文本编辑界面：</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br></pre></td><td class="code"><pre><span class="line">pick 1f737d8 第二次提交</span><br><span class="line">pick 8e401d5 第三次提交</span><br><span class="line">pick bc9c6f0 第四次提交</span><br><span class="line"></span><br><span class="line"># Rebase d973330..bc9c6f0 onto d973330 (3 commands)</span><br><span class="line"></span><br><span class="line">#</span><br><span class="line"></span><br><span class="line"># Commands:</span><br><span class="line"></span><br><span class="line"># p, pick = use commit</span><br><span class="line"></span><br><span class="line"># r, reword = use commit, but edit the commit message</span><br><span class="line"></span><br><span class="line"># e, edit = use commit, but stop for amending</span><br><span class="line"></span><br><span class="line"># s, squash = use commit, but meld into previous commit</span><br><span class="line"></span><br><span class="line"># f, fixup = like &quot;squash&quot;, but discard this commit&apos;s log message</span><br><span class="line"></span><br><span class="line"># x, exec = run command (the rest of the line) using shell</span><br><span class="line"></span><br><span class="line"># d, drop = remove commit</span><br><span class="line"></span><br><span class="line">#</span><br><span class="line"></span><br><span class="line"># These lines can be re-ordered; they are executed from top to bottom.</span><br><span class="line"></span><br><span class="line">#</span><br><span class="line"></span><br><span class="line"># If you remove a line here THAT COMMIT WILL BE LOST.</span><br><span class="line"></span><br><span class="line">#</span><br><span class="line"></span><br><span class="line"># However, if you remove everything, the rebase will be aborted.</span><br><span class="line"></span><br><span class="line">#</span><br><span class="line"></span><br><span class="line"># Note that empty commits are commented out</span><br></pre></td></tr></table></figure><p>注释中，我们看到 reword edit squash 等指令，这里我们把 pick 改为 edit。</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line">edit 1f737d8 第二次提交</span><br><span class="line">pick 8e401d5 第三次提交</span><br><span class="line">pick bc9c6f0 第四次提交</span><br></pre></td></tr></table></figure><p>然后保存退出，接下来 git 会把你带入第二次的 commit 节点， 并有如下提示：<br><img src="/git/git_14.png" alt="git_07.png"></p><p>到这里，我们需要执行 git commit –amend 来执行 commit 修改。编辑保存后，再执行：</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">$ git rebase --<span class="built_in">continue</span></span><br></pre></td></tr></table></figure><p>然后  git 把你带回到 master 分支的最新节点，整个操作完成。</p><p>如果要合并提交，我们需要把 edit 改为 squash：<br><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line">pick 1f737d8 修改为第二次提交</span><br><span class="line">squash 8e401d5 第三次提交</span><br><span class="line">squash bc9c6f0 第四次提交</span><br></pre></td></tr></table></figure></p><p>接下来，git 会进入另一个编辑界面：</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br></pre></td><td class="code"><pre><span class="line"># This is a combination of 3 commits.</span><br><span class="line"></span><br><span class="line"># This is the 1st commit message:</span><br><span class="line"></span><br><span class="line">修改为第二次提交</span><br><span class="line"></span><br><span class="line"># This is the commit message #2:</span><br><span class="line"></span><br><span class="line">第三次提交</span><br><span class="line"></span><br><span class="line"># This is the commit message #3:</span><br><span class="line"></span><br><span class="line">第四次提交</span><br><span class="line"></span><br><span class="line"># Please enter the commit message for your changes. Lines starting</span><br><span class="line"></span><br><span class="line"># with &apos;#&apos; will be ignored, and an empty message aborts the commit.</span><br></pre></td></tr></table></figure><p>这个界面里，可以修改你最终要显示的提交信息，这里直接保存退出，完成合并，此时 git log 显示如下：</p><p><img src="/git/git_15.png" alt="git_15.png"></p><p>除了修改和  合并提交，还可以使用 git rebase 进行拆分、删除提交操作，就不一一演示。</p><p>最终你会发现，使用 git rebase 来修改历史步骤比较繁琐，还不如使用 4、使用简单的组合命令进行历史修改 的方式来操作简单。</p><h4 id="理解分支合并中的-Fast-forward-merge-rebase"><a href="#理解分支合并中的-Fast-forward-merge-rebase" class="headerlink" title="理解分支合并中的 Fast-forward/merge/rebase"></a>理解分支合并中的 Fast-forward/merge/rebase</h4><p>在分支合并的场景  中，我们有时会看到 Fast-forward ， Fast-Forword 很好理解，在 Git 中就是它直译  过来的意思’快进‘，下面我做了四个小视频，来解释 Fast-forward/merge/rebase。</p><p>观看视频前，我们以下图做个 demo 背景说明：</p><p><img src="/git/git_16.png" alt="git_15.png"></p><p>图中有两条分支，master 和 feature1 分支，feature1 是从 master 的 C2 节点拉出来的分支，背景说明完毕。</p><p>Fast-forward 合并模式</p><video controls width="100%" height="100%"><br>    <source src="/git/fast-forward.mov"><br></video><p>Fast-forward 的合并模式永远不会有冲突产生。</p><h4 id="非-Fast-forward-合并模式"><a href="#非-Fast-forward-合并模式" class="headerlink" title="非 Fast-forward 合并模式"></a>非 Fast-forward 合并模式</h4><video controls width="100%" height="100%"><br>    <source src="/git/_nofast-forward.mov"><br></video><p>这种非 Fast-forward 的合并模式下才有可能发生合并冲突。</p><h4 id="merge-过程"><a href="#merge-过程" class="headerlink" title="merge 过程"></a>merge 过程</h4><p>为了和下边的 rebase 做对比，视频中在 feature1 分支中做 git merge master 操作</p><p><video controls width="100%" height="100%"><br>    <source src="/git/from-feature-merge.mov"><br></video></p><h4 id="rebase-过程"><a href="#rebase-过程" class="headerlink" title="rebase 过程"></a>rebase 过程</h4><p><video controls width="100%" height="100%"><br>    <source src="/git/rebase-process.mov"><br></video><br>前边我们用 rebase 来重写历史，这里的 rebase 用来在分支之间合并变基，变基可以理解为改变基点，基点就是某条分支在另一条分支上的起点，这个点是出现分支的点；rebase 和 merge 在从结果上来看，及其相似，但是其过程却大不相同，我想看了视频，你应该理解了。</p><p>rebase 的目的并不是做一次合并，而是为了让某条分支  与主分支的  当前进程保持同步更新，进而在合入主分支的时候，能够以 Fast-forward 的过程合并，避免冲突；rebase 的过程  有冲突的可能，但是这种冲突时发生在当前分支，不会影响主分支，所以也不会影响和你一起合作的其他小伙伴。所以  在多人合作的时候经常使用 rebase 是个好习惯。</p><p>一次完整的 rebase 场景</p><p><video controls width="100%" height="100%"><br>    <source src="/git/rebase-demo.mov"><br></video></p><h1 id="解决冲突"><a href="#解决冲突" class="headerlink" title="解决冲突"></a>解决冲突</h1><p>解决冲突其实很简单，理解了 git 本地操作和 git merge 过程，解决冲突就是个体力活了；cherry-pick/merge/rebase/revert 等操作都有可能发生冲突；</p><p>冲突产生时我们只需要通过 git status 查看具体发生冲突的文件，然后打开编辑文件，选择保留的内容后保存文件，然后继续 merge 或者 rebase，指令分别是：git merge –continuegit rebase –continue；除了 –continue 参数，我们还可以使用 –abort 来终止 merge 或者 rebase 。</p><p>之所以说解决冲突是个体力活主要看，冲突文件的数量和内容多不多，如果冲突较多时，我们一一修改可能就比较累了，这时候可以借助 checkout 指令来保留冲突双方的其中一方修改：</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">git checkout --ours // 保留自己的修改</span><br><span class="line">git checkout --their // 保留别人的修改</span><br></pre></td></tr></table></figure><p>注意点：rebase 的过程，ours 和 theirs 是反过来的。当然，我们也可以借助图像化工具来解决冲突：<br><img src="/git/git_17.png" alt="git"></p><p>选择后，会进入图像化操作：</p><p><img src="/git/git_18.png" alt="git"></p><h1 id="关联远程仓库"><a href="#关联远程仓库" class="headerlink" title="关联远程仓库"></a>关联远程仓库</h1><p>当我们需要关联远程仓库的时候，可以通过 git remote add [远程仓库命名][ssh/http 地址]，例如：</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">git remote add origin git@git.coding.net:demo/demo.git</span><br></pre></td></tr></table></figure><p>这里把远程仓库 <a href="mailto:git@git.coding.net" target="_blank" rel="noopener">git@git.coding.net</a>:demo/demo.git 命名为 origin。一个仓库可以关联多个远程仓库，但是仓库名不能相同：</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">git remote add gh git@git.github.com:demo/demo.git</span><br></pre></td></tr></table></figure><p>这里，我们把另一个远程仓库 <a href="mailto:git@git.github.com" target="_blank" rel="noopener">git@git.github.com</a>:demo/demo.git 命名为 gb 关联了本地仓库，当我们需要同时往多个远程仓库推送文件时，可以使用了。</p><p>最后通过 git remote -v 可以查看本地仓库关联的所有远程仓库。</p><h1 id="git-config-配置文件"><a href="#git-config-配置文件" class="headerlink" title="git config 配置文件"></a>git config 配置文件</h1><p>在 Mac 系统中，git 的配置文件有两处，一个是全局配置文件：~/.gitconfig ，在用户目录下；另一个是当前仓库的配置文件，在 .git 文件夹下，两种重复时，优先使用 .git 文件下的 config 文件。</p><p><img src="/git/git_20.png" alt="git"></p><p>config 文件的内容：</p><p><img src="/git/git_19.png" alt="git"></p><p>一些情况下，我们可以直接编辑 config 文件来修改 git 的配置。</p><h1 id="git-常用指令表-参数省略"><a href="#git-常用指令表-参数省略" class="headerlink" title="git 常用指令表 参数省略"></a>git 常用指令表 参数省略</h1><ul><li>本地操作<ul><li>git init</li><li>git add/rm</li><li>git commit</li><li>git squash</li><li>git rebase</li><li>git checkout</li></ul></li><li>状态查看及信息检查和比较<ul><li>git status</li><li>git log</li><li>git diff</li></ul></li><li>配置及别名<ul><li>git config</li><li>git alias</li></ul></li><li>分支操作<ul><li>git branch</li><li>git merge</li><li>git rebase</li><li>git cherry-pick</li><li>git checkout</li></ul></li><li>远程操作<ul><li>git clone</li><li>git remote</li><li>git push/pull</li><li>git fetch</li><li>git 时间旅行：分支切换、 回退历史、保存/清理现场</li><li>git reset</li><li>git revert</li><li>git stash</li><li>git checkout</li><li>git clean -fdx</li></ul></li></ul><h1 id="后记"><a href="#后记" class="headerlink" title="后记"></a>后记</h1><ul><li>个人认为这个git的笔记还是挺不错的</li><li>假如有侵犯到个人的权益请联系小编，我会及时的屏蔽这额笔记</li></ul>]]></content>
    
    <summary type="html">
    
      
      
        &lt;link rel=&quot;stylesheet&quot; class=&quot;aplayer-secondary-style-marker&quot; href=&quot;/assets/css/APlayer.min.css&quot;&gt;&lt;script src=&quot;/assets/js/APlayer.min.js&quot; cla
      
    
    </summary>
    
      <category term="Git" scheme="http://yoursite.com/categories/Git/"/>
    
    
      <category term="Git" scheme="http://yoursite.com/tags/Git/"/>
    
  </entry>
  
  <entry>
    <title>JavaWeb 实训项目</title>
    <link href="http://yoursite.com/2019/01/01/JavaWeb%E5%AE%9E%E8%AE%AD/"/>
    <id>http://yoursite.com/2019/01/01/JavaWeb实训/</id>
    <published>2019-01-01T12:19:29.596Z</published>
    <updated>2019-01-01T12:57:16.308Z</updated>
    
    <content type="html"><![CDATA[<link rel="stylesheet" class="aplayer-secondary-style-marker" href="/assets/css/APlayer.min.css"><script src="/assets/js/APlayer.min.js" class="aplayer-secondary-script-marker"></script><h1 id="前言"><a href="#前言" class="headerlink" title="前言"></a>前言</h1><ul><li>先来吐槽一下这个项目</li><li>既然是吐槽，我先从自身出发，作为一个前端为主的开发人员我看到这个界面的是我是忍不住的，哪有人做界面这么难看（不过从后端的角度出发界面也就那么回事吧能实现业务逻辑就好）</li><li>虽然是后端，也用了 java 的语言 但是这样绕来绕去的写法看得我头皮发麻，我还是喜欢简单明了的写法</li><li>不过既然是一个学习的项目那就要好好的去对待</li><li>这次只是分享项目不是写，看着可以的可以下来看看研究研究还是可以的</li></ul><h1 id="所需工具-资料"><a href="#所需工具-资料" class="headerlink" title="所需工具/资料"></a>所需工具/资料</h1><ul><li>mac 10.13.3</li><li>mysql 5.0+ 的版本（不要太高不然链接方式有问题）</li><li>Intelli IDEA 2018 （软件自己去官网下，破解不会可以私聊我）</li></ul><h1 id="项目源码"><a href="#项目源码" class="headerlink" title="项目源码"></a>项目源码</h1><ul><li>是存放在一个大的文件内可以全部都下了，使用浏览器迅雷可以下单独的哦</li><li>里面有 sql 直接导入就可以了</li><li>Github(<a href="https://github.com/YHF7/JavaWeb/tree/master/netstop" target="_blank" rel="noopener">https://github.com/YHF7/JavaWeb/tree/master/netstop</a>)</li></ul><h1 id="效果图"><a href="#效果图" class="headerlink" title="效果图"></a>效果图</h1><p><img src="/javaweb/j1.jpg" alt="javaweb"><br><img src="/javaweb/j2.jpg" alt="javaweb"><br><img src="/javaweb/j3.jpg" alt="javaweb"><br><img src="/javaweb/j4.jpg" alt="javaweb"><br><img src="/javaweb/j5.jpg" alt="javaweb"><br><img src="/javaweb/j6.jpg" alt="javaweb"></p>]]></content>
    
    <summary type="html">
    
      
      
        &lt;link rel=&quot;stylesheet&quot; class=&quot;aplayer-secondary-style-marker&quot; href=&quot;/assets/css/APlayer.min.css&quot;&gt;&lt;script src=&quot;/assets/js/APlayer.min.js&quot; cla
      
    
    </summary>
    
      <category term="JavaWeb" scheme="http://yoursite.com/categories/JavaWeb/"/>
    
    
      <category term="JavaWeb 案例" scheme="http://yoursite.com/tags/JavaWeb-%E6%A1%88%E4%BE%8B/"/>
    
  </entry>
  
  <entry>
    <title>XAMPP 配置虚拟域名/localhost重定向</title>
    <link href="http://yoursite.com/2019/01/01/XAMPP%E9%85%8D%E7%BD%AE%E8%99%9A%E6%8B%9F%E5%9F%9F%E5%90%8D/"/>
    <id>http://yoursite.com/2019/01/01/XAMPP配置虚拟域名/</id>
    <published>2019-01-01T11:44:49.175Z</published>
    <updated>2019-01-01T12:57:27.366Z</updated>
    
    <content type="html"><![CDATA[<link rel="stylesheet" class="aplayer-secondary-style-marker" href="/assets/css/APlayer.min.css"><script src="/assets/js/APlayer.min.js" class="aplayer-secondary-script-marker"></script><h1 id="前言"><a href="#前言" class="headerlink" title="前言"></a>前言</h1><ul><li>说到这个 xampp 这个东西配置虚拟域名，小编一肚子的气啊，搞技术这些东西还是网上搞比较容易。</li><li>相同的方法同样的配置，白天弄了一天还是不行，晚上洗完澡把东西都回执到原样结果就可以了</li><li>记录下来以后配置的时候可以用</li></ul><h1 id="坑提醒"><a href="#坑提醒" class="headerlink" title="坑提醒"></a>坑提醒</h1><ol><li>mac 下域名不可使用 test_1.cn 类似此种格式的域名，windows 下面可以，mac 下不可以，今天碰到的大坑</li><li>hosts 填写的域名和 httpd-vhosts.conf 中的域名请保持一致</li><li>ErrorLog 和 CustomLog 这两个最好就是不要修改吧，不然很容易出现权限不足就报错的，之前我也试过（导出错误一般都不回去看吧，也看不懂最好就不要动了）</li><li>网上说的添加什么这些不用去添加的，添加了反而错了（因为本来自带的就是有访问权限的）</li></ol><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><span class="line">&lt;Directory &quot;/Applications/XAMPP/xamppfiles/htdocs&quot;&gt;</span><br><span class="line">        #Options Indexes FollowSymLinks ExecCGI Includes #don&apos;t permission see list</span><br><span class="line">        Options All</span><br><span class="line">        AllowOverride All</span><br><span class="line">        Order allow,deny</span><br><span class="line">        Allow from all</span><br><span class="line">&lt;/Directory&gt;</span><br></pre></td></tr></table></figure><ol start="5"><li>在配置完后 localhost 地址也会被改变，无法访问同目录下的其他项目，所以我们要做一次重定向</li><li>配置完记得重启服务器不然看不到修改的效果然后就觉得自己弄错了</li></ol><h1 id="所需工具-资料"><a href="#所需工具-资料" class="headerlink" title="所需工具/资料"></a>所需工具/资料</h1><ul><li>mac 10.13.3</li><li>Xampp （7.0 版本基本无差）</li><li>VS code (vim 个人觉得麻烦还是用界面的快一点)</li></ul><h1 id="配置"><a href="#配置" class="headerlink" title="配置"></a>配置</h1><h2 id="配置本地域名"><a href="#配置本地域名" class="headerlink" title="配置本地域名"></a>配置本地域名</h2><ol><li>前往本地的/etx/hosts 打开 hosts 文件（我用的是 vscode，你们自己可以随意，也可以用命令直接修改）<br><img src="/tp/xp1.png" alt="xp1"></li><li>填写自己想要的域名</li></ol><ul><li>127.0.0.1 zerg.cn # added by Apache Friends XAMPP （我自己用的）</li><li>图片中黄色部分，可写可不写，最好写上吧<br><img src="/tp/xp2.png" alt="xp2"></li></ul><h2 id="配置-xampp-httpd-conf-其实就是检查开启了域名配置了没有"><a href="#配置-xampp-httpd-conf-其实就是检查开启了域名配置了没有" class="headerlink" title="配置 xampp httpd.conf(其实就是检查开启了域名配置了没有)"></a>配置 xampp httpd.conf(其实就是检查开启了域名配置了没有)</h2><ol><li>前往本地 xampp/xamppfiles/etc/httpd.conf</li><li>查找 etc/extra/httpd-vhosts.conf 看看是否打开，如果被注释了去掉#<br><img src="/tp/xp3.png" alt="xp3"></li></ol><h2 id="配置-xampp-httpd-vhosts-conf-域名的向导"><a href="#配置-xampp-httpd-vhosts-conf-域名的向导" class="headerlink" title="配置 xampp httpd-vhosts.conf (域名的向导)"></a>配置 xampp httpd-vhosts.conf (域名的向导)</h2><ol><li>前往本地 xampp/xamppfiles/etc/extra/httpd-vhosts.conf</li><li>添加域名导向(ServerName 必须要和定义的域名一致)<ul><li>*:80 表示端口</li><li>DocumentRoot 表示项目的目录</li><li>ServerName 你要使用的虚拟域名，这里和前面 host 文件中的保持一致，不然会出错</li><li>配置以上两个就可以，重启 Apache 就可以使用你配置的虚拟域名</li></ul></li></ol><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><span class="line">&lt;VirtualHost *:80&gt;</span><br><span class="line">  #  ServerAdmin webmaster@dummy-host2.example.com</span><br><span class="line">    DocumentRoot &quot;/Applications/XAMPP/xamppfiles/htdocs/zerg/public&quot;</span><br><span class="line">    ServerName zerg.cn</span><br><span class="line">    ErrorLog &quot;logs/dummy-host2.example.com-error_log&quot;</span><br><span class="line">    CustomLog &quot;logs/dummy-host2.example.com-access_log&quot; common</span><br><span class="line">&lt;/VirtualHost&gt;</span><br></pre></td></tr></table></figure><p><img src="/tp/xp4.png" alt="xp4"></p><h1 id="最终结果（本地-自定义）"><a href="#最终结果（本地-自定义）" class="headerlink" title="最终结果（本地/自定义）"></a>最终结果（本地/自定义）</h1><ol><li>域名<br><img src="/tp/xp5.png" alt="xp5"></li><li>本地<br><img src="/tp/xp6.png" alt="xp6"></li></ol><h1 id="localhost-重定向"><a href="#localhost-重定向" class="headerlink" title="localhost 重定向"></a>localhost 重定向</h1><ul><li>我们定义完后地址访问路径也会被改变，在多项目的情况下就无法查看其他的项目<br><img src="/tp/xp7.png" alt="xp7"></li><li>解决的方法就是我们给他做一个重定向，然后重启服务器<br><img src="/tp/xp8.png" alt="xp8"></li><li>这样我们就可以看到项目目录了<br><img src="/tp/xp9.png" alt="xp9"></li></ul><h1 id="后记"><a href="#后记" class="headerlink" title="后记"></a>后记</h1><ul><li>完整的 XAMPP 配置虚拟域名,遇到问题欢迎添加微信 qq 一起学习交流</li><li>这只是本人的一些解决做法，个人笔记，如有侵权请通知删除</li></ul>]]></content>
    
    <summary type="html">
    
      
      
        &lt;link rel=&quot;stylesheet&quot; class=&quot;aplayer-secondary-style-marker&quot; href=&quot;/assets/css/APlayer.min.css&quot;&gt;&lt;script src=&quot;/assets/js/APlayer.min.js&quot; cla
      
    
    </summary>
    
      <category term="插件/配置" scheme="http://yoursite.com/categories/%E6%8F%92%E4%BB%B6-%E9%85%8D%E7%BD%AE/"/>
    
    
      <category term="PHP" scheme="http://yoursite.com/tags/PHP/"/>
    
  </entry>
  
  <entry>
    <title>移动web期末大作业</title>
    <link href="http://yoursite.com/2018/12/11/%E7%A7%BB%E5%8A%A8web%E6%9C%9F%E6%9C%AB/"/>
    <id>http://yoursite.com/2018/12/11/移动web期末/</id>
    <published>2018-12-11T04:35:43.954Z</published>
    <updated>2018-12-11T04:45:48.497Z</updated>
    
    <content type="html"><![CDATA[<link rel="stylesheet" class="aplayer-secondary-style-marker" href="/assets/css/APlayer.min.css"><script src="/assets/js/APlayer.min.js" class="aplayer-secondary-script-marker"></script><h2 id="前言"><a href="#前言" class="headerlink" title="前言"></a>前言</h2><ul><li>这是一个移动web的环保登陆页设计</li><li>是我们学校的期末考试大作业来的</li><li>主要是用来检测，css，表单的使用</li></ul><h2 id="技术-插件"><a href="#技术-插件" class="headerlink" title="技术/插件"></a>技术/插件</h2><ul><li>js<ul><li>jquery.min.js</li><li>bootstrap.min.js</li></ul></li><li>css<ul><li>animate.css  初始化页面</li><li>bootstrap.min.css </li><li>font-awesome 字体处理</li><li>style.css 布局处理</li></ul></li></ul><h2 id="项目地址传送"><a href="#项目地址传送" class="headerlink" title="项目地址传送"></a><a href="https://github.com/YHF7/HtmlCss/tree/master/%E7%A7%BB%E5%8A%A8web%E6%9C%9F%E6%9C%AB%E5%A4%A7%E4%BD%9C%E4%B8%9A" target="_blank" rel="noopener">项目地址传送</a></h2><h2 id="效果图"><a href="#效果图" class="headerlink" title="效果图"></a>效果图</h2><p><img src="/web/login.jpg" alt="登录"></p>]]></content>
    
    <summary type="html">
    
      
      
        &lt;link rel=&quot;stylesheet&quot; class=&quot;aplayer-secondary-style-marker&quot; href=&quot;/assets/css/APlayer.min.css&quot;&gt;&lt;script src=&quot;/assets/js/APlayer.min.js&quot; cla
      
    
    </summary>
    
      <category term="Css" scheme="http://yoursite.com/categories/Css/"/>
    
    
      <category term="Css笔记/案例" scheme="http://yoursite.com/tags/Css%E7%AC%94%E8%AE%B0-%E6%A1%88%E4%BE%8B/"/>
    
  </entry>
  
  <entry>
    <title>node 后端服务器开发插件</title>
    <link href="http://yoursite.com/2018/12/07/node%E5%90%8E%E7%AB%AF%E5%BC%80%E5%8F%91%E6%8F%92%E4%BB%B6/"/>
    <id>http://yoursite.com/2018/12/07/node后端开发插件/</id>
    <published>2018-12-07T03:48:11.401Z</published>
    <updated>2018-12-07T03:49:04.362Z</updated>
    
    <content type="html"><![CDATA[<link rel="stylesheet" class="aplayer-secondary-style-marker" href="/assets/css/APlayer.min.css"><script src="/assets/js/APlayer.min.js" class="aplayer-secondary-script-marker"></script><h2 id="插件目录-插件官网"><a href="#插件目录-插件官网" class="headerlink" title="插件目录 插件官网"></a>插件目录 <a href="https://www.npmjs.com/" target="_blank" rel="noopener">插件官网</a></h2><ul><li>ES2015（es6）</li><li>express node 的前端模板</li><li>nodemon node 改变监听</li><li>config-lite 1.5.0 文件的遍历</li><li>chalk 粉笔插件变色</li><li>mongoose mongodb 使用插件</li><li>body-parser 配置解析表单 POST 请求体插件</li></ul><h2 id="ES2015"><a href="#ES2015" class="headerlink" title="ES2015"></a>ES2015</h2><ul><li>都是用来处理 es6 的兼容的直接放 json 文件里面安装就好想装新版本也可以一个一个装</li></ul><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br></pre></td><td class="code"><pre><span class="line"><span class="string">"babel"</span>: <span class="string">"^6.23.0"</span>,</span><br><span class="line"><span class="string">"babel-cli"</span>: <span class="string">"^6.26.0"</span>,</span><br><span class="line"><span class="string">"babel-core"</span>: <span class="string">"^6.24.0"</span>,</span><br><span class="line"><span class="string">"babel-preset-es2015"</span>: <span class="string">"^6.24.1"</span>,</span><br><span class="line"><span class="string">"babel-preset-stage-3"</span>: <span class="string">"^6.22.1"</span>,</span><br><span class="line"><span class="string">"babel-register"</span>: <span class="string">"^6.24.0"</span>,</span><br><span class="line"><span class="string">"babel-plugin-transform-async-to-generator"</span>: <span class="string">"^6.24.1"</span>,</span><br><span class="line"><span class="string">"babel-plugin-transform-es2015-classes"</span>: <span class="string">"^6.24.1"</span>,</span><br><span class="line"><span class="string">"babel-plugin-transform-es2015-modules-commonjs"</span>: <span class="string">"^6.24.1"</span>,</span><br><span class="line"><span class="string">"babel-plugin-transform-export-extensions"</span>: <span class="string">"^6.22.0"</span></span><br></pre></td></tr></table></figure><ul><li>.babelrc 配置 es6</li></ul><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><span class="line">&#123;</span><br><span class="line">    <span class="string">"presets"</span>: [<span class="string">"stage-3"</span>],</span><br><span class="line">    <span class="string">"plugins"</span>: [</span><br><span class="line">        <span class="string">"transform-async-to-generator"</span>,</span><br><span class="line">        <span class="string">"transform-es2015-modules-commonjs"</span>,</span><br><span class="line">        <span class="string">"transform-export-extensions"</span></span><br><span class="line">    ]</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><ul><li>index.js （默认启动文件）</li></ul><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line"><span class="built_in">require</span>(<span class="string">"babel-core/register"</span>);</span><br><span class="line"><span class="built_in">require</span>(<span class="string">"./app.js"</span>); <span class="comment">// 被调用的入口文件</span></span><br></pre></td></tr></table></figure><h2 id="express"><a href="#express" class="headerlink" title="express"></a>express</h2><ul><li>node 的前端开发模板</li></ul><ol><li>安装</li></ol><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">$ sudo cnpm i express -S</span><br></pre></td></tr></table></figure><ol start="2"><li>使用</li></ol><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">import</span> Express <span class="keyword">from</span> <span class="string">"express"</span>; <span class="comment">//引入</span></span><br><span class="line"><span class="keyword">const</span> app = Express(); <span class="comment">//定义</span></span><br><span class="line"></span><br><span class="line">app.all(<span class="string">"/*"</span>, (req, res, next) =&gt; &#123;</span><br><span class="line">  <span class="comment">//设置跨域请求报文头</span></span><br><span class="line">  <span class="comment">//设置允许跨域响应报文头</span></span><br><span class="line">  <span class="comment">//设置跨域</span></span><br><span class="line">  <span class="comment">// 启用 Node 服务器端的 cors 跨域</span></span><br><span class="line">  res.header(<span class="string">"Access-Control-Allow-Origin"</span>, <span class="string">"*"</span>);</span><br><span class="line">  res.header(<span class="string">"Access-Control-Allow-Headers"</span>, <span class="string">"X-Requested-With"</span>);</span><br><span class="line">  res.header(<span class="string">"Access-Control-Allow-Methods"</span>, <span class="string">"*"</span>);</span><br><span class="line"></span><br><span class="line">  res.setHeader(<span class="string">"Content-Type"</span>, <span class="string">"application/json;charset=utf-8"</span>);</span><br><span class="line">  next();</span><br><span class="line">&#125;);</span><br><span class="line"></span><br><span class="line">app.get(<span class="string">"/"</span>, (req, res) =&gt; &#123;</span><br><span class="line">  <span class="comment">// 路由判断</span></span><br><span class="line">  res.send(<span class="string">`hello world!`</span>);</span><br><span class="line">&#125;);</span><br><span class="line"></span><br><span class="line">app.listen(<span class="number">5000</span>, () =&gt; &#123;</span><br><span class="line">  <span class="comment">//开启服务</span></span><br><span class="line">  <span class="built_in">console</span>.log(<span class="string">"server running http://localhost:"</span> + <span class="number">5000</span>);</span><br><span class="line">&#125;);</span><br></pre></td></tr></table></figure><h2 id="nodemon"><a href="#nodemon" class="headerlink" title="nodemon"></a>nodemon</h2><ul><li>nodemon 是 node 的改变监听 ，只要改变就会重新编译，就不需要每次改变都手动改变 （也可以作为全局安装）</li></ul><ol><li>安装</li></ol><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">$ sudo cnpm i nodemon -S 本地安装</span><br><span class="line">$ sudo cnpm i nodemon -g 全局安装</span><br></pre></td></tr></table></figure><ol start="2"><li>使用</li></ol><ul><li><p>本地安装使用 在 package.json 定义</p><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line"><span class="string">"scripts"</span>: &#123;</span><br><span class="line">    <span class="string">"start"</span>: <span class="string">"nodemon index.js"</span></span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><ul><li>终端 sudo npm run start 调用</li></ul></li><li>全局方法 直接在终端 sudo nodemon index.js</li></ul><h2 id="config-lite-1-5-0"><a href="#config-lite-1-5-0" class="headerlink" title="config-lite 1.5.0"></a>config-lite 1.5.0</h2><ul><li>这是一个用了遍历查找文件的插件，其实简单的来说就是用来定义一些公共的参数，调用的时候方便一点</li></ul><ol><li>安装</li></ol><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">$ sudo cnpm i config-lite@1.5 -S</span><br></pre></td></tr></table></figure><ol start="2"><li><p>配置</p><ul><li>默认是查找 config 下的 default.js 文件（为了用起来方便我们就不改变直接定义）</li><li>在项目目录新建 config 文件夹 在里面建立 default.js 文件 然后定义一些公共的元素或者是可变的元素</li></ul><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">"use strict"</span>;</span><br><span class="line"></span><br><span class="line"><span class="built_in">module</span>.exports = &#123;</span><br><span class="line">  port: <span class="number">5000</span>,</span><br><span class="line">  url: <span class="string">"mongodb://localhost/myelm"</span>,</span><br><span class="line">  session: &#123;</span><br><span class="line">    name: <span class="string">"SID"</span>,</span><br><span class="line">    secret: <span class="string">"SID"</span>,</span><br><span class="line">    cookie: &#123;</span><br><span class="line">      httpOnly: <span class="literal">true</span>,</span><br><span class="line">      secure: <span class="literal">false</span>,</span><br><span class="line">      maxAge: <span class="number">365</span> * <span class="number">24</span> * <span class="number">60</span> * <span class="number">60</span> * <span class="number">1000</span></span><br><span class="line">    &#125;</span><br><span class="line">  &#125;</span><br><span class="line">&#125;;</span><br></pre></td></tr></table></figure></li><li><p>调用</p></li></ol><ul><li>调用就比较简单</li></ul><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">import</span> config <span class="keyword">from</span> <span class="string">"config-lite"</span>; <span class="comment">//引入</span></span><br><span class="line"></span><br><span class="line">config.url; <span class="comment">//好像用对象那样使用，不过要你返回的是个对象才可以</span></span><br></pre></td></tr></table></figure><h2 id="chalk"><a href="#chalk" class="headerlink" title="chalk"></a>chalk</h2><ul><li>这个插件主要是用了改变输出的颜色，在不同的情况定义输出的字体颜色</li></ul><ol><li>安装</li></ol><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">$ sudo cnpm i chalk -S</span><br></pre></td></tr></table></figure><ol start="2"><li>使用</li></ol><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">import</span> chalk <span class="keyword">from</span> <span class="string">"chalk"</span>; <span class="comment">//引入</span></span><br><span class="line">chalk.yellow(<span class="string">"连接数据库成功"</span>); <span class="comment">// 直接 chalk.颜色(变色内容)</span></span><br></pre></td></tr></table></figure><h2 id="mongoose-官方"><a href="#mongoose-官方" class="headerlink" title="mongoose 官方"></a>mongoose <a href="https://www.npmjs.com/package/mongoose" target="_blank" rel="noopener">官方</a></h2><ul><li>数据库就自己装这里不说，直接安装全局的</li><li>这是一个 mongodb 数据库的开发插件</li></ul><ol><li>安装</li></ol><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">$ sudo cnpm i mongoose -S</span><br></pre></td></tr></table></figure><ol start="2"><li>使用</li></ol><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">import</span> mongoose <span class="keyword">from</span> <span class="string">"mongoose"</span>; <span class="comment">//引入</span></span><br><span class="line"></span><br><span class="line">mongoose.connect(</span><br><span class="line">  <span class="string">"mongodb://localhost/myelm"</span>,</span><br><span class="line">  &#123;</span><br><span class="line">    <span class="comment">//连接数据库</span></span><br><span class="line">    useNewUrlParser: <span class="literal">true</span></span><br><span class="line">  &#125;</span><br><span class="line">);</span><br><span class="line"></span><br><span class="line"><span class="keyword">const</span> db = mongoose.connection;</span><br><span class="line"></span><br><span class="line">db.once(<span class="string">"open"</span>, () =&gt; &#123;</span><br><span class="line">  <span class="built_in">console</span>.log(chalk.yellow(<span class="string">"连接数据库成功"</span>));</span><br><span class="line">&#125;);</span><br><span class="line"></span><br><span class="line">db.on(<span class="string">"error"</span>, <span class="function"><span class="keyword">function</span>(<span class="params">error</span>) </span>&#123;</span><br><span class="line">  <span class="built_in">console</span>.error(</span><br><span class="line">    chalk.red(<span class="string">"Error in MongoDb connection: "</span> + error + <span class="string">" 数据库有问题"</span>)</span><br><span class="line">  );</span><br><span class="line">  mongoose.disconnect();</span><br><span class="line">&#125;);</span><br><span class="line"></span><br><span class="line">db.on(<span class="string">"close"</span>, <span class="function"><span class="keyword">function</span>(<span class="params"></span>) </span>&#123;</span><br><span class="line">  <span class="built_in">console</span>.log(chalk.red(<span class="string">"数据库断开，重新连接数据库"</span>));</span><br><span class="line">  mongoose.connect(</span><br><span class="line">    config.url,</span><br><span class="line">    &#123;</span><br><span class="line">      server: &#123;</span><br><span class="line">        auto_reconnect: <span class="literal">true</span></span><br><span class="line">      &#125;</span><br><span class="line">    &#125;</span><br><span class="line">  );</span><br><span class="line">&#125;);</span><br><span class="line"></span><br><span class="line"><span class="keyword">const</span> Schema = mongoose.Schema;</span><br><span class="line"><span class="keyword">const</span> ObjectId = Schema.ObjectId;</span><br><span class="line"></span><br><span class="line"><span class="keyword">const</span> BlogPost = <span class="keyword">new</span> Schema(&#123;</span><br><span class="line">  <span class="comment">//定义数据库</span></span><br><span class="line">  author: ObjectId,</span><br><span class="line">  title: <span class="built_in">String</span>,</span><br><span class="line">  body: <span class="built_in">String</span>,</span><br><span class="line">  date: <span class="built_in">Date</span></span><br><span class="line">&#125;);</span><br></pre></td></tr></table></figure><h2 id="body-parser"><a href="#body-parser" class="headerlink" title="body-parser"></a>body-parser</h2><ul><li>这个是解析表单 post 请求体的插件</li></ul><ol><li>安装</li></ol><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">$ sudo cnpm i body-parser -S</span><br></pre></td></tr></table></figure><ol start="2"><li>配置</li></ol><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">// 在主页定义 一定要在路由判断之前才能生效</span></span><br><span class="line"><span class="comment">// 配置解析表单 POST 请求体插件 （注意：一定要在 app.use(router) 之前）</span></span><br><span class="line"><span class="comment">// parse application/x-www-form-urlencoded 解析application</span></span><br><span class="line">app.use(</span><br><span class="line">  bodyParser.urlencoded(&#123;</span><br><span class="line">    extended: <span class="literal">false</span></span><br><span class="line">  &#125;)</span><br><span class="line">);</span><br><span class="line"><span class="comment">// parse application/json 解析</span></span><br><span class="line">app.use(bodyParser.json());</span><br></pre></td></tr></table></figure><ol start="3"><li>调用</li></ol><ul><li>调用就很简单不用引入，传过来的数据解析在 req.body 里面</li></ul><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line">app.post(<span class="string">"/api/ts"</span>, (req, res) =&gt; &#123;</span><br><span class="line">  <span class="built_in">console</span>.log(req.body);</span><br><span class="line">&#125;);</span><br></pre></td></tr></table></figure>]]></content>
    
    <summary type="html">
    
      
      
        &lt;link rel=&quot;stylesheet&quot; class=&quot;aplayer-secondary-style-marker&quot; href=&quot;/assets/css/APlayer.min.css&quot;&gt;&lt;script src=&quot;/assets/js/APlayer.min.js&quot; cla
      
    
    </summary>
    
      <category term="插件/配置" scheme="http://yoursite.com/categories/%E6%8F%92%E4%BB%B6-%E9%85%8D%E7%BD%AE/"/>
    
    
      <category term="npm" scheme="http://yoursite.com/tags/npm/"/>
    
  </entry>
  
  <entry>
    <title>YHF 管理系统（javaweb）</title>
    <link href="http://yoursite.com/2018/12/01/JavaWeb1/"/>
    <id>http://yoursite.com/2018/12/01/JavaWeb1/</id>
    <published>2018-12-01T14:48:35.118Z</published>
    <updated>2018-12-01T15:00:17.963Z</updated>
    
    <content type="html"><![CDATA[<link rel="stylesheet" class="aplayer-secondary-style-marker" href="/assets/css/APlayer.min.css"><script src="/assets/js/APlayer.min.js" class="aplayer-secondary-script-marker"></script><h1 id="前言"><a href="#前言" class="headerlink" title="前言"></a>前言</h1><ol><li>这是一个期末考试项目</li><li>老师出的一个题目 要求有 数据库、css、js、等特效 至少 3 个页面以上</li><li>所有做了这么等一个小项目</li></ol><h1 id="项目所用技术"><a href="#项目所用技术" class="headerlink" title="项目所用技术"></a>项目所用技术</h1><ul><li>页面<ul><li>架构主要都是 javaweb （主页是 bootcss 的页面）</li><li>部分用到了 js</li></ul></li><li>数据库<ul><li>mysql</li></ul></li><li>插件<ul><li>js<ul><li>jq</li><li>echarts 图表插件</li></ul></li><li>css<ul><li>bootcss</li></ul></li></ul></li></ul><h1 id="项目源码地址"><a href="#项目源码地址" class="headerlink" title="项目源码地址"></a><a href="https://github.com/YHF7/JavaWeb/tree/master/qmxmyhf" target="_blank" rel="noopener">项目源码地址</a></h1><h1 id="项目效果图"><a href="#项目效果图" class="headerlink" title="项目效果图"></a>项目效果图</h1><h3 id="登录页"><a href="#登录页" class="headerlink" title="登录页"></a>登录页</h3><p><img src="/qmxmyhf/q1.png" alt="登录"></p><h3 id="注册页"><a href="#注册页" class="headerlink" title="注册页"></a>注册页</h3><p><img src="/qmxmyhf/q2.png" alt="登录"></p><h3 id="主页"><a href="#主页" class="headerlink" title="主页"></a>主页</h3><p><img src="/qmxmyhf/q3.png" alt="登录"></p><h3 id="用户图表页"><a href="#用户图表页" class="headerlink" title="用户图表页"></a>用户图表页</h3><p><img src="/qmxmyhf/q4.png" alt="登录"></p><h3 id="修改用户信息页"><a href="#修改用户信息页" class="headerlink" title="修改用户信息页"></a>修改用户信息页</h3><p><img src="/qmxmyhf/q5.png" alt="登录"></p><h3 id="数据库结构"><a href="#数据库结构" class="headerlink" title="数据库结构"></a>数据库结构</h3><p><img src="/qmxmyhf/qmxmyhf1.png" alt="登录"></p>]]></content>
    
    <summary type="html">
    
      
      
        &lt;link rel=&quot;stylesheet&quot; class=&quot;aplayer-secondary-style-marker&quot; href=&quot;/assets/css/APlayer.min.css&quot;&gt;&lt;script src=&quot;/assets/js/APlayer.min.js&quot; cla
      
    
    </summary>
    
      <category term="JavaWeb" scheme="http://yoursite.com/categories/JavaWeb/"/>
    
    
      <category term="JavaWeb 案例" scheme="http://yoursite.com/tags/JavaWeb-%E6%A1%88%E4%BE%8B/"/>
    
  </entry>
  
  <entry>
    <title>mpvue搭建初始小程序</title>
    <link href="http://yoursite.com/2018/11/24/%E6%90%AD%E5%BB%BA%E5%B0%8F%E7%A8%8B%E5%BA%8F/"/>
    <id>http://yoursite.com/2018/11/24/搭建小程序/</id>
    <published>2018-11-24T13:05:40.356Z</published>
    <updated>2018-11-24T13:31:03.506Z</updated>
    
    <content type="html"><![CDATA[<link rel="stylesheet" class="aplayer-secondary-style-marker" href="/assets/css/APlayer.min.css"><script src="/assets/js/APlayer.min.js" class="aplayer-secondary-script-marker"></script><h1 id="前言"><a href="#前言" class="headerlink" title="前言"></a>前言</h1><p>前段时间，美团开源了 mpvue 这个项目，使得我们又多了一种用来开发小程序的框架选项。由于 mpvue 框架是完全基于 Vue 框架的（重写了其 runtime 和 compiler），因此在用法上面是高度和 Vue 一致的（某些功能由于受限于小程序环境本身的原因而不能使用），这给使用过 Vue 开发 Web 应用的前端开发者提供了极低的切换门槛来开发小程序。</p><p>没学过 vue 的想去学一下先</p><h1 id="开始"><a href="#开始" class="headerlink" title="开始"></a>开始</h1><h2 id="1-开发环境"><a href="#1-开发环境" class="headerlink" title="1. 开发环境"></a>1. 开发环境</h2><pre><code>- 系统自己喜欢 （本人 OS 10.0）- node.js npm (最好切换为国内镜像 npm set registry https://registry.npm.taobao.org/)- vue-cli （npm install vue-cli -g）- 微信开发者工具 https://developers.weixin.qq.com/miniprogram/dev/devtools/download.html- 开发软件 vscode （个人喜欢）- 软件内部插件 Vetur （vue语法高亮）</code></pre><h2 id="2-架构第一个-mpvue-的小程序"><a href="#2-架构第一个-mpvue-的小程序" class="headerlink" title="2. 架构第一个 mpvue 的小程序"></a>2. 架构第一个 mpvue 的小程序</h2><pre><code>- vue init mpvue/mpvue-quickstart firstapp  （在命令行运行，firstapp项目名自己定）- 然后就会看到这个 （如果自己代码不是很规范的话eslint那里请选n）<figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br></pre></td><td class="code"><pre><span class="line">? Project name firstapp</span><br><span class="line">? wxmp appid touristappid</span><br><span class="line">? Project description A Mpvue project</span><br><span class="line">? Author kevinzhang 邮箱</span><br><span class="line">? Vue build runtime</span><br><span class="line">? Use Vuex? Yes</span><br><span class="line">? Use ESLint to lint your code? Yes</span><br><span class="line">? Pick an ESLint preset Standard</span><br><span class="line">? 小程序测试，敬请关注最新微信开发者工具的“测试报告”功能</span><br><span class="line"></span><br><span class="line">vue-cli · Generated <span class="string">"firstapp"</span>.</span><br><span class="line"></span><br><span class="line">To get started:</span><br><span class="line"></span><br><span class="line">    <span class="built_in">cd</span> firstapp</span><br><span class="line">    npm install</span><br><span class="line">    npm run dev</span><br><span class="line"></span><br><span class="line">Documentation can be found at http://mpvue.com</span><br></pre></td></tr></table></figure>- 安装好后    - cd firstapp    - npm install (这一步是安装要用的插件和依赖)- 执行命令让这个代码运行起来，进入开发模式    - npm run dev- 成功运行后，这个项目代码就进入开发模式，一旦有源代码发生修改，就会触发自动编译。因为mpvue使用的是Vue + HTML Web的开发方式开发小程序，它最终还是需要被转换成小程序的代码才可以在小程序环境运行，所以这里的自动编译的目的就是要把Web代码编译成小程序代码。编译后的代码会在dist目录下：![编译成功](/xcx/3.webp)</code></pre><h2 id="3-部署到微信开发者工具"><a href="#3-部署到微信开发者工具" class="headerlink" title="3. 部署到微信开发者工具"></a>3. 部署到微信开发者工具</h2><pre><code>- 打开微信开发者工具，选择新增项目![新增](/xcx/1.webp)- 项目目录选择指向firstapp目录：![新增](/xcx/4.webp)- 点击“确定”按钮，进入小程序开发主界面，在左边的小程序模拟器中就能看到firstapp小程序的执行结果了：![新增](/xcx/5.webp)- 【提醒】记得在微信开发者工具的菜单》设置 》编辑设置 中，将“保存时自动编译小程序”勾选上，这样当mpvue的代码自动编译完成后，模拟器才会自动刷新界面。![新增](/xcx/2.webp)</code></pre><h1 id="小结"><a href="#小结" class="headerlink" title="小结"></a>小结</h1><ul><li>本文简要介绍使用 mpvue 开发小程序的前期准备，后面还会继续学习再介绍其他功能</li></ul>]]></content>
    
    <summary type="html">
    
      
      
        &lt;link rel=&quot;stylesheet&quot; class=&quot;aplayer-secondary-style-marker&quot; href=&quot;/assets/css/APlayer.min.css&quot;&gt;&lt;script src=&quot;/assets/js/APlayer.min.js&quot; cla
      
    
    </summary>
    
      <category term="小程序" scheme="http://yoursite.com/categories/%E5%B0%8F%E7%A8%8B%E5%BA%8F/"/>
    
    
      <category term="小程序" scheme="http://yoursite.com/tags/%E5%B0%8F%E7%A8%8B%E5%BA%8F/"/>
    
  </entry>
  
  <entry>
    <title>部署线上node/vue项目</title>
    <link href="http://yoursite.com/2018/11/23/%E9%83%A8%E7%BD%B2%E7%BA%BF%E4%B8%8Anode/"/>
    <id>http://yoursite.com/2018/11/23/部署线上node/</id>
    <published>2018-11-23T14:38:38.276Z</published>
    <updated>2018-11-23T15:42:19.657Z</updated>
    
    <content type="html"><![CDATA[<link rel="stylesheet" class="aplayer-secondary-style-marker" href="/assets/css/APlayer.min.css"><script src="/assets/js/APlayer.min.js" class="aplayer-secondary-script-marker"></script><ul><li>当你写了node项目的时候就想抛到网上去</li><li>前面有教 外网映射 也是一个好方法</li><li>但是用起来开启服务就好，但是关闭主机就不能用了</li><li>那我们就来使用网上的服务器</li></ul><h2 id="服务器"><a href="#服务器" class="headerlink" title="服务器"></a>服务器</h2><ol><li>阿里云、腾讯云 复杂贵买不起</li><li><a href="http://www.sinacloud.com/" target="_blank" rel="noopener">新浪云</a> （这个还不错不过也是要钱还是挺方便，服务器与数据库基本齐全）</li><li><a href="https://devcenter.heroku.com/" target="_blank" rel="noopener">Heroku</a> 不过要vpn (支持的语言多但是没有mysql数据库)</li><li><a href="https://www.openshift.com/trial/" target="_blank" rel="noopener">openshift</a> 也是外网服务器不过不用vpn （没用过，不过好像是试用也是要收费）</li></ol><h2 id="部署"><a href="#部署" class="headerlink" title="部署"></a>部署</h2><h3 id="检查配置"><a href="#检查配置" class="headerlink" title="检查配置"></a>检查配置</h3><ol><li>node</li><li>git</li><li>npm</li></ol><h3 id="Heroku"><a href="#Heroku" class="headerlink" title="Heroku"></a>Heroku</h3><ol><li>上到官网 登录/注册<ul><li><a href="https://devcenter.heroku.com/" target="_blank" rel="noopener">https://devcenter.heroku.com/</a></li></ul></li><li>选择自己要的语言 （回跳到开发文档）<ul><li>我选的是node</li></ul></li><li>选择安装homebrew cli<ul><li>我是os系统 我选的是苹果 （下载后安装）</li></ul></li><li>登录 homebrew<ul><li>终端 heroku login (苹果加 sudo)</li></ul></li><li>在一个你想放项目的地方新建项目文件夹 <ul><li>用终端进入到文件夹</li><li>执行 git clone <a href="https://github.com/heroku/node-js-getting-started.git" target="_blank" rel="noopener">https://github.com/heroku/node-js-getting-started.git</a> （这个命令是用来克隆应用源代码的）</li><li>克隆好 cd node-js-getting-started 进入文件夹</li></ul></li><li>创建应用程序 （虽然下载了但是是空的架构要自己安装）<ul><li>heroku create （生成项目的时候项目名是随机生成的）</li></ul></li><li>部署到 网上 （前面已经登录了现在直接上传就好）<ul><li>刚创的应用直接push就好</li><li>sudo git push heroku master</li><li>上传完 heroku open查看</li></ul></li><li><p>有个绿色页面就是成功了</p></li><li><p>好前面都是说配置现在来说部署</p><ul><li>1.把vue项目打包出来 </li><li>2.把打包好的html文件拷贝到 node-js-getting-started/views/pages/<ul><li>我们考到这里面然后把里面index.ejs文件删掉 </li><li>把我们的文件改为ejs</li></ul></li><li>3.打包出来的static 直接放到public里面就好</li></ul></li><li>部署好我们就上传<ul><li>git add .</li><li>git commit -m “”</li><li>git push heroku master</li><li>上传三部曲不多说</li></ul></li><li><p>heroku open 查看有自己喜欢的效果就是对了</p></li><li><p>查错 如果出现 application err就是错了  </p><ul><li>heroku logs –tail 使用这个命令查看错在哪里</li></ul></li><li><p>一些自定义的文件啥的在项目根目录传文件放</p><ul><li>在 index.js文件中引入配置就好</li></ul></li></ol><h3 id="新浪云"><a href="#新浪云" class="headerlink" title="新浪云"></a>新浪云</h3><ul><li>新浪云还是比较简单</li></ul><ol><li>登录 进入控制台</li><li>创建应用 选择自己要的服务器 设计域名和应用名称</li><li>然后里面有git代码说明</li><li>就是把git克隆下来再来写代码就好了</li><li>git push三部曲</li><li>数据库那些也是这样差不多自己研究</li></ol>]]></content>
    
    <summary type="html">
    
      
      
        &lt;link rel=&quot;stylesheet&quot; class=&quot;aplayer-secondary-style-marker&quot; href=&quot;/assets/css/APlayer.min.css&quot;&gt;&lt;script src=&quot;/assets/js/APlayer.min.js&quot; cla
      
    
    </summary>
    
      <category term="插件/配置" scheme="http://yoursite.com/categories/%E6%8F%92%E4%BB%B6-%E9%85%8D%E7%BD%AE/"/>
    
    
      <category term="npm" scheme="http://yoursite.com/tags/npm/"/>
    
  </entry>
  
  <entry>
    <title>Vue-cli开启的服务内部写 node 接口</title>
    <link href="http://yoursite.com/2018/11/23/vue-node%E6%9C%8D%E5%8A%A1/"/>
    <id>http://yoursite.com/2018/11/23/vue-node服务/</id>
    <published>2018-11-23T13:18:03.234Z</published>
    <updated>2018-11-23T13:59:11.291Z</updated>
    
    <content type="html"><![CDATA[<link rel="stylesheet" class="aplayer-secondary-style-marker" href="/assets/css/APlayer.min.css"><script src="/assets/js/APlayer.min.js" class="aplayer-secondary-script-marker"></script><ul><li>在我们的开发中很多时候都是前后端分离，但是在一些个别的案例中也不需要开启两个 node 服务（这里也有一个问题就是开启两个端口会有跨域的问问）</li><li>跨域问题在前面获取数据的 axio 说过就不说了</li><li>那么我们能不能把 node 后台服务也写到 vue-cli 开启的服务中呢？ 能 那我们就来吧</li></ul><ol><li>在 vue-cli 中我也不知道他有没有 expore 这个包 那就自己装一下吧有没有都好</li><li>在项目文件夹内 创建一个名为 server 的文件夹 在里面新建 router.js 文件 (文件夹名和位置自己喜欢着么来就着么来)</li><li>在 router 文件里面写接口和业务逻辑</li></ol><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">// 这里我就简单的写一个接口这些学过node都懂不多说</span></span><br><span class="line"><span class="keyword">const</span> express = <span class="built_in">require</span>(<span class="string">'express'</span>)</span><br><span class="line"></span><br><span class="line"><span class="keyword">const</span> router = express.Router()</span><br><span class="line"></span><br><span class="line">router.get(<span class="string">'/yhf/abc'</span>, (req, res) =&gt; &#123;</span><br><span class="line">  res.send(<span class="string">'欢迎访问 Node 服务器数据 API 接口！'</span>)</span><br><span class="line">&#125;)</span><br><span class="line"></span><br><span class="line"><span class="built_in">module</span>.exports = router</span><br></pre></td></tr></table></figure><ol start="4"><li>如何调用 router 呢？（我们找到 build/webpack.dev.conf.js）（说一下为什么是这个文件，在旧版本呢就是在 build/sev-server.js 中配置的，在新版本中去除了这个配置文件改为了前面的那个 webpack 配置文件）</li></ol><ul><li>1.找到了这个文件后 第一步肯定是引包啦 要加在 const portfinder = require(‘portfinder’) 的后面</li></ul><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">const</span> express = <span class="built_in">require</span>(<span class="string">'express'</span>) express包</span><br><span class="line"><span class="keyword">const</span> app = express.Router() 开启服务 这个自己喜欢吧</span><br><span class="line"><span class="keyword">const</span> router = <span class="built_in">require</span>(<span class="string">'../server/router'</span>)  你自己的接口包</span><br></pre></td></tr></table></figure><ul><li>2.第二步当然就是配置啦 （找到 devServer 大约在 25 行左右那里）</li></ul><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">// 加入这一段代码 本来是没有before的要自己加</span></span><br><span class="line">before(app) &#123;</span><br><span class="line">    <span class="comment">// 这个方法是直接在这里自己写接口</span></span><br><span class="line">      app.get(<span class="string">'/api/getDiscList'</span>,(req,res) =&gt; &#123;</span><br><span class="line">        res.send(<span class="string">"欢迎来的node服务"</span>)</span><br><span class="line">      &#125;)</span><br><span class="line">    <span class="comment">//   这个是外部引入</span></span><br><span class="line">      app.use(router)</span><br><span class="line">    &#125;</span><br></pre></td></tr></table></figure>]]></content>
    
    <summary type="html">
    
      
      
        &lt;link rel=&quot;stylesheet&quot; class=&quot;aplayer-secondary-style-marker&quot; href=&quot;/assets/css/APlayer.min.css&quot;&gt;&lt;script src=&quot;/assets/js/APlayer.min.js&quot; cla
      
    
    </summary>
    
      <category term="Vue" scheme="http://yoursite.com/categories/Vue/"/>
    
    
      <category term="Vue笔记" scheme="http://yoursite.com/tags/Vue%E7%AC%94%E8%AE%B0/"/>
    
  </entry>
  
  <entry>
    <title>仿写 vue2-vuex 案例</title>
    <link href="http://yoursite.com/2018/11/21/2018-11-21/"/>
    <id>http://yoursite.com/2018/11/21/2018-11-21/</id>
    <published>2018-11-21T05:21:48.662Z</published>
    <updated>2018-11-21T05:27:44.056Z</updated>
    
    <content type="html"><![CDATA[<link rel="stylesheet" class="aplayer-secondary-style-marker" href="/assets/css/APlayer.min.css"><script src="/assets/js/APlayer.min.js" class="aplayer-secondary-script-marker"></script><h2 id="案例心得"><a href="#案例心得" class="headerlink" title="案例心得"></a>案例心得</h2><ul><li>在分析完那个vuex的小案例后，我觉得自己好像真的明白了vuex是着么写的</li><li>但是在我重新去仿照这个案例写的时候，还是发现了自己有很多的不足</li><li>那也只可以一点点的去查一点点的去写</li><li>在仿写的过程中，也有向源码学习</li><li>从中知道和学到了很多之前自己不会的方法和技巧</li></ul><h2 id="仿写源码"><a href="#仿写源码" class="headerlink" title="仿写源码"></a><a href="https://github.com/YHF7/Vue/tree/master/vue2-vuex-yhf" target="_blank" rel="noopener">仿写源码</a></h2><h2 id="vue2-vuex案例分析"><a href="#vue2-vuex案例分析" class="headerlink" title="vue2-vuex案例分析"></a><a href="https://yhf7.github.io/2018/11/17/vue2-vuex%E6%A1%88%E4%BE%8B/#more" target="_blank" rel="noopener">vue2-vuex案例分析</a></h2>]]></content>
    
    <summary type="html">
    
      
      
        &lt;link rel=&quot;stylesheet&quot; class=&quot;aplayer-secondary-style-marker&quot; href=&quot;/assets/css/APlayer.min.css&quot;&gt;&lt;script src=&quot;/assets/js/APlayer.min.js&quot; cla
      
    
    </summary>
    
      <category term="Vue" scheme="http://yoursite.com/categories/Vue/"/>
    
    
      <category term="Vue 案例" scheme="http://yoursite.com/tags/Vue-%E6%A1%88%E4%BE%8B/"/>
    
  </entry>
  
  <entry>
    <title>vue2-vuex 案例分析</title>
    <link href="http://yoursite.com/2018/11/17/vue2-vuex%E6%A1%88%E4%BE%8B/"/>
    <id>http://yoursite.com/2018/11/17/vue2-vuex案例/</id>
    <published>2018-11-17T06:50:30.575Z</published>
    <updated>2018-11-19T05:05:51.727Z</updated>
    
    <content type="html"><![CDATA[<link rel="stylesheet" class="aplayer-secondary-style-marker" href="/assets/css/APlayer.min.css"><script src="/assets/js/APlayer.min.js" class="aplayer-secondary-script-marker"></script><h1 id="这个是我在github看到的一个vue的案例感觉好像挺有用的就下下来看，然后就写了这个分析，vue-vuex都全了很好"><a href="#这个是我在github看到的一个vue的案例感觉好像挺有用的就下下来看，然后就写了这个分析，vue-vuex都全了很好" class="headerlink" title="这个是我在github看到的一个vue的案例感觉好像挺有用的就下下来看，然后就写了这个分析，vue-vuex都全了很好"></a>这个是我在github看到的一个vue的案例感觉好像挺有用的就下下来看，然后就写了这个分析，vue-vuex都全了很好</h1><h2 id="项目地址"><a href="#项目地址" class="headerlink" title="项目地址"></a><a href="https://github.com/YHF7/Vue/tree/master/vue2-happyfri" target="_blank" rel="noopener">项目地址</a></h2><h2 id="目录分析"><a href="#目录分析" class="headerlink" title="目录分析"></a>目录分析</h2><ul><li>build 配置/打包目录</li><li>config 端口控制</li><li>happyfri 静态资源</li><li>node_modules 插件库</li><li>src 业务逻辑<ul><li>components 公共组件<ul><li>itemcontainer 页面</li></ul></li><li>config 这个我不太懂应该是 ajax 交互用的<ul><li>ajax.js</li><li>rem.js 这个是一个 手机屏幕自适应判断的一个文件，用来在不同的屏幕时改变页面内的 html font-size的大小 而改变页面的效果</li></ul></li><li>images 图片</li><li>page 业务逻辑组件<ul><li>home 主页面<ul><li>index.vue</li></ul></li><li>item 答题页面<ul><li>index.vue</li></ul></li><li>score 最后的分数页面<ul><li>index.vue</li></ul></li></ul></li><li>router 路由<ul><li>router.js</li></ul></li><li>store vuex 的业务逻辑<ul><li>index.js 创建与实例数据与方法</li><li>actioin.js 主要是负责对接外部方法</li><li>mutatoions.js 主要是复杂编写内部方法供 actionin.js 内的方法调用</li></ul></li><li>style less<ul><li>common.less 控制页面的样式</li></ul></li><li>App.vue 主组件</li><li>main.js 配置文件</li></ul></li><li>index.html 主页面</li><li>其他的一下配置文件</li></ul><h2 id="走进-vue2-项目"><a href="#走进-vue2-项目" class="headerlink" title="走进 vue2 项目"></a>走进 vue2 项目</h2><h3 id="页面"><a href="#页面" class="headerlink" title="页面"></a>页面</h3><ol><li>首先这个是用 vue-cli 脚手架开启的一个 vue 项目 （作者是把原本的 8080 短端口改为了 8088）<ul><li>sudo cnpm dev run 开启服务</li><li>看开启无误 通过<a href="http://localhost:8088/#/" target="_blank" rel="noopener">http://localhost:8088/#/</a> 访问主页面</li></ul></li><li>开启到了服务了我们就来看结构<ul><li>页面很简单看起来就几个部分</li><li>头部-内容-按钮-背景图</li></ul></li></ol><h3 id="业务逻辑代码"><a href="#业务逻辑代码" class="headerlink" title="业务逻辑代码"></a>业务逻辑代码</h3><ol><li>进入到页面了 我们就看看 主页面 是着么得到的<ul><li>当我们开启了服务的时候 就会执行 build/dev-server.js 文件</li><li>然后就会找到我们的 src 文件夹 文件夹内有个 main.js 的配置文件<ul><li>在 main.js 文件中 所有的 插件与静态资源 与 vue 实例都会在里面</li><li>但是因为这样都写在一起 不仅会使得代码很乱也会很多所以分开了很多的页面去写</li><li>所以看到 main.js 其实没什么东西 ，都分到了不同的组件中</li></ul></li><li>好到了我们的 main.js 就激活 vue 实例</li><li>这里 vue 就会进行内部的路由判断 我们打开了 8088 端口时默认是 /</li><li>在 router/router.js 文件就会判断并执行到相应到页面 也就是主页</li></ul></li><li>router.js<ul><li>在这个路由页面中我们会看到 返回到是 App 这个 主组建</li><li>children 这个是用来设置子组件的 （子组建分为了三个）<ul><li>“” 默认为空的话 就是去到 ../page/home 这个主页面中</li><li>“item” 答题页</li><li>“score” 结算页</li><li>component: r =&gt; require.ensure([], () =&gt; r(require(‘../page/home’)), ‘home’) 这个获取地址的方法 已经不建议如此获取</li></ul></li></ul></li><li>跟着路由判断 我们来到了 默认的主页面 src/page/home/index.vue<ul><li>template 组件<ul><li>我们看到是一个类名 home_container 的 div 包着一个 外部引用组件</li><li><itemcontainer father-component="home"></itemcontainer> 通过 father-component 给这个组件传一个值 ，这是用来给组件判断是主页面还是答题页面，输出不同的效果</li></ul></li><li>script js<ul><li>import itemcontainer from ‘../../components/itemcontainer’ 引用外部的组件</li><li>name 这个就不用说了</li><li>components 挂载组件</li></ul></li><li>style less<br><img src="/vue2-vuex/vuex1.png" alt="home"></li></ul></li><li><p>看完了 子主页面 我们顺藤摸瓜 去看看他所引用的外部组件 src/components/itemcontainer.vue</p><ul><li>template （分了两个部分，同时也分了两个页面 home/item）<ul><li>头部 header<ul><li>通过 刚才我们看到的 father-component 传过来的值 判断是 home 还是 item 显示不同的头部<ul><li>第几周/第几题</li></ul></li></ul></li><li>内容 div 也是通过 father-component 判断显示那个 那么我们就分开说<ul><li>home<ul><li>一个 div 放着一些内容</li><li>router-link 控制的一个按钮 跳转地址是 item</li></ul></li><li>item<ul><li>div 包着的 内容 通过 itemDetail.length 来判断是否还有题目//其实是多余的</li><li>有就 继续执行 内容 header ul&gt;li</li><li>最后又两个 span 通过 itemNum &lt; itemDetail.length 来判断是下一题还是执行结算函数</li></ul></li></ul></li></ul></li><li>script<ul><li>在这里面我们可能一开始是没有注意到的</li><li>props 父子组件传值就不说了</li><li>把目光投射到代码靠后一点点 created 这个生命周期函数身上</li><li>当我们一进入这个页面时 就会马上判断是否是 home 页面</li><li>如果是 那就执行 this.initializeData(); 这是定义在 vuex 的函数</li><li>不急跳过去先看看 itemcontainer 内的 vuex</li><li>我们会看到 页面是用了 按需导入的方法</li><li>import { mapState, mapActions } from “vuex”;</li><li>在我们的使用中为了避免多次的编写 this.\$store….这样的代码 我们是用来 mapState，mapActions 这两个方法</li><li>mapState 获取 vuex 的 state 也就是 data<ul><li>使用比较简单 computed: mapState([接收名:’vuexdata 名’]) computed 用来监控自己定义的变量</li></ul></li><li>mapActions 获取 vuex 的函数<ul><li>methods: {…mapActions([“函数名”, “函数名”])} // 将 <code>this.方法名()</code> 映射为 <code>this.$store.dispatch(&#39;方法名&#39;)</code> 用在异步操作</li></ul></li><li>知道了这些我们继续回头看项目 判断是 home 就执行方法 和设置背景</li></ul></li><li>style 样式这些基本工的我就不说自己摸索</li></ul></li><li><p>既然说到了 vuex 那就顺着去看看 vuex src/store/index</p></li></ol><ul><li>进来了后我们看到的是 一些引入的插件和自定义的函数方法</li><li>在这里注册了 vuex</li><li>state 就是一些定义的数据</li><li>在下面我们会看到一个 抛出的 创建 vuex 实例<ul><li>state 是数据</li><li>actions 异步调用自定义的方法</li><li>mutations 同步自定义方法</li></ul></li></ul><ol start="6"><li>了解了 vuex store 的架构后我们再继续看这个 刚才调用的方法的执行</li></ol><ul><li>但调用这个方法的时候</li><li>第一时间方法是找到了 src/store/index.vue 的 stroe 实例</li><li>通过前面我们知道是异步调用方法是 在 actions 这个中，这个方法来自于 当前文件夹下的 actions.vue 中</li><li>那我们进入到这个页面 终于看到了这个方法了 原来是用来初始化信息的</li><li>这个方法需要传入一个值 （但我们使用 vuex 的时候默认第一个要输入的是 vuex 的参数）<ul><li>当我们看到 commit 的时候应该想到的是 vuex 同步方法调用</li><li>那么我们知道同步方法都是放在 mutations 里面 那我们就进去看看</li><li>在文件中 我们找到了 刚才调用的 INITIALIZE_DATA 方法 state 是 vuex 必须导入的<ul><li>然后我们就看了了很多个 state.什么的数据</li><li>看到 state 那肯定就是 vuex 内部都数据啦</li><li>这时候返回到 index.js 对照着看</li><li>就会知道是把数据进行赋值初始化，这步是为了不要产生数据的出错，当你答完题又回去 home 的时候再次答题数据就会出错了</li></ul></li></ul></li></ul><ol start="7"><li>好我们看完了 App/home 这样的 主子组建的搭配和数据初始化后，我们在页面点击开始<ul><li>点击开始就是等于 点击了 itemcontainer 内的 router-link 就会跳到 item</li><li>路由判断就会根据 /item 判断 我们就会去到 crc/page/item/index.vue</li><li>这个结构我们就不说了和 home 一样</li><li>我们说一下 created 这是生命周期函数，表示进入界面已经加载完 dom 时执行</li></ul></li><li>好我们也跟着 再一次回到了 itemcontainer 页面<ul><li>template<ul><li>判断得到是 item 执行显示出来头部和内容</li><li>header 显示第几题</li><li>div 这个就详细说一下重点就是在这里</li></ul></li></ul></li><li>那我们就来重点解说一下这个 div<ul><li>因为数据已经导入进来前面说过了直奔内容</li><li>先看类名为 item_list_container<ul><li>这里就是 item 的内容 用来判断是否还有题目</li><li>遍历数据</li><li>header 获取 vuex 内的 itemDetail 数组中的 第 0 个对象中的 topic_name （itemNum 是用来判断是第几题的，为什么是 itemNum-1 不用我说了把）</li><li>ul li 遍历出选项<ul><li>在 li 绑定了点击保存答案 id 的方法</li><li>做了一个 点击按钮绑定的样式 也做了一个 abcd 的遍历，定义方法通过不同的数值表示不同的字母</li><li>获取内容</li></ul></li><li>最后两个 span 是用来判断下一题还是执行结算</li></ul></li></ul></li><li><p>最后的几个 vuex 问题都在这里了 先说 li 的保存答案</p><ul><li>li 绑定了自定义的一个函数 choosed 有两个参数值 li 遍历的第几个 和 vuex 数据中的答案 id</li><li>看到 choosed 方法 当我们选择答案的时候 就会在记录在 choosedNum 和 choosedId 中</li></ul></li><li><p>选择了答案的选项 当然就会击下一题</p><ul><li>触发 自定义函数 nextItem</li><li>这个函数首先判断的是 通过choosedNum判断是否有选择答案，没有就弹框</li><li>有就把choosedNum清空 这是步骤是为了检测是否真的有输入（为什么不用输入的ID做呢，因为这里执行的是异步操作，用户可以继续做题，通过是否为空去判断，id传走执行其他操作，下一次传值覆盖掉就好了）</li><li>这里通过异步调用 方法 addNum 并传入答案id</li><li>前面说过位置在哪里这里就直接看执行方法</li><li>先同步执行了 ‘REMBER_ANSWER’</li><li>这里是把答案添加到了 vuex 内的state中的answerid数组中</li><li>然后再判断题目还有没有，有就 执行’ADD_ITEMNUM’方法 加一题<br><img src="/vue2-vuex/vuex2.png" alt="home"></li></ul></li><li><p>一直如此到了最后一题的时候点击 itemNum就会比itemDetail长</p><ul><li>哪就执行submitAnswe</li><li>还是判断有没有选择题目</li><li>执行添加最后一题答案</li><li>关闭定时器</li><li>路由添加score 跳转到score页面</li></ul></li><li><p>好终于到了最后的页面了 src/page/score/index</p><ul><li>这个页面也是分了两部分的不过前面说了那么多你们应该看得懂这个页面的所以就不多说</li><li>直接关心数据 还是用按需导入法</li><li>获取到了answerid 就是那个答案数组然后进行答案的计算</li><li>进入页面执行 computedScore和getScoreTip函数<br><img src="/vue2-vuex/vuex3.png" alt="home"><br><img src="/vue2-vuex/vuex4.png" alt="home"></li></ul></li><li>好了这么一个 vue2 vuex 的小案例就分析完毕了<ul><li>别看这个案例好像很小但是我们也说了很多了</li><li>本人才疏学浅花了几个小时才完全弄懂</li><li>麻雀虽小五脏俱全</li></ul></li></ol>]]></content>
    
    <summary type="html">
    
      
      
        &lt;link rel=&quot;stylesheet&quot; class=&quot;aplayer-secondary-style-marker&quot; href=&quot;/assets/css/APlayer.min.css&quot;&gt;&lt;script src=&quot;/assets/js/APlayer.min.js&quot; cla
      
    
    </summary>
    
      <category term="Vue" scheme="http://yoursite.com/categories/Vue/"/>
    
    
      <category term="Vue 案例" scheme="http://yoursite.com/tags/Vue-%E6%A1%88%E4%BE%8B/"/>
    
  </entry>
  
  <entry>
    <title>解决jsp给mysql传中文乱码</title>
    <link href="http://yoursite.com/2018/11/15/2018-11-15/"/>
    <id>http://yoursite.com/2018/11/15/2018-11-15/</id>
    <published>2018-11-15T13:20:57.804Z</published>
    <updated>2019-01-07T02:47:02.922Z</updated>
    
    <content type="html"><![CDATA[<link rel="stylesheet" class="aplayer-secondary-style-marker" href="/assets/css/APlayer.min.css"><script src="/assets/js/APlayer.min.js" class="aplayer-secondary-script-marker"></script><ul><li>今天上课的时候做一个javaweb案例</li><li>用到了数据库</li><li>在我插入中文的时候发现了问题在我的数据库中发现，中文变成了问号</li><li>遇到这个问题第一时间肯定是检查 数据库-页面代码-服务器 问题肯定就在这三个里面</li></ul><h1 id="1-我第一时间是看数据库"><a href="#1-我第一时间是看数据库" class="headerlink" title="1. 我第一时间是看数据库"></a>1. 我第一时间是看数据库</h1><ul><li>在数据库中设置了 utf-8 的字符集</li><li>但是在软件中设置 utf-8 保存后是看不见的</li><li>然后就去修改数据，当发现数据修改后可以成功的时候我知道数据库是没有问题的</li></ul><h1 id="2-我再去看页面代码"><a href="#2-我再去看页面代码" class="headerlink" title="2. 我再去看页面代码"></a>2. 我再去看页面代码</h1><ul><li>首先检查发送数据的表单页设置utf8没</li><li>再检查 业务逻辑处理页面的utf8设置了没<figure class="highlight jsp"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">&lt;%@ page contentType=<span class="string">"text/html;charset=UTF-8"</span> <span class="keyword">import</span>=<span class="string">"java.util.*,java.sql.*"</span> language=<span class="string">"java"</span> pageEncoding=<span class="string">"UTF-8"</span> %&gt;</span><br></pre></td></tr></table></figure></li></ul><figure class="highlight html"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">meta</span> <span class="attr">http-equiv</span>=<span class="string">"Content-Type"</span> <span class="attr">content</span>=<span class="string">"text/html; charset=UTF-8"</span>&gt;</span></span><br></pre></td></tr></table></figure><ul><li>发现加了还是没有效果</li></ul><h1 id="3-我再去看-服务器-是否乱码"><a href="#3-我再去看-服务器-是否乱码" class="headerlink" title="3. 我再去看 服务器 是否乱码"></a>3. 我再去看 服务器 是否乱码</h1><ul><li>jsp 我用的是 apache tomcat 服务器</li><li>检测 服务器文件-&gt;conf-&gt;server.xml 文件</li><li><p>大概在 68 行左右的位置</p><figure class="highlight xml"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">Connector</span> <span class="attr">port</span>=<span class="string">"8080"</span> <span class="attr">protocol</span>=<span class="string">"HTTP/1.1"</span></span></span><br><span class="line"><span class="tag">               <span class="attr">connectionTimeout</span>=<span class="string">"20000"</span></span></span><br><span class="line"><span class="tag">               <span class="attr">redirectPort</span>=<span class="string">"8443"</span> <span class="attr">URIEncoding</span>=<span class="string">"UTF-8"</span>/&gt;</span></span><br></pre></td></tr></table></figure></li><li><p>找到这句 看看 是否有设置 URIEncoding=”UTF-8”</p></li><li>但是做到了这里还是没有效果</li></ul><h1 id="4-按道理做完前面的应该可以了啊-我再去看-业务逻辑代码"><a href="#4-按道理做完前面的应该可以了啊-我再去看-业务逻辑代码" class="headerlink" title="4. 按道理做完前面的应该可以了啊 我再去看 业务逻辑代码"></a>4. 按道理做完前面的应该可以了啊 我再去看 业务逻辑代码</h1><ul><li><p>想起在链接数据库的时候加一个utf8的字符集可不可以</p><figure class="highlight jsp"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">conn=DriverManager.getConnection(<span class="string">"jdbc:mysql://localhost:3306/book?useUnicode=true&amp;characterEncoding=UTF-8"</span>,<span class="string">"root"</span>,<span class="string">""</span>);</span><br></pre></td></tr></table></figure></li><li><p>在数据库链接加入 ?useUnicode=true&amp;characterEncoding=UTF-8 来设置字符集</p></li><li>这样就成功显示了中文了</li></ul>]]></content>
    
    <summary type="html">
    
      
      
        &lt;link rel=&quot;stylesheet&quot; class=&quot;aplayer-secondary-style-marker&quot; href=&quot;/assets/css/APlayer.min.css&quot;&gt;&lt;script src=&quot;/assets/js/APlayer.min.js&quot; cla
      
    
    </summary>
    
      <category term="JavaWeb" scheme="http://yoursite.com/categories/JavaWeb/"/>
    
    
      <category term="JavaWeb笔记" scheme="http://yoursite.com/tags/JavaWeb%E7%AC%94%E8%AE%B0/"/>
    
  </entry>
  
  <entry>
    <title>Vue通过请求获取api接口数据/代理跨域</title>
    <link href="http://yoursite.com/2018/11/10/2018-11-10/"/>
    <id>http://yoursite.com/2018/11/10/2018-11-10/</id>
    <published>2018-11-10T14:24:04.376Z</published>
    <updated>2018-11-23T12:11:59.862Z</updated>
    
    <content type="html"><![CDATA[<link rel="stylesheet" class="aplayer-secondary-style-marker" href="/assets/css/APlayer.min.css"><script src="/assets/js/APlayer.min.js" class="aplayer-secondary-script-marker"></script><h3 id="我知道也用过的有两种"><a href="#我知道也用过的有两种" class="headerlink" title="我知道也用过的有两种"></a>我知道也用过的有两种</h3><ol><li>vue-resource （已不维护了）</li><li>axios （越来越多人用）</li><li>vue代理跨域（补充）</li></ol><h3 id="那我们就来说是着么用吧"><a href="#那我们就来说是着么用吧" class="headerlink" title="那我们就来说是着么用吧"></a>那我们就来说是着么用吧</h3><h3 id="1-vue-resource"><a href="#1-vue-resource" class="headerlink" title="1. vue-resource"></a>1. vue-resource</h3><ul><li><p>引入的方法有 3 种</p><ul><li>引入 1 直接使用网络的引用地址 <script src="https://cdn.jsdelivr.net/npm/vue-resource@1.5.1"></script> （速度会慢一点）</li><li>引入 2 把包下载下来本地引用 <script src="./lib/vue-resource-1.3.4.js"></script></li><li>引入 3 在项目中 用 npm 下载引用  在main.js文件内配置 下载 npm i vue-resource -S 有cnpm最好用cnpm安装快<figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">// 引入 包</span></span><br><span class="line"><span class="keyword">import</span> VueResource <span class="keyword">from</span> <span class="string">'vue-resource'</span>;</span><br><span class="line"><span class="comment">// 安装包</span></span><br><span class="line">Vue.use(VueResource);</span><br><span class="line"><span class="comment">// 设置请求的根路径</span></span><br><span class="line">Vue.http.options.root = <span class="string">'http://127.0.0.1:5000'</span>; <span class="comment">// 我们访问后台的路径大多相同所以直接设置根路径就不用每次都全部打了</span></span><br></pre></td></tr></table></figure></li></ul></li><li><p>使用方法</p><figure class="highlight html"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">&lt;!-- body中的代码 --&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">div</span> <span class="attr">id</span>=<span class="string">"app"</span>&gt;</span></span><br><span class="line">    <span class="comment">&lt;!-- 引用 --&gt;</span></span><br><span class="line">  <span class="tag">&lt;<span class="name">input</span> <span class="attr">type</span>=<span class="string">"button"</span> <span class="attr">value</span>=<span class="string">"get请求"</span> @<span class="attr">click</span>=<span class="string">"getInfo"</span> /&gt;</span></span><br><span class="line">  <span class="tag">&lt;<span class="name">input</span> <span class="attr">type</span>=<span class="string">"button"</span> <span class="attr">value</span>=<span class="string">"post请求"</span> @<span class="attr">click</span>=<span class="string">"postInfo"</span> /&gt;</span></span><br><span class="line">  <span class="tag">&lt;<span class="name">input</span> <span class="attr">type</span>=<span class="string">"button"</span> <span class="attr">value</span>=<span class="string">"jsonp请求"</span> @<span class="attr">click</span>=<span class="string">"jsonpInfo"</span> /&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">div</span>&gt;</span></span><br></pre></td></tr></table></figure><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">// 创建 Vue 实例，得到 ViewModel</span></span><br><span class="line"><span class="keyword">var</span> vm = <span class="keyword">new</span> Vue(&#123;</span><br><span class="line">  el: <span class="string">'#app'</span>,</span><br><span class="line">  data: &#123;</span><br><span class="line">  &#125;,</span><br><span class="line">  methods: &#123;</span><br><span class="line">    getInfo() &#123; <span class="comment">// 发起get请求</span></span><br><span class="line">      <span class="comment">//  当发起get请求之后， 通过 .then 来设置成功的回调函数</span></span><br><span class="line">      <span class="keyword">this</span>.$http.get(<span class="string">'http://nodecms.applinzi.com/api/getcs'</span>).then(<span class="function"><span class="keyword">function</span> (<span class="params">result</span>) </span>&#123;</span><br><span class="line">        <span class="comment">// 通过 result.body 拿到服务器返回的成功的数据</span></span><br><span class="line">        <span class="built_in">console</span>.log(result.body)</span><br><span class="line">      &#125;)</span><br><span class="line">    &#125;,</span><br><span class="line">    postInfo() &#123; <span class="comment">// 发起 post 请求   application/x-wwww-form-urlencoded</span></span><br><span class="line">      <span class="comment">//  手动发起的 Post 请求，默认没有表单格式，所以，有的服务器处理不了</span></span><br><span class="line">      <span class="comment">//  通过 post 方法的第三个参数， &#123; emulateJSON: true &#125; 设置 提交的内容类型 为 普通表单数据格式</span></span><br><span class="line">      <span class="keyword">this</span>.$http.post(<span class="string">'http://nodecms.applinzi.com/api/getpost'</span>, &#123;&#125;, &#123;</span><br><span class="line">        emulateJSON: <span class="literal">true</span></span><br><span class="line">      &#125;).then(<span class="function"><span class="params">result</span> =&gt;</span> &#123;</span><br><span class="line">        <span class="built_in">console</span>.log(result.body)</span><br><span class="line">      &#125;)</span><br><span class="line">    &#125;,</span><br><span class="line">    jsonpInfo() &#123; <span class="comment">// 发起JSONP 请求</span></span><br><span class="line">      <span class="keyword">this</span>.$http.jsonp(<span class="string">'http://vue.studyit.io/api/jsonp'</span>).then(<span class="function"><span class="params">result</span> =&gt;</span> &#123;</span><br><span class="line">        <span class="built_in">console</span>.log(result.body)</span><br><span class="line">      &#125;)</span><br><span class="line">    &#125;</span><br><span class="line">  &#125;</span><br><span class="line">&#125;);</span><br></pre></td></tr></table></figure></li></ul><h3 id="2-axios"><a href="#2-axios" class="headerlink" title="2.axios"></a>2.axios</h3><ul><li>引入方法<ul><li>方法1 项目安装 npm i axios -S (npm,cnpm,bower喜欢那个用那个)</li><li>方法2 <script src="https://unpkg.com/axios/dist/axios.min.js"></script></li></ul></li><li><p>用法和vue-resource差不多</p><ul><li><p>main.js 配置</p><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">// 配置axios</span></span><br><span class="line"><span class="keyword">import</span> Axios <span class="keyword">from</span> <span class="string">'axios'</span></span><br><span class="line"><span class="comment">// 配置公共url</span></span><br><span class="line">Axios.defaults.baseURL = <span class="string">'http://127.0.0.1:5000/api/'</span></span><br><span class="line">Vue.prototype.$axios = Axios</span><br></pre></td></tr></table></figure></li><li><p>使用</p><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">this</span>.$axios</span><br><span class="line">  .get(<span class="string">"getlunbo"</span>)</span><br><span class="line">  .then(<span class="function"><span class="params">res</span> =&gt;</span> &#123;</span><br><span class="line">    <span class="comment">// res.data.message = [&#123;img: '图片地址'&#125;]</span></span><br><span class="line">    <span class="keyword">this</span>.imgs = res.data.message;</span><br><span class="line">  &#125;)</span><br><span class="line">  .catch(<span class="function"><span class="params">err</span> =&gt;</span> <span class="built_in">console</span>.log(<span class="string">"轮播图获取异常"</span>));</span><br></pre></td></tr></table></figure></li></ul></li></ul><h3 id="3-代理跨域"><a href="#3-代理跨域" class="headerlink" title="3.代理跨域"></a>3.代理跨域</h3><ul><li>虽然上面的方法都挺好但是面对跨域问题，如果后端不去设置的话就会出现跨域获取出错的问题</li><li>这里只是说 vue-cli 开启的项目设置代理跨域因为其他的我不太会</li><li>现在流行前后台分离开发，就是前端先前端的页面，后端写后端的接口。但是，当两者的工作合并的时候，要么前端自己搭建一个服务器，要么后端开启跨域让前端访问接口，我一般在开发的时候采用的是后者。但是这个是很坑的，经常出现无法跨域的错误。</li><li><p>Vue-cli中自带了代理，当你配置了这个代理之后，你访问他人电脑的接口的时候，就像访问自己本机的接口一样，避免了跨域的问题。</p></li><li><p>首先找到，config下面的index.js，然后，打开，关键代码如下：</p><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br></pre></td><td class="code"><pre><span class="line">dev: &#123;</span><br><span class="line"></span><br><span class="line">  <span class="comment">// Paths</span></span><br><span class="line">    assetsSubDirectory: <span class="string">'static'</span>,</span><br><span class="line">    assetsPublicPath: <span class="string">'/'</span>,</span><br><span class="line">    proxyTable: &#123;</span><br><span class="line">      <span class="string">'/Home'</span> : &#123;</span><br><span class="line">        target: <span class="string">'https://lit-plains-29389.herokuapp.com'</span>,</span><br><span class="line">        changeOrigin: <span class="literal">true</span>,</span><br><span class="line">      &#125;,</span><br><span class="line">      <span class="string">"/api"</span>:&#123;</span><br><span class="line">        target: <span class="string">'https://lit-plains-29389.herokuapp.com'</span>,</span><br><span class="line">        changeOrigin: <span class="literal">true</span>,</span><br><span class="line">        pathRewrite: &#123;</span><br><span class="line">          <span class="string">'^/api'</span>: <span class="string">'/'</span></span><br><span class="line">        &#125;</span><br><span class="line">      &#125;</span><br><span class="line">    &#125;,</span><br><span class="line">  <span class="comment">// Various Dev Server settings</span></span><br><span class="line">  host: <span class="string">'localhost'</span>, <span class="comment">// can be overwritten by process.env.HOST</span></span><br><span class="line">  port: <span class="number">8080</span>, <span class="comment">// can be overwritten by process.env.PORT, if port is in use, a free one will be determined</span></span><br><span class="line">  autoOpenBrowser: <span class="literal">false</span>,</span><br><span class="line">  errorOverlay: <span class="literal">true</span>,</span><br><span class="line">  notifyOnErrors: <span class="literal">true</span>,</span><br><span class="line">  poll: <span class="literal">false</span>, <span class="comment">// https://webpack.js.org/configuration/dev-server/#devserver-watchoptions-</span></span><br><span class="line"></span><br><span class="line">  <span class="comment">// Use Eslint Loader?</span></span><br><span class="line">  <span class="comment">// If true, your code will be linted during bundling and</span></span><br><span class="line">  <span class="comment">// linting errors and warnings will be shown in the console.</span></span><br><span class="line">  useEslint: <span class="literal">false</span>,</span><br><span class="line">  <span class="comment">// If true, eslint errors and warnings will also be shown in the error overlay</span></span><br><span class="line">  <span class="comment">// in the browser.</span></span><br><span class="line">  showEslintErrorsInOverlay: <span class="literal">false</span>,</span><br><span class="line"></span><br><span class="line">  <span class="comment">/**</span></span><br><span class="line"><span class="comment">   * Source Maps</span></span><br><span class="line"><span class="comment">   */</span></span><br><span class="line"></span><br><span class="line">  <span class="comment">// https://webpack.js.org/configuration/devtool/#development</span></span><br><span class="line">  devtool: <span class="string">'cheap-module-eval-source-map'</span>,</span><br><span class="line"></span><br><span class="line">  <span class="comment">// If you have problems debugging vue-files in devtools,</span></span><br><span class="line">  <span class="comment">// set this to false - it *may* help</span></span><br><span class="line">  <span class="comment">// https://vue-loader.vuejs.org/en/options.html#cachebusting</span></span><br><span class="line">  cacheBusting: <span class="literal">true</span>,</span><br><span class="line"></span><br><span class="line">  cssSourceMap: <span class="literal">true</span></span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure></li><li><p>target就是要代理到的目标地址，changeOrigin的意思相比不必多说了。至于pathRewrite，就是在这个例子中，比如/Home/Index就会映射到<a href="https://lit-plains-29389.herokuapp.com/Home/Index" target="_blank" rel="noopener">https://lit-plains-29389.herokuapp.com/Home/Index</a>,<br>而如果开启了这个选项，比如第二个，假设/api/Home/Index,则会映射到<a href="https://lit-plains-29389.herokuapp.com/Home/Index。" target="_blank" rel="noopener">https://lit-plains-29389.herokuapp.com/Home/Index。</a></p></li><li><p>简单点说就是做一个替换</p></li><li><p>说明：我的vue-cli所在的端口是localhos:8080</p></li></ul>]]></content>
    
    <summary type="html">
    
      
      
        &lt;link rel=&quot;stylesheet&quot; class=&quot;aplayer-secondary-style-marker&quot; href=&quot;/assets/css/APlayer.min.css&quot;&gt;&lt;script src=&quot;/assets/js/APlayer.min.js&quot; cla
      
    
    </summary>
    
      <category term="Vue" scheme="http://yoursite.com/categories/Vue/"/>
    
    
      <category term="Vue笔记" scheme="http://yoursite.com/tags/Vue%E7%AC%94%E8%AE%B0/"/>
    
  </entry>
  
  <entry>
    <title>hexo 装修地址</title>
    <link href="http://yoursite.com/2018/11/09/2018-11-09(2)/"/>
    <id>http://yoursite.com/2018/11/09/2018-11-09(2)/</id>
    <published>2018-11-09T07:22:36.218Z</published>
    <updated>2018-11-09T07:45:38.423Z</updated>
    
    <content type="html"><![CDATA[<link rel="stylesheet" class="aplayer-secondary-style-marker" href="/assets/css/APlayer.min.css"><script src="/assets/js/APlayer.min.js" class="aplayer-secondary-script-marker"></script><p><a href="https://zhuanlan.zhihu.com/p/28128674" target="_blank" rel="noopener">知乎 hexonext 主题</a><br><a href="https://blog.vinlic.com/p/56088/" target="_blank" rel="noopener">添加页面 3d 动画</a><br><a href="https://www.xiaocoder.com/2018/07/15/hexo-blog-optimizing-guide/" target="_blank" rel="noopener">xiao’sblog 优化</a><br><a href="https://asdfv1929.github.io/2018/05/26/next-add-music/" target="_blank" rel="noopener">添加主题音乐</a><br><a href="https://www.jianshu.com/p/4e094e41c1ab" target="_blank" rel="noopener">主题添加分类</a><br><a href="https://www.jianshu.com/p/393d067dba8d" target="_blank" rel="noopener">主题不显示全文</a><br><a href="https://www.jianshu.com/p/7e30afa09fab" target="_blank" rel="noopener">添加侧边栏小图标</a><br><a href="http://blog.hlz.space/tags/next%E4%B8%BB%E9%A2%98/" target="_blank" rel="noopener">hester 博客优化</a></p>]]></content>
    
    <summary type="html">
    
      
      
        &lt;link rel=&quot;stylesheet&quot; class=&quot;aplayer-secondary-style-marker&quot; href=&quot;/assets/css/APlayer.min.css&quot;&gt;&lt;script src=&quot;/assets/js/APlayer.min.js&quot; cla
      
    
    </summary>
    
      <category term="Hexo" scheme="http://yoursite.com/categories/Hexo/"/>
    
    
      <category term="Hexo装修" scheme="http://yoursite.com/tags/Hexo%E8%A3%85%E4%BF%AE/"/>
    
  </entry>
  
  <entry>
    <title>ngrok 外网映射 （解决测试时外部无法访问本地网站的）</title>
    <link href="http://yoursite.com/2018/11/09/2018-11-09/"/>
    <id>http://yoursite.com/2018/11/09/2018-11-09/</id>
    <published>2018-11-09T03:42:37.962Z</published>
    <updated>2018-11-09T04:19:18.921Z</updated>
    
    <content type="html"><![CDATA[<link rel="stylesheet" class="aplayer-secondary-style-marker" href="/assets/css/APlayer.min.css"><script src="/assets/js/APlayer.min.js" class="aplayer-secondary-script-marker"></script><h1 id="日常开发坑"><a href="#日常开发坑" class="headerlink" title="日常开发坑"></a>日常开发坑</h1><ul><li>在我们做开发的同学们很多时候开发好了一个项目之后发现只是可以再电脑内部去查看或者是通过本地端口设置同一网络下查看业务</li><li>那么我们肯定会想上到线上项目不需要在同一网络下也可以去访问</li><li>那么第一时间我们肯定是会想到 云端服务器 阿里云/新浪云/腾讯云等很多的网上服务器</li><li>对的我也想到了，当是首先<ul><li>网上服务器要钱买</li><li>网上服务器要配置</li></ul></li><li>再想想我就想丢上去看看而已替换成外网测试一下看看行不行<ul><li>买服务器不是买一天两天想着应该用不完</li></ul></li></ul><h1 id="那么我就发现了一个好用的东西-ngrok-外网映射"><a href="#那么我就发现了一个好用的东西-ngrok-外网映射" class="headerlink" title="那么我就发现了一个好用的东西 ngrok 外网映射"></a>那么我就发现了一个好用的东西 ngrok 外网映射</h1><ul><li>ngrok 并不是真的就把项目就挂载到了网上</li><li>是通过 映射端口 把本地端口映射到了外网</li><li>所以当我们吧 ngrok 关闭 或者是 本地的服务关闭了后就会断开</li></ul><h1 id="在使用之前要有-apache-服务器"><a href="#在使用之前要有-apache-服务器" class="headerlink" title="在使用之前要有 apache 服务器"></a>在使用之前要有 apache 服务器</h1><ul><li>（mac 是自带的 win 自己安装 配置这里我就不说虽然 mac 自带但是我弄了好久现在不想再去说了 ） </li><li>（也不一定非要用 apache 服务器的因为是映射端口有开启服务就好）</li><li>把项目部署到了 apache 服务器</li><li>开启服务 本地查看是否可以运行</li></ul><h1 id="说了那么多废话现在开始走进-ngrok-的世界"><a href="#说了那么多废话现在开始走进-ngrok-的世界" class="headerlink" title="说了那么多废话现在开始走进 ngrok 的世界"></a>说了那么多废话现在开始走进 ngrok 的世界</h1><ul><li><a href="https://ngrok.com/download" target="_blank" rel="noopener">ngrok 下载官网</a></li><li>不急着下载因为后面的步骤需要用到全局配置 所有先注册一个账号 有 github 的可以直接登录</li><li>然后点击 download 那个下载就好啦</li><li>把安装包下载下来之后手动解压就可以了</li><li>然后打开终端 在解压出 ngrok 的文件夹下执行配置</li><li>./ngrok authtoken 3fW4eXHdUN3ziCBXcahZ_3tnDdaTyLw8tKzJtKZkLp 3 开头这一段每个人都不同的根据登录的账号会有提示的</li><li>最后一步就是 映射端口 根据你本地开启的端口而定 ./ngrok http 80 （开启的是 80 端口就用 80 端口，默认 apache 是 80 端口）</li></ul><h1 id="前面那么多字懒得看看不懂的还是来看图解把"><a href="#前面那么多字懒得看看不懂的还是来看图解把" class="headerlink" title="前面那么多字懒得看看不懂的还是来看图解把"></a>前面那么多字懒得看看不懂的还是来看图解把</h1><p><img src="/ngrok/ngrok1.png" alt="ngrok"><br><img src="/ngrok/ngrok2.png" alt="ngrok"><br><img src="/ngrok/ngrok3.png" alt="ngrok"><br><img src="/ngrok/ngrok4.png" alt="ngrok"><br><img src="/ngrok/ngrok5.png" alt="ngrok"></p>]]></content>
    
    <summary type="html">
    
      
      
        &lt;link rel=&quot;stylesheet&quot; class=&quot;aplayer-secondary-style-marker&quot; href=&quot;/assets/css/APlayer.min.css&quot;&gt;&lt;script src=&quot;/assets/js/APlayer.min.js&quot; cla
      
    
    </summary>
    
      <category term="插件/配置" scheme="http://yoursite.com/categories/%E6%8F%92%E4%BB%B6-%E9%85%8D%E7%BD%AE/"/>
    
    
      <category term="外网映射" scheme="http://yoursite.com/tags/%E5%A4%96%E7%BD%91%E6%98%A0%E5%B0%84/"/>
    
  </entry>
  
  <entry>
    <title>Vue-cli安装/使用</title>
    <link href="http://yoursite.com/2018/11/07/vue-cli/"/>
    <id>http://yoursite.com/2018/11/07/vue-cli/</id>
    <published>2018-11-07T14:36:52.749Z</published>
    <updated>2019-01-07T02:58:13.391Z</updated>
    
    <content type="html"><![CDATA[<link rel="stylesheet" class="aplayer-secondary-style-marker" href="/assets/css/APlayer.min.css"><script src="/assets/js/APlayer.min.js" class="aplayer-secondary-script-marker"></script><h1 id="vue-cli-vue-脚手架"><a href="#vue-cli-vue-脚手架" class="headerlink" title="vue-cli(vue 脚手架)"></a>vue-cli(vue 脚手架)</h1><ul><li>在开发得时候用 vue 做开发但是写多了感觉能不能一开始就有现成得不用去配置拿来就能用</li><li>真的有 vue-cli vue 脚手架</li></ul><h1 id="不说那么多直接开干"><a href="#不说那么多直接开干" class="headerlink" title="不说那么多直接开干"></a>不说那么多直接开干</h1><ol><li>确保电脑有安装 node/npm （不多说不懂去标签 node 找 node 安装）<a href="https://yhf7.github.io/2018/10/17/npm-Plug-in/#more" target="_blank" rel="noopener">地址</a></li><li>使用 vue-cli 是以来 webpack 使用得所以安装 webpack 先<ul><li>以往用 webpack 直接安装就行</li><li>webpack 4.x 开始要以来 webpack-cli 依赖</li><li>全局安装 webpack 和 webpack-cli</li><li>sudo npm install webpack webpack-cli -g</li><li>安装完 webpack -v 看看安装到了没有</li></ul></li><li>千新万苦终于搞完前面现在安装 vue-cli<ul><li>sudo npm install –global vue-cli</li><li>安装完 vue -v 查看版本</li></ul></li><li>不多说装完直接使用<ul><li>进入到你要开发的磁盘位置 先去那里就去那里</li><li>sudo vue init webpack baoge (这个 baoge 就是项目的名字自己定)</li><li>然后就到了后面的配置项了</li><li>Project name (baoge)： —–项目名称，直接回车，按照括号中默认名字（注意这里的名字不能有大写字母，如果有会报错 Sorry, name can no longer contain capital letters），阮一峰老师博客为什么文件名要小写 ，可以参考一下。</li><li>Project description (A Vue.js project)： —-项目描述，也可直接点击回车，使用默认名字</li><li>Author ()： —-作者，输入你的大名</li><li>接下来会让用户选择：</li><li>Runtime + Compiler: recommended for most users 运行加编译，既然已经说了推荐，就选它了</li><li>Runtime-only: about 6KB lighter min+gzip, but templates (or any Vue-specificHTML) are ONLY allowed in .vue files - render functions are required elsewhere 仅运行时，已经有推荐了就选择第一个了</li><li>Install vue-router? (Y/n) 是否安装 vue-router，这是官方的路由，大多数情况下都使用，这里就输入“y”后回车即可。</li><li>Use ESLint to lint your code? (Y/n) 是否使用 ESLint 管理代码，ESLint 是个代码风格管理工具，是用来统一代码风格的，一般项目中都会使用。</li><li>接下来也是选择题 Pick an ESLint preset (Use arrow keys) 选择一个 ESLint 预设，编写 vue 项目时的代码风格，直接 y 回车</li><li>Setup unit tests with Karma + Mocha? (Y/n) 是否安装单元测试，我选择安装 y 回车</li><li>Setup e2e tests with Nightwatch(Y/n)? 是否安装 e2e 测试 ，我选择安装 y 回车</li></ul></li><li>不想死的 UseESLint to lint your code 必须输入 n 不然标准模式下会让你痛不欲生（觉得自己代码很他妈规范的就用吧）</li><li>不过即使一开始的时候没有注意到点击了确定开启了 eslint 也不用怕，教你如何关闭 ESLint<ul><li>在项目中找到 config 文件夹，进入文件夹</li><li>找到 index.js 文件</li><li>在大概 26 行左右的位置 useEslint:true 会有这么一句命令 改为 false 就好啦 useEslint:false</li><li>记住这个东西是用 webpack 执行的如果是开启服务的时候修改请重启一下服务</li></ul></li><li>还有一个方法可以不用关掉这个 eslint 就是安装插件让它自动的帮你检查格式化<ul><li>使用的编程软件是 vs code 微软出的</li><li>安装什么插件我就不详细说了，点下面链接自己琢磨</li><li><a href="https://juejin.im/post/5be5429de51d4511a808f4ac" target="_blank" rel="noopener">插件地址</a></li></ul></li></ol><h1 id="vue-cli3-开启项目方法"><a href="#vue-cli3-开启项目方法" class="headerlink" title="vue-cli3 开启项目方法"></a>vue-cli3 开启项目方法</h1><ol><li><p>开启项目(my-project自定义)</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">$ vue create my-project</span><br></pre></td></tr></table></figure></li><li><p>选择模式 （一般选择第二个）</p></li></ol><ul><li>default (babel, eslint) 默认套餐，提供 babel 和 eslint 支持。</li><li>Manually select features 自己去选择需要的功能，提供更多的特性选择。比如如果想要支持 TypeScript ，就应该选择这一项。</li></ul><ol start="3"><li>选择配置（可以多选：使用方向键在特性选项之间切换，使用空格键选中当前特性，使用 a 键切换选择所有，使用 i 键翻转选项。）</li></ol><ul><li>TypeScript 支持使用 TypeScript 书写源码。</li><li>Progressive Web App (PWA) Support PWA 支持。</li><li>Router 支持 vue-router 。</li><li>Vuex 支持 vuex 。</li><li>CSS Pre-processors 支持 CSS 预处理器。</li><li>Linter / Formatter 支持代码风格检查和格式化。</li><li>Unit Testing 支持单元测试。</li><li>E2E Testing 支持 E2E 测试。</li></ul><ol start="4"><li>一路按照需求选</li><li>启动项目</li></ol><ul><li>cd my-project</li><li>npm run serve</li></ul>]]></content>
    
    <summary type="html">
    
      
      
        &lt;link rel=&quot;stylesheet&quot; class=&quot;aplayer-secondary-style-marker&quot; href=&quot;/assets/css/APlayer.min.css&quot;&gt;&lt;script src=&quot;/assets/js/APlayer.min.js&quot; cla
      
    
    </summary>
    
      <category term="插件/配置" scheme="http://yoursite.com/categories/%E6%8F%92%E4%BB%B6-%E9%85%8D%E7%BD%AE/"/>
    
    
      <category term="vue插件" scheme="http://yoursite.com/tags/vue%E6%8F%92%E4%BB%B6/"/>
    
  </entry>
  
  <entry>
    <title>node/php使用心得</title>
    <link href="http://yoursite.com/2018/11/07/2018-11-07/"/>
    <id>http://yoursite.com/2018/11/07/2018-11-07/</id>
    <published>2018-11-07T14:09:44.951Z</published>
    <updated>2018-11-07T14:28:12.073Z</updated>
    
    <content type="html"><![CDATA[<link rel="stylesheet" class="aplayer-secondary-style-marker" href="/assets/css/APlayer.min.css"><script src="/assets/js/APlayer.min.js" class="aplayer-secondary-script-marker"></script><p>今天有个师弟让我写一个用户注册权限的后端服务，第一个想法是用node，但是他的服务端没有node，只有php，可能是我很久没有写php的代码所以写起来还是很不习惯，写node的时候只是关心，接口，业务逻辑，操作数据库分开三步写很顺手，但是用php写，顿时脑子是比较空白的，长时间不去使用一个语言突然就要去写真的就会想不起来这么写好，只能看着以前写过的服务一点一点的拿起来，虽然是写出来了但是感觉用起来还是觉得node比php好用，虽然用起来都是比较简单</p><p>node 判断路由-&gt;业务逻辑-&gt;数据库操作<br>php 业务逻辑-&gt;数据库操作</p>]]></content>
    
    <summary type="html">
    
      
      
        &lt;link rel=&quot;stylesheet&quot; class=&quot;aplayer-secondary-style-marker&quot; href=&quot;/assets/css/APlayer.min.css&quot;&gt;&lt;script src=&quot;/assets/js/APlayer.min.js&quot; cla
      
    
    </summary>
    
      <category term="个人" scheme="http://yoursite.com/categories/%E4%B8%AA%E4%BA%BA/"/>
    
    
      <category term="个人" scheme="http://yoursite.com/tags/%E4%B8%AA%E4%BA%BA/"/>
    
  </entry>
  
  <entry>
    <title>完成YHF-Vue项目心得</title>
    <link href="http://yoursite.com/2018/11/04/2018-11-04/"/>
    <id>http://yoursite.com/2018/11/04/2018-11-04/</id>
    <published>2018-11-04T03:17:21.356Z</published>
    <updated>2018-11-04T03:34:41.412Z</updated>
    
    <content type="html"><![CDATA[<link rel="stylesheet" class="aplayer-secondary-style-marker" href="/assets/css/APlayer.min.css"><script src="/assets/js/APlayer.min.js" class="aplayer-secondary-script-marker"></script><p>完成了vue项目的时候，内心是很开心的，终于做成了一个小项目了，从当初的只是一个界面到，后面要去写后端，但是一开始不会写后端接口，那个时候真的很烦躁，后来发现了一个别人写好的跨域交互的案例，就打开来看学着别人的去写，那时候发现噢原来我自己也是可以用node去写后端的接口的喔，那时候就用node去写接口，顺着别人的思路和骨架去写，后面发现不单止要写后端接口还要去操作数据库，虽然我会一点点数据库操作，但是我对数据库的设计并不是非常的了解，只可以边写前端的页面需要用到什么的时候，看着教程的项目接口自己去设计和操作数据库，一开始也是很多碰壁的，设计好数据库图片数据用什么方式存呢也想了很久，后面就是操作数据库查询，也是一点一点的写上网查询慢慢的去改进，解决了后端的事情还是继续去写前端，就是一次又一次的写前端页面-&gt;接口-&gt;操作数据-&gt;获取返回数据，在这个时候我发现其实做后端开发也是不容易虽然说是分好路由、业务逻辑、操作数据库，但是还是挺苦的，慢慢端熟悉了其实也觉得没什么吧，在写前端页面的时候虽然是跟着教程做但是也是出现了很多的bug，也是让我很苦恼，这只是一个小小的项目就让我心态都要奔溃了，这个购物商场也还是没有写完的呢还有很多的功能可以完善，其实我很想说项目写到了后面前面的好像又忘记了，我的天啊这样着么在it界混下去呢；<br>很多的技术好像都学过但是到了用的时候发现自己脑子里面好像什么都没有，好像自己从来都没有接触过一样，一步一步慢慢的走吧！准备写一个博客的小项目</p>]]></content>
    
    <summary type="html">
    
      
      
        &lt;link rel=&quot;stylesheet&quot; class=&quot;aplayer-secondary-style-marker&quot; href=&quot;/assets/css/APlayer.min.css&quot;&gt;&lt;script src=&quot;/assets/js/APlayer.min.js&quot; cla
      
    
    </summary>
    
      <category term="个人" scheme="http://yoursite.com/categories/%E4%B8%AA%E4%BA%BA/"/>
    
    
      <category term="个人" scheme="http://yoursite.com/tags/%E4%B8%AA%E4%BA%BA/"/>
    
  </entry>
  
  <entry>
    <title>Vue day10</title>
    <link href="http://yoursite.com/2018/11/04/Vue-day10/"/>
    <id>http://yoursite.com/2018/11/04/Vue-day10/</id>
    <published>2018-11-04T02:45:10.713Z</published>
    <updated>2018-11-04T02:46:03.518Z</updated>
    
    <content type="html"><![CDATA[<link rel="stylesheet" class="aplayer-secondary-style-marker" href="/assets/css/APlayer.min.css"><script src="/assets/js/APlayer.min.js" class="aplayer-secondary-script-marker"></script><h2 id="开启Apache的gzip压缩"><a href="#开启Apache的gzip压缩" class="headerlink" title="开启Apache的gzip压缩"></a>开启Apache的gzip压缩</h2><p>要让apache支持gzip功能，要用到deflate_Module和headers_Module。打开apache的配置文件httpd.conf，大约在105行左右，找到以下两行内容：（这两行不是连续在一起的）<br><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">#LoadModule deflate_module modules/mod_deflate.so</span><br><span class="line">#LoadModule headers_module modules/mod_headers.so</span><br></pre></td></tr></table></figure></p><p>然后将其前面的“#”注释删掉，表示开启gzip压缩功能。开启以后还需要进行相关配置。在httpd.conf文件的最后添加以下内容即可：<br><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line">&lt;IfModule deflate_module&gt;</span><br><span class="line">    #必须的，就像一个开关一样，告诉apache对传输到浏览器的内容进行压缩</span><br><span class="line">    SetOutputFilter DEFLATE</span><br><span class="line">    DeflateCompressionLevel 9</span><br><span class="line">&lt;/IfModule&gt;</span><br></pre></td></tr></table></figure></p><p>最少需要加上以上内容，才可以生gzip功能生效。由于没有做其它的额外配置，所以其它相关的配置均使用Apache的默认设置。这里说一下参数“DeflateCompressionLevel”，它表示压缩级别，值从1到9，值越大表示压缩的越厉害。</p><h2 id="使用ngrok将本机映射为一个外网的Web服务器"><a href="#使用ngrok将本机映射为一个外网的Web服务器" class="headerlink" title="使用ngrok将本机映射为一个外网的Web服务器"></a>使用ngrok将本机映射为一个外网的Web服务器</h2><p>注意：由于默认使用的美国的服务器进行中间转接，所以访问速度炒鸡慢，访问时可启用FQ软件，提高网页打开速度！</p>]]></content>
    
    <summary type="html">
    
      
      
        &lt;link rel=&quot;stylesheet&quot; class=&quot;aplayer-secondary-style-marker&quot; href=&quot;/assets/css/APlayer.min.css&quot;&gt;&lt;script src=&quot;/assets/js/APlayer.min.js&quot; cla
      
    
    </summary>
    
      <category term="Vue" scheme="http://yoursite.com/categories/Vue/"/>
    
    
      <category term="Vue笔记" scheme="http://yoursite.com/tags/Vue%E7%AC%94%E8%AE%B0/"/>
    
  </entry>
  
  <entry>
    <title>YHF-Vue 前后端交互 购物城项目</title>
    <link href="http://yoursite.com/2018/11/04/yhf-vue/"/>
    <id>http://yoursite.com/2018/11/04/yhf-vue/</id>
    <published>2018-11-04T02:13:47.359Z</published>
    <updated>2018-11-15T15:02:20.309Z</updated>
    
    <content type="html"><![CDATA[<link rel="stylesheet" class="aplayer-secondary-style-marker" href="/assets/css/APlayer.min.css"><script src="/assets/js/APlayer.min.js" class="aplayer-secondary-script-marker"></script><h1 id="案例分布"><a href="#案例分布" class="headerlink" title="案例分布"></a>案例分布</h1><ul><li>前端 (2.vue-cms)<ul><li>webpack</li><li>vue</li></ul></li><li>后端 (node_server)<ul><li>node</li></ul></li><li>数据库 (VueUser.sql)<ul><li>mysql</li></ul></li><li>后端接口api</li><li><a href="https://yhf7.github.io/2018/10/17/npm-Plug-in/" target="_blank" rel="noopener">插件安装配置</a></li><li><a href="https://github.com/YHF7/Vue/tree/master/YHF-vue" target="_blank" rel="noopener">完整项目下载Github</a></li><li><a href="https://gitee.com/yhf7/vue0001" target="_blank" rel="noopener">码云前端地址</a></li><li><a href="https://gitee.com/yhf7/node" target="_blank" rel="noopener">码云后端地址</a></li><li>更多vue学习请看 vue1-vue11笔记</li></ul><h1 id="YHF·Vue-项目-说明"><a href="#YHF·Vue-项目-说明" class="headerlink" title="YHF·Vue 项目 说明"></a>YHF·Vue 项目 说明</h1><ol><li>初始化项目<ul><li>搭建基础架构</li><li>安装依赖</li><li>测试架构能否执行</li></ul></li><li><p>搭建项目主页</p><ul><li>主页头部 Header,使用 MintUI 的 Header 组件</li><li>主页底部 Tabbar,使用 MUI 的 Tabbar.html<ul><li>在制作 购物车 小图标的时候，操作会相对多一些：</li><li>先把 扩展图标的 css 样式，拷贝到 项目中</li><li>拷贝 扩展字体库 ttf 文件，到项目中</li><li>为 购物车 小图标 ，添加 如下样式 <code>mui-icon mui-icon-extra mui-icon-extra-cart</code></li></ul></li><li>要在 中间区域放一个 router-view 来展示路由匹配到的区域</li><li>改造 tabbar 为 router-link</li><li>实现路由切换高亮 linkActiveClass: ‘mui-active’ // 覆盖默认的路由高亮的类</li><li>点击 tabbar 中的路由链接，展示对应的路由组件<ul><li>导入对应的组件</li><li>配置路由</li><li>在 app.vue 插入 router-view</li></ul></li><li>添加轮播图</li><li>加载首页轮播图数据<ul><li>获取数据， 如何获取呢， 使用 vue-resource</li><li>使用 vue-resource 的 this.$http.get 获取数据</li><li>获取到的数据，要保存到 data 身上</li><li>使用 v-for 循环渲染 每个 item 项</li></ul></li><li>改造 九宫格 区域的样式</li><li>改造 新闻资讯 路由链接</li><li>新闻资讯 页面 制作<ol><li>绘制界面， 使用 MUI 中的 media-list.html</li><li>使用 vue-resource 获取数据</li><li>渲染真实数据</li></ol></li><li><p>实现 新闻资讯列表 点击跳转到新闻详情</p><ol><li>把列表中的每一项改造为 router-link,同时，在跳转的时候应该提供唯一的 Id 标识符</li><li>创建新闻详情的组件页面 NewsInfo.vue</li><li>在 路由模块中，将 新闻详情的 路由地址 和 组件页面对应起来</li></ol></li><li><p>实现 新闻详情 的 页面布局 和数据渲染</p></li><li><p>单独封装一个 comment.vue 评论子组件</p><ol><li>先创建一个 单独的 comment.vue 组件模板</li><li>在需要使用 comment 组件的 页面中，先手动 导入 comment 组件</li></ol><ul><li><code>import comment from &#39;./comment.vue&#39;</code></li></ul><ol start="3"><li>在父组件中，使用 <code>components</code> 属性，将刚才导入 comment 组件，注册为自己的 子组件</li><li>将注册子组件时候的，注册名称，以 标签形式，在页面中 引用即可</li></ol></li><li><p>获取所有的评论数据显示到页面中</p></li><li><p>实现点击加载更多评论的功能</p><ol><li>为加载更多按钮，绑定点击事件，在事件中，请求 下一页数据</li><li>点击加载更多，让 pageIndex++ , 然后重新调用 this.getComments() 方法重新获取最新一页的数据</li><li>为了防止 新数据 覆盖老数据的情况，我们在 点击加载更多的时候，每当获取到新数据，应该让 老数据 调用 数组的 concat 方法，拼接上新数组</li></ol></li><li><p>发表评论</p><ol><li>把文本框做双向数据绑定</li><li>为发表按钮绑定一个事件</li><li>校验评论内容是否为空，如果为空，则 Toast 提示用户 评论内容不能为空</li><li>通过 vue-resource 发送一个请求，把评论内容提交给 服务器</li><li>当发表评论 OK 后，重新刷新列表，以查看最新的评论</li></ol><ul><li>如果调用 getComments 方法重新刷新评论列表的话，可能只能得到 最后一页的评论，前几页的评论获取不到</li><li>换一种思路： 当评论成功后，在客户端，手动拼接出一个 最新的评论对象，然后 调用 数组的 unshift 方法， 把最新的评论，追加到 data 中 comments 的开头；这样，就能 完美实现刷新评论列表的需求；</li></ul></li><li><p>改造图片分析 按钮为 路由的链接并显示对应的组件页面</p></li><li><p>绘制 图片列表 组件页面结构并美化样式</p><ol><li>制作 顶部的滑动条</li><li>制作 底部的图片列表</li></ol></li><li><p>制作顶部滑动条的坑们：</p><ol><li>需要借助于 MUI 中的 tab-top-webview-main.html</li><li>需要把 slider 区域的 mui-fullscreen 类去掉</li><li><p>滑动条无法正常触发滑动，通过检查官方文档，发现这是 JS 组件，需要被初始化一下：</p><ul><li>导入 mui.js</li><li>调用官方提供的 方式 去初始化：<figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line">mui(&apos;.mui-scroll-wrapper&apos;).scroll(&#123;</span><br><span class="line">  deceleration: 0.0005 //flick 减速系数，系数越大，滚动速度越慢，滚动距离越小，默认值0.0006</span><br><span class="line">&#125;);</span><br></pre></td></tr></table></figure></li></ul></li><li><p>我们在初始化 滑动条 的时候，导入的 mui.js ，但是，控制台报错： <code>Uncaught TypeError: &#39;caller&#39;, &#39;callee&#39;, and &#39;arguments&#39; properties may not be accessed on strict mode</code></p><ul><li>经过我们合理的推测，觉得，可能是 mui.js 中用到了 ‘caller’, ‘callee’, and ‘arguments’ 东西，但是， webpack 打包好的 bundle.js 中，默认是启用严格模式的，所以，这两者冲突了；</li><li>解决方案： 1. 把 mui.js 中的 非严格 模式的代码改掉；但是不现实； 2. 把 webpack 打包时候的严格模式禁用掉；</li><li>最终，我们选择了 plan B 移除严格模式： 使用这个插件 babel-plugin-transform-remove-strict-mode</li></ul></li><li>刚进入 图片分享页面的时候， 滑动条无法正常工作， 经过我们认真的分析，发现， 如果要初始化 滑动条，必须要等 DOM 元素加载完毕，所以，我们把 初始化 滑动条 的代码，搬到了 mounted 生命周期函数中；</li><li>当 滑动条 调试 OK 后，发现， tabbar 无法正常工作了，这时候，我们需要把 每个 tabbar 按钮的 样式中 <code>mui-tab-item</code> 重新改一下名字；</li><li>获取所有分类，并渲染 分类列表；</li></ol></li><li><p>制作图片列表区域</p><ol><li>图片列表需要使用懒加载技术，我们可以使用 Mint-UI 提供的现成的 组件 <code>lazy-load</code></li><li>根据<code>lazy-load</code>的使用文档，尝试使用</li><li>渲染图片列表数据</li></ol></li><li><p>实现了 图片列表的 懒加载改造和 样式美化</p></li><li><p>实现了 点击图片 跳转到 图片详情页面</p><ol><li>在改造 li 成 router-link 的时候，需要使用 tag 属性指定要渲染为 哪种元素</li></ol></li><li><p>实现 详情页面的布局和美化，同时获取数据渲染页面</p></li><li><p>实现 图片详情中 缩略图的功能</p><ol><li>使用 插件 vue-preview 这个缩略图插件</li><li>获取到所有的图片列表，然后使用 v-for 指令渲染数据</li><li>注意： img 标签上的 class 不能去掉</li><li>注意： 每个 图片数据对象中，必须有 w 和 h 属性</li></ol></li><li><p>绘制 商品列表 页面基本结构并美化</p></li><li><p>尝试在手机上 去进行项目的预览和测试</p><ol><li>要保证自己的手机可以正常运行；</li><li>要保证 手机 和 开发项目的电脑 处于同一个 WIFI 环境中，也就是说 手机 可以 访问到 电脑的 IP</li><li>打开自己的 项目中 package.json 文件，在 dev 脚本中，添加一个 –host 指令， 把 当前 电脑的 WIFI IP 地址， 设置为 –host 的指令值；</li></ol></li><li><p>如何查看自己电脑所处 WIFI 的 IP 呢， 在 cmd 终端中运行 <code>ipconfig</code> ， 查看 无线网的 ip 地址</p></li></ul></li><li><p>把项目 git 远端存储库</p></li></ol><ul><li><a href="https://blog.csdn.net/testcs_dn/article/details/38496107" target="_blank" rel="noopener">开源协议</a></li><li><a href="https://www.liaoxuefeng.com/wiki/0013739516305929606dd18361248578c67b8067c8c017b000/00150154460073692d151e784de4d718c67ce836f72c7c4000" target="_blank" rel="noopener">廖雪峰教 git</a></li><li>初始化 git<ul><li>sudo git init</li><li>sudo git status</li><li>sudo git add .</li><li>sudo git commit -m “add init”</li><li>sudo git remote add origin <a href="https://github.com/YHF7/YHF7.github.io.git" target="_blank" rel="noopener">https://github.com/YHF7/YHF7.github.io.git</a></li><li>sudo git push -u origin master</li></ul></li></ul><h1 id="案例效果图"><a href="#案例效果图" class="headerlink" title="案例效果图"></a>案例效果图</h1><p><img src="/yhf-vue/yhf-vue1.png" alt="yhf-vue"><br><img src="/yhf-vue/yhf-vue2.png" alt="yhf-vue"><br><img src="/yhf-vue/yhf-vue3.png" alt="yhf-vue"><br><img src="/yhf-vue/yhf-vue4.png" alt="yhf-vue"><br><img src="/yhf-vue/yhf-vue5.png" alt="yhf-vue"><br><img src="/yhf-vue/yhf-vue6.png" alt="yhf-vue"><br><img src="/yhf-vue/yhf-vue7.png" alt="yhf-vue"></p>]]></content>
    
    <summary type="html">
    
      
      
        &lt;link rel=&quot;stylesheet&quot; class=&quot;aplayer-secondary-style-marker&quot; href=&quot;/assets/css/APlayer.min.css&quot;&gt;&lt;script src=&quot;/assets/js/APlayer.min.js&quot; cla
      
    
    </summary>
    
      <category term="Vue" scheme="http://yoursite.com/categories/Vue/"/>
    
    
      <category term="Vue 案例" scheme="http://yoursite.com/tags/Vue-%E6%A1%88%E4%BE%8B/"/>
    
  </entry>
  
</feed>
