<?xml version="1.0" encoding="utf-8"?>
<feed xmlns="http://www.w3.org/2005/Atom">
  <title>不懂IT的男孩</title>
  
  <subtitle>不忘初心，方得始终</subtitle>
  <link href="/atom.xml" rel="self"/>
  
  <link href="http://yoursite.com/"/>
  <updated>2019-04-08T04:19:28.439Z</updated>
  <id>http://yoursite.com/</id>
  
  <author>
    <name>Detail</name>
    
  </author>
  
  <generator uri="http://hexo.io/">Hexo</generator>
  
  <entry>
    <title>阿里云 Centos 7 安装 PHP开发环境 Apache/PHP</title>
    <link href="http://yoursite.com/2019/04/08/%E9%98%BF%E9%87%8C%E4%BA%91%E5%AE%89%E8%A3%85PHP%E5%BC%80%E5%8F%91%E7%8E%AF%E5%A2%83/"/>
    <id>http://yoursite.com/2019/04/08/阿里云安装PHP开发环境/</id>
    <published>2019-04-08T02:50:27.726Z</published>
    <updated>2019-04-08T04:19:28.439Z</updated>
    
    <content type="html"><![CDATA[<link rel="stylesheet" class="aplayer-secondary-style-marker" href="/assets/css/APlayer.min.css"><script src="/assets/js/APlayer.min.js" class="aplayer-secondary-script-marker"></script><h1 id="前言"><a href="#前言" class="headerlink" title="前言"></a>前言</h1><ul><li>既然搭了mysql，为什么不把php也布置上来呢</li><li>这就安装Apache，弄了一晚上也是出现了一些错误弄了几次最后战胜了它</li></ul><h1 id="安装-Apache"><a href="#安装-Apache" class="headerlink" title="安装 Apache"></a>安装 Apache</h1><h2 id="检查环境"><a href="#检查环境" class="headerlink" title="检查环境"></a>检查环境</h2><ol><li>查看系统是否已经安装,我已经安装了所以会已经存在 （如果没有的直接看后面安装就好）<figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">$ rpm -qa | grep httpd</span><br></pre></td></tr></table></figure></li></ol><p><img src="/aly/p1.png" alt="php"></p><ol start="2"><li><p>停止服务器运行</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">$ /usr/sbin/httpd -k stop</span><br></pre></td></tr></table></figure></li><li><p>清空原有点安装包</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">$ yum -y erase httpd.x86_64</span><br></pre></td></tr></table></figure></li><li><p>再次查看是否已经清空(如果没有请继续清除)</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">$ yum list | grep httpd</span><br></pre></td></tr></table></figure></li></ol><h2 id="yum命令安装http"><a href="#yum命令安装http" class="headerlink" title="yum命令安装http"></a>yum命令安装http</h2><ol><li>安装httpd<figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">$  yum -y install httpd</span><br></pre></td></tr></table></figure></li></ol><p><img src="/aly/p2.png" alt="php"></p><ol start="2"><li><p>删除默认的欢迎页面(这个没有截图)</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">$ rm -f /etc/httpd/conf.d/welcome.conf</span><br></pre></td></tr></table></figure></li><li><p>配置httpd，将服务器名称替换为您自己的环境 （默认的80端口最好别动）</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br></pre></td><td class="code"><pre><span class="line">$ vim /etc/httpd/conf/httpd.conf</span><br><span class="line"></span><br><span class="line">------------------------</span><br><span class="line"><span class="comment"># line 86: 改变管理员的邮箱地址</span></span><br><span class="line">ServerAdmin root@905477376@qq.com</span><br><span class="line"><span class="comment"># line 95: 改变域名信息 (域名还没批先用公网ip代替着)</span></span><br><span class="line">ServerName 119.23.75.150:80</span><br><span class="line"><span class="comment"># line 151: none变成All</span></span><br><span class="line">AllowOverride All</span><br><span class="line"><span class="comment"># line 164: 添加只能使用目录名称访问的文件名</span></span><br><span class="line">DirectoryIndex index.html index.cgi index.php</span><br></pre></td></tr></table></figure></li></ol><hr><p><img src="/aly/p3.png" alt="php"><br><img src="/aly/p6.png" alt="php"><br><img src="/aly/p7.png" alt="php"><br><img src="/aly/p8.png" alt="php"></p><ol start="4"><li>开启服务器 (如果用的是阿里轻量级安装有nginx的这里要注意了)<figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">$ systemctl start httpd(这个开启也可以)</span><br><span class="line">$ httpd（我个人喜欢直接用这个开启服务）</span><br></pre></td></tr></table></figure></li></ol><p><img src="/aly/p4.png" alt="php"></p><ol start="5"><li>假如出现上图那个98的那个错误其实就是端口被占用（nginx引起的错误）</li></ol><ul><li>解决方法1按照上面图片说的改一个端口就好了</li><li>解决方法2：屏蔽反向代理<figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment"># 1.修改配置</span></span><br><span class="line">$ vim /usr/<span class="built_in">local</span>/nginx/conf/nginx.conf</span><br><span class="line"><span class="comment"># 2.检查修改是否合法</span></span><br><span class="line">$ /usr/<span class="built_in">local</span>/nginx/sbin/nginx -t</span><br><span class="line"><span class="comment"># 出现下面这两句表示正确</span></span><br><span class="line"><span class="comment"># the configuration file /usr/local/nginx/conf/nginx.conf syntax is ok</span></span><br><span class="line"><span class="comment"># configuration file /usr/local/nginx/conf/nginx.conf test is successful</span></span><br><span class="line"><span class="comment"># 3.重启nginx</span></span><br><span class="line">$ /usr/<span class="built_in">local</span>/nginx/sbin/nginx -s reload</span><br></pre></td></tr></table></figure></li></ul><p><img src="/aly/p5.png" alt="php"></p><ol start="6"><li><p>设置默认启动httpd</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">$ systemctl <span class="built_in">enable</span> httpd</span><br></pre></td></tr></table></figure></li><li><p>如果开启了防火墙的指向下面的命令开启（阿里轻量级不需要，在后台设置就好不过默认就是80）</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line">$ firewall-cmd --add-service=http --permanent</span><br><span class="line"><span class="comment"># 出现 success 成功</span></span><br><span class="line">$ firewall-cmd --reload</span><br><span class="line"><span class="comment"># 出现 success 成功</span></span><br></pre></td></tr></table></figure></li><li><p>第一个服务器页面（刚才一开始被我们删了）</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">$ vim /var/www/html/index.html</span><br></pre></td></tr></table></figure></li></ol><ul><li>写入这一段进去保存<figure class="highlight html"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">html</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">body</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">div</span> <span class="attr">style</span>=<span class="string">"width: 100%; font-size: 40px; font-weight: bold; text-align: center;"</span>&gt;</span></span><br><span class="line">Welcome access LinuxProbe.org,This is Test Page!</span><br><span class="line"><span class="tag">&lt;/<span class="name">div</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">body</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">html</span>&gt;</span></span><br></pre></td></tr></table></figure></li></ul><ol start="9"><li>查看第一个服务器页面</li></ol><ul><li>网页打开输入自己的域名或者ip，能出现图片中的样子就是配置成功了<br><img src="/aly/p9.png" alt="php"></li></ul><h2 id="Apache-常用命令"><a href="#Apache-常用命令" class="headerlink" title="Apache 常用命令"></a>Apache 常用命令</h2><ul><li>开机和关闭命令中有多个，选其一使用就好<figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment"># 开启</span></span><br><span class="line">$ httpd</span><br><span class="line">$ /usr/sbin/httpd -k start</span><br><span class="line">$ systemctl start httpd.service</span><br><span class="line"></span><br><span class="line"><span class="comment"># 关闭</span></span><br><span class="line">$ /usr/sbin/httpd -k stop</span><br><span class="line">$ systemctl stop httpd.service</span><br><span class="line"></span><br><span class="line"><span class="comment"># 重启</span></span><br><span class="line">$ /usr/sbin/httpd -k restart</span><br><span class="line"></span><br><span class="line"><span class="comment"># 开机启动/关闭</span></span><br><span class="line">systemctl <span class="built_in">enable</span> httpd.service <span class="comment">#开机启动</span></span><br><span class="line">systemctl <span class="built_in">disable</span> httpd.service <span class="comment">#开机不启动</span></span><br><span class="line"></span><br><span class="line"><span class="comment"># 状态检查</span></span><br><span class="line">$ systemctl status httpd.service</span><br></pre></td></tr></table></figure></li></ul><h1 id="安装PHP"><a href="#安装PHP" class="headerlink" title="安装PHP"></a>安装PHP</h1><ol><li>安装<figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">$ yum -y install php php-mbstring php-pear</span><br></pre></td></tr></table></figure></li></ol><p><img src="/aly/php1.png" alt="php"></p><ol start="2"><li>设置时区<figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line">$ vim /etc/php.ini</span><br><span class="line"><span class="comment"># line 878: 取消注释，设置时区</span></span><br><span class="line">date.timezone = <span class="string">"Asia/Shanghai"</span></span><br></pre></td></tr></table></figure></li></ol><p><img src="/aly/php2.png" alt="php"></p><ol start="3"><li>创建一个PHP测试页面，并使用Web浏览器从客户端PC访问它。如果显示以下页面，它是确定。(ip+index.php)<figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">$ vim /var/www/html/index.php</span><br></pre></td></tr></table></figure></li></ol><figure class="highlight html"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br></pre></td><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">html</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">body</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">div</span> <span class="attr">style</span>=<span class="string">"width: 100%; font-size: 40px; font-weight: bold; text-align: center;"</span>&gt;</span></span><br><span class="line">&lt;?php</span><br><span class="line">   print Date("Y/m/d");</span><br><span class="line">?&gt;</span><br><span class="line"><span class="tag">&lt;/<span class="name">div</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">body</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">html</span>&gt;</span></span><br></pre></td></tr></table></figure><p><img src="/aly/php3.png" alt="php"></p><ol start="4"><li>创建phpinfo测试页，确认是都开启php支持<figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">$ <span class="built_in">echo</span> <span class="string">"&lt;?php phpinfo(); ?&gt;"</span> &gt; /var/www/html/phpinfo.php</span><br></pre></td></tr></table></figure></li></ol><p><img src="/aly/php4.png" alt="php"></p>]]></content>
    
    <summary type="html">
    
      
      
        &lt;link rel=&quot;stylesheet&quot; class=&quot;aplayer-secondary-style-marker&quot; href=&quot;/assets/css/APlayer.min.css&quot;&gt;&lt;script src=&quot;/assets/js/APlayer.min.js&quot; cla
      
    
    </summary>
    
      <category term="服务器" scheme="http://yoursite.com/categories/%E6%9C%8D%E5%8A%A1%E5%99%A8/"/>
    
    
      <category term="数据库" scheme="http://yoursite.com/tags/%E6%95%B0%E6%8D%AE%E5%BA%93/"/>
    
  </entry>
  
  <entry>
    <title>阿里云 Centos 7 安装5.6mysql</title>
    <link href="http://yoursite.com/2019/04/07/%E9%98%BF%E9%87%8C%E4%BA%91%E5%AE%89%E8%A3%855.6mysql/"/>
    <id>http://yoursite.com/2019/04/07/阿里云安装5.6mysql/</id>
    <published>2019-04-07T07:44:47.407Z</published>
    <updated>2019-04-07T10:52:50.622Z</updated>
    
    <content type="html"><![CDATA[<link rel="stylesheet" class="aplayer-secondary-style-marker" href="/assets/css/APlayer.min.css"><script src="/assets/js/APlayer.min.js" class="aplayer-secondary-script-marker"></script><h1 id="前言"><a href="#前言" class="headerlink" title="前言"></a>前言</h1><ul><li>买了服务器当然要尽情的糟蹋它，给了钱的不能浪费啊</li><li>昨天开启了默认的mongodb然后把之前弄的mongodb的项目放了上去</li><li>我就想mysql的能不能放上去呢，虽然是轻量级应用但是他也是服务器啊只是默认会安装一种语言而已</li><li>那我就想把mysql装上去，为了避免新版与旧版起冲突我就安装了5.6版的我本地好像是5.6还是5.5忘记了</li><li>自己安装是个巨坑希望能帮到你</li></ul><h1 id="工具"><a href="#工具" class="headerlink" title="工具"></a>工具</h1><ul><li>Centos 7 服务器</li><li>熟悉vim</li><li>本地 Navicat of Mysql 测试连接</li></ul><h1 id="开始"><a href="#开始" class="headerlink" title="开始"></a>开始</h1><h2 id="安装配置"><a href="#安装配置" class="headerlink" title="安装配置"></a>安装配置</h2><ol><li><p>检查服务器是否自带有mysql(用别人镜像的需要注意)</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">$ yum list installed | grep mysql</span><br></pre></td></tr></table></figure></li><li><p>如果发现有系统自带mysql，果断这么干</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">$ yum -y remove mysql-libs.x86_64</span><br></pre></td></tr></table></figure></li><li><p>随便在你存放文件的目录下执行，mysql的yum源服务器在国外的，会比较慢不过我有梯子我不怕哈哈哈</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">$ wget http://repo.mysql.com/mysql-community-release-el6-5.noarch.rpm</span><br></pre></td></tr></table></figure></li><li><p>这个rpm还不是mysql的安装文件，只是两个yum源文件，执行后，在/etc/yum.repos.d/ 这个目录下多出mysql-community-source.repo和mysql-community.repo</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">$ rpm -ivh mysql-community-release-el6-5.noarch.rpm</span><br></pre></td></tr></table></figure></li><li><p>这个时候，可以用yum repolist mysql这个命令查看一下是否已经有mysql可安装文件</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">$ yum repolist all | grep mysql</span><br></pre></td></tr></table></figure></li><li><p>安装mysql 服务器命令（一路yes）</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">$ yum install mysql-community-server</span><br></pre></td></tr></table></figure></li></ol><p><img src="/aly/sql9.png" alt="sql"><br><img src="/aly/sql1.png" alt="sql"><br><img src="/aly/sql1=2.png" alt="sql"></p><ol start="7"><li>安装成功后开启sql（默认没有密码）<figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">$ service mysqld start</span><br></pre></td></tr></table></figure></li></ol><p><img src="/aly/sql3.png" alt="sql"></p><ol start="8"><li>由于mysql刚刚安装完的时候，mysql的root用户的密码默认是空的，所以我们需要及时用mysql的root用户登录（第一次回车键，不用输入密码），并修改密码(注意看我上面的图我是用mysql进来了的)<figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">$ update user <span class="built_in">set</span> password=PASSWORD(<span class="string">"这里输入root用户密码"</span>) <span class="built_in">where</span> User=<span class="string">'root'</span>;</span><br></pre></td></tr></table></figure></li></ol><p><img src="/aly/sql4.png" alt="sql"></p><ol start="9"><li><p>查看mysql是否自启动,并且设置开启自启动命令</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">$ chkconfig --list | grep mysqld</span><br><span class="line">$ chkconfig mysqld on</span><br></pre></td></tr></table></figure></li><li><p>清除安装包</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">$ rm -rf mysql-community-release-el6-5.noarch.rpm</span><br></pre></td></tr></table></figure></li></ol><p><img src="/aly/sql12.png" alt="sql"></p><h2 id="案例测试连接数据库"><a href="#案例测试连接数据库" class="headerlink" title="案例测试连接数据库"></a>案例测试连接数据库</h2><ol><li>生产开发环境<figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment"># 一个mysql的文件夹</span></span><br><span class="line">$ mkdir mysql</span><br><span class="line"><span class="comment"># 进入文件假</span></span><br><span class="line">$ <span class="built_in">cd</span> mysql</span><br><span class="line"><span class="comment">#  初始化项目</span></span><br><span class="line">$ npm init -y</span><br><span class="line"><span class="comment"># 安装mysql依赖包</span></span><br><span class="line">$ npm i mysql</span><br><span class="line"><span class="comment"># 建立一个文件写代码</span></span><br><span class="line">$ touch app.js</span><br><span class="line"><span class="comment"># vim编写app.js</span></span><br><span class="line">$ vim app.js</span><br></pre></td></tr></table></figure></li></ol><p><img src="/aly/sql6.png" alt="sql"></p><ol start="2"><li>编写app.js<figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">var</span> mysql = <span class="built_in">require</span>(<span class="string">"mysql"</span>);</span><br><span class="line"><span class="keyword">var</span> conn = mysql.createConnection(&#123;</span><br><span class="line">    host:<span class="string">'127.0.0.1'</span>, <span class="comment">// ip</span></span><br><span class="line">    user:<span class="string">'root'</span>, <span class="comment">// 用户名</span></span><br><span class="line">    password:<span class="string">'xxxxx'</span>, <span class="comment">// 密码</span></span><br><span class="line">    database:<span class="string">'test'</span>  <span class="comment">// 数据库名</span></span><br><span class="line">&#125;);</span><br><span class="line"></span><br><span class="line">conn.connect(<span class="function"><span class="keyword">function</span>(<span class="params">err</span>)</span>&#123;</span><br><span class="line">    <span class="keyword">if</span>(err)&#123;</span><br><span class="line">        <span class="built_in">console</span>.log(<span class="string">"连接失败"</span>);</span><br><span class="line">    &#125;<span class="keyword">else</span>&#123;</span><br><span class="line">        <span class="built_in">console</span>.log(<span class="string">"连接成功"</span>);</span><br><span class="line">    &#125;</span><br><span class="line">&#125;);</span><br></pre></td></tr></table></figure></li></ol><p><img src="/aly/sql5.png" alt="sql"></p><ul><li>用node app.js 跑起来<br>看到如图就是正确连接到数据库了<br><img src="/aly/sql7.png" alt="sql"></li></ul><h2 id="设置权限外网连接数据库"><a href="#设置权限外网连接数据库" class="headerlink" title="设置权限外网连接数据库"></a>设置权限外网连接数据库</h2><ol><li>设置权限<figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line">$ mysql -uroot -p</span><br><span class="line">$ use mysql;</span><br><span class="line">$ Grant all privileges on *.* to <span class="string">'root'</span>@<span class="string">'%'</span> identified by <span class="string">'密码'</span> with grant option;  </span><br><span class="line">$ flush privileges;</span><br></pre></td></tr></table></figure></li></ol><p><img src="/aly/sql8.png" alt="sql"></p><ol start="2"><li>本地连接测试</li></ol><ul><li>使用navicat mysql<br><img src="/aly/sql10.png" alt="sql"></li><li>点击测试<br><img src="/aly/sql11.png" alt="sql"></li></ul><h2 id="安装后使用命令出现1044报错-处理"><a href="#安装后使用命令出现1044报错-处理" class="headerlink" title="安装后使用命令出现1044报错 处理"></a>安装后使用命令出现1044报错 处理</h2><ol><li><p>停掉数据库</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">$ /etc/init.d/mysqld stop</span><br></pre></td></tr></table></figure></li><li><p>进入数据库安全模式</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">$ mysqld_safe --skip-grant-tables &amp;</span><br></pre></td></tr></table></figure></li><li><p>切入到mysql然后操作修改密码</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><span class="line">$ mysql</span><br><span class="line"></span><br><span class="line"><span class="comment"># 要看见mysql&gt; 才去执行后面的代表已经进入了数据库 (test123哪里是写密码自己喜欢什么写什么)</span></span><br><span class="line">$ use mysql;</span><br><span class="line">$ UPDATE user SET password=password(<span class="string">"test123"</span>) WHERE user=<span class="string">'root'</span>;   </span><br><span class="line">$ flush privileges;</span><br><span class="line">$ <span class="built_in">exit</span>;</span><br></pre></td></tr></table></figure></li><li><p>再次进入测试</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">$ mysql -uroot -p</span><br><span class="line">$ 输入刚才设置的密码</span><br></pre></td></tr></table></figure></li></ol><h1 id="后记"><a href="#后记" class="headerlink" title="后记"></a>后记</h1><ul><li>阿里云安装mysql以及连接测试，花了几个小时时间，一开始报错1044弄了好久后来弄好了，测外连接也报错后面也弄好了</li><li><a href="https://yhf7.github.io/" target="_blank" rel="noopener">欢迎进入我的博客</a>：<a href="https://yhf7.github.io/" target="_blank" rel="noopener">https://yhf7.github.io/</a></li><li>如果有什么侵权的话，请及时添加小编微信以及qq也可以来告诉小编（905477376微信qq通用），谢谢！</li></ul>]]></content>
    
    <summary type="html">
    
      
      
        &lt;link rel=&quot;stylesheet&quot; class=&quot;aplayer-secondary-style-marker&quot; href=&quot;/assets/css/APlayer.min.css&quot;&gt;&lt;script src=&quot;/assets/js/APlayer.min.js&quot; cla
      
    
    </summary>
    
      <category term="服务器" scheme="http://yoursite.com/categories/%E6%9C%8D%E5%8A%A1%E5%99%A8/"/>
    
    
      <category term="数据库" scheme="http://yoursite.com/tags/%E6%95%B0%E6%8D%AE%E5%BA%93/"/>
    
  </entry>
  
  <entry>
    <title>本地向阿里云服务器传文件/简单的nginx端口代理</title>
    <link href="http://yoursite.com/2019/04/05/%E9%98%BF%E9%87%8C%E4%BA%91zip/"/>
    <id>http://yoursite.com/2019/04/05/阿里云zip/</id>
    <published>2019-04-05T07:32:44.758Z</published>
    <updated>2019-04-05T08:17:07.324Z</updated>
    
    <content type="html"><![CDATA[<link rel="stylesheet" class="aplayer-secondary-style-marker" href="/assets/css/APlayer.min.css"><script src="/assets/js/APlayer.min.js" class="aplayer-secondary-script-marker"></script><h1 id="前言"><a href="#前言" class="headerlink" title="前言"></a>前言</h1><ul><li>既然线上已经可以跑了，那就看看着么把本地的项目放上去跑</li></ul><h1 id="工具"><a href="#工具" class="headerlink" title="工具"></a>工具</h1><ul><li>mac</li><li>已经写好的一个例子</li></ul><h1 id="开始"><a href="#开始" class="headerlink" title="开始"></a>开始</h1><h2 id="使用scp传文件到服务器"><a href="#使用scp传文件到服务器" class="headerlink" title="使用scp传文件到服务器"></a>使用scp传文件到服务器</h2><ul><li>本地做好的一个小案例，linux不支持传文件夹我们只好打包成zip传上去<figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">$ scp 要传的文件路径 用户@端口号:传到系统的那个位置</span><br></pre></td></tr></table></figure></li></ul><p><img src="/aly/z1.png" alt="选配"></p><h2 id="安装插件解压zip"><a href="#安装插件解压zip" class="headerlink" title="安装插件解压zip"></a>安装插件解压zip</h2><ul><li>直接这样我们是无法查看zip的</li><li>所以我们只好借助里面的插件来帮助我们<br>Linux(CentOS7)安装zip、unzip命令<figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">$ yum install -y unzip zip</span><br></pre></td></tr></table></figure></li></ul><p><img src="/aly/z2.png" alt="选配"></p><h2 id="解压运行项目"><a href="#解压运行项目" class="headerlink" title="解压运行项目"></a>解压运行项目</h2><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">$ unzip 要解压的文件</span><br></pre></td></tr></table></figure><p><img src="/aly/z3.png" alt="选配"><br><img src="/aly/z4.png" alt="选配"><br><img src="/aly/z5.png" alt="选配"></p><h2 id="nginx端口代理"><a href="#nginx端口代理" class="headerlink" title="nginx端口代理"></a>nginx端口代理</h2><ul><li>配置文件,添加代理<figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">$ vim /usr/<span class="built_in">local</span>/nginx/conf/nginx.conf</span><br></pre></td></tr></table></figure></li></ul><p><img src="/aly/n1.png" alt="选配"><br><img src="/aly/n2.png" alt="选配"></p><ul><li>重启nginx服务<figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">$ /usr/<span class="built_in">local</span>/nginx/sbin/nginx -s reload</span><br></pre></td></tr></table></figure></li></ul><p><img src="/aly/n3.png" alt="选配"><br><img src="/aly/n4.png" alt="选配"></p><h1 id="后记"><a href="#后记" class="headerlink" title="后记"></a>后记</h1><ul><li>阿里云上传文件已经nginx端口代理</li><li><a href="https://yhf7.github.io/" target="_blank" rel="noopener">欢迎进入我的博客</a>：<a href="https://yhf7.github.io/" target="_blank" rel="noopener">https://yhf7.github.io/</a></li><li>如果有什么侵权的话，请及时添加小编微信以及qq也可以来告诉小编（905477376微信qq通用），谢谢！</li></ul>]]></content>
    
    <summary type="html">
    
      
      
        &lt;link rel=&quot;stylesheet&quot; class=&quot;aplayer-secondary-style-marker&quot; href=&quot;/assets/css/APlayer.min.css&quot;&gt;&lt;script src=&quot;/assets/js/APlayer.min.js&quot; cla
      
    
    </summary>
    
      <category term="服务器" scheme="http://yoursite.com/categories/%E6%9C%8D%E5%8A%A1%E5%99%A8/"/>
    
    
      <category term="服务器" scheme="http://yoursite.com/tags/%E6%9C%8D%E5%8A%A1%E5%99%A8/"/>
    
  </entry>
  
  <entry>
    <title>阿里云 Centos7 node第一个项目</title>
    <link href="http://yoursite.com/2019/04/05/%E9%98%BF%E9%87%8C%E4%BA%91hello/"/>
    <id>http://yoursite.com/2019/04/05/阿里云hello/</id>
    <published>2019-04-05T04:55:22.821Z</published>
    <updated>2019-04-08T08:47:45.519Z</updated>
    
    <content type="html"><![CDATA[<link rel="stylesheet" class="aplayer-secondary-style-marker" href="/assets/css/APlayer.min.css"><script src="/assets/js/APlayer.min.js" class="aplayer-secondary-script-marker"></script><h1 id="前言"><a href="#前言" class="headerlink" title="前言"></a>前言</h1><ul><li>试过很多地方的战部，没有买过阿里腾讯的服务器，今天就想自己买个服务器玩一下</li><li>趁着还是学生可以以学生价格买个便宜一点服务器自己玩一下</li><li>买了下来当然是第一个Hello world那是必须的啦！</li></ul><h1 id="工具"><a href="#工具" class="headerlink" title="工具"></a>工具</h1><ul><li>Mac os 系统</li><li>控制台</li><li>阿里云Centos7服务器</li><li>由于我直接买的是应用程序不需要我自己去安装node那我说了</li><li>懂得vim使用，Linux命令</li></ul><h1 id="开始"><a href="#开始" class="headerlink" title="开始"></a>开始</h1><h2 id="购买服务器-（是学生就去把学生认证做了）"><a href="#购买服务器-（是学生就去把学生认证做了）" class="headerlink" title="购买服务器 （是学生就去把学生认证做了）"></a>购买服务器 （是学生就去把学生认证做了）</h2><ul><li><a href="https://promotion.aliyun.com/ntms/act/campus2018.html" target="_blank" rel="noopener">云计划</a><br><img src="/aly/x1.png" alt="选配"></li><li>控制台查看<br><img src="/aly/x2.png" alt="控制台"></li></ul><h2 id="本地连接服务器-激活nvm"><a href="#本地连接服务器-激活nvm" class="headerlink" title="本地连接服务器/激活nvm"></a>本地连接服务器/激活nvm</h2><ol><li>连接服务器</li></ol><ul><li>这个ip号就是公网的ip地址在控制台哪里可以看到的</li><li>ssh 登录用户@ip号<br><img src="/aly/x3.png" alt="连接服务器"></li></ul><ol start="2"><li>激活nvm</li></ol><ul><li>虽然内置已经安装了node等但是一开始是无法使用的<br><img src="/aly/x4.png" alt="vnm未激活"></li><li><p>使用命令激活nvm</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line">$ <span class="built_in">echo</span> <span class="string">". ~/.nvm/nvm.sh"</span> &gt;&gt; /etc/profile</span><br><span class="line"></span><br><span class="line">$ <span class="built_in">source</span> /etc/profile</span><br></pre></td></tr></table></figure></li><li><p>成功激活<br><img src="/aly/x5.png" alt="激活成功"></p></li></ul><ol start="3"><li>安装全局生成器<figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">$ npm install –g express-generator</span><br></pre></td></tr></table></figure></li></ol><h2 id="vim编写第一个Hello-wrold"><a href="#vim编写第一个Hello-wrold" class="headerlink" title="vim编写第一个Hello wrold"></a>vim编写第一个Hello wrold</h2><ol><li>项目初始化</li></ol><ul><li>本来就是在～了，直接创建一个text文件夹初始化项目<br><img src="/aly/x6.png" alt="文件夹"></li></ul><ol start="2"><li>安装web插件（express）</li></ol><ul><li>为了写起来更加的方便安装的一个web插件<figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">$ npm i express</span><br></pre></td></tr></table></figure></li></ul><p><img src="/aly/x9.png" alt="文件夹"></p><ol start="3"><li>创建文件并编写文件<br><img src="/aly/x7.png" alt="文件夹"></li></ol><ul><li>vim编辑文件<figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">// vim语法</span></span><br><span class="line">i: 写入</span><br><span class="line">esc: 退出编辑</span><br><span class="line">:wq 保存并登录</span><br><span class="line"></span><br><span class="line"><span class="comment">// 程序</span></span><br><span class="line"><span class="keyword">const</span> express = <span class="built_in">require</span>(<span class="string">'express'</span>);</span><br><span class="line"><span class="keyword">const</span> app = express();</span><br><span class="line"></span><br><span class="line">app.get(<span class="string">'/'</span>,<span class="function"><span class="keyword">function</span> (<span class="params">req,res</span>) </span>&#123;</span><br><span class="line"> res.send(<span class="string">'Hello World'</span>);</span><br><span class="line"> <span class="built_in">console</span>.log(<span class="string">'test'</span>);</span><br><span class="line">&#125;)</span><br><span class="line"></span><br><span class="line"><span class="built_in">console</span>.log(<span class="string">'test2'</span>);</span><br><span class="line">app.listen(<span class="number">8080</span>);</span><br></pre></td></tr></table></figure></li></ul><p><img src="/aly/x8.png" alt="文件夹"></p><ol start="4"><li>项目跑起来<figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">$ node app.js</span><br></pre></td></tr></table></figure></li></ol><p><img src="/aly/x10.png" alt="文件夹"><br><img src="/aly/x11.png" alt="文件夹"></p><ol start="5"><li>解决无法显示页面</li></ol><ul><li>其实不是页面无法显示是防火墙挡住了</li><li>回到阿里云控制台把端口添加进入，再回来看页面<br><img src="/aly/x12.png" alt="文件夹"><br><img src="/aly/x13.png" alt="文件夹"></li></ul><h2 id="持久化运行项目"><a href="#持久化运行项目" class="headerlink" title="持久化运行项目"></a>持久化运行项目</h2><ul><li>我们虽然是把项目跑起来了但是我们断开连接就无法访问了</li><li>默认我们系统给我们安装了pm2 那就好好的利用<br><img src="/aly/x14.png" alt="文件夹"></li></ul><h2 id="一次可以允许多少个项目？"><a href="#一次可以允许多少个项目？" class="headerlink" title="一次可以允许多少个项目？"></a>一次可以允许多少个项目？</h2><ul><li>其实只要你服务器承受的住开多少个都可以<br><img src="/aly/x15.png" alt="文件夹"></li></ul><h1 id="后记"><a href="#后记" class="headerlink" title="后记"></a>后记</h1><ul><li>阿里云第一个hello项目记录</li><li><a href="https://yhf7.github.io/" target="_blank" rel="noopener">欢迎进入我的博客</a>：<a href="https://yhf7.github.io/" target="_blank" rel="noopener">https://yhf7.github.io/</a></li><li>如果有什么侵权的话，请及时添加小编微信以及qq也可以来告诉小编（905477376微信qq通用），谢谢！</li></ul>]]></content>
    
    <summary type="html">
    
      
      
        &lt;link rel=&quot;stylesheet&quot; class=&quot;aplayer-secondary-style-marker&quot; href=&quot;/assets/css/APlayer.min.css&quot;&gt;&lt;script src=&quot;/assets/js/APlayer.min.js&quot; cla
      
    
    </summary>
    
      <category term="服务器" scheme="http://yoursite.com/categories/%E6%9C%8D%E5%8A%A1%E5%99%A8/"/>
    
    
      <category term="服务器" scheme="http://yoursite.com/tags/%E6%9C%8D%E5%8A%A1%E5%99%A8/"/>
    
  </entry>
  
  <entry>
    <title>Flex 编写100度网页</title>
    <link href="http://yoursite.com/2019/04/03/flex%E5%86%99100%E5%BA%A6/"/>
    <id>http://yoursite.com/2019/04/03/flex写100度/</id>
    <published>2019-04-03T14:22:04.789Z</published>
    <updated>2019-04-03T14:35:31.339Z</updated>
    
    <content type="html"><![CDATA[<link rel="stylesheet" class="aplayer-secondary-style-marker" href="/assets/css/APlayer.min.css"><script src="/assets/js/APlayer.min.js" class="aplayer-secondary-script-marker"></script><h1 id="前言"><a href="#前言" class="headerlink" title="前言"></a>前言</h1><ul><li>最近都没什么时间更新博客</li><li>flex不是很会，特意花了两天时间用flex重写之前写过的一个网页界面</li><li>有利有弊，整体来说还是挺方便的</li></ul><h1 id="案例地址"><a href="#案例地址" class="headerlink" title="案例地址"></a>案例地址</h1><ul><li><a href="https://gitee.com/yhf7/100duhtml" target="_blank" rel="noopener">码云</a></li></ul><h1 id="效果图"><a href="#效果图" class="headerlink" title="效果图"></a>效果图</h1><p><img src="/flex/l1.png" alt="img"><br><img src="/flex/l2.png" alt="img"><br><img src="/flex/l3.png" alt="img"></p>]]></content>
    
    <summary type="html">
    
      
      
        &lt;link rel=&quot;stylesheet&quot; class=&quot;aplayer-secondary-style-marker&quot; href=&quot;/assets/css/APlayer.min.css&quot;&gt;&lt;script src=&quot;/assets/js/APlayer.min.js&quot; cla
      
    
    </summary>
    
      <category term="Css" scheme="http://yoursite.com/categories/Css/"/>
    
    
      <category term="Css案例" scheme="http://yoursite.com/tags/Css%E6%A1%88%E4%BE%8B/"/>
    
  </entry>
  
  <entry>
    <title>mpvue 开发插件</title>
    <link href="http://yoursite.com/2019/03/27/mpvue%E5%BC%80%E5%8F%91%E6%8F%92%E4%BB%B6/"/>
    <id>http://yoursite.com/2019/03/27/mpvue开发插件/</id>
    <published>2019-03-27T11:35:10.359Z</published>
    <updated>2019-03-27T11:48:08.416Z</updated>
    
    <content type="html"><![CDATA[<link rel="stylesheet" class="aplayer-secondary-style-marker" href="/assets/css/APlayer.min.css"><script src="/assets/js/APlayer.min.js" class="aplayer-secondary-script-marker"></script><h1 id="前言"><a href="#前言" class="headerlink" title="前言"></a>前言</h1><ul><li>刚踏入mpvue这个坑</li><li>有些属性还是和vue不一样的，使用一些插件来方便开发</li></ul><h1 id="开始"><a href="#开始" class="headerlink" title="开始"></a>开始</h1><h2 id="wxapp-api-interceptors-微信api拦截器-（请求拦截axios）"><a href="#wxapp-api-interceptors-微信api拦截器-（请求拦截axios）" class="headerlink" title="wxapp-api-interceptors 微信api拦截器 （请求拦截axios）"></a>wxapp-api-interceptors 微信api拦截器 （请求拦截axios）</h2><ul><li>这个插件是用来拦截微信的api的使得运用可以像axios一样使用</li><li><a href="https://www.npmjs.com/package/wxapp-api-interceptors" target="_blank" rel="noopener">https://www.npmjs.com/package/wxapp-api-interceptors</a></li></ul><ol><li><p>安装</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">$ npm install wxapp-api-interceptors --save</span><br></pre></td></tr></table></figure></li><li><p>mpvue引用</p><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">import</span> wxApiInterceptors <span class="keyword">from</span> <span class="string">'wxapp-api-interceptors'</span>;</span><br><span class="line"> </span><br><span class="line">wxApiInterceptors(); <span class="comment">// 必须在调用小程序api之前调用</span></span><br></pre></td></tr></table></figure></li><li><p>设置请求拦截处理(返回拦截也是可以的)</p><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br></pre></td><td class="code"><pre><span class="line">wxApiInterceptors(&#123;</span><br><span class="line">    request: &#123;</span><br><span class="line">        request(params) &#123;</span><br><span class="line">            <span class="keyword">const</span> host = <span class="string">'https://test.com'</span></span><br><span class="line">            <span class="keyword">if</span> (!<span class="regexp">/^(http|\/\/)/</span>.test(params.url)) &#123;</span><br><span class="line">                params.url = host + params.url;</span><br><span class="line">            &#125;</span><br><span class="line">            <span class="keyword">return</span> params;</span><br><span class="line">        &#125;,</span><br><span class="line">    &#125;,</span><br><span class="line">&#125;);</span><br></pre></td></tr></table></figure></li></ol><h2 id="vuex持久化存储"><a href="#vuex持久化存储" class="headerlink" title="vuex持久化存储"></a>vuex持久化存储</h2><ul><li>在项目开发时使用vuex在刷新后是不会存储的</li><li><a href="https://github.com/robinvdvleuten/vuex-persistedstate" target="_blank" rel="noopener">https://github.com/robinvdvleuten/vuex-persistedstate</a></li></ul><ol><li><p>安装</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">$ npm install --save vuex-persistedstate</span><br></pre></td></tr></table></figure></li><li><p>配置</p><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">import</span> &#123; Store &#125; <span class="keyword">from</span> <span class="string">'vuex'</span></span><br><span class="line"><span class="keyword">import</span> createPersistedState <span class="keyword">from</span> <span class="string">'vuex-persistedstate'</span></span><br><span class="line"><span class="keyword">import</span> * <span class="keyword">as</span> Cookies <span class="keyword">from</span> <span class="string">'js-cookie'</span></span><br><span class="line"></span><br><span class="line"><span class="keyword">const</span> store = <span class="keyword">new</span> Store(&#123;</span><br><span class="line">  <span class="comment">// ...</span></span><br><span class="line">  plugins: [</span><br><span class="line">    createPersistedState(&#123;</span><br><span class="line">      storage: &#123;</span><br><span class="line">        getItem: <span class="function"><span class="params">key</span> =&gt;</span> Cookies.get(key),</span><br><span class="line">        <span class="comment">// Please see https://github.com/js-cookie/js-cookie#json, on how to handle JSON.</span></span><br><span class="line">        setItem: <span class="function">(<span class="params">key, value</span>) =&gt;</span></span><br><span class="line">          Cookies.set(key, value, &#123; <span class="attr">expires</span>: <span class="number">3</span>, <span class="attr">secure</span>: <span class="literal">true</span> &#125;),</span><br><span class="line">        removeItem: <span class="function"><span class="params">key</span> =&gt;</span> Cookies.remove(key),</span><br><span class="line">      &#125;,</span><br><span class="line">    &#125;),</span><br><span class="line">  ],</span><br><span class="line">&#125;)</span><br></pre></td></tr></table></figure></li></ol>]]></content>
    
    <summary type="html">
    
      
      
        &lt;link rel=&quot;stylesheet&quot; class=&quot;aplayer-secondary-style-marker&quot; href=&quot;/assets/css/APlayer.min.css&quot;&gt;&lt;script src=&quot;/assets/js/APlayer.min.js&quot; cla
      
    
    </summary>
    
      <category term="小程序" scheme="http://yoursite.com/categories/%E5%B0%8F%E7%A8%8B%E5%BA%8F/"/>
    
    
      <category term="小程序" scheme="http://yoursite.com/tags/%E5%B0%8F%E7%A8%8B%E5%BA%8F/"/>
    
  </entry>
  
  <entry>
    <title>mpvue 实现获取用户信息</title>
    <link href="http://yoursite.com/2019/03/21/myvue-%E8%8E%B7%E5%8F%96%E7%94%A8%E6%88%B7%E4%BF%A1%E6%81%AF/"/>
    <id>http://yoursite.com/2019/03/21/myvue-获取用户信息/</id>
    <published>2019-03-21T14:02:08.938Z</published>
    <updated>2019-03-21T14:55:51.804Z</updated>
    
    <content type="html"><![CDATA[<link rel="stylesheet" class="aplayer-secondary-style-marker" href="/assets/css/APlayer.min.css"><script src="/assets/js/APlayer.min.js" class="aplayer-secondary-script-marker"></script><h1 id="前言"><a href="#前言" class="headerlink" title="前言"></a>前言</h1><ul><li>因开发需求，先来躺mpvue这个坑</li><li>首先先从获取用户信息开始吧</li><li>一开始就已经被Eslint掠得体无完肤</li></ul><h1 id="准备"><a href="#准备" class="headerlink" title="准备"></a>准备</h1><ul><li>mac os 10.13.3</li><li>vue-cli </li><li>mpvue项目初始化 <a href="https://yhf7.github.io/2018/11/24/%E6%90%AD%E5%BB%BA%E5%B0%8F%E7%A8%8B%E5%BA%8F/" target="_blank" rel="noopener">mpvue搭建</a></li><li>vs code （工具个人喜欢就好）</li><li>熟悉编写vue <a href="https://yhf7.github.io/categories/Vue/" target="_blank" rel="noopener">不懂得可以看看我的这些笔记</a></li><li>熟悉小程序编写</li><li><a href="https://developers.weixin.qq.com/miniprogram/dev/api/wx.getUserInfo.html?search-key=getUserInfo" target="_blank" rel="noopener">获取用户信息微信官网</a></li></ul><h1 id="开始"><a href="#开始" class="headerlink" title="开始"></a>开始</h1><ul><li>其实也是很简单的操作，熟悉vue和熟悉小程序的写起来就会比较方便</li><li>绑定按钮使用open-type属性</li><li>我是在src/pages 里面建立了my来编写你们随意</li><li>mpvue和写vue没什么区别,mpvue支持小程序写法</li></ul><hr><ol><li>模版编写</li></ol><ul><li>定义按钮<figure class="highlight html"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br></pre></td><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">template</span>&gt;</span></span><br><span class="line">  <span class="tag">&lt;<span class="name">div</span>&gt;</span></span><br><span class="line">    <span class="comment">&lt;!-- 定义一个按钮点击拉起授权 --&gt;</span></span><br><span class="line">    <span class="comment">&lt;!-- 使用vue的绑定语法绑定getuserinfo用来接收用户的操作返回值 --&gt;</span></span><br><span class="line">    <span class="comment">&lt;!-- 定义点击用来判断用户版本是否适用 --&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">button</span> <span class="attr">open-type</span>=<span class="string">"getUserInfo"</span> @<span class="attr">getuserinfo</span>=<span class="string">"bindGetUserInfo"</span> @<span class="attr">click</span>=<span class="string">"getUserInfo1"</span>&gt;</span>获取权限<span class="tag">&lt;/<span class="name">button</span>&gt;</span></span><br><span class="line">    <span class="comment">&lt;!-- 获取用户信息 --&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">button</span> @<span class="attr">click</span>=<span class="string">"getSetting"</span>&gt;</span>获取用户信息<span class="tag">&lt;/<span class="name">button</span>&gt;</span></span><br><span class="line">  <span class="tag">&lt;/<span class="name">div</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">template</span>&gt;</span></span><br></pre></td></tr></table></figure></li></ul><ol start="2"><li>编写srcipt</li></ol><ul><li>基本和官网写法可以一直，只是要注意的是绑定方法要使用vue的语法</li><li>注意操作细节<figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br></pre></td><td class="code"><pre><span class="line">&lt;script&gt;</span><br><span class="line"><span class="keyword">export</span> <span class="keyword">default</span> &#123;</span><br><span class="line">    <span class="comment">// 编写方法</span></span><br><span class="line">  methods: &#123;</span><br><span class="line">    <span class="comment">/* 判断微信版本是否适用 */</span></span><br><span class="line">    getUserInfo1 () &#123;</span><br><span class="line">      <span class="built_in">console</span>.log(<span class="string">'click事件首先触发'</span>)</span><br><span class="line">      <span class="comment">// 判断小程序的API，回调，参数，组件等是否在当前版本可用。  为false 提醒用户升级微信版本</span></span><br><span class="line">      <span class="comment">// console.log(wx.canIUse('button.open-type.getUserInfo'))</span></span><br><span class="line">      <span class="keyword">if</span> (wx.canIUse(<span class="string">'button.open-type.getUserInfo'</span>)) &#123;</span><br><span class="line">        <span class="comment">// 用户版本可用</span></span><br><span class="line">      &#125; <span class="keyword">else</span> &#123;</span><br><span class="line">        <span class="built_in">console</span>.log(<span class="string">'请升级微信版本'</span>)</span><br><span class="line">      &#125;</span><br><span class="line">    &#125;,</span><br><span class="line">    <span class="comment">// 监听用户点击触发</span></span><br><span class="line">    bindGetUserInfo (e) &#123;</span><br><span class="line">      <span class="comment">// console.log(e.mp.detail.rawData)</span></span><br><span class="line">      <span class="keyword">if</span> (e.mp.detail.rawData) &#123;</span><br><span class="line">        <span class="comment">// 用户按了允许授权按钮</span></span><br><span class="line">        <span class="built_in">console</span>.log(<span class="string">'用户按了允许授权按钮'</span>)</span><br><span class="line">      &#125; <span class="keyword">else</span> &#123;</span><br><span class="line">        <span class="comment">// 用户按了拒绝按钮</span></span><br><span class="line">        <span class="built_in">console</span>.log(<span class="string">'用户按了拒绝按钮'</span>)</span><br><span class="line">      &#125;</span><br><span class="line">    &#125;,</span><br><span class="line">    <span class="comment">// 获取用户信息</span></span><br><span class="line">    getSetting () &#123;</span><br><span class="line">        <span class="comment">// 拉取信息</span></span><br><span class="line">      wx.getSetting(&#123;</span><br><span class="line">        success: <span class="function"><span class="keyword">function</span> (<span class="params">res</span>) </span>&#123;</span><br><span class="line">            <span class="comment">// 判断是否拥有权限</span></span><br><span class="line">          <span class="keyword">if</span> (res.authSetting[<span class="string">'scope.userInfo'</span>]) &#123;</span><br><span class="line">            wx.getUserInfo(&#123;</span><br><span class="line">              success: <span class="function"><span class="keyword">function</span> (<span class="params">res</span>) </span>&#123;</span><br><span class="line">                <span class="built_in">console</span>.log(res.userInfo)</span><br><span class="line">                <span class="built_in">console</span>.log(res)</span><br><span class="line">                <span class="comment">// 用户已经授权过</span></span><br><span class="line">                <span class="built_in">console</span>.log(<span class="string">'用户已经授权过'</span>)</span><br><span class="line">              &#125;</span><br><span class="line">            &#125;)</span><br><span class="line">          &#125; <span class="keyword">else</span> &#123;</span><br><span class="line">            <span class="built_in">console</span>.log(<span class="string">'用户还未授权过'</span>)</span><br><span class="line">          &#125;</span><br><span class="line">        &#125;</span><br><span class="line">      &#125;)</span><br><span class="line">    &#125;,</span><br><span class="line">  &#125;</span><br><span class="line">&#125;</span><br><span class="line">&lt;<span class="regexp">/script&gt;</span></span><br></pre></td></tr></table></figure></li></ul><h1 id="效果展示"><a href="#效果展示" class="headerlink" title="效果展示"></a>效果展示</h1><ul><li>写完代码当然要看看效果的啦</li></ul><ol><li>按钮<br><img src="/xcx/mv1.png" alt="mpvue"></li><li>初次测试小程序默认已经拥有了权限，这时点击是已经授权的<br><img src="/xcx/mv2.png" alt="mpvue"></li><li>点击授权<br><img src="/xcx/mv3.png" alt="mpvue"></li><li>拒绝授权<br><img src="/xcx/mv4.png" alt="mpvue"></li><li>未授权获取用户信息<br><img src="/xcx/mv5.png" alt="mpvue"></li><li>再次触发点击授权，允许后再次获取用户数据<br><img src="/xcx/mv6.png" alt="mpvue"></li></ol><h1 id="后记"><a href="#后记" class="headerlink" title="后记"></a>后记</h1><ul><li>从搭建好mpvue到踏入它其实是第二次，但是真正开始写业务还是第一次，这就是我的第一次使用mpvue获取用户信息，写的不好仅供参考，欢迎添加微信qq交流学习</li><li><a href="https://yhf7.github.io/" target="_blank" rel="noopener">欢迎进入我的博客</a>：<a href="https://yhf7.github.io/" target="_blank" rel="noopener">https://yhf7.github.io/</a></li><li>如果有什么侵权的话，请及时添加小编微信以及qq也可以来告诉小编（905477376微信qq通用），谢谢！</li></ul>]]></content>
    
    <summary type="html">
    
      
      
        &lt;link rel=&quot;stylesheet&quot; class=&quot;aplayer-secondary-style-marker&quot; href=&quot;/assets/css/APlayer.min.css&quot;&gt;&lt;script src=&quot;/assets/js/APlayer.min.js&quot; cla
      
    
    </summary>
    
      <category term="小程序" scheme="http://yoursite.com/categories/%E5%B0%8F%E7%A8%8B%E5%BA%8F/"/>
    
    
      <category term="小程序" scheme="http://yoursite.com/tags/%E5%B0%8F%E7%A8%8B%E5%BA%8F/"/>
    
  </entry>
  
  <entry>
    <title>Android button点击事件/附加题</title>
    <link href="http://yoursite.com/2019/03/20/%E5%A4%A7%E4%BA%8C%E4%B8%8BAndroid%20%E7%82%B9%E5%87%BB%E4%BA%8B%E4%BB%B6%E7%BB%91%E5%AE%9A/"/>
    <id>http://yoursite.com/2019/03/20/大二下Android 点击事件绑定/</id>
    <published>2019-03-20T12:33:15.822Z</published>
    <updated>2019-03-21T13:31:42.480Z</updated>
    
    <content type="html"><![CDATA[<link rel="stylesheet" class="aplayer-secondary-style-marker" href="/assets/css/APlayer.min.css"><script src="/assets/js/APlayer.min.js" class="aplayer-secondary-script-marker"></script><h1 id="前言"><a href="#前言" class="headerlink" title="前言"></a>前言</h1><ul><li>每一门语音开发的时候都会有点击的业务</li><li>点击按钮弹出什么，点击按钮输出什么</li><li>今天的课程就学了按钮点击绑定</li><li>记录起来</li></ul><h1 id="实现button点击事件的方法"><a href="#实现button点击事件的方法" class="headerlink" title="实现button点击事件的方法"></a>实现button点击事件的方法</h1><ul><li>Button类主要的事件为android：onclick。但也可以通使用了OnclickListener监听器来监听事件，并在onClick()方法中响应。</li><li>实现button点击事件的监听方法有很多种，这里总结了常用的四种方法：<br>　　1、匿名内部类<br>　　2、外部类（独立类）<br>　　3、实现OnClickListener接口<br>　　4、添加XML属性</li></ul><h1 id="具体实现"><a href="#具体实现" class="headerlink" title="具体实现"></a>具体实现</h1><ol><li>匿名内部类：<br>　　在Android开发中我们会经常看到各种匿名内部类的使用，那么在实现button点击事件的时候也可以用匿名内部类。<br>　　这样使用的好处是：1）不需要重新写一个类，直接在new的时候去实现想实现的方法，很方便。<br>　　　　　　　　　　　2）当别的地方都用不到这个方法的时候使用匿名内部类<br>　　　　　　　　　　　3）高内聚，高内聚是设计原则之一，匿名内部类的特性之一就是拥有高内聚。<br>　　但是也有不足的地方：1）当别的地方也需要同样的一个方法时还要重新再在那个地方写一次匿名内部类，这样使得代码的冗余性很高。<br>　　　　　　　　　　　　2）不方便后期的维护</li><li><p>独立类（外部类）：<br>　　重新写一个独立的类来实现业务逻辑或是想要的效<br>　　这样写的好处是：1）一定情况下可以方便维护<br>　　　　　　　　　　2）可以降低代码的冗余性，可以同时使用到多个地方<br>　　不足的地方是：1）当只使用一次时浪费资源，程序的性能不高<br>　　　　　　　　　2）当有很多个方法时代码的可读性不高，此时不方便维护</p></li><li><p>实现OnClickListener接口：<br>　　与独立类实现的原理是一样的，优点和缺陷也是大径相同的，实现OnClickListener接口的时候实现它其中的onClick方法</p></li><li><p>添加XML属性：<br>　　我们可以给XML添加一个onClick属性来实现点击事件的监控<br>　　这样的好处是：更加便捷，代码量能够减少<br>　　但是不足的地方是：每一次维护的时候都要去XML里面改源码，很不好维护很麻烦</p></li></ol><h1 id="总结："><a href="#总结：" class="headerlink" title="总结："></a>总结：</h1><ol><li>在实现监听的时候都是需要两步走：<br>　　　　1）绑定button按钮 setOnClickListener<br>　　　　2）监听button事件 onclick() </li><li><p>具体使用什么方法去实现button按钮点击事件的监听要看具体的需求，都各有各的好处和不足。<br> 如果只使用一次则推荐使用内部类的方法；<br> 如果多次使用则使用外部类的方法；<br> 实现接口的方法可以在原本的类中实现；<br> 但是在XML里面添加属性的方法时不推荐的，毕竟很不好去维护。</p></li><li><p>内部类的使用在Android开发中是经常用到的，所以非常的重要，</p></li><li><p>Android开发中有很多按钮，但是监听的方法常用的都是这几种</p></li></ol><h1 id="开始写代码"><a href="#开始写代码" class="headerlink" title="开始写代码"></a>开始写代码</h1><ul><li>前面看完长长的笔记现在来敲代码了</li></ul><h3 id="XML属性（监听button事件-onclick（））"><a href="#XML属性（监听button事件-onclick（））" class="headerlink" title="XML属性（监听button事件 onclick（））"></a>XML属性（监听button事件 onclick（））</h3><ul><li>要求：点击按钮控制台输出文字</li><li>页面：线性布局</li><li>一个按钮，一个文本框</li><li>其实很简单就只是两步，定义了然后实例化点击函数就可以了<figure class="highlight xml"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br></pre></td><td class="code"><pre><span class="line">&lt;?xml version="1.0" encoding="utf-8"?&gt;</span><br><span class="line"><span class="tag">&lt;<span class="name">LinearLayout</span> <span class="attr">xmlns:android</span>=<span class="string">"http://schemas.android.com/apk/res/android"</span></span></span><br><span class="line"><span class="tag">    <span class="attr">xmlns:app</span>=<span class="string">"http://schemas.android.com/apk/res-auto"</span></span></span><br><span class="line"><span class="tag">    <span class="attr">xmlns:tools</span>=<span class="string">"http://schemas.android.com/tools"</span></span></span><br><span class="line"><span class="tag">    <span class="attr">android:layout_width</span>=<span class="string">"match_parent"</span></span></span><br><span class="line"><span class="tag">    <span class="attr">android:layout_height</span>=<span class="string">"match_parent"</span></span></span><br><span class="line"><span class="tag">    <span class="attr">tools:context</span>=<span class="string">".Buttom_Demo"</span></span></span><br><span class="line"><span class="tag">    <span class="attr">android:orientation</span>=<span class="string">"vertical"</span>&gt;</span></span><br><span class="line"></span><br><span class="line">    // 1. 绑定id,指定点击函数名</span><br><span class="line">    <span class="tag">&lt;<span class="name">Button</span></span></span><br><span class="line"><span class="tag">        <span class="attr">android:id</span>=<span class="string">"@+id/button01"</span></span></span><br><span class="line"><span class="tag">        <span class="attr">android:layout_width</span>=<span class="string">"match_parent"</span></span></span><br><span class="line"><span class="tag">        <span class="attr">android:layout_height</span>=<span class="string">"wrap_content"</span></span></span><br><span class="line"><span class="tag">        <span class="attr">android:onClick</span>=<span class="string">"sss"</span></span></span><br><span class="line"><span class="tag">        <span class="attr">android:text</span>=<span class="string">"切换"</span>/&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">TextView</span></span></span><br><span class="line"><span class="tag">        <span class="attr">android:id</span>=<span class="string">"@+id/text1"</span></span></span><br><span class="line"><span class="tag">        <span class="attr">android:layout_width</span>=<span class="string">"match_parent"</span></span></span><br><span class="line"><span class="tag">        <span class="attr">android:layout_height</span>=<span class="string">"wrap_content"</span></span></span><br><span class="line"><span class="tag">        <span class="attr">android:text</span>=<span class="string">"adggegege"</span>/&gt;</span></span><br><span class="line"></span><br><span class="line"><span class="tag">&lt;/<span class="name">LinearLayout</span>&gt;</span></span><br></pre></td></tr></table></figure></li></ul><hr><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">package</span> com.example.yhf.button_demo;</span><br><span class="line"></span><br><span class="line"><span class="keyword">import</span> android.graphics.Color;</span><br><span class="line"><span class="keyword">import</span> android.support.v7.app.AppCompatActivity;</span><br><span class="line"><span class="keyword">import</span> android.os.Bundle;</span><br><span class="line"></span><br><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">Buttom_Demo</span> <span class="keyword">extends</span> <span class="title">AppCompatActivity</span> </span>&#123;</span><br><span class="line"></span><br><span class="line">    <span class="meta">@Override</span></span><br><span class="line">    <span class="function"><span class="keyword">protected</span> <span class="keyword">void</span> <span class="title">onCreate</span><span class="params">(Bundle savedInstanceState)</span> </span>&#123;</span><br><span class="line">        <span class="keyword">super</span>.onCreate(savedInstanceState);</span><br><span class="line">        setContentView(R.layout.buttom__demo);</span><br><span class="line"></span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="comment">//  2. 实例化点击函数</span></span><br><span class="line">   <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">sss</span><span class="params">(View view)</span> </span>&#123;</span><br><span class="line">       System.out.println(<span class="string">"--------------------该按钮是对的控制------------"</span>);</span><br><span class="line">   &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h3 id="OnClickListener接口方法"><a href="#OnClickListener接口方法" class="headerlink" title="OnClickListener接口方法"></a>OnClickListener接口方法</h3><ul><li>我们这次就不输出控制台了，我改变文本内容</li><li>这个就比较复杂一点</li><li>纯属定义一个按钮和文本就可以，定义id<figure class="highlight xml"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br></pre></td><td class="code"><pre><span class="line">// 1. 绑定id,指定点击函数名</span><br><span class="line"><span class="tag">&lt;<span class="name">Button</span></span></span><br><span class="line"><span class="tag">    <span class="attr">android:id</span>=<span class="string">"@+id/button01"</span></span></span><br><span class="line"><span class="tag">    <span class="attr">android:layout_width</span>=<span class="string">"match_parent"</span></span></span><br><span class="line"><span class="tag">    <span class="attr">android:layout_height</span>=<span class="string">"wrap_content"</span></span></span><br><span class="line"><span class="tag">    <span class="attr">android:text</span>=<span class="string">"切换"</span>/&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">TextView</span></span></span><br><span class="line"><span class="tag">    <span class="attr">android:id</span>=<span class="string">"@+id/text1"</span></span></span><br><span class="line"><span class="tag">    <span class="attr">android:layout_width</span>=<span class="string">"match_parent"</span></span></span><br><span class="line"><span class="tag">    <span class="attr">android:layout_height</span>=<span class="string">"wrap_content"</span></span></span><br><span class="line"><span class="tag">    <span class="attr">android:text</span>=<span class="string">"adggegege"</span>/&gt;</span></span><br></pre></td></tr></table></figure></li></ul><hr><ul><li>接下来就是重点了认真看<figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">package</span> com.example.yhf.button_demo;</span><br><span class="line"></span><br><span class="line"><span class="comment">// 引包输入组件的时候软件自动导入如果没有自己手打</span></span><br><span class="line"><span class="keyword">import</span> android.graphics.Color;</span><br><span class="line"><span class="keyword">import</span> android.support.v7.app.AppCompatActivity;</span><br><span class="line"><span class="keyword">import</span> android.os.Bundle;</span><br><span class="line"><span class="keyword">import</span> android.view.View;</span><br><span class="line"><span class="keyword">import</span> android.widget.Button;</span><br><span class="line"><span class="keyword">import</span> android.widget.TextView;</span><br><span class="line"></span><br><span class="line"><span class="comment">//4  抽象方法 OnClickListener</span></span><br><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">Buttom_Demo</span> <span class="keyword">extends</span> <span class="title">AppCompatActivity</span> <span class="keyword">implements</span> <span class="title">View</span>.<span class="title">OnClickListener</span> </span>&#123;</span><br><span class="line"></span><br><span class="line">    <span class="comment">// 2. 声明变量</span></span><br><span class="line">    Button bt1;</span><br><span class="line">    TextView t1;</span><br><span class="line"></span><br><span class="line">    <span class="meta">@Override</span></span><br><span class="line">    <span class="function"><span class="keyword">protected</span> <span class="keyword">void</span> <span class="title">onCreate</span><span class="params">(Bundle savedInstanceState)</span> </span>&#123;</span><br><span class="line">        <span class="keyword">super</span>.onCreate(savedInstanceState);</span><br><span class="line">        setContentView(R.layout.buttom__demo);</span><br><span class="line"></span><br><span class="line">        <span class="comment">// 3. 这里是给变量绑定组件</span></span><br><span class="line">        <span class="comment">// 通过id来绑定</span></span><br><span class="line">        bt1 = (Button)findViewById(R.id.button01);</span><br><span class="line">        t1 = (TextView)findViewById(R.id.text1);</span><br><span class="line"></span><br><span class="line">        <span class="comment">// 6. 设定点击绑定到bt1也就是按钮</span></span><br><span class="line">        <span class="comment">// 使用setOnClickListener绑定</span></span><br><span class="line">        bt1.setOnClickListener(<span class="keyword">this</span>);</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="comment">// 5. 实例化抽象方法</span></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">onClick</span><span class="params">(View view)</span> </span>&#123;</span><br><span class="line">        t1.setText(<span class="string">"嘿，你好"</span>);</span><br><span class="line">        t1.setTextColor(Color.BLUE);</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure></li></ul><h1 id="拓展题"><a href="#拓展题" class="headerlink" title="拓展题"></a>拓展题</h1><ul><li>按照上面的改成，可以多次点击切换不同的值，不是点了后写死了</li><li>分析一下如何做：我的第一想法是给他一个数组写好很多个文字，每一次切换就获取数组中不同的值<figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">package</span> com.example.yhf.button_demo;</span><br><span class="line"></span><br><span class="line"><span class="keyword">import</span> android.graphics.Color;</span><br><span class="line"><span class="keyword">import</span> android.support.v7.app.AppCompatActivity;</span><br><span class="line"><span class="keyword">import</span> android.os.Bundle;</span><br><span class="line"><span class="keyword">import</span> android.view.View;</span><br><span class="line"><span class="keyword">import</span> android.widget.Button;</span><br><span class="line"><span class="keyword">import</span> android.widget.TextView;</span><br><span class="line"></span><br><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">Buttom_Demo</span> <span class="keyword">extends</span> <span class="title">AppCompatActivity</span> <span class="keyword">implements</span> <span class="title">View</span>.<span class="title">OnClickListener</span> </span>&#123;</span><br><span class="line"></span><br><span class="line">    Button bt1;</span><br><span class="line">    TextView t1;</span><br><span class="line"></span><br><span class="line">    <span class="comment">// 1. 定义一个i用了判断是数据的第几个</span></span><br><span class="line">    <span class="keyword">int</span> i = <span class="number">0</span>;</span><br><span class="line">    <span class="comment">// 2. 数据数组</span></span><br><span class="line">    String[] str = &#123;<span class="string">"a"</span>,<span class="string">"b"</span>,<span class="string">"c"</span>,<span class="string">"d"</span>,<span class="string">"e"</span>&#125;;</span><br><span class="line"></span><br><span class="line">    <span class="meta">@Override</span></span><br><span class="line">    <span class="function"><span class="keyword">protected</span> <span class="keyword">void</span> <span class="title">onCreate</span><span class="params">(Bundle savedInstanceState)</span> </span>&#123;</span><br><span class="line">        <span class="keyword">super</span>.onCreate(savedInstanceState);</span><br><span class="line">        setContentView(R.layout.buttom__demo);</span><br><span class="line"></span><br><span class="line">        bt1 = (Button)findViewById(R.id.button01);</span><br><span class="line">        t1 = (TextView)findViewById(R.id.text1);</span><br><span class="line"></span><br><span class="line">        bt1.setOnClickListener(<span class="keyword">this</span>);</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">onClick</span><span class="params">(View view)</span> </span>&#123;</span><br><span class="line">        <span class="comment">// 3. 判断大于后又回到0继续从0输出，不然超出会报错的</span></span><br><span class="line">        <span class="keyword">if</span> (i&gt;str.length-<span class="number">1</span>) &#123;i=<span class="number">0</span>;&#125;</span><br><span class="line">        <span class="comment">// 4. 输出的时候拿数组的值</span></span><br><span class="line">        t1.setText(str[i]);</span><br><span class="line">        t1.setTextColor(Color.BLUE);</span><br><span class="line">        <span class="comment">// 每点击一次一个数</span></span><br><span class="line">        i++;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure></li></ul><h1 id="补充其余用法"><a href="#补充其余用法" class="headerlink" title="补充其余用法"></a>补充其余用法</h1><ul><li>还有两种用法就是绑定外部类和内部类</li><li>和拓展题同样的业务，不同的实现方法</li><li>要注意引包</li><li>其实也是挺简单的用法都差不多只是地方不同<figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br><span class="line">64</span><br><span class="line">65</span><br><span class="line">66</span><br><span class="line">67</span><br><span class="line">68</span><br><span class="line">69</span><br><span class="line">70</span><br><span class="line">71</span><br><span class="line">72</span><br><span class="line">73</span><br><span class="line">74</span><br><span class="line">75</span><br><span class="line">76</span><br><span class="line">77</span><br><span class="line">78</span><br><span class="line">79</span><br><span class="line">80</span><br><span class="line">81</span><br><span class="line">82</span><br><span class="line">83</span><br><span class="line">84</span><br><span class="line">85</span><br><span class="line">86</span><br><span class="line">87</span><br><span class="line">88</span><br><span class="line">89</span><br><span class="line">90</span><br><span class="line">91</span><br><span class="line">92</span><br><span class="line">93</span><br><span class="line">94</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">package</span> com.example.yhf.button_demo;</span><br><span class="line"></span><br><span class="line"><span class="keyword">import</span> android.graphics.Color;</span><br><span class="line"><span class="keyword">import</span> android.support.v7.app.AppCompatActivity;</span><br><span class="line"><span class="keyword">import</span> android.os.Bundle;</span><br><span class="line"><span class="keyword">import</span> android.view.View;</span><br><span class="line"><span class="keyword">import</span> android.widget.Button;</span><br><span class="line"><span class="keyword">import</span> android.widget.TextView;</span><br><span class="line"></span><br><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">Buttom_Demo</span> <span class="keyword">extends</span> <span class="title">AppCompatActivity</span> </span>&#123;</span><br><span class="line"></span><br><span class="line">    <span class="comment">//    Button bt1,bt2;</span></span><br><span class="line"></span><br><span class="line">    Button bt1;</span><br><span class="line">    TextView t1;</span><br><span class="line">    <span class="keyword">int</span> i = <span class="number">0</span>;</span><br><span class="line">    String[] str = &#123;<span class="string">"a"</span>,<span class="string">"b"</span>,<span class="string">"c"</span>,<span class="string">"d"</span>,<span class="string">"e"</span>&#125;;</span><br><span class="line"></span><br><span class="line">    <span class="meta">@Override</span></span><br><span class="line">    <span class="function"><span class="keyword">protected</span> <span class="keyword">void</span> <span class="title">onCreate</span><span class="params">(Bundle savedInstanceState)</span> </span>&#123;</span><br><span class="line">        <span class="keyword">super</span>.onCreate(savedInstanceState);</span><br><span class="line">        setContentView(R.layout.buttom__demo);</span><br><span class="line"></span><br><span class="line">        bt1 = (Button)findViewById(R.id.button01);</span><br><span class="line">        t1 = (TextView)findViewById(R.id.text1);</span><br><span class="line"></span><br><span class="line">        <span class="comment">// 2。 外部类onclik，new 外面的类</span></span><br><span class="line">       bt1.setOnClickListener(<span class="keyword">new</span> listener());</span><br><span class="line"></span><br><span class="line">        <span class="comment">// 3. 内部类onclick</span></span><br><span class="line">       bt1.setOnClickListener(<span class="keyword">new</span> View.OnClickListener() &#123;</span><br><span class="line">           <span class="meta">@Override</span></span><br><span class="line">           <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">onClick</span><span class="params">(View v)</span> </span>&#123;</span><br><span class="line">               System.out.println(<span class="string">"test"</span>);</span><br><span class="line">           &#125;</span><br><span class="line">       &#125;);</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="comment">// 外部类</span></span><br><span class="line">    <span class="class"><span class="keyword">class</span> <span class="title">listener</span> <span class="keyword">implements</span> <span class="title">View</span>.<span class="title">OnClickListener</span> </span>&#123;</span><br><span class="line">        <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">onClick</span><span class="params">(View view)</span> </span>&#123;</span><br><span class="line">            <span class="keyword">if</span> (i&gt;str.length-<span class="number">1</span>) &#123;i=<span class="number">0</span>;&#125;</span><br><span class="line">            t1.setText(str[i]);</span><br><span class="line">            t1.setTextColor(Color.BLUE);</span><br><span class="line">            i++;</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line">### 外部类小案例</span><br><span class="line">- 多按钮绑定同一点击事件，控制id改变文本</span><br><span class="line">- 定义了三个按钮，一个文本框</span><br><span class="line">``` Java</span><br><span class="line"><span class="keyword">package</span> com.example.yhf.button_demo;</span><br><span class="line"></span><br><span class="line"><span class="keyword">import</span> android.graphics.Color;</span><br><span class="line"><span class="keyword">import</span> android.support.v7.app.AppCompatActivity;</span><br><span class="line"><span class="keyword">import</span> android.os.Bundle;</span><br><span class="line"><span class="keyword">import</span> android.view.View;</span><br><span class="line"><span class="keyword">import</span> android.widget.Button;</span><br><span class="line"><span class="keyword">import</span> android.widget.TextView;</span><br><span class="line"></span><br><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">Buttom_Demo</span> <span class="keyword">extends</span> <span class="title">AppCompatActivity</span> </span>&#123;</span><br><span class="line"></span><br><span class="line">    Button bt1,bt2,bt3;</span><br><span class="line">    TextView t1;</span><br><span class="line"></span><br><span class="line">    <span class="meta">@Override</span></span><br><span class="line">    <span class="function"><span class="keyword">protected</span> <span class="keyword">void</span> <span class="title">onCreate</span><span class="params">(Bundle savedInstanceState)</span> </span>&#123;</span><br><span class="line">        <span class="keyword">super</span>.onCreate(savedInstanceState);</span><br><span class="line">        setContentView(R.layout.demo);</span><br><span class="line"></span><br><span class="line">        bt1 = (Button)findViewById(R.id.bt1);</span><br><span class="line">        bt2 = (Button)findViewById(R.id.bt2);</span><br><span class="line">        bt3 = (Button)findViewById(R.id.bt3);</span><br><span class="line">        t1 = (TextView)findViewById(R.id.text1);</span><br><span class="line"></span><br><span class="line">        <span class="comment">// 2。 外部类onclik</span></span><br><span class="line">        bt1.setOnClickListener(<span class="keyword">new</span> listener());</span><br><span class="line">        bt2.setOnClickListener(<span class="keyword">new</span> listener());</span><br><span class="line">        bt3.setOnClickListener(<span class="keyword">new</span> listener());</span><br><span class="line">    &#125;</span><br><span class="line"><span class="comment">// 外部类</span></span><br><span class="line">    <span class="class"><span class="keyword">class</span> <span class="title">listener</span> <span class="keyword">implements</span> <span class="title">View</span>.<span class="title">OnClickListener</span> </span>&#123;</span><br><span class="line">        <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">onClick</span><span class="params">(View v)</span> </span>&#123;</span><br><span class="line">            <span class="comment">// 通过判断 引子是getId,点击后会返回一个view的参数</span></span><br><span class="line">            <span class="keyword">switch</span> (v.getId()) &#123;</span><br><span class="line">                <span class="keyword">case</span> R.id.bt1: t1.setText(<span class="string">"你爸1"</span>); t1.setTextColor(Color.BLUE); <span class="keyword">break</span>;</span><br><span class="line">                <span class="keyword">case</span> R.id.bt2: t1.setText(<span class="string">"你爸2"</span>); t1.setTextColor(Color.RED); <span class="keyword">break</span>;</span><br><span class="line">                <span class="keyword">case</span> R.id.bt3: t1.setText(<span class="string">"你爸3"</span>); t1.setTextColor(Color.YELLOW); <span class="keyword">break</span>;</span><br><span class="line">            &#125;</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure></li></ul><h1 id="后记"><a href="#后记" class="headerlink" title="后记"></a>后记</h1><ul><li>今日上课的练习和笔记都记录在这里了，欢迎更多的同行大哥指导交流</li><li><a href="https://yhf7.github.io/" target="_blank" rel="noopener">欢迎进入我的博客</a>：<a href="https://yhf7.github.io/" target="_blank" rel="noopener">https://yhf7.github.io/</a></li><li>如果有什么侵权的话，请及时添加小编微信以及qq也可以来告诉小编（905477376微信qq通用），谢谢！</li></ul>]]></content>
    
    <summary type="html">
    
      
      
        &lt;link rel=&quot;stylesheet&quot; class=&quot;aplayer-secondary-style-marker&quot; href=&quot;/assets/css/APlayer.min.css&quot;&gt;&lt;script src=&quot;/assets/js/APlayer.min.js&quot; cla
      
    
    </summary>
    
      <category term="Android" scheme="http://yoursite.com/categories/Android/"/>
    
    
      <category term="Android 笔记" scheme="http://yoursite.com/tags/Android-%E7%AC%94%E8%AE%B0/"/>
    
  </entry>
  
  <entry>
    <title>TypeScript 自学笔记6 范型</title>
    <link href="http://yoursite.com/2019/03/19/TypeScript%E7%AC%94%E8%AE%B06/"/>
    <id>http://yoursite.com/2019/03/19/TypeScript笔记6/</id>
    <published>2019-03-19T15:26:21.365Z</published>
    <updated>2019-03-20T01:07:43.365Z</updated>
    
    <content type="html"><![CDATA[<link rel="stylesheet" class="aplayer-secondary-style-marker" href="/assets/css/APlayer.min.css"><script src="/assets/js/APlayer.min.js" class="aplayer-secondary-script-marker"></script><h1 id="前言"><a href="#前言" class="headerlink" title="前言"></a>前言</h1><ul><li>今日继续学习ts</li><li>等待大哥确认的时间我们继续看看ts范型</li></ul><h1 id="介绍"><a href="#介绍" class="headerlink" title="介绍"></a>介绍</h1><ul><li>软件工程中，我们不仅要创建一致的定义良好的API，同时也要考虑可重用性。 组件不仅能够支持当前的数据类型，同时也能支持未来的数据类型，这在创建大型系统时为你提供了十分灵活的功能。</li><li>在像C#和Java这样的语言中，可以使用泛型来创建可重用的组件，一个组件可以支持多种类型的数据。 这样用户就可以以自己的数据类型来使用组件。</li><li>其实很简单，这就是为了方便复用而设立的，以前在看java的时候对范型就不是学的很好，现在看文档感觉清晰很多了</li><li>那我们继续走入ts，范型</li></ul><h1 id="范型-Hello-World"><a href="#范型-Hello-World" class="headerlink" title="范型-Hello World"></a>范型-Hello World</h1><ul><li><p>下面来创建第一个使用泛型的例子：identity函数。 这个函数会返回任何传入它的值。 你可以把这个函数当成是 echo命令。</p><figure class="highlight typescript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line"><span class="function"><span class="keyword">function</span> <span class="title">identity</span>(<span class="params">arg: <span class="built_in">number</span></span>): <span class="title">number</span> </span>&#123;</span><br><span class="line">    <span class="keyword">return</span> arg;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure></li><li><p>这个例子建立的是一个参数和返回值为数字类型的</p></li><li>但是我们后续想切换类型着么办？很多人说使用any任意类型啊<br>来看看any</li></ul><hr><ol><li>建立范型<figure class="highlight typescript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line"><span class="function"><span class="keyword">function</span> <span class="title">identity</span>(<span class="params">arg: <span class="built_in">any</span></span>): <span class="title">any</span> </span>&#123;</span><br><span class="line">    <span class="keyword">return</span> arg;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure></li></ol><ul><li>确实达到了预期的效果</li><li>但是发现了没有，无论什么类型都可以输入，什么类型的值都可以返回</li><li>这个和之前的js有什么区别，何必还要写呢所以我们需要一个方法去控制住参数和返回值类型相同</li></ul><hr><ul><li>我们给函数添加了一个类型变量T，当我们给这个t赋值了number，他就会自动捕获到，然后赋值到参数和返回值类型当中</li><li>这样到函数叫做范型（官网这么说的）不同于使用 any，它不会丢失信息，像第一个例子那像保持准确性，传入数值类型并返回数值类型。<figure class="highlight typescript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line"><span class="function"><span class="keyword">function</span> <span class="title">identity</span>&lt;<span class="title">T</span>&gt;(<span class="params">arg: T</span>): <span class="title">T</span> </span>&#123;</span><br><span class="line">    <span class="keyword">return</span> arg;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure></li></ul><hr><ol start="2"><li>使用范型</li></ol><ul><li>第一种是，传入所有的参数，包含类型参数</li><li>第二种方法更普遍。利用了类型推论 – 即编译器会根据传入的参数自动地帮助我们确定T的类型</li><li>这里我们明确的指定了T是string类型，并做为一个参数传给函数，使用了&lt;&gt;括起来而不是()。（重点）<figure class="highlight typescript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">// 传入参数</span></span><br><span class="line"><span class="keyword">let</span> output = identity&lt;<span class="built_in">string</span>&gt;(<span class="string">"myString"</span>);  <span class="comment">// type of output will be 'string'</span></span><br><span class="line"></span><br><span class="line"><span class="comment">// 自动推断</span></span><br><span class="line"><span class="keyword">let</span> output = identity(<span class="string">"myString"</span>);  <span class="comment">// type of output will be 'string'</span></span><br></pre></td></tr></table></figure></li></ul><hr><h4 id="注意我们没必要使用尖括号（-lt-gt-）来明确地传入类型；编译器可以查看myString的值，然后把T设置为它的类型。-类型推论帮助我们保持代码精简和高可读性。如果编译器不能够自动地推断出类型的话，只能像上面那样明确的传入T的类型，在一些复杂的情况下，这是可能出现的。（这个要注意）"><a href="#注意我们没必要使用尖括号（-lt-gt-）来明确地传入类型；编译器可以查看myString的值，然后把T设置为它的类型。-类型推论帮助我们保持代码精简和高可读性。如果编译器不能够自动地推断出类型的话，只能像上面那样明确的传入T的类型，在一些复杂的情况下，这是可能出现的。（这个要注意）" class="headerlink" title="注意我们没必要使用尖括号（&lt;&gt;）来明确地传入类型；编译器可以查看myString的值，然后把T设置为它的类型。 类型推论帮助我们保持代码精简和高可读性。如果编译器不能够自动地推断出类型的话，只能像上面那样明确的传入T的类型，在一些复杂的情况下，这是可能出现的。（这个要注意）"></a>注意我们没必要使用尖括号（&lt;&gt;）来明确地传入类型；编译器可以查看myString的值，然后把T设置为它的类型。 类型推论帮助我们保持代码精简和高可读性。如果编译器不能够自动地推断出类型的话，只能像上面那样明确的传入T的类型，在一些复杂的情况下，这是可能出现的。（这个要注意）</h4><h1 id="使用范型变量"><a href="#使用范型变量" class="headerlink" title="使用范型变量"></a>使用范型变量</h1><ul><li>使用泛型创建像identity这样的泛型函数时，编译器要求你在函数体必须正确的使用这个通用的类型。 换句话说，你必须把这些参数当做是任意或所有类型。</li><li>如果这么做，编译器会报错说我们使用了arg的.length属性，但是没有地方指明arg具有这个属性。 记住，这些类型变量代表的是任意类型，所以使用这个函数的人可能传入的是个数字，而数字是没有 .length属性的。</li><li><p>所以是错误的不能输出</p><figure class="highlight typescript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line"><span class="function"><span class="keyword">function</span> <span class="title">loggingIdentity</span>&lt;<span class="title">T</span>&gt;(<span class="params">arg: T</span>): <span class="title">T</span> </span>&#123;</span><br><span class="line">    <span class="built_in">console</span>.log(arg.length);  <span class="comment">// Error: T doesn't have .length</span></span><br><span class="line">    <span class="keyword">return</span> arg;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure></li><li><p>现在假设我们想操作T类型的数组而不直接是T。由于我们操作的是数组，所以.length属性是应该存在的。 我们可以像创建其它数组一样创建这个数组</p></li><li>他把参数设立成是一个类型的数组了</li><li>相当于我吧t定义为number</li><li>arg是number类型的数组</li><li>返回值也是一个number的数组</li><li><p>数组是拥有.length的属性的</p><figure class="highlight typescript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">// number</span></span><br><span class="line"><span class="function"><span class="keyword">function</span> <span class="title">loggingIdentity</span>&lt;<span class="title">T</span>&gt;(<span class="params">arg: T[]</span>): <span class="title">T</span>[] </span>&#123;</span><br><span class="line">    <span class="built_in">console</span>.log(arg.length);  <span class="comment">// Array has a .length, so no more error</span></span><br><span class="line">    <span class="keyword">return</span> arg;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="keyword">let</span> output = loggingIdentity&lt;<span class="built_in">number</span>&gt;([<span class="number">1</span>,<span class="number">2</span>]);  <span class="comment">// type of output will be 'string'</span></span><br><span class="line"></span><br><span class="line"><span class="built_in">console</span>.log(output);</span><br><span class="line"></span><br><span class="line"></span><br><span class="line"><span class="comment">// String</span></span><br><span class="line"><span class="function"><span class="keyword">function</span> <span class="title">loggingIdentity</span>&lt;<span class="title">T</span>&gt;(<span class="params">arg: T[]</span>): <span class="title">T</span>[] </span>&#123;</span><br><span class="line">    <span class="built_in">console</span>.log(arg.length);  <span class="comment">// Array has a .length, so no more error</span></span><br><span class="line">    <span class="keyword">return</span> arg;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="keyword">let</span> output = loggingIdentity&lt;<span class="built_in">String</span>&gt;([<span class="string">"a"</span>]);  <span class="comment">// type of output will be 'string'</span></span><br><span class="line"></span><br><span class="line"><span class="built_in">console</span>.log(output);</span><br></pre></td></tr></table></figure></li><li><p>你可以这样理解loggingIdentity的类型：泛型函数loggingIdentity，接收类型参数T和参数arg，它是个元素类型是T的数组，并返回元素类型是T的数组。 如果我们传入数字数组，将返回一个数字数组，因为此时 T的的类型为number。 这可以让我们把泛型变量T当做类型的一部分使用，而不是整个类型，增加了灵活性。</p></li></ul><p>—————————-</p><ul><li>还有一种写法可以更加规范上面的写法</li><li>在里面在写一次范型，直接定义数组类型<figure class="highlight typescript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><span class="line"><span class="function"><span class="keyword">function</span> <span class="title">loggingIdentity</span>&lt;<span class="title">T</span>&gt;(<span class="params">arg: <span class="built_in">Array</span>&lt;T&gt;</span>): <span class="title">Array</span>&lt;<span class="title">T</span>&gt; </span>&#123;</span><br><span class="line">    <span class="built_in">console</span>.log(arg.length);  <span class="comment">// Array has a .length, so no more error</span></span><br><span class="line">    <span class="keyword">return</span> arg;</span><br><span class="line">&#125;</span><br><span class="line"><span class="comment">// 输出结果</span></span><br><span class="line"><span class="number">1</span></span><br><span class="line">[ <span class="string">'a'</span> ]</span><br></pre></td></tr></table></figure></li></ul><h1 id="泛型类型"><a href="#泛型类型" class="headerlink" title="泛型类型"></a>泛型类型</h1><ul><li>我们创建了identity通用函数，可以适用于不同的类型。 在这节，我们研究一下函数本身的类型，以及如何创建泛型接口。</li><li>我们也可以使用不同的泛型参数名，只要在数量上和使用方式上能对应上就可以。<figure class="highlight typescript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line"><span class="function"><span class="keyword">function</span> <span class="title">identity</span>&lt;<span class="title">T</span>&gt;(<span class="params">arg: T</span>): <span class="title">T</span> </span>&#123;</span><br><span class="line">    <span class="keyword">return</span> arg;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="keyword">let</span> myIdentity: &lt;U&gt;<span class="function">(<span class="params">arg: U</span>) =&gt;</span> U = identity;</span><br></pre></td></tr></table></figure></li></ul><h4 id="我们还可以使用带有调用签名的对象字面量来定义泛型函数：（对签名还是带有疑惑）"><a href="#我们还可以使用带有调用签名的对象字面量来定义泛型函数：（对签名还是带有疑惑）" class="headerlink" title="我们还可以使用带有调用签名的对象字面量来定义泛型函数：（对签名还是带有疑惑）"></a>我们还可以使用带有调用签名的对象字面量来定义泛型函数：（对签名还是带有疑惑）</h4><figure class="highlight typescript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line"><span class="function"><span class="keyword">function</span> <span class="title">identity</span>&lt;<span class="title">T</span>&gt;(<span class="params">arg: T</span>): <span class="title">T</span> </span>&#123;</span><br><span class="line">    <span class="keyword">return</span> arg;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="keyword">let</span> myIdentity: &#123;&lt;T&gt;(arg: T): T&#125; = identity;</span><br></pre></td></tr></table></figure><h3 id="第一个范型接口"><a href="#第一个范型接口" class="headerlink" title="第一个范型接口"></a>第一个范型接口</h3><figure class="highlight typescript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">interface</span> GenericIdentityFn &#123;</span><br><span class="line">    &lt;T&gt;(arg: T): T;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">function</span> <span class="title">identity</span>&lt;<span class="title">T</span>&gt;(<span class="params">arg: T</span>): <span class="title">T</span> </span>&#123;</span><br><span class="line">    <span class="keyword">return</span> arg;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="keyword">let</span> myIdentity: GenericIdentityFn = identity;</span><br><span class="line"></span><br><span class="line"><span class="built_in">console</span>.log(myIdentity&lt;<span class="built_in">String</span>&gt;(<span class="string">"abc"</span>));</span><br><span class="line"><span class="built_in">console</span>.log(myIdentitys(<span class="string">"cba"</span>));<span class="comment">// 如果写了接口后我们还用这样的类型推断法是不可以的 error</span></span><br></pre></td></tr></table></figure><hr><ul><li>接口变形</li><li>我们的示例做了少许改动。 不再描述泛型函数，而是把非泛型函数签名作为泛型类型一部分。 当我们使用 GenericIdentityFn的时候，还得传入一个类型参数来指定泛型类型（这里是：number），锁定了之后代码里使用的类型。 对于描述哪部分类型属于泛型部分来说，理解何时把参数放在调用签名里和何时放在接口上是很有帮助的。</li><li>很直接的改变就是给接口做了范型，在初始化的时候就要传入类型了</li><li>在使用的时候不再需要去指定范型<figure class="highlight typescript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">interface</span> GenericIdentityFn&lt;T&gt; &#123;</span><br><span class="line">    (arg: T): T;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">function</span> <span class="title">identity</span>&lt;<span class="title">T</span>&gt;(<span class="params">arg: T</span>): <span class="title">T</span> </span>&#123;</span><br><span class="line">    <span class="keyword">return</span> arg;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="keyword">let</span> myIdentity: GenericIdentityFn&lt;<span class="built_in">number</span>&gt; = identity;</span><br><span class="line"><span class="built_in">console</span>.log(myIdentity(<span class="number">1</span>)); <span class="comment">//1</span></span><br><span class="line"></span><br><span class="line"></span><br><span class="line"><span class="keyword">let</span> myIdentity2: GenericIdentityFn&lt;<span class="built_in">string</span>&gt; = identity;</span><br><span class="line"><span class="built_in">console</span>.log(myIdentity2(<span class="string">"abc"</span>); <span class="comment">//abc</span></span><br></pre></td></tr></table></figure></li></ul><h1 id="范型类"><a href="#范型类" class="headerlink" title="范型类"></a>范型类</h1><ul><li>泛型类看上去与泛型接口差不多。 泛型类使用（ &lt;&gt;）括起泛型类型，跟在类名后面。</li><li><p>这个理解起来还是挺好理解的</p><figure class="highlight typescript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">class</span> GenericNumber&lt;T&gt; &#123;</span><br><span class="line">    zeroValue: T;</span><br><span class="line">    add: <span class="function">(<span class="params">x: T, y: T</span>) =&gt;</span> T;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="keyword">let</span> myGenericNumber = <span class="keyword">new</span> GenericNumber&lt;<span class="built_in">number</span>&gt;();</span><br><span class="line">myGenericNumber.zeroValue = <span class="number">0</span>;</span><br><span class="line">myGenericNumber.add = <span class="function"><span class="keyword">function</span>(<span class="params">x, y</span>) </span>&#123; <span class="keyword">return</span> x + y; &#125;;</span><br><span class="line"><span class="built_in">console</span>.log(myGenericNumber.add(<span class="number">3</span>,<span class="number">4</span>)) <span class="comment">// 7</span></span><br></pre></td></tr></table></figure></li><li><p>GenericNumber类的使用是十分直观的，并且你可能已经注意到了，没有什么去限制它只能使用number类型。 也可以使用字符串或其它更复杂的类型</p></li></ul><hr><ul><li>与接口一样，直接把泛型类型放在类后面，可以帮助我们确认类的所有属性都在使用相同的类型。</li><li>我们在类那节说过，类有两部分：静态部分和实例部分。 泛型类指的是实例部分的类型，所以类的静态属性不能使用这个泛型类型。<figure class="highlight typescript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">let</span> stringNumeric = <span class="keyword">new</span> GenericNumber&lt;<span class="built_in">string</span>&gt;();</span><br><span class="line">stringNumeric.zeroValue = <span class="string">""</span>;</span><br><span class="line">stringNumeric.add = <span class="function"><span class="keyword">function</span>(<span class="params">x, y</span>) </span>&#123; <span class="keyword">return</span> x + y; &#125;;</span><br><span class="line"></span><br><span class="line"><span class="built_in">console</span>.log(stringNumeric.add(stringNumeric.zeroValue, <span class="string">"test"</span>));</span><br></pre></td></tr></table></figure></li></ul><h1 id="泛型约束"><a href="#泛型约束" class="headerlink" title="泛型约束"></a>泛型约束</h1><p><img src="/TypeScript/T1.png" alt="t1"></p><ul><li>意思就是说使用extends 这个关键字来约束必须每一次都要输入一个带有length的属性，不然就是错的</li><li><figure class="highlight typescript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">interface</span> Lengthwise &#123;</span><br><span class="line">    length: <span class="built_in">number</span>;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">function</span> <span class="title">loggingIdentity</span>&lt;<span class="title">T</span> <span class="title">extends</span> <span class="title">Lengthwise</span>&gt;(<span class="params">arg: T</span>): <span class="title">T</span> </span>&#123;</span><br><span class="line">    <span class="built_in">console</span>.log(arg.length);  <span class="comment">// Now we know it has a .length property, so no more error</span></span><br><span class="line">    <span class="keyword">return</span> arg;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line">loggingIdentity(<span class="number">3</span>);  <span class="comment">// Error</span></span><br><span class="line">loggingIdentity(&#123;length: <span class="number">10</span>, value: <span class="number">3</span>&#125;); <span class="comment">// 这样才是对的</span></span><br></pre></td></tr></table></figure></li></ul><h3 id="在泛型约束中使用类型参数"><a href="#在泛型约束中使用类型参数" class="headerlink" title="在泛型约束中使用类型参数"></a>在泛型约束中使用类型参数</h3><ul><li>你可以声明一个类型参数，且它被另一个类型参数所约束。 比如，现在我们想要用属性名从对象里获取这个属性。 并且我们想要确保这个属性存在于对象 obj上，因此我们需要在这两个类型之间使用约束。</li><li>编译器运行的时候会报错但是js文件可以运行的，估计是我没有指定类型不过官网也是这样用的<figure class="highlight typescript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><span class="line"><span class="function"><span class="keyword">function</span> <span class="title">getProperty</span>(<span class="params">obj: T, key: K</span>) </span>&#123;</span><br><span class="line">    <span class="keyword">return</span> obj[key];</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="keyword">let</span> x = &#123; a: <span class="number">1</span>, b: <span class="number">2</span>, c: <span class="number">3</span>, d: <span class="number">4</span> &#125;;</span><br><span class="line"></span><br><span class="line"><span class="comment">// getProperty(x, "m"); // error: Argument of type 'm' isn't assignable to 'a' | 'b' | 'c' | 'd'.</span></span><br><span class="line"><span class="built_in">console</span>.log(getProperty(x, <span class="string">"a"</span>););</span><br></pre></td></tr></table></figure></li></ul><h3 id="在泛型里使用类类型-不是很懂-懂了"><a href="#在泛型里使用类类型-不是很懂-懂了" class="headerlink" title="在泛型里使用类类型 (不是很懂,懂了)"></a>在泛型里使用类类型 (不是很懂,懂了)</h3><ul><li>当我再回头盯上你，你必是我囊中之物</li><li>其实呢我是在实例它的时候不太懂</li><li>经过查阅资料慢慢的弄懂了，要定义一个类把类放进入</li><li><p>在TypeScript使用泛型创建工厂函数时，需要引用构造函数的类类型。比如，</p><figure class="highlight typescript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">// 这里是需要构建一个类 ，函数范型了类， 传入值是类，返回值也是类</span></span><br><span class="line"><span class="comment">// 参数是一个可以new的参数那就是类啦</span></span><br><span class="line">function create&lt;T&gt;(c: &#123;new(): T; &#125;): T &#123;</span><br><span class="line">    <span class="keyword">return</span> <span class="keyword">new</span> c();</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="comment">// 构建一个类</span></span><br><span class="line"><span class="keyword">class</span> Student &#123;</span><br><span class="line">    <span class="keyword">constructor</span> (<span class="params"></span>) &#123;</span><br><span class="line"></span><br><span class="line">    &#125;</span><br><span class="line">    <span class="comment">// 写一个方法</span></span><br><span class="line">    say () &#123;</span><br><span class="line">        <span class="built_in">console</span>.log(<span class="string">"student say"</span>)</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="comment">// 实例化create</span></span><br><span class="line"><span class="comment">// 传入范型值和参数</span></span><br><span class="line"><span class="keyword">let</span> stu = create&lt;Student&gt;(Student)</span><br><span class="line">stu.say()</span><br></pre></td></tr></table></figure></li><li><p>一个更高级的例子，使用原型属性推断并约束构造函数与类实例的关系。</p></li><li>再去看这个升级例子，需要一定的编程基础</li><li>官网上面的还是自己去构建完整的体系<figure class="highlight typescript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br></pre></td><td class="code"><pre><span class="line"></span><br><span class="line"><span class="keyword">class</span> BeeKeeper &#123;</span><br><span class="line">    hasMask: <span class="built_in">boolean</span>;</span><br><span class="line">    <span class="keyword">constructor</span> (<span class="params">hasMask:<span class="built_in">boolean</span></span>) &#123;</span><br><span class="line">        <span class="keyword">this</span>.hasMask = hasMask;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="keyword">class</span> ZooKeeper &#123;</span><br><span class="line">    nametag: <span class="built_in">string</span>;</span><br><span class="line">    <span class="keyword">constructor</span> (<span class="params">nametag: <span class="built_in">string</span></span>) &#123;</span><br><span class="line">        <span class="keyword">this</span>.nametag = nametag;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="comment">// 主类</span></span><br><span class="line"><span class="keyword">class</span> Animal &#123;</span><br><span class="line">    numLegs: <span class="built_in">number</span>;</span><br><span class="line">    <span class="keyword">constructor</span> (<span class="params">numLegs: <span class="built_in">number</span></span>) &#123;</span><br><span class="line">        <span class="keyword">this</span>.numLegs = numLegs;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="comment">// 定义继承类</span></span><br><span class="line"><span class="keyword">class</span> Bee <span class="keyword">extends</span> Animal &#123;</span><br><span class="line">    <span class="comment">// 内部元素声明的是其他的类</span></span><br><span class="line">    keeper: BeeKeeper;</span><br><span class="line">    <span class="comment">// 需要构造函数去实例化</span></span><br><span class="line">    <span class="keyword">constructor</span> (<span class="params"></span>) &#123;</span><br><span class="line">        <span class="keyword">super</span>(<span class="number">4</span>)</span><br><span class="line">        <span class="keyword">this</span>.keeper = <span class="keyword">new</span> BeeKeeper(<span class="literal">true</span>);</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="keyword">class</span> Lion <span class="keyword">extends</span> Animal &#123;</span><br><span class="line">    keeper: ZooKeeper;</span><br><span class="line">    <span class="keyword">constructor</span> (<span class="params"></span>) &#123;</span><br><span class="line">        <span class="keyword">super</span>(<span class="number">4</span>)</span><br><span class="line">        <span class="keyword">this</span>.keeper = <span class="keyword">new</span> ZooKeeper(<span class="string">"YHF"</span>);</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="comment">// A的约束类型是Animal，这里不是继承是约束,需要拥有约束类型的元素，要不自己写要不继承它，这里的操作只是约束不是继承</span></span><br><span class="line">function createInstance&lt;A extends Animal&gt;(c: new () =&gt; A): A &#123;</span><br><span class="line">    <span class="keyword">return</span> <span class="keyword">new</span> c();</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="built_in">console</span>.log(createInstance(Lion).keeper.nametag);  <span class="comment">// YHF</span></span><br><span class="line"><span class="built_in">console</span>.log(createInstance(Bee).keeper.hasMask);   <span class="comment">// true</span></span><br><span class="line"><span class="built_in">console</span>.log(createInstance(Lion).numLegs); <span class="comment">// 4</span></span><br></pre></td></tr></table></figure></li></ul><h1 id="在泛型里使用类类型-（理解后自定义练习）"><a href="#在泛型里使用类类型-（理解后自定义练习）" class="headerlink" title="在泛型里使用类类型 （理解后自定义练习）"></a>在泛型里使用类类型 （理解后自定义练习）</h1><ul><li>使用类不同的声明类型</li><li>添加判断，深刻理解<figure class="highlight typescript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">class</span> Student &#123;</span><br><span class="line">    aa: <span class="built_in">string</span></span><br><span class="line">    <span class="keyword">constructor</span> (<span class="params">aa: <span class="built_in">string</span></span>) &#123;</span><br><span class="line">        <span class="keyword">this</span>.aa = aa</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="keyword">class</span> Test &#123;</span><br><span class="line">    bb: <span class="built_in">number</span></span><br><span class="line">    <span class="keyword">constructor</span> (<span class="params">bb: <span class="built_in">number</span></span>) &#123;</span><br><span class="line">        <span class="keyword">this</span>.bb = bb</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="keyword">class</span> cat &#123;</span><br><span class="line">    cc: <span class="built_in">boolean</span></span><br><span class="line">    <span class="keyword">constructor</span> (<span class="params">cc: <span class="built_in">boolean</span></span>) &#123;</span><br><span class="line">        <span class="keyword">this</span>.cc = cc</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="keyword">class</span> A1 <span class="keyword">extends</span> cat &#123;</span><br><span class="line">    dd: Student</span><br><span class="line">    <span class="keyword">constructor</span> (<span class="params">g : <span class="built_in">boolean</span></span>) &#123;</span><br><span class="line">        <span class="keyword">if</span> (g) &#123;</span><br><span class="line">            <span class="keyword">super</span>(g)</span><br><span class="line">            <span class="keyword">this</span>.dd = <span class="keyword">new</span> Student(<span class="string">"YHF"</span>);</span><br><span class="line">        &#125; <span class="keyword">else</span> &#123;</span><br><span class="line">            <span class="keyword">super</span>(g)</span><br><span class="line">            <span class="keyword">this</span>.dd = <span class="keyword">new</span> Student(<span class="string">"err"</span>);</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line">    test (aa: <span class="built_in">string</span>) &#123;</span><br><span class="line">        <span class="keyword">let</span> sum = <span class="keyword">new</span> Student(aa)</span><br><span class="line">        <span class="keyword">return</span> sum.aa</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="keyword">class</span> A2 <span class="keyword">extends</span> cat &#123;</span><br><span class="line">    ee: Test</span><br><span class="line">    <span class="keyword">constructor</span> (<span class="params">g : <span class="built_in">boolean</span></span>) &#123;</span><br><span class="line">        <span class="keyword">if</span> (g) &#123;</span><br><span class="line">            <span class="keyword">super</span>(g)</span><br><span class="line">            <span class="keyword">this</span>.ee = <span class="keyword">new</span> Test(<span class="number">1</span>);</span><br><span class="line">        &#125; <span class="keyword">else</span> &#123;</span><br><span class="line">            <span class="keyword">super</span>(g)</span><br><span class="line">            <span class="keyword">this</span>.ee = <span class="keyword">new</span> Test(<span class="number">2</span>);</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line">function abc&lt;T extends cat&gt;(c: new (g) =&gt; T,g: boolean): T &#123;</span><br><span class="line">    <span class="keyword">return</span> <span class="keyword">new</span> c(g);</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="keyword">let</span> test1 = abc(A1,<span class="literal">true</span>);</span><br><span class="line"></span><br><span class="line"><span class="built_in">console</span>.log(test1.dd.aa) <span class="comment">// YHF</span></span><br><span class="line"><span class="built_in">console</span>.log(test1.cc) <span class="comment">// true</span></span><br><span class="line"><span class="built_in">console</span>.log(test1.test(<span class="string">"改变YHF,我叫你爸爸"</span>)); <span class="comment">// 改变YHF,我叫你爸爸</span></span><br><span class="line"></span><br><span class="line"><span class="built_in">console</span>.log(abc(A2,<span class="literal">false</span>).ee.bb); <span class="comment">// 2</span></span><br></pre></td></tr></table></figure></li></ul><h1 id="后记"><a href="#后记" class="headerlink" title="后记"></a>后记</h1><ul><li>这个就是我学习Ts的第六天的笔记，欢迎更多的同行大哥指导交流</li><li><a href="https://yhf7.github.io/" target="_blank" rel="noopener">欢迎进入我的博客</a>：<a href="https://yhf7.github.io/" target="_blank" rel="noopener">https://yhf7.github.io/</a></li><li>如果有什么侵权的话，请及时添加小编微信以及qq也可以来告诉小编（905477376微信qq通用），谢谢！</li></ul>]]></content>
    
    <summary type="html">
    
      
      
        &lt;link rel=&quot;stylesheet&quot; class=&quot;aplayer-secondary-style-marker&quot; href=&quot;/assets/css/APlayer.min.css&quot;&gt;&lt;script src=&quot;/assets/js/APlayer.min.js&quot; cla
      
    
    </summary>
    
      <category term="TypeScript" scheme="http://yoursite.com/categories/TypeScript/"/>
    
    
      <category term="TypeScript 笔记" scheme="http://yoursite.com/tags/TypeScript-%E7%AC%94%E8%AE%B0/"/>
    
  </entry>
  
  <entry>
    <title>TypeScript 自学笔记5 函数</title>
    <link href="http://yoursite.com/2019/03/18/TypeScript%E7%AC%94%E8%AE%B05/"/>
    <id>http://yoursite.com/2019/03/18/TypeScript笔记5/</id>
    <published>2019-03-18T14:12:43.890Z</published>
    <updated>2019-03-18T14:54:15.870Z</updated>
    
    <content type="html"><![CDATA[<link rel="stylesheet" class="aplayer-secondary-style-marker" href="/assets/css/APlayer.min.css"><script src="/assets/js/APlayer.min.js" class="aplayer-secondary-script-marker"></script><h1 id="前言"><a href="#前言" class="headerlink" title="前言"></a>前言</h1><ul><li>时隔多天，今天的需求配色出了点问题等处理，我就又来继续我的Ts之旅</li><li>继续看文档学习Ts直到学完为止</li><li>今天是记录ts的第五天</li><li>今天学习ts的函数，上一次学的是类这一次到函数了</li><li>等到全部过一遍再重新回头看看</li></ul><h1 id="介绍"><a href="#介绍" class="headerlink" title="介绍"></a>介绍</h1><p>函数是JavaScript应用程序的基础。 它帮助你实现抽象层，模拟类，信息隐藏和模块。 在TypeScript里，虽然已经支持类，命名空间和模块，但函数仍然是主要的定义 行为的地方。 TypeScript为JavaScript函数添加了额外的功能，让我们可以更容易地使用。</p><h1 id="函数"><a href="#函数" class="headerlink" title="函数"></a>函数</h1><ul><li>其实简单的来说和js没有什么区别</li><li>没错使用js的这两种监理方式在ts上是可以跑的<figure class="highlight typescript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br></pre></td><td class="code"><pre><span class="line"><span class="function"><span class="keyword">function</span> <span class="title">add</span>(<span class="params">x,y</span>) </span>&#123;</span><br><span class="line">    <span class="keyword">return</span> x + y;</span><br><span class="line">&#125;</span><br><span class="line"><span class="built_in">console</span>.log(add(<span class="number">3</span>,<span class="number">4</span>));</span><br><span class="line"></span><br><span class="line"><span class="keyword">let</span> myAdd = <span class="function"><span class="keyword">function</span> (<span class="params">x,y</span>) </span>&#123;</span><br><span class="line">    <span class="keyword">return</span> x + y;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="built_in">console</span>.log(myAdd(<span class="number">5</span>,<span class="number">6</span>));</span><br></pre></td></tr></table></figure></li></ul><h1 id="函数类型"><a href="#函数类型" class="headerlink" title="函数类型"></a>函数类型</h1><h3 id="为函数定义类型"><a href="#为函数定义类型" class="headerlink" title="为函数定义类型"></a>为函数定义类型</h3><ul><li>这个其实在前面的例子里面已经遇到过了。不过还是要练一下</li><li>升级上一个例子</li><li>写入参数类型和返回类型后还是运行没问题的<figure class="highlight typescript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br></pre></td><td class="code"><pre><span class="line"><span class="function"><span class="keyword">function</span> <span class="title">add</span>(<span class="params">x: <span class="built_in">number</span>,y: <span class="built_in">number</span></span>): <span class="title">number</span> </span>&#123;</span><br><span class="line">    <span class="keyword">return</span> x + y;</span><br><span class="line">&#125;</span><br><span class="line"><span class="built_in">console</span>.log(add(<span class="number">3</span>,<span class="number">4</span>));</span><br><span class="line"></span><br><span class="line"><span class="keyword">let</span> myAdd = <span class="function"><span class="keyword">function</span> (<span class="params">x: <span class="built_in">number</span>,y: <span class="built_in">number</span></span>): <span class="title">number</span> </span>&#123;</span><br><span class="line">    <span class="keyword">return</span> x + y;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="built_in">console</span>.log(myAdd(<span class="number">5</span>,<span class="number">6</span>));</span><br></pre></td></tr></table></figure></li></ul><h3 id="书写完整函数类型"><a href="#书写完整函数类型" class="headerlink" title="书写完整函数类型"></a>书写完整函数类型</h3><ul><li>简单来说就是吧整个函数的参数和返回类型在声明时就指定声明好</li><li>函数类型包含两部分：参数类型和返回值类型。 当写出完整函数类型的时候，这两部分都是需要的。 我们以参数列表的形式写出参数类型，为每个参数指定一个名字和类型</li><li>参数名称只是为了易读性，名字可以不用一样</li></ul><hr><figure class="highlight typescript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">// 1.</span></span><br><span class="line"><span class="keyword">let</span> myAdd: <span class="function">(<span class="params">x: <span class="built_in">number</span>, y: <span class="built_in">number</span></span>) =&gt;</span> <span class="built_in">number</span> = <span class="function"><span class="keyword">function</span>(<span class="params">x: <span class="built_in">number</span>, y: <span class="built_in">number</span></span>): <span class="title">number</span> </span>&#123; <span class="keyword">return</span> x + y; &#125;;</span><br><span class="line"></span><br><span class="line"><span class="comment">// 参数名不同版本</span></span><br><span class="line"><span class="keyword">let</span> myAdd: <span class="function">(<span class="params">baseValue: <span class="built_in">number</span>, increment: <span class="built_in">number</span></span>) =&gt;</span> <span class="built_in">number</span> = <span class="function"><span class="keyword">function</span>(<span class="params">x: <span class="built_in">number</span>, y: <span class="built_in">number</span></span>): <span class="title">number</span> </span>&#123; <span class="keyword">return</span> x + y; &#125;;</span><br></pre></td></tr></table></figure><ul><li>当我第一次看到这样写的时候我也是比较疑惑，前面的参数声明我是知道的</li><li>但是那个箭头指向我就不是很懂，大概猜是返回值类型的指定</li><li>不太确定着么办呢？想知道是不是那我改变一下它的属性不就知道了</li><li><p>我就改变了声明为字符串，我们来看看升级版</p><figure class="highlight typescript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">let</span> myAdd: <span class="function">(<span class="params">x: <span class="built_in">number</span>, y: <span class="built_in">number</span></span>) =&gt;</span> <span class="built_in">String</span> = <span class="function"><span class="keyword">function</span>(<span class="params">x: <span class="built_in">number</span>, y: <span class="built_in">number</span></span>): <span class="title">String</span> </span>&#123; <span class="keyword">return</span> (x + y) &gt; <span class="number">10</span> ? <span class="string">"true"</span> : <span class="string">"false"</span>; &#125;;</span><br><span class="line"><span class="built_in">console</span>.log(myAdd(<span class="number">5</span>,<span class="number">6</span>)); <span class="comment">// true</span></span><br></pre></td></tr></table></figure></li><li><p>这样来看我的理解是对的，确实是用了指定返回值类型的</p></li><li>后面看到官网也有写解释</li><li>第二部分是返回值类型。 对于返回值，我们在函数和返回值类型之前使用( =&gt;)符号，使之清晰明了。 如之前提到的，返回值类型是函数类型的必要部分，如果函数没有返回任何值，你也必须指定返回值类型为 void而不能留空。</li><li>如果使用外部的变量是不用在构建函数的时候声明的</li></ul><h3 id="推断类型"><a href="#推断类型" class="headerlink" title="推断类型"></a>推断类型</h3><ul><li>其实是ts自身的识别</li><li>当你前面声明并赋值的时候，编译器会自动识别出类型意思就是说不写类型也可以</li><li>官网说这叫</li><li>直接上例子一看就懂<figure class="highlight typescript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">// myAdd has the full function type</span></span><br><span class="line"><span class="keyword">let</span> myAdd = <span class="function"><span class="keyword">function</span>(<span class="params">x: <span class="built_in">number</span>, y: <span class="built_in">number</span></span>): <span class="title">number</span> </span>&#123; <span class="keyword">return</span> x + y; &#125;;</span><br><span class="line"></span><br><span class="line"><span class="comment">// The parameters `x` and `y` have the type number</span></span><br><span class="line"><span class="keyword">let</span> myAdd: <span class="function">(<span class="params">baseValue: <span class="built_in">number</span>, increment: <span class="built_in">number</span></span>) =&gt;</span> <span class="built_in">number</span> =</span><br><span class="line">    <span class="function"><span class="keyword">function</span>(<span class="params">x, y</span>) </span>&#123; <span class="keyword">return</span> x + y; &#125;;</span><br></pre></td></tr></table></figure></li></ul><h1 id="可选参数和默认参数"><a href="#可选参数和默认参数" class="headerlink" title="可选参数和默认参数"></a>可选参数和默认参数</h1><h3 id="参数"><a href="#参数" class="headerlink" title="参数"></a>参数</h3><ul><li>这个可选类型我们前面也是学过的那看看例子</li><li>其实就是说设定的参数和传入的参数必须一致，对一个不可以少一个不可以</li><li>这个和js不一样，这个写了多少就是多少<figure class="highlight typescript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><span class="line"><span class="function"><span class="keyword">function</span> <span class="title">buildName</span>(<span class="params">firstName: <span class="built_in">string</span>, lastName: <span class="built_in">string</span></span>) </span>&#123;</span><br><span class="line">    <span class="keyword">return</span> firstName + <span class="string">" "</span> + lastName;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="keyword">let</span> result1 = buildName(<span class="string">"Bob"</span>);                  <span class="comment">// error, too few parameters</span></span><br><span class="line"><span class="keyword">let</span> result2 = buildName(<span class="string">"Bob"</span>, <span class="string">"Adams"</span>, <span class="string">"Sr."</span>);  <span class="comment">// error, too many parameters</span></span><br><span class="line"><span class="keyword">let</span> result3 = buildName(<span class="string">"Bob"</span>, <span class="string">"Adams"</span>);         <span class="comment">// ah, just right</span></span><br></pre></td></tr></table></figure></li></ul><h3 id="可选参数"><a href="#可选参数" class="headerlink" title="可选参数"></a>可选参数</h3><ul><li>可选参数呢就是可以输入也可以不输入的</li><li>定义了的可以少写，不传入默认值就是undefined</li><li>当是还是不可以多输入多输入还是会报错的</li><li>假如想前面的这个数为可选参数呢，那就把它放在第二位</li><li>因为可选参数必须跟在必须输入参数的后面，之前我就遇到过这样的错误</li><li>当时还不知道是为什么现在终于明白了<figure class="highlight typescript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br></pre></td><td class="code"><pre><span class="line"><span class="function"><span class="keyword">function</span> <span class="title">buildName</span>(<span class="params">firstName: <span class="built_in">string</span>, lastName?: <span class="built_in">string</span></span>) </span>&#123;</span><br><span class="line">    <span class="keyword">if</span> (lastName)</span><br><span class="line">        <span class="keyword">return</span> firstName + <span class="string">" "</span> + lastName;</span><br><span class="line">    <span class="keyword">else</span></span><br><span class="line">        <span class="keyword">return</span> firstName;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="keyword">let</span> result1 = buildName(<span class="string">"Bob"</span>);  <span class="comment">// works correctly now</span></span><br><span class="line"><span class="keyword">let</span> result2 = buildName(<span class="string">"Bob"</span>, <span class="string">"Adams"</span>, <span class="string">"Sr."</span>);  <span class="comment">// error, too many parameters</span></span><br><span class="line"><span class="keyword">let</span> result3 = buildName(<span class="string">"Bob"</span>, <span class="string">"Adams"</span>);  <span class="comment">// ah, just right</span></span><br></pre></td></tr></table></figure></li></ul><h3 id="默认值"><a href="#默认值" class="headerlink" title="默认值"></a>默认值</h3><ul><li>当我们可选参数不输入是默认是undefined</li><li>那我们可以去改变它的默认值，很简单就是在参数后面加入</li><li>传入的是undefined的时候也是会启动这个默认值的<figure class="highlight typescript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><span class="line">function buildName(firstName: string, lastName = "Smith") &#123;</span><br><span class="line">    <span class="keyword">return</span> firstName + <span class="string">" "</span> + lastName;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="keyword">let</span> result1 = buildName(<span class="string">"Bob"</span>);                  <span class="comment">// works correctly now, returns "Bob Smith"</span></span><br><span class="line"><span class="keyword">let</span> result2 = buildName(<span class="string">"Bob"</span>, <span class="literal">undefined</span>);       <span class="comment">// still works, also returns "Bob Smith"</span></span><br><span class="line"><span class="keyword">let</span> result3 = buildName(<span class="string">"Bob"</span>, <span class="string">"Adams"</span>, <span class="string">"Sr."</span>);  <span class="comment">// error, too many parameters</span></span><br><span class="line"><span class="keyword">let</span> result4 = buildName(<span class="string">"Bob"</span>, <span class="string">"Adams"</span>);         <span class="comment">// ah, just right</span></span><br></pre></td></tr></table></figure></li></ul><hr><ul><li>这样看起来 默认参数和可选参数其实是共享的</li><li>默认的参数其实就是可选的参数啊，可选的参数也带有默认参数啊</li><li>这样就可以解决我们想把可选参数放在前面的问题</li><li>我在前面放入默认参数不就是相当于变成了可选参数</li><li>启动的时候输入undefined就可以了</li><li>果然是个很不错的方法，不过既然这样为啥我不直接放在后面呢哈哈哈<figure class="highlight typescript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><span class="line">function buildName(firstName = "Will", lastName: string) &#123;</span><br><span class="line">    <span class="keyword">return</span> firstName + <span class="string">" "</span> + lastName;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="keyword">let</span> result1 = buildName(<span class="string">"Bob"</span>); <span class="comment">// 默认参数位于默认参数前面这样是调用不到默认参数的</span></span><br><span class="line"><span class="keyword">let</span> result2 = buildName(<span class="string">"Bob"</span>, <span class="string">"Adams"</span>, <span class="string">"Sr."</span>);  <span class="comment">// error, too many parameters</span></span><br><span class="line"><span class="keyword">let</span> result3 = buildName(<span class="string">"Bob"</span>, <span class="string">"Adams"</span>);         <span class="comment">// okay and returns "Bob Adams"</span></span><br><span class="line"><span class="keyword">let</span> result4 = buildName(<span class="literal">undefined</span>, <span class="string">"Adams"</span>);     <span class="comment">// okay and returns "Will Adams"</span></span><br></pre></td></tr></table></figure></li></ul><h1 id="剩余参数"><a href="#剩余参数" class="headerlink" title="剩余参数"></a>剩余参数</h1><ul><li>必要参数，默认参数和可选参数有个共同点：它们表示某一个参数。 有时，你想同时操作多个参数，或者你并不知道会有多少参数传递进来。 在JavaScript里，你可以使用 arguments来访问所有传入的参数。</li><li>在TypeScript里，你可以把所有参数收集到一个变量里</li><li>这个…其实就是es6的语法学过的都应该懂得</li><li><p>然后使用数组方法合并返回，不错的方法</p><figure class="highlight typescript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line"><span class="function"><span class="keyword">function</span> <span class="title">buildName</span>(<span class="params">firstName: <span class="built_in">string</span>, ...restOfName: <span class="built_in">string</span>[]</span>) </span>&#123;</span><br><span class="line">  <span class="keyword">return</span> firstName + <span class="string">" "</span> + restOfName.join(<span class="string">" "</span>);</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="keyword">let</span> employeeName = buildName(<span class="string">"Joseph"</span>, <span class="string">"Samuel"</span>, <span class="string">"Lucas"</span>, <span class="string">"MacKinzie"</span>);</span><br></pre></td></tr></table></figure></li><li><p>剩余参数会被当做个数不限的可选参数。 可以一个都没有，同样也可以有任意个。 编译器创建参数数组，名字是你在省略号（ …）后面给定的名字，你可以在函数体内使用这个数组。</p></li></ul><hr><ul><li>官网还给出了函数类型定义时的用法<figure class="highlight typescript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line"><span class="function"><span class="keyword">function</span> <span class="title">buildName</span>(<span class="params">firstName: <span class="built_in">string</span>, ...restOfName: <span class="built_in">string</span>[]</span>) </span>&#123;</span><br><span class="line">  <span class="keyword">return</span> firstName + <span class="string">" "</span> + restOfName.join(<span class="string">" "</span>);</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="keyword">let</span> buildNameFun: <span class="function">(<span class="params">fname: <span class="built_in">string</span>, ...rest: <span class="built_in">string</span>[]</span>) =&gt;</span> <span class="built_in">string</span> = buildName;</span><br></pre></td></tr></table></figure></li></ul><h1 id="This-（重点）"><a href="#This-（重点）" class="headerlink" title="This （重点）"></a>This （重点）</h1><ul><li>学习如何在JavaScript里正确使用this就好比一场成年礼。 由于TypeScript是JavaScript的超集，TypeScript程序员也需要弄清 this工作机制并且当有bug的时候能够找出错误所在。 幸运的是，TypeScript能通知你错误地使用了 this的地方。（挺认可的）</li></ul><h1 id="this-和尖头函数"><a href="#this-和尖头函数" class="headerlink" title="this 和尖头函数"></a>this 和尖头函数</h1><h3 id="js-this"><a href="#js-this" class="headerlink" title="js this"></a>js this</h3><ul><li>JavaScript里，this的值在函数被调用的时候才会指定。 这是个既强大又灵活的特点，但是你需要花点时间弄清楚函数调用的上下文是什么。 但众所周知，这不是一件很简单的事，尤其是在返回一个函数或将函数当做参数传递的时候。</li><li><p>在js里面 this 是一个很麻烦的家伙，没有理解好会引起很多bug</p><figure class="highlight typescript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">let</span> deck = &#123;</span><br><span class="line">    suits: [<span class="string">"hearts"</span>, <span class="string">"spades"</span>, <span class="string">"clubs"</span>, <span class="string">"diamonds"</span>],</span><br><span class="line">    cards: <span class="built_in">Array</span>(<span class="number">52</span>),</span><br><span class="line">    createCardPicker: <span class="function"><span class="keyword">function</span>(<span class="params"></span>) </span>&#123;</span><br><span class="line">        <span class="keyword">return</span> <span class="function"><span class="keyword">function</span>(<span class="params"></span>) </span>&#123;</span><br><span class="line">            <span class="keyword">let</span> pickedCard = <span class="built_in">Math</span>.floor(<span class="built_in">Math</span>.random() * <span class="number">52</span>);</span><br><span class="line">            <span class="keyword">let</span> pickedSuit = <span class="built_in">Math</span>.floor(pickedCard / <span class="number">13</span>);</span><br><span class="line"></span><br><span class="line">            <span class="keyword">return</span> &#123;suit: <span class="keyword">this</span>.suits[pickedSuit], card: pickedCard % <span class="number">13</span>&#125;;</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="keyword">let</span> cardPicker = deck.createCardPicker();</span><br><span class="line"><span class="keyword">let</span> pickedCard = cardPicker();</span><br><span class="line"></span><br><span class="line"><span class="built_in">console</span>.log(<span class="string">"card: "</span> + pickedCard.card + <span class="string">" of "</span> + pickedCard.suit);</span><br></pre></td></tr></table></figure></li><li><p>可以看到createCardPicker是个函数，并且它又返回了一个函数。 如果我们尝试运行这个程序，会发现它并没有输出结果而是报错了。 因为 createCardPicker返回的函数里的this被设置成了window而不是deck对象。 因为我们只是独立的调用了 cardPicker()。 顶级的非方法式调用会将 this视为window。 （注意：在严格模式下， this为undefined而不是window）。</p></li></ul><h3 id="解决上面的问题"><a href="#解决上面的问题" class="headerlink" title="解决上面的问题"></a>解决上面的问题</h3><ul><li>熟悉Es6语法的应该会想到箭头函数，因为箭头函数可以绑定this，而不是使用时的this</li><li>为了解决这个问题，我们可以在函数被返回时就绑好正确的this。 这样的话，无论之后怎么使用它，都会引用绑定的‘deck’对象。 我们需要改变函数表达式来使用ECMAScript 6箭头语法。 箭头函数能保存函数创建时的 this值，而不是调用时的值：</li><li>这个真的完美的解决了问题</li><li>其实箭头函数是绑定当时自身最高级的父类为this（个人理解）<figure class="highlight typescript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">let</span> deck = &#123;</span><br><span class="line">    suits: [<span class="string">"hearts"</span>, <span class="string">"spades"</span>, <span class="string">"clubs"</span>, <span class="string">"diamonds"</span>],</span><br><span class="line">    cards: <span class="built_in">Array</span>(<span class="number">52</span>),</span><br><span class="line">    createCardPicker: <span class="function"><span class="keyword">function</span>(<span class="params"></span>) </span>&#123;</span><br><span class="line">        <span class="comment">// <span class="doctag">NOTE:</span> the line below is now an arrow function, allowing us to capture 'this' right here</span></span><br><span class="line">        <span class="keyword">return</span> <span class="function"><span class="params">()</span> =&gt;</span> &#123;</span><br><span class="line">            <span class="keyword">let</span> pickedCard = <span class="built_in">Math</span>.floor(<span class="built_in">Math</span>.random() * <span class="number">52</span>);</span><br><span class="line">            <span class="keyword">let</span> pickedSuit = <span class="built_in">Math</span>.floor(pickedCard / <span class="number">13</span>);</span><br><span class="line"></span><br><span class="line">            <span class="keyword">return</span> &#123;suit: <span class="keyword">this</span>.suits[pickedSuit], card: pickedCard % <span class="number">13</span>&#125;;</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="keyword">let</span> cardPicker = deck.createCardPicker();</span><br><span class="line"><span class="keyword">let</span> pickedCard = cardPicker();</span><br><span class="line"></span><br><span class="line"><span class="built_in">console</span>.log(<span class="string">"card: "</span> + pickedCard.card + <span class="string">" of "</span> + pickedCard.suit);<span class="comment">// card: 11 of hearts</span></span><br></pre></td></tr></table></figure></li></ul><hr><ul><li>除了es6的箭头函数我们也可以使用bind来绑定this的指向</li><li>现在我们就绑定为deck也就是我们的对象<figure class="highlight typescript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">let</span> deck = &#123;</span><br><span class="line">    suits: [<span class="string">"hearts"</span>, <span class="string">"spades"</span>, <span class="string">"clubs"</span>, <span class="string">"diamonds"</span>],</span><br><span class="line">    cards: <span class="built_in">Array</span>(<span class="number">52</span>),</span><br><span class="line">    createCardPicker: <span class="function"><span class="keyword">function</span>(<span class="params"></span>) </span>&#123;</span><br><span class="line">        <span class="keyword">let</span> picker =  <span class="function"><span class="keyword">function</span>(<span class="params"></span>) </span>&#123;</span><br><span class="line">            <span class="keyword">let</span> pickedCard = <span class="built_in">Math</span>.floor(<span class="built_in">Math</span>.random() * <span class="number">52</span>);</span><br><span class="line">            <span class="keyword">let</span> pickedSuit = <span class="built_in">Math</span>.floor(pickedCard / <span class="number">13</span>);</span><br><span class="line"></span><br><span class="line">            <span class="keyword">return</span> &#123;suit: <span class="keyword">this</span>.suits[pickedSuit], card: pickedCard % <span class="number">13</span>&#125;;</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="keyword">return</span> picker.bind(deck)</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="keyword">let</span> cardPicker = deck.createCardPicker();</span><br><span class="line"><span class="keyword">let</span> pickedCard = cardPicker();</span><br><span class="line"></span><br><span class="line"><span class="built_in">console</span>.log(<span class="string">"card: "</span> + pickedCard.card + <span class="string">" of "</span> + pickedCard.suit);</span><br></pre></td></tr></table></figure></li></ul><h1 id="this-参数"><a href="#this-参数" class="headerlink" title="this 参数"></a>this 参数</h1><ul><li>不幸的是，this.suits[pickedSuit]的类型依旧为any。 这是因为 this来自对象字面量里的函数表达式。 修改的方法是，提供一个显式的 this参数。 this参数是个假的参数，（这个我没有所以看不出是不是）<figure class="highlight typescript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line"><span class="function"><span class="keyword">function</span> <span class="title">f</span>(<span class="params"><span class="keyword">this</span>: <span class="built_in">void</span></span>) </span>&#123;</span><br><span class="line">    <span class="comment">// make sure `this` is unusable in this standalone function</span></span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure></li></ul><hr><ul><li>让我们往例子里添加一些接口，Card 和 Deck，让类型重用能够变得清晰简单些：</li><li>这个例子对于我这个初学者来说有点绕要花点时间理解</li><li>为什么在里面的this指定Deck呢，其实就是这一步指定的声明</li><li>把这个声明放入到函数里面 使得this执行的参数类型被指定<figure class="highlight typescript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">interface</span> Card &#123;</span><br><span class="line">    suit: <span class="built_in">string</span>;</span><br><span class="line">    card: <span class="built_in">number</span>;</span><br><span class="line">&#125;</span><br><span class="line"><span class="keyword">interface</span> Deck &#123;</span><br><span class="line">    suits: <span class="built_in">string</span>[];</span><br><span class="line">    cards: <span class="built_in">number</span>[];</span><br><span class="line">    createCardPicker(<span class="keyword">this</span>: Deck): <span class="function"><span class="params">()</span> =&gt;</span> Card;</span><br><span class="line">&#125;</span><br><span class="line"><span class="keyword">let</span> deck: Deck = &#123;</span><br><span class="line">    suits: [<span class="string">"hearts"</span>, <span class="string">"spades"</span>, <span class="string">"clubs"</span>, <span class="string">"diamonds"</span>],</span><br><span class="line">    cards: <span class="built_in">Array</span>(<span class="number">52</span>),</span><br><span class="line">    <span class="comment">// <span class="doctag">NOTE:</span> The function now explicitly specifies that its callee must be of type Deck</span></span><br><span class="line">    createCardPicker: <span class="function"><span class="keyword">function</span>(<span class="params"><span class="keyword">this</span>: Deck</span>) </span>&#123;</span><br><span class="line">        <span class="keyword">return</span> <span class="function"><span class="params">()</span> =&gt;</span> &#123;</span><br><span class="line">            <span class="keyword">let</span> pickedCard = <span class="built_in">Math</span>.floor(<span class="built_in">Math</span>.random() * <span class="number">52</span>);</span><br><span class="line">            <span class="keyword">let</span> pickedSuit = <span class="built_in">Math</span>.floor(pickedCard / <span class="number">13</span>);</span><br><span class="line"></span><br><span class="line">            <span class="keyword">return</span> &#123;suit: <span class="keyword">this</span>.suits[pickedSuit], card: pickedCard % <span class="number">13</span>&#125;;</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="keyword">let</span> cardPicker = deck.createCardPicker();</span><br><span class="line"><span class="keyword">let</span> pickedCard = cardPicker();</span><br><span class="line"></span><br><span class="line">alert(<span class="string">"card: "</span> + pickedCard.card + <span class="string">" of "</span> + pickedCard.suit);</span><br></pre></td></tr></table></figure></li></ul><hr><ul><li>现在TypeScript知道createCardPicker期望在某个Deck对象上调用。 也就是说 this是Deck类型的，而非any，因此–noImplicitThis不会报错了。（官网说的我不知道着么去证实）</li></ul><h1 id="this参数在回调函数里-这个有点不太好理解，死磕了好久"><a href="#this参数在回调函数里-这个有点不太好理解，死磕了好久" class="headerlink" title="this参数在回调函数里 (这个有点不太好理解，死磕了好久)"></a>this参数在回调函数里 (这个有点不太好理解，死磕了好久)</h1><ul><li>你可以也看到过在回调函数里的this报错，当你将一个函数传递到某个库函数里稍后会被调用时。 因为当回调被调用的时候，它们会被当成一个普通函数调用， this将为undefined。 稍做改动，你就可以通过 this参数来避免错误。 首先，库函数的作者要指定 this的类型</li><li><ul><li>这个暂时无法实现的，只是学习原理<figure class="highlight typescript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">interface</span> UIElement &#123;</span><br><span class="line">  addClickListener(onclick: <span class="function">(<span class="params"><span class="keyword">this</span>: <span class="built_in">void</span>, e: Event</span>) =&gt;</span> <span class="built_in">void</span>): <span class="built_in">void</span>;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure></li></ul></li></ul><hr><ul><li>指定了this类型后，你显式声明onClickBad必须在Handler的实例上调用。 然后TypeScript会检测到 addClickListener要求函数带有this: void<figure class="highlight typescript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">interface</span> UIElement &#123;</span><br><span class="line">  addClickListener(onclick: <span class="function">(<span class="params"><span class="keyword">this</span>: <span class="built_in">void</span>, e: Event</span>) =&gt;</span> <span class="built_in">void</span>): <span class="built_in">void</span>;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="comment">// UIElementd的类</span></span><br><span class="line"><span class="keyword">class</span> UIButton <span class="keyword">implements</span> UIElement &#123;</span><br><span class="line">    addClickListener(onclick: <span class="function">(<span class="params"><span class="keyword">this</span>: <span class="built_in">void</span>, e: Event</span>) =&gt;</span> <span class="built_in">void</span>): <span class="built_in">void</span> &#123;</span><br><span class="line">        <span class="keyword">let</span> event = <span class="keyword">new</span> Event(<span class="string">"click"</span>, &#123;<span class="string">"bubbles"</span>:<span class="literal">true</span>, <span class="string">"cancelable"</span>:<span class="literal">false</span>&#125;)</span><br><span class="line">        onclick(event)</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="keyword">class</span> Handler &#123;</span><br><span class="line">    info: <span class="built_in">string</span>;</span><br><span class="line">    onClickBad(<span class="keyword">this</span>: Handler, e: Event) &#123;</span><br><span class="line">        <span class="comment">// oops, used this here. using this callback would crash at runtime</span></span><br><span class="line">        <span class="keyword">this</span>.info = <span class="string">"Bad Clicked"</span>;</span><br><span class="line">    &#125;</span><br><span class="line">    onClickGood(<span class="keyword">this</span>:<span class="built_in">void</span>,e:Event) &#123;</span><br><span class="line">        <span class="built_in">console</span>.log(<span class="string">"Good Clicked"</span>)</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br><span class="line"><span class="keyword">let</span> h = <span class="keyword">new</span> Handler();</span><br><span class="line"><span class="keyword">let</span> uiElement: UIElement = <span class="keyword">new</span> UIButton();</span><br><span class="line">uiElement.addClickListener(h.onClickGood);</span><br></pre></td></tr></table></figure></li></ul><hr><ul><li>修复错误<figure class="highlight typescript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">class</span> Handler &#123;</span><br><span class="line">    info: <span class="built_in">string</span>;</span><br><span class="line">    onClickGood(<span class="keyword">this</span>: <span class="built_in">void</span>, e: Event) &#123;</span><br><span class="line">        <span class="comment">// can't use this here because it's of type void!</span></span><br><span class="line">        <span class="built_in">console</span>.log(<span class="string">'clicked!'</span>);</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br><span class="line"><span class="keyword">let</span> h = <span class="keyword">new</span> Handler();</span><br><span class="line">uiElement.addClickListener(h.onClickGood);</span><br></pre></td></tr></table></figure></li></ul><hr><ul><li><p>因为onClickGood指定了this类型为void，因此传递addClickListener是合法的。 当然了，这也意味着不能使用 this.info. 如果你两者都想要，你不得不使用箭头函数了：</p><figure class="highlight typescript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">class</span> Handler &#123;</span><br><span class="line">    info: <span class="built_in">string</span>;</span><br><span class="line">    onClickGood = <span class="function">(<span class="params">e: Event</span>) =&gt;</span> &#123; <span class="keyword">this</span>.info = e.message &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure></li><li><p>这是可行的因为箭头函数不会捕获this，所以你总是可以把它们传给期望this: void的函数。 缺点是每个 Handler对象都会创建一个箭头函数。 另一方面，方法只会被创建一次，添加到 Handler的原型链上。 它们在不同 Handler对象间是共享的。</p></li></ul><h1 id="重载"><a href="#重载" class="headerlink" title="重载"></a>重载</h1><ul><li>JavaScript本身是个动态语言。 JavaScript里函数根据传入不同的参数而返回不同类型的数据是很常见的。</li><li>这样的写法在我们平时也是会经常遇到的<figure class="highlight typescript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">let</span> suits = [<span class="string">"hearts"</span>, <span class="string">"spades"</span>, <span class="string">"clubs"</span>, <span class="string">"diamonds"</span>];</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">function</span> <span class="title">pickCard</span>(<span class="params">x</span>): <span class="title">any</span> </span>&#123;</span><br><span class="line">    <span class="comment">// Check to see if we're working with an object/array</span></span><br><span class="line">    <span class="comment">// if so, they gave us the deck and we'll pick the card</span></span><br><span class="line">    <span class="keyword">if</span> (<span class="keyword">typeof</span> x == <span class="string">"object"</span>) &#123;</span><br><span class="line">        <span class="keyword">let</span> pickedCard = <span class="built_in">Math</span>.floor(<span class="built_in">Math</span>.random() * x.length);</span><br><span class="line">        <span class="keyword">return</span> pickedCard;</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="comment">// Otherwise just let them pick the card</span></span><br><span class="line">    <span class="keyword">else</span> <span class="keyword">if</span> (<span class="keyword">typeof</span> x == <span class="string">"number"</span>) &#123;</span><br><span class="line">        <span class="keyword">let</span> pickedSuit = <span class="built_in">Math</span>.floor(x / <span class="number">13</span>);</span><br><span class="line">        <span class="keyword">return</span> &#123; suit: suits[pickedSuit], card: x % <span class="number">13</span> &#125;;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="keyword">let</span> myDeck = [&#123; suit: <span class="string">"diamonds"</span>, card: <span class="number">2</span> &#125;, &#123; suit: <span class="string">"spades"</span>, card: <span class="number">10</span> &#125;, &#123; suit: <span class="string">"hearts"</span>, card: <span class="number">4</span> &#125;];</span><br><span class="line"><span class="keyword">let</span> pickedCard1 = myDeck[pickCard(myDeck)];</span><br><span class="line"><span class="built_in">console</span>.log(<span class="string">"card: "</span> + pickedCard1.card + <span class="string">" of "</span> + pickedCard1.suit);</span><br><span class="line"></span><br><span class="line"><span class="keyword">let</span> pickedCard2 = pickCard(<span class="number">15</span>);</span><br><span class="line"><span class="built_in">console</span>.log(<span class="string">"card: "</span> + pickedCard2.card + <span class="string">" of "</span> + pickedCard2.suit);</span><br></pre></td></tr></table></figure></li></ul><p>pickCard方法根据传入参数的不同会返回两种不同的类型。 如果传入的是代表纸牌的对象，函数作用是从中抓一张牌。 如果用户想抓牌，我们告诉他抓到了什么牌。 但是这怎么在类型系统里表示呢。</p><hr><ul><li>方法是为同一个函数提供多个函数类型定义来进行函数重载。 编译器会根据这个列表去处理函数的调用。 下面我们来重载 pickCard函数。</li><li>学习多版本的控制<figure class="highlight typescript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">let</span> suits = [<span class="string">"hearts"</span>, <span class="string">"spades"</span>, <span class="string">"clubs"</span>, <span class="string">"diamonds"</span>];</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">function</span> <span class="title">pickCard</span>(<span class="params">x: &#123;suit: <span class="built_in">string</span>; card: <span class="built_in">number</span>; &#125;[]</span>): <span class="title">number</span></span>;</span><br><span class="line"><span class="function"><span class="keyword">function</span> <span class="title">pickCard</span>(<span class="params">x: <span class="built_in">number</span></span>): </span>&#123;suit: <span class="built_in">string</span>; card: <span class="built_in">number</span>; &#125;;</span><br><span class="line"><span class="function"><span class="keyword">function</span> <span class="title">pickCard</span>(<span class="params">x</span>): <span class="title">any</span> </span>&#123;</span><br><span class="line">    <span class="comment">// Check to see if we're working with an object/array</span></span><br><span class="line">    <span class="comment">// if so, they gave us the deck and we'll pick the card</span></span><br><span class="line">    <span class="keyword">if</span> (<span class="keyword">typeof</span> x == <span class="string">"object"</span>) &#123;</span><br><span class="line">        <span class="keyword">let</span> pickedCard = <span class="built_in">Math</span>.floor(<span class="built_in">Math</span>.random() * x.length);</span><br><span class="line">        <span class="keyword">return</span> pickedCard;</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="comment">// Otherwise just let them pick the card</span></span><br><span class="line">    <span class="keyword">else</span> <span class="keyword">if</span> (<span class="keyword">typeof</span> x == <span class="string">"number"</span>) &#123;</span><br><span class="line">        <span class="keyword">let</span> pickedSuit = <span class="built_in">Math</span>.floor(x / <span class="number">13</span>);</span><br><span class="line">        <span class="keyword">return</span> &#123; suit: suits[pickedSuit], card: x % <span class="number">13</span> &#125;;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="keyword">let</span> myDeck = [&#123; suit: <span class="string">"diamonds"</span>, card: <span class="number">2</span> &#125;, &#123; suit: <span class="string">"spades"</span>, card: <span class="number">10</span> &#125;, &#123; suit: <span class="string">"hearts"</span>, card: <span class="number">4</span> &#125;];</span><br><span class="line"><span class="keyword">let</span> pickedCard1 = myDeck[pickCard(myDeck)];</span><br><span class="line"><span class="built_in">console</span>.log(<span class="string">"card: "</span> + pickedCard1.card + <span class="string">" of "</span> + pickedCard1.suit);</span><br><span class="line"></span><br><span class="line"><span class="keyword">let</span> pickedCard2 = pickCard(<span class="number">15</span>);</span><br><span class="line"><span class="built_in">console</span>.log(<span class="string">"card: "</span> + pickedCard2.card + <span class="string">" of "</span> + pickedCard2.suit);</span><br></pre></td></tr></table></figure></li></ul><p>这样改变后，重载的pickCard函数在调用的时候会进行正确的类型检查。</p><p>为了让编译器能够选择正确的检查类型，它与JavaScript里的处理流程相似。 它查找重载列表，尝试使用第一个重载定义。 如果匹配的话就使用这个。 因此，在定义重载的时候，一定要把最精确的定义放在最前面。</p><p>注意，function pickCard(x): any并不是重载列表的一部分，因此这里只有两个重载：一个是接收对象另一个接收数字。 以其它参数调用 pickCard会产生错误。</p><h1 id="后记"><a href="#后记" class="headerlink" title="后记"></a>后记</h1><ul><li>这个就是我学习Ts的第五天的笔记，欢迎更多的同行大哥指导交流</li><li><a href="https://yhf7.github.io/" target="_blank" rel="noopener">欢迎进入我的博客</a>：<a href="https://yhf7.github.io/" target="_blank" rel="noopener">https://yhf7.github.io/</a></li><li>如果有什么侵权的话，请及时添加小编微信以及qq也可以来告诉小编（905477376微信qq通用），谢谢！</li></ul>]]></content>
    
    <summary type="html">
    
      
      
        &lt;link rel=&quot;stylesheet&quot; class=&quot;aplayer-secondary-style-marker&quot; href=&quot;/assets/css/APlayer.min.css&quot;&gt;&lt;script src=&quot;/assets/js/APlayer.min.js&quot; cla
      
    
    </summary>
    
      <category term="TypeScript" scheme="http://yoursite.com/categories/TypeScript/"/>
    
    
      <category term="TypeScript 笔记" scheme="http://yoursite.com/tags/TypeScript-%E7%AC%94%E8%AE%B0/"/>
    
  </entry>
  
  <entry>
    <title>色表/色彩搭配网址大全</title>
    <link href="http://yoursite.com/2019/03/18/%E9%A2%9C%E8%89%B2%E6%90%9C%E9%9B%86/"/>
    <id>http://yoursite.com/2019/03/18/颜色搜集/</id>
    <published>2019-03-18T03:36:44.470Z</published>
    <updated>2019-03-18T03:39:18.328Z</updated>
    
    <content type="html"><![CDATA[<link rel="stylesheet" class="aplayer-secondary-style-marker" href="/assets/css/APlayer.min.css"><script src="/assets/js/APlayer.min.js" class="aplayer-secondary-script-marker"></script><h2 id="十六进制色表1-https-blog-csdn-net-jockerscolor-article-details-69255346"><a href="#十六进制色表1-https-blog-csdn-net-jockerscolor-article-details-69255346" class="headerlink" title="十六进制色表1:https://blog.csdn.net/jockerscolor/article/details/69255346"></a><a href="https://blog.csdn.net/jockerscolor/article/details/69255346" target="_blank" rel="noopener">十六进制色表1</a>:<a href="https://blog.csdn.net/jockerscolor/article/details/69255346" target="_blank" rel="noopener">https://blog.csdn.net/jockerscolor/article/details/69255346</a></h2><h2 id="十六进制色表2-https-blog-csdn-net-binglan520-article-details-56288524"><a href="#十六进制色表2-https-blog-csdn-net-binglan520-article-details-56288524" class="headerlink" title="十六进制色表2:https://blog.csdn.net/binglan520/article/details/56288524"></a><a href="https://blog.csdn.net/binglan520/article/details/56288524" target="_blank" rel="noopener">十六进制色表2</a>:<a href="https://blog.csdn.net/binglan520/article/details/56288524" target="_blank" rel="noopener">https://blog.csdn.net/binglan520/article/details/56288524</a></h2><h2 id="十六进制颜色码表图-https-encycolorpedia-cn"><a href="#十六进制颜色码表图-https-encycolorpedia-cn" class="headerlink" title="十六进制颜色码表图:https://encycolorpedia.cn/"></a><a href="https://encycolorpedia.cn/" target="_blank" rel="noopener">十六进制颜色码表图</a>:<a href="https://encycolorpedia.cn/" target="_blank" rel="noopener">https://encycolorpedia.cn/</a></h2><h2 id="颜色渐变-https-uigradients-com-Snapchat"><a href="#颜色渐变-https-uigradients-com-Snapchat" class="headerlink" title="颜色渐变:https://uigradients.com/#Snapchat"></a><a href="https://uigradients.com/#Snapchat" target="_blank" rel="noopener">颜色渐变</a>:<a href="https://uigradients.com/#Snapchat" target="_blank" rel="noopener">https://uigradients.com/#Snapchat</a></h2><h2 id="色彩搭配-https-www-webdesignrankings-com-resources-lolcolors"><a href="#色彩搭配-https-www-webdesignrankings-com-resources-lolcolors" class="headerlink" title="色彩搭配:https://www.webdesignrankings.com/resources/lolcolors/"></a><a href="https://www.webdesignrankings.com/resources/lolcolors/" target="_blank" rel="noopener">色彩搭配</a>:<a href="https://www.webdesignrankings.com/resources/lolcolors/" target="_blank" rel="noopener">https://www.webdesignrankings.com/resources/lolcolors/</a></h2>]]></content>
    
    <summary type="html">
    
      
      
        &lt;link rel=&quot;stylesheet&quot; class=&quot;aplayer-secondary-style-marker&quot; href=&quot;/assets/css/APlayer.min.css&quot;&gt;&lt;script src=&quot;/assets/js/APlayer.min.js&quot; cla
      
    
    </summary>
    
      <category term="Css" scheme="http://yoursite.com/categories/Css/"/>
    
    
      <category term="色彩搭配" scheme="http://yoursite.com/tags/%E8%89%B2%E5%BD%A9%E6%90%AD%E9%85%8D/"/>
    
  </entry>
  
  <entry>
    <title>今日份实战笔记</title>
    <link href="http://yoursite.com/2019/03/17/2019-03-17/"/>
    <id>http://yoursite.com/2019/03/17/2019-03-17/</id>
    <published>2019-03-17T14:19:06.632Z</published>
    <updated>2019-03-17T15:11:28.649Z</updated>
    
    <content type="html"><![CDATA[<link rel="stylesheet" class="aplayer-secondary-style-marker" href="/assets/css/APlayer.min.css"><script src="/assets/js/APlayer.min.js" class="aplayer-secondary-script-marker"></script><h1 id="前言"><a href="#前言" class="headerlink" title="前言"></a>前言</h1><ul><li>小程序课程表的一些需求</li><li>实现它所用到的一些知识</li><li>实现方案的决择</li><li>数组的截取/对象的对比/时间的封装/随机函数的运用</li></ul><h1 id="记录"><a href="#记录" class="headerlink" title="记录"></a>记录</h1><h2 id="动态生成颜色"><a href="#动态生成颜色" class="headerlink" title="动态生成颜色"></a>动态生成颜色</h2><ul><li>随机颜色生成有两种方法，一种是写一个数组把颜色放进去随机输出，另外一种就是用js动态生成</li><li>在数量不能控制时选择第二个</li><li>但是生成的颜色不好控制，有些不好看，最后我还是选择了方法一<h3 id="js实现随机生成颜色"><a href="#js实现随机生成颜色" class="headerlink" title="js实现随机生成颜色"></a>js实现随机生成颜色</h3></li><li>这个是本来想做一个课程表课程的变色</li><li>先看看收集了几个封装好的js函数</li><li>我比较喜欢方法3<figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">//颜色对象,方法1 rgba</span></span><br><span class="line"><span class="function"><span class="keyword">function</span> <span class="title">Color</span>(<span class="params"></span>)</span>&#123;</span><br><span class="line">    <span class="keyword">this</span>.r = <span class="built_in">Math</span>.floor(<span class="built_in">Math</span>.random()*<span class="number">255</span>);</span><br><span class="line">    <span class="keyword">this</span>.g = <span class="built_in">Math</span>.floor(<span class="built_in">Math</span>.random()*<span class="number">255</span>);</span><br><span class="line">    <span class="keyword">this</span>.b = <span class="built_in">Math</span>.floor(<span class="built_in">Math</span>.random()*<span class="number">255</span>);</span><br><span class="line">    <span class="keyword">this</span>.color = <span class="string">'rgba('</span>+ <span class="keyword">this</span>.r +<span class="string">','</span>+ <span class="keyword">this</span>.g +<span class="string">','</span>+ <span class="keyword">this</span>.b +<span class="string">',0.8)'</span>;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="comment">// 方法2 十六进制</span></span><br><span class="line"><span class="comment">// arguments这个在es5开始不能用了</span></span><br><span class="line"><span class="keyword">var</span> getRandomColor = <span class="function"><span class="keyword">function</span>(<span class="params"></span>)</span>&#123;    </span><br><span class="line">    <span class="keyword">return</span>  <span class="string">'#'</span> + (<span class="function"><span class="keyword">function</span>(<span class="params">color</span>)</span>&#123;    </span><br><span class="line">         <span class="keyword">return</span> (color +=  <span class="string">'0123456789abcdef'</span>[<span class="built_in">Math</span>.floor(<span class="built_in">Math</span>.random()*<span class="number">16</span>)])    </span><br><span class="line">         &amp;&amp; (color.length == <span class="number">6</span>) ?  color : <span class="built_in">arguments</span>.callee(color);    </span><br><span class="line">    &#125;)(<span class="string">''</span>);    </span><br><span class="line"> &#125; </span><br><span class="line"></span><br><span class="line"><span class="comment">// 方法3 还是十六进制</span></span><br><span class="line"><span class="keyword">var</span> getRandomColor = <span class="function"><span class="keyword">function</span>(<span class="params"></span>)</span>&#123;</span><br><span class="line">  <span class="keyword">return</span> <span class="string">'#'</span>+(<span class="string">'00000'</span>+ (<span class="built_in">Math</span>.random()*<span class="number">0x1000000</span>&lt;&lt;<span class="number">0</span>).toString(<span class="number">16</span>)).substr(<span class="number">-6</span>); </span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure></li></ul><hr><ul><li>当我配置到小程序里面我发现我自己错了，并不是说方法不好是生成出来的颜色并不是很好看</li></ul><h3 id="数组法动态生成颜色-数组截取-随机数"><a href="#数组法动态生成颜色-数组截取-随机数" class="headerlink" title="数组法动态生成颜色/数组截取/随机数"></a>数组法动态生成颜色/数组截取/随机数</h3><ul><li>平时都会用的比较多的Math数学方法，然而我还是不记得着么写随机数最后也是看js的案例</li><li>定义数组，随机获取，随机数，数组的截取，对象的比对，三目的运用<figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">// 记录颜色匹配对象</span></span><br><span class="line"><span class="keyword">let</span> colorObj = &#123;&#125;;</span><br><span class="line"><span class="comment">// 颜色</span></span><br><span class="line"><span class="keyword">let</span> orArrays = [<span class="string">"#FF3399"</span>, <span class="string">"#CC33FF"</span>, <span class="string">"#33CCFF"</span>, <span class="string">"#ff8936"</span>, <span class="string">"#00e500"</span>, <span class="string">"#1bd1a5"</span>, <span class="string">"#ff4e20"</span>, <span class="string">"#789262"</span>, <span class="string">"#70f3ff"</span>, <span class="string">"#c9dd22"</span>];</span><br><span class="line"><span class="comment">// 判断添加颜色,二维数组，使用两次foreach</span></span><br><span class="line">dCourse.forEach(<span class="function">(<span class="params">e</span>) =&gt;</span> &#123;</span><br><span class="line">    e.forEach(<span class="function">(<span class="params">data</span>) =&gt;</span> &#123;</span><br><span class="line">    <span class="keyword">if</span> (data.sites != <span class="string">""</span>) &#123;</span><br><span class="line">        <span class="comment">// 通过对象的判断，没有出现过的给一个随机颜色，相同的课程使用相同的颜色</span></span><br><span class="line">        <span class="comment">// 这里使用了随机数也是用了数组的截取splice</span></span><br><span class="line">        colorObj[data.name] ? data.Color = colorObj[data.name] : data.Color = colorObj[data.name] = orArrays.splice(<span class="built_in">Math</span>.round(<span class="built_in">Math</span>.random() * orArrays.length - <span class="number">1</span>), <span class="number">1</span>);</span><br><span class="line">    &#125;</span><br><span class="line">    &#125;)</span><br><span class="line">&#125;)</span><br></pre></td></tr></table></figure></li></ul><h2 id="使用封装好的时间函数写业务"><a href="#使用封装好的时间函数写业务" class="headerlink" title="使用封装好的时间函数写业务"></a>使用封装好的时间函数写业务</h2><ul><li>动态随机生成颜色每一次都替换，影响体验</li><li>所以把它固定起来给个限定时间</li><li>想要比对首先要把时间获取出来才好比对<figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br></pre></td><td class="code"><pre><span class="line"></span><br><span class="line"><span class="comment">/*</span></span><br><span class="line"><span class="comment">业务实现</span></span><br><span class="line"><span class="comment">*/</span></span><br><span class="line">get () &#123;</span><br><span class="line">    <span class="comment">// 今天</span></span><br><span class="line">    <span class="keyword">let</span> date = <span class="keyword">this</span>.GetDateStr(<span class="number">0</span>)</span><br><span class="line">    <span class="comment">// 缓存期限</span></span><br><span class="line">    <span class="keyword">let</span> time = wx.getStorageSync(<span class="string">"d_time"</span>)</span><br><span class="line">    </span><br><span class="line">    <span class="comment">// 判断第一次和过期清空颜色对象和过期时间</span></span><br><span class="line">    <span class="keyword">if</span> (time == <span class="string">""</span> || time &lt; date) &#123;</span><br><span class="line">        <span class="keyword">let</span> d_time = <span class="keyword">this</span>.GetDateStr(<span class="number">6</span>)</span><br><span class="line">        wx.setStorageSync(<span class="string">"colorObj"</span>, &#123;&#125;)</span><br><span class="line">        wx.setStorageSync(<span class="string">"d_time"</span>, d_time)</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="comment">// 记录颜色匹配对象，获取缓存中的数据</span></span><br><span class="line">    <span class="keyword">let</span> colorObj = wx.getStorageSync(<span class="string">"colorObj"</span>);</span><br><span class="line"></span><br><span class="line">    <span class="comment">// 判断添加颜色</span></span><br><span class="line">    dCourse.forEach(<span class="function">(<span class="params">e</span>) =&gt;</span> &#123;</span><br><span class="line">        e.forEach(<span class="function">(<span class="params">data</span>) =&gt;</span> &#123;</span><br><span class="line">        <span class="keyword">if</span> (data.sites != <span class="string">""</span>) &#123;</span><br><span class="line">            colorObj[data.name] ? data.Color = colorObj[data.name] : data.Color = colorObj[data.name] = orArrays.splice(<span class="built_in">Math</span>.round(<span class="built_in">Math</span>.random() * orArrays.length - <span class="number">1</span>), <span class="number">1</span>);</span><br><span class="line">        &#125;</span><br><span class="line">        &#125;)</span><br><span class="line">    &#125;)</span><br><span class="line"></span><br><span class="line">    <span class="comment">// 最后无论改没改都更新一下数据，也可以实在只要过期更新</span></span><br><span class="line">    wx.setStorageSync(<span class="string">"colorObj"</span>, colorObj);</span><br><span class="line">&#125;,</span><br><span class="line">    <span class="comment">/**</span></span><br><span class="line"><span class="comment">   * 时间封装</span></span><br><span class="line"><span class="comment">   * @param:</span></span><br><span class="line"><span class="comment">   * AddDayCount &#123;Number&#125; 天数 -1为昨日  0为今日 1为明日 以此类推</span></span><br><span class="line"><span class="comment">   * return y-m-d</span></span><br><span class="line"><span class="comment">   */</span></span><br><span class="line">  GetDateStr (AddDayCount) &#123;</span><br><span class="line">    <span class="keyword">var</span> dd = <span class="keyword">new</span> <span class="built_in">Date</span>();</span><br><span class="line">    dd.setDate(dd.getDate() + AddDayCount);<span class="comment">//获取AddDayCount天后的日期</span></span><br><span class="line">    <span class="keyword">var</span> y = dd.getFullYear();</span><br><span class="line">    <span class="keyword">var</span> m = dd.getMonth() + <span class="number">1</span>;<span class="comment">//获取当前月份的日期</span></span><br><span class="line">    <span class="keyword">var</span> d = dd.getDate();</span><br><span class="line">    <span class="keyword">return</span> y + <span class="string">"-"</span> + m + <span class="string">"-"</span> + d;</span><br><span class="line">  &#125;</span><br></pre></td></tr></table></figure></li></ul><h1 id="后记"><a href="#后记" class="headerlink" title="后记"></a>后记</h1><ul><li>这就是我今天的实战笔记，欢迎添加微信qq交流学习</li><li><a href="https://yhf7.github.io/" target="_blank" rel="noopener">欢迎进入我的博客</a>：<a href="https://yhf7.github.io/" target="_blank" rel="noopener">https://yhf7.github.io/</a></li><li>如果有什么侵权的话，请及时添加小编微信以及qq也可以来告诉小编（905477376微信qq通用），谢谢！</li></ul>]]></content>
    
    <summary type="html">
    
      
      
        &lt;link rel=&quot;stylesheet&quot; class=&quot;aplayer-secondary-style-marker&quot; href=&quot;/assets/css/APlayer.min.css&quot;&gt;&lt;script src=&quot;/assets/js/APlayer.min.js&quot; cla
      
    
    </summary>
    
      <category term="JavaScript" scheme="http://yoursite.com/categories/JavaScript/"/>
    
    
      <category term="js笔记" scheme="http://yoursite.com/tags/js%E7%AC%94%E8%AE%B0/"/>
    
  </entry>
  
  <entry>
    <title>解决朋友问的拖拽文件后拖拽图片无法显示</title>
    <link href="http://yoursite.com/2019/03/17/h5%E5%A4%9A%E6%AC%A1%E6%8B%96%E6%8B%BD%E6%98%BE%E7%A4%BA/"/>
    <id>http://yoursite.com/2019/03/17/h5多次拖拽显示/</id>
    <published>2019-03-17T13:35:29.405Z</published>
    <updated>2019-03-17T14:18:14.178Z</updated>
    
    <content type="html"><![CDATA[<link rel="stylesheet" class="aplayer-secondary-style-marker" href="/assets/css/APlayer.min.css"><script src="/assets/js/APlayer.min.js" class="aplayer-secondary-script-marker"></script><h1 id="前言"><a href="#前言" class="headerlink" title="前言"></a>前言</h1><ul><li>这是一个朋友的作业，做一个图片与文件拖拽显示页面的案例</li><li>主要问题是拖了文字后再拖拽图片报错无法显示</li></ul><h1 id="bug-ko之旅"><a href="#bug-ko之旅" class="headerlink" title="bug ko之旅"></a>bug ko之旅</h1><h3 id="错误排查-（看报错）"><a href="#错误排查-（看报错）" class="headerlink" title="错误排查 （看报错）"></a>错误排查 （看报错）</h3><ul><li>知道有报错我们就直接操作拖文本再拖图片</li><li>果然出现了错误，具体看图片：<br><img src="/js/t1.png" alt="错1"></li></ul><hr><ul><li>查看结构（证实经验论证）<br><img src="/js/t2.png" alt="错2"></li></ul><h3 id="代码排查-（找出错误源）"><a href="#代码排查-（找出错误源）" class="headerlink" title="代码排查 （找出错误源）"></a>代码排查 （找出错误源）</h3><ul><li>打开代码先找到文本的代码，因为是文本后出错的</li><li>为什么不是看img的操作先，因为连续的图片赋值是没有问题</li><li>是在文件后才会出错，所以查看一下文本的操作</li></ul><p><img src="/js/t3.png" alt="错3"></p><h3 id="解决方案"><a href="#解决方案" class="headerlink" title="解决方案"></a>解决方案</h3><ul><li>本来是想直接改变文本的赋值的，但是想到还是需要覆盖所有的内容所以我改变了</li><li>选择改变img的赋值那一段</li></ul><hr><h4 id="解决1"><a href="#解决1" class="headerlink" title="解决1"></a>解决1</h4><ul><li>清空div内容，创建添加节点<br><img src="/js/t4.png" alt="解1"></li></ul><hr><h4 id="解决2"><a href="#解决2" class="headerlink" title="解决2"></a>解决2</h4><ul><li>对第一版的升级</li><li>个人觉得这样可以提升性能</li><li>避免每一次都操作dom创建节点<br><img src="/js/t5.png" alt="解2"></li></ul><h1 id="后记"><a href="#后记" class="headerlink" title="后记"></a>后记</h1><ul><li>这就是我对h5案例编写报错的查看、排查、解决，或许我这个不是最优的办法你的比我更好，欢迎添加微信qq交流学习</li><li><a href="https://yhf7.github.io/" target="_blank" rel="noopener">欢迎进入我的博客</a>：<a href="https://yhf7.github.io/" target="_blank" rel="noopener">https://yhf7.github.io/</a></li><li>如果有什么侵权的话，请及时添加小编微信以及qq也可以来告诉小编（905477376微信qq通用），谢谢！</li></ul>]]></content>
    
    <summary type="html">
    
      
      
        &lt;link rel=&quot;stylesheet&quot; class=&quot;aplayer-secondary-style-marker&quot; href=&quot;/assets/css/APlayer.min.css&quot;&gt;&lt;script src=&quot;/assets/js/APlayer.min.js&quot; cla
      
    
    </summary>
    
      <category term="JavaScript" scheme="http://yoursite.com/categories/JavaScript/"/>
    
    
      <category term="js笔记/案例" scheme="http://yoursite.com/tags/js%E7%AC%94%E8%AE%B0-%E6%A1%88%E4%BE%8B/"/>
    
  </entry>
  
  <entry>
    <title>Android 学习笔记 组件/用法/绑定（学校课程）</title>
    <link href="http://yoursite.com/2019/03/16/%E5%A4%A7%E4%BA%8C%E4%B8%8BAndroid%20%E7%BB%84%E4%BB%B6/"/>
    <id>http://yoursite.com/2019/03/16/大二下Android 组件/</id>
    <published>2019-03-16T00:08:14.042Z</published>
    <updated>2019-03-27T11:34:37.860Z</updated>
    
    <content type="html"><![CDATA[<link rel="stylesheet" class="aplayer-secondary-style-marker" href="/assets/css/APlayer.min.css"><script src="/assets/js/APlayer.min.js" class="aplayer-secondary-script-marker"></script><h1 id="前言"><a href="#前言" class="headerlink" title="前言"></a>前言</h1><ul><li><a href="https://github.com/YHF7/Android" target="_blank" rel="noopener">案例存放地</a>:<a href="https://github.com/YHF7/Android" target="_blank" rel="noopener">https://github.com/YHF7/Android</a></li><li>使用的软件是 Android Studio</li></ul><h1 id="组件"><a href="#组件" class="headerlink" title="组件"></a>组件</h1><h2 id="Button-TextView"><a href="#Button-TextView" class="headerlink" title="Button/TextView"></a>Button/TextView</h2><ul><li>id</li><li>text 文本</li><li>textSize 大小</li><li>dp 为单位</li><li>background 背景色<figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><span class="line">&lt;Button</span><br><span class="line">        android:id=<span class="string">"@+id/btn1"</span></span><br><span class="line">        android:layout_width=<span class="string">"wrap_content"</span></span><br><span class="line">        android:layout_height=<span class="string">"wrap_content"</span></span><br><span class="line">        android:textSize=<span class="string">"30dp"</span></span><br><span class="line">        android:background=<span class="string">"#00f"</span></span><br><span class="line">        android:text=<span class="string">"2"</span>/&gt;</span><br></pre></td></tr></table></figure></li></ul><h2 id="EditText-文本字段"><a href="#EditText-文本字段" class="headerlink" title="EditText 文本字段"></a>EditText 文本字段</h2><ul><li>这个用法和上面的都是一样</li><li>这里输入文字是用hint不是text</li><li>不过可以使用inputType属性控制 <figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line">&lt;EditText</span><br><span class="line">    android:id=<span class="string">"@+id/edit1"</span></span><br><span class="line">    android:layout_width=<span class="string">"wrap_content"</span></span><br><span class="line">    android:layout_height=<span class="string">"wrap_content"</span></span><br><span class="line">    android:hint=<span class="string">"请输入密码"</span></span><br><span class="line">    android:inputType=<span class="string">"textPassword"</span>/&gt;</span><br></pre></td></tr></table></figure></li></ul><h2 id="AutoCompleteTextView-自动提示"><a href="#AutoCompleteTextView-自动提示" class="headerlink" title="AutoCompleteTextView 自动提示"></a>AutoCompleteTextView 自动提示</h2><ul><li>用法基本相同</li><li>completionHint 默认显示</li><li>completionThreshold 最少输入多少个字开始搜索<figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><span class="line">&lt;AutoCompleteTextView</span><br><span class="line">        android:id=<span class="string">"@+id/act"</span></span><br><span class="line">        android:layout_width=<span class="string">"150dp"</span></span><br><span class="line">        android:layout_height=<span class="string">"wrap_content"</span></span><br><span class="line">        android:completionHint=<span class="string">"请输入搜索内容"</span></span><br><span class="line">        android:completionThreshold=<span class="string">"1"</span></span><br><span class="line">        /&gt;</span><br></pre></td></tr></table></figure></li></ul><h1 id="绑定组件属性控制-（app-src-main-java-com-example-yhf-tablelayout-TableLayout）后面那一段就很的项目名有关联了"><a href="#绑定组件属性控制-（app-src-main-java-com-example-yhf-tablelayout-TableLayout）后面那一段就很的项目名有关联了" class="headerlink" title="绑定组件属性控制 （app/src/main/java/com.example.yhf.tablelayout/TableLayout）后面那一段就很的项目名有关联了"></a>绑定组件属性控制 （app/src/main/java/com.example.yhf.tablelayout/TableLayout）后面那一段就很的项目名有关联了</h1><ul><li>每一个项目里面都会有一个控制这个程序的</li><li>我们现在来吧上面几个定义的组件给他绑定一下</li></ul><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br></pre></td><td class="code"><pre><span class="line"></span><br><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">TableLayout</span> <span class="keyword">extends</span> <span class="title">AppCompatActivity</span> </span>&#123;</span><br><span class="line"></span><br><span class="line">    <span class="comment">// 1. 声明控件对象 最好是和自己定义的id相同</span></span><br><span class="line">    TextView text1;</span><br><span class="line">    EditText edit1;</span><br><span class="line">    AutoCompleteTextView act;</span><br><span class="line"></span><br><span class="line">    <span class="meta">@Override</span></span><br><span class="line">    <span class="function"><span class="keyword">protected</span> <span class="keyword">void</span> <span class="title">onCreate</span><span class="params">(Bundle savedInstanceState)</span> </span>&#123;</span><br><span class="line">        <span class="keyword">super</span>.onCreate(savedInstanceState);</span><br><span class="line"></span><br><span class="line">        <span class="comment">// 这个也很关键，这个表示设置拿一个视图文件</span></span><br><span class="line">        <span class="comment">// 我这个就是app/src/main/res/layout.dem03.xml</span></span><br><span class="line">        <span class="comment">// R为res，省去了前面的部分</span></span><br><span class="line">        setContentView(R.layout.demo03);</span><br><span class="line"></span><br><span class="line">        <span class="comment">//2. 通过id建立关系</span></span><br><span class="line">        <span class="comment">// 组件名通过id搜索 R里面的id名为text1</span></span><br><span class="line">        <span class="comment">// R说的就是res</span></span><br><span class="line">        text1=(TextView)findViewById(R.id.text1);</span><br><span class="line">        edit1=(EditText)findViewById(R.id.edit1);</span><br><span class="line">        act=(AutoCompleteTextView)findViewById(R.id.act);</span><br><span class="line"></span><br><span class="line">        <span class="comment">// 定义一个数组</span></span><br><span class="line">        String[] data = <span class="keyword">new</span> String[]&#123;<span class="string">"China"</span>,<span class="string">"Chiness"</span>,<span class="string">"Check"</span>&#125;;</span><br><span class="line">        <span class="comment">// 遍历到这个组件里面</span></span><br><span class="line">        ArrayAdapter&lt;String&gt; adapter = <span class="keyword">new</span> ArrayAdapter&lt;String&gt;(<span class="keyword">this</span>,android.R.layout.simple_list_item_1,data);</span><br><span class="line">        <span class="comment">// 最后添加到id里面</span></span><br><span class="line">        act.setAdapter(adapter);</span><br><span class="line"></span><br><span class="line"><span class="comment">//        edit1.setText("我是输入的数据");</span></span><br><span class="line">        <span class="comment">// 测试输出用的</span></span><br><span class="line">        Log.i(<span class="string">"abc"</span>, <span class="string">"onCreate: dddd"</span>);</span><br><span class="line"></span><br><span class="line">        <span class="comment">// 改变text1的文本，背景色，字体大小</span></span><br><span class="line">        text1.setText(<span class="string">"你个菜逼"</span>);</span><br><span class="line">        text1.setTextColor(Color.CYAN);</span><br><span class="line">        text1.setTextSize(<span class="number">30</span>);</span><br><span class="line">        </span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h1 id="CheckBox复选框"><a href="#CheckBox复选框" class="headerlink" title="CheckBox复选框"></a>CheckBox复选框</h1><ul><li>CheckBox和Button一样，也是一种古老的控件，它的优点在于，不用用户去填写具体的信息，只需轻轻点击，缺点在于只有“是”和“否”两种情况，</li><li>Checked属性是CheckBox最重要的属性之一，改变它的方式有三种：<br>1、XML中申明 2、代码动态改变 3、用户触摸<figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><span class="line">&lt;CheckBox </span><br><span class="line">       android:id=<span class="string">"@+id/cb"</span></span><br><span class="line">       android:layout_width=<span class="string">"wrap_content"</span> </span><br><span class="line">       android:layout_height=<span class="string">"wrap_content"</span></span><br><span class="line">       android:checked=<span class="string">"false"</span></span><br><span class="line">       android:text=<span class="string">"已婚"</span></span><br><span class="line">       /&gt;</span><br></pre></td></tr></table></figure></li></ul><hr><p>它的改变将会触发OnCheckedChange事件，而您可以对应的使用OnCheckedChangeListener监听器来监听这个事件，<br><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">//获取CheckBox实例</span></span><br><span class="line">CheckBox cb = (CheckBox)<span class="keyword">this</span>.findViewById(R.id.cb);</span><br><span class="line"><span class="comment">//绑定监听器</span></span><br><span class="line">cb.setOnCheckedChangeListener(<span class="keyword">new</span> OnCheckedChangeListener() &#123;</span><br><span class="line">            </span><br><span class="line">            <span class="meta">@Override</span></span><br><span class="line">            <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">onCheckedChanged</span><span class="params">(CompoundButton arg0, <span class="keyword">boolean</span> arg1)</span> </span>&#123;</span><br><span class="line">                <span class="comment">// TODO Auto-generated method stub</span></span><br><span class="line">                Toast.makeText(MyActivity.<span class="keyword">this</span>, <span class="string">"选中了"</span>:<span class="string">"取消了选中"</span> , Toast.LENGTH_LONG).show();</span><br><span class="line">            &#125;</span><br><span class="line">        &#125;);</span><br></pre></td></tr></table></figure></p><h3 id="选择显示小案例"><a href="#选择显示小案例" class="headerlink" title="选择显示小案例"></a>选择显示小案例</h3><ul><li>页面<br><img src="/Android/a2.png" alt="/Android"></li><li>控制<br><img src="/Android/a3.png" alt="/Android"></li><li>效果<br><img src="/Android/a1.png" alt="/Android"></li></ul>]]></content>
    
    <summary type="html">
    
      
      
        &lt;link rel=&quot;stylesheet&quot; class=&quot;aplayer-secondary-style-marker&quot; href=&quot;/assets/css/APlayer.min.css&quot;&gt;&lt;script src=&quot;/assets/js/APlayer.min.js&quot; cla
      
    
    </summary>
    
      <category term="Android" scheme="http://yoursite.com/categories/Android/"/>
    
    
      <category term="Android 笔记" scheme="http://yoursite.com/tags/Android-%E7%AC%94%E8%AE%B0/"/>
    
  </entry>
  
  <entry>
    <title>Js回顾 温故而知新 可以为师矣</title>
    <link href="http://yoursite.com/2019/03/16/%E5%9B%9E%E9%A1%BEjs/"/>
    <id>http://yoursite.com/2019/03/16/回顾js/</id>
    <published>2019-03-15T16:25:58.486Z</published>
    <updated>2019-03-16T04:27:07.508Z</updated>
    
    <content type="html"><![CDATA[<link rel="stylesheet" class="aplayer-secondary-style-marker" href="/assets/css/APlayer.min.css"><script src="/assets/js/APlayer.min.js" class="aplayer-secondary-script-marker"></script><h1 id="前言"><a href="#前言" class="headerlink" title="前言"></a>前言</h1><ul><li>每一次的回头从会看到不同的东西</li><li>不同的体会，更加深入的理解</li></ul><h1 id="先看看-定时器延时每一秒输出一个数字0-4-（看到别人的公众号发过）"><a href="#先看看-定时器延时每一秒输出一个数字0-4-（看到别人的公众号发过）" class="headerlink" title="先看看 定时器延时每一秒输出一个数字0-4 （看到别人的公众号发过）"></a>先看看 定时器延时每一秒输出一个数字0-4 （看到别人的公众号发过）</h1><ul><li>setTimeout 是一个延时执行的定时器（异步）</li><li>在var中使用，因为作用域相同所以最后赋值都是一样</li><li>let的好处体现</li><li>闭包</li><li>async await （异步中使用同步方法）</li></ul><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">// 错误用例</span></span><br><span class="line"><span class="comment">// 计算机的执行速度是非常快的，延时1秒早全部执行完了</span></span><br><span class="line"><span class="comment">// var 作用域相同，循环完后i的值为6，最后才输出所以为6</span></span><br><span class="line"><span class="keyword">for</span> (<span class="keyword">var</span> i = <span class="number">0</span>; i &lt; <span class="number">5</span>; i++) &#123;</span><br><span class="line">    setTimeout(<span class="function"><span class="params">()</span> =&gt;</span> &#123;</span><br><span class="line">        <span class="built_in">console</span>.log(<span class="keyword">new</span> <span class="built_in">Date</span>,i)</span><br><span class="line">    &#125;, <span class="number">1000</span>);</span><br><span class="line">&#125;</span><br><span class="line"><span class="comment">// 执行结果</span></span><br><span class="line"><span class="number">2019</span><span class="number">-03</span><span class="number">-15</span>T07:<span class="number">18</span>:<span class="number">30.917</span>Z <span class="number">5</span></span><br><span class="line"><span class="number">2019</span><span class="number">-03</span><span class="number">-15</span>T07:<span class="number">18</span>:<span class="number">30.921</span>Z <span class="number">5</span></span><br><span class="line"><span class="number">2019</span><span class="number">-03</span><span class="number">-15</span>T07:<span class="number">18</span>:<span class="number">30.922</span>Z <span class="number">5</span></span><br><span class="line"><span class="number">2019</span><span class="number">-03</span><span class="number">-15</span>T07:<span class="number">18</span>:<span class="number">30.922</span>Z <span class="number">5</span></span><br><span class="line"><span class="number">2019</span><span class="number">-03</span><span class="number">-15</span>T07:<span class="number">18</span>:<span class="number">30.922</span>Z <span class="number">5</span></span><br></pre></td></tr></table></figure><h2 id="解决1-熟悉es6的都知道-let是个好东西"><a href="#解决1-熟悉es6的都知道-let是个好东西" class="headerlink" title="解决1 熟悉es6的都知道 let是个好东西"></a>解决1 熟悉es6的都知道 let是个好东西</h2><ul><li>只要把var改let这个问题就解决了</li><li>因为let的i每一次都会生成一个作用域相隔开<figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">for</span> (<span class="keyword">let</span> i = <span class="number">0</span>; i &lt; <span class="number">5</span>; i++) &#123;</span><br><span class="line">    setTimeout(<span class="function"><span class="params">()</span> =&gt;</span> &#123;</span><br><span class="line">        <span class="built_in">console</span>.log(<span class="keyword">new</span> <span class="built_in">Date</span>,i)</span><br><span class="line">    &#125;, <span class="number">1000</span>);</span><br><span class="line">&#125;</span><br><span class="line"><span class="comment">// 执行结果</span></span><br><span class="line"><span class="number">2019</span><span class="number">-03</span><span class="number">-15</span>T07:<span class="number">19</span>:<span class="number">21.106</span>Z <span class="number">0</span></span><br><span class="line"><span class="number">2019</span><span class="number">-03</span><span class="number">-15</span>T07:<span class="number">19</span>:<span class="number">21.110</span>Z <span class="number">1</span></span><br><span class="line"><span class="number">2019</span><span class="number">-03</span><span class="number">-15</span>T07:<span class="number">19</span>:<span class="number">21.111</span>Z <span class="number">2</span></span><br><span class="line"><span class="number">2019</span><span class="number">-03</span><span class="number">-15</span>T07:<span class="number">19</span>:<span class="number">21.111</span>Z <span class="number">3</span></span><br><span class="line"><span class="number">2019</span><span class="number">-03</span><span class="number">-15</span>T07:<span class="number">19</span>:<span class="number">21.111</span>Z <span class="number">4</span></span><br></pre></td></tr></table></figure></li></ul><h2 id="解决2-熟悉闭包的同学-这个也不是问题"><a href="#解决2-熟悉闭包的同学-这个也不是问题" class="headerlink" title="解决2 熟悉闭包的同学 这个也不是问题"></a>解决2 熟悉闭包的同学 这个也不是问题</h2><ul><li>每一次作为数据传进来不就可以了这也是一个不错的方法<figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">for</span> (<span class="keyword">var</span> i = <span class="number">0</span>; i &lt; <span class="number">5</span>; i++) &#123;</span><br><span class="line">    (<span class="function"><span class="params">j</span> =&gt;</span> &#123;</span><br><span class="line">        setTimeout(<span class="function"><span class="params">()</span> =&gt;</span> &#123;</span><br><span class="line">            <span class="built_in">console</span>.log(j);</span><br><span class="line">        &#125;, <span class="number">1000</span>);    </span><br><span class="line">    &#125;)(i)</span><br><span class="line">&#125;</span><br><span class="line"><span class="comment">// 执行结果</span></span><br><span class="line"><span class="number">2019</span><span class="number">-03</span><span class="number">-15</span>T07:<span class="number">21</span>:<span class="number">58.003</span>Z <span class="number">0</span></span><br><span class="line"><span class="number">2019</span><span class="number">-03</span><span class="number">-15</span>T07:<span class="number">21</span>:<span class="number">58.007</span>Z <span class="number">1</span></span><br><span class="line"><span class="number">2019</span><span class="number">-03</span><span class="number">-15</span>T07:<span class="number">21</span>:<span class="number">58.007</span>Z <span class="number">2</span></span><br><span class="line"><span class="number">2019</span><span class="number">-03</span><span class="number">-15</span>T07:<span class="number">21</span>:<span class="number">58.007</span>Z <span class="number">3</span></span><br><span class="line"><span class="number">2019</span><span class="number">-03</span><span class="number">-15</span>T07:<span class="number">21</span>:<span class="number">58.007</span>Z <span class="number">4</span></span><br></pre></td></tr></table></figure></li></ul><hr><h3 id="看看上面好像真的成功的但是再看看输出的时间其实还是未能实现每一秒输出一个，所有的数据都是在同一时间被执行出来，那能不能解决呢？看看下一个方法"><a href="#看看上面好像真的成功的但是再看看输出的时间其实还是未能实现每一秒输出一个，所有的数据都是在同一时间被执行出来，那能不能解决呢？看看下一个方法" class="headerlink" title="看看上面好像真的成功的但是再看看输出的时间其实还是未能实现每一秒输出一个，所有的数据都是在同一时间被执行出来，那能不能解决呢？看看下一个方法"></a>看看上面好像真的成功的但是再看看输出的时间其实还是未能实现每一秒输出一个，所有的数据都是在同一时间被执行出来，那能不能解决呢？看看下一个方法</h3><h2 id="解决3-Es7-async-await-实现同步（把异步的定时器限制住）"><a href="#解决3-Es7-async-await-实现同步（把异步的定时器限制住）" class="headerlink" title="解决3 Es7 async await 实现同步（把异步的定时器限制住）"></a>解决3 Es7 async await 实现同步（把异步的定时器限制住）</h2><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">const</span> sleep = <span class="function">(<span class="params">timeountMS</span>) =&gt;</span> <span class="keyword">new</span> <span class="built_in">Promise</span>(<span class="function">(<span class="params">resolve</span>) =&gt;</span> &#123;</span><br><span class="line">    setTimeout(resolve, timeountMS);</span><br><span class="line">&#125;);</span><br><span class="line"> </span><br><span class="line">(<span class="keyword">async</span> () =&gt; &#123;  <span class="comment">// 声明即执行的 async 函数表达式</span></span><br><span class="line">    <span class="keyword">for</span> (<span class="keyword">var</span> i = <span class="number">0</span>; i &lt; <span class="number">5</span>; i++) &#123;</span><br><span class="line">        <span class="comment">// await 同步操作阻止了要等待</span></span><br><span class="line">        <span class="keyword">await</span> sleep(<span class="number">1000</span>);</span><br><span class="line">        <span class="built_in">console</span>.log(<span class="keyword">new</span> <span class="built_in">Date</span>, i);</span><br><span class="line">    &#125;</span><br><span class="line"> </span><br><span class="line">    <span class="keyword">await</span> sleep(<span class="number">1000</span>);</span><br><span class="line">    <span class="built_in">console</span>.log(<span class="keyword">new</span> <span class="built_in">Date</span>, i);</span><br><span class="line">&#125;)();</span><br><span class="line"><span class="comment">// 执行结果</span></span><br><span class="line"><span class="number">2019</span><span class="number">-03</span><span class="number">-15</span>T07:<span class="number">23</span>:<span class="number">21.193</span>Z <span class="number">0</span></span><br><span class="line"><span class="number">2019</span><span class="number">-03</span><span class="number">-15</span>T07:<span class="number">23</span>:<span class="number">22.198</span>Z <span class="number">1</span></span><br><span class="line"><span class="number">2019</span><span class="number">-03</span><span class="number">-15</span>T07:<span class="number">23</span>:<span class="number">23.202</span>Z <span class="number">2</span></span><br><span class="line"><span class="number">2019</span><span class="number">-03</span><span class="number">-15</span>T07:<span class="number">23</span>:<span class="number">24.207</span>Z <span class="number">3</span></span><br><span class="line"><span class="number">2019</span><span class="number">-03</span><span class="number">-15</span>T07:<span class="number">23</span>:<span class="number">25.207</span>Z <span class="number">4</span></span><br><span class="line"><span class="number">2019</span><span class="number">-03</span><span class="number">-15</span>T07:<span class="number">23</span>:<span class="number">26.208</span>Z <span class="number">5</span></span><br></pre></td></tr></table></figure><h1 id="数组去重复-（每一次看别人写的都比自己写的好学习起来）"><a href="#数组去重复-（每一次看别人写的都比自己写的好学习起来）" class="headerlink" title="数组去重复 （每一次看别人写的都比自己写的好学习起来）"></a>数组去重复 （每一次看别人写的都比自己写的好学习起来）</h1><ul><li>三目运算符运用</li><li>forEach</li><li>concat 数组合并</li><li>…arr es6解构<figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">// 多数组合并去重复</span></span><br><span class="line">test = <span class="function">(<span class="params">arr, ...arr2</span>) =&gt;</span> &#123;</span><br><span class="line">    <span class="comment">// 先是合并数组</span></span><br><span class="line">    <span class="keyword">let</span> array = arr.concat(...arr2);</span><br><span class="line">    <span class="comment">// 定义一个对象存储</span></span><br><span class="line">    <span class="keyword">let</span> obj = &#123;&#125;</span><br><span class="line">    <span class="comment">// 新数组</span></span><br><span class="line">    <span class="keyword">let</span> result = []</span><br><span class="line">    <span class="comment">// 循环遍历</span></span><br><span class="line">    array.forEach(<span class="function"><span class="params">item</span> =&gt;</span> &#123;</span><br><span class="line">        <span class="comment">// 三目运算符  判断是对象中存有，没有就吧值设为真 并且添加如数组</span></span><br><span class="line">        <span class="comment">// 这里为什么要是为真呢，如果出现数据是false的时候依然使用数据去存储这样就会出现问题了</span></span><br><span class="line">        obj[item] ? <span class="string">''</span> : (obj[item] = <span class="literal">true</span>) &amp;&amp; result.push(item)</span><br><span class="line">    &#125;)</span><br><span class="line">    <span class="keyword">return</span> result</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="keyword">let</span> sum = test([<span class="number">1</span>, <span class="number">2</span>, <span class="number">3</span>], [<span class="number">5</span>, <span class="number">6</span>,<span class="number">2</span>, <span class="number">3</span>], [<span class="number">4</span>, <span class="number">5</span>,<span class="number">6</span>, <span class="number">2</span>])</span><br><span class="line"><span class="built_in">console</span>.log(sum);</span><br><span class="line"><span class="comment">// 输出结果</span></span><br><span class="line">[ <span class="number">1</span>, <span class="number">2</span>, <span class="number">3</span>, <span class="number">5</span>, <span class="number">6</span>, <span class="number">4</span> ]</span><br></pre></td></tr></table></figure></li></ul><h2 id="Es6版-set-Map"><a href="#Es6版-set-Map" class="headerlink" title="Es6版 set Map"></a>Es6版 set Map</h2><ul><li>随着 ES6 的到来，去重的方法又有了进展，比如我们可以使用 Set 和 Map 数据结构，以 Set 为例，ES6 提供了新的数据结构 Set。它类似于数组，但是成员的值都是唯一的，没有重复的值</li></ul><ol><li><p>set</p><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">var</span> array = [<span class="number">1</span>, <span class="number">2</span>, <span class="number">1</span>, <span class="number">1</span>, <span class="string">'1'</span>];</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">function</span> <span class="title">unique</span>(<span class="params">array</span>) </span>&#123;</span><br><span class="line">   <span class="keyword">return</span> <span class="built_in">Array</span>.from(<span class="keyword">new</span> <span class="built_in">Set</span>(array));</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="built_in">console</span>.log(unique(array)); <span class="comment">// [1, 2, "1"]</span></span><br><span class="line"></span><br><span class="line"><span class="comment">// 再次简化</span></span><br><span class="line"><span class="function"><span class="keyword">function</span> <span class="title">unique</span>(<span class="params">array</span>) </span>&#123;</span><br><span class="line">    <span class="keyword">return</span> [...new <span class="built_in">Set</span>(array)];</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="comment">// 再简化</span></span><br><span class="line"><span class="keyword">var</span> unique = <span class="function">(<span class="params">a</span>) =&gt;</span> [...new <span class="built_in">Set</span>(a)]</span><br></pre></td></tr></table></figure></li><li><p>Map</p><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line"><span class="function"><span class="keyword">function</span> <span class="title">unique</span> (<span class="params">arr</span>) </span>&#123;</span><br><span class="line">    <span class="keyword">const</span> seen = <span class="keyword">new</span> <span class="built_in">Map</span>()</span><br><span class="line">    <span class="keyword">return</span> arr.filter(<span class="function">(<span class="params">a</span>) =&gt;</span> !seen.has(a) &amp;&amp; seen.set(a, <span class="number">1</span>))</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure></li></ol><h1 id="Promise-异步-回调地狱-async-await"><a href="#Promise-异步-回调地狱-async-await" class="headerlink" title="Promise 异步/回调地狱/async await"></a>Promise 异步/回调地狱/async await</h1><h2 id="Promise"><a href="#Promise" class="headerlink" title="Promise"></a>Promise</h2><ul><li>promise里面包含两个参数res,rej我喜欢用简写,一个是成功回调一个是失败回调</li><li>所以在我们调用时也是要输入两个回调函数的，一个成功执行，一个失败执行<figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">// 定义promisey异步函数</span></span><br><span class="line"><span class="keyword">const</span> sleep = <span class="function">(<span class="params">test</span>) =&gt;</span> <span class="keyword">new</span> <span class="built_in">Promise</span>(<span class="function">(<span class="params">res,rej</span>) =&gt;</span> &#123;</span><br><span class="line">    <span class="keyword">if</span> (test == <span class="number">1</span>) &#123;</span><br><span class="line">        res(<span class="string">'成功'</span>)</span><br><span class="line">    &#125; <span class="keyword">else</span> <span class="keyword">if</span> (test == <span class="number">0</span>) &#123;</span><br><span class="line">        res(<span class="string">'再次成功'</span>)</span><br><span class="line">    &#125; <span class="keyword">else</span> &#123;</span><br><span class="line">        rej(<span class="string">'失败了兄弟'</span>)</span><br><span class="line">    &#125;</span><br><span class="line">&#125;)</span><br><span class="line"></span><br><span class="line"><span class="comment">// 使用</span></span><br><span class="line"><span class="comment">// 调用传入参数 .then中有可以写入两个函数前面为成功的调用后面为失败时的调用</span></span><br><span class="line"><span class="comment">// 和上面是一一对应的</span></span><br><span class="line"><span class="comment">// 前面的参数等于 test  后面...then</span></span><br><span class="line">sleep(<span class="number">1</span>).then(<span class="function">(<span class="params">data</span>) =&gt;</span> &#123;</span><br><span class="line">    <span class="built_in">console</span>.log(data); <span class="comment">// 成功时获取到的数据</span></span><br><span class="line">&#125;, (err) =&gt; &#123;</span><br><span class="line">    <span class="built_in">console</span>.log(err); <span class="comment">// 错误时获取到的错误返回</span></span><br><span class="line">&#125;)</span><br><span class="line"><span class="comment">// 输出结果</span></span><br><span class="line">成功</span><br></pre></td></tr></table></figure></li></ul><h2 id="Promise-回调地狱"><a href="#Promise-回调地狱" class="headerlink" title="Promise 回调地狱"></a>Promise 回调地狱</h2><ul><li>很多时候我们都想在这个执行完毕后再去执行另外一个操作</li><li>在不影响后面的操作时，我们想到了使用Promise 异步</li><li>但是我们还不满足我们想在这个操作执行完毕再去执行另外一个操作</li><li>这个时候我们就会一个套一个的函数去写，这样就会似得代码非常的繁琐</li><li>Promise中实现回调地狱解决这个问题</li></ul><hr><ul><li>升级上面这个回调方法，实现回调地狱</li><li>在.then的后面再加.then方法就可以了</li><li>可以无限的去套用</li><li>虽然每个都有err但是只是输出报错没有去处理，回调地狱还是会往下走</li><li>后面的都会出错<figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br></pre></td><td class="code"><pre><span class="line">sleep(<span class="number">1</span>).then(<span class="function">(<span class="params">data</span>) =&gt;</span> &#123;</span><br><span class="line">    <span class="built_in">console</span>.log(data); <span class="comment">// 成功时获取到的数据</span></span><br><span class="line">    <span class="keyword">return</span> sleep(<span class="number">2</span>) <span class="comment">// 再次的执行异步函数</span></span><br><span class="line">&#125;, (err) =&gt; &#123;</span><br><span class="line">    <span class="built_in">console</span>.log(err); <span class="comment">// 错误时获取到的错误返回</span></span><br><span class="line">&#125;).then(<span class="function">(<span class="params">data</span>)=&gt;</span> &#123; <span class="comment">// 继续用.then接受</span></span><br><span class="line">    <span class="built_in">console</span>.log(data) <span class="comment">// 再次成功</span></span><br><span class="line">&#125;,(err) =&gt; &#123;</span><br><span class="line">    <span class="built_in">console</span>.log(err)</span><br><span class="line">&#125;)</span><br></pre></td></tr></table></figure></li></ul><hr><ul><li>catch属性解决你一切烦恼也不需要写那么多次err的错误处理</li><li>catch 的作用： 如果前面有任何的 Promise 执行失败，则立即终止所有 promise 的执行，并 马上进入 catch 去处理 Promise中 抛出的异常；<figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><span class="line">sleep(<span class="number">1</span>).then(<span class="function">(<span class="params">data</span>) =&gt;</span> &#123;</span><br><span class="line">    <span class="built_in">console</span>.log(data); <span class="comment">// 成功时获取到的数据</span></span><br><span class="line">    <span class="keyword">return</span> sleep(<span class="number">2</span>) <span class="comment">// 再次的执行异步函数</span></span><br><span class="line">&#125;).then(<span class="function">(<span class="params">data</span>)=&gt;</span> &#123; <span class="comment">// 继续用.then接受</span></span><br><span class="line">    <span class="built_in">console</span>.log(data) <span class="comment">// 再次成功</span></span><br><span class="line">&#125;).catch(<span class="function">(<span class="params">err</span>) =&gt;</span> &#123;</span><br><span class="line"></span><br><span class="line">&#125;)</span><br></pre></td></tr></table></figure></li></ul><h2 id="async-await-（axios封装调用中很常使用）"><a href="#async-await-（axios封装调用中很常使用）" class="headerlink" title="async/await （axios封装调用中很常使用）"></a>async/await （axios封装调用中很常使用）</h2><ul><li>其实在我们很多的前端业务请求时也是使用的异步操作</li><li>例如我们前端在请求后端api时，这个过程我们需要作为一个异步去操作不影响其他业务的操作</li><li>但是这个作为异步，可是数据总不是异步把所以数据得同步的获取</li><li>es7就帮了我们很大的忙,因为await起到同步阻挡的作用<figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">var</span> test = <span class="keyword">async</span>() =&gt; &#123; <span class="comment">// 声明即执行的 async 函数表达式</span></span><br><span class="line">    <span class="keyword">let</span> abc = <span class="keyword">await</span> sleep(<span class="number">1</span>);<span class="comment">// 都是异步操作唯独到这里被卡住了，要等待数据的返回才会去执行后面</span></span><br><span class="line">    <span class="built_in">console</span>.log(abc);</span><br><span class="line">    <span class="built_in">console</span>.log(<span class="string">'这个永远不会在前面'</span>);</span><br><span class="line">&#125;</span><br><span class="line">test()</span><br><span class="line"></span><br><span class="line"><span class="built_in">console</span>.log(<span class="string">'这个百分之99的机会都是在前面，还有那个一估计是内存卡了'</span>);</span><br></pre></td></tr></table></figure></li></ul><h1 id="判断是否是一个数组-最近刚用过"><a href="#判断是否是一个数组-最近刚用过" class="headerlink" title="判断是否是一个数组(最近刚用过)"></a>判断是否是一个数组(最近刚用过)</h1><ol><li>Array.isArray </li></ol><ul><li>这个是我在做项目的时候想要判断是否是数组的时候上网查到的方法（数据过滤），用起来挺方便的</li><li>返回值是boolean<figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">const</span> arr=[<span class="number">1</span>,<span class="number">2</span>,<span class="number">3</span>];</span><br><span class="line"><span class="built_in">Array</span>.isArray(arr) <span class="comment">// 是返回 true 不是返回false</span></span><br></pre></td></tr></table></figure></li></ul><ol start="2"><li>instanceof</li></ol><ul><li>在网上好像说这个不太严谨，忘记了是什么了找不到那个文章<figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">var</span> isArray = <span class="function"><span class="keyword">function</span>(<span class="params">obj</span>) </span>&#123;</span><br><span class="line">    <span class="keyword">return</span> obj <span class="keyword">instanceof</span> <span class="built_in">Array</span>;</span><br><span class="line">&#125;;</span><br><span class="line"><span class="keyword">var</span> arr = <span class="string">'[&#123; id: 1 &#125;]'</span>;</span><br><span class="line"><span class="built_in">console</span>.log(isArray(arr));</span><br></pre></td></tr></table></figure></li></ul><h1 id="对象-数组互转"><a href="#对象-数组互转" class="headerlink" title="对象/数组互转"></a>对象/数组互转</h1><h3 id="对象转数组"><a href="#对象转数组" class="headerlink" title="对象转数组"></a>对象转数组</h3><ol><li><p>只取内容加入数组</p><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">var</span> arr = []</span><br><span class="line"><span class="keyword">for</span> (<span class="keyword">let</span> i <span class="keyword">in</span> obj) &#123;</span><br><span class="line">    arr.push(obj[i]); <span class="comment">//属性</span></span><br><span class="line">    <span class="comment">//arr.push(obj[i]); //值</span></span><br><span class="line">&#125;</span><br><span class="line"><span class="built_in">console</span>.log(arr); <span class="comment">// [ 5, 8, 4, 6 ]</span></span><br></pre></td></tr></table></figure></li><li><p>拆分为多个对象存入数组</p><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">var</span> arr = []</span><br><span class="line"><span class="keyword">for</span> (<span class="keyword">let</span> i <span class="keyword">in</span> obj) &#123;</span><br><span class="line">    <span class="keyword">let</span> o = &#123;&#125;;</span><br><span class="line">    o[i] = obj[i];</span><br><span class="line">    arr.push(o)</span><br><span class="line">&#125;</span><br><span class="line"><span class="built_in">console</span>.log(arr); <span class="comment">// [ &#123; '未完成': 5 &#125;, &#123; '已完成': 8 &#125;, &#123; '待确认': 4 &#125;, &#123; '已取消': 6 &#125; ]</span></span><br></pre></td></tr></table></figure></li></ol><h3 id="数组转对象"><a href="#数组转对象" class="headerlink" title="数组转对象"></a>数组转对象</h3><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">let</span> obj = &#123;&#125;;</span><br><span class="line"><span class="keyword">let</span> arr = [<span class="string">"d"</span>, <span class="string">'b'</span>, <span class="string">'c'</span>]</span><br><span class="line"></span><br><span class="line"><span class="keyword">for</span> (<span class="keyword">const</span> key <span class="keyword">in</span> arr) &#123;</span><br><span class="line">    obj[key] = arr[key]</span><br><span class="line">&#125;</span><br><span class="line"><span class="built_in">console</span>.log(obj)</span><br></pre></td></tr></table></figure><h1 id="数组的升序和降序"><a href="#数组的升序和降序" class="headerlink" title="数组的升序和降序"></a>数组的升序和降序</h1><ul><li>这个挺有意思的很多算法题里面都会用到，一开始我还不懂这个啥意思哎</li><li>sort 排序,再升入我就不是很会了</li><li>要实现排序必须要有的条件就是要实现排序函数先</li></ul><hr><ul><li>如果想按照其他标准进行排序，就需要提供比较函数，该函数要比较两个值，然后返回一个用于说明这两个值的相对顺序的数字。比较函数应该具有两个参数 a 和 b，其返回值如下：</li></ul><p>若 a 小于 b，在排序后的数组中 a 应该出现在 b 之前，则返回一个小于 0 的值。<br>若 a 等于 b，则返回 0。<br>若 a 大于 b，则返回一个大于 0 的值。</p><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">// 升序：</span></span><br><span class="line">    <span class="keyword">var</span> arr=[<span class="number">5</span>,<span class="number">6</span>,<span class="number">7</span>,<span class="number">91</span>,<span class="number">2</span>,<span class="number">1</span>];</span><br><span class="line">    arr.sort(<span class="function"><span class="keyword">function</span>(<span class="params">a,b</span>)</span>&#123;<span class="keyword">return</span> a-b&#125;); <span class="comment">// 排序函数</span></span><br><span class="line">    <span class="built_in">console</span>.log(arr);<span class="comment">//[1, 2, 5, 6, 7, 91]</span></span><br><span class="line"><span class="comment">// 降序:</span></span><br><span class="line">    <span class="keyword">var</span> arr=[<span class="number">5</span>,<span class="number">6</span>,<span class="number">7</span>,<span class="number">91</span>,<span class="number">2</span>,<span class="number">1</span>];</span><br><span class="line">    arr.sort(<span class="function"><span class="keyword">function</span>(<span class="params">a,b</span>)</span>&#123;<span class="keyword">return</span> b-a&#125;);</span><br><span class="line">    <span class="built_in">console</span>.log(arr);<span class="comment">//[91, 7, 6, 5, 2, 1]</span></span><br></pre></td></tr></table></figure><h1 id="说了排序就看看冒泡排序-快速排序"><a href="#说了排序就看看冒泡排序-快速排序" class="headerlink" title="说了排序就看看冒泡排序/快速排序"></a>说了排序就看看冒泡排序/快速排序</h1><h3 id="冒泡排序"><a href="#冒泡排序" class="headerlink" title="冒泡排序"></a>冒泡排序</h3><ul><li>声明一个done作为表示判断，这个也是我看别人写才想到的</li><li>主要是用来在对比没有任何一次遍历时位置的更改，说明排序已经结束了无需在做后面的排序<figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">var</span> arr = [<span class="number">3</span>, <span class="number">4</span>, <span class="number">1</span>, <span class="number">2</span>];</span><br><span class="line"><span class="function"><span class="keyword">function</span> <span class="title">bubbleSort</span> (<span class="params">arr</span>) </span>&#123;</span><br><span class="line">  <span class="keyword">var</span> max = arr.length - <span class="number">1</span>;</span><br><span class="line">  <span class="keyword">for</span> (<span class="keyword">var</span> j = <span class="number">0</span>; j &lt; max; j++) &#123;</span><br><span class="line">    <span class="comment">// 声明一个变量，作为标志位</span></span><br><span class="line">    <span class="keyword">var</span> done = <span class="literal">true</span>;</span><br><span class="line">    <span class="keyword">for</span> (<span class="keyword">var</span> i = <span class="number">0</span>; i &lt; max - j; i++) &#123;</span><br><span class="line">      <span class="keyword">if</span> (arr[i] &gt; arr[i + <span class="number">1</span>]) &#123;</span><br><span class="line">        <span class="keyword">var</span> temp = arr[i];</span><br><span class="line">        arr[i] = arr[i + <span class="number">1</span>];</span><br><span class="line">        arr[i + <span class="number">1</span>] = temp;</span><br><span class="line">        done = <span class="literal">false</span>;</span><br><span class="line">      &#125;</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">if</span> (done) &#123;</span><br><span class="line">      <span class="keyword">break</span>;</span><br><span class="line">    &#125;</span><br><span class="line">  &#125;</span><br><span class="line">  <span class="keyword">return</span> arr;</span><br><span class="line">&#125;</span><br><span class="line"><span class="built_in">console</span>.log(bubbleSort(arr));</span><br></pre></td></tr></table></figure></li></ul><h3 id="快速排序"><a href="#快速排序" class="headerlink" title="快速排序"></a>快速排序</h3><ul><li>这里面有递归的思想，然而我用断点去看把自己都绕进去了<figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">var</span> quickSort = <span class="function"><span class="keyword">function</span>(<span class="params">arr</span>) </span>&#123;</span><br><span class="line">    <span class="keyword">if</span> (arr.length &lt;= <span class="number">1</span>) &#123;</span><br><span class="line">        <span class="keyword">return</span> arr;</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">var</span> pivotIndex = <span class="built_in">Math</span>.floor(arr.length / <span class="number">2</span>);</span><br><span class="line">    <span class="keyword">var</span> pivot = arr.splice(pivotIndex, <span class="number">1</span>)[<span class="number">0</span>];</span><br><span class="line">    <span class="keyword">var</span> left = [];</span><br><span class="line">    <span class="keyword">var</span> right = [];</span><br><span class="line">    <span class="keyword">for</span> (<span class="keyword">var</span> i = <span class="number">0</span>; i &lt; arr.length; i++) &#123;</span><br><span class="line">        <span class="keyword">if</span> (arr[i] &lt; pivot) &#123;</span><br><span class="line">            left.push(arr[i]);</span><br><span class="line">        &#125; <span class="keyword">else</span> &#123;</span><br><span class="line">            right.push(arr[i]);</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">return</span> quickSort(left).concat([pivot], quickSort(right));</span><br><span class="line">&#125;;</span><br><span class="line"></span><br><span class="line"></span><br><span class="line"><span class="keyword">var</span> aa = quickSort([<span class="number">3</span>, <span class="number">2</span>, <span class="number">5</span>, <span class="number">77</span>, <span class="number">32</span>, <span class="number">3</span>, <span class="number">1</span>, <span class="number">3</span>, <span class="number">4</span>, <span class="number">5</span>, <span class="number">2</span>, <span class="number">3</span>])</span><br><span class="line"></span><br><span class="line"><span class="built_in">console</span>.log(aa);</span><br></pre></td></tr></table></figure></li></ul><h1 id="上面出现了递归，就看看递归吧"><a href="#上面出现了递归，就看看递归吧" class="headerlink" title="上面出现了递归，就看看递归吧"></a>上面出现了递归，就看看递归吧</h1><h3 id="第一个递归"><a href="#第一个递归" class="headerlink" title="第一个递归"></a>第一个递归</h3><ul><li>递归:函数中调用函数自己,此时就是递归,递归一定要有结束的条件<figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">var</span> i = <span class="number">0</span>;</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">function</span> <span class="title">f1</span>(<span class="params"></span>) </span>&#123;</span><br><span class="line">    i++;</span><br><span class="line">    <span class="keyword">if</span> (i &lt; <span class="number">5</span>) &#123; <span class="comment">// 限制小于5都会再执行一次f1函数</span></span><br><span class="line">        f1();</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="built_in">console</span>.log(<span class="string">"从前有个山,山里有个庙,庙里有个和尚给小和尚讲故事:"</span>);</span><br><span class="line"></span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line">f1();</span><br><span class="line"><span class="comment">// 输出结果 </span></span><br><span class="line">从前有个山,山里有个庙,庙里有个和尚给小和尚讲故事:</span><br><span class="line">从前有个山,山里有个庙,庙里有个和尚给小和尚讲故事:</span><br><span class="line">从前有个山,山里有个庙,庙里有个和尚给小和尚讲故事:</span><br><span class="line">从前有个山,山里有个庙,庙里有个和尚给小和尚讲故事:</span><br><span class="line">从前有个山,山里有个庙,庙里有个和尚给小和尚讲故事:</span><br></pre></td></tr></table></figure></li></ul><h3 id="来个小案例让你知道递归的厉害-（看了这个再回头看上面的快速排序你就和觉得开窍了很多）"><a href="#来个小案例让你知道递归的厉害-（看了这个再回头看上面的快速排序你就和觉得开窍了很多）" class="headerlink" title="来个小案例让你知道递归的厉害 （看了这个再回头看上面的快速排序你就和觉得开窍了很多）"></a>来个小案例让你知道递归的厉害 （看了这个再回头看上面的快速排序你就和觉得开窍了很多）</h3><ol><li><p>递归实现：n个数字的和，5 计算 1+2+3+4+5</p><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">//函数的声明</span></span><br><span class="line"><span class="function"><span class="keyword">function</span> <span class="title">getSum</span>(<span class="params">x</span>) </span>&#123;</span><br><span class="line">    <span class="comment">// 判断条件就是在这只要到1就停止返回1</span></span><br><span class="line">    <span class="keyword">if</span> (x == <span class="number">1</span>) &#123;</span><br><span class="line">        <span class="keyword">return</span> <span class="number">1</span>;</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="comment">// 每一次都是自身 + 函数调用小于自身的1</span></span><br><span class="line">    <span class="keyword">return</span> x + getSum(x - <span class="number">1</span>);</span><br><span class="line">&#125;</span><br><span class="line"><span class="comment">//函数的调用</span></span><br><span class="line"><span class="built_in">console</span>.log(getSum(<span class="number">5</span>));</span><br><span class="line"></span><br><span class="line"></span><br><span class="line"><span class="comment">/*</span></span><br><span class="line"><span class="comment">*</span></span><br><span class="line"><span class="comment">* 执行过程:</span></span><br><span class="line"><span class="comment">* 代码执行getSum(5)---&gt;进入函数,此时的x是5,执行的是5+getSum(4),此时代码等待</span></span><br><span class="line"><span class="comment">* 此时5+getSum(4),代码先不进行计算,先执行getSum(4),进入函数,执行的是4+getSum(3),等待, 先执行的是getSum(3),进入函数,执行3+getSum(2),等待,先执行getSum(2),进入函数,执行 2+getSum(1);等待, 先执行getSum(1),执行的是x==1的判断,return 1,所以,</span></span><br><span class="line"><span class="comment">* 此时getSum(1)的结果是1,开始向外走出去</span></span><br><span class="line"><span class="comment">* 2+getSum(1) 此时的结果是:2+1</span></span><br><span class="line"><span class="comment">* 执行:</span></span><br><span class="line"><span class="comment">* getSum(2)----&gt;2+1</span></span><br><span class="line"><span class="comment">* 3+getSum(2) 此时的结果是3+2+1</span></span><br><span class="line"><span class="comment">* 4+getSum(3) 此时的结果是4+3+2+1</span></span><br><span class="line"><span class="comment">* 5+getSum(4) 此时的结果是5+4+3+2+1</span></span><br><span class="line"><span class="comment">*</span></span><br><span class="line"><span class="comment">* 结果:15</span></span><br><span class="line"><span class="comment">*</span></span><br><span class="line"><span class="comment">*</span></span><br><span class="line"><span class="comment">*</span></span><br><span class="line"><span class="comment">* */</span></span><br></pre></td></tr></table></figure></li><li><p>求一个数字各个位数上的数字的和:  123   —&gt;6 —1+2+3</p><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><span class="line"><span class="function"><span class="keyword">function</span> <span class="title">getEverySum</span>(<span class="params">x</span>) </span>&#123;</span><br><span class="line">      <span class="keyword">if</span>(x&lt;<span class="number">10</span>)&#123;</span><br><span class="line">        <span class="keyword">return</span> x;</span><br><span class="line">      &#125;</span><br><span class="line">      <span class="comment">//获取的是这个数字的个位数  然后下一次的时候除去</span></span><br><span class="line">      <span class="keyword">return</span> x%<span class="number">10</span>+getEverySum(<span class="built_in">parseInt</span>(x/<span class="number">10</span>));</span><br><span class="line">    &#125;</span><br><span class="line">   <span class="built_in">console</span>.log(getEverySum(<span class="number">1364</span>));</span><br></pre></td></tr></table></figure></li><li><p>求斐波那契数列</p><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><span class="line"><span class="function"><span class="keyword">function</span> <span class="title">getFib</span>(<span class="params">x</span>) </span>&#123;</span><br><span class="line">      <span class="keyword">if</span>(x==<span class="number">1</span>||x==<span class="number">2</span>)&#123;</span><br><span class="line">        <span class="keyword">return</span> <span class="number">1</span></span><br><span class="line">      &#125;</span><br><span class="line">      <span class="keyword">return</span> getFib(x<span class="number">-1</span>)+getFib(x<span class="number">-2</span>);</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="built_in">console</span>.log(getFib(<span class="number">12</span>));</span><br></pre></td></tr></table></figure></li></ol>]]></content>
    
    <summary type="html">
    
      
      
        &lt;link rel=&quot;stylesheet&quot; class=&quot;aplayer-secondary-style-marker&quot; href=&quot;/assets/css/APlayer.min.css&quot;&gt;&lt;script src=&quot;/assets/js/APlayer.min.js&quot; cla
      
    
    </summary>
    
      <category term="JavaScript" scheme="http://yoursite.com/categories/JavaScript/"/>
    
    
      <category term="js笔记" scheme="http://yoursite.com/tags/js%E7%AC%94%E8%AE%B0/"/>
    
  </entry>
  
  <entry>
    <title>使用过的响应式解决方案+网络看到的不错的移动+pc的笔记（网络摘录）</title>
    <link href="http://yoursite.com/2019/03/14/Css%E5%93%8D%E5%BA%94%E5%BC%8F+%E7%BD%91%E7%BB%9C%E7%AC%94%E8%AE%B0/"/>
    <id>http://yoursite.com/2019/03/14/Css响应式+网络笔记/</id>
    <published>2019-03-14T09:19:28.551Z</published>
    <updated>2019-03-14T13:12:07.816Z</updated>
    
    <content type="html"><![CDATA[<link rel="stylesheet" class="aplayer-secondary-style-marker" href="/assets/css/APlayer.min.css"><script src="/assets/js/APlayer.min.js" class="aplayer-secondary-script-marker"></script><ul><li>flex布局学习： <a href="https://www.runoob.com/w3cnote/flex-grammar.html" target="_blank" rel="noopener">https://www.runoob.com/w3cnote/flex-grammar.html</a></li></ul><h1 id="Css-移动端响应式解决方案"><a href="#Css-移动端响应式解决方案" class="headerlink" title="Css 移动端响应式解决方案"></a>Css 移动端响应式解决方案</h1><ul><li>vh，vw，em，px，百分比</li><li>vh,vw 没用过 em和rem差不多</li><li>百分比也是一个不错的解决方便</li><li>并没有完美的解决方案，只能说在该使用的地方去使用对的解决方法达到最好的效果</li></ul><hr><ul><li>下面说两个我用过的<h2 id="1-知道并用过感觉挺好的一个-js控制配合rem"><a href="#1-知道并用过感觉挺好的一个-js控制配合rem" class="headerlink" title="1. 知道并用过感觉挺好的一个 js控制配合rem"></a>1. 知道并用过感觉挺好的一个 js控制配合rem</h2></li><li>这个是我在github上面看到的一个vue+vuex的练习项目中下载写了学习时发现的</li><li>感觉这个方法挺不错的，js的控制动态切换窗口大小都能切换</li><li>配合上rem的适配感觉是一个很棒的响应式的解决方法</li></ul><hr><ol><li>js（把js封装在config中在min.js引入就好了方便快捷）,自调用获取dom更改html font-size<figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br></pre></td><td class="code"><pre><span class="line">(<span class="function"><span class="keyword">function</span>(<span class="params">doc, win</span>) </span>&#123;</span><br><span class="line">    <span class="keyword">var</span> docEl = doc.documentElement,</span><br><span class="line">        resizeEvt = <span class="string">'orientationchange'</span> <span class="keyword">in</span> <span class="built_in">window</span> ? <span class="string">'orientationchange'</span> : <span class="string">'resize'</span>,</span><br><span class="line">        recalc = <span class="function"><span class="keyword">function</span>(<span class="params"></span>) </span>&#123;</span><br><span class="line">            <span class="keyword">var</span> clientWidth = docEl.clientWidth;</span><br><span class="line">            <span class="keyword">if</span> (!clientWidth) <span class="keyword">return</span>;</span><br><span class="line">            docEl.style.fontSize = <span class="number">20</span> * (clientWidth / <span class="number">320</span>) + <span class="string">'px'</span>;</span><br><span class="line">        &#125;;</span><br><span class="line">    <span class="keyword">if</span> (!doc.addEventListener) <span class="keyword">return</span>;</span><br><span class="line">    win.addEventListener(resizeEvt, recalc, <span class="literal">false</span>);</span><br><span class="line">    doc.addEventListener(<span class="string">'DOMContentLoaded'</span>, recalc, <span class="literal">false</span>);</span><br><span class="line">&#125;)(<span class="built_in">document</span>, <span class="built_in">window</span>);</span><br></pre></td></tr></table></figure></li></ol><hr><ol start="2"><li>rem (vue项目中设置Scss)</li></ol><ul><li>ios：6.1系统以上都支持</li><li>android：2.1系统以上都支持</li><li>根据网页的根元素来设置字体大小，和em（font size of the element）的区别是，em是根据其父元素的字体大小来设置，而rem是根据网页的跟元素（html）来设置字体大小的</li><li>默认 font-size是16px<figure class="highlight scss"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">/* 默认16px */</span></span><br><span class="line"><span class="selector-tag">html</span> &#123;</span><br><span class="line">    <span class="attribute">font-size</span>:<span class="number">16px</span>;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="comment">/* 我们试试把p标签设置为12px的字体大小 */</span></span><br><span class="line"><span class="selector-tag">p</span> &#123;</span><br><span class="line">    <span class="attribute">font-size</span>: <span class="number">0.75rem</span>; <span class="comment">/* 12/16=0.75 rem */</span></span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure></li></ul><hr><h3 id="进阶"><a href="#进阶" class="headerlink" title="进阶"></a>进阶</h3><ul><li><p>如果利用rem来设置css的值，一般要通过一层计算才行，比如如果要设置一个长宽为100px的div，那么就需要计算出100px对应的rem值是 100 / 16 =6.25rem，这在我们写css中，其实算比较繁琐的一步操作了。</p></li><li><p>这两个方法我都没有去使用，只是知道可以这么去改变</p></li></ul><ol><li><p>对于没有使用scss的工程：<br>为了方便起见，可以将html的font-size设置成100px，这样在写单位时，直接将数值除以100在加上rem的单位就可以了</p></li><li><p>对于使用scss的工程：<br>前端构建中，完全可以利用scss来解决这个问题，例如我们可以写一个scss的function px2rem即：</p><figure class="highlight scss"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">/* 设置定义 */</span></span><br><span class="line">@function px2rem(<span class="variable">$px</span>)&#123;</span><br><span class="line">    <span class="variable">$rem</span> : <span class="number">37.5px</span>;</span><br><span class="line">    @return (<span class="variable">$px</span>/<span class="variable">$rem</span>) + rem;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="comment">/*使用时*/</span></span><br><span class="line"><span class="attribute">height</span>: px2rem(<span class="number">90px</span>);</span><br><span class="line"><span class="attribute">width</span>: px2rem(<span class="number">90px</span>);;</span><br></pre></td></tr></table></figure></li></ol><h2 id="2-媒体查询-改变-font-size-这个挺麻烦的考虑很多"><a href="#2-媒体查询-改变-font-size-这个挺麻烦的考虑很多" class="headerlink" title="2. 媒体查询 改变 font-size 这个挺麻烦的考虑很多"></a>2. 媒体查询 改变 font-size 这个挺麻烦的考虑很多</h2><ul><li>相比我更喜欢使用rem+js<figure class="highlight css"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br></pre></td><td class="code"><pre><span class="line"><span class="selector-tag">html</span> &#123;</span><br><span class="line">        <span class="attribute">font-size</span>: <span class="number">15px</span></span><br><span class="line">    &#125;</span><br><span class="line"><span class="comment">/* html &#123;</span></span><br><span class="line"><span class="comment">                font-size: 4.7vw;</span></span><br><span class="line"><span class="comment">     /* rem(root element)配合vw(viewport width)  */</span></span><br><span class="line">            &#125; */</span><br><span class="line">@<span class="keyword">media</span> only screen and (min-width:<span class="number">320PX</span>) and (max-width:<span class="number">359PX</span>) &#123;</span><br><span class="line">    <span class="selector-tag">html</span> &#123;</span><br><span class="line">        <span class="attribute">font-size</span>: <span class="number">15px</span></span><br><span class="line">    &#125;</span><br><span class="line">.....等</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure></li></ul><h1 id="网上摘录的方法"><a href="#网上摘录的方法" class="headerlink" title="网上摘录的方法"></a>网上摘录的方法</h1><h2 id="移动端准备工作写法"><a href="#移动端准备工作写法" class="headerlink" title="移动端准备工作写法"></a>移动端准备工作写法</h2><figure class="highlight html"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br></pre></td><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">meta</span> <span class="attr">name</span>=<span class="string">"viewport"</span> <span class="attr">content</span>=<span class="string">"width=device-width, initial-scale=1.0, maximum-scale=1.0, user-scalable=no"</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">meta</span> <span class="attr">http-equiv</span>=<span class="string">"X-UA-Compatible"</span> <span class="attr">content</span>=<span class="string">"IE=Edge，chrome=1"</span>&gt;</span></span><br><span class="line"><span class="comment">&lt;!-- 设置在苹果手机上以应用模式启动时，是否全屏 --&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">meta</span> <span class="attr">name</span>=<span class="string">'apple-touch-fullscreen'</span> <span class="attr">content</span>=<span class="string">'yes'</span>&gt;</span></span><br><span class="line"><span class="comment">&lt;!-- ios 系统 作用未知 --&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">meta</span> <span class="attr">name</span>=<span class="string">"apple-mobile-web-app-capable"</span> <span class="attr">content</span>=<span class="string">"yes"</span> /&gt;</span></span><br><span class="line"><span class="comment">&lt;!-- iso 系统 作用未知 --&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">meta</span> <span class="attr">content</span>=<span class="string">"fullscreen=yes,preventMove=no"</span> <span class="attr">name</span>=<span class="string">"ML-Config"</span>&gt;</span></span><br><span class="line"><span class="comment">&lt;!-- iso 系统 作用未知 --&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">meta</span> <span class="attr">name</span>=<span class="string">"apple-mobile-web-app-status-bar-style"</span> <span class="attr">content</span>=<span class="string">"black"</span> /&gt;</span></span><br><span class="line"> <span class="comment">&lt;!-- 是否识别 手机号码、 电子邮件 地址 等--&gt;</span></span><br><span class="line"> <span class="tag">&lt;<span class="name">meta</span> <span class="attr">name</span>=<span class="string">"format-detection"</span> <span class="attr">content</span>=<span class="string">"telephone=no,email=no,address=no"</span> /&gt;</span></span><br><span class="line"></span><br><span class="line"><span class="comment">&lt;!-- 让360双核浏览器用webkit内核渲染页面 --&gt;</span>  </span><br><span class="line"></span><br><span class="line"><span class="tag">&lt;<span class="name">meta</span> <span class="attr">name</span>=<span class="string">"renderer"</span> <span class="attr">content</span>=<span class="string">"webkit"</span>&gt;</span> </span><br><span class="line"></span><br><span class="line"><span class="comment">&lt;!-- 避免IE使用兼容模式 --&gt;</span>  </span><br><span class="line"></span><br><span class="line"><span class="tag">&lt;<span class="name">meta</span> <span class="attr">http-equiv</span>=<span class="string">"X-UA-Compatible"</span> <span class="attr">content</span>=<span class="string">"IE=edge"</span>&gt;</span> </span><br><span class="line"></span><br><span class="line"> 允许全屏模式浏览,隐藏浏览器导航栏--&gt;</span><br><span class="line"><span class="tag">&lt;<span class="name">meta</span> <span class="attr">name</span>=<span class="string">"apple-mobile-web-app-capable"</span> <span class="attr">content</span>=<span class="string">"yes"</span> /&gt;</span></span><br><span class="line"></span><br><span class="line"><span class="comment">&lt;!--微信缓存--&gt;</span>  </span><br><span class="line">    <span class="tag">&lt;<span class="name">meta</span> <span class="attr">http-equiv</span>=<span class="string">"Cache-Control"</span> <span class="attr">content</span>=<span class="string">"no-cache, no-store, must-revalidate"</span> /&gt;</span>  </span><br><span class="line">    <span class="tag">&lt;<span class="name">meta</span> <span class="attr">http-equiv</span>=<span class="string">"Pragma"</span> <span class="attr">content</span>=<span class="string">"no-cache"</span> /&gt;</span>  </span><br><span class="line">    <span class="tag">&lt;<span class="name">meta</span> <span class="attr">http-equiv</span>=<span class="string">"Expires"</span> <span class="attr">content</span>=<span class="string">"0"</span> /&gt;</span>  </span><br><span class="line"></span><br><span class="line"><span class="comment">&lt;!--[if lt IE 9]&gt;</span></span><br><span class="line"><span class="comment">  &lt;script src="https://oss.maxcdn.com/libs/html5shiv/3.7.0/html5shiv.js"&gt;&lt;/script&gt;</span></span><br><span class="line"><span class="comment">  &lt;script src="https://oss.maxcdn.com/libs/respond.js/1.3.0/respond.min.js"&gt;&lt;/script&gt;</span></span><br><span class="line"><span class="comment">&lt;![endif]--&gt;</span></span><br></pre></td></tr></table></figure><h2 id="pc端准备工作"><a href="#pc端准备工作" class="headerlink" title="pc端准备工作"></a>pc端准备工作</h2><figure class="highlight html"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br></pre></td><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">meta</span> <span class="attr">name</span>=<span class="string">"viewport"</span> <span class="attr">content</span>=<span class="string">"width=device-width, initial-scale=1.0, maximum-scale=1.0, user-scalable=no"</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">meta</span> <span class="attr">http-equiv</span>=<span class="string">"X-UA-Compatible"</span> <span class="attr">content</span>=<span class="string">"IE=Edge，chrome=1"</span>&gt;</span></span><br><span class="line"><span class="comment">&lt;!-- 让360双核浏览器用webkit内核渲染页面 --&gt;</span>  </span><br><span class="line"></span><br><span class="line"><span class="tag">&lt;<span class="name">meta</span> <span class="attr">name</span>=<span class="string">"renderer"</span> <span class="attr">content</span>=<span class="string">"webkit"</span>&gt;</span> </span><br><span class="line"></span><br><span class="line"><span class="comment">&lt;!--[if lt IE 9]&gt;</span></span><br><span class="line"><span class="comment">  &lt;script src="https://oss.maxcdn.com/libs/html5shiv/3.7.0/html5shiv.js"&gt;&lt;/script&gt;</span></span><br><span class="line"><span class="comment">  &lt;script src="https://oss.maxcdn.com/libs/respond.js/1.3.0/respond.min.js"&gt;&lt;/script&gt;</span></span><br><span class="line"><span class="comment">&lt;![endif]--&gt;</span></span><br></pre></td></tr></table></figure><h2 id="base-css公共样式pc端"><a href="#base-css公共样式pc端" class="headerlink" title="base.css公共样式pc端"></a>base.css公共样式pc端</h2><figure class="highlight css"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br></pre></td><td class="code"><pre><span class="line"><span class="selector-tag">body</span>, <span class="selector-tag">div</span>, <span class="selector-tag">span</span>, <span class="selector-tag">object</span>, <span class="selector-tag">iframe</span>, <span class="selector-tag">h1</span>, <span class="selector-tag">h2</span>, <span class="selector-tag">h3</span>, <span class="selector-tag">h4</span>, <span class="selector-tag">h5</span>, <span class="selector-tag">h6</span>, <span class="selector-tag">p</span>, <span class="selector-tag">blockquote</span>, <span class="selector-tag">pre</span>, <span class="selector-tag">abbr</span>, <span class="selector-tag">address</span>, <span class="selector-tag">cite</span>, <span class="selector-tag">code</span>, <span class="selector-tag">del</span>, <span class="selector-tag">dfn</span>, <span class="selector-tag">em</span>, <span class="selector-tag">img</span>, <span class="selector-tag">ins</span>, <span class="selector-tag">kbd</span>, <span class="selector-tag">q</span>, <span class="selector-tag">samp</span>, <span class="selector-tag">small</span>, <span class="selector-tag">strong</span>, <span class="selector-tag">sub</span>, <span class="selector-tag">sup</span>, <span class="selector-tag">var</span>, <span class="selector-tag">b</span>, <span class="selector-tag">i</span>, <span class="selector-tag">dl</span>, <span class="selector-tag">dt</span>, <span class="selector-tag">dd</span>, <span class="selector-tag">ol</span>, <span class="selector-tag">ul</span>, <span class="selector-tag">li</span>, <span class="selector-tag">fieldset</span>, <span class="selector-tag">form</span>, <span class="selector-tag">label</span>, <span class="selector-tag">legend</span>, <span class="selector-tag">table</span>, <span class="selector-tag">caption</span>, <span class="selector-tag">tbody</span>, <span class="selector-tag">tfoot</span>, <span class="selector-tag">thead</span>, <span class="selector-tag">tr</span>, <span class="selector-tag">th</span>, <span class="selector-tag">td</span>, <span class="selector-tag">article</span>, <span class="selector-tag">aside</span>, <span class="selector-tag">canvas</span>, <span class="selector-tag">details</span>, <span class="selector-tag">figcaption</span>, <span class="selector-tag">figure</span>, <span class="selector-tag">footer</span>, <span class="selector-tag">header</span>, <span class="selector-tag">hgroup</span>, <span class="selector-tag">menu</span>, <span class="selector-tag">nav</span>, <span class="selector-tag">section</span>, <span class="selector-tag">summary</span>, <span class="selector-tag">time</span>, <span class="selector-tag">mark</span>, <span class="selector-tag">audio</span>, <span class="selector-tag">video</span> &#123; <span class="attribute">margin</span>:<span class="number">0</span>;<span class="attribute">padding</span>:<span class="number">0</span>；border: <span class="number">0</span>;&#125;</span><br><span class="line"></span><br><span class="line"><span class="selector-tag">ol</span>,<span class="selector-tag">li</span>,<span class="selector-tag">ul</span>,<span class="selector-tag">dl</span>,<span class="selector-tag">dt</span>,<span class="selector-tag">dd</span>&#123;<span class="attribute">list-style</span>:none;&#125;</span><br><span class="line"></span><br><span class="line"><span class="selector-tag">table</span>&#123;<span class="attribute">border-collapse</span>:collapse;<span class="attribute">border-spacing</span>:<span class="number">0</span>&#125;</span><br><span class="line"></span><br><span class="line"><span class="selector-tag">h1</span>,<span class="selector-tag">h2</span>,<span class="selector-tag">h3</span>,<span class="selector-tag">h4</span>,<span class="selector-tag">h5</span>,<span class="selector-tag">h6</span>,<span class="selector-tag">i</span>,<span class="selector-tag">strong</span> &#123;<span class="attribute">font-weight</span>: normal;&#125;  </span><br><span class="line"></span><br><span class="line"><span class="selector-tag">img</span> &#123;<span class="attribute">vertical-align</span>: middle;<span class="attribute">border</span>: none;<span class="attribute">width</span>: <span class="number">100%</span>;&#125;  </span><br><span class="line"><span class="selector-tag">i</span> &#123;<span class="attribute">font</span>: inherit;&#125;  </span><br><span class="line"></span><br><span class="line"><span class="selector-tag">a</span> &#123;<span class="attribute">color</span>: <span class="number">#fff</span>;<span class="attribute">text-decoration</span>: none;<span class="attribute">-webkit-tap-highlight-color</span>: <span class="built_in">rgba</span>(0, 0, 0, 0); <span class="attribute">background-color</span>:transparent;&#125;</span><br><span class="line"></span><br><span class="line"><span class="selector-tag">a</span><span class="selector-pseudo">:hover</span> &#123;<span class="attribute">text-decoration</span>: underline; <span class="attribute">outline</span>: none;&#125;  </span><br><span class="line"></span><br><span class="line"><span class="selector-tag">select</span><span class="selector-pseudo">::-ms-expand</span> &#123; <span class="attribute">display</span>: none; &#125;  </span><br><span class="line"></span><br><span class="line"><span class="selector-tag">a</span><span class="selector-pseudo">:active</span>,<span class="selector-tag">a</span><span class="selector-pseudo">:hover</span>&#123;<span class="attribute">outline</span>:<span class="number">0</span>&#125;</span><br><span class="line"></span><br><span class="line"><span class="selector-class">.clearfix</span><span class="selector-pseudo">::before</span>,</span><br><span class="line"><span class="selector-class">.clearfix</span><span class="selector-pseudo">::after</span>&#123;</span><br><span class="line">    <span class="attribute">content</span>: <span class="string">''</span>;</span><br><span class="line">    <span class="attribute">display</span>: block;</span><br><span class="line">    <span class="attribute">height</span>: <span class="number">0</span>;</span><br><span class="line">    <span class="attribute">line-height</span>: <span class="number">0</span>;</span><br><span class="line">    <span class="attribute">visibility</span>: hidden;</span><br><span class="line">    <span class="attribute">clear</span>: both;</span><br><span class="line"></span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="selector-class">.fl</span>&#123; <span class="attribute">float</span>:left;&#125;</span><br><span class="line"><span class="selector-class">.fr</span>&#123;<span class="attribute">float</span>:right;&#125;</span><br><span class="line"></span><br><span class="line"><span class="selector-tag">input</span>,<span class="selector-tag">select</span>,<span class="selector-tag">option</span>&#123;<span class="attribute">vertical-align</span>:middle;<span class="attribute">border-radius</span>:<span class="number">0px</span>;<span class="attribute">-moz-appearance</span>:none;<span class="attribute">-webkit-appearance</span>:none;<span class="attribute">appearance</span>:none;<span class="attribute">-webkit-tap-highlight-color</span>: <span class="built_in">rgba</span>(0, 0, 0, 0);<span class="attribute">outline</span>: none;&#125;</span><br><span class="line"></span><br><span class="line"><span class="selector-tag">input</span><span class="selector-attr">[type="text"]</span>,<span class="selector-tag">input</span><span class="selector-attr">[type="button"]</span>,<span class="selector-tag">input</span><span class="selector-attr">[type="submit"]</span>,<span class="selector-tag">input</span><span class="selector-attr">[type="reset"]</span>&#123;<span class="attribute">-webkit-appearance</span>: none;<span class="attribute">appearance</span>: none;<span class="attribute">border-radius</span>: <span class="number">0</span>;<span class="attribute">outline</span>: none;&#125;  </span><br><span class="line"></span><br><span class="line"><span class="selector-class">.overflow</span> &#123;<span class="attribute">overflow</span>:hidden; &#125;</span><br></pre></td></tr></table></figure><h2 id="base-css公共样式移动端"><a href="#base-css公共样式移动端" class="headerlink" title="base.css公共样式移动端"></a>base.css公共样式移动端</h2><figure class="highlight css"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br><span class="line">64</span><br><span class="line">65</span><br><span class="line">66</span><br><span class="line">67</span><br><span class="line">68</span><br><span class="line">69</span><br><span class="line">70</span><br><span class="line">71</span><br><span class="line">72</span><br><span class="line">73</span><br><span class="line">74</span><br><span class="line">75</span><br><span class="line">76</span><br><span class="line">77</span><br><span class="line">78</span><br><span class="line">79</span><br><span class="line">80</span><br><span class="line">81</span><br><span class="line">82</span><br><span class="line">83</span><br><span class="line">84</span><br><span class="line">85</span><br><span class="line">86</span><br><span class="line">87</span><br><span class="line">88</span><br><span class="line">89</span><br><span class="line">90</span><br><span class="line">91</span><br><span class="line">92</span><br><span class="line">93</span><br><span class="line">94</span><br><span class="line">95</span><br><span class="line">96</span><br><span class="line">97</span><br><span class="line">98</span><br><span class="line">99</span><br><span class="line">100</span><br><span class="line">101</span><br><span class="line">102</span><br><span class="line">103</span><br><span class="line">104</span><br><span class="line">105</span><br><span class="line">106</span><br><span class="line">107</span><br><span class="line">108</span><br><span class="line">109</span><br><span class="line">110</span><br><span class="line">111</span><br></pre></td><td class="code"><pre><span class="line"><span class="selector-tag">body</span>, <span class="selector-tag">div</span>, <span class="selector-tag">span</span>, <span class="selector-tag">object</span>, <span class="selector-tag">iframe</span>, <span class="selector-tag">h1</span>, <span class="selector-tag">h2</span>, <span class="selector-tag">h3</span>, <span class="selector-tag">h4</span>, <span class="selector-tag">h5</span>, <span class="selector-tag">h6</span>, <span class="selector-tag">p</span>, <span class="selector-tag">blockquote</span>, <span class="selector-tag">pre</span>, <span class="selector-tag">abbr</span>, <span class="selector-tag">address</span>, <span class="selector-tag">cite</span>, <span class="selector-tag">code</span>, <span class="selector-tag">del</span>, <span class="selector-tag">dfn</span>, <span class="selector-tag">em</span>, <span class="selector-tag">img</span>, <span class="selector-tag">ins</span>, <span class="selector-tag">kbd</span>, <span class="selector-tag">q</span>, <span class="selector-tag">samp</span>, <span class="selector-tag">small</span>, <span class="selector-tag">strong</span>, <span class="selector-tag">sub</span>, <span class="selector-tag">sup</span>, <span class="selector-tag">var</span>, <span class="selector-tag">b</span>, <span class="selector-tag">i</span>, <span class="selector-tag">dl</span>, <span class="selector-tag">dt</span>, <span class="selector-tag">dd</span>, <span class="selector-tag">ol</span>, <span class="selector-tag">ul</span>, <span class="selector-tag">li</span>, <span class="selector-tag">fieldset</span>, <span class="selector-tag">form</span>, <span class="selector-tag">label</span>, <span class="selector-tag">legend</span>, <span class="selector-tag">table</span>, <span class="selector-tag">caption</span>, <span class="selector-tag">tbody</span>, <span class="selector-tag">tfoot</span>, <span class="selector-tag">thead</span>, <span class="selector-tag">tr</span>, <span class="selector-tag">th</span>, <span class="selector-tag">td</span>, <span class="selector-tag">article</span>, <span class="selector-tag">aside</span>, <span class="selector-tag">canvas</span>, <span class="selector-tag">details</span>, <span class="selector-tag">figcaption</span>, <span class="selector-tag">figure</span>, <span class="selector-tag">footer</span>, <span class="selector-tag">header</span>, <span class="selector-tag">hgroup</span>, <span class="selector-tag">menu</span>, <span class="selector-tag">nav</span>, <span class="selector-tag">section</span>, <span class="selector-tag">summary</span>, <span class="selector-tag">time</span>, <span class="selector-tag">mark</span>, <span class="selector-tag">audio</span>, <span class="selector-tag">video</span> &#123; <span class="attribute">margin</span>:<span class="number">0</span>;<span class="attribute">padding</span>:<span class="number">0</span>&#125;</span><br><span class="line"></span><br><span class="line"><span class="selector-tag">ol</span>,<span class="selector-tag">li</span>,<span class="selector-tag">ul</span>,<span class="selector-tag">dl</span>,<span class="selector-tag">dt</span>,<span class="selector-tag">dd</span>&#123;<span class="attribute">list-style</span>:none;&#125;</span><br><span class="line"><span class="selector-class">.fl</span> &#123;<span class="attribute">float</span>: left;&#125;  </span><br><span class="line"><span class="selector-class">.fr</span> &#123;<span class="attribute">float</span>: right;&#125; </span><br><span class="line"></span><br><span class="line"><span class="selector-tag">table</span>&#123;<span class="attribute">border-collapse</span>:collapse;<span class="attribute">border-spacing</span>:<span class="number">0</span>&#125;</span><br><span class="line"></span><br><span class="line"><span class="selector-tag">html</span> &#123;  </span><br><span class="line">    <span class="attribute">-webkit-text-size-adjust</span>: <span class="number">100%</span>;  </span><br><span class="line">    <span class="attribute">-ms-text-size-adjust</span>: <span class="number">100%</span>;  </span><br><span class="line">    <span class="comment">/* 解决IOS默认滑动很卡的情况 */</span>  </span><br><span class="line">    <span class="attribute">-webkit-overflow-scrolling </span>: touch;  </span><br><span class="line">&#125;  </span><br><span class="line">  </span><br><span class="line"><span class="comment">/* 禁止缩放表单 */</span>  </span><br><span class="line"><span class="selector-tag">input</span><span class="selector-attr">[type="submit"]</span>, <span class="selector-tag">input</span><span class="selector-attr">[type="reset"]</span>, <span class="selector-tag">input</span><span class="selector-attr">[type="button"]</span>, <span class="selector-tag">input</span> &#123;  </span><br><span class="line">    <span class="attribute">resize</span>: none;  </span><br><span class="line">    <span class="attribute">border</span>: none;  </span><br><span class="line">&#125;  </span><br><span class="line">  </span><br><span class="line"><span class="comment">/* 取消链接高亮  */</span>  </span><br><span class="line"><span class="selector-tag">body</span>, <span class="selector-tag">div</span>, <span class="selector-tag">ul</span>, <span class="selector-tag">li</span>, <span class="selector-tag">ol</span>, <span class="selector-tag">h1</span>, <span class="selector-tag">h2</span>, <span class="selector-tag">h3</span>, <span class="selector-tag">h4</span>, <span class="selector-tag">h5</span>, <span class="selector-tag">h6</span>, <span class="selector-tag">input</span>, <span class="selector-tag">textarea</span>, <span class="selector-tag">select</span>, <span class="selector-tag">p</span>, <span class="selector-tag">dl</span>, <span class="selector-tag">dt</span>, <span class="selector-tag">dd</span>, <span class="selector-tag">a</span>, <span class="selector-tag">img</span>, <span class="selector-tag">button</span>, <span class="selector-tag">form</span>, <span class="selector-tag">table</span>, <span class="selector-tag">th</span>, <span class="selector-tag">tr</span>, <span class="selector-tag">td</span>, <span class="selector-tag">tbody</span>, <span class="selector-tag">article</span>, <span class="selector-tag">aside</span>, <span class="selector-tag">details</span>, <span class="selector-tag">figcaption</span>, <span class="selector-tag">figure</span>, <span class="selector-tag">footer</span>, <span class="selector-tag">header</span>, <span class="selector-tag">hgroup</span>, <span class="selector-tag">menu</span>, <span class="selector-tag">nav</span>, <span class="selector-tag">section</span> &#123;  </span><br><span class="line">    <span class="attribute">-webkit-tap-highlight-color</span>: <span class="built_in">rgba</span>(0, 0, 0, 0);  </span><br><span class="line">&#125;  </span><br><span class="line">  </span><br><span class="line"><span class="comment">/* 设置HTML5元素为块 */</span>  </span><br><span class="line"><span class="selector-tag">article</span>, <span class="selector-tag">aside</span>, <span class="selector-tag">details</span>, <span class="selector-tag">figcaption</span>, <span class="selector-tag">figure</span>, <span class="selector-tag">footer</span>, <span class="selector-tag">header</span>, <span class="selector-tag">hgroup</span>, <span class="selector-tag">menu</span>, <span class="selector-tag">nav</span>, <span class="selector-tag">section</span> &#123;  </span><br><span class="line">    <span class="attribute">display</span>: block;  </span><br><span class="line">&#125;  </span><br><span class="line">  </span><br><span class="line"><span class="comment">/* 图片自适应 */</span>  </span><br><span class="line"><span class="selector-tag">img</span> &#123;  </span><br><span class="line">    <span class="attribute">width</span>: <span class="number">100%</span>;  </span><br><span class="line">    <span class="attribute">height</span>: auto;  </span><br><span class="line">    <span class="attribute">width</span>: auto\<span class="number">9</span>; <span class="comment">/* ie8 */</span>  </span><br><span class="line">    <span class="attribute">-ms-interpolation-mode</span>: bicubic;<span class="comment">/*为了照顾ie图片缩放失真*/</span>  </span><br><span class="line">&#125;  </span><br><span class="line"><span class="selector-tag">em</span>, <span class="selector-tag">i</span> &#123;  </span><br><span class="line">    <span class="attribute">font-style</span>: normal;  </span><br><span class="line">&#125;  </span><br><span class="line"><span class="selector-tag">textarea</span> &#123;  </span><br><span class="line">    <span class="attribute">resize</span>:none; <span class="comment">/*禁用了文本的拖拉，尤其在谷歌下*/</span>  </span><br><span class="line">&#125;   </span><br><span class="line"><span class="selector-tag">p</span> &#123;  </span><br><span class="line">    <span class="attribute">word-wrap</span>:break-word; <span class="comment">/* 不够的单词自动换行 而不会被截掉 */</span>  </span><br><span class="line">&#125;  </span><br><span class="line"><span class="selector-class">.clearfix</span><span class="selector-pseudo">:after</span> &#123;  </span><br><span class="line">    <span class="attribute">content</span>: <span class="string">""</span>;  </span><br><span class="line">    <span class="attribute">display</span>: block;  </span><br><span class="line">    <span class="attribute">visibility</span>: hidden;  </span><br><span class="line">    <span class="attribute">height</span>: <span class="number">0</span>;  </span><br><span class="line">    <span class="attribute">clear</span>: both;  </span><br><span class="line">&#125;  </span><br><span class="line"><span class="selector-class">.clearfix</span> &#123;  </span><br><span class="line">    <span class="attribute">zoom</span>: <span class="number">1</span>;  </span><br><span class="line">&#125;  </span><br><span class="line"><span class="selector-tag">a</span> &#123;  </span><br><span class="line">    <span class="attribute">text-decoration</span>: none;  </span><br><span class="line">    <span class="attribute">color</span>: <span class="number">#fff</span>;  </span><br><span class="line">    <span class="attribute">font-family</span>: <span class="string">'Microsoft YaHei'</span>, Tahoma, Arial, sans-serif;  </span><br><span class="line">&#125;  </span><br><span class="line"><span class="selector-tag">a</span><span class="selector-pseudo">:hover</span> &#123;  </span><br><span class="line">    <span class="attribute">text-decoration</span>: none;  <span class="attribute">outline</span>: none;</span><br><span class="line"></span><br><span class="line">&#125;  </span><br><span class="line"> </span><br><span class="line"><span class="selector-tag">h1</span>, <span class="selector-tag">h2</span>, <span class="selector-tag">h3</span>, <span class="selector-tag">h4</span>, <span class="selector-tag">h5</span>, <span class="selector-tag">h6</span> &#123;  </span><br><span class="line">    <span class="attribute">font-size</span>: <span class="number">100%</span>;  </span><br><span class="line">    <span class="attribute">font-family</span>: <span class="string">'Microsoft YaHei'</span>;  </span><br><span class="line">&#125;  </span><br><span class="line"><span class="selector-tag">img</span> &#123;  </span><br><span class="line">    <span class="attribute">border</span>: none;  </span><br><span class="line">&#125;  </span><br><span class="line"><span class="selector-tag">input</span>&#123;  </span><br><span class="line">    <span class="attribute">font-family</span>: <span class="string">'Microsoft YaHei'</span>;  </span><br><span class="line">&#125;  </span><br><span class="line"><span class="comment">/*单行溢出*/</span>  </span><br><span class="line"><span class="selector-class">.one-txt-cut</span>&#123;  </span><br><span class="line">    <span class="attribute">overflow</span>: hidden;  </span><br><span class="line">    <span class="attribute">white-space</span>: nowrap;  </span><br><span class="line">    <span class="attribute">text-overflow</span>: ellipsis;  </span><br><span class="line">&#125;  </span><br><span class="line"><span class="comment">/*多行溢出 手机端使用*/</span>  </span><br><span class="line"><span class="selector-class">.txt-cut</span>&#123;  </span><br><span class="line">    <span class="attribute">overflow </span>: hidden;  </span><br><span class="line">    <span class="attribute">text-overflow</span>: ellipsis;  </span><br><span class="line">    <span class="attribute">display</span>: -webkit-box;  </span><br><span class="line">    <span class="comment">/* -webkit-line-clamp: 2; */</span>  </span><br><span class="line">    <span class="attribute">-webkit-box-orient</span>: vertical;  </span><br><span class="line">&#125;  </span><br><span class="line"><span class="comment">/* 移动端点击a链接出现蓝色背景问题解决 */</span>  </span><br><span class="line"><span class="selector-tag">a</span><span class="selector-pseudo">:link</span>,<span class="selector-tag">a</span><span class="selector-pseudo">:active</span>,<span class="selector-tag">a</span><span class="selector-pseudo">:visited</span>,<span class="selector-tag">a</span><span class="selector-pseudo">:hover</span> &#123;  </span><br><span class="line">    <span class="attribute">background</span>: none;  </span><br><span class="line">    <span class="attribute">-webkit-tap-highlight-color</span>: <span class="built_in">rgba</span>(0,0,0,0);  </span><br><span class="line">    <span class="attribute">-webkit-tap-highlight-color</span>: transparent;  </span><br><span class="line">&#125;  </span><br><span class="line"><span class="selector-class">.overflow</span> &#123;<span class="attribute">overflow</span>:hidden; &#125;</span><br><span class="line"></span><br><span class="line"><span class="selector-class">.w50</span>&#123;  </span><br><span class="line">    <span class="attribute">width</span>: <span class="number">50%</span>;  </span><br><span class="line">&#125;  </span><br><span class="line"><span class="selector-class">.w25</span>&#123;  </span><br><span class="line">    <span class="attribute">width</span>: <span class="number">25%</span>;  </span><br><span class="line">&#125;  </span><br><span class="line"><span class="selector-class">.w20</span>&#123;  </span><br><span class="line">    <span class="attribute">width</span>: <span class="number">20%</span>;  </span><br><span class="line">&#125;  </span><br><span class="line"><span class="selector-class">.w33</span>&#123;  </span><br><span class="line">    <span class="attribute">width</span>: <span class="number">33.333333%</span>;  </span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h2 id="移动端布局使用方法rem-他这个和我那个差不多"><a href="#移动端布局使用方法rem-他这个和我那个差不多" class="headerlink" title="移动端布局使用方法rem (他这个和我那个差不多)"></a>移动端布局使用方法rem (他这个和我那个差不多)</h2><h3 id="第一种：js控制html字体大小，-js代码放在head里面"><a href="#第一种：js控制html字体大小，-js代码放在head里面" class="headerlink" title="第一种：js控制html字体大小， js代码放在head里面"></a>第一种：js控制html字体大小， js代码放在head里面</h3><ul><li>html设置初始font-size：320px的字体大小 <figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br></pre></td><td class="code"><pre><span class="line"> <span class="keyword">var</span> html = <span class="built_in">document</span>.getElementsByTagName(<span class="string">'html'</span>)[<span class="number">0</span>];</span><br><span class="line"></span><br><span class="line"><span class="keyword">if</span>(html)&#123;</span><br><span class="line">    <span class="keyword">var</span> w = <span class="built_in">window</span>.innerWidth;</span><br><span class="line">    <span class="keyword">var</span> fontSize = (w&gt;<span class="number">640</span>?<span class="number">640</span>:w)/<span class="number">640</span> *<span class="number">30</span>; 这里最少<span class="number">30</span>，</span><br><span class="line">    html.style.fontSize = fontSize + <span class="string">'px'</span>;</span><br><span class="line">&#125;</span><br><span class="line"><span class="built_in">window</span>.onload = <span class="function"><span class="keyword">function</span>(<span class="params"></span>)</span>&#123;</span><br><span class="line">    <span class="built_in">window</span>.onresize = <span class="function"><span class="keyword">function</span>(<span class="params"></span>)</span>&#123;</span><br><span class="line">        <span class="keyword">var</span> w = <span class="built_in">window</span>.innerWidth;</span><br><span class="line">        <span class="built_in">console</span>.log(w);</span><br><span class="line">        <span class="keyword">var</span> fontSize = (w&gt;<span class="number">640</span>?<span class="number">640</span>:w)/<span class="number">640</span> * <span class="number">30</span>;这里最少<span class="number">30</span>，</span><br><span class="line">        html.style.fontSize = fontSize + <span class="string">'px'</span>;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure></li></ul><h3 id="第二种：js控制html字体大小常用-，js代码放在head里面"><a href="#第二种：js控制html字体大小常用-，js代码放在head里面" class="headerlink" title="第二种：js控制html字体大小常用 ，js代码放在head里面"></a>第二种：js控制html字体大小常用 ，js代码放在head里面</h3><ul><li>html设置初始font-size：320px的字体大小 <figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br></pre></td><td class="code"><pre><span class="line">(<span class="function"><span class="keyword">function</span>(<span class="params">doc, win</span>) </span>&#123;  </span><br><span class="line">    <span class="keyword">var</span> docEl = doc.documentElement;  </span><br><span class="line">    <span class="keyword">var</span> resizeEvt = <span class="string">'orientationchange'</span> <span class="keyword">in</span> <span class="built_in">window</span> ? <span class="string">'orientationchange'</span>: <span class="string">'resize'</span>;   </span><br><span class="line">    <span class="keyword">var</span> recalc = <span class="function"><span class="keyword">function</span>(<span class="params"></span>) </span>&#123;  </span><br><span class="line">        <span class="keyword">var</span> clientWidth = docEl.clientWidth;  </span><br><span class="line">        <span class="keyword">if</span> (!clientWidth)  </span><br><span class="line">            <span class="keyword">return</span>;  </span><br><span class="line">        docEl.style.fontSize = (clientWidth&gt;<span class="number">640</span>?<span class="number">640</span>:clientWidth)/ <span class="number">320</span> *<span class="number">20</span> +  <span class="string">'px'</span>;  </span><br><span class="line">    &#125;;  </span><br><span class="line">    <span class="comment">// 不同浏览器resize事件处理机制不同  </span></span><br><span class="line">    <span class="comment">// 使用定时器延迟处理resize回调函数以降低重复响应  </span></span><br><span class="line">    <span class="keyword">var</span> recalcTimer = <span class="literal">null</span>;  </span><br><span class="line">    <span class="keyword">var</span> delaycalc = <span class="function"><span class="keyword">function</span>(<span class="params"></span>) </span>&#123;  </span><br><span class="line">        win.clearTimeout(recalcTimer);  </span><br><span class="line">        recalcTimer = win.setTimeout(recalc, <span class="number">100</span>);  </span><br><span class="line">    &#125;;  </span><br><span class="line">    <span class="comment">// 移动端不需要考虑事件注册函数的兼容性  </span></span><br><span class="line">    <span class="keyword">if</span> (!doc.addEventListener)  </span><br><span class="line">        <span class="keyword">return</span>;  </span><br><span class="line">    win.addEventListener(resizeEvt, delaycalc, <span class="literal">false</span>);  </span><br><span class="line">    <span class="comment">// DOMContentLoaded事件只在DOM文档树加载完毕触发，此处不用延迟处理  </span></span><br><span class="line"> doc.addEventListener(<span class="string">'DOMContentLoaded'</span>, recalc, <span class="literal">false</span>); </span><br><span class="line">&#125;)(<span class="built_in">document</span>, <span class="built_in">window</span>);</span><br></pre></td></tr></table></figure></li></ul><h3 id="第三种：用媒体查询控制html字体大小（这种也是我用过的看看他着么说）"><a href="#第三种：用媒体查询控制html字体大小（这种也是我用过的看看他着么说）" class="headerlink" title="第三种：用媒体查询控制html字体大小（这种也是我用过的看看他着么说）"></a>第三种：用媒体查询控制html字体大小（这种也是我用过的看看他着么说）</h3><h4 id="一：字体大小为15px开始-常用"><a href="#一：字体大小为15px开始-常用" class="headerlink" title="一：字体大小为15px开始 常用"></a>一：字体大小为15px开始 常用</h4><figure class="highlight css"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br></pre></td><td class="code"><pre><span class="line"><span class="selector-tag">html</span> &#123;</span><br><span class="line">                <span class="attribute">font-size</span>: <span class="number">15px</span></span><br><span class="line">            &#125;</span><br><span class="line"><span class="selector-tag">html</span> &#123;</span><br><span class="line">                <span class="attribute">font-size</span>: <span class="number">4.7vw</span>;</span><br><span class="line">                <span class="comment">/* rem(root element)配合vw(viewport width)  */</span></span><br><span class="line">            &#125;</span><br><span class="line">@<span class="keyword">media</span> only screen and (min-width:<span class="number">320PX</span>) and (max-width:<span class="number">359PX</span>) &#123;</span><br><span class="line">    <span class="selector-tag">html</span> &#123;</span><br><span class="line">        <span class="attribute">font-size</span>: <span class="number">15px</span></span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line">@<span class="keyword">media</span> only screen and (min-width:<span class="number">360PX</span>) and (max-width:<span class="number">374PX</span>) &#123;</span><br><span class="line">    <span class="selector-tag">html</span> &#123;</span><br><span class="line">        <span class="attribute">font-size</span>: <span class="number">16.875px</span></span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line">@<span class="keyword">media</span> only screen and (min-width:<span class="number">375PX</span>) and (max-width:<span class="number">389PX</span>) &#123;</span><br><span class="line">    <span class="selector-tag">html</span> &#123;</span><br><span class="line">        <span class="attribute">font-size</span>: <span class="number">17.5781px</span></span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line">@<span class="keyword">media</span> only screen and (min-width:<span class="number">390PX</span>) and (max-width:<span class="number">400PX</span>) &#123;</span><br><span class="line">    <span class="selector-tag">html</span> &#123;</span><br><span class="line">        <span class="attribute">font-size</span>: <span class="number">18.75px</span></span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line">@<span class="keyword">media</span> only screen and (min-width:<span class="number">401PX</span>) and (max-width:<span class="number">414PX</span>) &#123;</span><br><span class="line">    <span class="selector-tag">html</span> &#123;</span><br><span class="line">        <span class="attribute">font-size</span>: <span class="number">19.4063px</span></span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br><span class="line">@<span class="keyword">media</span> only screen and (min-width:<span class="number">415PX</span>) and (max-width:<span class="number">640PX</span>) &#123;</span><br><span class="line">    <span class="selector-tag">html</span> &#123;</span><br><span class="line">        <span class="attribute">font-size</span>:<span class="number">22.5px</span></span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line">@<span class="keyword">media</span> screen and (min-width:<span class="number">641PX</span>) &#123;</span><br><span class="line">    <span class="selector-tag">html</span> &#123;</span><br><span class="line">        <span class="attribute">font-size</span>: <span class="number">30px</span></span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h4 id="二：字体大小为13-65px-不常用"><a href="#二：字体大小为13-65px-不常用" class="headerlink" title="二：字体大小为13.65px 不常用"></a>二：字体大小为13.65px 不常用</h4><figure class="highlight css"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br></pre></td><td class="code"><pre><span class="line"><span class="selector-tag">html</span> &#123;</span><br><span class="line">           <span class="attribute">font-size</span>: <span class="number">4.2vw</span>;</span><br><span class="line">           <span class="comment">/* rem(root element)配合vw(viewport width)  */</span></span><br><span class="line">       &#125;</span><br><span class="line">       <span class="selector-tag">html</span> &#123;</span><br><span class="line">                <span class="attribute">font-size</span>: <span class="number">13.65px</span></span><br><span class="line">            &#125;</span><br><span class="line">       @<span class="keyword">media</span> only screen and (min-width:<span class="number">320PX</span>) and (max-width:<span class="number">360PX</span>) &#123;</span><br><span class="line">            <span class="selector-tag">html</span> &#123;</span><br><span class="line">                <span class="attribute">font-size</span>: <span class="number">13.65px</span></span><br><span class="line">            &#125;</span><br><span class="line">        &#125;</span><br><span class="line"></span><br><span class="line">        @<span class="keyword">media</span> only screen and (min-width:<span class="number">360PX</span>) and (max-width:<span class="number">375PX</span>) &#123;</span><br><span class="line">            <span class="selector-tag">html</span> &#123;</span><br><span class="line">                <span class="attribute">font-size</span>: <span class="number">15.36px</span></span><br><span class="line">            &#125;</span><br><span class="line">        &#125;</span><br><span class="line"></span><br><span class="line">        @<span class="keyword">media</span> only screen and (min-width:<span class="number">375PX</span>) and (max-width:<span class="number">390PX</span>) &#123;</span><br><span class="line">            <span class="selector-tag">html</span> &#123;</span><br><span class="line">                <span class="attribute">font-size</span>: <span class="number">16px</span></span><br><span class="line">            &#125;</span><br><span class="line">        &#125;</span><br><span class="line"></span><br><span class="line">        @<span class="keyword">media</span> only screen and (min-width:<span class="number">390PX</span>) and (max-width:<span class="number">414PX</span>) &#123;</span><br><span class="line">            <span class="selector-tag">html</span> &#123;</span><br><span class="line">                <span class="attribute">font-size</span>: <span class="number">16.64px</span></span><br><span class="line">            &#125;</span><br><span class="line">        &#125;</span><br><span class="line"></span><br><span class="line">        @<span class="keyword">media</span> only screen and (min-width:<span class="number">414PX</span>) and (max-width:<span class="number">460PX</span>) &#123;</span><br><span class="line">            <span class="selector-tag">html</span> &#123;</span><br><span class="line">                <span class="attribute">font-size</span>: <span class="number">17.664px</span></span><br><span class="line">            &#125;</span><br><span class="line">        &#125;</span><br><span class="line">        @<span class="keyword">media</span> only screen and (min-width:<span class="number">460PX</span>) and (max-width:<span class="number">640PX</span>) &#123;</span><br><span class="line">            <span class="selector-tag">html</span> &#123;</span><br><span class="line">                <span class="attribute">font-size</span>: <span class="number">20px</span></span><br><span class="line">            &#125;</span><br><span class="line">        &#125;</span><br><span class="line">        @<span class="keyword">media</span> screen and (min-width:<span class="number">640PX</span>) &#123;</span><br><span class="line">            <span class="selector-tag">html</span> &#123;</span><br><span class="line">                <span class="attribute">font-size</span>: <span class="number">27.31px</span></span><br><span class="line">            &#125;</span><br><span class="line">        &#125;</span><br></pre></td></tr></table></figure><h2 id="移动端布局用flex和自动缩放"><a href="#移动端布局用flex和自动缩放" class="headerlink" title="移动端布局用flex和自动缩放"></a>移动端布局用flex和自动缩放</h2><ul><li>新旧版本兼容：这里设置flex容器为.box，子元素为.item</li></ul><h3 id="Flex-布局"><a href="#Flex-布局" class="headerlink" title="Flex 布局"></a>Flex 布局</h3><figure class="highlight css"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><span class="line"><span class="selector-class">.box</span>&#123;</span><br><span class="line"> <span class="attribute">display</span>: -ms-flexbox; </span><br><span class="line"> <span class="attribute">display</span>: -webkit-flex; </span><br><span class="line"> <span class="attribute">display</span>: flex; </span><br><span class="line"> <span class="attribute">display</span>: -webkit-box; </span><br><span class="line"> <span class="attribute">display</span>: -moz-box; </span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>旧版：display：box<br>新版：display：flex</p><h3 id="定义主轴的方向"><a href="#定义主轴的方向" class="headerlink" title="定义主轴的方向"></a>定义主轴的方向</h3><ul><li><p>水平方向</p><figure class="highlight css"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><span class="line"><span class="selector-class">.box</span>&#123; </span><br><span class="line">  <span class="attribute">-moz-flex-direction</span>: row; </span><br><span class="line">  <span class="attribute">-webkit-flex-direction</span>: row;</span><br><span class="line">  <span class="attribute">flex-direction</span>: row;</span><br><span class="line">  <span class="attribute">-webkit-box-direction</span>: normal; </span><br><span class="line">  <span class="attribute">-webkit-box-orient</span>: horizontal; </span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure></li><li><p>垂直方向</p><figure class="highlight css"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><span class="line"><span class="selector-class">.box</span>&#123;</span><br><span class="line"> <span class="attribute">-moz-flex-direction</span>: column;</span><br><span class="line"> <span class="attribute">-webkit-flex-direction</span>: column;</span><br><span class="line"> <span class="attribute">flex-direction</span>: column;</span><br><span class="line"> <span class="attribute">-webkit-box-direction</span>: normal;</span><br><span class="line"> <span class="attribute">-webkit-box-orient</span>: vertical;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure></li></ul><hr><p>旧版：box-direction: normal 水平方向 | reverse 垂直方向 | inherit ，跟子元素的方向一致; 定义子元素的显示方向。</p><pre><code> box-orient: horizontal  水平排列| vertical 垂直排列| inline-axis 默认 | block-axis 快方式排列 | inherit继承父元素; 定义子元素是否应水平或垂直排列。这两种要同时设置才能确定排列方式；水平方向：box-direction: normal；box-orient: horizontal垂直方向：box-direction: normal； box-orient:vertical</code></pre><p>新版：flex-direction：row（默认值）：主轴为水平方向，起点在左端。</p><pre><code>row-reverse：主轴为水平方向，起点在右端。column：主轴为垂直方向，起点在上沿。column-reverse：主轴为垂直方向，起点在下沿。</code></pre><h3 id="子元素主轴对齐方式"><a href="#子元素主轴对齐方式" class="headerlink" title="子元素主轴对齐方式"></a>子元素主轴对齐方式</h3><figure class="highlight css"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line"><span class="selector-class">.box</span>&#123;</span><br><span class="line"> <span class="attribute">-moz-justify-content</span>: center;</span><br><span class="line"> <span class="attribute">-webkit-justify-content</span>: center;</span><br><span class="line"> <span class="attribute">justify-content</span>: center;</span><br><span class="line"> <span class="attribute">-webkit-box-pack</span>: center;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>旧版： box-pack: start | end | center | justify;</p><p>注意：兼容写法新版语法的space-around是不可用的 </p><p>新版：justify-content：flex-start（默认值）：左对齐</p><pre><code>flex-end：右对齐center： 居中space-between：两端对齐，项目之间的间隔都相等。space-around：每个项目两侧的间隔相等。所以，项目之间的间隔比项目与边框的间隔大一倍。</code></pre><h3 id="子元素交叉轴对齐方式"><a href="#子元素交叉轴对齐方式" class="headerlink" title="子元素交叉轴对齐方式"></a>子元素交叉轴对齐方式</h3><figure class="highlight css"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line"><span class="selector-class">.box</span>&#123;</span><br><span class="line"> <span class="attribute">-moz-align-items</span>: center;</span><br><span class="line"> <span class="attribute">-webkit-align-items</span>: center;</span><br><span class="line"> <span class="attribute">align-items</span>: center;</span><br><span class="line"> <span class="attribute">-webkit-box-align</span>: center;                                                                                </span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>旧版： box-align: start | end | center | baseline | stretch;</p><p>新版：align-items：flex-start：交叉轴的起点对齐。<br>                              flex-end：交叉轴的终点对齐。<br>                              center：交叉轴的中点对齐。<br>                              baseline: 项目的第一行文字的基线对齐。<br>                              stretch（默认值）：如果项目未设置高度或设为auto，将占满整个容器的高度。</p><h3 id="子元素属性：子元素在水平或者垂直方向占几分"><a href="#子元素属性：子元素在水平或者垂直方向占几分" class="headerlink" title="子元素属性：子元素在水平或者垂直方向占几分"></a>子元素属性：子元素在水平或者垂直方向占几分</h3><figure class="highlight css"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line"><span class="selector-class">.item</span>&#123;</span><br><span class="line"> <span class="attribute">-moz-flex</span>: <span class="number">1</span>;</span><br><span class="line"> <span class="attribute">-webkit-flex</span>: <span class="number">1</span>;</span><br><span class="line"> <span class="attribute">flex</span>: <span class="number">1</span>;</span><br><span class="line"> <span class="attribute">-webkit-box-flex</span>: <span class="number">1.0</span>;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>旧版：box-flex：1.0浮点数字<br>新版：flex：1 数字</p><h3 id="超出要不要换行-不兼容，就是兼容了也无效"><a href="#超出要不要换行-不兼容，就是兼容了也无效" class="headerlink" title="超出要不要换行 不兼容，就是兼容了也无效"></a>超出要不要换行 不兼容，就是兼容了也无效</h3><ul><li>要求换行<figure class="highlight css"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line"><span class="selector-class">.box</span>&#123;</span><br><span class="line"> <span class="attribute">flex-wrap</span>:wrap;</span><br><span class="line"> <span class="attribute">box-lines</span>: multiple; </span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure></li></ul><p>旧版： box-lines: single默认不允许 | multiple 允许;</p><p>新版：flex-wrap: nowrap 不换行</p><pre><code>wrap 换行，第一行在上方wrap-reverse 换行，第一行在下方</code></pre><h3 id="新版的其他语法"><a href="#新版的其他语法" class="headerlink" title="新版的其他语法"></a>新版的其他语法</h3><ol><li><p>行内元素也可以定义flex语法：不常用</p><figure class="highlight css"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line"><span class="selector-class">.box</span>&#123;</span><br><span class="line">  <span class="attribute">display</span>: -webkit-inline-flex;</span><br><span class="line">  <span class="attribute">display</span>: inline-flex;</span><br><span class="line">&#125;：</span><br></pre></td></tr></table></figure></li><li><p>父元素属性align-content属性 定义在多跟抽线的对齐方式，一般是换行以后的对齐方式，只有一条抽线改属性不生效，常用在换行以后有间距的问题：设置align-content：flex-start； 不常用</p><p>align-content：flex-start：与交叉轴的起点对齐。</p><pre><code>flex-end：与交叉轴的终点对齐。center：与交叉轴的中点对齐。space-between：与交叉轴两端对齐，轴线之间的间隔平均分布。space-around：每根轴线两侧的间隔都相等。所以，轴线之间的间隔比轴线与边框的间隔大一倍。stretch（默认值）：轴线占满整个交叉轴。</code></pre></li><li><p>子元素属性flex，是flex-grow, flex-shrink 和 flex-basis的简写，一般只定义子元素占多少份，常用</p></li><li><p>子元素属性flex-grow 定义子元素占一行的多少份，值为数字  不常用</p></li></ol><p>05、子元素属性flex-basis属性  定义了在分配多余空间之前，项目占据的主轴空间 像素单位和百分比，默认auto</p><ol start="6"><li><p>子元素属性flex-shrink属性 定义了子元素的缩小比例，如果所有项目的flex-shrink属性都为1，当空间不足时，都将等比例缩小。如果一个项目的flex-shrink属性为0，其他项目都为1，则空间不足时，前者不缩小。负值无效</p></li><li><p>子元素属性order属性  定义子元素的排列方式，数值越小，越靠前排列，数字</p></li><li><p>子元素属性align-self属性 定义允许单个项目有与其他项目不一样的对齐方式，会覆盖algin-items属性 不常用</p><pre><code>align-self: auto  默认  表示继承父元素                            flex-start  与交叉轴的起点对齐。                 flex-end  与交叉轴的终点对齐。                 center  与交叉轴的中点对齐                 baseline: 项目的第一行文字的基线对齐。            stretch（默认值）：如果项目未设置高度或设为auto，将占满整个容器的高度。</code></pre></li></ol><h3 id="兼容无效"><a href="#兼容无效" class="headerlink" title="兼容无效"></a>兼容无效</h3><p> justify-content: space-around 不能用</p><pre><code>flex-wrap: wrap 不能用</code></pre><h3 id="flex兼容的标准写法"><a href="#flex兼容的标准写法" class="headerlink" title="flex兼容的标准写法"></a>flex兼容的标准写法</h3><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line">-webkit-前缀标准版</span><br><span class="line">-moz-前缀标准版</span><br><span class="line">标准版</span><br><span class="line">-webkit-前缀09版</span><br></pre></td></tr></table></figure><ul><li>试例<figure class="highlight css"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><span class="line"><span class="selector-class">.box</span>&#123;</span><br><span class="line"> <span class="attribute">display</span>: -ms-flexbox; </span><br><span class="line"> <span class="attribute">display</span>: -webkit-flex; </span><br><span class="line"> <span class="attribute">display</span>: flex; </span><br><span class="line"> <span class="attribute">display</span>: -webkit-box; </span><br><span class="line"> <span class="attribute">display</span>: -moz-box; </span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure></li></ul><h3 id="新版的语法"><a href="#新版的语法" class="headerlink" title="新版的语法"></a>新版的语法</h3><p>定义flex:<br><figure class="highlight css"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br></pre></td><td class="code"><pre><span class="line"><span class="selector-class">.box</span>&#123;</span><br><span class="line">    <span class="attribute">display</span>: -webkit-flex; <span class="comment">/*webkit*/</span></span><br><span class="line">    <span class="attribute">display</span>: flex;</span><br><span class="line">&#125;</span><br><span class="line"><span class="comment">/*行内flex*/</span></span><br><span class="line"><span class="selector-class">.box</span>&#123;</span><br><span class="line">    <span class="attribute">display</span>: -webkit-inline-flex; <span class="comment">/*webkit*/</span></span><br><span class="line">    <span class="attribute">display</span>:inline-flex;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure></p><p>父元素属性：<br><figure class="highlight css"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br></pre></td><td class="code"><pre><span class="line"><span class="selector-class">.box</span>&#123;</span><br><span class="line">    <span class="attribute">flex-direction</span>:    row      | row-reverse | column | column-reverse;</span><br><span class="line">         <span class="comment">/*主轴方向：左到右（默认） |   右到左    | 上到下 | 下到上*/</span></span><br><span class="line"> </span><br><span class="line">    <span class="attribute">flex-wrap</span>:    nowrap   | wrap | wrap-reverse;</span><br><span class="line">       <span class="comment">/*换行：不换行（默认） | 换行 | 换行并第一行在下方*/</span></span><br><span class="line"> </span><br><span class="line">    <span class="attribute">flex-flow</span>: &lt;flex-direction&gt; || &lt;flex-wrap&gt;;</span><br><span class="line">     <span class="comment">/*主轴方向和换行简写*/</span></span><br><span class="line"> </span><br><span class="line">    <span class="attribute">justify-content</span>:   flex-start   | flex-end |   center | space-between | space-around;</span><br><span class="line">        <span class="comment">/*主轴对齐方式： 左对齐（默认） |  右对齐  | 居中对齐 |     两端对齐  | 平均分布*/</span></span><br><span class="line"> </span><br><span class="line">    <span class="attribute">align-items</span>:         flex-start    | flex-end | center   | baseline       | stretch;</span><br><span class="line">        <span class="comment">/*交叉轴对齐方式：顶部对齐（默认） | 底部对齐 | 居中对齐 | 上下对齐并铺满 | 文本基线对齐*/</span></span><br><span class="line"> </span><br><span class="line">    <span class="attribute">align-content</span>: flex-start      | flex-end | center   | space-between  | space-around | stretch;</span><br><span class="line">        <span class="comment">/*多主轴对齐：顶部对齐（默认） | 底部对齐   | 居中对齐  | 上下对齐并铺满  | 上下平均分布*/</span></span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure></p><p>子元素属性：<br><figure class="highlight css"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br></pre></td><td class="code"><pre><span class="line"><span class="selector-class">.item</span>&#123;</span><br><span class="line">    order: &lt;integer&gt;; number</span><br><span class="line">    <span class="comment">/*排序：数值越小，越排前，默认为0*/</span></span><br><span class="line"> </span><br><span class="line">    <span class="selector-tag">flex-grow</span>: &lt;<span class="selector-tag">number</span>&gt;; <span class="comment">/* default 0 */</span></span><br><span class="line">    <span class="comment">/*放大：默认0（即如果有剩余空间也不放大，值为1则放大，2是1的双倍大小，以此类推）*/</span></span><br><span class="line"> </span><br><span class="line">    <span class="selector-tag">flex-shrink</span>: &lt;<span class="selector-tag">number</span>&gt;; <span class="comment">/* default 1 */</span></span><br><span class="line">    <span class="comment">/*缩小：默认1（如果空间不足则会缩小，值为0不缩小）*/</span></span><br><span class="line"> </span><br><span class="line">    flex-basis: &lt;length&gt; | auto; /* default auto */</span><br><span class="line">    <span class="comment">/*固定大小：默认为0，可以设置px值，也可以设置百分比大小*/</span></span><br><span class="line"> </span><br><span class="line">    flex: none | [ &lt;'flex-grow'&gt; &lt;'flex-shrink'&gt;? || &lt;'flex-basis'&gt; ]</span><br><span class="line">    <span class="comment">/*flex-grow, flex-shrink 和 flex-basis的简写，默认值为0 1 auto，*/</span></span><br><span class="line"> </span><br><span class="line">    align-self:         auto     | flex-start | flex-end | center   |  baseline      | stretch;</span><br><span class="line">       <span class="comment">/*单独对齐方式：自动（默认） | 顶部对齐   | 底部对齐 | 居中对齐 | 上下对齐并铺满 | 文本基线对齐*/</span></span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure></p><h1 id="后记"><a href="#后记" class="headerlink" title="后记"></a>后记</h1><ul><li>前面是使用过的解决方案后面这些是网上摘录的一些方法，侵权立删</li><li><a href="https://yhf7.github.io/" target="_blank" rel="noopener">欢迎进入我的博客</a>：<a href="https://yhf7.github.io/" target="_blank" rel="noopener">https://yhf7.github.io/</a></li><li>如果有什么侵权的话，请及时添加小编微信以及qq也可以来告诉小编（905477376微信qq通用），谢谢！</li></ul>]]></content>
    
    <summary type="html">
    
      
      
        &lt;link rel=&quot;stylesheet&quot; class=&quot;aplayer-secondary-style-marker&quot; href=&quot;/assets/css/APlayer.min.css&quot;&gt;&lt;script src=&quot;/assets/js/APlayer.min.js&quot; cla
      
    
    </summary>
    
      <category term="Css" scheme="http://yoursite.com/categories/Css/"/>
    
    
      <category term="Css笔记" scheme="http://yoursite.com/tags/Css%E7%AC%94%E8%AE%B0/"/>
    
  </entry>
  
  <entry>
    <title>TypeScript 自学笔记4 类</title>
    <link href="http://yoursite.com/2019/03/10/TypeScript%E7%AC%94%E8%AE%B04/"/>
    <id>http://yoursite.com/2019/03/10/TypeScript笔记4/</id>
    <published>2019-03-10T04:31:07.830Z</published>
    <updated>2019-03-11T13:04:57.121Z</updated>
    
    <content type="html"><![CDATA[<link rel="stylesheet" class="aplayer-secondary-style-marker" href="/assets/css/APlayer.min.css"><script src="/assets/js/APlayer.min.js" class="aplayer-secondary-script-marker"></script><h1 id="前言"><a href="#前言" class="headerlink" title="前言"></a>前言</h1><ul><li>自学TypeScript第四天</li><li>今天对学过java的很友好基本上都是后端的东西</li></ul><h1 id="介绍"><a href="#介绍" class="headerlink" title="介绍"></a>介绍</h1><ul><li>传统的JavaScript程序使用函数和基于原型的继承来创建可重用的组件，但对于熟悉使用面向对象方式的程序员来讲就有些棘手，因为他们用的是基于类的继承并且对象是由类构建出来的。 从ECMAScript 2015，也就是ECMAScript 6开始，JavaScript程序员将能够使用基于类的面向对象的方式。 使用TypeScript，我们允许开发者现在就使用这些特性，并且编译后的JavaScript可以在所有主流浏览器和平台上运行，而不需要等到下个JavaScript版本。</li></ul><h1 id="类"><a href="#类" class="headerlink" title="类"></a>类</h1><ul><li>类我们学过后端的话对这个就会非常的熟悉，类在后端是一个非常常用的属性，在es6开始js增加了类</li><li>这个添加对很多开发者来说算是一个福音</li><li><p>如果你使用过C#或Java，你会对这种语法非常熟悉。 我们声明一个 Greeter类。这个类有3个成员：一个叫做 greeting的属性，一个构造函数和一个 greet方法。</p></li><li><p>你会注意到，我们在引用任何一个类成员的时候都用了 this。 它表示我们访问的是类的成员。</p></li><li><p>最后一行，我们使用 new构造了 Greeter类的一个实例。 它会调用之前定义的构造函数，创建一个 Greeter类型的新对象，并执行构造函数初始化它。</p></li><li>作为一个学过后端的人，我对这一个类感到非常熟悉也很容易上手</li></ul><figure class="highlight typescript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">class</span> Greeter &#123;</span><br><span class="line">    greeting: <span class="built_in">string</span>;</span><br><span class="line">    <span class="keyword">constructor</span>(<span class="params">message: <span class="built_in">string</span></span>) &#123;</span><br><span class="line">        <span class="keyword">this</span>.greeting = message;</span><br><span class="line">    &#125;</span><br><span class="line">    greet() &#123;</span><br><span class="line">        <span class="keyword">return</span> <span class="string">"Hello, "</span> + <span class="keyword">this</span>.greeting;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="keyword">let</span> greeter = <span class="keyword">new</span> Greeter(<span class="string">"world"</span>);</span><br><span class="line"></span><br><span class="line"><span class="built_in">console</span>.log(greeter.greet())</span><br></pre></td></tr></table></figure><h1 id="继承"><a href="#继承" class="headerlink" title="继承"></a>继承</h1><ul><li>继承也是很常见的</li><li>在TypeScript里，我们可以使用常用的面向对象模式。 基于类的程序设计中一种最基本的模式是允许使用继承来扩展现有的类。</li><li><p>很简单的说就是，儿子继承了爸爸的所有东西</p><figure class="highlight typescript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">class</span> Animal &#123;</span><br><span class="line">    move(distanceInMeters: <span class="built_in">number</span> = <span class="number">0</span>) &#123;</span><br><span class="line">        <span class="built_in">console</span>.log(<span class="string">`Animal moved <span class="subst">$&#123;distanceInMeters&#125;</span>m.`</span>);</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="keyword">class</span> Dog <span class="keyword">extends</span> Animal &#123;</span><br><span class="line">    bark() &#123;</span><br><span class="line">        <span class="built_in">console</span>.log(<span class="string">'Woof! Woof!'</span>);</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="keyword">const</span> dog = <span class="keyword">new</span> Dog();</span><br><span class="line">dog.bark();</span><br><span class="line">dog.move(<span class="number">10</span>);</span><br><span class="line">dog.bark();</span><br></pre></td></tr></table></figure></li><li><p>这个例子展示了最基本的继承：类从基类中继承了属性和方法。 这里， Dog是一个 派生类，它派生自 Animal 基类，通过 extends关键字。 派生类通常被称作 子类，基类通常被称作 超类。</p></li></ul><hr><ul><li>这个例子展示了一些上面没有提到的特性。 这一次，我们使用 extends关键字创建了 Animal的两个子类： Horse和 Snake。</li><li>与前一个例子的不同点是，派生类包含了一个构造函数，它 必须调用 super()，它会执行基类的构造函数。 而且，在构造函数里访问 this的属性之前，我们 一定要调用 super()。 这个是TypeScript强制执行的一条重要规则。</li><li>这个例子演示了如何在子类里可以重写父类的方法。 Snake类和 Horse类都创建了 move方法，它们重写了从 Animal继承来的 move方法，使得 move方法根据不同的类而具有不同的功能。 注意，即使 tom被声明为 Animal类型，但因为它的值是 Horse，调用 tom.move(34)时，它会调用 Horse里重写的方法：<figure class="highlight typescript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">class</span> Animal &#123;</span><br><span class="line">    <span class="comment">// 属性</span></span><br><span class="line">    name: <span class="built_in">string</span>;</span><br><span class="line">    <span class="comment">// 构造函数</span></span><br><span class="line">    <span class="keyword">constructor</span>(<span class="params">theName: <span class="built_in">string</span></span>) &#123; <span class="keyword">this</span>.name = theName; &#125;</span><br><span class="line">    <span class="comment">// 内部方法</span></span><br><span class="line">    move(distanceInMeters: <span class="built_in">number</span> = <span class="number">0</span>) &#123;</span><br><span class="line">        <span class="built_in">console</span>.log(<span class="string">`<span class="subst">$&#123;this.name&#125;</span> moved <span class="subst">$&#123;distanceInMeters&#125;</span>m.`</span>);</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="keyword">class</span> Snake <span class="keyword">extends</span> Animal &#123;</span><br><span class="line">    <span class="comment">// 构造函数，super调用父级构造函数</span></span><br><span class="line">    <span class="keyword">constructor</span>(<span class="params">name: <span class="built_in">string</span></span>) &#123; <span class="keyword">super</span>(name); &#125;</span><br><span class="line">    <span class="comment">// 子类重写方法</span></span><br><span class="line">    move(distanceInMeters = <span class="number">5</span>) &#123;</span><br><span class="line">        <span class="built_in">console</span>.log(<span class="string">"Slithering..."</span>);</span><br><span class="line">        <span class="comment">// 内部调用了父级的方法</span></span><br><span class="line">        <span class="keyword">super</span>.move(distanceInMeters);</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="keyword">class</span> Horse <span class="keyword">extends</span> Animal &#123;</span><br><span class="line">    <span class="keyword">constructor</span>(<span class="params">name: <span class="built_in">string</span></span>) &#123; <span class="keyword">super</span>(name); &#125;</span><br><span class="line">    move(distanceInMeters = <span class="number">45</span>) &#123;</span><br><span class="line">        <span class="built_in">console</span>.log(<span class="string">"Galloping..."</span>);</span><br><span class="line">        <span class="keyword">super</span>.move(distanceInMeters);</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="keyword">let</span> sam = <span class="keyword">new</span> Snake(<span class="string">"Sammy the Python"</span>);</span><br><span class="line"><span class="keyword">let</span> tom: Animal = <span class="keyword">new</span> Horse(<span class="string">"Tommy the Palomino"</span>);</span><br><span class="line"></span><br><span class="line">sam.move();</span><br><span class="line">tom.move(<span class="number">34</span>);</span><br></pre></td></tr></table></figure></li></ul><h1 id="公共，私有与受保护的修饰符"><a href="#公共，私有与受保护的修饰符" class="headerlink" title="公共，私有与受保护的修饰符"></a>公共，私有与受保护的修饰符</h1><h2 id="默认-public-公共类型"><a href="#默认-public-公共类型" class="headerlink" title="默认 public 公共类型"></a>默认 public 公共类型</h2><ul><li>我以前学习java的时候这个属性的要写出来的</li><li>但是js给我们默认了<figure class="highlight typescript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">class</span> Animal &#123;</span><br><span class="line">    <span class="keyword">public</span> name: <span class="built_in">string</span>;</span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">constructor</span>(<span class="params">theName: <span class="built_in">string</span></span>) &#123; <span class="keyword">this</span>.name = theName; &#125;</span><br><span class="line">    <span class="keyword">public</span> move(distanceInMeters: <span class="built_in">number</span>) &#123;</span><br><span class="line">        <span class="built_in">console</span>.log(<span class="string">`<span class="subst">$&#123;this.name&#125;</span> moved <span class="subst">$&#123;distanceInMeters&#125;</span>m.`</span>);</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="comment">// 我们平时都是这么写的</span></span><br><span class="line"><span class="keyword">class</span> Animal &#123;</span><br><span class="line">    name: <span class="built_in">string</span>;</span><br><span class="line">    <span class="keyword">constructor</span>(<span class="params">theName: <span class="built_in">string</span></span>) &#123; <span class="keyword">this</span>.name = theName; &#125;</span><br><span class="line">    move(distanceInMeters: <span class="built_in">number</span>) &#123;</span><br><span class="line">        <span class="built_in">console</span>.log(<span class="string">`<span class="subst">$&#123;this.name&#125;</span> moved <span class="subst">$&#123;distanceInMeters&#125;</span>m.`</span>);</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure></li></ul><h2 id="理解-private-私有化"><a href="#理解-private-私有化" class="headerlink" title="理解 private 私有化"></a>理解 private 私有化</h2><ul><li>private 就是私有化，简单点说就是唯独我有，你们虽都不可以用只可以我自己用</li><li>我自己拥有的连儿子都不可用唯独我自己可以用</li></ul><figure class="highlight typescript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">class</span> Animal &#123;</span><br><span class="line">    <span class="keyword">private</span> name: <span class="built_in">string</span>;</span><br><span class="line">    <span class="keyword">constructor</span>(<span class="params">theName: <span class="built_in">string</span></span>) &#123; <span class="keyword">this</span>.name = theName; &#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="comment">// 定义使用报错</span></span><br><span class="line"><span class="keyword">new</span> Animal(<span class="string">"Cat"</span>).name; <span class="comment">// 错误: 'name' 是私有的.</span></span><br><span class="line"></span><br><span class="line"><span class="comment">// 我们来试试在继承中能不能用，儿子继承父亲的东西</span></span><br><span class="line"></span><br><span class="line"><span class="keyword">class</span> Test &#123;</span><br><span class="line">    <span class="keyword">constructor</span>(<span class="params">test: <span class="built_in">string</span></span>) &#123;</span><br><span class="line">        <span class="keyword">super</span>(test)</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    Test () &#123;</span><br><span class="line">        <span class="built_in">console</span>.log(<span class="keyword">this</span>.name) <span class="comment">// 注意了，这样也是错误的</span></span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><hr><ul><li>其实就是说不是同一个爸爸生出来的都不算有关系。</li><li>TypeScript使用的是结构性类型系统。 当我们比较两种不同的类型时，并不在乎它们从何处而来，如果所有成员的类型都是兼容的，我们就认为它们的类型是兼容的</li><li>然而，当我们比较带有 private或 protected成员的类型的时候，情况就不同了。 如果其中一个类型里包含一个 private成员，那么只有当另外一个类型中也存在这样一个 private成员， 并且它们都是来自同一处声明时，我们才认为这两个类型是兼容的。 对于 protected成员也使用这个规则</li><li>这个例子中有 Animal和 Rhino两个类， Rhino是 Animal类的子类。 还有一个 Employee类，其类型看上去与 Animal是相同的。 我们创建了几个这些类的实例，并相互赋值来看看会发生什么。 因为 Animal和 Rhino共享了来自 Animal里的私有成员定义 private name: string，因此它们是兼容的。 然而 Employee却不是这样。当把 Employee赋值给 Animal的时候，得到一个错误，说它们的类型不兼容。 尽管 Employee里也有一个私有成员 name，但它明显不是 Animal里面定义的那个。<figure class="highlight typescript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">class</span> Animal &#123;</span><br><span class="line">    <span class="keyword">private</span> name: <span class="built_in">string</span>;</span><br><span class="line">    <span class="keyword">constructor</span>(<span class="params">theName: <span class="built_in">string</span></span>) &#123; <span class="keyword">this</span>.name = theName; &#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="keyword">class</span> Rhino <span class="keyword">extends</span> Animal &#123;</span><br><span class="line">    <span class="keyword">constructor</span>(<span class="params"></span>) &#123; <span class="keyword">super</span>(<span class="string">"Rhino"</span>); &#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="keyword">class</span> Employee &#123;</span><br><span class="line">    <span class="keyword">private</span> name: <span class="built_in">string</span>;</span><br><span class="line">    <span class="keyword">constructor</span>(<span class="params">theName: <span class="built_in">string</span></span>) &#123; <span class="keyword">this</span>.name = theName; &#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="keyword">let</span> animal = <span class="keyword">new</span> Animal(<span class="string">"Goat"</span>);</span><br><span class="line"><span class="keyword">let</span> rhino = <span class="keyword">new</span> Rhino();</span><br><span class="line"><span class="keyword">let</span> employee = <span class="keyword">new</span> Employee(<span class="string">"Bob"</span>);</span><br><span class="line"></span><br><span class="line">animal = rhino;</span><br><span class="line">animal = employee</span><br></pre></td></tr></table></figure></li></ul><h1 id="理解-protected-（比私有低一个级别）"><a href="#理解-protected-（比私有低一个级别）" class="headerlink" title="理解 protected （比私有低一个级别）"></a>理解 protected （比私有低一个级别）</h1><ul><li>和私有化几乎一模一样</li><li>这个属性比私有化低一个级别，儿子可以用了</li><li>在继承中还是可以使用的</li></ul><ol><li>属性<figure class="highlight typescript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">// 这个例子比较经典</span></span><br><span class="line"><span class="keyword">class</span> Person &#123;</span><br><span class="line">    <span class="keyword">protected</span> name: <span class="built_in">string</span>;</span><br><span class="line">    <span class="keyword">constructor</span>(<span class="params">name: <span class="built_in">string</span></span>) &#123; <span class="keyword">this</span>.name = name; &#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="comment">// 继承</span></span><br><span class="line"><span class="keyword">class</span> Employee <span class="keyword">extends</span> Person &#123;</span><br><span class="line">    <span class="keyword">private</span> department: <span class="built_in">string</span>;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">constructor</span>(<span class="params">name: <span class="built_in">string</span>, department: <span class="built_in">string</span></span>) &#123;</span><br><span class="line">        <span class="keyword">super</span>(name)</span><br><span class="line">        <span class="keyword">this</span>.department = department;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">public</span> getElevatorPitch() &#123;</span><br><span class="line">        <span class="comment">// 继承类里面是可以使用父级的name的</span></span><br><span class="line">        <span class="keyword">return</span> <span class="string">`Hello, my name is <span class="subst">$&#123;this.name&#125;</span> and I work in <span class="subst">$&#123;this.department&#125;</span>.`</span>;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="keyword">let</span> howard = <span class="keyword">new</span> Employee(<span class="string">"Howard"</span>, <span class="string">"Sales"</span>);</span><br><span class="line"><span class="built_in">console</span>.log(howard.getElevatorPitch());</span><br><span class="line"><span class="comment">// 外面就不可用了</span></span><br><span class="line"><span class="built_in">console</span>.log(howard.name); <span class="comment">// 错误</span></span><br></pre></td></tr></table></figure></li></ol><hr><ol start="2"><li>构造函数也是可以被保护起来的</li></ol><ul><li>在外面是无法使用的哈哈哈，起到了很好的保护作用<figure class="highlight typescript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">class</span> Person &#123;</span><br><span class="line">    <span class="keyword">protected</span> name: <span class="built_in">string</span>;</span><br><span class="line">    <span class="keyword">protected</span> <span class="keyword">constructor</span>(<span class="params">theName: <span class="built_in">string</span></span>) &#123; <span class="keyword">this</span>.name = theName; &#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="comment">// Employee 能够继承 Person</span></span><br><span class="line"><span class="keyword">class</span> Employee <span class="keyword">extends</span> Person &#123;</span><br><span class="line">    <span class="keyword">private</span> department: <span class="built_in">string</span>;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">constructor</span>(<span class="params">name: <span class="built_in">string</span>, department: <span class="built_in">string</span></span>) &#123;</span><br><span class="line">        <span class="keyword">super</span>(name);</span><br><span class="line">        <span class="keyword">this</span>.department = department;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">public</span> getElevatorPitch() &#123;</span><br><span class="line">        <span class="keyword">return</span> <span class="string">`Hello, my name is <span class="subst">$&#123;this.name&#125;</span> and I work in <span class="subst">$&#123;this.department&#125;</span>.`</span>;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="keyword">let</span> howard = <span class="keyword">new</span> Employee(<span class="string">"Howard"</span>, <span class="string">"Sales"</span>);</span><br><span class="line"><span class="keyword">let</span> john = <span class="keyword">new</span> Person(<span class="string">"John"</span>); <span class="comment">// 错误: 'Person' 的构造函数是被保护的.</span></span><br></pre></td></tr></table></figure></li></ul><h1 id="readonly修饰符-（只读）"><a href="#readonly修饰符-（只读）" class="headerlink" title="readonly修饰符 （只读）"></a>readonly修饰符 （只读）</h1><ul><li>你可以使用 readonly关键字将属性设置为只读的。 只读属性必须在声明时或构造函数里被初始化</li><li>说白了只能看看不能改变，一开始就定义好</li><li>就好像你妈打你只能挨着不能还手<figure class="highlight typescript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">class</span> Octopus &#123;</span><br><span class="line">    readonly name: <span class="built_in">string</span>;</span><br><span class="line">    readonly numberOfLegs: <span class="built_in">number</span> = <span class="number">8</span>;</span><br><span class="line">    <span class="keyword">constructor</span> (<span class="params">theName: <span class="built_in">string</span></span>) &#123;</span><br><span class="line">        <span class="keyword">this</span>.name = theName;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br><span class="line"><span class="keyword">let</span> dad = <span class="keyword">new</span> Octopus(<span class="string">"Man with the 8 strong legs"</span>);</span><br><span class="line">dad.name = <span class="string">"Man with the 3-piece suit"</span>; <span class="comment">// 错误! name 是只读的.</span></span><br></pre></td></tr></table></figure></li></ul><hr><h2 id="参数属性"><a href="#参数属性" class="headerlink" title="参数属性"></a>参数属性</h2><ul><li>参数的自带属性然我们可以减少一些写法</li><li>在上面的例子中，我们必须在Octopus类里定义一个只读成员 name和一个参数为 theName的构造函数，并且立刻将 theName的值赋给 name，这种情况经常会遇到。 参数属性可以方便地让我们在一个地方定义并初始化一个成员。 下面的例子是对之前 Octopus类的修改版，使用了参数属性：</li><li>参数属性通过给构造函数参数前面添加一个访问限定符来声明。 使用 private限定一个参数属性会声明并初始化一个私有成员；对于 public和 protected来说也是一样。<figure class="highlight typescript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">// 在这里可以验证，自读属性会自动初始化一个私有成员</span></span><br><span class="line"><span class="keyword">class</span> Octopus &#123;</span><br><span class="line">    readonly numberOfLegs: <span class="built_in">number</span> = <span class="number">8</span>;</span><br><span class="line">    <span class="keyword">constructor</span>(<span class="params">readonly name: <span class="built_in">string</span></span>) &#123;</span><br><span class="line">        <span class="comment">// 在这里可以得到证实</span></span><br><span class="line">        <span class="keyword">this</span>.name = name;</span><br><span class="line">    &#125;</span><br><span class="line">    test () &#123;</span><br><span class="line">        <span class="keyword">return</span> <span class="keyword">this</span>.name;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="keyword">let</span> test1 = <span class="keyword">new</span> Octopus(<span class="string">'YHF'</span>);</span><br><span class="line"><span class="built_in">console</span>.log(test1.test()); <span class="comment">// YHF</span></span><br></pre></td></tr></table></figure></li></ul><h1 id="存取器-（get-set，es5以上才可以用，编译会报错但是可以使用的）"><a href="#存取器-（get-set，es5以上才可以用，编译会报错但是可以使用的）" class="headerlink" title="存取器 （get/set，es5以上才可以用，编译会报错但是可以使用的）"></a>存取器 （get/set，es5以上才可以用，编译会报错但是可以使用的）</h1><ul><li>这个get/set 写java的真的在熟悉不过了，这个是结合私有化属性使用的</li><li>私有化属性，就是通过get/set来限制学习</li><li>TypeScript支持通过getters/setters来截取对对象成员的访问。 它能帮助你有效的控制对对象成员的访问</li><li>注意：首先，存取器要求你将编译器设置为输出ECMAScript 5或更高。 不支持降级到ECMAScript 3。 其次，只带有 get不带有 set的存取器自动被推断为 readonly。 这在从代码生成 .d.ts文件时是有帮助的，因为利用这个属性的用户会看到不允许够改变它的值。<figure class="highlight typescript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">// 版本1</span></span><br><span class="line"><span class="comment">// 在这里面fullname可以随意更改，确实方便也带来了很多麻烦</span></span><br><span class="line"><span class="keyword">class</span> Employee &#123;</span><br><span class="line">    fullName: <span class="built_in">string</span>;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="keyword">let</span> employee = <span class="keyword">new</span> Employee();</span><br><span class="line">employee.fullName = <span class="string">"Bob Smith"</span>;</span><br><span class="line"><span class="keyword">if</span> (employee.fullName) &#123;</span><br><span class="line">    <span class="built_in">console</span>.log(employee.fullName);</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="comment">// 升级版，设置权限</span></span><br><span class="line"><span class="keyword">let</span> passcode = <span class="string">"secret passcode"</span>;</span><br><span class="line"></span><br><span class="line"><span class="keyword">class</span> Employee &#123;</span><br><span class="line">    <span class="keyword">private</span> _fullName: <span class="built_in">string</span>;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">get</span> fullName(): <span class="built_in">string</span> &#123;</span><br><span class="line">        <span class="keyword">return</span> <span class="keyword">this</span>._fullName;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">set</span> fullName(newName: <span class="built_in">string</span>) &#123;</span><br><span class="line">        <span class="keyword">if</span> (passcode &amp;&amp; passcode == <span class="string">"secret passcode"</span>) &#123;</span><br><span class="line">            <span class="keyword">this</span>._fullName = newName;</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="keyword">else</span> &#123;</span><br><span class="line">            <span class="built_in">console</span>.log(<span class="string">"Error: Unauthorized update of employee!"</span>);</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="keyword">let</span> employee = <span class="keyword">new</span> Employee();</span><br><span class="line">employee.fullName = <span class="string">"Bob Smith"</span>;</span><br><span class="line"><span class="keyword">if</span> (employee.fullName) &#123;</span><br><span class="line">    alert(employee.fullName);</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure></li></ul><h1 id="静态属性"><a href="#静态属性" class="headerlink" title="静态属性"></a>静态属性</h1><ul><li>类的静态属性，每一次调用都是直接通过类名去调用</li><li>哪里都可用的很广泛，无需实例，调用就是实例</li><li>我们也可以创建类的静态成员，这些属性存在于类本身上面而不是类的实例上。 在这个例子里，我们使用 static定义 origin，因为它是所有网格都会用到的属性。 每个实例想要访问这个属性的时候，都要在 origin前面加上类名。 如同在实例属性上使用 this.前缀来访问属性一样，这里我们使用 Grid.来访问静态属性。<figure class="highlight typescript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">class</span> Grid &#123;</span><br><span class="line">    <span class="keyword">static</span> origin = &#123;x: <span class="number">0</span>, y: <span class="number">0</span>&#125;;</span><br><span class="line">    calculateDistanceFromOrigin(point: &#123;x: <span class="built_in">number</span>; y: <span class="built_in">number</span>;&#125;) &#123;</span><br><span class="line">        <span class="keyword">let</span> xDist = (point.x - Grid.origin.x);</span><br><span class="line">        <span class="keyword">let</span> yDist = (point.y - Grid.origin.y);</span><br><span class="line">        <span class="keyword">return</span> <span class="built_in">Math</span>.sqrt(xDist * xDist + yDist * yDist) / <span class="keyword">this</span>.scale;</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">constructor</span> (<span class="params"><span class="keyword">public</span> scale: <span class="built_in">number</span></span>) &#123; &#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="keyword">let</span> grid1 = <span class="keyword">new</span> Grid(<span class="number">1.0</span>);  <span class="comment">// 1x scale</span></span><br><span class="line"><span class="keyword">let</span> grid2 = <span class="keyword">new</span> Grid(<span class="number">5.0</span>);  <span class="comment">// 5x scale</span></span><br><span class="line"></span><br><span class="line"><span class="comment">// 这个今天属性在外面页面可以用的</span></span><br><span class="line"><span class="built_in">console</span>.log(Grid.origin)</span><br><span class="line"></span><br><span class="line"><span class="built_in">console</span>.log(grid1.calculateDistanceFromOrigin(&#123;x: <span class="number">10</span>, y: <span class="number">10</span>&#125;));</span><br><span class="line"><span class="built_in">console</span>.log(grid2.calculateDistanceFromOrigin(&#123;x: <span class="number">10</span>, y: <span class="number">10</span>&#125;));</span><br></pre></td></tr></table></figure></li></ul><h1 id="抽象类-（和继承差不多）"><a href="#抽象类-（和继承差不多）" class="headerlink" title="抽象类 （和继承差不多）"></a>抽象类 （和继承差不多）</h1><ul><li>又是一个后端的最爱</li><li>抽象类，就是只是写元素名，方法名，但继承了这个抽象类，并实例化里面但抽象方法</li><li>抽象类做为其它派生类的基类使用。 它们一般不会直接被实例化。 不同于接口，抽象类可以包含成员的实现细节。 abstract关键字是用于定义抽象类和在抽象类内部定义抽象方法</li></ul><figure class="highlight typescript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">// 抽象类</span></span><br><span class="line"><span class="keyword">abstract</span> <span class="keyword">class</span> Department &#123;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">constructor</span>(<span class="params"><span class="keyword">public</span> name: <span class="built_in">string</span></span>) &#123;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    printName(): <span class="built_in">void</span> &#123;</span><br><span class="line">        <span class="built_in">console</span>.log(<span class="string">'Department name: '</span> + <span class="keyword">this</span>.name);</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="comment">// 抽象方法</span></span><br><span class="line">    <span class="keyword">abstract</span> printMeeting(): <span class="built_in">void</span>; <span class="comment">// 必须在派生类中实现</span></span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="comment">// 继承抽象类</span></span><br><span class="line"><span class="keyword">class</span> AccountingDepartment <span class="keyword">extends</span> Department &#123;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">constructor</span>(<span class="params"></span>) &#123;</span><br><span class="line">        <span class="keyword">super</span>(<span class="string">'Accounting and Auditing'</span>); <span class="comment">// 在派生类的构造函数中必须调用 super()</span></span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    printMeeting(): <span class="built_in">void</span> &#123;</span><br><span class="line">        <span class="built_in">console</span>.log(<span class="string">'The Accounting Department meets each Monday at 10am.'</span>);</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    generateReports(): <span class="built_in">void</span> &#123;</span><br><span class="line">        <span class="built_in">console</span>.log(<span class="string">'Generating accounting reports...'</span>);</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="comment">// 声明一个抽象类但属性</span></span><br><span class="line"><span class="keyword">let</span> department: Department; <span class="comment">// 允许创建一个对抽象类型的引用</span></span><br><span class="line"><span class="comment">// 抽象类是不可实例的</span></span><br><span class="line">department = <span class="keyword">new</span> Department(); <span class="comment">// 错误: 不能创建一个抽象类的实例</span></span><br><span class="line">department = <span class="keyword">new</span> AccountingDepartment(); <span class="comment">// 允许对一个抽象子类进行实例化和赋值</span></span><br><span class="line">department.printName();</span><br><span class="line">department.printMeeting();</span><br><span class="line"><span class="comment">// 这个错误并不是因为不可以这样去写，只是声明但时候抽象类里面没有</span></span><br><span class="line">department.generateReports(); <span class="comment">// 错误: 方法在声明的抽象类中不存在</span></span><br></pre></td></tr></table></figure><h1 id="高级技巧"><a href="#高级技巧" class="headerlink" title="高级技巧"></a>高级技巧</h1><h2 id="构造函数"><a href="#构造函数" class="headerlink" title="构造函数"></a>构造函数</h2><ul><li>当你在TypeScript里声明了一个类的时候，实际上同时声明了很多东西。 首先就是类的 实例的类型</li><li>这里，我们写了 let greeter: Greeter，意思是 Greeter类的实例的类型是 Greeter。 这对于用过其它面向对象语言的程序员来讲已经是老习惯了。</li><li>let Greeter将被赋值为构造函数。 当我们调用 new并执行了这个函数后，便会得到一个类的实例。 这个构造函数也包含了类的所有静态属性。 换个角度说，我们可以认为类具有 实例部分与 静态部分这两个部分。<figure class="highlight typescript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">class</span> Greeter &#123;</span><br><span class="line">    greeting: <span class="built_in">string</span>;</span><br><span class="line">    <span class="keyword">constructor</span>(<span class="params">message: <span class="built_in">string</span></span>) &#123;</span><br><span class="line">        <span class="keyword">this</span>.greeting = message;</span><br><span class="line">    &#125;</span><br><span class="line">    greet() &#123;</span><br><span class="line">        <span class="keyword">return</span> <span class="string">"Hello, "</span> + <span class="keyword">this</span>.greeting;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="keyword">let</span> greeter: Greeter;</span><br><span class="line">greeter = <span class="keyword">new</span> Greeter(<span class="string">"world"</span>);</span><br><span class="line"><span class="built_in">console</span>.log(greeter.greet());</span><br></pre></td></tr></table></figure></li></ul><hr><ul><li>这里会比较绕不过是解释构造函数</li><li>这个例子里， greeter1与之前看到的一样。 我们实例化 Greeter类，并使用这个对象。 与我们之前看到的一样。<br>再之后，我们直接使用类。 我们创建了一个叫做 greeterMaker的变量。 这个变量保存了这个类或者说保存了类构造函数。 然后我们使用 typeof Greeter，意思是取Greeter类的类型，而不是实例的类型。 或者更确切的说，”告诉我 Greeter标识符的类型”，也就是构造函数的类型。 这个类型包含了类的所有静态成员和构造函数。 之后，就和前面一样，我们在 greeterMaker上使用 new，创建 Greeter的实例。<figure class="highlight typescript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">class</span> Greeter &#123;</span><br><span class="line">    <span class="keyword">static</span> standardGreeting = <span class="string">"Hello, there"</span>;</span><br><span class="line">    greeting: <span class="built_in">string</span>;</span><br><span class="line">    greet() &#123;</span><br><span class="line">        <span class="keyword">if</span> (<span class="keyword">this</span>.greeting) &#123;</span><br><span class="line">            <span class="keyword">return</span> <span class="string">"Hello, "</span> + <span class="keyword">this</span>.greeting;</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="keyword">else</span> &#123;</span><br><span class="line">            <span class="keyword">return</span> Greeter.standardGreeting;</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="keyword">let</span> greeter1: Greeter;</span><br><span class="line">greeter1 = <span class="keyword">new</span> Greeter();</span><br><span class="line"><span class="built_in">console</span>.log(greeter1.greet());</span><br><span class="line"></span><br><span class="line"><span class="keyword">let</span> greeterMaker: <span class="keyword">typeof</span> Greeter = Greeter;</span><br><span class="line">greeterMaker.standardGreeting = <span class="string">"Hey there!"</span>;</span><br><span class="line"></span><br><span class="line"><span class="keyword">let</span> greeter2: Greeter = <span class="keyword">new</span> greeterMaker();</span><br><span class="line"><span class="built_in">console</span>.log(greeter2.greet());</span><br></pre></td></tr></table></figure></li></ul><h2 id="把类当做接口使用"><a href="#把类当做接口使用" class="headerlink" title="把类当做接口使用"></a>把类当做接口使用</h2><ul><li>如上一节里所讲的，类定义会创建两个东西：类的实例类型和一个构造函数。 因为类可以创建出类型，所以你能够在允许使用接口的地方使用类。<figure class="highlight typescript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">class</span> Point &#123;</span><br><span class="line">    x: <span class="built_in">number</span>;</span><br><span class="line">    y: <span class="built_in">number</span>;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="keyword">interface</span> Point3d <span class="keyword">extends</span> Point &#123;</span><br><span class="line">    z: <span class="built_in">number</span>;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="keyword">let</span> point3d: Point3d = &#123;x: <span class="number">1</span>, y: <span class="number">2</span>, z: <span class="number">3</span>&#125;;</span><br></pre></td></tr></table></figure></li></ul><h1 id="后记"><a href="#后记" class="headerlink" title="后记"></a>后记</h1><ul><li>这个就是我学习Ts的第四天的笔记，欢迎更多的同行大哥指导交流</li><li><a href="https://yhf7.github.io/" target="_blank" rel="noopener">欢迎进入我的博客</a>：<a href="https://yhf7.github.io/" target="_blank" rel="noopener">https://yhf7.github.io/</a></li><li>如果有什么侵权的话，请及时添加小编微信以及qq也可以来告诉小编（905477376微信qq通用），谢谢！</li></ul>]]></content>
    
    <summary type="html">
    
      
      
        &lt;link rel=&quot;stylesheet&quot; class=&quot;aplayer-secondary-style-marker&quot; href=&quot;/assets/css/APlayer.min.css&quot;&gt;&lt;script src=&quot;/assets/js/APlayer.min.js&quot; cla
      
    
    </summary>
    
      <category term="TypeScript" scheme="http://yoursite.com/categories/TypeScript/"/>
    
    
      <category term="TypeScript 笔记" scheme="http://yoursite.com/tags/TypeScript-%E7%AC%94%E8%AE%B0/"/>
    
  </entry>
  
  <entry>
    <title>TypeScript 自学笔记3 接口</title>
    <link href="http://yoursite.com/2019/03/09/TypeScript%E7%AC%94%E8%AE%B03/"/>
    <id>http://yoursite.com/2019/03/09/TypeScript笔记3/</id>
    <published>2019-03-09T15:07:16.925Z</published>
    <updated>2019-03-11T13:04:35.562Z</updated>
    
    <content type="html"><![CDATA[<link rel="stylesheet" class="aplayer-secondary-style-marker" href="/assets/css/APlayer.min.css"><script src="/assets/js/APlayer.min.js" class="aplayer-secondary-script-marker"></script><h1 id="前言"><a href="#前言" class="headerlink" title="前言"></a>前言</h1><ul><li>个人学习笔记，仅供参考</li></ul><h1 id="介绍"><a href="#介绍" class="headerlink" title="介绍"></a>介绍</h1><ul><li>TypeScript的核心原则之一是对值所具有的结构进行类型检查。 它有时被称做“鸭式辨型法”或“结构性子类型化”。 在TypeScript里，接口的作用就是为这些类型命名和为你的代码或第三方代码定义契约。</li></ul><h1 id="接口初探"><a href="#接口初探" class="headerlink" title="接口初探"></a>接口初探</h1><ul><li>类型检查器会查看printLabel的调用。 printLabel有一个参数，并要求这个对象参数有一个名为label类型为string的属性。 需要注意的是，我们传入的对象参数实际上会包含很多属性，但是编译器只会检查那些必需的属性是否存在，并且其类型是否匹配</li><li>不但要求传入参数还要求这个参数里面有一个名为label的string参数</li><li>如果没有把label这个必须传入的参数传入就会报错<figure class="highlight typescript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line"><span class="function"><span class="keyword">function</span> <span class="title">printLabel</span>(<span class="params">labelledObj: &#123; label: <span class="built_in">string</span> &#125;</span>) </span>&#123;</span><br><span class="line">  <span class="built_in">console</span>.log(labelledObj.label);</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="keyword">let</span> myObj = &#123; size: <span class="number">10</span>, label: <span class="string">"Size 10 Object"</span> &#125;;</span><br><span class="line">printLabel(myObj);</span><br></pre></td></tr></table></figure></li></ul><hr><ul><li>重写这个例子</li><li>类型检查器不会去检查属性的顺序，只要相应的属性存在并且类型也是对的就可以</li><li>interface 泛指接口<figure class="highlight typescript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">// 接口     后面这个是名称</span></span><br><span class="line"><span class="comment">// 定义一个名为LabelledValue的接口</span></span><br><span class="line"><span class="keyword">interface</span> LabelledValue &#123;</span><br><span class="line">  label: <span class="built_in">string</span>;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="comment">// 在接收参数时，作为指定类型引用</span></span><br><span class="line"><span class="function"><span class="keyword">function</span> <span class="title">printLabel</span>(<span class="params">labelledObj: LabelledValue</span>) </span>&#123;</span><br><span class="line">  <span class="built_in">console</span>.log(labelledObj.label);</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="keyword">let</span> myObj = &#123;size: <span class="number">10</span>, label: <span class="string">"Size 10 Object"</span>&#125;;</span><br><span class="line">printLabel(myObj);</span><br></pre></td></tr></table></figure></li></ul><h1 id="可选属性"><a href="#可选属性" class="headerlink" title="可选属性"></a>可选属性</h1><ul><li>这个可选属性我们在之前也有学过了</li><li>带有可选属性的接口与普通的接口定义差不多，只是在可选属性名字定义的后面加一个?符号</li><li>接口里的属性不全都是必需的。 有些是只在某些条件下存在，或者根本不存在。 可选属性在应用“option bags”模式时很常用，即给函数传入的参数对象中只有部分属性赋值了。</li></ul><hr><ul><li>下面是应用了“option bags”的例子：</li><li>这里考到了两个知识点<ul><li><ol><li>可选属性的使用</li></ol></li><li><ol start="2"><li>返回类型的指定</li></ol></li></ul></li><li>重点：<ul><li>可选参数</li><li>返回参数<figure class="highlight typescript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">// 接口 </span></span><br><span class="line"><span class="keyword">interface</span> SquareConfig &#123;</span><br><span class="line">    <span class="comment">// 两个可选属性</span></span><br><span class="line">  color?: <span class="built_in">string</span>;</span><br><span class="line">  width?: <span class="built_in">number</span>;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="comment">//         函数参数调用接口，可不传参数，给空对象</span></span><br><span class="line"><span class="comment">//          但是返回中，指定了必须返回 color 和area这两个属性</span></span><br><span class="line"><span class="function"><span class="keyword">function</span> <span class="title">createSquare</span>(<span class="params">config: SquareConfig</span>): </span>&#123;color: <span class="built_in">string</span>; area: <span class="built_in">number</span>&#125; &#123;</span><br><span class="line">  <span class="keyword">let</span> newSquare = &#123;color: <span class="string">"white"</span>, area: <span class="number">100</span>&#125;;</span><br><span class="line">  <span class="keyword">if</span> (config.color) &#123;</span><br><span class="line">    newSquare.color = config.color;</span><br><span class="line">  &#125;</span><br><span class="line">  <span class="keyword">if</span> (config.width) &#123;</span><br><span class="line">    newSquare.area = config.width * config.width;</span><br><span class="line">  &#125;</span><br><span class="line">  <span class="keyword">return</span> newSquare;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="keyword">let</span> mySquare = createSquare(&#123;color: <span class="string">"black"</span>&#125;);</span><br></pre></td></tr></table></figure></li></ul></li></ul><h1 id="只读属性-（readonly）"><a href="#只读属性-（readonly）" class="headerlink" title="只读属性 （readonly）"></a>只读属性 （readonly）</h1><ul><li>在Ts中更好的体现了，权限的控制</li><li>限制为只读属性</li><li>一些对象属性只能在对象刚刚创建的时候修改其值。 你可以在属性名前用 readonly来指定只读属性<figure class="highlight typescript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">// 1. 定义一个接口，x变量设置为只读</span></span><br><span class="line"><span class="keyword">interface</span> Point &#123;</span><br><span class="line">    readonly x: <span class="built_in">number</span>;</span><br><span class="line">    readonly y: <span class="built_in">number</span>;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="comment">// 2. 构造出一个point的对象</span></span><br><span class="line"><span class="keyword">let</span> p1: Point = &#123;x:<span class="number">10</span>,y:<span class="number">20</span>&#125;</span><br><span class="line"></span><br><span class="line"><span class="comment">// 3.尝试改变内部的x值,会说这是个只读属性不能修改</span></span><br><span class="line">p1.x = <span class="number">5</span>;<span class="comment">// err Cannot assign to 'x' because it is a read-only property.</span></span><br></pre></td></tr></table></figure></li></ul><hr><h2 id="ReadonlyArray-只读数组"><a href="#ReadonlyArray-只读数组" class="headerlink" title="ReadonlyArray 只读数组"></a>ReadonlyArray<t> 只读数组</t></h2><ul><li>不要以为只有数据有，数组也是有的哦</li><li>ReadonlyArray<t> 类型用于数组</t></li><li>一旦创建后无法更改，不能赋值，也不能赋值给别的数据<figure class="highlight typescript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">let</span> a: <span class="built_in">number</span>[] = [<span class="number">1</span>, <span class="number">2</span>, <span class="number">3</span>, <span class="number">4</span>];</span><br><span class="line"><span class="keyword">let</span> ro: ReadonlyArray&lt;<span class="built_in">number</span>&gt; = a;</span><br><span class="line">ro[<span class="number">0</span>] = <span class="number">12</span>; <span class="comment">// error!</span></span><br><span class="line">ro.push(<span class="number">5</span>); <span class="comment">// error!</span></span><br><span class="line">ro.length = <span class="number">100</span>; <span class="comment">// error!</span></span><br><span class="line">a = ro; <span class="comment">// error!</span></span><br></pre></td></tr></table></figure></li></ul><hr><ul><li>ReadonlyArray赋值到一个普通数组也是不可以的</li><li>但是有一种情况可以赋值给别人那就是使用类型断言重写</li><li>这样就是可以赋值的<figure class="highlight typescript"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">let</span> b = ro <span class="keyword">as</span> <span class="built_in">number</span>[];</span><br></pre></td></tr></table></figure></li></ul><h2 id="readonly-vs-const"><a href="#readonly-vs-const" class="headerlink" title="readonly vs const"></a>readonly vs const</h2><ul><li>最简单判断该用readonly还是const的方法是看要把它做为变量使用还是做为一个属性。 做为变量使用的话用 const，若做为属性则使用readonly</li></ul><h1 id="额外的属性检查"><a href="#额外的属性检查" class="headerlink" title="额外的属性检查"></a>额外的属性检查</h1><h2 id="额外检查错误"><a href="#额外检查错误" class="headerlink" title="额外检查错误"></a>额外检查错误</h2><ul><li>我们学会了可选属性知道了optionbages 模式的使用</li><li>但是把可选属性和传值结合在一起时会发出错误，就是在参数中加入指定类型以外的属性</li><li>ts中定义了类型指定后，会做额外的检查</li><li>虽然是可选属性但是还是报出错误,限制没有属性就会报错</li><li>TypeScript会认为这段代码可能存在bug。 对象字面量会被特殊对待而且会经过 额外属性检查，当将它们赋值给变量或作为参数传递的时候。 如果一个对象字面量存在任何“目标类型”不包含的属性时，你会得到一个错误<figure class="highlight typescript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">interface</span> SquareConfig &#123;</span><br><span class="line">    color?: <span class="built_in">string</span>;</span><br><span class="line">    width?: <span class="built_in">number</span>;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">function</span> <span class="title">createSquare</span>(<span class="params">config: SquareConfig</span>): </span>&#123; color: <span class="built_in">string</span>; area: <span class="built_in">number</span> &#125; &#123;</span><br><span class="line">    <span class="comment">// ...</span></span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="comment">// 注意传入的参数colour</span></span><br><span class="line"><span class="comment">// error: 'colour' not expected in type 'SquareConfig'</span></span><br><span class="line"><span class="comment">// 在指定类型中是没有的</span></span><br><span class="line"><span class="keyword">let</span> mySquare = createSquare(&#123; colour: <span class="string">"red"</span>, width: <span class="number">100</span> &#125;);</span><br></pre></td></tr></table></figure></li></ul><hr><h2 id="解决额外检查错误（绕开检查）"><a href="#解决额外检查错误（绕开检查）" class="headerlink" title="解决额外检查错误（绕开检查）"></a>解决额外检查错误（绕开检查）</h2><h3 id="解决方法一-（断言）"><a href="#解决方法一-（断言）" class="headerlink" title="解决方法一 （断言）"></a>解决方法一 （断言）</h3><ul><li>在传入参数时后面加入断言<figure class="highlight typescript"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">let</span> mySquare = createSquare(&#123; width: <span class="number">100</span>, opacity: <span class="number">0.5</span> &#125; <span class="keyword">as</span> SquareConfig);</span><br></pre></td></tr></table></figure></li></ul><h3 id="解决方法二-（完美解法，添加一个字符串索引签名）"><a href="#解决方法二-（完美解法，添加一个字符串索引签名）" class="headerlink" title="解决方法二 （完美解法，添加一个字符串索引签名）"></a>解决方法二 （完美解法，添加一个字符串索引签名）</h3><ul><li>前提是你能够确定这个对象可能具有某些做为特殊用途使用的额外属性</li><li>如果 SquareConfig带有上面定义的类型的color和width属性，并且还会带有任意数量的其它属性，那么我们可以这样定义它</li><li>所以虽然是最完美的解决方法，但是要一开始就确立是否会带有</li><li>只要它们不是color和width，那么就无所谓它们的类型是什么。<figure class="highlight typescript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">interface</span> SquareConfig &#123;</span><br><span class="line">    color?: <span class="built_in">string</span>;</span><br><span class="line">    width?: <span class="built_in">number</span>;</span><br><span class="line">    <span class="comment">// 字符串索引签名</span></span><br><span class="line">    [propName: <span class="built_in">string</span>]: <span class="built_in">any</span>;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure></li></ul><h3 id="解决方法三-（耍赖皮-没有理解，我觉得这样是一个漏洞）"><a href="#解决方法三-（耍赖皮-没有理解，我觉得这样是一个漏洞）" class="headerlink" title="解决方法三 （耍赖皮,没有理解，我觉得这样是一个漏洞）"></a>解决方法三 （耍赖皮,没有理解，我觉得这样是一个漏洞）</h3><ul><li>将这个对象赋值给一个另一个变量： 因为 squareOptions不会经过额外属性检查，所以编译器不会报错<figure class="highlight typescript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">let</span> squareOptions = &#123; colour: <span class="string">"red"</span>, width: <span class="number">100</span> &#125;;</span><br><span class="line"><span class="keyword">let</span> mySquare = createSquare(squareOptions);</span><br></pre></td></tr></table></figure></li></ul><hr><ul><li>要留意，在像上面一样的简单代码里，你可能不应该去绕开这些检查。 对于包含方法和内部状态的复杂对象字面量来讲，你可能需要使用这些技巧，但是大部额外属性检查错误是真正的bug。 就是说你遇到了额外类型检查出的错误，比如“option bags”，你应该去审查一下你的类型声明。 在这里，如果支持传入 color或colour属性到createSquare，你应该修改SquareConfig定义来体现出这一点。</li></ul><h1 id="函数类型"><a href="#函数类型" class="headerlink" title="函数类型"></a>函数类型</h1><ul><li>接口能够描述JavaScript中对象拥有的各种各样的外形。 除了描述带有属性的普通对象外，接口也可以描述函数类型</li><li>为了使用接口表示函数类型，我们需要给接口定义一个调用签名。 它就像是一个只有参数列表和返回值类型的函数定义。参数列表里的每个参数都需要名字和类型。</li><li>其实和声明函数差不多，只是没有了前面的function和后面的业务</li><li>使用像使用其它接口一样使用这个函数类型的接口。 下例展示了如何创建一个函数类型的变量，并将一个同类型的函数赋值给这个变量<figure class="highlight typescript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">// 定义名为 SearchFunc 的接口</span></span><br><span class="line"><span class="keyword">interface</span> SearchFunc &#123;</span><br><span class="line">  <span class="comment">// 定义参数为source，subString 都为string</span></span><br><span class="line">  <span class="comment">// 返回类型为boolean</span></span><br><span class="line">  (source: <span class="built_in">String</span>, subString: <span class="built_in">String</span>) : <span class="built_in">boolean</span>;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="comment">// 使用接口</span></span><br><span class="line"><span class="keyword">let</span> mySearch: SearchFunc = <span class="function"><span class="keyword">function</span> (<span class="params">source: <span class="built_in">string</span>, subString: <span class="built_in">string</span></span>) </span>&#123;</span><br><span class="line">  <span class="keyword">let</span> result = source.search(subString);</span><br><span class="line">  <span class="keyword">return</span> result &gt; <span class="number">-1</span>;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="built_in">console</span>.log(mySearch(<span class="string">'aaabb'</span>,<span class="string">'bb'</span>))</span><br></pre></td></tr></table></figure></li></ul><hr><ul><li>对于函数类型的类型检查来说，函数的参数名不需要与接口里定义的名字相匹配</li><li>因为只是参数，传入时也无法判断<figure class="highlight typescript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">let</span> mySearch: SearchFunc;</span><br><span class="line">mySearch = <span class="function"><span class="keyword">function</span>(<span class="params">src: <span class="built_in">string</span>, sub: <span class="built_in">string</span></span>): <span class="title">boolean</span> </span>&#123;</span><br><span class="line">  <span class="keyword">let</span> result = src.search(sub);</span><br><span class="line">  <span class="keyword">return</span> result &gt; <span class="number">-1</span>;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure></li></ul><hr><ul><li>函数的参数会逐个进行检查，要求对应位置上的参数类型是兼容的。 如果你不想指定类型，TypeScript的类型系统会推断出参数类型，因为函数直接赋值给了 SearchFunc类型变量。 函数的返回值类型是通过其返回值推断出来的（此例是 false和true）。 如果让这个函数返回数字或字符串，类型检查器会警告我们函数的返回值类型与 SearchFunc接口中的定义不匹配</li><li>定义时可以不写指定类型</li><li>但是传入和返回类型不匹配就会报错<figure class="highlight typescript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">let</span> mySearch: SearchFunc;</span><br><span class="line">mySearch = <span class="function"><span class="keyword">function</span>(<span class="params">src, sub</span>) </span>&#123;</span><br><span class="line">    <span class="keyword">let</span> result = src.search(sub);</span><br><span class="line">    <span class="keyword">return</span> result &gt; <span class="number">-1</span>;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure></li></ul><h1 id="可索引的类型"><a href="#可索引的类型" class="headerlink" title="可索引的类型"></a>可索引的类型</h1><h2 id="数字索引-数组"><a href="#数字索引-数组" class="headerlink" title="数字索引(数组)"></a>数字索引(数组)</h2><ul><li>第一感觉这个索引是为数组而设立的</li><li>通过不同类型的值去索引</li><li>与使用接口描述函数类型差不多，我们也可以描述那些能够“通过索引得到”的类型，比如a[10]或ageMap[“daniel”]。 可索引类型具有一个 索引签名，它描述了对象索引的类型，还有相应的索引返回值类型。 </li><li>我们定义了StringArray接口，它具有索引签名。 这个索引签名表示了当用 number去索引StringArray时会得到string类型的返回值<figure class="highlight typescript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">interface</span> StringArray &#123;</span><br><span class="line">  [index: <span class="built_in">number</span>]: <span class="built_in">string</span>;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="keyword">let</span> myArray: StringArray;</span><br><span class="line">myArray = [<span class="string">"Bob"</span>, <span class="string">"Fred"</span>];</span><br><span class="line"></span><br><span class="line"><span class="keyword">let</span> myStr: <span class="built_in">string</span> = myArray[<span class="number">0</span>];</span><br></pre></td></tr></table></figure></li></ul><hr><h2 id="字符串索引（对象）"><a href="#字符串索引（对象）" class="headerlink" title="字符串索引（对象）"></a>字符串索引（对象）</h2><ul><li>TypeScript支持两种索引签名：字符串和数字。 可以同时使用两种类型的索引，但是数字索引的返回值必须是字符串索引返回值类型的子类型。 这是因为当使用 number来索引时，JavaScript会将它转换成string然后再去索引对象。 也就是说用 100（一个number）去索引等同于使用”100”（一个string）去索引，因此两者需要保持一致<figure class="highlight typescript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">// 错误</span></span><br><span class="line"><span class="keyword">class</span> Animal &#123;</span><br><span class="line">    name: <span class="built_in">string</span>;</span><br><span class="line">&#125;</span><br><span class="line"><span class="keyword">class</span> Dog <span class="keyword">extends</span> Animal &#123;</span><br><span class="line">    breed: <span class="built_in">string</span>;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="comment">// 错误：使用数值型的字符串索引，有时会得到完全不同的Animal!</span></span><br><span class="line"><span class="keyword">interface</span> NotOkay &#123;</span><br><span class="line">    [x: <span class="built_in">number</span>]: Animal;</span><br><span class="line">    [x: <span class="built_in">string</span>]: Dog;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure></li></ul><hr><ul><li>字符串索引签名能够很好的描述dictionary模式，并且它们也会确保所有属性与其返回值类型相匹配。 因为字符串索引声明了 obj.property和obj[“property”]两种形式都可以<figure class="highlight typescript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">interface</span> NumberDictionary &#123;</span><br><span class="line">  [index: <span class="built_in">string</span>]: <span class="built_in">number</span>;</span><br><span class="line">  length: <span class="built_in">number</span>;    <span class="comment">// 可以，length是number类型</span></span><br><span class="line">  name: <span class="built_in">string</span>       <span class="comment">// 错误，`name`的类型与索引类型返回值的类型不匹配</span></span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="keyword">let</span> myArray: NumberDictionary;</span><br><span class="line">myArray = &#123;test1:<span class="number">100</span>,length:<span class="number">20</span>,test2:<span class="number">200</span>&#125;;</span><br><span class="line"></span><br><span class="line"><span class="built_in">console</span>.log(myArray.test1)</span><br><span class="line"><span class="built_in">console</span>.log(myArray.test2)</span><br><span class="line"><span class="built_in">console</span>.log(myArray.length)</span><br></pre></td></tr></table></figure></li></ul><hr><h2 id="防止索引被篡改-只读"><a href="#防止索引被篡改-只读" class="headerlink" title="防止索引被篡改 (只读)"></a>防止索引被篡改 (只读)</h2><ul><li>最后，你可以将索引签名设置为只读，这样就防止了给索引赋值<figure class="highlight typescript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">interface</span> ReadonlyStringArray &#123;</span><br><span class="line">    readonly [index: <span class="built_in">number</span>]: <span class="built_in">string</span>;</span><br><span class="line">&#125;</span><br><span class="line"><span class="keyword">let</span> myArray: ReadonlyStringArray = [<span class="string">"Alice"</span>, <span class="string">"Bob"</span>];</span><br><span class="line">myArray[<span class="number">2</span>] = <span class="string">"Mallory"</span>; <span class="comment">// error!</span></span><br></pre></td></tr></table></figure></li></ul><h1 id="类类型"><a href="#类类型" class="headerlink" title="类类型"></a>类类型</h1><h2 id="实现接口"><a href="#实现接口" class="headerlink" title="实现接口"></a>实现接口</h2><ul><li>与C#或Java里接口的基本作用一样，TypeScript也能够用它来明确的强制一个类去符合某种契约。</li><li>其实就是java的抽象方法</li><li>定义了就必须去执行</li><li>接口描述了类的公共部分，而不是公共和私有两部分。 它不会帮你检查类是否具有某些私有成员。</li></ul><hr><ol><li>元素<figure class="highlight typescript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">// 实现元素</span></span><br><span class="line"><span class="keyword">interface</span> ClockInterface &#123;</span><br><span class="line">    currentTime: <span class="built_in">Date</span>;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="keyword">class</span> Clock <span class="keyword">implements</span> ClockInterface &#123;</span><br><span class="line">    currentTime: <span class="built_in">Date</span>;</span><br><span class="line">    <span class="keyword">constructor</span>(<span class="params">h: <span class="built_in">number</span>, m: <span class="built_in">number</span></span>) &#123; &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure></li></ol><hr><ol start="2"><li>方法</li></ol><ul><li>你也可以在接口中描述一个方法，在类里实现它<figure class="highlight typescript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">interface</span> ClockInterface &#123;</span><br><span class="line">    currentTime: <span class="built_in">Date</span>;</span><br><span class="line">    setTime(d: <span class="built_in">Date</span>);</span><br><span class="line">    <span class="comment">// constructor(d: Date) // 这个是不允许的构造函数是不允许这样被定义的</span></span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="keyword">class</span> Clock <span class="keyword">implements</span> ClockInterface &#123;</span><br><span class="line">    currentTime: <span class="built_in">Date</span>;</span><br><span class="line">    setTime(d: <span class="built_in">Date</span>) &#123;</span><br><span class="line">        <span class="keyword">this</span>.currentTime = d;</span><br><span class="line">        <span class="keyword">return</span> <span class="keyword">this</span>.currentTime;</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">constructor</span>(<span class="params">h: <span class="built_in">number</span>, m: <span class="built_in">number</span></span>) &#123; &#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="keyword">let</span> test = <span class="keyword">new</span> Clock(<span class="number">10</span>,<span class="number">20</span>);</span><br><span class="line"><span class="built_in">console</span>.log(test.setTime(<span class="keyword">new</span> <span class="built_in">Date</span>())); <span class="comment">//2019-03-09T14:12:10.617Z</span></span><br></pre></td></tr></table></figure></li></ul><h2 id="类静态部分与实例部分的区别-（令人费解的地方，未知）"><a href="#类静态部分与实例部分的区别-（令人费解的地方，未知）" class="headerlink" title="类静态部分与实例部分的区别 （令人费解的地方，未知）"></a>类静态部分与实例部分的区别 （令人费解的地方，未知）</h2><ul><li>这个地方不太好理解</li><li>当你操作类和接口的时候，你要知道类是具有两个类型的：静态部分的类型和实例的类型。 你会注意到，当你用构造器签名去定义一个接口并试图定义一个类去实现这个接口时会得到一个错误</li><li>因为当一个类实现了一个接口时，只对其实例部分进行类型检查。 constructor存在于类的静态部分，所以不在检查的范围内</li><li>因为createClock的第一个参数是ClockConstructor类型，在createClock(AnalogClock, 7, 32)里，会检查AnalogClock是否符合构造函数签名</li></ul><hr><ol><li>这个直指类中的构造函数，就是在new时要传参，并有返回值</li><li>因为在类中是不会去检索构造函数，所以直接定义就会出错</li><li>所以我们在fn中传参数时定义，就会去检测构造函数签名</li><li>其实就是说作为参数和类是不想同的检索方式<figure class="highlight typescript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">// 错误</span></span><br><span class="line"><span class="keyword">interface</span> ClockConstructor &#123;</span><br><span class="line">    <span class="keyword">new</span> (hour: <span class="built_in">number</span>, minute: <span class="built_in">number</span>);</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="keyword">class</span> Clock <span class="keyword">implements</span> ClockConstructor &#123;</span><br><span class="line">    currentTime: <span class="built_in">Date</span>;</span><br><span class="line">    <span class="keyword">constructor</span>(<span class="params">h: <span class="built_in">number</span>, m: <span class="built_in">number</span></span>) &#123; &#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line">------------------------------</span><br><span class="line"><span class="comment">// 正确</span></span><br><span class="line"><span class="keyword">interface</span> ClockConstructor &#123;</span><br><span class="line">  <span class="comment">// 约束 new 一个实例，直接针对class的构造函数</span></span><br><span class="line">    <span class="keyword">new</span> (hour: <span class="built_in">number</span>, minute: <span class="built_in">number</span>): ClockInterface;</span><br><span class="line">&#125;</span><br><span class="line"><span class="keyword">interface</span> ClockInterface &#123;</span><br><span class="line">    tick();</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">function</span> <span class="title">createClock</span>(<span class="params">ctor: ClockConstructor, hour: <span class="built_in">number</span>, minute: <span class="built_in">number</span></span>): <span class="title">ClockInterface</span> </span>&#123;</span><br><span class="line">    <span class="keyword">return</span> <span class="keyword">new</span> ctor(hour, minute);</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="keyword">class</span> DigitalClock <span class="keyword">implements</span> ClockInterface &#123;</span><br><span class="line">    <span class="keyword">constructor</span>(<span class="params">h: <span class="built_in">number</span>, m: <span class="built_in">number</span></span>) &#123; &#125;</span><br><span class="line">    tick() &#123;</span><br><span class="line">        <span class="built_in">console</span>.log(<span class="string">"beep beep"</span>);</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br><span class="line"><span class="keyword">class</span> AnalogClock <span class="keyword">implements</span> ClockInterface &#123;</span><br><span class="line">    <span class="keyword">constructor</span>(<span class="params">h: <span class="built_in">number</span>, m: <span class="built_in">number</span></span>) &#123; &#125;</span><br><span class="line">    tick() &#123;</span><br><span class="line">        <span class="built_in">console</span>.log(<span class="string">"tick tock"</span>);</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="keyword">let</span> digital = createClock(DigitalClock, <span class="number">12</span>, <span class="number">17</span>);</span><br><span class="line"><span class="keyword">let</span> analog = createClock(AnalogClock, <span class="number">7</span>, <span class="number">32</span>);</span><br><span class="line"><span class="built_in">console</span>.log(digital.tick())</span><br></pre></td></tr></table></figure></li></ol><h1 id="继承接口"><a href="#继承接口" class="headerlink" title="继承接口"></a>继承接口</h1><ul><li>和类一样，接口也可以相互继承。 这让我们能够从一个接口里复制成员到另一个接口里，可以更灵活地将接口分割到可重用的模块里</li><li>这个就比较好理解，就是儿子继承爸爸的东西</li><li>也可多接口<figure class="highlight typescript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">interface</span> Shape &#123;</span><br><span class="line">    color: <span class="built_in">string</span>;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="keyword">interface</span> Square <span class="keyword">extends</span> Shape &#123;</span><br><span class="line">    sideLength: <span class="built_in">number</span>;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="comment">// 定义</span></span><br><span class="line"><span class="keyword">let</span> square = &lt;Square&gt;&#123;&#125;;</span><br><span class="line">square.color = <span class="string">"blue"</span>;</span><br><span class="line">square.sideLength = <span class="number">10</span>;</span><br><span class="line"></span><br><span class="line"><span class="comment">// 多接口</span></span><br><span class="line"><span class="keyword">interface</span> Shape &#123;</span><br><span class="line">    color: <span class="built_in">string</span>;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="keyword">interface</span> PenStroke &#123;</span><br><span class="line">    penWidth: <span class="built_in">number</span>;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="keyword">interface</span> Square <span class="keyword">extends</span> Shape, PenStroke &#123;</span><br><span class="line">    sideLength: <span class="built_in">number</span>;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="keyword">let</span> square = &lt;Square&gt;&#123;&#125;;</span><br><span class="line">square.color = <span class="string">"blue"</span>;</span><br><span class="line">square.sideLength = <span class="number">10</span>;</span><br><span class="line">square.penWidth = <span class="number">5.0</span>;</span><br></pre></td></tr></table></figure></li></ul><h1 id="混合类型"><a href="#混合类型" class="headerlink" title="混合类型"></a>混合类型</h1><ul><li>一个对象可以同时做为函数和对象使用，并带有额外的属性</li></ul><figure class="highlight typescript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">interface</span> Counter &#123;</span><br><span class="line">    (start: <span class="built_in">number</span>): <span class="built_in">string</span>;</span><br><span class="line">    interval: <span class="built_in">number</span>;</span><br><span class="line">    reset(): <span class="built_in">void</span>;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">function</span> <span class="title">getCounter</span>(<span class="params"></span>): <span class="title">Counter</span> </span>&#123;</span><br><span class="line">    <span class="keyword">let</span> counter = &lt;Counter&gt;<span class="function"><span class="keyword">function</span> (<span class="params">start: <span class="built_in">number</span></span>) </span>&#123; &#125;;</span><br><span class="line">    counter.interval = <span class="number">123</span>;</span><br><span class="line">    counter.reset = <span class="function"><span class="keyword">function</span> (<span class="params"></span>) </span>&#123; &#125;;</span><br><span class="line">    <span class="keyword">return</span> counter;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="keyword">let</span> c = getCounter();</span><br><span class="line">c(<span class="number">10</span>);</span><br><span class="line">c.reset();</span><br><span class="line">c.interval = <span class="number">5.0</span>;</span><br></pre></td></tr></table></figure><h1 id="接口继承类"><a href="#接口继承类" class="headerlink" title="接口继承类"></a>接口继承类</h1><ul><li>当接口继承了一个类类型时，它会继承类的成员但不包括其实现。 就好像接口声明了所有类中存在的成员，但并没有提供具体实现一样。 接口同样会继承到类的private和protected成员。 这意味着当你创建了一个接口继承了一个拥有私有或受保护的成员的类时，这个接口类型只能被这个类或其子类所实现（implement）</li><li><p>当你有一个庞大的继承结构时这很有用，但要指出的是你的代码只在子类拥有特定属性时起作用。 这个子类除了继承至基类外与基类没有任何关系</p><figure class="highlight typescript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">class</span> Control &#123;</span><br><span class="line">    <span class="keyword">private</span> state: <span class="built_in">any</span>;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="keyword">interface</span> SelectableControl <span class="keyword">extends</span> Control &#123;</span><br><span class="line">    select(): <span class="built_in">void</span>;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="keyword">class</span> Button <span class="keyword">extends</span> Control <span class="keyword">implements</span> SelectableControl &#123;</span><br><span class="line">    select() &#123; &#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="keyword">class</span> TextBox <span class="keyword">extends</span> Control &#123;</span><br><span class="line">    select() &#123; &#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="comment">// 错误：“Image”类型缺少“state”属性。</span></span><br><span class="line"><span class="keyword">class</span> Image <span class="keyword">implements</span> SelectableControl &#123;</span><br><span class="line">    select() &#123; &#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="keyword">class</span> Location &#123;</span><br><span class="line"></span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure></li><li><p>在上面的例子里，SelectableControl包含了Control的所有成员，包括私有成员state。 因为 state是私有成员，所以只能够是Control的子类们才能实现SelectableControl接口。 因为只有 Control的子类才能够拥有一个声明于Control的私有成员state，这对私有成员的兼容性是必需的</p></li><li>在Control类内部，是允许通过SelectableControl的实例来访问私有成员state的。 实际上， SelectableControl接口和拥有select方法的Control类是一样的。 Button和TextBox类是SelectableControl的子类（因为它们都继承自Control并有select方法），但Image和Location类并不是这样的</li></ul><h1 id="后记"><a href="#后记" class="headerlink" title="后记"></a>后记</h1><ul><li>这个就是我学习Ts的第三天的笔记，欢迎更多的同行大哥指导交流</li><li><a href="https://yhf7.github.io/" target="_blank" rel="noopener">欢迎进入我的博客</a>：<a href="https://yhf7.github.io/" target="_blank" rel="noopener">https://yhf7.github.io/</a></li><li>如果有什么侵权的话，请及时添加小编微信以及qq也可以来告诉小编（905477376微信qq通用），谢谢！</li></ul>]]></content>
    
    <summary type="html">
    
      
      
        &lt;link rel=&quot;stylesheet&quot; class=&quot;aplayer-secondary-style-marker&quot; href=&quot;/assets/css/APlayer.min.css&quot;&gt;&lt;script src=&quot;/assets/js/APlayer.min.js&quot; cla
      
    
    </summary>
    
      <category term="TypeScript" scheme="http://yoursite.com/categories/TypeScript/"/>
    
    
      <category term="TypeScript 笔记" scheme="http://yoursite.com/tags/TypeScript-%E7%AC%94%E8%AE%B0/"/>
    
  </entry>
  
  <entry>
    <title>TypeScript 自学笔记2 变量声明</title>
    <link href="http://yoursite.com/2019/03/07/TypeScript%E7%AC%94%E8%AE%B02/"/>
    <id>http://yoursite.com/2019/03/07/TypeScript笔记2/</id>
    <published>2019-03-07T13:17:11.558Z</published>
    <updated>2019-03-11T01:49:44.270Z</updated>
    
    <content type="html"><![CDATA[<link rel="stylesheet" class="aplayer-secondary-style-marker" href="/assets/css/APlayer.min.css"><script src="/assets/js/APlayer.min.js" class="aplayer-secondary-script-marker"></script><h1 id="前言"><a href="#前言" class="headerlink" title="前言"></a>前言</h1><ul><li>个人学习笔记，仅供参考</li></ul><h1 id="Var-声明"><a href="#Var-声明" class="headerlink" title="Var 声明"></a>Var 声明</h1><ul><li>可以在函数内部定义变量</li><li>可以在其它函数内部访问相同的变量<figure class="highlight typescript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br></pre></td><td class="code"><pre><span class="line"><span class="function"><span class="keyword">function</span> <span class="title">f</span>(<span class="params"></span>) </span>&#123;</span><br><span class="line">    <span class="keyword">var</span> a = <span class="number">1</span>;</span><br><span class="line"></span><br><span class="line">    a = <span class="number">2</span>;</span><br><span class="line">    <span class="keyword">var</span> b = g();</span><br><span class="line">    a = <span class="number">3</span>;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">return</span> b;</span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">function</span> <span class="title">g</span>(<span class="params"></span>) </span>&#123;</span><br><span class="line">        <span class="keyword">return</span> a;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line">f(); <span class="comment">// returns 2</span></span><br></pre></td></tr></table></figure></li></ul><h2 id="作用域规则"><a href="#作用域规则" class="headerlink" title="作用域规则"></a>作用域规则</h2><ul><li>对于var声明奇怪的作用域规则</li><li>在这里以为程序在执行时会先编译一遍所以x就已经被声明了</li></ul><ol><li><p>可以在包含它的函数，模块，命名空间或全局作用域内部任何位置被访问</p><figure class="highlight typescript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br></pre></td><td class="code"><pre><span class="line"><span class="function"><span class="keyword">function</span> <span class="title">f</span>(<span class="params">shouldInitialize: <span class="built_in">boolean</span></span>) </span>&#123;</span><br><span class="line">    <span class="keyword">if</span> (shouldInitialize) &#123;</span><br><span class="line">        <span class="keyword">var</span> x = <span class="number">10</span>;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">return</span> x;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line">f(<span class="literal">true</span>);  <span class="comment">// returns '10'</span></span><br><span class="line">f(<span class="literal">false</span>); <span class="comment">// returns 'undefined'</span></span><br></pre></td></tr></table></figure></li><li><p>var多次声明并不会报错</p><figure class="highlight typescript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br></pre></td><td class="code"><pre><span class="line"><span class="function"><span class="keyword">function</span> <span class="title">sumMatrix</span>(<span class="params">matrix: <span class="built_in">number</span>[][]</span>) </span>&#123;</span><br><span class="line">    <span class="keyword">var</span> sum = <span class="number">0</span>;</span><br><span class="line">    <span class="keyword">for</span> (<span class="keyword">var</span> i = <span class="number">0</span>; i &lt; matrix.length; i++) &#123;</span><br><span class="line">        <span class="keyword">var</span> currentRow = matrix[i];</span><br><span class="line">        <span class="keyword">for</span> (<span class="keyword">var</span> i = <span class="number">0</span>; i &lt; currentRow.length; i++) &#123;</span><br><span class="line">            sum += currentRow[i];</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">return</span> sum;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure></li></ol><h2 id="捕获变量怪异之处"><a href="#捕获变量怪异之处" class="headerlink" title="捕获变量怪异之处"></a>捕获变量怪异之处</h2><ul><li>setTimeout 定时器，而且每一次的时间就加长了</li><li>执行的速度是非常快的，很快就循环完毕开启了所有的定时器</li><li>但是定时器的执行会延时，在最后执行时i已经是10了</li><li><p>所以所有的输出都是10，并不是想象的1……9</p><figure class="highlight typescript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">for</span> (<span class="keyword">var</span> i = <span class="number">0</span>; i &lt; <span class="number">10</span>; i++) &#123;</span><br><span class="line">    setTimeout(<span class="function"><span class="keyword">function</span>(<span class="params"></span>) </span>&#123; <span class="built_in">console</span>.log(i); &#125;, <span class="number">100</span> * i);</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure></li><li><p>解决方案，使用闭包,每一次的值都是传进去的就不会被改变</p><figure class="highlight typescript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">for</span> (<span class="keyword">var</span> i = <span class="number">0</span>; i &lt; <span class="number">10</span>; i++) &#123;</span><br><span class="line">    <span class="comment">// capture the current state of 'i'</span></span><br><span class="line">    <span class="comment">// by invoking a function with its current value</span></span><br><span class="line">    (<span class="function"><span class="keyword">function</span>(<span class="params">i</span>) </span>&#123;</span><br><span class="line">        setTimeout(<span class="function"><span class="keyword">function</span>(<span class="params"></span>) </span>&#123; <span class="built_in">console</span>.log(i); &#125;, <span class="number">100</span> * i);</span><br><span class="line">    &#125;)(i);</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure></li></ul><h1 id="Let声明"><a href="#Let声明" class="headerlink" title="Let声明"></a>Let声明</h1><ul><li>在let中和var还是有一定的区别的</li><li>let中使用的是作用域或块作用域</li><li>所有在区块内没有定义是不可以使用的</li><li>let并没有作用域提示的概念</li></ul><h2 id="块作用域"><a href="#块作用域" class="headerlink" title="块作用域"></a>块作用域</h2><ul><li>这里我们定义了2个变量a和b。 a的作用域是f函数体内，而b的作用域是if语句块</li><li>这就是我们提到的变量不会提升，所以不能使用</li><li>如果是用var这个就可以是用了</li><li>而且我们使用ts 在编译时就会报错的</li><li>直接会 error TS2304: Cannot find name ‘b’ 提示没有定义这个名称的变量</li><li>但是a为什么可以获取呢？因为a所在的作用域块大于if，而在外面的作用域是不能访问内部定义的变量<figure class="highlight typescript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br></pre></td><td class="code"><pre><span class="line"><span class="function"><span class="keyword">function</span> <span class="title">f</span>(<span class="params">input: <span class="built_in">boolean</span></span>) </span>&#123;</span><br><span class="line">    <span class="keyword">let</span> a = <span class="number">100</span>;</span><br><span class="line"></span><br><span class="line">    <span class="comment">// if内部定义的b</span></span><br><span class="line">    <span class="keyword">if</span> (input) &#123;</span><br><span class="line">        <span class="comment">// 但是在这里面是可以获取a的因为a在fn的作用域块比if大</span></span><br><span class="line">        <span class="comment">// Still okay to reference 'a'</span></span><br><span class="line">        <span class="keyword">let</span> b = a + <span class="number">1</span>;</span><br><span class="line">        <span class="keyword">return</span> b;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="comment">// 外面是无法访问的，就会报错</span></span><br><span class="line">    <span class="comment">// Error: 'b' doesn't exist here</span></span><br><span class="line">    <span class="keyword">return</span> b;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure></li></ul><h3 id="暂时性死区"><a href="#暂时性死区" class="headerlink" title="暂时性死区"></a>暂时性死区</h3><ul><li>未声明前无法读/写</li><li>很多人对这个let不了解就想当然的像var一样去用</li><li>但是虽然变量存在，在let声明前所定义的所有代码都是无效的，因为let有着暂时性死区（声明前的所有区域都是）</li><li>ts中编译也是会爆出来的<figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">a++; <span class="comment">// illegal to use 'a' before it's declared;</span></span><br><span class="line"><span class="keyword">let</span> a;</span><br></pre></td></tr></table></figure></li></ul><hr><ul><li>注意一点，我们仍然可以在一个拥有块作用域变量被声明前获取它。 只是我们不能在变量声明前去调用那个函数。 如果生成代码目标为ES2015，现代的运行时会抛出一个错误；然而，现今TypeScript是不会报错的。<figure class="highlight typescript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br></pre></td><td class="code"><pre><span class="line"><span class="function"><span class="keyword">function</span> <span class="title">foo</span>(<span class="params"></span>) </span>&#123;</span><br><span class="line">    <span class="comment">// okay to capture 'a'</span></span><br><span class="line">    <span class="keyword">return</span> a;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="comment">// 不能在'a'被声明前调用'foo'</span></span><br><span class="line"><span class="comment">// 运行时应该抛出错误</span></span><br><span class="line">foo();</span><br><span class="line"></span><br><span class="line"><span class="keyword">let</span> a;</span><br></pre></td></tr></table></figure></li></ul><h2 id="重定义及屏蔽"><a href="#重定义及屏蔽" class="headerlink" title="重定义及屏蔽"></a>重定义及屏蔽</h2><h3 id="重定义"><a href="#重定义" class="headerlink" title="重定义"></a>重定义</h3><ul><li>我们在使用var 时可以无限的重复声明最后只会得到一个（会出现bug）</li><li>let在同一作用域下是不可以重复声明的</li><li>并不是要求两个均是块级作用域的声明TypeScript才会给出一个错误的警告。</li><li>并不是说块级作用域变量不能用函数作用域变量来声明。 而是块级作用域变量需要在明显不同的块里声明。<figure class="highlight typescript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">// 例1</span></span><br><span class="line"><span class="keyword">let</span> x = <span class="number">10</span>;</span><br><span class="line"><span class="keyword">let</span> x = <span class="number">20</span>; <span class="comment">// 错误，不能在1个作用域里多次声明`x`</span></span><br><span class="line"></span><br><span class="line"><span class="comment">// 例2</span></span><br><span class="line"><span class="comment">// 变量和声明明显在同一个作用域下</span></span><br><span class="line"><span class="function"><span class="keyword">function</span> <span class="title">f</span>(<span class="params">x</span>) </span>&#123;</span><br><span class="line">    <span class="keyword">let</span> x = <span class="number">100</span>; <span class="comment">// error: interferes with parameter declaration</span></span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="comment">// 例3</span></span><br><span class="line"><span class="comment">// 无论let前后都不能重新定义变量</span></span><br><span class="line"><span class="function"><span class="keyword">function</span> <span class="title">g</span>(<span class="params"></span>) </span>&#123;</span><br><span class="line">    <span class="keyword">let</span> x = <span class="number">100</span>;</span><br><span class="line">    <span class="keyword">var</span> x = <span class="number">100</span>; <span class="comment">// error: can't have both declarations of 'x'</span></span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="comment">// 例4</span></span><br><span class="line"><span class="comment">// 正确的重定义</span></span><br><span class="line"><span class="comment">// 这样就分开了两个完全不同的作用域</span></span><br><span class="line"><span class="comment">// if内部只可以使用x = 5的这个和x=100一点关系都没有</span></span><br><span class="line"><span class="function"><span class="keyword">function</span> <span class="title">g</span>(<span class="params"></span>) </span>&#123;</span><br><span class="line">    <span class="keyword">let</span> x = <span class="number">100</span>;</span><br><span class="line">    <span class="built_in">console</span>.log(<span class="string">'fn g x'</span>,x) <span class="comment">//fn g x 100</span></span><br><span class="line">    <span class="keyword">if</span> (<span class="literal">true</span>) &#123;</span><br><span class="line">        <span class="keyword">let</span> x = <span class="number">5</span>;</span><br><span class="line">        <span class="built_in">console</span>.log(<span class="string">'fn if x'</span>,x)<span class="comment">//fn if x 5</span></span><br><span class="line">    &#125;</span><br><span class="line">    <span class="built_in">console</span>.log(<span class="string">'fn g x'</span>,x)<span class="comment">//fn g x 100</span></span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="comment">// 例5</span></span><br><span class="line"><span class="comment">// 正确的重定义</span></span><br><span class="line"><span class="function"><span class="keyword">function</span> <span class="title">f</span>(<span class="params">condition, x</span>) </span>&#123;</span><br><span class="line">    <span class="keyword">if</span> (condition) &#123;</span><br><span class="line">        <span class="keyword">let</span> x = <span class="number">100</span>;</span><br><span class="line">        <span class="keyword">return</span> x;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">return</span> x;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line">f(<span class="literal">false</span>, <span class="number">0</span>); <span class="comment">// returns 0</span></span><br><span class="line">f(<span class="literal">true</span>, <span class="number">0</span>);  <span class="comment">// returns 100</span></span><br></pre></td></tr></table></figure></li></ul><h3 id="屏蔽"><a href="#屏蔽" class="headerlink" title="屏蔽"></a>屏蔽</h3><ul><li>在一个嵌套作用域里引入一个新名字的行为称做屏蔽。 它是一把双刃剑，它可能会不小心地引入新问题，同时也可能会解决一些错误</li><li>使用let重写sumMatrix上面var写过的</li><li>在这里 在重新定义的数据，会出现一个数据屏蔽把前面定义的数据屏蔽掉</li><li>这样解决了数据不会相互影响的问题</li></ul><figure class="highlight typescript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br></pre></td><td class="code"><pre><span class="line">- </span><br><span class="line"><span class="function"><span class="keyword">function</span> <span class="title">sumMatrix</span>(<span class="params">matrix: <span class="built_in">number</span>[][]</span>) </span>&#123;</span><br><span class="line">    <span class="keyword">let</span> sum = <span class="number">0</span>;</span><br><span class="line">    <span class="keyword">for</span> (<span class="keyword">let</span> i = <span class="number">0</span>; i &lt; matrix.length; i++) &#123;</span><br><span class="line">        <span class="keyword">var</span> currentRow = matrix[i];</span><br><span class="line">        <span class="keyword">for</span> (<span class="keyword">let</span> i = <span class="number">0</span>; i &lt; currentRow.length; i++) &#123;</span><br><span class="line">            sum += currentRow[i];</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">return</span> sum;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h2 id="块级作用域变量的获取"><a href="#块级作用域变量的获取" class="headerlink" title="块级作用域变量的获取"></a>块级作用域变量的获取</h2><ul><li>在我们最初谈及获取用var声明的变量时，我们简略地探究了一下在获取到了变量之后它的行为是怎样的。 直观地讲，每次进入一个作用域时，它创建了一个变量的 环境。 就算作用域内代码已经执行完毕，这个环境与其捕获的变量依然存在。</li><li>因为我们已经在city的环境里获取到了city，所以就算if语句执行结束后我们仍然可以访问它。</li></ul><figure class="highlight typescript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br></pre></td><td class="code"><pre><span class="line"><span class="function"><span class="keyword">function</span> <span class="title">theCityThatAlwaysSleeps</span>(<span class="params"></span>) </span>&#123;</span><br><span class="line">    <span class="comment">// fn作用域定义了</span></span><br><span class="line">    <span class="keyword">let</span> getCity;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">if</span> (<span class="literal">true</span>) &#123;</span><br><span class="line">        <span class="keyword">let</span> city = <span class="string">"Seattle"</span>;</span><br><span class="line">        <span class="comment">// if内部赋值</span></span><br><span class="line">        getCity = <span class="function"><span class="keyword">function</span>(<span class="params"></span>) </span>&#123;</span><br><span class="line">            <span class="comment">// 在if作用域已经执行获取到了</span></span><br><span class="line">            <span class="keyword">return</span> city;</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="comment">// 外侧依然是能访问</span></span><br><span class="line">    <span class="keyword">return</span> getCity();</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><hr><ul><li>当let声明出现在循环体里时拥有完全不同的行为。 不仅是在循环里引入了一个新的变量环境，而是针对 每次迭代都会创建这样一个新作用域。 这就是我们在使用立即执行的函数表达式时做的事，所以在 setTimeout例子里我们仅使用let声明就可以了。</li><li>这样就可以理想的输出1-9了<figure class="highlight typescript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">for</span> (<span class="keyword">let</span> i = <span class="number">0</span>; i &lt; <span class="number">10</span> ; i++) &#123;</span><br><span class="line">    setTimeout(<span class="function"><span class="keyword">function</span>(<span class="params"></span>) </span>&#123;<span class="built_in">console</span>.log(i); &#125;, <span class="number">100</span> * i);</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure></li></ul><h1 id="const-声明"><a href="#const-声明" class="headerlink" title="const 声明"></a>const 声明</h1><ul><li>它们与let声明相似，但是就像它的名字所表达的，它们被赋值后不能再改变。 换句话说，它们拥有与 let相同的作用域规则，但是不能对它们重新赋值</li></ul><figure class="highlight typescript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">const</span> numLivesForCat = <span class="number">9</span>;</span><br><span class="line"><span class="keyword">const</span> kitty = &#123;</span><br><span class="line">    name: <span class="string">"Aurora"</span>,</span><br><span class="line">    numLives: numLivesForCat,</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="comment">// 定义后，外层是无法被重新定义的</span></span><br><span class="line"><span class="comment">// 可以使用但是无法重新在外层整体的去赋值</span></span><br><span class="line"><span class="comment">// Error</span></span><br><span class="line">kitty = &#123;</span><br><span class="line">    name: <span class="string">"Danielle"</span>,</span><br><span class="line">    numLives: numLivesForCat</span><br><span class="line">&#125;;</span><br><span class="line"></span><br><span class="line"><span class="comment">// 但是使用这样的方式去更改内部的值是不受限制的</span></span><br><span class="line"><span class="comment">// all "okay"</span></span><br><span class="line">kitty.name = <span class="string">"Rory"</span>;</span><br><span class="line">kitty.name = <span class="string">"Kitty"</span>;</span><br><span class="line">kitty.name = <span class="string">"Cat"</span>;</span><br><span class="line">kitty.numLives--;</span><br></pre></td></tr></table></figure><h1 id="解构【es6特性】"><a href="#解构【es6特性】" class="headerlink" title="解构【es6特性】"></a>解构【es6特性】</h1><h2 id="数组解构"><a href="#数组解构" class="headerlink" title="数组解构"></a>数组解构</h2><ul><li>相当于使用了索引，但更为方便</li><li>你可以在数组里使用…语法创建剩余变量</li></ul><hr><ul><li>可以解开单个</li><li>可以获取多个</li><li>可以跳过,隔开就可以<figure class="highlight typescript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">// 1.数组使用</span></span><br><span class="line"><span class="keyword">let</span> input = [<span class="number">1</span>, <span class="number">2</span>];</span><br><span class="line"><span class="keyword">let</span> [first, second] = input;</span><br><span class="line"><span class="built_in">console</span>.log(first); <span class="comment">// outputs 1</span></span><br><span class="line"><span class="built_in">console</span>.log(second); <span class="comment">// outputs 2</span></span><br><span class="line"></span><br><span class="line"><span class="comment">// 相当于</span></span><br><span class="line">first = input[<span class="number">0</span>];</span><br><span class="line">second = input[<span class="number">1</span>];</span><br><span class="line"></span><br><span class="line"></span><br><span class="line"><span class="comment">// 2.函数使用结构数组，传递一个数组解开两个变量</span></span><br><span class="line"><span class="function"><span class="keyword">function</span> <span class="title">f</span>(<span class="params">[first, second]: [<span class="built_in">number</span>, <span class="built_in">number</span>]</span>) </span>&#123;</span><br><span class="line">    <span class="built_in">console</span>.log(first);</span><br><span class="line">    <span class="built_in">console</span>.log(second);</span><br><span class="line">&#125;</span><br><span class="line">f(input);</span><br><span class="line"></span><br><span class="line"></span><br><span class="line"><span class="comment">// 3. 剩余变量</span></span><br><span class="line"><span class="keyword">let</span> [first, ...rest] = [<span class="number">1</span>, <span class="number">2</span>, <span class="number">3</span>, <span class="number">4</span>];</span><br><span class="line"><span class="built_in">console</span>.log(first); <span class="comment">// outputs 1</span></span><br><span class="line"><span class="built_in">console</span>.log(rest); <span class="comment">// outputs [ 2, 3, 4 ]</span></span><br><span class="line"></span><br><span class="line"></span><br><span class="line"><span class="comment">// 4. 单独提取也可以</span></span><br><span class="line"><span class="keyword">let</span> [first] = [<span class="number">1</span>, <span class="number">2</span>, <span class="number">3</span>, <span class="number">4</span>];</span><br><span class="line"><span class="built_in">console</span>.log(first); <span class="comment">// outputs 1</span></span><br><span class="line"></span><br><span class="line"><span class="comment">// 5. 获取其他元素,隔开</span></span><br><span class="line"><span class="keyword">let</span> [, second, , fourth] = [<span class="number">1</span>, <span class="number">2</span>, <span class="number">3</span>, <span class="number">4</span>];</span><br></pre></td></tr></table></figure></li></ul><h2 id="对象解构"><a href="#对象解构" class="headerlink" title="对象解构"></a>对象解构</h2><ul><li>和数组的没什么区别</li><li>同样不需要的可以直接忽略<figure class="highlight typescript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">let</span> o = &#123;</span><br><span class="line">    a: <span class="string">"foo"</span>,</span><br><span class="line">    b: <span class="number">12</span>,</span><br><span class="line">    c: <span class="string">"bar"</span></span><br><span class="line">&#125;;</span><br><span class="line"><span class="keyword">let</span> &#123; a, b &#125; = o;</span><br><span class="line"></span><br><span class="line"><span class="comment">// 剩余变量</span></span><br><span class="line"><span class="keyword">let</span> &#123; a, ...passthrough &#125; = o;</span><br><span class="line"><span class="keyword">let</span> total = passthrough.b + passthrough.c.length;</span><br></pre></td></tr></table></figure></li></ul><h3 id="属性重命名"><a href="#属性重命名" class="headerlink" title="属性重命名"></a>属性重命名</h3><ul><li>在对象中结构我们可以赋于其他于属性不同的名字</li><li>这里就会有疑惑ts里面‘:’后面不是加的是指示类型么</li><li>如果你想指定它的类型， 仍然需要在其后写上完整的模式。</li></ul><figure class="highlight typescript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">// 前面为属性名：后面为更改的属性名</span></span><br><span class="line"><span class="keyword">let</span> &#123; a: newName1, b: newName2 &#125; = o;</span><br><span class="line"></span><br><span class="line"><span class="comment">// 相等于</span></span><br><span class="line"><span class="keyword">let</span> newName1 = o.a;</span><br><span class="line"><span class="keyword">let</span> newName2 = o.b;</span><br><span class="line"></span><br><span class="line"></span><br><span class="line"><span class="comment">//添加指示类型</span></span><br><span class="line"><span class="keyword">let</span> &#123;a, b&#125;: &#123;a: <span class="built_in">string</span>, b: <span class="built_in">number</span>&#125; = o;</span><br></pre></td></tr></table></figure><h3 id="默认值"><a href="#默认值" class="headerlink" title="默认值"></a>默认值</h3><ul><li>? 可选属性</li><li>在指定类型前面加?号代表可以不传</li><li>在结构时用=给定默认值</li><li>默认值可以让你在属性为 undefined 时使用缺省值</li></ul><figure class="highlight typescript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><span class="line"><span class="function"><span class="keyword">function</span> <span class="title">keepWholeObject</span>(<span class="params">wholeObject: &#123; a: <span class="built_in">string</span>, b?: <span class="built_in">number</span> &#125;</span>) </span>&#123;</span><br><span class="line">    <span class="keyword">let</span> &#123; a, b = <span class="number">1001</span> &#125; = wholeObject;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="keyword">let</span> wholeObject = &#123;a:<span class="string">'abc'</span>&#125;</span><br><span class="line"></span><br><span class="line"><span class="built_in">console</span>.log(keepWholeObject(wholeObject)) </span><br><span class="line"><span class="comment">// a=abc  b=1001</span></span><br></pre></td></tr></table></figure><h3 id="函数声明"><a href="#函数声明" class="headerlink" title="函数声明"></a>函数声明</h3><ul><li>解构也能用于函数声明。 看以下简单的情况<figure class="highlight typescript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">type</span> C = &#123; a: <span class="built_in">string</span>, b?: <span class="built_in">number</span> &#125;</span><br><span class="line"><span class="function"><span class="keyword">function</span> <span class="title">f</span>(<span class="params">&#123; a, b &#125;: C</span>): <span class="title">void</span> </span>&#123;</span><br><span class="line">    </span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure></li></ul><hr><ul><li>可以使用结构的同时使用默认值</li><li>通常情况下更多的是指定默认值，解构默认值有些棘手。 首先，你需要在默认值之前设置其格式</li><li>官网的例子并不能实现<figure class="highlight typescript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line">function f(&#123; a="", b=0 &#125; : &#123;a?:String,b?:Number&#125;): void &#123;</span><br><span class="line">    <span class="comment">// ...</span></span><br><span class="line">    <span class="built_in">console</span>.log(a);</span><br><span class="line">    <span class="built_in">console</span>.log(b);</span><br><span class="line">&#125;</span><br><span class="line">f(&#123;&#125;);</span><br></pre></td></tr></table></figure></li></ul><h2 id="展开"><a href="#展开" class="headerlink" title="展开"></a>展开</h2><ul><li>展开操作符正与解构相反。 它允许你将一个数组展开为另一个数组，或将一个对象展开为另一个对象</li><li>这样我们合并数组/对象就方便了很多</li><li>但是展开对，对象的缺陷还是有的</li><li>两个对象展开相同还是对象，相同的属性就会覆盖<figure class="highlight typescript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">// 合并数组</span></span><br><span class="line"><span class="keyword">let</span> first = [<span class="number">1</span>, <span class="number">2</span>];</span><br><span class="line"><span class="keyword">let</span> second = [<span class="number">3</span>, <span class="number">4</span>];</span><br><span class="line"><span class="keyword">let</span> bothPlus = [<span class="number">0</span>, ...first, ...second, <span class="number">5</span>];</span><br><span class="line"></span><br><span class="line"><span class="comment">// 合并对象</span></span><br><span class="line"><span class="keyword">let</span> defaults = &#123; food: <span class="string">"spicy"</span>, price: <span class="string">"$$"</span>, ambiance: <span class="string">"noisy"</span> &#125;;</span><br><span class="line"><span class="keyword">let</span> search = &#123; ...defaults, food: <span class="string">"rich"</span> &#125;;</span><br></pre></td></tr></table></figure></li></ul><hr><ul><li>对象展开还有其它一些意想不到的限制。 首先，它仅包含对象 自身的可枚举属性。 大体上是说当你展开一个对象实例时，你会丢失其方法：<figure class="highlight typescript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">class</span> C &#123;</span><br><span class="line">  p = <span class="number">12</span>;</span><br><span class="line">  m() &#123;</span><br><span class="line">  &#125;</span><br><span class="line">&#125;</span><br><span class="line"><span class="keyword">let</span> c = <span class="keyword">new</span> C();</span><br><span class="line"><span class="keyword">let</span> clone = &#123; ...c &#125;;</span><br><span class="line">clone.p; <span class="comment">// ok</span></span><br><span class="line">clone.m(); <span class="comment">// error!</span></span><br></pre></td></tr></table></figure></li></ul><h1 id="后记"><a href="#后记" class="headerlink" title="后记"></a>后记</h1><ul><li>这个就是我学习Ts的第二天的笔记，欢迎更多的同行大哥指导交流</li><li><a href="https://yhf7.github.io/" target="_blank" rel="noopener">欢迎进入我的博客</a>：<a href="https://yhf7.github.io/" target="_blank" rel="noopener">https://yhf7.github.io/</a></li><li>如果有什么侵权的话，请及时添加小编微信以及qq也可以来告诉小编（905477376微信qq通用），谢谢！</li></ul>]]></content>
    
    <summary type="html">
    
      
      
        &lt;link rel=&quot;stylesheet&quot; class=&quot;aplayer-secondary-style-marker&quot; href=&quot;/assets/css/APlayer.min.css&quot;&gt;&lt;script src=&quot;/assets/js/APlayer.min.js&quot; cla
      
    
    </summary>
    
      <category term="TypeScript" scheme="http://yoursite.com/categories/TypeScript/"/>
    
    
      <category term="TypeScript 笔记" scheme="http://yoursite.com/tags/TypeScript-%E7%AC%94%E8%AE%B0/"/>
    
  </entry>
  
  <entry>
    <title>ES6 以上的个人遇到的知识积累</title>
    <link href="http://yoursite.com/2019/03/07/ES6+%E7%9A%84%E7%94%A8%E6%B3%95%E7%AC%94%E8%AE%B0/"/>
    <id>http://yoursite.com/2019/03/07/ES6+的用法笔记/</id>
    <published>2019-03-07T06:43:03.234Z</published>
    <updated>2019-03-19T06:01:51.024Z</updated>
    
    <content type="html"><![CDATA[<link rel="stylesheet" class="aplayer-secondary-style-marker" href="/assets/css/APlayer.min.css"><script src="/assets/js/APlayer.min.js" class="aplayer-secondary-script-marker"></script><h1 id="…-数组-对象的扩展"><a href="#…-数组-对象的扩展" class="headerlink" title="… 数组/对象的扩展"></a>… 数组/对象的扩展</h1><ul><li>在我一开始看到…后面带参数是我写vue中时使用vuex引入数据的时候使用的</li><li>在一开始我只是以为它只是vuex引入数据的写法</li><li>但是在我再次遇到的时候我对这个表示很疑惑，所以就问人</li><li>通过查阅资料和他人的告知我知道了这个是数组/对象的扩展是es6以上的知识</li><li>我就去查阅了es6+的资料并知道了是着么的一个东西</li><li>相当于把整个对象搬迁过来本地一样</li></ul><ol><li><p>对象 (分开放test.js)</p><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">var</span> test = &#123;</span><br><span class="line">    test1 (e) &#123;</span><br><span class="line">        <span class="built_in">console</span>.log(e);</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="keyword">export</span> &#123;test&#125;</span><br></pre></td></tr></table></figure></li><li><p>引入方法</p><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">import</span> &#123;test&#125;  <span class="keyword">from</span> <span class="string">'./test.js'</span></span><br><span class="line"></span><br><span class="line"><span class="comment">// 小程序中使用</span></span><br><span class="line">Page(&#123;</span><br><span class="line">  <span class="comment">// 函数的扩展 es6+  等于new一个类</span></span><br><span class="line">  ...detailsTpl,</span><br><span class="line"></span><br><span class="line"></span><br><span class="line">  test() &#123;</span><br><span class="line">      <span class="comment">// 在内部就可以直接用this来使用，相当于把整个函数搬迁过来了</span></span><br><span class="line">      <span class="keyword">this</span>.test1(<span class="string">'测试'</span>);</span><br><span class="line">  &#125;</span><br><span class="line"></span><br><span class="line">&#125;)</span><br></pre></td></tr></table></figure></li></ol><h1 id="for-in-for-of"><a href="#for-in-for-of" class="headerlink" title="for in/for of"></a>for in/for of</h1><ul><li>for of一直都没着么关注看到别人说是es6的语法改进了for in 的不足就去看看</li><li>这个of 呢不能用在对象哦，用在数组是可以的</li><li>这个of和foreach好像没啥区别啊….,官网说是用来代替foreach实例的<figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">let</span> arr = [<span class="string">'a'</span>,<span class="string">'b'</span>,<span class="string">'c'</span>,<span class="string">'d'</span>,<span class="string">'e'</span>];</span><br><span class="line"><span class="comment">// 这个呢是用了做一个小实验</span></span><br><span class="line">arr.foo = <span class="string">"hello"</span></span><br><span class="line"></span><br><span class="line"><span class="comment">// 先看看 数组的情况</span></span><br><span class="line"><span class="comment">// of里面是不会输出上面的foo的</span></span><br><span class="line"><span class="keyword">for</span> (<span class="keyword">const</span> e <span class="keyword">of</span> arr) &#123;</span><br><span class="line">    <span class="built_in">console</span>.log(e)</span><br><span class="line">&#125; <span class="comment">// a,b,c,d,e</span></span><br><span class="line"><span class="comment">// 看看foreach</span></span><br><span class="line"><span class="comment">// foreach 这个也是一样的</span></span><br><span class="line">arr.forEach(<span class="function"><span class="params">item</span> =&gt;</span> &#123;</span><br><span class="line">    <span class="built_in">console</span>.log(item)</span><br><span class="line">&#125;)<span class="comment">// a,b,c,d,e</span></span><br><span class="line"></span><br><span class="line"><span class="comment">// 这个就不同的，它会输出foo</span></span><br><span class="line"><span class="keyword">for</span> (<span class="keyword">const</span> e <span class="keyword">in</span> arr) &#123;</span><br><span class="line">    <span class="built_in">console</span>.log(e)</span><br><span class="line">&#125; <span class="comment">// 0,1,2,3,4,foo</span></span><br></pre></td></tr></table></figure></li></ul><hr><ul><li>看看用在对象里面</li><li>对象是不可以使用的，直接报错<figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">let</span> object = &#123;<span class="string">'a'</span>:<span class="number">11</span>,<span class="string">'b'</span>:<span class="number">22</span>,<span class="string">'c'</span>:<span class="number">33</span>&#125;</span><br><span class="line"></span><br><span class="line"><span class="comment">// 先看看 数组的情况</span></span><br><span class="line"><span class="keyword">for</span> (<span class="keyword">const</span> e <span class="keyword">of</span> object) &#123;</span><br><span class="line">    <span class="built_in">console</span>.log(e)</span><br><span class="line">&#125; <span class="comment">// error</span></span><br><span class="line"><span class="keyword">for</span> (<span class="keyword">const</span> e <span class="keyword">in</span> arr) &#123;</span><br><span class="line">    <span class="built_in">console</span>.log(e)</span><br><span class="line">&#125; <span class="comment">// // a,b,c,d,e</span></span><br></pre></td></tr></table></figure></li></ul>]]></content>
    
    <summary type="html">
    
      
      
        &lt;link rel=&quot;stylesheet&quot; class=&quot;aplayer-secondary-style-marker&quot; href=&quot;/assets/css/APlayer.min.css&quot;&gt;&lt;script src=&quot;/assets/js/APlayer.min.js&quot; cla
      
    
    </summary>
    
      <category term="JavaScript" scheme="http://yoursite.com/categories/JavaScript/"/>
    
    
      <category term="js笔记" scheme="http://yoursite.com/tags/js%E7%AC%94%E8%AE%B0/"/>
    
  </entry>
  
</feed>
