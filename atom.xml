<?xml version="1.0" encoding="utf-8"?>
<feed xmlns="http://www.w3.org/2005/Atom">
  <title>不懂IT的男孩</title>
  
  <subtitle>不忘初心，方得始终</subtitle>
  <link href="/atom.xml" rel="self"/>
  
  <link href="http://yoursite.com/"/>
  <updated>2019-09-25T03:42:15.355Z</updated>
  <id>http://yoursite.com/</id>
  
  <author>
    <name>Detail</name>
    
  </author>
  
  <generator uri="http://hexo.io/">Hexo</generator>
  
  <entry>
    <title>React+TypeScript+Antd+Mock 后台管理系统</title>
    <link href="http://yoursite.com/2019/09/25/React+TypeScript/"/>
    <id>http://yoursite.com/2019/09/25/React+TypeScript/</id>
    <published>2019-09-25T00:00:52.074Z</published>
    <updated>2019-09-25T03:42:15.355Z</updated>
    
    <content type="html"><![CDATA[<link rel="stylesheet" class="aplayer-secondary-style-marker" href="/assets/css/APlayer.min.css"><script src="/assets/js/APlayer.min.js" class="aplayer-secondary-script-marker"></script><h1 id="前言"><a href="#前言" class="headerlink" title="前言"></a>前言</h1><ul><li>在近段时间中Ts在互联网时代大热起来</li><li>在前段时间我学习了Ts，对于写过java的人来说ts其实学起来得心应手</li><li>但是把Ts和前端项目结合在一起是不是得心应手呢，非也</li><li>对于我这样没有经验只是简单的学习了官网以及对官网对例子进行编写执行</li><li>这其实是一次挑战，对自己技术对一个突破</li><li>我就拿到了前面刚做好的一个react项目来改成Ts的项目</li><li>与其说是改应该说是重构，从项目的搭建都是从头开始</li><li><a href="https://gitee.com/yhf7/ReactTypescriptAntdBackstage" target="_blank" rel="noopener">项目地址：</a><a href="https://gitee.com/yhf7/ReactTypescriptAntdBackstage" target="_blank" rel="noopener">https://gitee.com/yhf7/ReactTypescriptAntdBackstage</a></li></ul><h1 id="工具-资料"><a href="#工具-资料" class="headerlink" title="工具/资料"></a>工具/资料</h1><ul><li>系统 macOS 10.14.5</li><li>yarn 1.17.3 cnpm 6.0.0  npm 6.4.1  node 10.13.0</li><li>编辑器 vs code 开发版</li><li>脚手架 create-react-app</li><li>npm插件 <a href="https://www.npmjs.com/" target="_blank" rel="noopener">https://www.npmjs.com/</a></li><li>ts <a href="https://www.tslang.cn/docs/home.html" target="_blank" rel="noopener">https://www.tslang.cn/docs/home.html</a></li></ul><h1 id="实现功能树图"><a href="#实现功能树图" class="headerlink" title="实现功能树图"></a>实现功能树图</h1><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br></pre></td><td class="code"><pre><span class="line">├── Mock // 模拟数据</span><br><span class="line">│   ├── user</span><br><span class="line">│   ├── oreder</span><br><span class="line">│   └── 等</span><br><span class="line">├── 页面 //</span><br><span class="line">│   ├── UI ├── 按钮、弹框、Loading、通知提醒、全局Message、Tab、标签、图片画廊（流式布局）、轮播图 // antd我们常用的抽取</span><br><span class="line">│   ├── 表单 ├── 登录、注册(注册常用组合)</span><br><span class="line">│   ├── 表格 ├── 基础表格（常用的表格） 高级表格（在基础表格上添加的一些表格属性）</span><br><span class="line">│   ├── 富文本 这个其实平时也是很常用到的 （插件很多挑自己喜欢的）</span><br><span class="line">│   ├── 城市管理 ├── 实现表格数据 开通城市 以及一些查询</span><br><span class="line">│   ├── 订单管理 ├── 实现表格数据 结束订单 查询订单  订单详情 </span><br><span class="line">│   │                                                  ├── （订单详情页面）通过订单详情跳转 展示地图以及订单详情</span><br><span class="line">│   ├── 员工管理 ├── 实现表格数据以及 增删改查的组件弹框操作</span><br><span class="line">│   ├── 车辆地图 实现地图以及车辆信息</span><br><span class="line">│   ├── 图表 ├──  饼图、柱状图、折线图</span><br><span class="line">│   ├── 权限设置 ├── 创建角色 设置权限 用户授权</span><br></pre></td></tr></table></figure><h1 id="起步"><a href="#起步" class="headerlink" title="起步"></a>起步</h1><h4 id="1-起一个ts项目"><a href="#1-起一个ts项目" class="headerlink" title="1. 起一个ts项目"></a>1. 起一个ts项目</h4><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">$ create-react-app react-ts-demo --typescript</span><br></pre></td></tr></table></figure><h4 id="2-安装-配置-antd等插件"><a href="#2-安装-配置-antd等插件" class="headerlink" title="2. 安装/配置 antd等插件"></a>2. 安装/配置 antd等插件</h4><ul><li>安装了很多我也不太记得具体看package<figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">$ sudo cnpm i antd axios less less-loader mockjs koa koa2-cors react-router-dom redux react-redux -S</span><br></pre></td></tr></table></figure></li></ul><h4 id="3-搭建mock"><a href="#3-搭建mock" class="headerlink" title="3. 搭建mock"></a>3. 搭建mock</h4><ul><li>利用koa和mockjs构建：具体看文件中的mock文件吧</li></ul><h4 id="4-变更js为tsx和建立ts的接口等"><a href="#4-变更js为tsx和建立ts的接口等" class="headerlink" title="4. 变更js为tsx和建立ts的接口等"></a>4. 变更js为tsx和建立ts的接口等</h4><ul><li>这个说起来我也不知道着么说直接去看项目吧</li></ul><h4 id="5-封装API接口，以及组件等"><a href="#5-封装API接口，以及组件等" class="headerlink" title="5. 封装API接口，以及组件等"></a>5. 封装API接口，以及组件等</h4><h1 id="部分效果图"><a href="#部分效果图" class="headerlink" title="部分效果图"></a>部分效果图</h1><ul><li>前面几个列表里面的都是antd的一些组件把常用的抽取出来</li></ul><ol><li>登录页面<br><img src="/React/ts/r1.png" alt="react"></li><li>主页面<br><img src="/React/ts/r2.png" alt="react"></li><li>ui界面其中一个<br><img src="/React/ts/r7.png" alt="react"></li><li>城市管理<br><img src="/React/ts/r3.png" alt="react"></li><li>订单管理<br><img src="/React/ts/r4.png" alt="react"></li><li>图表<br><img src="/React/ts/r5.png" alt="react"></li><li>员工管理<br><img src="/React/ts/r6.png" alt="react"></li></ol>]]></content>
    
    <summary type="html">
    
      
      
        &lt;link rel=&quot;stylesheet&quot; class=&quot;aplayer-secondary-style-marker&quot; href=&quot;/assets/css/APlayer.min.css&quot;&gt;&lt;script src=&quot;/assets/js/APlayer.min.js&quot; cla
      
    
    </summary>
    
      <category term="TypeScript" scheme="http://yoursite.com/categories/TypeScript/"/>
    
      <category term="React" scheme="http://yoursite.com/categories/React/"/>
    
    
      <category term="React" scheme="http://yoursite.com/tags/React/"/>
    
      <category term="TypeScript" scheme="http://yoursite.com/tags/TypeScript/"/>
    
  </entry>
  
  <entry>
    <title>如何使用react-native创建自己的的第一个ios App</title>
    <link href="http://yoursite.com/2019/09/08/react-native%E7%AC%AC%E4%B8%80%E4%B8%AA/"/>
    <id>http://yoursite.com/2019/09/08/react-native第一个/</id>
    <published>2019-09-08T01:28:53.189Z</published>
    <updated>2019-09-08T02:54:21.691Z</updated>
    
    <content type="html"><![CDATA[<link rel="stylesheet" class="aplayer-secondary-style-marker" href="/assets/css/APlayer.min.css"><script src="/assets/js/APlayer.min.js" class="aplayer-secondary-script-marker"></script><h1 id="前言"><a href="#前言" class="headerlink" title="前言"></a>前言</h1><ul><li>写完了项目突然好闲，而且学习了react</li><li>哪学习了react着能不去尝尝鲜rn火了很久热潮，新的热潮也来了</li><li>我现在才开始想要进军rn的念头</li><li>面对原生开发ios的人来说rn这种东西其实就是伪app</li><li>但是作为一个前端来说rn是我们离app最近的距离</li><li>我也想尝尝鲜爽一把</li><li>搞了几个小时，晚上一直出问题跑不了早上起来继续死磕最后还是成了</li><li>试过了很多方法 重置pod 设置pod源</li></ul><h1 id="工具-资料"><a href="#工具-资料" class="headerlink" title="工具/资料"></a>工具/资料</h1><ol><li>系统 macOS 10.14.5</li><li>控制台 科学上网工具</li><li>Homebrew brew 2.1.8 （这个安装工具自己查）</li><li>node 10.13.0  npm 6.11.3  yarn 1.17.3</li><li><a href="https://reactnative.cn/docs/getting-started.html" target="_blank" rel="noopener">ReactNative官网</a></li><li><a href="https://guides.cocoapods.org/using/getting-started.html" target="_blank" rel="noopener">cocoapods界面官网</a></li><li><a href="https://gems.ruby-china.com/" target="_blank" rel="noopener">ruby</a></li><li><a href="https://mirror.tuna.tsinghua.edu.cn/help/CocoaPods/" target="_blank" rel="noopener">cocoapods改源</a></li></ol><h1 id="开始"><a href="#开始" class="headerlink" title="开始"></a>开始</h1><h3 id="安装环境"><a href="#安装环境" class="headerlink" title="安装环境"></a>安装环境</h3><ol><li><p>安装 node、watchman、flow</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line">$ brew install node</span><br><span class="line">$ brew install watchman</span><br><span class="line">$ brew install flow</span><br><span class="line">$ sudo npm install -g yarn react-native-cli</span><br><span class="line">$</span><br></pre></td></tr></table></figure></li><li><p>去苹果的app store 下载 Xcode</p></li></ol><h3 id="创建项目"><a href="#创建项目" class="headerlink" title="创建项目"></a>创建项目</h3><ol><li>创建(最好挂v)<figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">$ react-native init AwesomeProject</span><br></pre></td></tr></table></figure></li></ol><p><img src="/ReactNative/h1.png" alt="rn"></p><ol start="2"><li>发现错误</li></ol><ul><li>我自己是遇到了pod安装不上的错误</li><li>如图这个就是pod没装上环境需要自己手动去安装</li><li>这个pod install 是为了构建原生ios app 代理node_modules地址用的<br><img src="/ReactNative/h2.png" alt="rn"></li><li>尝试安装 pod install<figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">$ <span class="built_in">cd</span> ./AwesomeProject/ios &amp;&amp; pod install</span><br></pre></td></tr></table></figure></li></ul><p><img src="/ReactNative/h3.png" alt="rn"></p><h4 id="错误情况-一"><a href="#错误情况-一" class="headerlink" title="错误情况 一"></a>错误情况 一</h4><ul><li>fatal: unable to access ‘http://…/spring-mvc.git/‘: Failed to connect to 127.0.0.1 port 1080: Connection refused</li><li>如果是遇到了无法代理1080端口的设置一下git代理<figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br></pre></td><td class="code"><pre><span class="line">$ git config --global https.proxy http://127.0.0.1:1080</span><br><span class="line"></span><br><span class="line">$ git config --global https.proxy https://127.0.0.1:1080</span><br><span class="line"></span><br><span class="line">$ git config --global --<span class="built_in">unset</span> http.proxy</span><br><span class="line"></span><br><span class="line">$ git config --global --<span class="built_in">unset</span> https.proxy</span><br><span class="line"></span><br><span class="line">$ sudo npm config delete proxy</span><br></pre></td></tr></table></figure></li></ul><h4 id="错误情况-二"><a href="#错误情况-二" class="headerlink" title="错误情况 二"></a>错误情况 二</h4><ul><li>无法代理到 pod<br><img src="/ReactNative/h4.png" alt="rn"></li><li>我这里是下载包放进去 链接:<a href="https://pan.baidu.com/s/158fJx1fm3iKzxTE2mkwLXA" target="_blank" rel="noopener">https://pan.baidu.com/s/158fJx1fm3iKzxTE2mkwLXA</a>  密码:8vrp</li></ul><ol><li>解压 master包改名为master放到 ~/.cocoapods/repos 文件下（这个解压可能需要一定的时间）</li><li>解压.git文件 放到 ~/.cocoapods/repos/master文件夹下就是刚才解压的文件夹里面</li><li>回到ios文件夹 pod install</li></ol><h4 id="错误情况-三"><a href="#错误情况-三" class="headerlink" title="错误情况 三"></a>错误情况 三</h4><ul><li>这个问题我也不知道 反正是最后一次开了科学上网就可以了我也不知道为啥<br><img src="/ReactNative/h5.png" alt="rn"></li></ul><h4 id="pod-install成功的样子"><a href="#pod-install成功的样子" class="headerlink" title="pod install成功的样子"></a>pod install成功的样子</h4><p><img src="/ReactNative/h9.png" alt="rn"></p><h4 id="一次安装成功的结果"><a href="#一次安装成功的结果" class="headerlink" title="一次安装成功的结果"></a>一次安装成功的结果</h4><ul><li>如果看到如图恭喜你一次就安装成功了<br><img src="/ReactNative/h6.png" alt="rn"></li></ul><h3 id="运行项目"><a href="#运行项目" class="headerlink" title="运行项目"></a>运行项目</h3><ul><li><p>在项目根目录运行</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">$ <span class="built_in">cd</span> AwesomeProject</span><br><span class="line">$ react-native run-ios</span><br></pre></td></tr></table></figure></li><li><p>第一次跑不行第二次跑没问题了</p></li><li>如果中途断开了十有八九是pod的问题磕pod就可以了</li><li>图一显示的 success Successfully launched the app on the simulator </li><li>弹出图二 的样子就是成功了只是弹图二没有绿色部分还是不成</li></ul><p><img src="/ReactNative/h7.png" alt="rn"><br><img src="/ReactNative/h8.png" alt="rn"></p><h3 id="效果图"><a href="#效果图" class="headerlink" title="效果图"></a>效果图</h3><p><img src="/ReactNative/h10.png" alt="rn"></p><ul><li>修改app.js 然后在模拟器 command + r就可以了<br><img src="/ReactNative/h11.png" alt="rn"></li></ul><h3 id="运行命令总结"><a href="#运行命令总结" class="headerlink" title="运行命令总结"></a>运行命令总结</h3><ul><li><p>运行ios</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line">$ react-native run-ios <span class="comment"># 第一次跑需要用此命令</span></span><br><span class="line">$ react-native start <span class="comment"># 后面的这样运行就好了</span></span><br><span class="line">$ sudo npm run start <span class="comment"># 或者这样用node运行</span></span><br></pre></td></tr></table></figure></li><li><p>安装的也是一样的</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">$ react-native run-android <span class="comment"># 第一次</span></span><br></pre></td></tr></table></figure></li></ul><h1 id="后记"><a href="#后记" class="headerlink" title="后记"></a>后记</h1><ul><li>这就是我的第一个rn hello world 项目</li><li>死磕了好几个小时最后睡了一觉起来继续死磕就可以了哈哈哈</li><li>有什么不对或者有更好的方法可以提出来加微信我们交流交流</li><li><a href="https://yhf7.top/" target="_blank" rel="noopener">欢迎进入我的博客</a>：<a href="https://yhf7.github.io/" target="_blank" rel="noopener">https://yhf7.github.io/</a> 或 <a href="https://yhf7.top" target="_blank" rel="noopener">https://yhf7.top</a></li><li>如果有什么侵权的话，请及时添加小编微信以及 qq 也可以来告诉小编（905477376 微信 qq 通用），谢谢！</li></ul>]]></content>
    
    <summary type="html">
    
      
      
        &lt;link rel=&quot;stylesheet&quot; class=&quot;aplayer-secondary-style-marker&quot; href=&quot;/assets/css/APlayer.min.css&quot;&gt;&lt;script src=&quot;/assets/js/APlayer.min.js&quot; cla
      
    
    </summary>
    
      <category term="ReactNative" scheme="http://yoursite.com/categories/ReactNative/"/>
    
    
      <category term="ReactNative" scheme="http://yoursite.com/tags/ReactNative/"/>
    
  </entry>
  
  <entry>
    <title>create-react-app 项目中如何部署使用redux</title>
    <link href="http://yoursite.com/2019/09/05/React-redux%E9%A1%B9%E7%9B%AE%E9%83%A8%E7%BD%B2/"/>
    <id>http://yoursite.com/2019/09/05/React-redux项目部署/</id>
    <published>2019-09-05T07:48:17.908Z</published>
    <updated>2019-09-05T09:39:08.642Z</updated>
    
    <content type="html"><![CDATA[<link rel="stylesheet" class="aplayer-secondary-style-marker" href="/assets/css/APlayer.min.css"><script src="/assets/js/APlayer.min.js" class="aplayer-secondary-script-marker"></script><h1 id="前言"><a href="#前言" class="headerlink" title="前言"></a>前言</h1><ul><li>为什么写一篇这个呢？</li><li>是我觉得它应该被单独拿出来记录一下</li><li>其实redux和vuex项目构建非常相似，可以用几乎一样来形容</li><li>之前用过vuex感觉是一挺不错的全局状态管理</li><li>最近在学习以及使用react编写了一个后台管理系统</li><li>我问过了很多的前端老大哥他们都说redux这个东西不常用，看项目需求</li><li>不过用到的时候你也是的要懂这就尴尬了那到底用不用呢？好不好用呢？如何用呢？</li><li>这里我是使用插件去部署的，原生的部署之前在react小书的那个评论组件写过了，项目中还是用插件比较好，除非大神</li><li>那就跟着我的步伐来试试使用插件来给react项目部署redux</li></ul><h1 id="工具-资料"><a href="#工具-资料" class="headerlink" title="工具/资料"></a>工具/资料</h1><ul><li>系统 macOS 10.14.5</li><li>编辑器 vs code</li><li>项目架构 create-react-app</li><li>node 10.13.0  yarn 1.17.3  cnpm 6.0  webpack 4.29.6</li><li>react 16.8.6  redux 4.0.4</li><li><a href="https://gitee.com/yhf7/ReactAntdBackstage" target="_blank" rel="noopener">项目传送门</a></li><li><a href="https://yhf7.top:5000" target="_blank" rel="noopener">项目体验传送门</a></li></ul><h1 id="开始"><a href="#开始" class="headerlink" title="开始"></a>开始</h1><h3 id="一、安装插件"><a href="#一、安装插件" class="headerlink" title="一、安装插件"></a>一、安装插件</h3><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">$ sudo yarn add redux react-redux -S</span><br></pre></td></tr></table></figure><h3 id="二、-构建-action、reducer、store层"><a href="#二、-构建-action、reducer、store层" class="headerlink" title="二、 构建 action、reducer、store层"></a>二、 构建 action、reducer、store层</h3><p><img src="/React/redux.png" alt="redux"></p><ul><li>在src目录下创建redux文件夹，里面在分别建立action、reducer、store三个文件夹<h4 id="action-（事件触发行为层）"><a href="#action-（事件触发行为层）" class="headerlink" title="action （事件触发行为层）"></a>action （事件触发行为层）</h4></li><li>redux/action/index.js</li><li>用来干嘛呢，其实就是定义给组件调用函数</li><li>通过调用这里面的函数方法来执行数据的操作<figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">/**</span></span><br><span class="line"><span class="comment"> * Action 类型</span></span><br><span class="line"><span class="comment"> */</span></span><br><span class="line"><span class="comment">// 这里我们是把方法名抽离出来方便后期代码的管理</span></span><br><span class="line"><span class="keyword">export</span> <span class="keyword">const</span> type = &#123;</span><br><span class="line">  SWITCH_MENU: <span class="string">'SWITCH_MENU'</span></span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="comment">/**</span></span><br><span class="line"><span class="comment"> * 切换菜单类型</span></span><br><span class="line"><span class="comment"> * @param &#123;*&#125; menuName 菜单名称</span></span><br><span class="line"><span class="comment"> * type 为调用哪一个方法</span></span><br><span class="line"><span class="comment"> */</span></span><br><span class="line"><span class="keyword">export</span> <span class="function"><span class="keyword">function</span> <span class="title">switchMenu</span>(<span class="params">menuName</span>) </span>&#123;</span><br><span class="line">  <span class="keyword">return</span> &#123;</span><br><span class="line">    type: type.SWITCH_MENU,</span><br><span class="line">    menuName</span><br><span class="line">  &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure></li></ul><h4 id="reducer-（数据处理层依赖着action）"><a href="#reducer-（数据处理层依赖着action）" class="headerlink" title="reducer （数据处理层依赖着action）"></a>reducer （数据处理层依赖着action）</h4><ul><li>/redux/reducer/index.js</li><li>这里呢就是用了修改编辑数据的<figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">/**</span></span><br><span class="line"><span class="comment"> * Reducer 数据处理</span></span><br><span class="line"><span class="comment"> */</span></span><br><span class="line"><span class="comment">// 导入action</span></span><br><span class="line"> <span class="keyword">import</span> &#123;type&#125; <span class="keyword">from</span> <span class="string">'../action'</span></span><br><span class="line"></span><br><span class="line"><span class="comment">/**</span></span><br><span class="line"><span class="comment"> * @param state 为状态管理存储的数据，第一个是默认数据redux会传的不需要管</span></span><br><span class="line"><span class="comment"> * @parm action 为传进来的数据</span></span><br><span class="line"><span class="comment"> * 通过action.type来判断调用的是那个方法</span></span><br><span class="line"><span class="comment"> * */</span></span><br><span class="line"><span class="keyword">export</span> <span class="keyword">default</span> (state,action) =&gt; &#123;</span><br><span class="line">  <span class="keyword">switch</span> (action.type) &#123;</span><br><span class="line">    <span class="keyword">case</span> type.SWITCH_MENU:</span><br><span class="line">      <span class="keyword">return</span> &#123;</span><br><span class="line">        ...state,<span class="comment">/// es6解构保留原数据</span></span><br><span class="line">        menuName: action.menuName</span><br><span class="line">      &#125;;</span><br><span class="line">    <span class="keyword">default</span>:</span><br><span class="line">      <span class="keyword">return</span> &#123; ...state &#125;;</span><br><span class="line">  &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure></li></ul><h4 id="store-（引入createStore构建redux-依赖着reducer层）"><a href="#store-（引入createStore构建redux-依赖着reducer层）" class="headerlink" title="store （引入createStore构建redux,依赖着reducer层）"></a>store （引入createStore构建redux,依赖着reducer层）</h4><ul><li>/redux/store/index.js</li><li>构建初始化redux<figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">// 引入</span></span><br><span class="line"><span class="keyword">import</span> &#123; createStore &#125; <span class="keyword">from</span> <span class="string">'redux'</span></span><br><span class="line"><span class="comment">// 引入reducer层</span></span><br><span class="line"><span class="keyword">import</span> reducer <span class="keyword">from</span> <span class="string">'./../reducer'</span></span><br><span class="line"><span class="comment">// 初始化redux数据</span></span><br><span class="line"><span class="keyword">const</span> initialState = &#123;</span><br><span class="line">  menuName: <span class="string">'首页'</span></span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="comment">// 默认函数返回createStore函数，传入reducer层和初始化数据</span></span><br><span class="line"><span class="keyword">export</span> <span class="keyword">default</span> () =&gt; createStore(reducer, initialState)</span><br></pre></td></tr></table></figure></li></ul><h3 id="三、在组件中调用redux中定义的方法"><a href="#三、在组件中调用redux中定义的方法" class="headerlink" title="三、在组件中调用redux中定义的方法"></a>三、在组件中调用redux中定义的方法</h3><ul><li>调用定义的方法来改变状态中的数据</li><li>这里只是显示调用的过程具体可以查看项目<figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">import</span> React, &#123; Component &#125; <span class="keyword">from</span> <span class="string">'react'</span></span><br><span class="line"><span class="comment">// 引入redux中的语法</span></span><br><span class="line"><span class="keyword">import</span> &#123; connect &#125; <span class="keyword">from</span> <span class="string">'react-redux'</span></span><br><span class="line"><span class="comment">// 引入方法自定义的action层中的方法</span></span><br><span class="line"><span class="keyword">import</span> &#123; switchMenu &#125; <span class="keyword">from</span> <span class="string">'./../../redux/action'</span></span><br><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">NavLeft</span> <span class="keyword">extends</span> <span class="title">Component</span> </span>&#123;</span><br><span class="line">  <span class="comment">/**</span></span><br><span class="line"><span class="comment">   * 菜单点击</span></span><br><span class="line"><span class="comment">   */</span></span><br><span class="line">  handleClick = <span class="function"><span class="params">()</span> =&gt;</span> &#123;</span><br><span class="line">    <span class="comment">// 1. 获取方法，这个是redux中的语法</span></span><br><span class="line">    <span class="comment">// 犹豫我们以及把组件套入redux，所以我们就可以向父级拿方法</span></span><br><span class="line">    <span class="keyword">const</span> &#123; dispatch &#125; = <span class="keyword">this</span>.props;</span><br><span class="line"></span><br><span class="line">    <span class="comment">// 2. 调用action,把数据传入</span></span><br><span class="line">    dispatch(switchMenu(item.props.title))</span><br><span class="line">  &#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="comment">// 这一步比较关键,把组件套入redux中</span></span><br><span class="line"><span class="keyword">export</span> <span class="keyword">default</span> connect()(NavLeft);</span><br></pre></td></tr></table></figure></li></ul><hr><h5 id="调用方法的一个执行流程-switchMunu-action-gt-reducer-gt-store-gt-Component-gt-action…-这样循环下去"><a href="#调用方法的一个执行流程-switchMunu-action-gt-reducer-gt-store-gt-Component-gt-action…-这样循环下去" class="headerlink" title="调用方法的一个执行流程 switchMunu(action)-&gt;reducer-&gt;store-&gt;Component-&gt;action….这样循环下去"></a>调用方法的一个执行流程 switchMunu(action)-&gt;reducer-&gt;store-&gt;Component-&gt;action….这样循环下去</h5><p><img src="/React/redux2.png" alt="redux"></p><h3 id="四、在组件中调用redux中的存储的数据"><a href="#四、在组件中调用redux中的存储的数据" class="headerlink" title="四、在组件中调用redux中的存储的数据"></a>四、在组件中调用redux中的存储的数据</h3><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">import</span> React, &#123; Component &#125; <span class="keyword">from</span> <span class="string">'react'</span></span><br><span class="line"><span class="comment">// 引入redux</span></span><br><span class="line"><span class="keyword">import</span> &#123; connect &#125; <span class="keyword">from</span> <span class="string">'react-redux'</span></span><br><span class="line"></span><br><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">Header</span> <span class="keyword">extends</span> <span class="title">Component</span> </span>&#123;</span><br><span class="line">  render () &#123;</span><br><span class="line">    <span class="keyword">return</span> (</span><br><span class="line">      &lt;div&gt;</span><br><span class="line">        <span class="comment">// 直接向父级拿即可</span></span><br><span class="line">        <span class="keyword">this</span>.props.menuName</span><br><span class="line">      &lt;<span class="regexp">/div&gt;</span></span><br><span class="line"><span class="regexp">    )</span></span><br><span class="line"><span class="regexp">  &#125;</span></span><br><span class="line"><span class="regexp">&#125;</span></span><br><span class="line"><span class="regexp"></span></span><br><span class="line"><span class="regexp">/</span><span class="regexp">/ 定义一个函数传入state返回值</span></span><br><span class="line"><span class="regexp">/</span><span class="regexp">/ 这个函数可以直接写在connect里面这样为了方便看</span></span><br><span class="line"><span class="regexp">const mapStateToProps = state =&gt; &#123;</span></span><br><span class="line"><span class="regexp">  return &#123;</span></span><br><span class="line"><span class="regexp">    menuName: state.menuName</span></span><br><span class="line"><span class="regexp">  &#125;</span></span><br><span class="line"><span class="regexp">&#125;</span></span><br><span class="line"><span class="regexp"></span></span><br><span class="line"><span class="regexp">/</span><span class="regexp">/ 同样绑定以及传入数据定义函数</span></span><br><span class="line"><span class="regexp">export default connect(mapStateToProps)(Header);</span></span><br></pre></td></tr></table></figure><h1 id="效果图"><a href="#效果图" class="headerlink" title="效果图"></a>效果图</h1><p><img src="/React/redux3.png" alt="redux"><br><img src="/React/redux4.png" alt="redux"></p><h1 id="后记"><a href="#后记" class="headerlink" title="后记"></a>后记</h1><ul><li>学习react和编写后台系统到时候用到了redux然后发现和vue方法差不多然后就想记录下来</li><li>有什么不对或者有更好的方法可以提出来加微信我们交流交流</li><li><a href="https://yhf7.top/" target="_blank" rel="noopener">欢迎进入我的博客</a>：<a href="https://yhf7.github.io/" target="_blank" rel="noopener">https://yhf7.github.io/</a> 或 <a href="https://yhf7.top" target="_blank" rel="noopener">https://yhf7.top</a></li><li>如果有什么侵权的话，请及时添加小编微信以及 qq 也可以来告诉小编（905477376 微信 qq 通用），谢谢！</li></ul>]]></content>
    
    <summary type="html">
    
      
      
        &lt;link rel=&quot;stylesheet&quot; class=&quot;aplayer-secondary-style-marker&quot; href=&quot;/assets/css/APlayer.min.css&quot;&gt;&lt;script src=&quot;/assets/js/APlayer.min.js&quot; cla
      
    
    </summary>
    
      <category term="React" scheme="http://yoursite.com/categories/React/"/>
    
    
      <category term="React" scheme="http://yoursite.com/tags/React/"/>
    
  </entry>
  
  <entry>
    <title>React学习笔记</title>
    <link href="http://yoursite.com/2019/08/03/React%E9%A1%B9%E7%9B%AE%E5%AD%A6%E4%B9%A0%E7%AC%94%E8%AE%B0/"/>
    <id>http://yoursite.com/2019/08/03/React项目学习笔记/</id>
    <published>2019-08-03T15:45:40.182Z</published>
    <updated>2019-09-05T00:36:12.351Z</updated>
    
    <content type="html"><![CDATA[<link rel="stylesheet" class="aplayer-secondary-style-marker" href="/assets/css/APlayer.min.css"><script src="/assets/js/APlayer.min.js" class="aplayer-secondary-script-marker"></script><h1 id="前言"><a href="#前言" class="headerlink" title="前言"></a>前言</h1><ul><li>这是一个带项目的学习笔记</li><li>编写了一个单车后台管理系统</li><li>边学习边去写期间学习到了很多，也对react越来越热爱了</li><li>从项目搭起到一点点完善花了一定的时间</li><li>但是这只是react生涯的前沿</li><li><a href="https://gitee.com/yhf7/ReactAntdBackstage" target="_blank" rel="noopener">项目码云传送门</a></li></ul><h1 id="React-生命周期"><a href="#React-生命周期" class="headerlink" title="React 生命周期"></a>React 生命周期</h1><ol><li>getDefaultProps 初始化Props属性(props父组件传过来的属性)</li><li>getInitialState 初始化当前组件的状态(state变量数据)</li><li>componentWillMount 组件初始化之前触发的生命周期（就是一开始就执行的函数）（用的比较多）</li><li>render 渲染界面（必有的）</li><li>componentDidMount 组件Dom调用完之后触发的生命周期 （用的比较多）</li><li>componentWillReceiveProps 父组件数据传递调用的方法 （用的比较多）</li><li>shouldComponentUpdate 组件更新时调用的方法</li><li>componentWillUpdate 组件更新之前</li><li>componentDidUpdate 组件更新之后</li><li>componentWillUnmount 组件销毁</li></ol><p><img src="/React/smzq1.png" alt="react"> </p><h1 id="知识储备"><a href="#知识储备" class="headerlink" title="知识储备"></a>知识储备</h1><h2 id="静态资源"><a href="#静态资源" class="headerlink" title="静态资源"></a>静态资源</h2><ul><li>静态资源是什么？</li><li>我们在项目开发时如何存放以及使用呢？</li></ul><hr><ul><li>静态资源就比如是图片素材等</li><li>因为是静态的需要配置到服务器的</li><li>所以我们一般直接放在public文件夹里面用的时候直接/调用即可</li><li>例：放在public/img/1.png</li><li>调用的时候直接 <img src="/img/1.png" alt="">这样就可以了</li></ul><h2 id="css"><a href="#css" class="headerlink" title="css"></a>css</h2><h3 id="calc-css计算属性-动态计算"><a href="#calc-css计算属性-动态计算" class="headerlink" title="calc css计算属性(动态计算)"></a>calc css计算属性(动态计算)</h3><ul><li>calc()函数用一个表达式作为它的参数，用这个表达式的结果作为值。这个表达式可以是任何如下操作符的组合，采用标准操作符处理法则的简单表达式。<figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><span class="line">+</span><br><span class="line">加法</span><br><span class="line">-</span><br><span class="line">减法</span><br><span class="line">*</span><br><span class="line">乘法，乘数中至少要有一个是 &lt;number&gt; 类型的</span><br><span class="line">/</span><br><span class="line">除法，除数（/右面的数）必须是 &lt;number&gt; 类型的</span><br></pre></td></tr></table></figure></li></ul><h3 id="vh-计算单位"><a href="#vh-计算单位" class="headerlink" title="vh 计算单位"></a>vh 计算单位</h3><ul><li>1vh 等于百分之1</li></ul><h1 id="项目工程配置"><a href="#项目工程配置" class="headerlink" title="项目工程配置"></a>项目工程配置</h1><h2 id="插件列表"><a href="#插件列表" class="headerlink" title="插件列表"></a>插件列表</h2><ol><li>react路由5.x版本 （react-router-dom）</li><li>api请求 (axios)</li><li>less样式预处理(less 和 less-loader)</li><li>antd 支付宝开发的一个ui组件库</li><li>babel-plugin-import 给antd库配置按需加载使用</li><li>jsonp 解决api请求跨越</li><li>react-draft-wysiwyg draft-js draftjs-to-html 富文本</li><li>moment 时间格式化</li><li>redux react-redux</li><li>redux-devtools-extension redux的调试插件</li></ol><h2 id="插件使用"><a href="#插件使用" class="headerlink" title="插件使用"></a>插件使用</h2><h3 id="jsonp-封装"><a href="#jsonp-封装" class="headerlink" title="jsonp 封装"></a>jsonp 封装</h3><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">/**</span></span><br><span class="line"><span class="comment">//  1. 引入封装</span></span><br><span class="line"><span class="comment">import Jsonp from 'jsonp'</span></span><br><span class="line"><span class="comment">export default class Axios &#123;</span></span><br><span class="line"><span class="comment">  /**</span></span><br><span class="line"><span class="comment">   * jsonp请求封装</span></span><br><span class="line"><span class="comment">   * @param &#123;*&#125; options 传入对象，url等</span></span><br><span class="line"><span class="comment">   */</span></span><br><span class="line">  <span class="keyword">static</span> jsonp (options) &#123;</span><br><span class="line">    <span class="keyword">return</span> <span class="keyword">new</span> <span class="built_in">Promise</span>(<span class="function">(<span class="params">res, rej</span>) =&gt;</span> &#123;</span><br><span class="line">        Jsonp(options.url,&#123;</span><br><span class="line">          param:<span class="string">'callback'</span></span><br><span class="line">        &#125;,(err,response) =&gt; &#123;</span><br><span class="line">          <span class="keyword">if</span> (response.status === <span class="string">'success'</span>) &#123;</span><br><span class="line">            res(response)</span><br><span class="line">          &#125;<span class="keyword">else</span> &#123;</span><br><span class="line">            rej(response)</span><br><span class="line">          &#125;</span><br><span class="line">        &#125;)</span><br><span class="line">    &#125;)</span><br><span class="line">  &#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="comment">// 2. 使用</span></span><br><span class="line"><span class="keyword">import</span> axios <span class="keyword">from</span> <span class="string">'../../axios'</span></span><br><span class="line"></span><br><span class="line">getWeatherAPIData () &#123;</span><br><span class="line">    <span class="keyword">let</span> city = <span class="string">'dongguan'</span></span><br><span class="line">    axios.jsonp(&#123;</span><br><span class="line">      url: <span class="string">'http://api.map.baidu.com/telematics/v3/weather?location='</span> + <span class="built_in">encodeURIComponent</span>(city)+<span class="string">'&amp;output=json&amp;ak=3p49MVra6urFRGOT9s8UBWr2'</span></span><br><span class="line">    &#125;).then(<span class="function"><span class="params">res</span> =&gt;</span> &#123;</span><br><span class="line">      <span class="keyword">if</span> (res.status === <span class="string">'success'</span>) &#123;</span><br><span class="line">        <span class="keyword">let</span> data = res.results[<span class="number">0</span>].weather_data[<span class="number">1</span>]</span><br><span class="line">        <span class="keyword">this</span>.setState(&#123;</span><br><span class="line">          dayPictureUrl: data.dayPictureUrl,</span><br><span class="line">          weather: data.weather</span><br><span class="line">        &#125;)</span><br><span class="line">      &#125;</span><br><span class="line">    &#125;)</span><br><span class="line">  &#125;</span><br></pre></td></tr></table></figure><h2 id="Redux-调试工具-两步都需要"><a href="#Redux-调试工具-两步都需要" class="headerlink" title="Redux 调试工具(两步都需要)"></a>Redux 调试工具(两步都需要)</h2><ol><li>在Chrome 中安装Redux Devtools扩展</li><li>yarn add redux-devtools-extension<h2 id="配置webpack"><a href="#配置webpack" class="headerlink" title="配置webpack"></a>配置webpack</h2><h3 id="暴露webpack配置"><a href="#暴露webpack配置" class="headerlink" title="暴露webpack配置"></a>暴露webpack配置</h3></li><li><p>react脚手架有一个eject的可以用来暴露webpack的</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">$ yarn eject</span><br></pre></td></tr></table></figure></li><li><p>这里插播一个坑</p><ul><li>坑一、直接运行eject会报错的，这个时候呢有两个解决方法（处理完运行eject就可以了）</li><li><ol><li>直接清除.git</li></ol></li><li><ol start="2"><li>git add . 和 git commit -m “”更新一下即可</li></ol></li><li>坑二、运行完eject有的同学就会发现为啥运行项目会报错，报的是./src/index.js里面的错(包缺损)</li><li>如何解决把node_modules删除重新安装即可</li></ul></li><li>查看package.json文件会多了很多东西以及多了 scripts和config文件（配置都在里面config）</li></ol><h3 id="安装-配置less预处理"><a href="#安装-配置less预处理" class="headerlink" title="安装/配置less预处理"></a>安装/配置less预处理</h3><ol><li><p>安装less</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">$ yarn add less less-loader</span><br></pre></td></tr></table></figure></li><li><p>配置less</p></li></ol><ul><li>找到config/webpack.config.js（执行了eject才会有这个文件）<figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">// 1. 添加less的名头（大概41行左右学着css那个来）</span></span><br><span class="line"><span class="comment">// style files regexes 找到这句话就找到了</span></span><br><span class="line"><span class="comment">// 添加 less 解析规则</span></span><br><span class="line"><span class="keyword">const</span> lessRegex = <span class="regexp">/\.less$/</span>;</span><br><span class="line"><span class="keyword">const</span> lessModuleRegex = <span class="regexp">/\.module\.less$/</span>;</span><br><span class="line"></span><br><span class="line"><span class="comment">// 2. 添加解析配置 (大概404行左右跟在css的配置后面放)</span></span><br><span class="line"><span class="comment">// Less 解析配置</span></span><br><span class="line">&#123;</span><br><span class="line">  test: lessRegex,</span><br><span class="line">  exclude: lessModuleRegex,</span><br><span class="line">  use: getStyleLoaders(</span><br><span class="line">    &#123;</span><br><span class="line">      importLoaders: <span class="number">2</span>,</span><br><span class="line">      sourceMap: isEnvProduction &amp;&amp; shouldUseSourceMap,</span><br><span class="line">    &#125;,</span><br><span class="line">    <span class="string">'less-loader'</span></span><br><span class="line">  ),</span><br><span class="line">  sideEffects: <span class="literal">true</span>,</span><br><span class="line">&#125;,</span><br><span class="line">&#123;</span><br><span class="line">  test: lessModuleRegex,</span><br><span class="line">  use: getStyleLoaders(</span><br><span class="line">    &#123;</span><br><span class="line">      importLoaders: <span class="number">2</span>,</span><br><span class="line">      sourceMap: isEnvProduction &amp;&amp; shouldUseSourceMap,</span><br><span class="line">      modules: <span class="literal">true</span>,</span><br><span class="line">      getLocalIdent: getCSSModuleLocalIdent,</span><br><span class="line">    &#125;,</span><br><span class="line">    <span class="string">'less-loader'</span></span><br><span class="line">  )</span><br><span class="line">&#125;,</span><br></pre></td></tr></table></figure></li></ul><ol start="3"><li>测试是否成功（看到图标下面的文件变红为成功）</li></ol><ul><li><p>编写一个test.less文件(写一段变红的样式)</p><figure class="highlight less"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line"><span class="selector-class">.test</span> &#123;</span><br><span class="line">  <span class="attribute">color</span>: red;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure></li><li><p>在App.js引入测试(这里只是修改代码其他的我删了你不要删)</p><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">import</span> <span class="string">'./test.less'</span></span><br><span class="line"></span><br><span class="line">&lt;p className=<span class="string">"test"</span>&gt;</span><br><span class="line">  Edit &lt;code&gt;src/App.js&lt;<span class="regexp">/code&gt; and save to reload.</span></span><br><span class="line"><span class="regexp">&lt;/</span>p&gt;</span><br></pre></td></tr></table></figure></li></ul><h3 id="安装-配置antd"><a href="#安装-配置antd" class="headerlink" title="安装/配置antd"></a>安装/配置antd</h3><ol><li><p>安装 antd、babel-plugin-import(配置按需加载)</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">$ sudo cnpm i antd babel-plugin-import -s</span><br></pre></td></tr></table></figure></li><li><p>配置自动引入antd样式（暴露代码后webpack 4.19版本）<br>注：如果在package.json中没有看到上面的形式，则需要先 reject项目。</p><figure class="highlight"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br></pre></td><td class="code"><pre><span class="line">// 找到babel改成这样即可</span><br><span class="line"> "babel": &#123;</span><br><span class="line">    "presets": [</span><br><span class="line">      <span class="string">"react-app"</span></span><br><span class="line">    ],</span><br><span class="line">    "plugins": [</span><br><span class="line">      [</span><br><span class="line">        <span class="string">"import"</span>,</span><br><span class="line">        &#123;</span><br><span class="line">          <span class="attr">"libraryName"</span>: <span class="string">"antd"</span>,</span><br><span class="line">          <span class="attr">"style"</span>: <span class="string">"css"</span></span><br><span class="line">        &#125;</span><br><span class="line">      ]</span><br><span class="line">    ]</span><br><span class="line">  &#125;</span><br></pre></td></tr></table></figure></li><li><p>引入调用 (没报错看到蓝色的按钮为正确)</p><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">import</span> React,&#123;Component&#125; <span class="keyword">from</span> <span class="string">'react'</span></span><br><span class="line"><span class="keyword">import</span> &#123;Button&#125; <span class="keyword">from</span> <span class="string">'antd'</span>;</span><br><span class="line"></span><br><span class="line"><span class="keyword">export</span> <span class="keyword">default</span> <span class="class"><span class="keyword">class</span> <span class="title">Test</span> <span class="keyword">extends</span> <span class="title">Component</span> </span>&#123;</span><br><span class="line">  testclick = <span class="function"><span class="params">()</span> =&gt;</span> &#123;</span><br><span class="line">    <span class="built_in">console</span>.log(<span class="string">'a'</span>)</span><br><span class="line">  &#125;</span><br><span class="line">  render () &#123;</span><br><span class="line">   <span class="keyword">return</span> (</span><br><span class="line">      &lt;div&gt;</span><br><span class="line">        test</span><br><span class="line">        &lt;Button type=<span class="string">"primary"</span> onClick=&#123;<span class="keyword">this</span>.testclick&#125;&gt;Button&lt;<span class="regexp">/Button&gt;</span></span><br><span class="line"><span class="regexp">      &lt;/</span>div&gt;</span><br><span class="line">    )</span><br><span class="line">  &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure></li></ol><h3 id="antd自定义主题-（确保less已经配置好以及webapck暴露，需要less才可以）"><a href="#antd自定义主题-（确保less已经配置好以及webapck暴露，需要less才可以）" class="headerlink" title="antd自定义主题 （确保less已经配置好以及webapck暴露，需要less才可以）"></a>antd自定义主题 （确保less已经配置好以及webapck暴露，需要less才可以）</h3><ol><li><p>加入主题 (./config/webpack.config.js)</p><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">// 修改配置，配置好less的 大概在110行左右，页面搜preProcessor即可最后那两个的位置哪里</span></span><br><span class="line"><span class="comment">// 把整个if替换成我这样就可以了，主题里面的颜色可以自己改</span></span><br><span class="line"><span class="keyword">if</span> (preProcessor === <span class="string">"less-loader"</span>) &#123;</span><br><span class="line">    loaders.push(&#123;</span><br><span class="line">      loader: <span class="built_in">require</span>.resolve(preProcessor),</span><br><span class="line">      options: &#123;</span><br><span class="line">        sourceMap: isEnvProduction &amp;&amp; shouldUseSourceMap,</span><br><span class="line">        modifyVars: &#123; <span class="comment">//自定义主题</span></span><br><span class="line">          <span class="string">'primary-color'</span>: <span class="string">'red'</span>,</span><br><span class="line">        &#125;,</span><br><span class="line">        javascriptEnabled: <span class="literal">true</span>,</span><br><span class="line">      &#125;,</span><br><span class="line">    &#125;);</span><br><span class="line">  &#125;</span><br></pre></td></tr></table></figure></li><li><p>修改package.json(刚才配置的时候是css，切换主题需要使用true才可以)</p><figure class="highlight"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br></pre></td><td class="code"><pre><span class="line">"babel": &#123;</span><br><span class="line">  "presets": [</span><br><span class="line">    <span class="string">"react-app"</span></span><br><span class="line">  ],</span><br><span class="line">  "plugins": [</span><br><span class="line">    [</span><br><span class="line">      <span class="string">"import"</span>,</span><br><span class="line">      &#123;</span><br><span class="line">        <span class="attr">"libraryName"</span>: <span class="string">"antd"</span>,</span><br><span class="line">        - "style": "css", // 去除</span><br><span class="line">        + "style": true</span><br><span class="line">      &#125;</span><br><span class="line">    ]</span><br><span class="line">  ]</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure></li></ol><h3 id="配置eslint"><a href="#配置eslint" class="headerlink" title="配置eslint"></a>配置eslint</h3><ol><li><p>查阅官网<br><a href="https://eslint.org/docs/2.0.0/rules/eqeqeq" target="_blank" rel="noopener">https://eslint.org/docs/2.0.0/rules/eqeqeq</a></p></li><li><p>修改想修改的配置（必须eject暴露了的）</p></li></ol><ul><li>我这里是关闭eqeqeq 这个规则是限制必须使用=== 不能用== 我使用off关闭了<figure class="highlight"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line">"eslintConfig": &#123; // 找到这个然后添加自己想要添加的配置</span><br><span class="line">    "extends": "react-app",</span><br><span class="line">    "rules": &#123;</span><br><span class="line">      "eqeqeq": "off"</span><br><span class="line">    &#125;</span><br><span class="line">  &#125;</span><br></pre></td></tr></table></figure></li></ul><h2 id="项目工程化"><a href="#项目工程化" class="headerlink" title="项目工程化"></a>项目工程化</h2><ul><li>项目架构设计</li><li>目录结构配置</li><li>制定开发规范（ESLint）</li><li>模块化、组件化</li><li>前后端接口规范</li><li>性能优化、自动化部署 </li></ul>]]></content>
    
    <summary type="html">
    
      
      
        &lt;link rel=&quot;stylesheet&quot; class=&quot;aplayer-secondary-style-marker&quot; href=&quot;/assets/css/APlayer.min.css&quot;&gt;&lt;script src=&quot;/assets/js/APlayer.min.js&quot; cla
      
    
    </summary>
    
      <category term="React" scheme="http://yoursite.com/categories/React/"/>
    
    
      <category term="React" scheme="http://yoursite.com/tags/React/"/>
    
  </entry>
  
  <entry>
    <title>阿里云 Centos7 Node（koa2、express） + Vue (history)路由模式 线上部署，手动刷新页面出错解决</title>
    <link href="http://yoursite.com/2019/07/29/koa-vue-history%E6%A8%A1%E5%BC%8F%E4%B8%8A%E7%BA%BF%E9%83%A8%E7%BD%B2/"/>
    <id>http://yoursite.com/2019/07/29/koa-vue-history模式上线部署/</id>
    <published>2019-07-29T05:33:51.804Z</published>
    <updated>2019-07-29T06:31:03.694Z</updated>
    
    <content type="html"><![CDATA[<link rel="stylesheet" class="aplayer-secondary-style-marker" href="/assets/css/APlayer.min.css"><script src="/assets/js/APlayer.min.js" class="aplayer-secondary-script-marker"></script><h1 id="前言"><a href="#前言" class="headerlink" title="前言"></a>前言</h1><ul><li>昨日在群里有人问 express + vue（history）路由模式线上部署，手动刷新会出问题</li><li>我记得我以前弄过但是一直先不起来在哪里弄过，也没有记录在博客里面所以是找不到的</li><li>弄了好久依然不行，花了很长的时间最后还是考网上的方法弄好了</li><li>我自己也做了小小的修改</li></ul><h1 id="工具-资料"><a href="#工具-资料" class="headerlink" title="工具/资料"></a>工具/资料</h1><h3 id="线下"><a href="#线下" class="headerlink" title="线下"></a>线下</h3><ul><li>系统 mac Os 10.14.5</li><li>node v10.13.0</li><li>npm 6.10.1</li><li>vs code 开发版(远程控制修改线上代码)</li><li>webpack 4.36.1</li></ul><h3 id="线上"><a href="#线上" class="headerlink" title="线上"></a>线上</h3><ul><li>系统 Centos7 64 </li><li>node v8.0.0</li><li>npm 6.9.0</li></ul><h3 id="资料"><a href="#资料" class="headerlink" title="资料"></a>资料</h3><ul><li><a href="https://router.vuejs.org/zh/guide/essentials/history-mode.html" target="_blank" rel="noopener">vue-router路由模式</a>：<a href="https://router.vuejs.org/zh/guide/essentials/history-mode.html" target="_blank" rel="noopener">https://router.vuejs.org/zh/guide/essentials/history-mode.html</a></li><li>插件 koa-static (公共文件共享)</li><li><a href="https://www.npmjs.com/package/connect-history-api-fallback" target="_blank" rel="noopener">node koa/express 插件connect-history-api-fallback</a>：<a href="https://www.npmjs.com/package/connect-history-api-fallback" target="_blank" rel="noopener">https://www.npmjs.com/package/connect-history-api-fallback</a></li></ul><h1 id="开始"><a href="#开始" class="headerlink" title="开始"></a>开始</h1><h3 id="一、配置前端路由"><a href="#一、配置前端路由" class="headerlink" title="一、配置前端路由"></a>一、配置前端路由</h3><ul><li>和正常的路由写法一致，只是改变mode路由模式就可以了<figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">let</span> router = <span class="keyword">new</span> Router(&#123;</span><br><span class="line">    mode: <span class="string">'history'</span>,<span class="comment">// 真路由，去除多余的#号</span></span><br><span class="line">    routes: [</span><br><span class="line">        ...Routers</span><br><span class="line">    ],</span><br><span class="line">    base: <span class="string">'/page/'</span> <span class="comment">// 给路由前端补page为了区分路由用的可以加可以不加</span></span><br><span class="line">&#125;)</span><br></pre></td></tr></table></figure></li></ul><h3 id="二、安装后端插件（koa项目中安装）"><a href="#二、安装后端插件（koa项目中安装）" class="headerlink" title="二、安装后端插件（koa项目中安装）"></a>二、安装后端插件（koa项目中安装）</h3><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">$ cnpm install --save connect-history-api-fallback</span><br></pre></td></tr></table></figure><h3 id="三、配置与引用"><a href="#三、配置与引用" class="headerlink" title="三、配置与引用"></a>三、配置与引用</h3><h4 id="1-在工具文件夹中建立一个插件文件-config-koa2-connect-history-api-fallback-js（这个名字自己起就可以了）"><a href="#1-在工具文件夹中建立一个插件文件-config-koa2-connect-history-api-fallback-js（这个名字自己起就可以了）" class="headerlink" title="1. 在工具文件夹中建立一个插件文件 /config/koa2-connect-history-api-fallback.js（这个名字自己起就可以了）"></a>1. 在工具文件夹中建立一个插件文件 /config/koa2-connect-history-api-fallback.js（这个名字自己起就可以了）</h4><ul><li>写入以下封装的代码<figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">const</span> history = <span class="built_in">require</span>(<span class="string">'connect-history-api-fallback'</span>);</span><br><span class="line"><span class="built_in">module</span>.exports = <span class="function"><span class="params">options</span> =&gt;</span> &#123;</span><br><span class="line">  <span class="keyword">const</span> middleware = history(options);</span><br><span class="line">  <span class="keyword">const</span> noop = <span class="function"><span class="params">()</span> =&gt;</span> &#123;</span><br><span class="line">  &#125;;</span><br><span class="line"></span><br><span class="line">  <span class="keyword">return</span> <span class="keyword">async</span> (ctx, next) =&gt; &#123;</span><br><span class="line">    middleware(ctx, <span class="literal">null</span>, noop);</span><br><span class="line">    <span class="keyword">await</span> next();</span><br><span class="line">  &#125;;</span><br><span class="line">&#125;;</span><br></pre></td></tr></table></figure></li></ul><h4 id="2-在app-js文件中引入此文件并调用"><a href="#2-在app-js文件中引入此文件并调用" class="headerlink" title="2. 在app.js文件中引入此文件并调用"></a>2. 在app.js文件中引入此文件并调用</h4><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">const</span> history = <span class="built_in">require</span>(<span class="string">'./config/koa2-connect-history-api-fallback'</span>);</span><br><span class="line"></span><br><span class="line"><span class="comment">// 这一段尽量放在最高，避免引起错误</span></span><br><span class="line">app.use(history(&#123;</span><br><span class="line">  verbose: <span class="literal">true</span><span class="comment">//打出转发日志</span></span><br><span class="line">&#125;));</span><br></pre></td></tr></table></figure><h3 id="三、配置公共路由-使用插件koa-static"><a href="#三、配置公共路由-使用插件koa-static" class="headerlink" title="三、配置公共路由(使用插件koa-static)"></a>三、配置公共路由(使用插件koa-static)</h3><ol><li><p>简单安装以下插件引入即可</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">$ cnpm i koa-static -S</span><br></pre></td></tr></table></figure></li><li><p>引入配置（app.js文件）</p></li></ol><ul><li>这里的意思是只要进入根路径自动导向/page，page为公共文件夹（打包的代码也放进去就可以了）<figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">app.use(<span class="built_in">require</span>(<span class="string">'koa-static'</span>)(__dirname + <span class="string">'/page'</span>))</span><br></pre></td></tr></table></figure></li></ul><h3 id="四、开启项目查看效果（vue-cli打包放在page文件夹里面，自己配置的那个公共文件夹就放哪里）"><a href="#四、开启项目查看效果（vue-cli打包放在page文件夹里面，自己配置的那个公共文件夹就放哪里）" class="headerlink" title="四、开启项目查看效果（vue-cli打包放在page文件夹里面，自己配置的那个公共文件夹就放哪里）"></a>四、开启项目查看效果（vue-cli打包放在page文件夹里面，自己配置的那个公共文件夹就放哪里）</h3><p><img src="/vue-cli/koa-hostory1.png" alt="hostory"></p><h3 id="五、简单的说一下express-，express根据不需要弄什么只是安装引入即可（看图就可以了）"><a href="#五、简单的说一下express-，express根据不需要弄什么只是安装引入即可（看图就可以了）" class="headerlink" title="五、简单的说一下express ，express根据不需要弄什么只是安装引入即可（看图就可以了）"></a>五、简单的说一下express ，express根据不需要弄什么只是安装引入即可（看图就可以了）</h3><ul><li>这个没有在路由色泽page所以就看不到page在前面（公路由的文件夹名字是会隐藏掉的）<br><img src="/vue-cli/express-hostory1.png" alt="hostory"></li></ul><h1 id="后记"><a href="#后记" class="headerlink" title="后记"></a>后记</h1><ul><li>每一个问题，都是一次成长，没解决一个问题经验也随之丰富，我的方法可能不是最好的但是能解决问题</li><li>如果你有更好的方法请告诉我谢谢</li><li><a href="https://yhf7.top/" target="_blank" rel="noopener">欢迎进入我的博客</a>：<a href="https://yhf7.github.io/" target="_blank" rel="noopener">https://yhf7.github.io/</a> 或 <a href="https://yhf7.top" target="_blank" rel="noopener">https://yhf7.top</a></li><li>如果有什么侵权的话，请及时添加小编微信以及 qq 也可以来告诉小编（905477376 微信 qq 通用），谢谢！</li></ul>]]></content>
    
    <summary type="html">
    
      
      
        &lt;link rel=&quot;stylesheet&quot; class=&quot;aplayer-secondary-style-marker&quot; href=&quot;/assets/css/APlayer.min.css&quot;&gt;&lt;script src=&quot;/assets/js/APlayer.min.js&quot; cla
      
    
    </summary>
    
      <category term="服务器" scheme="http://yoursite.com/categories/%E6%9C%8D%E5%8A%A1%E5%99%A8/"/>
    
    
      <category term="服务器" scheme="http://yoursite.com/tags/%E6%9C%8D%E5%8A%A1%E5%99%A8/"/>
    
  </entry>
  
  <entry>
    <title>React 评论功能案例</title>
    <link href="http://yoursite.com/2019/07/26/React%20%E8%AF%84%E8%AE%BA%E5%8A%9F%E8%83%BD%E6%A1%88%E4%BE%8B/"/>
    <id>http://yoursite.com/2019/07/26/React 评论功能案例/</id>
    <published>2019-07-26T08:08:05.295Z</published>
    <updated>2019-08-01T09:26:59.479Z</updated>
    
    <content type="html"><![CDATA[<link rel="stylesheet" class="aplayer-secondary-style-marker" href="/assets/css/APlayer.min.css"><script src="/assets/js/APlayer.min.js" class="aplayer-secondary-script-marker"></script><h1 id="前言"><a href="#前言" class="headerlink" title="前言"></a>前言</h1><ul><li>第二天学习React，看的是react小书朋友推荐的</li><li>感觉还不错，通过第一天的学习已经大概了解了react</li><li>react小书让我知道了更多的react的智商，生命周期等</li><li>所以跟着react小书做了这么一个评论功能的案例</li><li>三个部分都练完了，最后使用redux的时候会比较绕</li></ul><h1 id="工具-资料"><a href="#工具-资料" class="headerlink" title="工具/资料"></a>工具/资料</h1><ul><li>系统 mac Os 10.14.5</li><li>vs code 开发版</li><li>node v10.13.0</li><li>npm 6.10.1</li><li>yarn 1.13.0</li><li>webpack 4.36.1 (必须要4.26.9以上，不然无法开启react项目)</li><li>浏览器插件  React Devtools 查看react树结构</li><li>npm插件 prop-types 验证数据</li><li><a href="http://huziketang.mangojuice.top/books/react/lesson5" target="_blank" rel="noopener">React 小书</a></li><li><a href="https://gitee.com/yhf7/reactliuyanban" target="_blank" rel="noopener">代码地址：</a></li></ul><h1 id="重点"><a href="#重点" class="headerlink" title="重点"></a>重点</h1><ul><li>组件嵌套</li><li>state 和 setState</li><li>props 传值，map循环渲染</li><li>状态提升</li><li>生命周期函数</li><li>ref操作dom，控制输入焦点</li><li><p>props.children和容器(react的灵活之处)</p><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br></pre></td><td class="code"><pre><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">Card</span> <span class="keyword">extends</span> <span class="title">Component</span> </span>&#123;</span><br><span class="line">  render () &#123;</span><br><span class="line">    <span class="keyword">return</span> (</span><br><span class="line">      &lt;div className=<span class="string">'card'</span>&gt;</span><br><span class="line">        &lt;div className=<span class="string">'card-content'</span>&gt;</span><br><span class="line">          &#123;<span class="keyword">this</span>.props.content&#125;</span><br><span class="line">        &lt;<span class="regexp">/div&gt;</span></span><br><span class="line"><span class="regexp">      &lt;/</span>div&gt;</span><br><span class="line">    )</span><br><span class="line">  &#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line">ReactDOM.render(</span><br><span class="line">  &lt;Card content=&#123;</span><br><span class="line">    &lt;div&gt;</span><br><span class="line">      &lt;h2&gt;React.js 小书&lt;<span class="regexp">/h2&gt;</span></span><br><span class="line"><span class="regexp">       &lt;div&gt;开源、免费、专业、简单&lt;/</span>div&gt;</span><br><span class="line">      订阅：&lt;input /&gt;</span><br><span class="line">    &lt;<span class="regexp">/div&gt;</span></span><br><span class="line"><span class="regexp">  &#125; /</span>&gt;,</span><br><span class="line">  <span class="built_in">document</span>.getElementById(<span class="string">'root'</span>)</span><br><span class="line">)</span><br></pre></td></tr></table></figure></li><li><p>dangerouslySetHTML html属性框， style需要写成对象形式（对象命名驼峰命名法），例：font-size  react里 fontSize</p></li><li>propTypes 子接收属性验证插件</li><li>redux \ react-redux 使用起来还是有点绕需要点时间消化</li></ul><h1 id="功能"><a href="#功能" class="headerlink" title="功能"></a>功能</h1><h3 id="第一阶段"><a href="#第一阶段" class="headerlink" title="第一阶段"></a>第一阶段</h3><ul><li style="list-style: none"><input type="checkbox" checked> 用户，评论输入框</li><li style="list-style: none"><input type="checkbox" checked> 实现发布</li><li style="list-style: none"><input type="checkbox" checked> 实现内容列表</li></ul><h3 id="第二阶段"><a href="#第二阶段" class="headerlink" title="第二阶段"></a>第二阶段</h3><ul><li style="list-style: none"><input type="checkbox" checked> 页面加载完成自动聚焦到评论输入框。</li><li style="list-style: none"><input type="checkbox" checked> 把用户名持久化，存放到浏览器的 LocalStorage 中。页面加载时会把用户名加载出来显示到输入框，用户就不需要重新输入用户名了。</li><li style="list-style: none"><input type="checkbox" checked> 把已经发布的评论持久化，存放到浏览器的 LocalStorage 中。页面加载时会把已经保存的评论加载出来，显示到页面的评论列表上。</li><li style="list-style: none"><input type="checkbox" checked> 评论显示发布日期，如“1 秒前”，”30 分钟前”，并且会每隔 5 秒更新发布日期。</li><li style="list-style: none"><input type="checkbox" checked> 评论可以被删除。</li><li style="list-style: none"><input type="checkbox" checked> 类似 Markdown 的行内代码块显示功能，用户输入的用 <code></code> 包含起来的内容都会被处理成用 <code> 元素包含。例如输入 <code>console.log</code> 就会处理成 <code>console.log</code> 再显示到页面上。</code></li></ul><h3 id="第三阶段"><a href="#第三阶段" class="headerlink" title="第三阶段"></a>第三阶段</h3><ul><li style="list-style: none"><input type="checkbox" checked> 分开 reducers \ Dumb \ Smart</li><li>使用 Redux 和 react-redux 重构</li></ul><h1 id="插件使用-prop-types"><a href="#插件使用-prop-types" class="headerlink" title="插件使用 (prop-types)"></a>插件使用 (prop-types)</h1><ol><li><p>安装</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">$ sudo cnpm i prop-types -S</span><br></pre></td></tr></table></figure></li><li><p>使用</p><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">// 1. 引入</span></span><br><span class="line"><span class="keyword">import</span> PropTypes <span class="keyword">from</span> <span class="string">'prop-types'</span></span><br><span class="line"></span><br><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">Comment</span> <span class="keyword">extends</span> <span class="title">Component</span> </span>&#123;</span><br><span class="line">  <span class="comment">// 2. 定义propTypes 对象，需要验证的那些对象值即可</span></span><br><span class="line">  <span class="keyword">static</span> propTypes = &#123;</span><br><span class="line">      comment: PropTypes.object.isRequired,</span><br><span class="line">      onDeleteComment: PropTypes.func,</span><br><span class="line">      index: PropTypes.number</span><br><span class="line">    &#125;</span><br><span class="line">  render() &#123;</span><br><span class="line">    <span class="keyword">const</span> comment = <span class="keyword">this</span>.props.comment;</span><br><span class="line">    <span class="keyword">return</span> (</span><br><span class="line">      &lt;div&gt;&lt;/div&gt;</span><br><span class="line">    )</span><br><span class="line">  &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure></li></ol><h1 id="效果图"><a href="#效果图" class="headerlink" title="效果图"></a>效果图</h1><p><img src="/React/comapp1.png" alt="git"></p><h1 id="后记"><a href="#后记" class="headerlink" title="后记"></a>后记</h1><ul><li>跟着react小书学react，感觉挺不错的学到了很多，了解了更多实用性知识</li><li><a href="https://yhf7.top/" target="_blank" rel="noopener">欢迎进入我的博客</a>：<a href="https://yhf7.github.io/" target="_blank" rel="noopener">https://yhf7.github.io/</a> 或 <a href="https://yhf7.top" target="_blank" rel="noopener">https://yhf7.top</a></li><li>如果有什么侵权的话，请及时添加小编微信以及 qq 也可以来告诉小编（905477376 微信 qq 通用），谢谢！</li></ul>]]></content>
    
    <summary type="html">
    
      
      
        &lt;link rel=&quot;stylesheet&quot; class=&quot;aplayer-secondary-style-marker&quot; href=&quot;/assets/css/APlayer.min.css&quot;&gt;&lt;script src=&quot;/assets/js/APlayer.min.js&quot; cla
      
    
    </summary>
    
      <category term="React 案例" scheme="http://yoursite.com/categories/React-%E6%A1%88%E4%BE%8B/"/>
    
    
      <category term="React" scheme="http://yoursite.com/tags/React/"/>
    
  </entry>
  
  <entry>
    <title>第一个React</title>
    <link href="http://yoursite.com/2019/07/23/%E7%AC%AC%E4%B8%80%E4%B8%AAreact/"/>
    <id>http://yoursite.com/2019/07/23/第一个react/</id>
    <published>2019-07-23T03:05:12.004Z</published>
    <updated>2019-07-26T09:20:21.968Z</updated>
    
    <content type="html"><![CDATA[<link rel="stylesheet" class="aplayer-secondary-style-marker" href="/assets/css/APlayer.min.css"><script src="/assets/js/APlayer.min.js" class="aplayer-secondary-script-marker"></script><h1 id="前言"><a href="#前言" class="headerlink" title="前言"></a>前言</h1><ul><li>写完项目现在开始踏入React的学习</li><li>Vue写了好久了，想试试react</li><li>第一次写react给我的感觉是灵活，只要js好简直就是可以为所欲为</li></ul><h1 id="工具-资料"><a href="#工具-资料" class="headerlink" title="工具/资料"></a>工具/资料</h1><ul><li>系统 mac Os 10.14.5</li><li>vs code 开发版</li><li>node v10.13.0</li><li>npm 6.10.1</li><li>yarn 1.13.0</li><li>webpack 4.36.1 (必须要4.26.9以上，不然无法开启react项目)</li><li>浏览器插件  React Devtools 查看react树结构</li><li><a href="https://zh-hans.reactjs.org/tutorial/tutorial.html#making-an-interactive-component" target="_blank" rel="noopener">官方网址</a></li><li><a href="https://gitee.com/yhf7/ReactSanZiQi" target="_blank" rel="noopener">代码地址：</a></li></ul><h1 id="实现功能"><a href="#实现功能" class="headerlink" title="实现功能"></a>实现功能</h1><ul><li style="list-style: none"><input type="checkbox" checked> 父子传值</li><li style="list-style: none"><input type="checkbox" checked> 函数组件</li><li style="list-style: none"><input type="checkbox" checked> 轮流落子</li><li style="list-style: none"><input type="checkbox" checked> 判断胜负</li><li style="list-style: none"><input type="checkbox" checked> 历史记录</li><li style="list-style: none"><input type="checkbox" checked> 时间旅游<ul><li>拓展</li></ul></li><li style="list-style: none"><input type="checkbox" checked> 历史记录中显示每部步棋子的坐标，格式（列号，行号）</li><li style="list-style: none"><input type="checkbox" checked> 历史记录当前选择项目变红</li><li style="list-style: none"><input type="checkbox" checked> 循环渲染出棋盘中的格子</li><li style="list-style: none"><input type="checkbox" checked> 添加升序降序按钮</li><li style="list-style: none"><input type="checkbox" checked> 当有人获胜时获胜者三棋子变红高亮</li><li style="list-style: none"><input type="checkbox" checked> 无人获胜时显示平局</li></ul><h1 id="配置React环境-还有一个react-cli的"><a href="#配置React环境-还有一个react-cli的" class="headerlink" title="配置React环境 (还有一个react-cli的)"></a>配置React环境 (还有一个react-cli的)</h1><ul><li>配置安装node那些就不说了</li></ul><ol><li><p>安装react说一下</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">$ npm install -g create-react-app</span><br></pre></td></tr></table></figure></li><li><p>开启react项目</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">$ npx create-react-app my-app</span><br></pre></td></tr></table></figure></li></ol><p><img src="/React/r1.png" alt="react"></p><ol start="3"><li>启动项目<figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line">$ yarn start</span><br><span class="line">$ npm start</span><br><span class="line">$ cnpm start</span><br></pre></td></tr></table></figure></li></ol><p><img src="/React/r2.png" alt="react"></p><h1 id="跟着官网来写第一个React案例（9格3子棋，拓展代码这里没有想看拓展的去看源码）"><a href="#跟着官网来写第一个React案例（9格3子棋，拓展代码这里没有想看拓展的去看源码）" class="headerlink" title="跟着官网来写第一个React案例（9格3子棋，拓展代码这里没有想看拓展的去看源码）"></a>跟着官网来写第一个React案例（9格3子棋，拓展代码这里没有想看拓展的去看源码）</h1><ul><li>清空原来项目中的src里面的所有文件放入新的代码文件<h3 id="js"><a href="#js" class="headerlink" title="js"></a>js</h3><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br><span class="line">64</span><br><span class="line">65</span><br><span class="line">66</span><br><span class="line">67</span><br><span class="line">68</span><br><span class="line">69</span><br><span class="line">70</span><br><span class="line">71</span><br><span class="line">72</span><br><span class="line">73</span><br><span class="line">74</span><br><span class="line">75</span><br><span class="line">76</span><br><span class="line">77</span><br><span class="line">78</span><br><span class="line">79</span><br><span class="line">80</span><br><span class="line">81</span><br><span class="line">82</span><br><span class="line">83</span><br><span class="line">84</span><br><span class="line">85</span><br><span class="line">86</span><br><span class="line">87</span><br><span class="line">88</span><br><span class="line">89</span><br><span class="line">90</span><br><span class="line">91</span><br><span class="line">92</span><br><span class="line">93</span><br><span class="line">94</span><br><span class="line">95</span><br><span class="line">96</span><br><span class="line">97</span><br><span class="line">98</span><br><span class="line">99</span><br><span class="line">100</span><br><span class="line">101</span><br><span class="line">102</span><br><span class="line">103</span><br><span class="line">104</span><br><span class="line">105</span><br><span class="line">106</span><br><span class="line">107</span><br><span class="line">108</span><br><span class="line">109</span><br><span class="line">110</span><br><span class="line">111</span><br><span class="line">112</span><br><span class="line">113</span><br><span class="line">114</span><br><span class="line">115</span><br><span class="line">116</span><br><span class="line">117</span><br><span class="line">118</span><br><span class="line">119</span><br><span class="line">120</span><br><span class="line">121</span><br><span class="line">122</span><br><span class="line">123</span><br><span class="line">124</span><br><span class="line">125</span><br><span class="line">126</span><br><span class="line">127</span><br><span class="line">128</span><br><span class="line">129</span><br><span class="line">130</span><br><span class="line">131</span><br><span class="line">132</span><br><span class="line">133</span><br><span class="line">134</span><br><span class="line">135</span><br><span class="line">136</span><br><span class="line">137</span><br><span class="line">138</span><br><span class="line">139</span><br><span class="line">140</span><br><span class="line">141</span><br><span class="line">142</span><br><span class="line">143</span><br><span class="line">144</span><br><span class="line">145</span><br><span class="line">146</span><br><span class="line">147</span><br><span class="line">148</span><br><span class="line">149</span><br><span class="line">150</span><br><span class="line">151</span><br><span class="line">152</span><br><span class="line">153</span><br><span class="line">154</span><br><span class="line">155</span><br><span class="line">156</span><br><span class="line">157</span><br><span class="line">158</span><br><span class="line">159</span><br><span class="line">160</span><br><span class="line">161</span><br><span class="line">162</span><br><span class="line">163</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">import</span> React <span class="keyword">from</span> <span class="string">'react'</span>;</span><br><span class="line"><span class="keyword">import</span> ReactDOM <span class="keyword">from</span> <span class="string">'react-dom'</span>;</span><br><span class="line"><span class="keyword">import</span> <span class="string">'./index.css'</span>;</span><br><span class="line"></span><br><span class="line"><span class="comment">// 单个格子，函数</span></span><br><span class="line"><span class="function"><span class="keyword">function</span> <span class="title">Square</span>(<span class="params">props</span>) </span>&#123;</span><br><span class="line">  <span class="keyword">return</span> (</span><br><span class="line">    <span class="comment">/**接受输出 */</span></span><br><span class="line">    &lt;button className=<span class="string">"square"</span> onClick=&#123; props.onClick &#125;&gt;</span><br><span class="line">      &#123; props.value &#125;</span><br><span class="line">    &lt;<span class="regexp">/button&gt;</span></span><br><span class="line"><span class="regexp">  );</span></span><br><span class="line"><span class="regexp">&#125;</span></span><br><span class="line"><span class="regexp"></span></span><br><span class="line"><span class="regexp">/</span><span class="regexp">/ 格子父级类</span></span><br><span class="line"><span class="regexp">class Board extends React.Component &#123;</span></span><br><span class="line"><span class="regexp">  /</span><span class="regexp">/ 内部调用函数</span></span><br><span class="line"><span class="regexp">  renderSquare(i) &#123;</span></span><br><span class="line"><span class="regexp">    return ( /</span><span class="regexp">/ 返回单格子航速以及方法</span></span><br><span class="line"><span class="regexp">      /</span><span class="regexp">/ 接受父组件输出文字</span></span><br><span class="line"><span class="regexp">      &lt;Square</span></span><br><span class="line"><span class="regexp">        value=&#123; this.props.squares[i] &#125;</span></span><br><span class="line"><span class="regexp">        onClick=&#123; () =&gt; this.props.onClick(i) &#125;</span></span><br><span class="line"><span class="regexp">      /</span>&gt;</span><br><span class="line">    );</span><br><span class="line">  &#125;</span><br><span class="line">  <span class="comment">// 方法返回值，呈现于屏幕上的东西</span></span><br><span class="line">  render() &#123;</span><br><span class="line">    <span class="keyword">return</span> (</span><br><span class="line">      &lt;div&gt;</span><br><span class="line">        &lt;div className=<span class="string">"board-row"</span>&gt;</span><br><span class="line">          &#123; <span class="keyword">this</span>.renderSquare(<span class="number">0</span>) &#125;</span><br><span class="line">          &#123; <span class="keyword">this</span>.renderSquare(<span class="number">1</span>) &#125;</span><br><span class="line">          &#123; <span class="keyword">this</span>.renderSquare(<span class="number">2</span>) &#125;</span><br><span class="line">        &lt;<span class="regexp">/div&gt;</span></span><br><span class="line"><span class="regexp">        &lt;div className="board-row"&gt;</span></span><br><span class="line"><span class="regexp">          &#123; this.renderSquare(3) &#125;</span></span><br><span class="line"><span class="regexp">          &#123; this.renderSquare(4) &#125;</span></span><br><span class="line"><span class="regexp">          &#123; this.renderSquare(5) &#125;</span></span><br><span class="line"><span class="regexp">        &lt;/</span>div&gt;</span><br><span class="line">        &lt;div className=<span class="string">"board-row"</span>&gt;</span><br><span class="line">          &#123; <span class="keyword">this</span>.renderSquare(<span class="number">6</span>) &#125;·</span><br><span class="line">          &#123; <span class="keyword">this</span>.renderSquare(<span class="number">7</span>) &#125;</span><br><span class="line">          &#123; <span class="keyword">this</span>.renderSquare(<span class="number">8</span>) &#125;</span><br><span class="line">        &lt;<span class="regexp">/div&gt;</span></span><br><span class="line"><span class="regexp">      &lt;/</span>div&gt;</span><br><span class="line">    );</span><br><span class="line">  &#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="comment">// 最高父级类（react.component是子集的意思）</span></span><br><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">Game</span> <span class="keyword">extends</span> <span class="title">React</span>.<span class="title">Component</span> </span>&#123;</span><br><span class="line">  <span class="comment">// 构造函数</span></span><br><span class="line">  <span class="keyword">constructor</span>(props) &#123;</span><br><span class="line">    <span class="keyword">super</span>(props);</span><br><span class="line">    <span class="keyword">this</span>.state = &#123;</span><br><span class="line">      history: [</span><br><span class="line">        &#123;</span><br><span class="line">          squares: <span class="built_in">Array</span>(<span class="number">9</span>).fill(<span class="literal">null</span>)</span><br><span class="line">        &#125;</span><br><span class="line">      ],</span><br><span class="line">      stepNumber: <span class="number">0</span>,</span><br><span class="line">      xIsNext: <span class="literal">true</span></span><br><span class="line">    &#125;;</span><br><span class="line">  &#125;</span><br><span class="line"></span><br><span class="line">  <span class="comment">// 点击函数</span></span><br><span class="line">  handleClick(i) &#123;</span><br><span class="line">    <span class="comment">// 获取数据</span></span><br><span class="line">    <span class="keyword">const</span> history = <span class="keyword">this</span>.state.history.slice(<span class="number">0</span>, <span class="keyword">this</span>.state.stepNumber + <span class="number">1</span>);</span><br><span class="line">    <span class="keyword">const</span> current = history[history.length - <span class="number">1</span>];</span><br><span class="line">    <span class="keyword">const</span> squares = current.squares.slice();</span><br><span class="line">    <span class="keyword">if</span> (calculateWinner(squares) || squares[i]) &#123;</span><br><span class="line">      <span class="keyword">return</span>;</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="comment">// 角色判断</span></span><br><span class="line">    squares[i] = <span class="keyword">this</span>.state.xIsNext ? <span class="string">"X"</span> : <span class="string">"O"</span>;</span><br><span class="line">    <span class="keyword">this</span>.setState(&#123;</span><br><span class="line">      history: history.concat([</span><br><span class="line">        &#123;</span><br><span class="line">          squares: squares</span><br><span class="line">        &#125;</span><br><span class="line">      ]),</span><br><span class="line">      stepNumber: history.length,</span><br><span class="line">      xIsNext: !<span class="keyword">this</span>.state.xIsNext</span><br><span class="line">    &#125;);</span><br><span class="line">  &#125;</span><br><span class="line"></span><br><span class="line">  <span class="comment">// 数据变更函数</span></span><br><span class="line">  jumpTo(step) &#123;</span><br><span class="line">    <span class="keyword">this</span>.setState(&#123;</span><br><span class="line">      stepNumber: step,</span><br><span class="line">      xIsNext: (step % <span class="number">2</span>) === <span class="number">0</span></span><br><span class="line">    &#125;);</span><br><span class="line">  &#125;</span><br><span class="line"></span><br><span class="line">  render() &#123;</span><br><span class="line">    <span class="keyword">const</span> history = <span class="keyword">this</span>.state.history;</span><br><span class="line">    <span class="keyword">const</span> current = history[<span class="keyword">this</span>.state.stepNumber];</span><br><span class="line">    <span class="keyword">const</span> winner = calculateWinner(current.squares);</span><br><span class="line"></span><br><span class="line">    <span class="comment">// 时间记忆</span></span><br><span class="line">    <span class="keyword">const</span> moves = history.map(<span class="function">(<span class="params">step, move</span>) =&gt;</span> &#123;</span><br><span class="line">      <span class="keyword">const</span> desc = move ?</span><br><span class="line">        <span class="string">'Go to move #'</span> + move :</span><br><span class="line">        <span class="string">'Go to game start'</span>;</span><br><span class="line">      <span class="keyword">return</span> (</span><br><span class="line">        &lt;li key=&#123; move &#125;&gt;</span><br><span class="line">          &lt;button onClick=&#123; () =&gt; <span class="keyword">this</span>.jumpTo(move) &#125;&gt;&#123; desc &#125;&lt;<span class="regexp">/button&gt;</span></span><br><span class="line"><span class="regexp">        &lt;/</span>li&gt;</span><br><span class="line">      );</span><br><span class="line">    &#125;);</span><br><span class="line"></span><br><span class="line">    <span class="keyword">let</span> status;</span><br><span class="line">    <span class="comment">// 判断是否已有胜者，没有继续显示下一位</span></span><br><span class="line">    <span class="keyword">if</span> (winner) &#123;</span><br><span class="line">      status = <span class="string">"Winner: "</span> + winner;</span><br><span class="line">    &#125; <span class="keyword">else</span> &#123;</span><br><span class="line">      status = <span class="string">"Next player: "</span> + (<span class="keyword">this</span>.state.xIsNext ? <span class="string">"X"</span> : <span class="string">"O"</span>);</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="comment">// 调用board组件 传入数据 点击事件</span></span><br><span class="line">    <span class="keyword">return</span> (</span><br><span class="line">      &lt;div className=<span class="string">"game"</span>&gt;</span><br><span class="line">        &lt;div className=<span class="string">"game-board"</span>&gt;</span><br><span class="line">          &lt;Board</span><br><span class="line">            squares=&#123; current.squares &#125;</span><br><span class="line">            onClick=&#123; i =&gt; <span class="keyword">this</span>.handleClick(i) &#125;</span><br><span class="line">          /&gt;</span><br><span class="line">        &lt;<span class="regexp">/div&gt;</span></span><br><span class="line"><span class="regexp">        &lt;div className="game-info"&gt;</span></span><br><span class="line"><span class="regexp">          &lt;div&gt;&#123; status &#125;&lt;/</span>div&gt;</span><br><span class="line">          &lt;ol&gt;&#123; moves &#125;&lt;<span class="regexp">/ol&gt;</span></span><br><span class="line"><span class="regexp">        &lt;/</span>div&gt;</span><br><span class="line">      &lt;<span class="regexp">/div&gt;</span></span><br><span class="line"><span class="regexp">    );</span></span><br><span class="line"><span class="regexp">  &#125;</span></span><br><span class="line"><span class="regexp">&#125;</span></span><br><span class="line"><span class="regexp"></span></span><br><span class="line"><span class="regexp">/</span><span class="regexp">/ ========================================</span></span><br><span class="line"><span class="regexp"></span></span><br><span class="line"><span class="regexp">ReactDOM.render(&lt;Game /</span>&gt;, <span class="built_in">document</span>.getElementById(<span class="string">"root"</span>));</span><br><span class="line"></span><br><span class="line"><span class="comment">// 判断胜负</span></span><br><span class="line"><span class="function"><span class="keyword">function</span> <span class="title">calculateWinner</span>(<span class="params">squares</span>) </span>&#123;</span><br><span class="line">  <span class="keyword">const</span> lines = [</span><br><span class="line">    [<span class="number">0</span>, <span class="number">1</span>, <span class="number">2</span>],</span><br><span class="line">    [<span class="number">3</span>, <span class="number">4</span>, <span class="number">5</span>],</span><br><span class="line">    [<span class="number">6</span>, <span class="number">7</span>, <span class="number">8</span>],</span><br><span class="line">    [<span class="number">0</span>, <span class="number">3</span>, <span class="number">6</span>],</span><br><span class="line">    [<span class="number">1</span>, <span class="number">4</span>, <span class="number">7</span>],</span><br><span class="line">    [<span class="number">2</span>, <span class="number">5</span>, <span class="number">8</span>],</span><br><span class="line">    [<span class="number">0</span>, <span class="number">4</span>, <span class="number">8</span>],</span><br><span class="line">    [<span class="number">2</span>, <span class="number">4</span>, <span class="number">6</span>]</span><br><span class="line">  ];</span><br><span class="line">  <span class="keyword">for</span> (<span class="keyword">let</span> i = <span class="number">0</span>; i &lt; lines.length; i++) &#123;</span><br><span class="line">    <span class="keyword">const</span> [a, b, c] = lines[i];</span><br><span class="line">    <span class="keyword">if</span> (squares[a] &amp;&amp; squares[a] === squares[b] &amp;&amp; squares[a] === squares[c]) &#123;</span><br><span class="line">      <span class="keyword">return</span> squares[a];</span><br><span class="line">    &#125;</span><br><span class="line">  &#125;</span><br><span class="line">  <span class="keyword">return</span> <span class="literal">null</span>;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure></li></ul><h1 id="效果图"><a href="#效果图" class="headerlink" title="效果图"></a>效果图</h1><ul><li>原效果<br><img src="/React/r3.png" alt="react"></li><li>加入拓展后效果<br><img src="/React/r4.png" alt="react"></li></ul><h1 id="后记"><a href="#后记" class="headerlink" title="后记"></a>后记</h1><ul><li>跟着官网写的第一个react，感觉挺不错的学到了很多</li><li><a href="https://yhf7.top/" target="_blank" rel="noopener">欢迎进入我的博客</a>：<a href="https://yhf7.github.io/" target="_blank" rel="noopener">https://yhf7.github.io/</a> 或 <a href="https://yhf7.top" target="_blank" rel="noopener">https://yhf7.top</a></li><li>如果有什么侵权的话，请及时添加小编微信以及 qq 也可以来告诉小编（905477376 微信 qq 通用），谢谢！</li></ul>]]></content>
    
    <summary type="html">
    
      
      
        &lt;link rel=&quot;stylesheet&quot; class=&quot;aplayer-secondary-style-marker&quot; href=&quot;/assets/css/APlayer.min.css&quot;&gt;&lt;script src=&quot;/assets/js/APlayer.min.js&quot; cla
      
    
    </summary>
    
      <category term="React 案例" scheme="http://yoursite.com/categories/React-%E6%A1%88%E4%BE%8B/"/>
    
    
      <category term="React" scheme="http://yoursite.com/tags/React/"/>
    
  </entry>
  
  <entry>
    <title>xcode git出错重装git</title>
    <link href="http://yoursite.com/2019/07/23/git%20xcode%E9%94%99%E8%AF%AF%E9%87%8D%E8%A3%85%E4%BF%AE%E5%A4%8D/"/>
    <id>http://yoursite.com/2019/07/23/git xcode错误重装修复/</id>
    <published>2019-07-23T02:21:12.753Z</published>
    <updated>2019-07-23T03:04:51.151Z</updated>
    
    <content type="html"><![CDATA[<link rel="stylesheet" class="aplayer-secondary-style-marker" href="/assets/css/APlayer.min.css"><script src="/assets/js/APlayer.min.js" class="aplayer-secondary-script-marker"></script><h1 id="前言"><a href="#前言" class="headerlink" title="前言"></a>前言</h1><ul><li>更改项目准备更新的时候发现无法git到状态报错</li><li>我以为是本地git有问题，git网上到的地址</li><li>但是发现还是报相同的错误问了一下大哥</li><li>发现是xcode和git的问题要重新安装</li></ul><h1 id="解决"><a href="#解决" class="headerlink" title="解决"></a>解决</h1><ul><li><p>重装xcode 更新 brew 重装git</p></li><li><p>报错图<br><img src="/git/err1.png" alt="git"></p></li></ul><ol><li><p>安装xcode-select –install（根目录安装,弹出框选择安装即可）</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">$ xcode-select --install</span><br></pre></td></tr></table></figure></li><li><p>更新 brew(需要等待一段时间)</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">$ brew update</span><br></pre></td></tr></table></figure></li></ol><p><img src="/git/err4.png" alt="git"></p><ol start="3"><li>重装git<figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">$ brew install git</span><br></pre></td></tr></table></figure></li></ol><p><img src="/git/err3.png" alt="git"></p><ol start="4"><li>查看是否可以继续使用<br><img src="/git/err2.png" alt="git"></li></ol><h1 id="后记"><a href="#后记" class="headerlink" title="后记"></a>后记</h1><ul><li>修复git就是如此简单粗暴</li><li><a href="https://yhf7.top/" target="_blank" rel="noopener">欢迎进入我的博客</a>：<a href="https://yhf7.github.io/" target="_blank" rel="noopener">https://yhf7.github.io/</a> 或 <a href="https://yhf7.top" target="_blank" rel="noopener">https://yhf7.top</a></li><li>如果有什么侵权的话，请及时添加小编微信以及 qq 也可以来告诉小编（905477376 微信 qq 通用），谢谢！</li></ul>]]></content>
    
    <summary type="html">
    
      
      
        &lt;link rel=&quot;stylesheet&quot; class=&quot;aplayer-secondary-style-marker&quot; href=&quot;/assets/css/APlayer.min.css&quot;&gt;&lt;script src=&quot;/assets/js/APlayer.min.js&quot; cla
      
    
    </summary>
    
      <category term="Git" scheme="http://yoursite.com/categories/Git/"/>
    
    
      <category term="Git" scheme="http://yoursite.com/tags/Git/"/>
    
  </entry>
  
  <entry>
    <title>如何在 hexo 搭建的博客中 显示自己的pdf简历</title>
    <link href="http://yoursite.com/2019/06/15/%E5%A6%82%E4%BD%95%E5%9C%A8%E5%8D%9A%E5%AE%A2%E6%BD%9C%E5%85%A5pdf/"/>
    <id>http://yoursite.com/2019/06/15/如何在博客潜入pdf/</id>
    <published>2019-06-14T16:11:11.869Z</published>
    <updated>2019-06-14T16:33:34.731Z</updated>
    
    <content type="html"><![CDATA[<link rel="stylesheet" class="aplayer-secondary-style-marker" href="/assets/css/APlayer.min.css"><script src="/assets/js/APlayer.min.js" class="aplayer-secondary-script-marker"></script><h1 id="前言"><a href="#前言" class="headerlink" title="前言"></a>前言</h1><ul><li>嗯其实我就是想把自己的简历放上来能让人看的</li><li>所以就上网查方法就发现了有个插件叫hexo-pdf</li><li>嗯真香这插件用的是真的方便</li></ul><h1 id="开始"><a href="#开始" class="headerlink" title="开始"></a>开始</h1><h3 id="1-安装插件"><a href="#1-安装插件" class="headerlink" title="1. 安装插件"></a>1. 安装插件</h3><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">$ sudo cnpm i hexo-pdf -S</span><br></pre></td></tr></table></figure><h3 id="2-直接使用"><a href="#2-直接使用" class="headerlink" title="2. 直接使用"></a>2. 直接使用</h3><ul><li>在md文件引入就好（如果是网上的pdf那就不需要放在本地）</li><li>本地的pdf需要写对路径<figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">&#123;% pdf \about\叶浩锋-一年半-web前端开发.pdf %&#125;</span><br></pre></td></tr></table></figure></li></ul><p><img src="/hexo/pdf1.png" alt="pdf"></p><h3 id="3-效果"><a href="#3-效果" class="headerlink" title="3. 效果"></a>3. 效果</h3><p><img src="/hexo/pdf2.png" alt="pdf"></p><h1 id="后记"><a href="#后记" class="headerlink" title="后记"></a>后记</h1><ul><li>添加pdf 就是这么简单快点试试吧</li><li><a href="https://yhf7.top/" target="_blank" rel="noopener">欢迎进入我的博客</a>：<a href="https://yhf7.github.io/" target="_blank" rel="noopener">https://yhf7.github.io/</a> 或 <a href="https://yhf7.top" target="_blank" rel="noopener">https://yhf7.top</a></li><li>如果有什么侵权的话，请及时添加小编微信以及 qq 也可以来告诉小编（905477376 微信 qq 通用），谢谢！</li></ul>]]></content>
    
    <summary type="html">
    
      
      
        &lt;link rel=&quot;stylesheet&quot; class=&quot;aplayer-secondary-style-marker&quot; href=&quot;/assets/css/APlayer.min.css&quot;&gt;&lt;script src=&quot;/assets/js/APlayer.min.js&quot; cla
      
    
    </summary>
    
      <category term="Hexo" scheme="http://yoursite.com/categories/Hexo/"/>
    
    
      <category term="Hexo笔记" scheme="http://yoursite.com/tags/Hexo%E7%AC%94%E8%AE%B0/"/>
    
  </entry>
  
  <entry>
    <title>利用 better-scroll 滚动插件实现，城市与A-Z侧边栏联动（左滑动右跟随，右点击左跟随）</title>
    <link href="http://yoursite.com/2019/06/12/%E5%88%A9%E7%94%A8better-scroll%E5%AE%9E%E7%8E%B0%E5%9F%8E%E5%B8%82%E5%AD%97%E6%AF%8D%E8%81%94%E5%8A%A8/"/>
    <id>http://yoursite.com/2019/06/12/利用better-scroll实现城市字母联动/</id>
    <published>2019-06-12T02:47:50.203Z</published>
    <updated>2019-06-12T04:25:48.863Z</updated>
    
    <content type="html"><![CDATA[<link rel="stylesheet" class="aplayer-secondary-style-marker" href="/assets/css/APlayer.min.css"><script src="/assets/js/APlayer.min.js" class="aplayer-secondary-script-marker"></script><h1 id="前言"><a href="#前言" class="headerlink" title="前言"></a>前言</h1><ul><li>最近没什么事做，用vue仿写elm</li><li>写完了城市定位选择页面，感觉其他好像都有字母侧边栏可以选择联动</li><li>我想嗯我也要弄一个城市联动的，然后就开始写</li><li>但是这个并不是一个简单的过程，因为一个小小的失误导致花费了很长的时间</li><li>搞了好久搞到烦，最后还是睡了一觉在梦里解决的</li></ul><h1 id="工具-资料"><a href="#工具-资料" class="headerlink" title="工具/资料"></a>工具/资料</h1><ul><li>系统 macOs 10.13.3</li><li>工具 vs code</li><li>开发语言 js vue</li><li>插件 better-scroll，<a href="https://www.npmjs.com/package/better-scroll" target="_blank" rel="noopener">插件地址</a></li><li>城市数据接口： <a href="http://yhf7.top:3000/api/v1/cities?type=group" target="_blank" rel="noopener">http://yhf7.top:3000/api/v1/cities?type=group</a></li></ul><h1 id="注意事项"><a href="#注意事项" class="headerlink" title="注意事项"></a>注意事项</h1><ol><li>axios是我自己封装的需要阅读清楚，使用自己封装的也是可以的，api请求里面的loadding我没有放出来</li><li>better-scroll我使用的是1.x的版本，也是1.x的写法，不知道2.x能不能套用没试过</li><li>固定好父级高度，不要让子撑开父，这样使得父级和子级高度一样无法获取x，y导致无法滚动（本人就是在这个问题弄了好久最后才发现的）</li><li>有时候第一次进入插件没有加载好需要刷新才能滚动的这个我也不知道着么破要是你解决的请告诉我</li><li>数据获取好才初始化结构</li></ol><h1 id="开始"><a href="#开始" class="headerlink" title="开始"></a>开始</h1><h3 id="1-获取数据（这里面的代码需要的可以私聊我发这里就不贴出来了）"><a href="#1-获取数据（这里面的代码需要的可以私聊我发这里就不贴出来了）" class="headerlink" title="1. 获取数据（这里面的代码需要的可以私聊我发这里就不贴出来了）"></a>1. 获取数据（这里面的代码需要的可以私聊我发这里就不贴出来了）</h3><ul><li>这里我vue里面使用的是axios封装的获取函数,我可以给你们看看和我配置的结构</li></ul><ol><li><p>安装axios、better-scroll</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">$ sudo cnpm i axios better-scroll  -S</span><br></pre></td></tr></table></figure></li><li><p>配置封装axios与接口<br><img src="/js/scroll1.png" alt=""></p></li><li>调用<br><img src="/js/scroll2.png" alt=""></li><li>查看数据效果<br><img src="/js/scroll3.png" alt=""></li></ol><h3 id="2-编写界面-（这里必须是要把需要滚动的父级高度限制小于需要滚动的高度）"><a href="#2-编写界面-（这里必须是要把需要滚动的父级高度限制小于需要滚动的高度）" class="headerlink" title="2. 编写界面 （这里必须是要把需要滚动的父级高度限制小于需要滚动的高度）"></a>2. 编写界面 （这里必须是要把需要滚动的父级高度限制小于需要滚动的高度）</h3><ul><li>拿到了数据当然是要把界面编辑处来的啦</li><li>由于我们是城市而且是所有的按照A-Z排序输出的</li><li>城市：使用一个ul包裹着li里面嵌套的是一个标题和城市的ul列表</li><li>侧边栏： 就是一个ul里面li循环所有城市的字母</li><li>ref: 为需要滚动的父级名称，自定义的用来获取元素用的</li></ul><ol><li><p>html</p><figure class="highlight html"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">&lt;!-- 所有城市 --&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">div</span> <span class="attr">class</span>=<span class="string">"group_city_container mr2"</span> <span class="attr">ref</span>=<span class="string">"foodsWrapper"</span>&gt;</span></span><br><span class="line">  <span class="tag">&lt;<span class="name">ul</span> <span class="attr">class</span>=<span class="string">"letter_classify"</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">li</span></span></span><br><span class="line"><span class="tag">      <span class="attr">v-for</span>=<span class="string">"(value,key,index) in sortgroupcity"</span></span></span><br><span class="line"><span class="tag">      <span class="attr">:key</span>=<span class="string">"key"</span></span></span><br><span class="line"><span class="tag">      <span class="attr">class</span>=<span class="string">"letter_classify_li food-list-hook"</span></span></span><br><span class="line"><span class="tag">    &gt;</span></span><br><span class="line">      <span class="tag">&lt;<span class="name">h4</span> <span class="attr">class</span>=<span class="string">"city_title"</span>&gt;</span></span><br><span class="line">        &#123;&#123;key&#125;&#125;</span><br><span class="line">        <span class="tag">&lt;<span class="name">span</span> <span class="attr">v-if</span>=<span class="string">"index == 0"</span>&gt;</span>（按字母排序可滚动）<span class="tag">&lt;/<span class="name">span</span>&gt;</span></span><br><span class="line">      <span class="tag">&lt;/<span class="name">h4</span>&gt;</span></span><br><span class="line">      <span class="tag">&lt;<span class="name">ul</span> <span class="attr">class</span>=<span class="string">"groupcity_name_container citylistul clear"</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">router-link</span></span></span><br><span class="line"><span class="tag">          <span class="attr">tag</span>=<span class="string">"li"</span></span></span><br><span class="line"><span class="tag">          <span class="attr">v-for</span>=<span class="string">"item in value"</span></span></span><br><span class="line"><span class="tag">          <span class="attr">:to</span>=<span class="string">"'/city/' + item.id"</span></span></span><br><span class="line"><span class="tag">          <span class="attr">:key</span>=<span class="string">"item.id"</span></span></span><br><span class="line"><span class="tag">          <span class="attr">class</span>=<span class="string">"ellipsis"</span></span></span><br><span class="line"><span class="tag">        &gt;</span>&#123;&#123;item.name&#125;&#125;<span class="tag">&lt;/<span class="name">router-link</span>&gt;</span></span><br><span class="line">      <span class="tag">&lt;/<span class="name">ul</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;/<span class="name">li</span>&gt;</span></span><br><span class="line">  <span class="tag">&lt;/<span class="name">ul</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">div</span>&gt;</span></span><br><span class="line"><span class="comment">&lt;!-- A-Z右边框列表 --&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">div</span> <span class="attr">class</span>=<span class="string">"alphabet"</span> <span class="attr">ref</span>=<span class="string">"menuWrapper"</span>&gt;</span></span><br><span class="line">  <span class="tag">&lt;<span class="name">ul</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">li</span></span></span><br><span class="line"><span class="tag">      <span class="attr">class</span>=<span class="string">"item"</span></span></span><br><span class="line"><span class="tag">      <span class="attr">v-for</span>=<span class="string">"(item,i) in letters"</span></span></span><br><span class="line"><span class="tag">      <span class="attr">:key</span>=<span class="string">"i"</span></span></span><br><span class="line"><span class="tag">      <span class="attr">:class</span>=<span class="string">"&#123;'current':currentIndex === i&#125;"</span></span></span><br><span class="line"><span class="tag">      @<span class="attr">click</span>=<span class="string">"selectMenu(i)"</span></span></span><br><span class="line"><span class="tag">    &gt;</span>&#123;&#123;item&#125;&#125;<span class="tag">&lt;/<span class="name">li</span>&gt;</span></span><br><span class="line">  <span class="tag">&lt;/<span class="name">ul</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">div</span>&gt;</span></span><br></pre></td></tr></table></figure></li><li><p>scss</p><figure class="highlight scss"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br><span class="line">64</span><br><span class="line">65</span><br><span class="line">66</span><br><span class="line">67</span><br><span class="line">68</span><br></pre></td><td class="code"><pre><span class="line"><span class="selector-class">.city_title</span> &#123;</span><br><span class="line">  <span class="attribute">color</span>: <span class="number">#666</span>;</span><br><span class="line">  <span class="attribute">font-weight</span>: <span class="number">400</span>;</span><br><span class="line">  <span class="attribute">text-indent</span>: <span class="number">0.45rem</span>;</span><br><span class="line">  <span class="attribute">border</span>: <span class="number">2px</span> solid <span class="variable">$bc</span>;</span><br><span class="line">  <span class="attribute">border-width</span>: <span class="number">2px</span> <span class="number">0</span> <span class="number">1px</span> <span class="number">0</span>;</span><br><span class="line">  @<span class="keyword">include</span> font(<span class="number">0.55rem</span>, 1.45rem, <span class="string">"Helvetica Neue"</span>);</span><br><span class="line">  <span class="selector-tag">span</span> &#123;</span><br><span class="line">    @<span class="keyword">include</span> sc(<span class="number">0.475rem</span>, <span class="number">#999</span>);</span><br><span class="line">  &#125;</span><br><span class="line">&#125;</span><br><span class="line"><span class="selector-class">.citylistul</span> &#123;</span><br><span class="line">  <span class="selector-tag">li</span> &#123;</span><br><span class="line">    <span class="attribute">float</span>: left;</span><br><span class="line">    <span class="attribute">text-align</span>: center;</span><br><span class="line">    <span class="attribute">color</span>: <span class="variable">$blue</span>;</span><br><span class="line">    <span class="attribute">border</span>: <span class="number">2px</span> solid <span class="variable">$bc</span>;</span><br><span class="line">    <span class="attribute">border-width</span>: <span class="number">0</span> <span class="number">1px</span> <span class="number">1px</span> <span class="number">0</span>;</span><br><span class="line">    @<span class="keyword">include</span> wh(<span class="number">25%</span>, 1.75rem);</span><br><span class="line">    @<span class="keyword">include</span> font(<span class="number">0.6rem</span>, 1.75rem);</span><br><span class="line">  &#125;</span><br><span class="line">  <span class="selector-tag">li</span>:nth-of-type(4n) &#123;</span><br><span class="line">    <span class="attribute">border-right</span>: none;</span><br><span class="line">  &#125;</span><br><span class="line">&#125;</span><br><span class="line"><span class="selector-class">.letter_classify_li</span> &#123;</span><br><span class="line">  <span class="attribute">margin-bottom</span>: <span class="number">0.4rem</span>;</span><br><span class="line">  <span class="attribute">background-color</span>: <span class="number">#fff</span>;</span><br><span class="line">  <span class="attribute">border-bottom</span>: <span class="number">1px</span> solid <span class="variable">$bc</span>;</span><br><span class="line">  <span class="selector-class">.groupcity_name_container</span> &#123;</span><br><span class="line">    <span class="selector-tag">li</span> &#123;</span><br><span class="line">      <span class="attribute">color</span>: <span class="number">#666</span>;</span><br><span class="line">    &#125;</span><br><span class="line">  &#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="comment">// 所有城市</span></span><br><span class="line"><span class="selector-class">.group_city_container</span> &#123;</span><br><span class="line">  <span class="attribute">height</span>: <span class="number">23.1rem</span>;</span><br><span class="line">  <span class="attribute">overflow</span>: hidden;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="comment">// A-z</span></span><br><span class="line"><span class="selector-class">.alphabet</span> &#123;</span><br><span class="line">  <span class="attribute">display</span>: flex;</span><br><span class="line">  <span class="attribute">justify-content</span>: center;</span><br><span class="line">  <span class="attribute">align-items</span>: center;</span><br><span class="line">  <span class="attribute">position</span>: fixed;</span><br><span class="line">  <span class="attribute">top</span>: <span class="number">40px</span>;</span><br><span class="line">  <span class="attribute">width</span>: <span class="number">20px</span>;</span><br><span class="line">  <span class="attribute">right</span>: <span class="number">0</span>;</span><br><span class="line">  <span class="attribute">bottom</span>: <span class="number">0</span>;</span><br><span class="line">  <span class="attribute">background</span>: <span class="number">#a5dff9</span>;</span><br><span class="line">  <span class="attribute">z-index</span>: <span class="number">1</span>;</span><br><span class="line">  <span class="selector-class">.item</span> &#123;</span><br><span class="line">    <span class="attribute">text-align</span>: center;</span><br><span class="line">    <span class="attribute">line-height</span>: <span class="number">20px</span>;</span><br><span class="line">    <span class="attribute">font-size</span>: <span class="number">12px</span>;</span><br><span class="line">  &#125;</span><br><span class="line">  <span class="selector-class">.current</span> &#123;</span><br><span class="line">    <span class="attribute">color</span>: red;</span><br><span class="line">  &#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="comment">// 公共右margin 20</span></span><br><span class="line"><span class="selector-class">.mr2</span> &#123;</span><br><span class="line">  <span class="attribute">margin-right</span>: <span class="number">20px</span>;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure></li></ol><h3 id="3-相关的js代码-配置滚动"><a href="#3-相关的js代码-配置滚动" class="headerlink" title="3. 相关的js代码,配置滚动"></a>3. 相关的js代码,配置滚动</h3><ul><li>获取添加所有的城市的字母</li><li>将获取的数据按照A-Z字母开头排序</li><li>配置插件<figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br><span class="line">64</span><br><span class="line">65</span><br><span class="line">66</span><br><span class="line">67</span><br><span class="line">68</span><br><span class="line">69</span><br><span class="line">70</span><br><span class="line">71</span><br><span class="line">72</span><br><span class="line">73</span><br><span class="line">74</span><br><span class="line">75</span><br><span class="line">76</span><br><span class="line">77</span><br><span class="line">78</span><br><span class="line">79</span><br><span class="line">80</span><br><span class="line">81</span><br><span class="line">82</span><br><span class="line">83</span><br><span class="line">84</span><br><span class="line">85</span><br><span class="line">86</span><br><span class="line">87</span><br><span class="line">88</span><br><span class="line">89</span><br><span class="line">90</span><br><span class="line">91</span><br><span class="line">92</span><br><span class="line">93</span><br><span class="line">94</span><br><span class="line">95</span><br><span class="line">96</span><br><span class="line">97</span><br><span class="line">98</span><br><span class="line">99</span><br><span class="line">100</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">// 引入插件</span></span><br><span class="line"><span class="keyword">import</span> BScroll <span class="keyword">from</span> <span class="string">"better-scroll"</span>;</span><br><span class="line"><span class="keyword">import</span> API <span class="keyword">from</span> <span class="string">"@/api/"</span>;</span><br><span class="line"><span class="keyword">export</span> <span class="keyword">default</span> &#123;</span><br><span class="line">  data() &#123;</span><br><span class="line">    <span class="keyword">return</span> &#123;</span><br><span class="line">      groupcity: &#123;&#125;, <span class="comment">// 所有城市列表</span></span><br><span class="line">      scrolly: <span class="number">0</span>, <span class="comment">// 记录滑动位置</span></span><br><span class="line">      listHeight: [], <span class="comment">// 存储滑动高度总表</span></span><br><span class="line">      letters: [] <span class="comment">// 记录所有城市的字母（右边框）</span></span><br><span class="line">    &#125;;</span><br><span class="line">  &#125;,</span><br><span class="line">  mounted() &#123;</span><br><span class="line">    <span class="comment">// 获取所有城市的数据</span></span><br><span class="line">    API.cityGroup().then(<span class="function"><span class="params">res</span> =&gt;</span> &#123;</span><br><span class="line">      <span class="keyword">this</span>.groupcity = res;</span><br><span class="line">      <span class="comment">// 获取数据后开启滚动</span></span><br><span class="line">      <span class="keyword">this</span>.$nextTick(<span class="function"><span class="params">()</span> =&gt;</span> &#123;</span><br><span class="line">        <span class="keyword">this</span>._initScroll();</span><br><span class="line">        <span class="keyword">this</span>._calculateHeight();</span><br><span class="line">      &#125;);</span><br><span class="line">    &#125;);</span><br><span class="line">  &#125;</span><br><span class="line">  computed: &#123;</span><br><span class="line">    <span class="comment">//将获取的数据按照A-Z字母开头排序</span></span><br><span class="line">    sortgroupcity() &#123;</span><br><span class="line">      <span class="keyword">let</span> sortobj = &#123;&#125;;</span><br><span class="line">      <span class="keyword">var</span> letters = [];</span><br><span class="line">      <span class="keyword">for</span> (<span class="keyword">let</span> i = <span class="number">65</span>; i &lt;= <span class="number">90</span>; i++) &#123;</span><br><span class="line">        <span class="keyword">if</span> (<span class="keyword">this</span>.groupcity[<span class="built_in">String</span>.fromCharCode(i)]) &#123;</span><br><span class="line">          sortobj[<span class="built_in">String</span>.fromCharCode(i)] = <span class="keyword">this</span>.groupcity[</span><br><span class="line">            <span class="built_in">String</span>.fromCharCode(i)</span><br><span class="line">          ];</span><br><span class="line">          <span class="comment">// 添加城市字母</span></span><br><span class="line">          letters.push(<span class="built_in">String</span>.fromCharCode(i));</span><br><span class="line">        &#125;</span><br><span class="line">      &#125;</span><br><span class="line">      <span class="comment">// 动态设置到data</span></span><br><span class="line">      <span class="keyword">this</span>.$set(<span class="keyword">this</span>, <span class="string">"letters"</span>, letters);</span><br><span class="line">      <span class="comment">// 返回排序好的城市数据</span></span><br><span class="line">      <span class="keyword">return</span> sortobj;</span><br><span class="line">    &#125;,</span><br><span class="line">    <span class="comment">// 监听滚动改变选中的侧边栏位置</span></span><br><span class="line">    currentIndex() &#123;</span><br><span class="line">      <span class="keyword">for</span> (<span class="keyword">let</span> i = <span class="number">0</span>; i &lt; <span class="keyword">this</span>.listHeight.length; i++) &#123;</span><br><span class="line">        <span class="keyword">const</span> height1 = <span class="keyword">this</span>.listHeight[i];</span><br><span class="line">        <span class="keyword">const</span> height2 = <span class="keyword">this</span>.listHeight[i + <span class="number">1</span>];</span><br><span class="line"></span><br><span class="line">        <span class="keyword">if</span> (!height2 || (<span class="keyword">this</span>.scrolly &gt;= height1 &amp;&amp; <span class="keyword">this</span>.scrolly &lt; height2)) &#123;</span><br><span class="line">          <span class="keyword">return</span> i;</span><br><span class="line">        &#125;</span><br><span class="line">      &#125;</span><br><span class="line">      <span class="keyword">return</span> <span class="number">0</span>;</span><br><span class="line">    &#125;</span><br><span class="line">  &#125;,</span><br><span class="line">  methods: &#123;</span><br><span class="line">    <span class="comment">/**</span></span><br><span class="line"><span class="comment">     * 点击侧边栏改变左侧移动位置</span></span><br><span class="line"><span class="comment">     * @param 当前选中的字母位置</span></span><br><span class="line"><span class="comment">     * */</span></span><br><span class="line">    selectMenu(i) &#123;</span><br><span class="line">      <span class="comment">// 获取左侧城市li</span></span><br><span class="line">      <span class="keyword">let</span> foodList = <span class="keyword">this</span>.$refs.foodsWrapper.getElementsByClassName(</span><br><span class="line">        <span class="string">"food-list-hook"</span></span><br><span class="line">      );</span><br><span class="line">      <span class="comment">// 选取相应的位置</span></span><br><span class="line">      <span class="keyword">let</span> el = foodList[i];</span><br><span class="line">      <span class="comment">// 滚动到当前</span></span><br><span class="line">      <span class="keyword">this</span>.foodsScroll.scrollToElement(el, <span class="number">300</span>);</span><br><span class="line">    &#125;,</span><br><span class="line">    <span class="comment">// 初始化滚动</span></span><br><span class="line">    _initScroll() &#123;</span><br><span class="line">      <span class="keyword">this</span>.meunScroll = <span class="keyword">new</span> BScroll(<span class="keyword">this</span>.$refs.menuWrapper, &#123; <span class="attr">click</span>: <span class="literal">true</span> &#125;);</span><br><span class="line">      <span class="keyword">this</span>.foodsScroll = <span class="keyword">new</span> BScroll(<span class="keyword">this</span>.$refs.foodsWrapper, &#123;</span><br><span class="line">        click: <span class="literal">true</span>,</span><br><span class="line">        probeType: <span class="number">3</span></span><br><span class="line">      &#125;);</span><br><span class="line"></span><br><span class="line">      <span class="keyword">this</span>.foodsScroll.on(<span class="string">"scroll"</span>, pos =&gt; &#123;</span><br><span class="line">        <span class="built_in">console</span>.log(<span class="keyword">this</span>.foodsScroll);</span><br><span class="line">        <span class="keyword">this</span>.scrolly = <span class="built_in">Math</span>.abs(<span class="built_in">Math</span>.round(pos.y));</span><br><span class="line">      &#125;);</span><br><span class="line">    &#125;,</span><br><span class="line">    <span class="comment">// 记录所有滚动的高度数据</span></span><br><span class="line">    _calculateHeight() &#123;</span><br><span class="line">      <span class="keyword">let</span> foodList = <span class="keyword">this</span>.$refs.foodsWrapper.getElementsByClassName(</span><br><span class="line">        <span class="string">"food-list-hook"</span></span><br><span class="line">      );</span><br><span class="line"></span><br><span class="line">      <span class="keyword">let</span> height = <span class="number">0</span>;</span><br><span class="line">      <span class="keyword">this</span>.listHeight.push(height);</span><br><span class="line"></span><br><span class="line">      <span class="keyword">for</span> (<span class="keyword">let</span> i = <span class="number">0</span>; i &lt; foodList.length; i++) &#123;</span><br><span class="line">        <span class="keyword">const</span> item = foodList[i];</span><br><span class="line">        height += item.clientHeight;</span><br><span class="line">        <span class="keyword">this</span>.listHeight.push(height);</span><br><span class="line">      &#125;</span><br><span class="line">    &#125;</span><br><span class="line">  &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure></li></ul><h3 id="4-查验是否配置成功（把项目跑起来）"><a href="#4-查验是否配置成功（把项目跑起来）" class="headerlink" title="4. 查验是否配置成功（把项目跑起来）"></a>4. 查验是否配置成功（把项目跑起来）</h3><ol><li>查验是否挂载了滚动<br><img src="/js/scroll4.png" alt=""></li><li>检查bs参数<br><img src="/js/scroll5.png" alt=""></li></ol><h1 id="后记"><a href="#后记" class="headerlink" title="后记"></a>后记</h1><ul><li>vue 左右滚动联动，就说到这了还有其他的问题欢迎添加好友详聊</li><li><a href="https://yhf7.top/" target="_blank" rel="noopener">欢迎进入我的博客</a>：<a href="https://yhf7.github.io/" target="_blank" rel="noopener">https://yhf7.github.io/</a> 或 <a href="https://yhf7.top" target="_blank" rel="noopener">https://yhf7.top</a></li><li>如果有什么侵权的话，请及时添加小编微信以及 qq 也可以来告诉小编（905477376 微信 qq 通用），谢谢！</li></ul>]]></content>
    
    <summary type="html">
    
      
      
        &lt;link rel=&quot;stylesheet&quot; class=&quot;aplayer-secondary-style-marker&quot; href=&quot;/assets/css/APlayer.min.css&quot;&gt;&lt;script src=&quot;/assets/js/APlayer.min.js&quot; cla
      
    
    </summary>
    
      <category term="Vue" scheme="http://yoursite.com/categories/Vue/"/>
    
    
      <category term="Vue 案例" scheme="http://yoursite.com/tags/Vue-%E6%A1%88%E4%BE%8B/"/>
    
  </entry>
  
  <entry>
    <title>vue-cli3 使用svg 方法</title>
    <link href="http://yoursite.com/2019/06/09/vue-cli3%E4%BD%BF%E7%94%A8svg/"/>
    <id>http://yoursite.com/2019/06/09/vue-cli3使用svg/</id>
    <published>2019-06-09T15:13:51.613Z</published>
    <updated>2019-06-10T04:56:32.586Z</updated>
    
    <content type="html"><![CDATA[<link rel="stylesheet" class="aplayer-secondary-style-marker" href="/assets/css/APlayer.min.css"><script src="/assets/js/APlayer.min.js" class="aplayer-secondary-script-marker"></script><h1 id="前言"><a href="#前言" class="headerlink" title="前言"></a>前言</h1><ul><li>写项目遇到使用 svg 很久之前在 html 上用过</li><li>在 vue 上使用还是第一次弄了好久，最后找到了两种方法</li><li>第一种是官网上的还有一直是基于 webpack 的</li><li>svg 好处还是很多的,可随意变更图片颜色</li><li>第二种方法封装了使得用起来更加的方便,不过配置的时候稍微有一点点麻烦</li></ul><h1 id="工具-资料"><a href="#工具-资料" class="headerlink" title="工具/资料"></a>工具/资料</h1><ul><li>系统 macOs 10.13.3</li><li>开发工具 vs code</li><li>文档 npmjs.com</li><li><a href="https://www.iconfont.cn/" target="_blank" rel="noopener">svg</a>: <a href="https://www.iconfont.cn/" target="_blank" rel="noopener">https://www.iconfont.cn/</a></li><li>vue-cli3 项目</li><li>webpack 4.0 以上</li><li>npm cnpm yarn 其中一种</li><li>第一方法插件 vue-svg-loader vue-template-compiler</li><li>第二方法插件 svg-sprite-loader</li></ul><h1 id="开始"><a href="#开始" class="headerlink" title="开始"></a>开始</h1><h3 id="1-第一种方法官网默认（vue-svg-loader）"><a href="#1-第一种方法官网默认（vue-svg-loader）" class="headerlink" title="1. 第一种方法官网默认（vue-svg-loader）"></a>1. 第一种方法官网默认（vue-svg-loader）</h3><ol><li>安装插件（sudo 非苹果系统不需要加）</li></ol><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">$ sudo cnpm i -D vue-svg-loader vue-template-compiler</span><br></pre></td></tr></table></figure><ol start="2"><li>配置 webpack（vue.config.js）</li></ol><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br></pre></td><td class="code"><pre><span class="line"><span class="built_in">module</span>.exports = &#123;</span><br><span class="line">  chainWebpack: <span class="function">(<span class="params">config</span>) =&gt;</span> &#123;</span><br><span class="line">        <span class="keyword">const</span> svgRule = config.module.rule(<span class="string">'svg'</span>);</span><br><span class="line"></span><br><span class="line">        svgRule.uses.clear();</span><br><span class="line"></span><br><span class="line">        svgRule</span><br><span class="line">            .use(<span class="string">'vue-svg-loader'</span>)</span><br><span class="line">            .loader(<span class="string">'vue-svg-loader'</span>);</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p><img src="/Vue/svg1.png" alt="svg"></p><ol start="3"><li>引入 svg 使用(和用组件一样)</li></ol><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br></pre></td><td class="code"><pre><span class="line">&lt;template&gt;</span><br><span class="line">  &lt;div&gt;</span><br><span class="line">    &lt;test /&gt;</span><br><span class="line">  &lt;<span class="regexp">/div&gt;</span></span><br><span class="line"><span class="regexp">&lt;/</span>template&gt;</span><br><span class="line"></span><br><span class="line">&lt;script&gt;</span><br><span class="line"><span class="keyword">import</span> test <span class="keyword">from</span> <span class="string">'../../assets/icons/rightArrow.svg'</span></span><br><span class="line">components: &#123;</span><br><span class="line">    test</span><br><span class="line">  &#125;</span><br><span class="line">&lt;<span class="regexp">/script&gt;</span></span><br><span class="line"><span class="regexp"></span></span><br><span class="line"><span class="regexp">&lt;style lang="scss" scoped&gt;</span></span><br><span class="line"><span class="regexp">.arrow_right &#123;</span></span><br><span class="line"><span class="regexp">  @include wh(0.6rem, 0.6rem);</span></span><br><span class="line"><span class="regexp">  path &#123; /</span><span class="regexp">/ 在path改变颜色，通过fill属性</span></span><br><span class="line"><span class="regexp">    fill: red;</span></span><br><span class="line"><span class="regexp">  &#125;</span></span><br><span class="line"><span class="regexp">&#125;</span></span><br><span class="line"><span class="regexp">&lt;/</span>style&gt;</span><br></pre></td></tr></table></figure><p><img src="/Vue/svg2.png" alt="svg"></p><ol start="4"><li>查看效果（这里我写了 css 的）<br><img src="/Vue/svg3.png" alt="svg"></li></ol><h3 id="2-第二种方法在网上找到的别人封装了的（svg-sprite-loader）"><a href="#2-第二种方法在网上找到的别人封装了的（svg-sprite-loader）" class="headerlink" title="2. 第二种方法在网上找到的别人封装了的（svg-sprite-loader）"></a>2. 第二种方法在网上找到的别人封装了的（svg-sprite-loader）</h3><ol><li>安装插件</li></ol><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">$ sudo cnpm i svg-sprite-loader -S</span><br></pre></td></tr></table></figure><ol start="2"><li>配置 vue.config.js</li></ol><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">const</span> path = <span class="built_in">require</span>(<span class="string">"path"</span>);</span><br><span class="line"><span class="function"><span class="keyword">function</span> <span class="title">resolve</span>(<span class="params">dir</span>) </span>&#123;</span><br><span class="line">  <span class="keyword">return</span> path.join(__dirname, dir);</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="built_in">module</span>.exports = &#123;</span><br><span class="line">  chainWebpack(config) &#123;</span><br><span class="line">    config.module</span><br><span class="line">      .rule(<span class="string">"svg"</span>)</span><br><span class="line">      .exclude.add(resolve(<span class="string">"src/assets/icons"</span>)) <span class="comment">// icons存放地（svg放的地方）</span></span><br><span class="line">      .end();</span><br><span class="line">    config.module</span><br><span class="line">      .rule(<span class="string">"icons"</span>)</span><br><span class="line">      .test(<span class="regexp">/\.svg$/</span>)</span><br><span class="line">      .include.add(resolve(<span class="string">"src/assets/icons"</span>)) <span class="comment">// icons存放地（svg放的地方）</span></span><br><span class="line">      .end()</span><br><span class="line">      .use(<span class="string">"svg-sprite-loader"</span>)</span><br><span class="line">      .loader(<span class="string">"svg-sprite-loader"</span>)</span><br><span class="line">      .options(&#123;</span><br><span class="line">        symbolId: <span class="string">"icon-[name]"</span></span><br><span class="line">      &#125;)</span><br><span class="line">      .end();</span><br><span class="line">  &#125;</span><br><span class="line">&#125;;</span><br></pre></td></tr></table></figure><ol start="3"><li>配置封装 svg 组件</li></ol><ul><li>在 components 创建组件 （/SvgIcon/index.vue）</li></ul><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br></pre></td><td class="code"><pre><span class="line">&lt;template&gt;</span><br><span class="line">  &lt;svg v-<span class="keyword">else</span> :<span class="class"><span class="keyword">class</span></span>=<span class="string">"svgClass"</span> aria-hidden=<span class="string">"true"</span> v-on=<span class="string">"$listeners"</span>&gt;</span><br><span class="line">    &lt;use :xlink:href=<span class="string">"iconName"</span> /&gt;</span><br><span class="line">  &lt;<span class="regexp">/svg&gt;</span></span><br><span class="line"><span class="regexp">&lt;/</span>template&gt;</span><br><span class="line"></span><br><span class="line">&lt;script&gt;</span><br><span class="line"></span><br><span class="line"><span class="keyword">export</span> <span class="keyword">default</span> &#123;</span><br><span class="line">  name: <span class="string">'SvgIcon'</span>,</span><br><span class="line">  props: &#123;</span><br><span class="line">    iconClass: &#123;</span><br><span class="line">      type: <span class="built_in">String</span>,</span><br><span class="line">      required: <span class="literal">true</span></span><br><span class="line">    &#125;,</span><br><span class="line">    className: &#123;</span><br><span class="line">      type: <span class="built_in">String</span>,</span><br><span class="line">      <span class="keyword">default</span>: <span class="string">''</span></span><br><span class="line">    &#125;</span><br><span class="line">  &#125;,</span><br><span class="line">  computed: &#123;</span><br><span class="line">    iconName() &#123;</span><br><span class="line">      <span class="keyword">return</span> <span class="string">`#icon-<span class="subst">$&#123;<span class="keyword">this</span>.iconClass&#125;</span>`</span></span><br><span class="line">    &#125;,</span><br><span class="line">    svgClass() &#123;</span><br><span class="line">      <span class="keyword">if</span> (<span class="keyword">this</span>.className) &#123;</span><br><span class="line">        <span class="keyword">return</span> <span class="string">'svg-icon '</span> + <span class="keyword">this</span>.className</span><br><span class="line">      &#125; <span class="keyword">else</span> &#123;</span><br><span class="line">        <span class="keyword">return</span> <span class="string">'svg-icon'</span></span><br><span class="line">      &#125;</span><br><span class="line">    &#125;,</span><br><span class="line">    styleExternalIcon() &#123;</span><br><span class="line">      <span class="keyword">return</span> &#123;</span><br><span class="line">        mask: <span class="string">`url(<span class="subst">$&#123;<span class="keyword">this</span>.iconClass&#125;</span>) no-repeat 50% 50%`</span>,</span><br><span class="line">        <span class="string">'-webkit-mask'</span>: <span class="string">`url(<span class="subst">$&#123;<span class="keyword">this</span>.iconClass&#125;</span>) no-repeat 50% 50%`</span></span><br><span class="line">      &#125;</span><br><span class="line">    &#125;</span><br><span class="line">  &#125;</span><br><span class="line">&#125;</span><br><span class="line">&lt;<span class="regexp">/script&gt;</span></span><br></pre></td></tr></table></figure><ol start="4"><li>配置引入组件（icons 目录下建立 index.js 文件）</li></ol><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">import</span> Vue <span class="keyword">from</span> <span class="string">"vue"</span>;</span><br><span class="line"><span class="keyword">import</span> SvgIcon <span class="keyword">from</span> <span class="string">"@/components/SvgIcon"</span>; <span class="comment">// svg component</span></span><br><span class="line"></span><br><span class="line"><span class="comment">// register globally</span></span><br><span class="line">Vue.component(<span class="string">"svg-icon"</span>, SvgIcon);</span><br><span class="line"></span><br><span class="line"><span class="keyword">const</span> req = <span class="built_in">require</span>.context(<span class="string">"./svg"</span>, <span class="literal">false</span>, /\.svg$/);</span><br><span class="line"><span class="keyword">const</span> requireAll = <span class="function"><span class="params">requireContext</span> =&gt;</span> requireContext.keys().map(requireContext);</span><br><span class="line">requireAll(req);</span><br></pre></td></tr></table></figure><p><img src="/Vue/svg4.png" alt="svg"></p><ol start="5"><li>引入 svg 配置文件（main 引入）</li></ol><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">import</span> <span class="string">"@/assets/icons"</span>;</span><br></pre></td></tr></table></figure><ol start="6"><li>使用 svg (无需引入只需要用 svg-icon 标签即可)</li></ol><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br></pre></td><td class="code"><pre><span class="line">&lt;template&gt;</span><br><span class="line">  &lt;svg-icon <span class="class"><span class="keyword">class</span></span>=<span class="string">"arrow_right"</span> icon-<span class="class"><span class="keyword">class</span></span>=<span class="string">"rightArrow"</span> /&gt;<span class="comment">// 这里icon-class写的就是svg文件的名字</span></span><br><span class="line">&lt;<span class="regexp">/template&gt;</span></span><br><span class="line"><span class="regexp"></span></span><br><span class="line"><span class="regexp">&lt;style lang="scss" scoped&gt;</span></span><br><span class="line"><span class="regexp">.arrow_right &#123;</span></span><br><span class="line"><span class="regexp">      @include wh(0.6rem, 0.6rem); /</span><span class="regexp">/ 控制大小</span></span><br><span class="line"><span class="regexp">      fill: red; /</span><span class="regexp">/ 控制颜色</span></span><br><span class="line"><span class="regexp">    &#125;</span></span><br><span class="line"><span class="regexp">&lt;/</span>style&gt;</span><br></pre></td></tr></table></figure><h1 id="后记"><a href="#后记" class="headerlink" title="后记"></a>后记</h1><ul><li>这就是我所使用的两种 svg 的方法，个人感觉第二种用起来更加便捷</li><li><a href="https://yhf7.top/" target="_blank" rel="noopener">欢迎进入我的博客</a>：<a href="https://yhf7.github.io/" target="_blank" rel="noopener">https://yhf7.github.io/</a> 或 <a href="https://yhf7.top" target="_blank" rel="noopener">https://yhf7.top</a></li><li>如果有什么侵权的话，请及时添加小编微信以及 qq 也可以来告诉小编（905477376 微信 qq 通用），谢谢！</li></ul>]]></content>
    
    <summary type="html">
    
      
      
        &lt;link rel=&quot;stylesheet&quot; class=&quot;aplayer-secondary-style-marker&quot; href=&quot;/assets/css/APlayer.min.css&quot;&gt;&lt;script src=&quot;/assets/js/APlayer.min.js&quot; cla
      
    
    </summary>
    
      <category term="Vue" scheme="http://yoursite.com/categories/Vue/"/>
    
    
      <category term="Vue笔记" scheme="http://yoursite.com/tags/Vue%E7%AC%94%E8%AE%B0/"/>
    
  </entry>
  
  <entry>
    <title>记录几种js 去重案例</title>
    <link href="http://yoursite.com/2019/05/31/%E8%AE%B0%E5%BD%95js%E5%A4%9A%E7%A7%8D%E5%8E%BB%E9%87%8D%E5%A4%8D%E5%86%99%E6%B3%95/"/>
    <id>http://yoursite.com/2019/05/31/记录js多种去重复写法/</id>
    <published>2019-05-31T00:41:20.121Z</published>
    <updated>2019-05-31T01:45:02.946Z</updated>
    
    <content type="html"><![CDATA[<link rel="stylesheet" class="aplayer-secondary-style-marker" href="/assets/css/APlayer.min.css"><script src="/assets/js/APlayer.min.js" class="aplayer-secondary-script-marker"></script><h1 id="前言"><a href="#前言" class="headerlink" title="前言"></a>前言</h1><ul><li>在编程中去重还是很常见的</li><li>最近被一个朋友发来的需求蒙住了，花了很多时间查阅思考解决</li><li>可能是我本来实力不强吧</li><li>js去重有好几个方法我之前记录过了，这篇只是记录这两个新的案例</li><li>如果要看的可以去点击  标签-&gt;Js笔记-&gt;Js回顾 温故知新 可以为师矣</li></ul><h1 id="工具-资料"><a href="#工具-资料" class="headerlink" title="工具/资料"></a>工具/资料</h1><ul><li>系统 Mac Os 10.13.3</li><li>工具 vs code</li><li>资料借阅网上的一篇去重案例改成需求</li></ul><h1 id="开始"><a href="#开始" class="headerlink" title="开始"></a>开始</h1><h3 id="1-数组对象中判断出现重复的子项都清空（重复的子项也清除不保留）"><a href="#1-数组对象中判断出现重复的子项都清空（重复的子项也清除不保留）" class="headerlink" title="1. 数组对象中判断出现重复的子项都清空（重复的子项也清除不保留）"></a>1. 数组对象中判断出现重复的子项都清空（重复的子项也清除不保留）</h3><ol><li><p>案例</p><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">var</span> arr = [&#123;</span><br><span class="line">  <span class="string">"name"</span>: <span class="string">"ZYTX"</span>,</span><br><span class="line">  <span class="string">"age"</span>: <span class="string">"Y13xG_4wQnOWK1QwJLgg11d0pS4hewePU95UHtpMl3eE81uS74NC-6zu-Rtnw4Ix"</span>,</span><br><span class="line">  <span class="string">"gender"</span>: <span class="string">"AAAAAA.doc"</span></span><br><span class="line">&#125;, &#123;</span><br><span class="line">  <span class="string">"name"</span>: <span class="string">"ZYTA"</span>,</span><br><span class="line">  <span class="string">"age"</span>: <span class="string">"Y13xG_4wQnOWK1QwJLgg11d0pS4hewePU95UHtpMl3eE81uS74NC-6zu-Rtnw4Ix"</span>,</span><br><span class="line">  <span class="string">"gender"</span>: <span class="string">"BBBBBB.doc"</span></span><br><span class="line">&#125;, &#123;</span><br><span class="line">  <span class="string">"name"</span>: <span class="string">"ZDTX"</span>,</span><br><span class="line">  <span class="string">"age"</span>: <span class="string">"Y13xG_4wQnOWK1QwJLgg11d0pS4hewePU95UHtpMl3eE81uS74NC-6zu-Rtnw4Ix"</span>,</span><br><span class="line">  <span class="string">"gender"</span>: <span class="string">"CCCCCC.doc"</span></span><br><span class="line">&#125;, &#123;</span><br><span class="line">  <span class="string">"name"</span>: <span class="string">"ZYTX"</span>,</span><br><span class="line">  <span class="string">"age"</span>: <span class="string">"Y13xG_4wQnOWK1QwJLgg11d0pS4hewePU95UHtpMl3eE81uS74NC-6zu-Rtnw4Ix"</span>,</span><br><span class="line">  <span class="string">"gender"</span>: <span class="string">"AAAAAA.doc"</span></span><br><span class="line">&#125;];</span><br></pre></td></tr></table></figure></li><li><p>需求效果 (重复的都清空)</p><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">var</span> arr = [&#123;</span><br><span class="line">  <span class="string">"name"</span>: <span class="string">"ZYTA"</span>,</span><br><span class="line">  <span class="string">"age"</span>: <span class="string">"Y13xG_4wQnOWK1QwJLgg11d0pS4hewePU95UHtpMl3eE81uS74NC-6zu-Rtnw4Ix"</span>,</span><br><span class="line">  <span class="string">"gender"</span>: <span class="string">"BBBBBB.doc"</span></span><br><span class="line">&#125;, &#123;</span><br><span class="line">  <span class="string">"name"</span>: <span class="string">"ZDTX"</span>,</span><br><span class="line">  <span class="string">"age"</span>: <span class="string">"Y13xG_4wQnOWK1QwJLgg11d0pS4hewePU95UHtpMl3eE81uS74NC-6zu-Rtnw4Ix"</span>,</span><br><span class="line">  <span class="string">"gender"</span>: <span class="string">"CCCCCC.doc"</span></span><br><span class="line">&#125;;</span><br></pre></td></tr></table></figure></li><li><p>解决思路</p></li></ol><ul><li>先去重复，记录重复子项</li><li>提取非重复项输出</li></ul><ol start="4"><li><p>编码</p><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">var</span> arr = [&#123;</span><br><span class="line">  <span class="string">"name"</span>: <span class="string">"ZYTX"</span>,</span><br><span class="line">  <span class="string">"age"</span>: <span class="string">"Y13xG_4wQnOWK1QwJLgg11d0pS4hewePU95UHtpMl3eE81uS74NC-6zu-Rtnw4Ix"</span>,</span><br><span class="line">  <span class="string">"gender"</span>: <span class="string">"AAAAAA.doc"</span></span><br><span class="line">&#125;, &#123;</span><br><span class="line">  <span class="string">"name"</span>: <span class="string">"ZYTA"</span>,</span><br><span class="line">  <span class="string">"age"</span>: <span class="string">"Y13xG_4wQnOWK1QwJLgg11d0pS4hewePU95UHtpMl3eE81uS74NC-6zu-Rtnw4Ix"</span>,</span><br><span class="line">  <span class="string">"gender"</span>: <span class="string">"BBBBBB.doc"</span></span><br><span class="line">&#125;, &#123;</span><br><span class="line">  <span class="string">"name"</span>: <span class="string">"ZDTX"</span>,</span><br><span class="line">  <span class="string">"age"</span>: <span class="string">"Y13xG_4wQnOWK1QwJLgg11d0pS4hewePU95UHtpMl3eE81uS74NC-6zu-Rtnw4Ix"</span>,</span><br><span class="line">  <span class="string">"gender"</span>: <span class="string">"CCCCCC.doc"</span></span><br><span class="line">&#125;, &#123;</span><br><span class="line">  <span class="string">"name"</span>: <span class="string">"ZYTX"</span>,</span><br><span class="line">  <span class="string">"age"</span>: <span class="string">"Y13xG_4wQnOWK1QwJLgg11d0pS4hewePU95UHtpMl3eE81uS74NC-6zu-Rtnw4Ix"</span>,</span><br><span class="line">  <span class="string">"gender"</span>: <span class="string">"AAAAAA.doc"</span></span><br><span class="line">  &#125;, &#123;</span><br><span class="line">    <span class="string">"name"</span>: <span class="string">"ZYTX"</span>,</span><br><span class="line">    <span class="string">"age"</span>: <span class="string">"Y13xG_4wQnOWK1QwJLgg11d0pS4hewePU95UHtpMl3eE81uS74NC-6zu-Rtnw4Ix"</span>,</span><br><span class="line">    <span class="string">"gender"</span>: <span class="string">"AAAAAA.doc"</span></span><br><span class="line">  &#125;];</span><br><span class="line"></span><br><span class="line"><span class="keyword">var</span> hash = &#123;&#125;; <span class="comment">// 记载以出现项</span></span><br><span class="line"><span class="keyword">var</span> min = &#123;&#125;; <span class="comment">// 记载重复项</span></span><br><span class="line"></span><br><span class="line"><span class="comment">// 1. 去重记载（如果单一的去重第二步就不用做了）</span></span><br><span class="line">arr = arr.reduce(<span class="function"><span class="keyword">function</span> (<span class="params">item, next</span>) </span>&#123;</span><br><span class="line">  hash[next.name] ? min[next.name] = <span class="literal">true</span> : hash[next.name] = <span class="literal">true</span> &amp;&amp; item.push(next);</span><br><span class="line">  <span class="keyword">return</span> item</span><br><span class="line">&#125;, [])</span><br><span class="line"></span><br><span class="line"><span class="comment">// 2. 再次去重（清除之前去重留下的重复项）</span></span><br><span class="line">arr = arr.reduce(<span class="function"><span class="keyword">function</span> (<span class="params">item, next</span>) </span>&#123;</span><br><span class="line">  min[next.name] ? <span class="string">''</span> : min[next.name] = <span class="literal">true</span> &amp;&amp; item.push(next);</span><br><span class="line">  <span class="keyword">return</span> item</span><br><span class="line">&#125;, [])</span><br><span class="line"></span><br><span class="line"><span class="built_in">console</span>.log(arr);</span><br></pre></td></tr></table></figure></li><li><p>运行查看效果</p><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><span class="line">[ &#123; <span class="attr">name</span>: <span class="string">'ZYTA'</span>,</span><br><span class="line">    age:</span><br><span class="line">     <span class="string">'Y13xG_4wQnOWK1QwJLgg11d0pS4hewePU95UHtpMl3eE81uS74NC-6zu-Rtnw4Ix'</span>,</span><br><span class="line">    gender: <span class="string">'BBBBBB.doc'</span> &#125;,</span><br><span class="line">  &#123; <span class="attr">name</span>: <span class="string">'ZDTX'</span>,</span><br><span class="line">    age:</span><br><span class="line">     <span class="string">'Y13xG_4wQnOWK1QwJLgg11d0pS4hewePU95UHtpMl3eE81uS74NC-6zu-Rtnw4Ix'</span>,</span><br><span class="line">    gender: <span class="string">'CCCCCC.doc'</span> &#125; ]</span><br></pre></td></tr></table></figure></li></ol><h3 id="2-数组对象中判断相同id中的某一项去重"><a href="#2-数组对象中判断相同id中的某一项去重" class="headerlink" title="2. 数组对象中判断相同id中的某一项去重"></a>2. 数组对象中判断相同id中的某一项去重</h3><ol><li><p>案例</p><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">var</span> arr = [&#123; <span class="attr">id</span>: <span class="number">1</span>, <span class="attr">type</span>: <span class="string">'倒2'</span>, <span class="attr">name</span>: <span class="string">'广东'</span> &#125;, &#123; <span class="attr">id</span>: <span class="number">1</span>, <span class="attr">type</span>: <span class="string">'倒1'</span>, <span class="attr">name</span>: <span class="string">'广东'</span> &#125;, &#123; <span class="attr">id</span>: <span class="number">1</span>, <span class="attr">type</span>: <span class="string">'倒2'</span>, <span class="attr">name</span>: <span class="string">'广东'</span> &#125;, &#123; <span class="attr">id</span>: <span class="number">1</span>, <span class="attr">type</span>: <span class="string">'倒1'</span>, <span class="attr">name</span>: <span class="string">'广东'</span> &#125;, &#123; <span class="attr">id</span>: <span class="number">2</span>, <span class="attr">type</span>: <span class="string">'倒1'</span>, <span class="attr">name</span>: <span class="string">'广东'</span> &#125;, &#123; <span class="attr">id</span>: <span class="number">2</span>, <span class="attr">type</span>: <span class="string">'倒2'</span>, <span class="attr">name</span>: <span class="string">'广东'</span> &#125;, &#123; <span class="attr">id</span>: <span class="number">2</span>, <span class="attr">type</span>: <span class="string">'倒2'</span>, <span class="attr">name</span>: <span class="string">'广东'</span> &#125;, &#123; <span class="attr">id</span>: <span class="number">2</span>, <span class="attr">type</span>: <span class="string">'倒5'</span>, <span class="attr">name</span>: <span class="string">'广东'</span> &#125;];</span><br></pre></td></tr></table></figure></li><li><p>需求效果 (保留单一重复项)</p><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line">[ &#123; <span class="attr">id</span>: <span class="number">1</span>, <span class="attr">type</span>: <span class="string">'倒2'</span>, <span class="attr">name</span>: <span class="string">'广东'</span> &#125;,</span><br><span class="line">  &#123; <span class="attr">id</span>: <span class="number">1</span>, <span class="attr">type</span>: <span class="string">'倒1'</span>, <span class="attr">name</span>: <span class="string">'广东'</span> &#125;,</span><br><span class="line">  &#123; <span class="attr">id</span>: <span class="number">2</span>, <span class="attr">type</span>: <span class="string">'倒1'</span>, <span class="attr">name</span>: <span class="string">'广东'</span> &#125;,</span><br><span class="line">  &#123; <span class="attr">id</span>: <span class="number">2</span>, <span class="attr">type</span>: <span class="string">'倒2'</span>, <span class="attr">name</span>: <span class="string">'广东'</span> &#125;,</span><br><span class="line">  &#123; <span class="attr">id</span>: <span class="number">2</span>, <span class="attr">type</span>: <span class="string">'倒5'</span>, <span class="attr">name</span>: <span class="string">'广东'</span> &#125; ]</span><br></pre></td></tr></table></figure></li><li><p>解决思路</p></li></ol><ul><li>提取id，与type子项</li><li>这里用了一个小技巧在重复子项上面加上id这样就好判断很多了</li></ul><ol start="4"><li><p>编码</p><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">var</span> hash = &#123;&#125;;</span><br><span class="line"><span class="keyword">var</span> min = &#123;&#125;;</span><br><span class="line">arr = arr.reduce(<span class="function"><span class="keyword">function</span> (<span class="params">item, next</span>) </span>&#123;</span><br><span class="line">  <span class="comment">// 记录当id为true 和 子项+id相同才为真</span></span><br><span class="line">  <span class="comment">// 这里+id主要是为了好判断</span></span><br><span class="line">  hash[next.id] &amp;&amp; hash[next.type + next.id] == next.type ? <span class="string">""</span> : (hash[next.id] = <span class="literal">true</span>) &amp;&amp; (hash[next.type+next.id] = next.type) &amp;&amp; item.push(next);</span><br><span class="line">  <span class="keyword">return</span> item</span><br><span class="line">&#125;, [])</span><br><span class="line"></span><br><span class="line"><span class="built_in">console</span>.log(arr);</span><br></pre></td></tr></table></figure></li><li><p>运行查看效果</p><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line">[ &#123; <span class="attr">id</span>: <span class="number">1</span>, <span class="attr">type</span>: <span class="string">'倒2'</span>, <span class="attr">name</span>: <span class="string">'广东'</span> &#125;,</span><br><span class="line">  &#123; <span class="attr">id</span>: <span class="number">1</span>, <span class="attr">type</span>: <span class="string">'倒1'</span>, <span class="attr">name</span>: <span class="string">'广东'</span> &#125;,</span><br><span class="line">  &#123; <span class="attr">id</span>: <span class="number">2</span>, <span class="attr">type</span>: <span class="string">'倒1'</span>, <span class="attr">name</span>: <span class="string">'广东'</span> &#125;,</span><br><span class="line">  &#123; <span class="attr">id</span>: <span class="number">2</span>, <span class="attr">type</span>: <span class="string">'倒2'</span>, <span class="attr">name</span>: <span class="string">'广东'</span> &#125;,</span><br><span class="line">  &#123; <span class="attr">id</span>: <span class="number">2</span>, <span class="attr">type</span>: <span class="string">'倒5'</span>, <span class="attr">name</span>: <span class="string">'广东'</span> &#125; ]</span><br></pre></td></tr></table></figure></li></ol><h1 id="后记"><a href="#后记" class="headerlink" title="后记"></a>后记</h1><ul><li>记录两个去重小案例，吐槽一下这个老哥1w工资真的不知道着么骗回来的，欢迎更多的同行大哥指导交流</li><li><a href="https://yhf7.github.io/" target="_blank" rel="noopener">欢迎进入我的博客</a>：<a href="https://yhf7.github.io/" target="_blank" rel="noopener">https://yhf7.github.io/</a></li><li>如果有什么侵权的话，请及时添加小编微信以及qq也可以来告诉小编（905477376微信qq通用），谢谢！</li></ul>]]></content>
    
    <summary type="html">
    
      
      
        &lt;link rel=&quot;stylesheet&quot; class=&quot;aplayer-secondary-style-marker&quot; href=&quot;/assets/css/APlayer.min.css&quot;&gt;&lt;script src=&quot;/assets/js/APlayer.min.js&quot; cla
      
    
    </summary>
    
      <category term="JavaScript" scheme="http://yoursite.com/categories/JavaScript/"/>
    
    
      <category term="js笔记" scheme="http://yoursite.com/tags/js%E7%AC%94%E8%AE%B0/"/>
    
  </entry>
  
  <entry>
    <title>koa 开发插件记录</title>
    <link href="http://yoursite.com/2019/05/27/koa%E5%BC%80%E5%8F%91%E6%8F%92%E4%BB%B6/"/>
    <id>http://yoursite.com/2019/05/27/koa开发插件/</id>
    <published>2019-05-27T02:41:40.579Z</published>
    <updated>2019-05-27T09:42:09.893Z</updated>
    
    <content type="html"><![CDATA[<link rel="stylesheet" class="aplayer-secondary-style-marker" href="/assets/css/APlayer.min.css"><script src="/assets/js/APlayer.min.js" class="aplayer-secondary-script-marker"></script><h1 id="前言"><a href="#前言" class="headerlink" title="前言"></a>前言</h1><ul><li>这几天着手使用koa搭建后端服务器</li><li>使用的一些插件记录下来以后方便使用</li><li>使用 koa的框架所以路由等插件我也不写了</li><li>有一些之前express用过的就不写了</li></ul><h1 id="工具-资料"><a href="#工具-资料" class="headerlink" title="工具/资料"></a>工具/资料</h1><ul><li>开发环境 mac os 10.13.3 node 10 npm 6.4</li><li>部署环境 阿里云 Centos 7 64位</li><li><a href="https://www.npmjs.com/" target="_blank" rel="noopener">参考网址NPM:</a> <a href="https://www.npmjs.com/" target="_blank" rel="noopener">https://www.npmjs.com/</a></li><li>node 8.0.0 / npm 6.9.0 / cnpm 6.0.0 </li></ul><h1 id="开始"><a href="#开始" class="headerlink" title="开始"></a>开始</h1><h3 id="解决跨域问题（koa2-cors）"><a href="#解决跨域问题（koa2-cors）" class="headerlink" title="解决跨域问题（koa2-cors）"></a>解决跨域问题（koa2-cors）</h3><ul><li><p>插件轻松解决跨域问题</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">$ cnpm i koa2-cors -S</span><br></pre></td></tr></table></figure></li><li><p>配置（括号里面的对象可写可不写）</p><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">const</span> cors = <span class="built_in">require</span>(<span class="string">'koa2-cors'</span>)</span><br><span class="line"><span class="comment">// 处理跨域问题</span></span><br><span class="line">app.use(cors(&#123;</span><br><span class="line">  exposeHeaders: [<span class="string">'WWW-Authenticate'</span>, <span class="string">'Server-Authorization'</span>, <span class="string">'Date'</span>],</span><br><span class="line">  maxAge: <span class="number">100</span>,</span><br><span class="line">  credentials: <span class="literal">true</span>,</span><br><span class="line">  allowMethods: [<span class="string">'GET'</span>, <span class="string">'POST'</span>, <span class="string">'OPTIONS'</span>],</span><br><span class="line">  allowHeaders: [<span class="string">'Content-Type'</span>, <span class="string">'Authorization'</span>, <span class="string">'Accept'</span>, <span class="string">'X-Custom-Header'</span>, <span class="string">'anonymous'</span>],</span><br><span class="line">&#125;));</span><br></pre></td></tr></table></figure></li></ul><h3 id="es6转es5"><a href="#es6转es5" class="headerlink" title="es6转es5"></a>es6转es5</h3><ol><li><p>插件加配置解决es6烦恼（node9以上的就没有这个烦恼）</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">$ cnpm i babel-plugin-transform-es2015-modules-commonjs babel-register -S</span><br></pre></td></tr></table></figure></li><li><p>配置(引入插件输出入口文件,新建start.js文件)</p><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><span class="line"><span class="built_in">require</span>(<span class="string">'babel-register'</span>)</span><br><span class="line">  (</span><br><span class="line">    &#123;</span><br><span class="line">      plugins: [<span class="string">'babel-plugin-transform-es2015-modules-commonjs'</span>],</span><br><span class="line">    &#125;</span><br><span class="line">  )</span><br><span class="line"></span><br><span class="line"><span class="built_in">module</span>.exports = <span class="built_in">require</span>(<span class="string">'./www.js'</span>)</span><br></pre></td></tr></table></figure></li><li><p>改变启动package.json文件<br><img src="/koa/p1.png" alt="koa"></p></li></ol><h3 id="处理原生node还是koa都无法解析request的body（post传值解析）"><a href="#处理原生node还是koa都无法解析request的body（post传值解析）" class="headerlink" title="处理原生node还是koa都无法解析request的body（post传值解析）"></a>处理原生node还是koa都无法解析request的body（post传值解析）</h3><ol><li><p>安装插件</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">$ cnpm i koa-body koa-bodyparser -S</span><br></pre></td></tr></table></figure></li><li><p>配置</p><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">const</span> koaBody = <span class="built_in">require</span>(<span class="string">'koa-body'</span>)</span><br><span class="line"><span class="keyword">const</span> bodyparser = <span class="built_in">require</span>(<span class="string">'koa-bodyparser'</span>)</span><br><span class="line"></span><br><span class="line">app.use(koaBody()).use(bodyparser(&#123;</span><br><span class="line">  enableTypes:[<span class="string">'json'</span>, <span class="string">'form'</span>, <span class="string">'text'</span>]</span><br><span class="line">&#125;))</span><br></pre></td></tr></table></figure></li><li><p>使用 (直接请求request里面的body就可以了，会以json格式输出)</p><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line">router.get(<span class="string">'/'</span>, <span class="keyword">async</span> (ctx, next) =&gt; &#123;</span><br><span class="line">    ctx.body = &#123;</span><br><span class="line">      <span class="string">"body"</span>: ctx.request.body</span><br><span class="line">    &#125;</span><br><span class="line">  &#125;)</span><br></pre></td></tr></table></figure></li></ol><h3 id="session-数据缓存-mongodb"><a href="#session-数据缓存-mongodb" class="headerlink" title="session 数据缓存(mongodb)"></a>session 数据缓存(mongodb)</h3><ol><li><p>安装插件 </p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">$ sudo cnpm i koa-session-minimal koa-mongo-session -S</span><br></pre></td></tr></table></figure></li><li><p>配置</p></li></ol><ul><li><p>config/default.js</p><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">'use strict'</span>;</span><br><span class="line"></span><br><span class="line"><span class="built_in">module</span>.exports = &#123;</span><br><span class="line">  <span class="comment">// port: normalizePort(process.env.PORT || '3000'),</span></span><br><span class="line">  port: <span class="built_in">parseInt</span>(process.env.PORT, <span class="number">10</span>) || <span class="number">3000</span>,</span><br><span class="line">  url: <span class="string">'mongodb://localhost:27017/koa-elm'</span>,</span><br><span class="line">  session: &#123;</span><br><span class="line">    name: <span class="string">'SID'</span>,</span><br><span class="line">    secret: <span class="string">'SID'</span>,</span><br><span class="line">    cookie: &#123;</span><br><span class="line">      httpOnly: <span class="literal">true</span>,</span><br><span class="line">      secure: <span class="literal">false</span>,</span><br><span class="line">      maxAge: <span class="number">365</span> * <span class="number">24</span> * <span class="number">60</span> * <span class="number">60</span> * <span class="number">1000</span>,</span><br><span class="line">    &#125;</span><br><span class="line">  &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure></li><li><p>app.js</p><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">// 配置文件</span></span><br><span class="line"><span class="keyword">import</span> config <span class="keyword">from</span> <span class="string">'./config/default'</span></span><br><span class="line"><span class="keyword">var</span> session = <span class="built_in">require</span>(<span class="string">'koa-session-minimal'</span>);</span><br><span class="line"><span class="keyword">var</span> mongoStore = <span class="built_in">require</span>(<span class="string">'koa-mongo-session'</span>);</span><br><span class="line"></span><br><span class="line">app.use(session(&#123;</span><br><span class="line">  name: config.session.name,</span><br><span class="line">  secret: config.session.secret,</span><br><span class="line">  resave: <span class="literal">true</span>,</span><br><span class="line">  saveUninitialized: <span class="literal">false</span>,</span><br><span class="line">  cookie: config.session.cookie,</span><br><span class="line">  store: mongoStore(&#123;</span><br><span class="line">    mongo: config.url,</span><br><span class="line">    expiration: <span class="number">1000</span> * <span class="number">60</span> * <span class="number">60</span> * <span class="number">24</span> * <span class="number">14</span></span><br><span class="line">  &#125;) </span><br><span class="line">&#125;))</span><br></pre></td></tr></table></figure></li></ul><ol start="3"><li>使用<figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line">router.get(<span class="string">'/'</span>, <span class="keyword">async</span> (ctx, next) =&gt; &#123;</span><br><span class="line">  <span class="built_in">console</span>.log(ctx.session.admin_id) <span class="comment">// 取</span></span><br><span class="line">    ctx.session.admin_id = <span class="string">'2'</span> <span class="comment">// 存</span></span><br><span class="line">  &#125;)</span><br></pre></td></tr></table></figure></li></ol><p><img src="/koa/p2.png" alt="koa"></p>]]></content>
    
    <summary type="html">
    
      
      
        &lt;link rel=&quot;stylesheet&quot; class=&quot;aplayer-secondary-style-marker&quot; href=&quot;/assets/css/APlayer.min.css&quot;&gt;&lt;script src=&quot;/assets/js/APlayer.min.js&quot; cla
      
    
    </summary>
    
      <category term="Nodejs" scheme="http://yoursite.com/categories/Nodejs/"/>
    
    
      <category term="Nodejs笔记" scheme="http://yoursite.com/tags/Nodejs%E7%AC%94%E8%AE%B0/"/>
    
  </entry>
  
  <entry>
    <title>koa 快速形成开发环境(koa-generator)</title>
    <link href="http://yoursite.com/2019/05/24/koa%E5%BF%AB%E9%80%9F%E5%BD%A2%E6%88%90%E5%BC%80%E5%8F%91%E7%8E%AF%E5%A2%83/"/>
    <id>http://yoursite.com/2019/05/24/koa快速形成开发环境/</id>
    <published>2019-05-24T05:29:09.657Z</published>
    <updated>2019-05-24T06:02:14.887Z</updated>
    
    <content type="html"><![CDATA[<link rel="stylesheet" class="aplayer-secondary-style-marker" href="/assets/css/APlayer.min.css"><script src="/assets/js/APlayer.min.js" class="aplayer-secondary-script-marker"></script><h1 id="前言"><a href="#前言" class="headerlink" title="前言"></a>前言</h1><ul><li>写过node的人都知道，express这个轻量级web框架</li><li>但是koa是express原班人马打造，更轻量更容易拓展的流行框架</li><li>集成了一些 express 风格的中间件，不需要手动去写，省时省力</li><li>支持es6，7语法等</li><li>如何快速搭建开发环境呢？</li><li>vue有vue-cli ，koa也有koa-generator脚手架</li><li>我是mac 所以每次都加sudo 这个权限问题 win不用加</li></ul><h1 id="工具-资料"><a href="#工具-资料" class="headerlink" title="工具/资料"></a>工具/资料</h1><ul><li>系统 Mac Os 10.13.3</li><li>npm 6.4.1</li><li>node 10.13.0</li></ul><h1 id="开始"><a href="#开始" class="headerlink" title="开始"></a>开始</h1><h3 id="1-全局安装脚手架"><a href="#1-全局安装脚手架" class="headerlink" title="1. 全局安装脚手架"></a>1. 全局安装脚手架</h3><ul><li>npm cnpm yarn都可以<figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">$ sudo cnpm i -g koa-generator</span><br></pre></td></tr></table></figure></li></ul><p><img src="/koa/k1.png" alt="koa"></p><h3 id="2-搭建项目"><a href="#2-搭建项目" class="headerlink" title="2. 搭建项目"></a>2. 搭建项目</h3><ul><li>由于koa有两个版本所以生成的用法也不一样的,同样我们生成个项目明叫koaPro的看看(这里我直接连写了)<h4 id="koa-v1-开启命令："><a href="#koa-v1-开启命令：" class="headerlink" title="koa v1 开启命令："></a>koa v1 开启命令：</h4><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">$ sudo koa koaPro &amp;&amp; <span class="built_in">cd</span> koaPro &amp;&amp; sudo cnpm i</span><br></pre></td></tr></table></figure></li></ul><h4 id="koa-v2-开启命令："><a href="#koa-v2-开启命令：" class="headerlink" title="koa v2 开启命令："></a>koa v2 开启命令：</h4><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">$ sudo koa2 koaPro &amp;&amp; <span class="built_in">cd</span> koaPro &amp;&amp; sudo cnpm i</span><br></pre></td></tr></table></figure><p><img src="/koa/k2.png" alt="koa"></p><h3 id="3-启动koa"><a href="#3-启动koa" class="headerlink" title="3. 启动koa"></a>3. 启动koa</h3><ul><li>默认3000端口<figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">$ sudo npm run start</span><br></pre></td></tr></table></figure></li></ul><p><img src="/koa/k3.png" alt="koa"></p><h1 id="后记"><a href="#后记" class="headerlink" title="后记"></a>后记</h1><ul><li>koa 快速开启项目就说到这了，这几天会使用koa搭后端服务，欢迎业界大佬交流学习</li><li><a href="https://yhf7.github.io/" target="_blank" rel="noopener">欢迎进入我的博客</a>：<a href="https://yhf7.github.io/" target="_blank" rel="noopener">https://yhf7.github.io/</a></li><li>如果有什么侵权的话，请及时添加小编微信以及qq也可以来告诉小编（905477376微信qq通用），谢谢！</li></ul>]]></content>
    
    <summary type="html">
    
      
      
        &lt;link rel=&quot;stylesheet&quot; class=&quot;aplayer-secondary-style-marker&quot; href=&quot;/assets/css/APlayer.min.css&quot;&gt;&lt;script src=&quot;/assets/js/APlayer.min.js&quot; cla
      
    
    </summary>
    
      <category term="Nodejs" scheme="http://yoursite.com/categories/Nodejs/"/>
    
    
      <category term="Nodejs笔记" scheme="http://yoursite.com/tags/Nodejs%E7%AC%94%E8%AE%B0/"/>
    
  </entry>
  
  <entry>
    <title>Vue 阻止浏览器点击回退</title>
    <link href="http://yoursite.com/2019/05/19/vue%E9%98%BB%E6%AD%A2%E6%B5%8F%E8%A7%88%E5%99%A8%E5%9B%9E%E9%80%80/"/>
    <id>http://yoursite.com/2019/05/19/vue阻止浏览器回退/</id>
    <published>2019-05-19T01:48:19.306Z</published>
    <updated>2019-05-19T02:12:12.466Z</updated>
    
    <content type="html"><![CDATA[<link rel="stylesheet" class="aplayer-secondary-style-marker" href="/assets/css/APlayer.min.css"><script src="/assets/js/APlayer.min.js" class="aplayer-secondary-script-marker"></script><h1 id="前言"><a href="#前言" class="headerlink" title="前言"></a>前言</h1><ul><li>在我们的开发过程中有时候一些页面并不喜欢被回退</li><li>也不希望被退出去其他页面，比如登录了等就不给回退到登录页面等</li><li>这时候我们应该着么做呢？第一时间我想起了路由守护</li><li>每一次的切换都会进入到路由，但是具体着么做呢？我也借鉴了网上别人的方法</li><li>现在实现了我把它记录下来</li></ul><h1 id="工具-资料"><a href="#工具-资料" class="headerlink" title="工具/资料"></a>工具/资料</h1><ul><li>系统 Mac os 10.13.3</li><li>开发工具 vs code</li><li>开发项目 vue</li></ul><h1 id="开始"><a href="#开始" class="headerlink" title="开始"></a>开始</h1><h3 id="第一步、锁定需要禁止回退的路由页面"><a href="#第一步、锁定需要禁止回退的路由页面" class="headerlink" title="第一步、锁定需要禁止回退的路由页面"></a>第一步、锁定需要禁止回退的路由页面</h3><ul><li>给需要守护的路由在 meta 添加 allowBack</li><li>只要你那个页面不想让他回退了那你就添加就可以了</li></ul><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">const</span> Login = <span class="function"><span class="params">()</span>=&gt;</span> <span class="keyword">import</span>( <span class="comment">/* webpackChunkName: "login-page" */</span> <span class="string">'@/pages/Login'</span>)<span class="comment">//登录</span></span><br><span class="line"></span><br><span class="line"><span class="keyword">export</span> <span class="keyword">default</span> [</span><br><span class="line">    &#123;</span><br><span class="line">        path: <span class="string">'/'</span>,</span><br><span class="line">        name: <span class="string">'Login'</span>,</span><br><span class="line">        component: Login,</span><br><span class="line">        meta: &#123; <span class="attr">allowBack</span>: <span class="literal">false</span> &#125;</span><br><span class="line">    &#125;</span><br><span class="line">]</span><br></pre></td></tr></table></figure><p><img src="/Vue/zz1.png" alt="zz"></p><h3 id="第二步、配置全局路由守护"><a href="#第二步、配置全局路由守护" class="headerlink" title="第二步、配置全局路由守护"></a>第二步、配置全局路由守护</h3><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">// 全局路由守护</span></span><br><span class="line">router.beforeEach(<span class="function">(<span class="params">to,<span class="keyword">from</span>,next</span>) =&gt;</span> &#123;</span><br><span class="line">    <span class="keyword">let</span> allowBack = <span class="literal">true</span>    <span class="comment">//    给个默认值true</span></span><br><span class="line">    <span class="comment">// 有定义的就走路由定义了的数据</span></span><br><span class="line">    <span class="keyword">if</span> (to.meta.allowBack !== <span class="literal">undefined</span>) &#123;</span><br><span class="line">        allowBack = to.meta.allowBack</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">if</span> (!allowBack) &#123;</span><br><span class="line">        history.pushState(<span class="literal">null</span>, <span class="literal">null</span>, location.href)</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="comment">// vuex存储数据</span></span><br><span class="line">    store.dispatch(<span class="string">'updateAppSetting'</span>, &#123;     <span class="comment">//   updateAppSetting 只是store里面的一个action， 用来改变store里的allowBack的值的，具体怎么改这个值 要根据各位的实际情况而定</span></span><br><span class="line">        allowBack: allowBack</span><br><span class="line">    &#125;)</span><br><span class="line"></span><br><span class="line">    <span class="comment">// 登录守护</span></span><br><span class="line">    <span class="keyword">if</span> (to.name != <span class="string">'Login'</span> &amp;&amp; (vuex.getters.getLoginKey()) != <span class="string">'yhfkey'</span>) &#123;</span><br><span class="line">        next(&#123;<span class="attr">name</span>: <span class="string">'Login'</span>&#125;)</span><br><span class="line">    &#125;</span><br><span class="line">    next()</span><br><span class="line">&#125;)</span><br></pre></td></tr></table></figure><h3 id="第三步、编写-vuex"><a href="#第三步、编写-vuex" class="headerlink" title="第三步、编写 vuex"></a>第三步、编写 vuex</h3><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">import</span> Vue <span class="keyword">from</span> <span class="string">'vue'</span></span><br><span class="line"><span class="keyword">import</span> Vuex <span class="keyword">from</span> <span class="string">'vuex'</span></span><br><span class="line">Vue.use(Vuex)</span><br><span class="line"></span><br><span class="line"><span class="keyword">const</span> state = &#123;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="comment">// mutations</span></span><br><span class="line"><span class="keyword">const</span> mutations = &#123;</span><br><span class="line">    updateAppSetting(state,status) &#123;</span><br><span class="line">        state.allowBack = status.allowBack</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="comment">// actions</span></span><br><span class="line"><span class="keyword">const</span> actions = &#123;</span><br><span class="line">    updateAppSetting(&#123;commit&#125;, status)&#123;</span><br><span class="line">        commit(<span class="string">'updateAppSetting'</span>, status)</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="keyword">export</span> <span class="keyword">default</span> <span class="keyword">new</span> Vuex.Store(&#123;</span><br><span class="line">    state,</span><br><span class="line">    mutations,</span><br><span class="line">    actions</span><br><span class="line">&#125;)</span><br></pre></td></tr></table></figure><h3 id="第四步、在-App-vue-编写最后的守护"><a href="#第四步、在-App-vue-编写最后的守护" class="headerlink" title="第四步、在 App.vue 编写最后的守护"></a>第四步、在 App.vue 编写最后的守护</h3><ul><li>在 app 的 mouted 编写 onpopstate</li></ul><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><span class="line">mounted() &#123;</span><br><span class="line">  <span class="built_in">window</span>.onpopstate = <span class="function"><span class="params">()</span> =&gt;</span> &#123;</span><br><span class="line">    <span class="keyword">if</span> (!<span class="keyword">this</span>.allowBack) &#123;</span><br><span class="line">      <span class="comment">//    这个allowBack 是存在vuex里面的变量</span></span><br><span class="line">      history.go(<span class="number">1</span>);</span><br><span class="line">    &#125;</span><br><span class="line">  &#125;;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h1 id="后记"><a href="#后记" class="headerlink" title="后记"></a>后记</h1><ul><li>全局路由守护拒绝浏览器回退就说到这里了，欢迎更多的同行大哥指导交流</li><li><a href="https://yhf7.github.io/" target="_blank" rel="noopener">欢迎进入我的博客</a>：<a href="https://yhf7.github.io/" target="_blank" rel="noopener">https://yhf7.github.io/</a></li><li>如果有什么侵权的话，请及时添加小编微信以及qq也可以来告诉小编（905477376微信qq通用），谢谢！</li></ul>]]></content>
    
    <summary type="html">
    
      
      
        &lt;link rel=&quot;stylesheet&quot; class=&quot;aplayer-secondary-style-marker&quot; href=&quot;/assets/css/APlayer.min.css&quot;&gt;&lt;script src=&quot;/assets/js/APlayer.min.js&quot; cla
      
    
    </summary>
    
      <category term="Vue" scheme="http://yoursite.com/categories/Vue/"/>
    
    
      <category term="Vue笔记" scheme="http://yoursite.com/tags/Vue%E7%AC%94%E8%AE%B0/"/>
    
  </entry>
  
  <entry>
    <title>2019年5月开发心得</title>
    <link href="http://yoursite.com/2019/05/14/2019-05-14%E5%BC%80%E5%8F%91%E5%BF%83%E5%BE%97/"/>
    <id>http://yoursite.com/2019/05/14/2019-05-14开发心得/</id>
    <published>2019-05-14T14:35:28.714Z</published>
    <updated>2019-05-14T15:04:28.661Z</updated>
    
    <content type="html"><![CDATA[<link rel="stylesheet" class="aplayer-secondary-style-marker" href="/assets/css/APlayer.min.css"><script src="/assets/js/APlayer.min.js" class="aplayer-secondary-script-marker"></script><h3 id="近期开发汇总"><a href="#近期开发汇总" class="headerlink" title="近期开发汇总"></a>近期开发汇总</h3><p>最近都是在写程序测试程序修复bug，在不断的写代码的过程中确实慢慢的成长起来了，遇到了很多让我很苦恼的问题随着时间的流逝搜索引擎的强大朋友的经验，都能把问题迎刃而解，<br>项目重构结束测试也接近尾声了，项目交付当被用户发现bug发来一声声质疑时，我真的无地自容作为一个第一次跟着团队做项目，真正的让用户使用自己的产品，当我看到别人对我的质疑<br>时我是非常的愤怒，不是愤怒别人是愤怒自己为什么那么疏忽，为什么没有认真的检查好为什么为出现这样的错误，一声声的为什么映入我的心中，当我收到这一份质疑时我感到非常的耻辱<br>并不是实力不过关完全就是态度的问题，没有很细心很认真的去测试遗留残缺bug流入客户手中，感动非常的抱歉！自我检讨自我反省以后不再出现这样的事情，这种感觉真的非常不爽！<br>还好有那么包容的团队，出现问题都没有责怪我也只是说大家都疏忽了尽快解决就好，团队大哥也安慰我习惯就会这样的事常有发生的，不辜负大家的期望得继续努力！</p><h3 id="今日总结"><a href="#今日总结" class="headerlink" title="今日总结"></a>今日总结</h3><p>今天很开心也很伤心，在编写投票系统时，我的服务器和数据库出问题了，迫不得已重置数据库最后数据库的数据都没了得重新搭起来，服务器也受到了代理地址影响起了一些错误，<br>通过2小时的奋斗终于解决了这个问题，另外很开心的是仿写elm后台系统，投票系统，签到系统今天都完成了，当我正开心的时候又发现了bug，一天天的就不让我好过啊，这不是我应该<br>承受的一天哎，作为一个开发人员只能默默的接受这一切那就去修复bug以免又被一声声的质疑，当我觉得我的服务器可能不行时今晚给了我很大的惊喜，同时间几百人使用我的小程序<br>测试我的投票系统，服务器显示还是可以的，虽然高峰期还是有点压力起码没有崩溃还是很棒棒的，这是我第一次向那么多人展示我的作品，虽然很简易，但是我很开心大家都愿意点开<br>为我投一票测试一下，最后是有接近1000人访问了我的程序，我已经很满足了</p><h3 id="后续计划"><a href="#后续计划" class="headerlink" title="后续计划"></a>后续计划</h3><ol><li>优化签到程序</li><li>完成elm 后端编写</li><li>重构签到程序后台</li><li>坚持阅读JavaScript高级程序设计3</li><li>注意身体健康，不熬夜，中午午休（尽力完成这个比看书还难的任务）</li></ol>]]></content>
    
    <summary type="html">
    
      
      
        &lt;link rel=&quot;stylesheet&quot; class=&quot;aplayer-secondary-style-marker&quot; href=&quot;/assets/css/APlayer.min.css&quot;&gt;&lt;script src=&quot;/assets/js/APlayer.min.js&quot; cla
      
    
    </summary>
    
      <category term="个人" scheme="http://yoursite.com/categories/%E4%B8%AA%E4%BA%BA/"/>
    
    
      <category term="个人" scheme="http://yoursite.com/tags/%E4%B8%AA%E4%BA%BA/"/>
    
  </entry>
  
  <entry>
    <title>实现简易 投票系统 （小程序+Tp5+vue）</title>
    <link href="http://yoursite.com/2019/05/14/%E5%B0%8F%E7%A8%8B%E5%BA%8F+tp5+vue/"/>
    <id>http://yoursite.com/2019/05/14/小程序+tp5+vue/</id>
    <published>2019-05-14T14:05:52.146Z</published>
    <updated>2019-05-19T00:45:29.225Z</updated>
    
    <content type="html"><![CDATA[<link rel="stylesheet" class="aplayer-secondary-style-marker" href="/assets/css/APlayer.min.css"><script src="/assets/js/APlayer.min.js" class="aplayer-secondary-script-marker"></script><h1 id="前言"><a href="#前言" class="headerlink" title="前言"></a>前言</h1><ul><li>好久没有更新博客</li><li>一直忙于项目测试修复bug</li><li>今日收到我哥的需求，想做一个现场投票系统</li><li>我就想着做个简单的小程序再用vue配合插件做个实时图标就可以了</li><li>在这期间真的是一波三折啊，数据库报错被迫重置，服务器出问题，还好都解决了</li><li>废话不多说进入今天的简易投票系统</li></ul><h1 id="工具-材料"><a href="#工具-材料" class="headerlink" title="工具/材料"></a>工具/材料</h1><ul><li>开发系统 Mac OS 10.13.3</li><li>开发工具 Vs code 、phpStorm、MySQL、Postman、微信开发者工具</li><li>线上系统 阿里云 Centos 7 64位</li><li>线上 apache环境 php 、mysql环境搭建</li><li>nginx反向代理 https</li><li>域名以及备案</li><li>Vue-cli 、 Tp5</li><li>图标插件 echarts <a href="https://echarts.baidu.com/examples/" target="_blank" rel="noopener">https://echarts.baidu.com/examples/</a></li><li>源码 <a href="https://gitee.com/yhf7" target="_blank" rel="noopener">https://gitee.com/yhf7</a> </li></ul><h1 id="开始"><a href="#开始" class="headerlink" title="开始"></a>开始</h1><h3 id="TP5编写后端api-（没啥说的直接下源码看源码：）"><a href="#TP5编写后端api-（没啥说的直接下源码看源码：）" class="headerlink" title="TP5编写后端api （没啥说的直接下源码看源码：）"></a><a href="https://gitee.com/yhf7/voting_system_tp5_backend" target="_blank" rel="noopener">TP5编写后端api</a> （没啥说的直接下源码看<a href="https://gitee.com/yhf7" target="_blank" rel="noopener">源码：</a>）</h3><h4 id="业务"><a href="#业务" class="headerlink" title="业务"></a>业务</h4><ol><li>编写token、验证token</li><li>验证是否投票，投票</li></ol><hr><h4 id="使用tp5做了什么"><a href="#使用tp5做了什么" class="headerlink" title="使用tp5做了什么"></a>使用tp5做了什么</h4><ol><li>验证数据层</li><li>模型操作数据库</li><li>业务逻辑层</li><li>全局异常处理机制</li><li>挂载后台页面</li><li>数据存储</li></ol><h3 id="小程序"><a href="#小程序" class="headerlink" title="小程序"></a><a href="https://gitee.com/yhf7/small_procedure_voting_system" target="_blank" rel="noopener">小程序</a></h3><ul><li>简单的单选以及api请求</li><li>页面<br><img src="/qz/x1.png" alt="qz"></li><li>api请求封装<figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">/**</span></span><br><span class="line"><span class="comment">   * 请求封装</span></span><br><span class="line"><span class="comment">   * 当 noRefech 为 true， 不做未授权重做机制</span></span><br><span class="line"><span class="comment">   */</span></span><br><span class="line">  request (params,noRefetch) &#123;</span><br><span class="line">    <span class="keyword">var</span> that = <span class="keyword">this</span>;</span><br><span class="line">    <span class="comment">// url内外拼接</span></span><br><span class="line">    <span class="keyword">var</span> url = <span class="keyword">this</span>.baseRequestUrl + params.url;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">if</span> (!params.type) &#123;</span><br><span class="line">      params.type = <span class="string">'GET'</span></span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    wx.request(&#123;</span><br><span class="line">      url: url,</span><br><span class="line">      data: params.data,</span><br><span class="line">      method: params.type,</span><br><span class="line">      header: &#123;</span><br><span class="line">        <span class="string">'content-type'</span>:<span class="string">'application/json'</span>,</span><br><span class="line">        <span class="string">'token'</span>: wx.getStorageSync(<span class="string">'token'</span>)</span><br><span class="line">      &#125;,</span><br><span class="line">      success: <span class="function"><span class="params">res</span> =&gt;</span> &#123;</span><br><span class="line">        <span class="keyword">var</span> code = res.statusCode.toString();</span><br><span class="line">        <span class="keyword">var</span> startChar = code.charAt(<span class="number">0</span>);</span><br><span class="line">        <span class="keyword">if</span> (startChar == <span class="string">'2'</span>) &#123;</span><br><span class="line">          <span class="comment">// 判断函数，存在才调用</span></span><br><span class="line">          params.sCallback &amp;&amp; params.sCallback(res.data);</span><br><span class="line">        &#125; <span class="keyword">else</span> &#123;</span><br><span class="line">            <span class="comment">// AOP</span></span><br><span class="line">            <span class="comment">// 401 无token，重新调用</span></span><br><span class="line">            <span class="keyword">if</span> (code == <span class="string">'401'</span>) &#123;</span><br><span class="line">              <span class="comment">// 避免无限循环，默认false进入，第二次调用时返回ture就不会再次去调用死循环</span></span><br><span class="line">              <span class="keyword">if</span> (!noRefetch) &#123;</span><br><span class="line">                that._refetch(params);</span><br><span class="line">              &#125;</span><br><span class="line">            &#125;</span><br><span class="line">          <span class="keyword">if</span> (noRefetch) &#123;</span><br><span class="line">            params.eCallback &amp;&amp; params.eCallback(res.data);</span><br><span class="line">          &#125;</span><br><span class="line">        &#125;</span><br><span class="line">      &#125;,</span><br><span class="line">      fail: <span class="function"><span class="params">err</span> =&gt;</span> &#123;</span><br><span class="line">        <span class="built_in">console</span>.log(err);</span><br><span class="line">      &#125;</span><br><span class="line">    &#125;)</span><br><span class="line">  &#125;</span><br></pre></td></tr></table></figure></li></ul><p><img src="/qz/x2.png" alt="qz"></p><ul><li>api调用以及单选业务处理<br><img src="/qz/x3.png" alt="qz"></li></ul><h3 id="vue后台"><a href="#vue后台" class="headerlink" title="vue后台"></a><a href="https://gitee.com/yhf7/vue_voting_system_background" target="_blank" rel="noopener">vue后台</a></h3><ul><li>就是简单的图标实时获取投票数据</li><li><p>安装插件</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">$ sudo cnpm i echarts -S</span><br></pre></td></tr></table></figure></li><li><p>页面源码</p><figure class="highlight html"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br></pre></td><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">template</span>&gt;</span></span><br><span class="line">  <span class="tag">&lt;<span class="name">div</span> <span class="attr">class</span>=<span class="string">"visitorpie"</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">div</span> <span class="attr">id</span>=<span class="string">"visitorpie"</span> <span class="attr">class</span> <span class="attr">style</span>=<span class="string">"width: 90%;height:450px;"</span>&gt;</span><span class="tag">&lt;/<span class="name">div</span>&gt;</span></span><br><span class="line">  <span class="tag">&lt;/<span class="name">div</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">template</span>&gt;</span></span><br><span class="line"></span><br><span class="line"><span class="tag">&lt;<span class="name">script</span>&gt;</span><span class="undefined"></span></span><br><span class="line"><span class="javascript"><span class="keyword">var</span> echarts = <span class="built_in">require</span>(<span class="string">'echarts'</span>);</span></span><br><span class="line"><span class="javascript"><span class="keyword">import</span> API <span class="keyword">from</span> <span class="string">'@/api'</span></span></span><br><span class="line"><span class="javascript"><span class="keyword">export</span> <span class="keyword">default</span> &#123;</span></span><br><span class="line"><span class="undefined">  mounted() &#123;</span></span><br><span class="line"><span class="javascript">    <span class="keyword">this</span>.myChart = echarts.init(<span class="built_in">document</span>.getElementById(<span class="string">"visitorpie"</span>));</span></span><br><span class="line"><span class="javascript">    <span class="keyword">this</span>.initData();</span></span><br><span class="line"><span class="javascript">    setInterval(<span class="function"><span class="params">()</span> =&gt;</span> &#123;</span></span><br><span class="line"><span class="javascript">      API.geDate().then(<span class="function"><span class="params">res</span> =&gt;</span> &#123;</span></span><br><span class="line"><span class="javascript">      <span class="keyword">let</span> arr = []</span></span><br><span class="line"><span class="javascript">      <span class="keyword">for</span> (<span class="keyword">const</span> key <span class="keyword">in</span> res) &#123;</span></span><br><span class="line"><span class="undefined">        arr.push(res[key]);</span></span><br><span class="line"><span class="undefined">      &#125;</span></span><br><span class="line"><span class="javascript">      <span class="keyword">this</span>.initData(arr)</span></span><br><span class="line"><span class="undefined">    &#125;)</span></span><br><span class="line"><span class="undefined">    &#125;, 3000);</span></span><br><span class="line"><span class="undefined">  &#125;,</span></span><br><span class="line"><span class="undefined">  methods: &#123;</span></span><br><span class="line"><span class="undefined">    initData(arr) &#123;</span></span><br><span class="line"><span class="javascript">      <span class="keyword">var</span> option = &#123;</span></span><br><span class="line"><span class="undefined">            title: &#123;</span></span><br><span class="line"><span class="javascript">                text: <span class="string">'第八届广东文艺职业学院美术系班服大赛最佳人气榜'</span></span></span><br><span class="line"><span class="undefined">            &#125;,</span></span><br><span class="line"><span class="undefined">            tooltip: &#123;&#125;,</span></span><br><span class="line"><span class="undefined">            legend: &#123;</span></span><br><span class="line"><span class="javascript">                data:[<span class="string">'票数'</span>]</span></span><br><span class="line"><span class="undefined">            &#125;,</span></span><br><span class="line"><span class="undefined">            xAxis: &#123;</span></span><br><span class="line"><span class="javascript">                data: [<span class="string">"18会展班"</span>,<span class="string">"18工艺班"</span>,<span class="string">"18计美1班"</span>,<span class="string">"18计美2班"</span>,<span class="string">"18配饰班"</span>,<span class="string">"18陶艺班"</span>]</span></span><br><span class="line"><span class="undefined">            &#125;,</span></span><br><span class="line"><span class="undefined">            yAxis: &#123;&#125;,</span></span><br><span class="line"><span class="undefined">            series: [&#123;</span></span><br><span class="line"><span class="javascript">                name: <span class="string">'票数'</span>,</span></span><br><span class="line"><span class="javascript">                type: <span class="string">'bar'</span>,</span></span><br><span class="line"><span class="undefined">                data: arr</span></span><br><span class="line"><span class="undefined">            &#125;]</span></span><br><span class="line"><span class="undefined">        &#125;;</span></span><br><span class="line"><span class="undefined"></span></span><br><span class="line"><span class="javascript">      <span class="keyword">this</span>.myChart.setOption(option);</span></span><br><span class="line"><span class="undefined">    &#125;</span></span><br><span class="line"><span class="undefined">  &#125;</span></span><br><span class="line"><span class="undefined">&#125;;</span></span><br><span class="line"><span class="undefined"></span><span class="tag">&lt;/<span class="name">script</span>&gt;</span></span><br><span class="line"></span><br><span class="line"><span class="tag">&lt;<span class="name">style</span> <span class="attr">lang</span>=<span class="string">"less"</span>&gt;</span><span class="undefined"></span></span><br><span class="line"><span class="undefined">@import "../assets/styles/mixin.less";</span></span><br><span class="line"><span class="undefined">.visitorpie &#123;</span></span><br><span class="line"><span class="undefined">  .fj("centeer");</span></span><br><span class="line"><span class="undefined">  margin-top: 20px;</span></span><br><span class="line"><span class="undefined">&#125;</span></span><br><span class="line"><span class="undefined"></span><span class="tag">&lt;/<span class="name">style</span>&gt;</span></span><br></pre></td></tr></table></figure></li><li><p>效果图<br><img src="/qz/h1.png" alt="qz"></p></li></ul><h4 id="打包放在tp5的public里面即可"><a href="#打包放在tp5的public里面即可" class="headerlink" title="打包放在tp5的public里面即可"></a>打包放在tp5的public里面即可</h4><h3 id="服务器-小程序后台数据效果图"><a href="#服务器-小程序后台数据效果图" class="headerlink" title="服务器/小程序后台数据效果图"></a>服务器/小程序后台数据效果图</h3><p><img src="/qz/h2.jpg" alt="qz"><br><img src="/qz/h3.jpg" alt="qz"><br><img src="/qz/h4.jpg" alt="qz"></p><h1 id="后记"><a href="#后记" class="headerlink" title="后记"></a>后记</h1><ul><li>这就是我帮我哥做的简易实时投票系统，望大家多多指教</li><li><a href="https://yhf7.github.io/" target="_blank" rel="noopener">欢迎进入我的博客</a>：<a href="https://yhf7.github.io/" target="_blank" rel="noopener">https://yhf7.github.io/</a></li><li>如果有什么侵权的话，请及时添加小编微信以及qq也可以来告诉小编（905477376微信qq通用），谢谢！</li></ul>]]></content>
    
    <summary type="html">
    
      
      
        &lt;link rel=&quot;stylesheet&quot; class=&quot;aplayer-secondary-style-marker&quot; href=&quot;/assets/css/APlayer.min.css&quot;&gt;&lt;script src=&quot;/assets/js/APlayer.min.js&quot; cla
      
    
    </summary>
    
      <category term="全栈案例" scheme="http://yoursite.com/categories/%E5%85%A8%E6%A0%88%E6%A1%88%E4%BE%8B/"/>
    
    
      <category term="全栈案例" scheme="http://yoursite.com/tags/%E5%85%A8%E6%A0%88%E6%A1%88%E4%BE%8B/"/>
    
  </entry>
  
  <entry>
    <title>VS Code 远程管理Linux文件（Remote Development）</title>
    <link href="http://yoursite.com/2019/05/04/VS%20Code%E8%BF%9C%E7%A8%8B%E7%AE%A1%E7%90%86%E8%BF%9C%E7%AB%AF%E6%96%87%E4%BB%B6%E5%A4%B9/"/>
    <id>http://yoursite.com/2019/05/04/VS Code远程管理远端文件夹/</id>
    <published>2019-05-04T04:00:36.140Z</published>
    <updated>2019-05-04T05:02:18.141Z</updated>
    
    <content type="html"><![CDATA[<link rel="stylesheet" class="aplayer-secondary-style-marker" href="/assets/css/APlayer.min.css"><script src="/assets/js/APlayer.min.js" class="aplayer-secondary-script-marker"></script><h1 id="前言"><a href="#前言" class="headerlink" title="前言"></a>前言</h1><ul><li>老实说我个人比较喜欢命令行多过界面化，所以我购买的服务器是CentOS7真的纯命令行</li><li>我也只是用了部署项目也没有说在上面开发，有时候使用vim小改一下</li><li>但是频繁大量的改就觉得第一个麻烦切来切去，第二个就是用起来真的没有那么方便</li><li>刚好看见vscode出了这么个插件</li><li>这个插件分为两个的 Remote Development 和 Remote VS Code （两个我都下了第二个没有第一个那么方便）</li><li>那我们就来走入远端控制的配置与享受中</li></ul><h1 id="工具"><a href="#工具" class="headerlink" title="工具"></a>工具</h1><ul><li>系统 Mac Os 10.13.3</li><li>服务器 CentOS 7 （阿里云学生机买的）</li><li>软件 VS Code insiders 这个正式版有没有具体我不清楚，Remote vs code这个是肯定都有的</li></ul><h1 id="开始"><a href="#开始" class="headerlink" title="开始"></a>开始</h1><h3 id="第一步、安装插件"><a href="#第一步、安装插件" class="headerlink" title="第一步、安装插件"></a>第一步、安装插件</h3><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">$ Remote Development <span class="comment"># (插件名称)</span></span><br></pre></td></tr></table></figure><p><img src="/ssh/s1.png" alt="ssh"></p><h3 id="第二步、配置插件"><a href="#第二步、配置插件" class="headerlink" title="第二步、配置插件"></a>第二步、配置插件</h3><p><img src="/ssh/s2.png" alt="ssh"><br><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment"># Read more about SSH config files: https://linux.die.net/man/5/ssh_config</span></span><br><span class="line">Host Cenos7 </span><br><span class="line">    HostName 119.23.75.150 <span class="comment"># 要连接服务器的地址</span></span><br><span class="line">    User root <span class="comment"># 连接服务器的名称</span></span><br><span class="line">    ForwardAgent yes</span><br><span class="line">    RemoteForward 52698 127.0.0.1:52698 <span class="comment"># 前面的是远端的端口 后面的是本地的，设置防火墙的要给端口权限</span></span><br><span class="line">    IdentityFile /Users/yhf/yhf.pem <span class="comment"># 密钥没有可以不写</span></span><br></pre></td></tr></table></figure></p><p><img src="/ssh/s3.png" alt="ssh"></p><h3 id="第三步、配置服务器-Linux"><a href="#第三步、配置服务器-Linux" class="headerlink" title="第三步、配置服务器(Linux)"></a>第三步、配置服务器(Linux)</h3><h4 id="重点：安装配置好重启一下vs-code"><a href="#重点：安装配置好重启一下vs-code" class="headerlink" title="重点：安装配置好重启一下vs code"></a>重点：安装配置好重启一下vs code</h4><hr><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line">$ wget https://raw.githubusercontent.com/sclukey/rmate-python/master/bin/rmate</span><br><span class="line"></span><br><span class="line">$ chmod +x ./rmate</span><br><span class="line"></span><br><span class="line">$ mv ./rmate /usr/<span class="built_in">local</span>/bin/rmate</span><br></pre></td></tr></table></figure><h3 id="第四步、启动连接"><a href="#第四步、启动连接" class="headerlink" title="第四步、启动连接"></a>第四步、启动连接</h3><ul><li>这个过程中会需要多次输入密码的</li><li>后面选择自己需要编辑的文件夹或文件<br><img src="/ssh/s4.png" alt="ssh"></li></ul><h3 id="第五步、编辑查看效果"><a href="#第五步、编辑查看效果" class="headerlink" title="第五步、编辑查看效果"></a>第五步、编辑查看效果</h3><p><img src="/ssh/s5.png" alt="ssh"><br><img src="/ssh/s6.png" alt="ssh"></p><h1 id="后记"><a href="#后记" class="headerlink" title="后记"></a>后记</h1><ul><li>vs code 管理远端文件就说到这了,整体来说还是不错的，就是密码输的有点多，希望能帮到有缘人</li><li><a href="https://yhf7.github.io/" target="_blank" rel="noopener">欢迎进入我的博客</a>：<a href="https://yhf7.github.io/" target="_blank" rel="noopener">https://yhf7.github.io/</a></li><li>如果有什么侵权的话，请及时添加小编微信以及qq也可以来告诉小编（905477376微信qq通用），谢谢！</li></ul>]]></content>
    
    <summary type="html">
    
      
      
        &lt;link rel=&quot;stylesheet&quot; class=&quot;aplayer-secondary-style-marker&quot; href=&quot;/assets/css/APlayer.min.css&quot;&gt;&lt;script src=&quot;/assets/js/APlayer.min.js&quot; cla
      
    
    </summary>
    
      <category term="插件" scheme="http://yoursite.com/categories/%E6%8F%92%E4%BB%B6/"/>
    
    
      <category term="插件" scheme="http://yoursite.com/tags/%E6%8F%92%E4%BB%B6/"/>
    
  </entry>
  
  <entry>
    <title>阿里云 Centos 7 安装/配置 Nginx  https</title>
    <link href="http://yoursite.com/2019/04/26/%E9%98%BF%E9%87%8C%E4%BA%91%E5%AE%89%E8%A3%85%E9%85%8D%E7%BD%AEnginx/"/>
    <id>http://yoursite.com/2019/04/26/阿里云安装配置nginx/</id>
    <published>2019-04-26T06:20:26.650Z</published>
    <updated>2019-04-26T09:14:42.828Z</updated>
    
    <content type="html"><![CDATA[<link rel="stylesheet" class="aplayer-secondary-style-marker" href="/assets/css/APlayer.min.css"><script src="/assets/js/APlayer.min.js" class="aplayer-secondary-script-marker"></script><h1 id="前言"><a href="#前言" class="headerlink" title="前言"></a>前言</h1><ul><li>前段时间配置了php环境的https，但是我的服务器不只是有php还有其他的后端</li><li>所以只好用nginx做一个全局的配置，而且配置的时候一直出问题</li><li>一开始我也是被多个代理卡了好久，事实证明nginx配置比单个配置方便很多的，因为Apache只可以给php等使用，但是如果我要给个node那就不行了</li><li>今天花了点时间把之前的删除了重新安装配置</li><li>不看我的看官网也是可以的：<a href="https://help.aliyun.com/knowledge_detail/95491.html?spm=a2c4g.11186623.2.9.678d4c07Jh6m7U" target="_blank" rel="noopener">点击前往</a></li></ul><h1 id="注意"><a href="#注意" class="headerlink" title="注意"></a>注意</h1><ol><li>如果你安装了的，可以选择清空再安装配置</li><li>如果配置了其他的https请关闭，我就是配置了apache的https所以关闭了</li><li>我这里是做了端口重定向，100端口是我Apache php的应用你们按需配置就好</li><li>关闭Apache 的方法是找到配置https 和ssl文件把443端口关闭，和80端口重定向关闭了</li><li>密钥放在nginx文件夹下的cert文件下自己创建的，这个如果不会看我之前php配置的那个<a href="https://yhf7.github.io/2019/04/18/%E9%98%BF%E9%87%8C%E4%BA%91Apache%E9%85%8D%E7%BD%AEhttps/" target="_blank" rel="noopener">php配置https</a></li></ol><h1 id="开始"><a href="#开始" class="headerlink" title="开始"></a>开始</h1><h3 id="查看并清除nginx-（未安装的不需要看）"><a href="#查看并清除nginx-（未安装的不需要看）" class="headerlink" title="查看并清除nginx （未安装的不需要看）"></a>查看并清除nginx （未安装的不需要看）</h3><ol><li>查看安装<figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">$ rpm -ql nginx</span><br></pre></td></tr></table></figure></li></ol><p><img src="/aly/ng1.png" alt="nginx"></p><ol start="2"><li>清除nginx<figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">$ yum remove nginx</span><br></pre></td></tr></table></figure></li></ol><p><img src="/aly/ng2.png" alt="nginx"></p><h3 id="安装"><a href="#安装" class="headerlink" title="安装"></a>安装</h3><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">$ yum -y install nginx</span><br></pre></td></tr></table></figure><p><img src="/aly/ng3.png" alt="nginx"></p><h3 id="配置-https-证书自己下不会的找我之前的php配置的去看-如果像我一样配置了apache的https的请自行关闭"><a href="#配置-https-证书自己下不会的找我之前的php配置的去看-如果像我一样配置了apache的https的请自行关闭" class="headerlink" title="配置 https (证书自己下不会的找我之前的php配置的去看,如果像我一样配置了apache的https的请自行关闭)"></a>配置 https (证书自己下不会的找我之前的php配置的去看,如果像我一样配置了apache的https的请自行关闭)</h3><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br><span class="line">64</span><br><span class="line">65</span><br><span class="line">66</span><br><span class="line">67</span><br><span class="line">68</span><br></pre></td><td class="code"><pre><span class="line">$ vim /etc/nginx/nginx.conf</span><br><span class="line"></span><br><span class="line">------------</span><br><span class="line">http &#123;</span><br><span class="line">    log_format  main  <span class="string">'$remote_addr - $remote_user [$time_local] "$request" '</span></span><br><span class="line">                      <span class="string">'$status $body_bytes_sent "$http_referer" '</span></span><br><span class="line">                      <span class="string">'"$http_user_agent" "$http_x_forwarded_for"'</span>;</span><br><span class="line"></span><br><span class="line">    access_log  /var/<span class="built_in">log</span>/nginx/access.log  main;</span><br><span class="line"></span><br><span class="line">    sendfile            on;</span><br><span class="line">    tcp_nopush          on;</span><br><span class="line">    tcp_nodelay         on;</span><br><span class="line">    keepalive_timeout   65;</span><br><span class="line">    types_hash_max_size 2048;</span><br><span class="line"></span><br><span class="line">    include             /etc/nginx/mime.types;</span><br><span class="line">    default_type        application/octet-stream;</span><br><span class="line"></span><br><span class="line">    include /etc/nginx/conf.d/*.conf;</span><br><span class="line"></span><br><span class="line"><span class="comment"># 多端口使用https 代理8888 挂载node</span></span><br><span class="line">server &#123;</span><br><span class="line">        listen       8888 ssl;</span><br><span class="line">        server_name  yhf7.top; <span class="comment"># 域名</span></span><br><span class="line">        ssl on;</span><br><span class="line">        root         html;</span><br><span class="line"></span><br><span class="line">        index index.html index.htm;</span><br><span class="line">        ssl_certificate <span class="string">"cert/yhf7.top.pem"</span>; <span class="comment"># 密钥</span></span><br><span class="line">        ssl_certificate_key <span class="string">"cert/yhf7.top.key"</span>;<span class="comment"># 密钥</span></span><br><span class="line">        ssl_session_cache shared:SSL:1m;</span><br><span class="line">        ssl_session_timeout  5m;</span><br><span class="line">        ssl_ciphers ECDHE-RSA-AES128-GCM-SHA256:ECDHE:ECDH:AES:HIGH:!NULL:!aNULL:!MD5:!ADH:!RC4;<span class="comment"># 加密</span></span><br><span class="line">        ssl_protocols TLSv1 TLSv1.1 TLSv1.2;</span><br><span class="line">        ssl_prefer_server_ciphers on;</span><br><span class="line"></span><br><span class="line">        location / &#123;</span><br><span class="line">                root html;</span><br><span class="line">                index index.html index.htm;</span><br><span class="line">                proxy_pass http://yhf7.top:3000; <span class="comment"># 端口默认指向地</span></span><br><span class="line">        &#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="comment"># https 配置 80 443</span></span><br><span class="line">    server &#123;</span><br><span class="line">        listen 80;</span><br><span class="line">        listen       443 ssl;</span><br><span class="line">        server_name  yhf7.top; <span class="comment"># 域名</span></span><br><span class="line">        ssl on;</span><br><span class="line">        root         html;</span><br><span class="line"></span><br><span class="line">        index index.html index.htm;</span><br><span class="line">        ssl_certificate <span class="string">"cert/yhf7.top.pem"</span>; <span class="comment"># 密钥</span></span><br><span class="line">        ssl_certificate_key <span class="string">"cert/yhf7.top.key"</span>;<span class="comment"># 密钥</span></span><br><span class="line">        ssl_session_cache shared:SSL:1m;</span><br><span class="line">        ssl_session_timeout  5m;</span><br><span class="line">        ssl_ciphers ECDHE-RSA-AES128-GCM-SHA256:ECDHE:ECDH:AES:HIGH:!NULL:!aNULL:!MD5:!ADH:!RC4;<span class="comment"># 加密</span></span><br><span class="line">        ssl_protocols TLSv1 TLSv1.1 TLSv1.2;</span><br><span class="line">        ssl_prefer_server_ciphers on;</span><br><span class="line"></span><br><span class="line">        location / &#123;</span><br><span class="line">                root html;</span><br><span class="line">                index index.html index.htm;</span><br><span class="line">                proxy_pass http://yhf7.top:100; <span class="comment"># 端口默认指向地</span></span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p><img src="/aly/ng4.png" alt="nginx"></p><h4 id="nginx重定向apache的应用-（Apache的默认80端口必须改变不然就和nginx冲突了）"><a href="#nginx重定向apache的应用-（Apache的默认80端口必须改变不然就和nginx冲突了）" class="headerlink" title="nginx重定向apache的应用 （Apache的默认80端口必须改变不然就和nginx冲突了）"></a>nginx重定向apache的应用 （Apache的默认80端口必须改变不然就和nginx冲突了）</h4><ul><li>由于前面配置了默认进入，所以改变端口 就可以了<figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">$ vim /etc/httpd/conf/httpd.conf</span><br></pre></td></tr></table></figure></li></ul><p><img src="/aly/ng6.png" alt="nginx"></p><h3 id="查看效果"><a href="#查看效果" class="headerlink" title="查看效果"></a>查看效果</h3><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line">$ nginx 开启</span><br><span class="line">$ nginx -s reload 重启</span><br><span class="line">$ nginx -s stop 关闭</span><br></pre></td></tr></table></figure><p><img src="/aly/ng5.png" alt="nginx"><br><img src="/aly/ng8.png" alt="nginx"></p><h3 id="预防不会关闭Apache-https"><a href="#预防不会关闭Apache-https" class="headerlink" title="预防不会关闭Apache https"></a>预防不会关闭Apache https</h3><ol><li>关闭httpd重定向<figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">$ vim /etc/httpd/conf/httpd.conf</span><br></pre></td></tr></table></figure></li></ol><p><img src="/aly/ng7.png" alt="nginx"></p><ol start="2"><li><p>关闭httpd ssl 端口</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">$ vim /etc/httpd/conf.d/ssl.conf</span><br></pre></td></tr></table></figure></li><li><p>重启httpd</p></li></ol><h1 id="后记"><a href="#后记" class="headerlink" title="后记"></a>后记</h1><ul><li>这就是我踩很多坑最后配置出来的笔记，希望能帮到有缘人，欢迎同行加微信交流学习！</li><li><a href="https://yhf7.github.io/" target="_blank" rel="noopener">欢迎进入我的博客</a>：<a href="https://yhf7.github.io/" target="_blank" rel="noopener">https://yhf7.github.io/</a></li><li>如果有什么侵权的话，请及时添加小编微信以及qq也可以来告诉小编（905477376微信qq通用），谢谢！</li></ul>]]></content>
    
    <summary type="html">
    
      
      
        &lt;link rel=&quot;stylesheet&quot; class=&quot;aplayer-secondary-style-marker&quot; href=&quot;/assets/css/APlayer.min.css&quot;&gt;&lt;script src=&quot;/assets/js/APlayer.min.js&quot; cla
      
    
    </summary>
    
      <category term="服务器" scheme="http://yoursite.com/categories/%E6%9C%8D%E5%8A%A1%E5%99%A8/"/>
    
    
      <category term="反向代理" scheme="http://yoursite.com/tags/%E5%8F%8D%E5%90%91%E4%BB%A3%E7%90%86/"/>
    
  </entry>
  
  <entry>
    <title>vue-cli3 部局多页面开发/模块化</title>
    <link href="http://yoursite.com/2019/04/26/vue-cli3-%E5%A4%9A%E9%A1%B5%E9%9D%A2%E5%BC%80%E5%8F%91/"/>
    <id>http://yoursite.com/2019/04/26/vue-cli3-多页面开发/</id>
    <published>2019-04-26T00:39:31.310Z</published>
    <updated>2019-04-26T01:25:28.785Z</updated>
    
    <content type="html"><![CDATA[<link rel="stylesheet" class="aplayer-secondary-style-marker" href="/assets/css/APlayer.min.css"><script src="/assets/js/APlayer.min.js" class="aplayer-secondary-script-marker"></script><h1 id="前言"><a href="#前言" class="headerlink" title="前言"></a>前言</h1><ul><li>vue我们众所周知的是单页面开发，那么我们想把它多页面化模块化呢</li><li>那该如何来个改才能达到多页面多模块的效果呢</li><li>如何可以模块之间无关联无污染呢</li><li>为什么要这样去写呢？有什么好处呢？</li><li>第一、一个项目中有两端同的业务可以很好的区分两个项目之间无污染无关联</li><li>第二、公共资源共享公共组件视图多项目共用</li><li>第三、打包方便一次打包就可以了不需要分开多次去打包配置也只是需要配置一次</li><li>那我们就来走入vue多页面开发系列吧跟着我一步一步的配置多页面</li></ul><h1 id="开始"><a href="#开始" class="headerlink" title="开始"></a>开始</h1><ul><li>先看一下目录图<br><img src="/vue-cli/vue3-cli-1.png" alt="vue-cli"><br><img src="/vue-cli/vue3-cli-2.png" alt="vue-cli"></li></ul><h3 id="配置"><a href="#配置" class="headerlink" title="配置"></a>配置</h3><ul><li>文件的创建那些就不多说了不懂你私我好吧</li><li>直接配置一目了然<figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br></pre></td><td class="code"><pre><span class="line"><span class="built_in">module</span>.exports = &#123;</span><br><span class="line">    pages: &#123;</span><br><span class="line">        main: &#123;</span><br><span class="line">            entry: <span class="string">'src/module/index/main.js'</span>, <span class="comment">// 模块加载文件</span></span><br><span class="line">            <span class="comment">// 模板来源</span></span><br><span class="line">            template: <span class="string">'public/index.html'</span>,<span class="comment">// 模块入口文件, 默认进入文件（因为是放在根目录所以就会默认进入，如果不想可以改其他）</span></span><br><span class="line">            filename: <span class="string">'index.html'</span>,     </span><br><span class="line">            <span class="comment">// 当使用 title 选项时，</span></span><br><span class="line">            <span class="comment">// template 中的 title 标签需要是 &lt;title&gt;&lt;%= htmlWebpackPlugin.options.title %&gt;&lt;/title&gt;</span></span><br><span class="line">            title: <span class="string">''</span></span><br><span class="line">        &#125;,</span><br><span class="line">        login: &#123;</span><br><span class="line">            entry: <span class="string">'src/module/login/main.js'</span>, <span class="comment">// 第二个页面的模版加载文件地址</span></span><br><span class="line">            <span class="comment">// 模板来源</span></span><br><span class="line">            template: <span class="string">'public/login/index.html'</span>, <span class="comment">// 入口文件</span></span><br><span class="line">            filename: <span class="string">'login/index.html'</span>,</span><br><span class="line">            <span class="comment">// 当使用 title 选项时，</span></span><br><span class="line">            <span class="comment">// template 中的 title 标签需要是 &lt;title&gt;&lt;%= htmlWebpackPlugin.options.title %&gt;&lt;/title&gt;</span></span><br><span class="line">            title: <span class="string">''</span></span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure></li></ul><p><img src="/vue-cli/vue3-cli-3.png" alt="vue-cli"></p><h3 id="查看结果"><a href="#查看结果" class="headerlink" title="查看结果"></a>查看结果</h3><p><img src="/vue-cli/vue3-cli-4.png" alt="vue-cli"></p><h2 id=""><a href="#" class="headerlink" title=""></a><img src="/vue-cli/vue3-cli-5.png" alt="vue-cli"></h2><h4 id="注意：-不是默认进入必须和我那样写，你也可以不需要默认进入，可以改成和login那样也是可以的只是改一下入口文件，吧index-html和login一样放到文件夹里面就可以了"><a href="#注意：-不是默认进入必须和我那样写，你也可以不需要默认进入，可以改成和login那样也是可以的只是改一下入口文件，吧index-html和login一样放到文件夹里面就可以了" class="headerlink" title="注意： 不是默认进入必须和我那样写，你也可以不需要默认进入，可以改成和login那样也是可以的只是改一下入口文件，吧index.html和login一样放到文件夹里面就可以了"></a>注意： 不是默认进入必须和我那样写，你也可以不需要默认进入，可以改成和login那样也是可以的只是改一下入口文件，吧index.html和login一样放到文件夹里面就可以了</h4><h1 id="后记"><a href="#后记" class="headerlink" title="后记"></a>后记</h1><ul><li>这就是vue多页面开发，是不是觉得很简单啊</li><li><a href="https://yhf7.github.io/" target="_blank" rel="noopener">欢迎进入我的博客</a>：<a href="https://yhf7.github.io/" target="_blank" rel="noopener">https://yhf7.github.io/</a></li><li>如果有什么侵权的话，请及时添加小编微信以及qq也可以来告诉小编（905477376微信qq通用），谢谢！</li></ul>]]></content>
    
    <summary type="html">
    
      
      
        &lt;link rel=&quot;stylesheet&quot; class=&quot;aplayer-secondary-style-marker&quot; href=&quot;/assets/css/APlayer.min.css&quot;&gt;&lt;script src=&quot;/assets/js/APlayer.min.js&quot; cla
      
    
    </summary>
    
      <category term="Vue" scheme="http://yoursite.com/categories/Vue/"/>
    
    
      <category term="Vue 案例" scheme="http://yoursite.com/tags/Vue-%E6%A1%88%E4%BE%8B/"/>
    
  </entry>
  
</feed>
