<?xml version="1.0" encoding="utf-8"?>
<feed xmlns="http://www.w3.org/2005/Atom">
  <title>不懂IT的男孩</title>
  
  <subtitle>不忘初心，方得始终</subtitle>
  <link href="/atom.xml" rel="self"/>
  
  <link href="http://yoursite.com/"/>
  <updated>2018-11-17T08:39:38.158Z</updated>
  <id>http://yoursite.com/</id>
  
  <author>
    <name>Detail</name>
    
  </author>
  
  <generator uri="http://hexo.io/">Hexo</generator>
  
  <entry>
    <title>vue2-vuex 案例分析</title>
    <link href="http://yoursite.com/2018/11/17/vue2-vuex%E6%A1%88%E4%BE%8B/"/>
    <id>http://yoursite.com/2018/11/17/vue2-vuex案例/</id>
    <published>2018-11-17T06:50:30.575Z</published>
    <updated>2018-11-17T08:39:38.158Z</updated>
    
    <content type="html"><![CDATA[<link rel="stylesheet" class="aplayer-secondary-style-marker" href="/assets/css/APlayer.min.css"><script src="/assets/js/APlayer.min.js" class="aplayer-secondary-script-marker"></script><h1 id="这个是我在github看到的一个vue的案例感觉好像挺有用的就下下来看，然后就写了这个分析，vue-vuex都全了很好"><a href="#这个是我在github看到的一个vue的案例感觉好像挺有用的就下下来看，然后就写了这个分析，vue-vuex都全了很好" class="headerlink" title="这个是我在github看到的一个vue的案例感觉好像挺有用的就下下来看，然后就写了这个分析，vue-vuex都全了很好"></a>这个是我在github看到的一个vue的案例感觉好像挺有用的就下下来看，然后就写了这个分析，vue-vuex都全了很好</h1><h2 id="项目地址"><a href="#项目地址" class="headerlink" title="项目地址"></a><a href="https://github.com/YHF7/Vue/tree/master/vue2-happyfri" target="_blank" rel="noopener">项目地址</a></h2><h2 id="目录分析"><a href="#目录分析" class="headerlink" title="目录分析"></a>目录分析</h2><ul><li>build 配置/打包目录</li><li>config 端口控制</li><li>happyfri 静态资源</li><li>node_modules 插件库</li><li>src 业务逻辑<ul><li>components 公共组件<ul><li>itemcontainer 页面</li></ul></li><li>config 这个我不太懂应该是 ajax 交互用的<ul><li>ajax.js</li><li>rem.js</li></ul></li><li>images 图片</li><li>page 业务逻辑组件<ul><li>home 主页面<ul><li>index.vue</li></ul></li><li>item 答题页面<ul><li>index.vue</li></ul></li><li>score 最后的分数页面<ul><li>index.vue</li></ul></li></ul></li><li>router 路由<ul><li>router.js</li></ul></li><li>store vuex 的业务逻辑<ul><li>index.js 创建与实例数据与方法</li><li>actioin.js 主要是负责对接外部方法</li><li>mutatoions.js 主要是复杂编写内部方法供 actionin.js 内的方法调用</li></ul></li><li>style less<ul><li>common.less 控制页面的样式</li></ul></li><li>App.vue 主组件</li><li>main.js 配置文件</li></ul></li><li>index.html 主页面</li><li>其他的一下配置文件</li></ul><h2 id="走进-vue2-项目"><a href="#走进-vue2-项目" class="headerlink" title="走进 vue2 项目"></a>走进 vue2 项目</h2><h3 id="页面"><a href="#页面" class="headerlink" title="页面"></a>页面</h3><ol><li>首先这个是用 vue-cli 脚手架开启的一个 vue 项目 （作者是把原本的 8080 短端口改为了 8088）<ul><li>sudo cnpm dev run 开启服务</li><li>看开启无误 通过<a href="http://localhost:8088/#/" target="_blank" rel="noopener">http://localhost:8088/#/</a> 访问主页面</li></ul></li><li>开启到了服务了我们就来看结构<ul><li>页面很简单看起来就几个部分</li><li>头部-内容-按钮-背景图</li></ul></li></ol><h3 id="业务逻辑代码"><a href="#业务逻辑代码" class="headerlink" title="业务逻辑代码"></a>业务逻辑代码</h3><ol><li>进入到页面了 我们就看看 主页面 是着么得到的<ul><li>当我们开启了服务的时候 就会执行 build/dev-server.js 文件</li><li>然后就会找到我们的 src 文件夹 文件夹内有个 main.js 的配置文件<ul><li>在 main.js 文件中 所有的 插件与静态资源 与 vue 实例都会在里面</li><li>但是因为这样都写在一起 不仅会使得代码很乱也会很多所以分开了很多的页面去写</li><li>所以看到 main.js 其实没什么东西 ，都分到了不同的组件中</li></ul></li><li>好到了我们的 main.js 就激活 vue 实例</li><li>这里 vue 就会进行内部的路由判断 我们打开了 8088 端口时默认是 /</li><li>在 router/router.js 文件就会判断并执行到相应到页面 也就是主页</li></ul></li><li>router.js<ul><li>在这个路由页面中我们会看到 返回到是 App 这个 主组建</li><li>children 这个是用来设置子组件的 （子组建分为了三个）<ul><li>“” 默认为空的话 就是去到 ../page/home 这个主页面中</li><li>“item” 答题页</li><li>“score” 结算页</li><li>component: r =&gt; require.ensure([], () =&gt; r(require(‘../page/home’)), ‘home’) 这个获取地址的方法 已经不建议如此获取</li></ul></li></ul></li><li>跟着路由判断 我们来到了 默认的主页面 src/page/home/index.vue<ul><li>template 组件<ul><li>我们看到是一个类名 home_container 的 div 包着一个 外部引用组件</li><li><itemcontainer father-component="home"></itemcontainer> 通过 father-component 给这个组件传一个值 ，这是用来给组件判断是主页面还是答题页面，输出不同的效果</li></ul></li><li>script js<ul><li>import itemcontainer from ‘../../components/itemcontainer’ 引用外部的组件</li><li>name 这个就不用说了</li><li>components 挂载组件</li></ul></li><li>style less<br><img src="/vue2-vuex/vuex1.png" alt="home"></li></ul></li><li><p>看完了 子主页面 我们顺藤摸瓜 去看看他所引用的外部组件 src/components/itemcontainer.vue</p><ul><li>template （分了两个部分，同时也分了两个页面 home/item）<ul><li>头部 header<ul><li>通过 刚才我们看到的 father-component 传过来的值 判断是 home 还是 item 显示不同的头部<ul><li>第几周/第几题</li></ul></li></ul></li><li>内容 div 也是通过 father-component 判断显示那个 那么我们就分开说<ul><li>home<ul><li>一个 div 放着一些内容</li><li>router-link 控制的一个按钮 跳转地址是 item</li></ul></li><li>item<ul><li>div 包着的 内容 通过 itemDetail.length 来判断是否还有题目//其实是多余的</li><li>有就 继续执行 内容 header ul&gt;li</li><li>最后又两个 span 通过 itemNum &lt; itemDetail.length 来判断是下一题还是执行结算函数</li></ul></li></ul></li></ul></li><li>script<ul><li>在这里面我们可能一开始是没有注意到的</li><li>props 父子组件传值就不说了</li><li>把目光投射到代码靠后一点点 created 这个生命周期函数身上</li><li>当我们一进入这个页面时 就会马上判断是否是 home 页面</li><li>如果是 那就执行 this.initializeData(); 这是定义在 vuex 的函数</li><li>不急跳过去先看看 itemcontainer 内的 vuex</li><li>我们会看到 页面是用了 按需导入的方法</li><li>import { mapState, mapActions } from “vuex”;</li><li>在我们的使用中为了避免多次的编写 this.\$store….这样的代码 我们是用来 mapState，mapActions 这两个方法</li><li>mapState 获取 vuex 的 state 也就是 data<ul><li>使用比较简单 computed: mapState([接收名:’vuexdata 名’]) computed 用来监控自己定义的变量</li></ul></li><li>mapActions 获取 vuex 的函数<ul><li>methods: {…mapActions([“函数名”, “函数名”])} // 将 <code>this.方法名()</code> 映射为 <code>this.$store.dispatch(&#39;方法名&#39;)</code> 用在异步操作</li></ul></li><li>知道了这些我们继续回头看项目 判断是 home 就执行方法 和设置背景</li></ul></li><li>style 样式这些基本工的我就不说自己摸索</li></ul></li><li><p>既然说到了 vuex 那就顺着去看看 vuex src/store/index</p></li></ol><ul><li>进来了后我们看到的是 一些引入的插件和自定义的函数方法</li><li>在这里注册了 vuex</li><li>state 就是一些定义的数据</li><li>在下面我们会看到一个 抛出的 创建 vuex 实例<ul><li>state 是数据</li><li>actions 异步调用自定义的方法</li><li>mutations 同步自定义方法</li></ul></li></ul><ol start="6"><li>了解了 vuex store 的架构后我们再继续看这个 刚才调用的方法的执行</li></ol><ul><li>但调用这个方法的时候</li><li>第一时间方法是找到了 src/store/index.vue 的 stroe 实例</li><li>通过前面我们知道是异步调用方法是 在 actions 这个中，这个方法来自于 当前文件夹下的 actions.vue 中</li><li>那我们进入到这个页面 终于看到了这个方法了 原来是用来初始化信息的</li><li>这个方法需要传入一个值 （但我们使用 vuex 的时候默认第一个要输入的是 vuex 的参数）<ul><li>当我们看到 commit 的时候应该想到的是 vuex 同步方法调用</li><li>那么我们知道同步方法都是放在 mutations 里面 那我们就进去看看</li><li>在文件中 我们找到了 刚才调用的 INITIALIZE_DATA 方法 state 是 vuex 必须导入的<ul><li>然后我们就看了了很多个 state.什么的数据</li><li>看到 state 那肯定就是 vuex 内部都数据啦</li><li>这时候返回到 index.js 对照着看</li><li>就会知道是把数据进行赋值初始化，这步是为了不要产生数据的出错，当你答完题又回去 home 的时候再次答题数据就会出错了</li></ul></li></ul></li></ul><ol start="7"><li>好我们看完了 App/home 这样的 主子组建的搭配和数据初始化后，我们在页面点击开始<ul><li>点击开始就是等于 点击了 itemcontainer 内的 router-link 就会跳到 item</li><li>路由判断就会根据 /item 判断 我们就会去到 crc/page/item/index.vue</li><li>这个结构我们就不说了和 home 一样</li><li>我们说一下 created 这是生命周期函数，表示进入界面已经加载完 dom 时执行</li></ul></li><li>好我们也跟着 再一次回到了 itemcontainer 页面<ul><li>template<ul><li>判断得到是 item 执行显示出来头部和内容</li><li>header 显示第几题</li><li>div 这个就详细说一下重点就是在这里</li></ul></li></ul></li><li>那我们就来重点解说一下这个 div<ul><li>因为数据已经导入进来前面说过了直奔内容</li><li>先看类名为 item_list_container<ul><li>这里就是 item 的内容 用来判断是否还有题目</li><li>遍历数据</li><li>header 获取 vuex 内的 itemDetail 数组中的 第 0 个对象中的 topic_name （itemNum 是用来判断是第几题的，为什么是 itemNum-1 不用我说了把）</li><li>ul li 遍历出选项<ul><li>在 li 绑定了点击保存答案 id 的方法</li><li>做了一个 点击按钮绑定的样式 也做了一个 abcd 的遍历，定义方法通过不同的数值表示不同的字母</li><li>获取内容</li></ul></li><li>最后两个 span 是用来判断下一题还是执行结算</li></ul></li></ul></li><li><p>最后的几个 vuex 问题都在这里了 先说 li 的保存答案</p><ul><li>li 绑定了自定义的一个函数 choosed 有两个参数值 li 遍历的第几个 和 vuex 数据中的答案 id</li><li>看到 choosed 方法 当我们选择答案的时候 就会在记录在 choosedNum 和 choosedId 中</li></ul></li><li><p>选择了答案的选项 当然就会击下一题</p><ul><li>触发 自定义函数 nextItem</li><li>这个函数首先判断的是 通过choosedNum判断是否有选择答案，没有就弹框</li><li>有就把choosedNum清空 这是步骤是为了检测是否真的有输入（为什么不用输入的ID做呢，因为这里执行的是异步操作，用户可以继续做题，通过是否为空去判断，id传走执行其他操作，下一次传值覆盖掉就好了）</li><li>这里通过异步调用 方法 addNum 并传入答案id</li><li>前面说过位置在哪里这里就直接看执行方法</li><li>先同步执行了 ‘REMBER_ANSWER’</li><li>这里是把答案添加到了 vuex 内的state中的answerid数组中</li><li>然后再判断题目还有没有，有就 执行’ADD_ITEMNUM’方法 加一题<br><img src="/vue2-vuex/vuex2.png" alt="home"></li></ul></li><li><p>一直如此到了最后一题的时候点击 itemNum就会比itemDetail长</p><ul><li>哪就执行submitAnswe</li><li>还是判断有没有选择题目</li><li>执行添加最后一题答案</li><li>关闭定时器</li><li>路由添加score 跳转到score页面</li></ul></li><li><p>好终于到了最后的页面了 src/page/score/index</p><ul><li>这个页面也是分了两部分的不过前面说了那么多你们应该看得懂这个页面的所以就不多说</li><li>直接关心数据 还是用按需导入法</li><li>获取到了answerid 就是那个答案数组然后进行答案的计算</li><li>进入页面执行 computedScore和getScoreTip函数<br><img src="/vue2-vuex/vuex3.png" alt="home"><br><img src="/vue2-vuex/vuex4.png" alt="home"></li></ul></li><li>好了这么一个 vue2 vuex 的小案例就分析完毕了<ul><li>别看这个案例好像很小但是我们也说了很多了</li><li>本人才疏学浅花了几个小时才完全弄懂</li><li>麻雀虽小五脏俱全</li></ul></li></ol>]]></content>
    
    <summary type="html">
    
      
      
        &lt;link rel=&quot;stylesheet&quot; class=&quot;aplayer-secondary-style-marker&quot; href=&quot;/assets/css/APlayer.min.css&quot;&gt;&lt;script src=&quot;/assets/js/APlayer.min.js&quot; cla
      
    
    </summary>
    
      <category term="Vue" scheme="http://yoursite.com/categories/Vue/"/>
    
    
      <category term="Vue 案例" scheme="http://yoursite.com/tags/Vue-%E6%A1%88%E4%BE%8B/"/>
    
  </entry>
  
  <entry>
    <title>各数据库的开启与服务器的开启</title>
    <link href="http://yoursite.com/2018/11/15/sql-fuq/"/>
    <id>http://yoursite.com/2018/11/15/sql-fuq/</id>
    <published>2018-11-15T14:24:57.477Z</published>
    <updated>2018-11-15T14:54:32.714Z</updated>
    
    <content type="html"><![CDATA[<link rel="stylesheet" class="aplayer-secondary-style-marker" href="/assets/css/APlayer.min.css"><script src="/assets/js/APlayer.min.js" class="aplayer-secondary-script-marker"></script><ul><li>本人记性不好写起来方便可以开启关闭</li><li>使用就不说了很简单自己摸索吧</li></ul><h1 id="数据库"><a href="#数据库" class="headerlink" title="数据库"></a>数据库</h1><ul><li>本人才疏学浅只会mysql和mongod、sqlserver但是没装<h2 id="mysql"><a href="#mysql" class="headerlink" title="mysql"></a>mysql</h2></li><li>开启：sudo /usr/local/mysql/bin/mysqld_safe –skip-grant-tables</li><li>关闭：sudo /usr/local/mysql/bin/mysqladmin -u root -proot shutdown</li><li>mysql 建议装 Navicat for mysql 图形化界面工具（虽说代码才是王道倒是也可以提高效率是真，而且本人太记得sql语句很适合）</li></ul><h2 id="mongod"><a href="#mongod" class="headerlink" title="mongod"></a>mongod</h2><ul><li>mongod 开启相对比较简单</li><li>开启 sudo mongod</li><li>关闭 直接结束命令行就可以<figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br></pre></td><td class="code"><pre><span class="line">链接(默认链接本地服务)</span><br><span class="line">mongo</span><br><span class="line"></span><br><span class="line">退出</span><br><span class="line"><span class="built_in">exit</span></span><br><span class="line"></span><br><span class="line">基本命令:</span><br><span class="line">1. show dbs 查看显示所以数据库</span><br><span class="line">2. db 查看当前链接打数据库</span><br><span class="line">3. use 数据库名称  切换到指定打数据库（如果没有会新建）</span><br><span class="line">4. 插入数据</span><br><span class="line">5. show collections 查看数据集合 </span><br><span class="line">6. db.students.find() 查看库中所以的数据</span><br></pre></td></tr></table></figure></li></ul><h1 id="服务器"><a href="#服务器" class="headerlink" title="服务器"></a>服务器</h1><ul><li>xamp / mamp / apache 基本什么都可以用 但是用jsp就不太可以 (个人比较爱前两个，还有很多好用的服务器但是，本人用的是mac不是什么软件都能找到)</li><li>apache-tomcat 就是用了使用javaweb（jsp）<h2 id="xampp"><a href="#xampp" class="headerlink" title="xampp"></a>xampp</h2></li><li>这个比较简单 界面开启就好</li><li>留一个 数据库的地址老是忘记 <a href="http://localhost/phpmyadmin/" target="_blank" rel="noopener">http://localhost/phpmyadmin/</a></li></ul><h2 id="MAMP"><a href="#MAMP" class="headerlink" title="MAMP"></a>MAMP</h2><ul><li>这个也是界面不说</li></ul><h2 id="Apache"><a href="#Apache" class="headerlink" title="Apache"></a>Apache</h2><ul><li>Mac电脑自带</li><li>开启 sudo apachectl start</li><li>关闭 sudo apachectl stop</li><li>重启 sudo apachectl restar</li><li>留几个配置网址以后好找</li><li><a href="https://www.cnblogs.com/wanxudong/p/5846907.html" target="_blank" rel="noopener">https://www.cnblogs.com/wanxudong/p/5846907.html</a></li><li><a href="https://jingyan.baidu.com/article/922554467d763b851648f4dc.html" target="_blank" rel="noopener">https://jingyan.baidu.com/article/922554467d763b851648f4dc.html</a></li><li><a href="https://www.linuxidc.com/Linux/2016-03/129524.htm" target="_blank" rel="noopener">https://www.linuxidc.com/Linux/2016-03/129524.htm</a></li><li><a href="https://www.jianshu.com/p/f56815569234" target="_blank" rel="noopener">https://www.jianshu.com/p/f56815569234</a></li></ul><h2 id="apache-tomcat"><a href="#apache-tomcat" class="headerlink" title="apache-tomcat"></a>apache-tomcat</h2><ul><li>开启 进入 服务器文件夹 找到 bin文件夹 在终端打开 执行 sudo sh startup.sh</li><li>关闭 同上 sudo sh shutdown.sh </li><li>不行就看网址 <a href="https://www.cnblogs.com/xingxingLove/p/5304390.html" target="_blank" rel="noopener">https://www.cnblogs.com/xingxingLove/p/5304390.html</a></li><li>IntelliJ IDEA 写java，javaweb装这个软件 会自动检测本地得 apache-tomcat 基本不需要自己开启</li><li>软件自动调用开启服务，如果同时自己开了得话会起冲突的，自己记清楚</li></ul><h2 id="node"><a href="#node" class="headerlink" title="node"></a>node</h2><ul><li>这个不用说自己写代码自己运行</li><li>sudo node app.js (有nodemon就最好啦)</li></ul>]]></content>
    
    <summary type="html">
    
      
      
        &lt;link rel=&quot;stylesheet&quot; class=&quot;aplayer-secondary-style-marker&quot; href=&quot;/assets/css/APlayer.min.css&quot;&gt;&lt;script src=&quot;/assets/js/APlayer.min.js&quot; cla
      
    
    </summary>
    
      <category term="插件/配置" scheme="http://yoursite.com/categories/%E6%8F%92%E4%BB%B6-%E9%85%8D%E7%BD%AE/"/>
    
    
      <category term="数据库/服务器" scheme="http://yoursite.com/tags/%E6%95%B0%E6%8D%AE%E5%BA%93-%E6%9C%8D%E5%8A%A1%E5%99%A8/"/>
    
  </entry>
  
  <entry>
    <title>解决jsp给mysql传中文乱码</title>
    <link href="http://yoursite.com/2018/11/15/2018-11-15/"/>
    <id>http://yoursite.com/2018/11/15/2018-11-15/</id>
    <published>2018-11-15T13:20:57.804Z</published>
    <updated>2018-11-15T14:24:16.906Z</updated>
    
    <content type="html"><![CDATA[<link rel="stylesheet" class="aplayer-secondary-style-marker" href="/assets/css/APlayer.min.css"><script src="/assets/js/APlayer.min.js" class="aplayer-secondary-script-marker"></script><ul><li>今天上课的时候做一个javaweb案例</li><li>用到了数据库</li><li>在我插入中文的时候发现了问题在我的数据库中发现，中文变成了问号</li><li>遇到这个问题第一时间肯定是检查 数据库-页面代码-服务器 问题肯定就在这三个里面</li></ul><ol><li>我第一时间是看数据库</li></ol><ul><li>在数据库中设置了 utf-8 的字符集</li><li>但是在软件中设置 utf-8 保存后是看不见的</li><li>然后就去修改数据，当发现数据修改后可以成功的时候我知道数据库是没有问题的</li></ul><ol start="2"><li>我再去看页面代码</li></ol><ul><li>首先检查发送数据的表单页设置utf8没</li><li>再检查 业务逻辑处理页面的utf8设置了没<figure class="highlight jsp"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">&lt;%@ page contentType=<span class="string">"text/html;charset=UTF-8"</span> <span class="keyword">import</span>=<span class="string">"java.util.*,java.sql.*"</span> language=<span class="string">"java"</span> pageEncoding=<span class="string">"UTF-8"</span> %&gt;</span><br></pre></td></tr></table></figure></li></ul><figure class="highlight html"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">meta</span> <span class="attr">http-equiv</span>=<span class="string">"Content-Type"</span> <span class="attr">content</span>=<span class="string">"text/html; charset=UTF-8"</span>&gt;</span></span><br></pre></td></tr></table></figure><ul><li>发现加了还是没有效果</li></ul><ol start="3"><li>我再去看 服务器 是否乱码</li></ol><ul><li>jsp 我用的是 apache tomcat 服务器</li><li>检测 服务器文件-&gt;conf-&gt;server.xml 文件</li><li><p>大概在 68 行左右的位置</p><figure class="highlight xml"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">Connector</span> <span class="attr">port</span>=<span class="string">"8080"</span> <span class="attr">protocol</span>=<span class="string">"HTTP/1.1"</span></span></span><br><span class="line"><span class="tag">               <span class="attr">connectionTimeout</span>=<span class="string">"20000"</span></span></span><br><span class="line"><span class="tag">               <span class="attr">redirectPort</span>=<span class="string">"8443"</span> <span class="attr">URIEncoding</span>=<span class="string">"UTF-8"</span>/&gt;</span></span><br></pre></td></tr></table></figure></li><li><p>找到这句 看看 是否有设置 URIEncoding=”UTF-8”</p></li><li>但是做到了这里还是没有效果</li></ul><ol start="4"><li>按道理做完前面的应该可以了啊 我再去看 业务逻辑代码</li></ol><ul><li><p>想起在链接数据库的时候加一个utf8的字符集可不可以</p><figure class="highlight jsp"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">conn=DriverManager.getConnection(<span class="string">"jdbc:mysql://localhost:3306/book?useUnicode=true&amp;characterEncoding=UTF-8"</span>,<span class="string">"root"</span>,<span class="string">""</span>);</span><br></pre></td></tr></table></figure></li><li><p>在数据库链接加入 ?useUnicode=true&amp;characterEncoding=UTF-8 来设置字符集</p></li><li>这样就成功显示了中文了</li></ul>]]></content>
    
    <summary type="html">
    
      
      
        &lt;link rel=&quot;stylesheet&quot; class=&quot;aplayer-secondary-style-marker&quot; href=&quot;/assets/css/APlayer.min.css&quot;&gt;&lt;script src=&quot;/assets/js/APlayer.min.js&quot; cla
      
    
    </summary>
    
      <category term="JavaWeb" scheme="http://yoursite.com/categories/JavaWeb/"/>
    
    
      <category term="JavaWeb笔记" scheme="http://yoursite.com/tags/JavaWeb%E7%AC%94%E8%AE%B0/"/>
    
  </entry>
  
  <entry>
    <title>Vue通过请求获取api接口数据</title>
    <link href="http://yoursite.com/2018/11/10/2018-11-10/"/>
    <id>http://yoursite.com/2018/11/10/2018-11-10/</id>
    <published>2018-11-10T14:24:04.376Z</published>
    <updated>2018-11-10T14:43:19.911Z</updated>
    
    <content type="html"><![CDATA[<link rel="stylesheet" class="aplayer-secondary-style-marker" href="/assets/css/APlayer.min.css"><script src="/assets/js/APlayer.min.js" class="aplayer-secondary-script-marker"></script><h3 id="我知道也用过的有两种"><a href="#我知道也用过的有两种" class="headerlink" title="我知道也用过的有两种"></a>我知道也用过的有两种</h3><ol><li>vue-resource （已不维护了）</li><li>axios （越来越多人用）</li></ol><h3 id="那我们就来说是着么用吧"><a href="#那我们就来说是着么用吧" class="headerlink" title="那我们就来说是着么用吧"></a>那我们就来说是着么用吧</h3><h3 id="1-vue-resource"><a href="#1-vue-resource" class="headerlink" title="1. vue-resource"></a>1. vue-resource</h3><ul><li><p>引入的方法有 3 种</p><ul><li>引入 1 直接使用网络的引用地址 <script src="https://cdn.jsdelivr.net/npm/vue-resource@1.5.1"></script> （速度会慢一点）</li><li>引入 2 把包下载下来本地引用 <script src="./lib/vue-resource-1.3.4.js"></script></li><li>引入 3 在项目中 用 npm 下载引用  在main.js文件内配置 下载 npm i vue-resource -S 有cnpm最好用cnpm安装快<figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">// 引入 包</span></span><br><span class="line"><span class="keyword">import</span> VueResource <span class="keyword">from</span> <span class="string">'vue-resource'</span>;</span><br><span class="line"><span class="comment">// 安装包</span></span><br><span class="line">Vue.use(VueResource);</span><br><span class="line"><span class="comment">// 设置请求的根路径</span></span><br><span class="line">Vue.http.options.root = <span class="string">'http://127.0.0.1:5000'</span>; <span class="comment">// 我们访问后台的路径大多相同所以直接设置根路径就不用每次都全部打了</span></span><br></pre></td></tr></table></figure></li></ul></li><li><p>使用方法</p><figure class="highlight html"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">&lt;!-- body中的代码 --&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">div</span> <span class="attr">id</span>=<span class="string">"app"</span>&gt;</span></span><br><span class="line">    <span class="comment">&lt;!-- 引用 --&gt;</span></span><br><span class="line">  <span class="tag">&lt;<span class="name">input</span> <span class="attr">type</span>=<span class="string">"button"</span> <span class="attr">value</span>=<span class="string">"get请求"</span> @<span class="attr">click</span>=<span class="string">"getInfo"</span> /&gt;</span></span><br><span class="line">  <span class="tag">&lt;<span class="name">input</span> <span class="attr">type</span>=<span class="string">"button"</span> <span class="attr">value</span>=<span class="string">"post请求"</span> @<span class="attr">click</span>=<span class="string">"postInfo"</span> /&gt;</span></span><br><span class="line">  <span class="tag">&lt;<span class="name">input</span> <span class="attr">type</span>=<span class="string">"button"</span> <span class="attr">value</span>=<span class="string">"jsonp请求"</span> @<span class="attr">click</span>=<span class="string">"jsonpInfo"</span> /&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">div</span>&gt;</span></span><br></pre></td></tr></table></figure><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">// 创建 Vue 实例，得到 ViewModel</span></span><br><span class="line"><span class="keyword">var</span> vm = <span class="keyword">new</span> Vue(&#123;</span><br><span class="line">  el: <span class="string">'#app'</span>,</span><br><span class="line">  data: &#123;</span><br><span class="line">  &#125;,</span><br><span class="line">  methods: &#123;</span><br><span class="line">    getInfo() &#123; <span class="comment">// 发起get请求</span></span><br><span class="line">      <span class="comment">//  当发起get请求之后， 通过 .then 来设置成功的回调函数</span></span><br><span class="line">      <span class="keyword">this</span>.$http.get(<span class="string">'http://nodecms.applinzi.com/api/getcs'</span>).then(<span class="function"><span class="keyword">function</span> (<span class="params">result</span>) </span>&#123;</span><br><span class="line">        <span class="comment">// 通过 result.body 拿到服务器返回的成功的数据</span></span><br><span class="line">        <span class="built_in">console</span>.log(result.body)</span><br><span class="line">      &#125;)</span><br><span class="line">    &#125;,</span><br><span class="line">    postInfo() &#123; <span class="comment">// 发起 post 请求   application/x-wwww-form-urlencoded</span></span><br><span class="line">      <span class="comment">//  手动发起的 Post 请求，默认没有表单格式，所以，有的服务器处理不了</span></span><br><span class="line">      <span class="comment">//  通过 post 方法的第三个参数， &#123; emulateJSON: true &#125; 设置 提交的内容类型 为 普通表单数据格式</span></span><br><span class="line">      <span class="keyword">this</span>.$http.post(<span class="string">'http://nodecms.applinzi.com/api/getpost'</span>, &#123;&#125;, &#123;</span><br><span class="line">        emulateJSON: <span class="literal">true</span></span><br><span class="line">      &#125;).then(<span class="function"><span class="params">result</span> =&gt;</span> &#123;</span><br><span class="line">        <span class="built_in">console</span>.log(result.body)</span><br><span class="line">      &#125;)</span><br><span class="line">    &#125;,</span><br><span class="line">    jsonpInfo() &#123; <span class="comment">// 发起JSONP 请求</span></span><br><span class="line">      <span class="keyword">this</span>.$http.jsonp(<span class="string">'http://vue.studyit.io/api/jsonp'</span>).then(<span class="function"><span class="params">result</span> =&gt;</span> &#123;</span><br><span class="line">        <span class="built_in">console</span>.log(result.body)</span><br><span class="line">      &#125;)</span><br><span class="line">    &#125;</span><br><span class="line">  &#125;</span><br><span class="line">&#125;);</span><br></pre></td></tr></table></figure></li></ul><h3 id="2-axios"><a href="#2-axios" class="headerlink" title="2.axios"></a>2.axios</h3><ul><li>引入方法<ul><li>方法1 项目安装 npm i axios -S (npm,cnpm,bower喜欢那个用那个)</li><li>方法2 <script src="https://unpkg.com/axios/dist/axios.min.js"></script></li></ul></li><li><p>用法和vue-resource差不多</p><ul><li><p>main.js 配置</p><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">// 配置axios</span></span><br><span class="line"><span class="keyword">import</span> Axios <span class="keyword">from</span> <span class="string">'axios'</span></span><br><span class="line"><span class="comment">// 配置公共url</span></span><br><span class="line">Axios.defaults.baseURL = <span class="string">'http://127.0.0.1:5000/api/'</span></span><br><span class="line">Vue.prototype.$axios = Axios</span><br></pre></td></tr></table></figure></li><li><p>使用</p><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">this</span>.$axios</span><br><span class="line">  .get(<span class="string">"getlunbo"</span>)</span><br><span class="line">  .then(<span class="function"><span class="params">res</span> =&gt;</span> &#123;</span><br><span class="line">    <span class="comment">// res.data.message = [&#123;img: '图片地址'&#125;]</span></span><br><span class="line">    <span class="keyword">this</span>.imgs = res.data.message;</span><br><span class="line">  &#125;)</span><br><span class="line">  .catch(<span class="function"><span class="params">err</span> =&gt;</span> <span class="built_in">console</span>.log(<span class="string">"轮播图获取异常"</span>));</span><br></pre></td></tr></table></figure></li></ul></li></ul>]]></content>
    
    <summary type="html">
    
      
      
        &lt;link rel=&quot;stylesheet&quot; class=&quot;aplayer-secondary-style-marker&quot; href=&quot;/assets/css/APlayer.min.css&quot;&gt;&lt;script src=&quot;/assets/js/APlayer.min.js&quot; cla
      
    
    </summary>
    
      <category term="Vue" scheme="http://yoursite.com/categories/Vue/"/>
    
    
      <category term="Vue笔记" scheme="http://yoursite.com/tags/Vue%E7%AC%94%E8%AE%B0/"/>
    
  </entry>
  
  <entry>
    <title>hexo 装修地址</title>
    <link href="http://yoursite.com/2018/11/09/2018-11-09(2)/"/>
    <id>http://yoursite.com/2018/11/09/2018-11-09(2)/</id>
    <published>2018-11-09T07:22:36.218Z</published>
    <updated>2018-11-09T07:45:38.423Z</updated>
    
    <content type="html"><![CDATA[<link rel="stylesheet" class="aplayer-secondary-style-marker" href="/assets/css/APlayer.min.css"><script src="/assets/js/APlayer.min.js" class="aplayer-secondary-script-marker"></script><p><a href="https://zhuanlan.zhihu.com/p/28128674" target="_blank" rel="noopener">知乎 hexonext 主题</a><br><a href="https://blog.vinlic.com/p/56088/" target="_blank" rel="noopener">添加页面 3d 动画</a><br><a href="https://www.xiaocoder.com/2018/07/15/hexo-blog-optimizing-guide/" target="_blank" rel="noopener">xiao’sblog 优化</a><br><a href="https://asdfv1929.github.io/2018/05/26/next-add-music/" target="_blank" rel="noopener">添加主题音乐</a><br><a href="https://www.jianshu.com/p/4e094e41c1ab" target="_blank" rel="noopener">主题添加分类</a><br><a href="https://www.jianshu.com/p/393d067dba8d" target="_blank" rel="noopener">主题不显示全文</a><br><a href="https://www.jianshu.com/p/7e30afa09fab" target="_blank" rel="noopener">添加侧边栏小图标</a><br><a href="http://blog.hlz.space/tags/next%E4%B8%BB%E9%A2%98/" target="_blank" rel="noopener">hester 博客优化</a></p>]]></content>
    
    <summary type="html">
    
      
      
        &lt;link rel=&quot;stylesheet&quot; class=&quot;aplayer-secondary-style-marker&quot; href=&quot;/assets/css/APlayer.min.css&quot;&gt;&lt;script src=&quot;/assets/js/APlayer.min.js&quot; cla
      
    
    </summary>
    
      <category term="Hexo" scheme="http://yoursite.com/categories/Hexo/"/>
    
    
      <category term="Hexo装修" scheme="http://yoursite.com/tags/Hexo%E8%A3%85%E4%BF%AE/"/>
    
  </entry>
  
  <entry>
    <title>ngrok 外网映射 （解决测试时外部无法访问本地网站的）</title>
    <link href="http://yoursite.com/2018/11/09/2018-11-09/"/>
    <id>http://yoursite.com/2018/11/09/2018-11-09/</id>
    <published>2018-11-09T03:42:37.962Z</published>
    <updated>2018-11-09T04:19:18.921Z</updated>
    
    <content type="html"><![CDATA[<link rel="stylesheet" class="aplayer-secondary-style-marker" href="/assets/css/APlayer.min.css"><script src="/assets/js/APlayer.min.js" class="aplayer-secondary-script-marker"></script><h1 id="日常开发坑"><a href="#日常开发坑" class="headerlink" title="日常开发坑"></a>日常开发坑</h1><ul><li>在我们做开发的同学们很多时候开发好了一个项目之后发现只是可以再电脑内部去查看或者是通过本地端口设置同一网络下查看业务</li><li>那么我们肯定会想上到线上项目不需要在同一网络下也可以去访问</li><li>那么第一时间我们肯定是会想到 云端服务器 阿里云/新浪云/腾讯云等很多的网上服务器</li><li>对的我也想到了，当是首先<ul><li>网上服务器要钱买</li><li>网上服务器要配置</li></ul></li><li>再想想我就想丢上去看看而已替换成外网测试一下看看行不行<ul><li>买服务器不是买一天两天想着应该用不完</li></ul></li></ul><h1 id="那么我就发现了一个好用的东西-ngrok-外网映射"><a href="#那么我就发现了一个好用的东西-ngrok-外网映射" class="headerlink" title="那么我就发现了一个好用的东西 ngrok 外网映射"></a>那么我就发现了一个好用的东西 ngrok 外网映射</h1><ul><li>ngrok 并不是真的就把项目就挂载到了网上</li><li>是通过 映射端口 把本地端口映射到了外网</li><li>所以当我们吧 ngrok 关闭 或者是 本地的服务关闭了后就会断开</li></ul><h1 id="在使用之前要有-apache-服务器"><a href="#在使用之前要有-apache-服务器" class="headerlink" title="在使用之前要有 apache 服务器"></a>在使用之前要有 apache 服务器</h1><ul><li>（mac 是自带的 win 自己安装 配置这里我就不说虽然 mac 自带但是我弄了好久现在不想再去说了 ） </li><li>（也不一定非要用 apache 服务器的因为是映射端口有开启服务就好）</li><li>把项目部署到了 apache 服务器</li><li>开启服务 本地查看是否可以运行</li></ul><h1 id="说了那么多废话现在开始走进-ngrok-的世界"><a href="#说了那么多废话现在开始走进-ngrok-的世界" class="headerlink" title="说了那么多废话现在开始走进 ngrok 的世界"></a>说了那么多废话现在开始走进 ngrok 的世界</h1><ul><li><a href="https://ngrok.com/download" target="_blank" rel="noopener">ngrok 下载官网</a></li><li>不急着下载因为后面的步骤需要用到全局配置 所有先注册一个账号 有 github 的可以直接登录</li><li>然后点击 download 那个下载就好啦</li><li>把安装包下载下来之后手动解压就可以了</li><li>然后打开终端 在解压出 ngrok 的文件夹下执行配置</li><li>./ngrok authtoken 3fW4eXHdUN3ziCBXcahZ_3tnDdaTyLw8tKzJtKZkLp 3 开头这一段每个人都不同的根据登录的账号会有提示的</li><li>最后一步就是 映射端口 根据你本地开启的端口而定 ./ngrok http 80 （开启的是 80 端口就用 80 端口，默认 apache 是 80 端口）</li></ul><h1 id="前面那么多字懒得看看不懂的还是来看图解把"><a href="#前面那么多字懒得看看不懂的还是来看图解把" class="headerlink" title="前面那么多字懒得看看不懂的还是来看图解把"></a>前面那么多字懒得看看不懂的还是来看图解把</h1><p><img src="/ngrok/ngrok1.png" alt="ngrok"><br><img src="/ngrok/ngrok2.png" alt="ngrok"><br><img src="/ngrok/ngrok3.png" alt="ngrok"><br><img src="/ngrok/ngrok4.png" alt="ngrok"><br><img src="/ngrok/ngrok5.png" alt="ngrok"></p>]]></content>
    
    <summary type="html">
    
      
      
        &lt;link rel=&quot;stylesheet&quot; class=&quot;aplayer-secondary-style-marker&quot; href=&quot;/assets/css/APlayer.min.css&quot;&gt;&lt;script src=&quot;/assets/js/APlayer.min.js&quot; cla
      
    
    </summary>
    
      <category term="插件/配置" scheme="http://yoursite.com/categories/%E6%8F%92%E4%BB%B6-%E9%85%8D%E7%BD%AE/"/>
    
    
      <category term="外网映射" scheme="http://yoursite.com/tags/%E5%A4%96%E7%BD%91%E6%98%A0%E5%B0%84/"/>
    
  </entry>
  
  <entry>
    <title>Vue-cli安装/使用</title>
    <link href="http://yoursite.com/2018/11/07/vue-cli/"/>
    <id>http://yoursite.com/2018/11/07/vue-cli/</id>
    <published>2018-11-07T14:36:52.749Z</published>
    <updated>2018-11-15T15:04:03.336Z</updated>
    
    <content type="html"><![CDATA[<link rel="stylesheet" class="aplayer-secondary-style-marker" href="/assets/css/APlayer.min.css"><script src="/assets/js/APlayer.min.js" class="aplayer-secondary-script-marker"></script><h1 id="vue-cli-vue-脚手架"><a href="#vue-cli-vue-脚手架" class="headerlink" title="vue-cli(vue 脚手架)"></a>vue-cli(vue 脚手架)</h1><ul><li>在开发得时候用 vue 做开发但是写多了感觉能不能一开始就有现成得不用去配置拿来就能用</li><li>真的有 vue-cli vue 脚手架</li></ul><h1 id="不说那么多直接开干"><a href="#不说那么多直接开干" class="headerlink" title="不说那么多直接开干"></a>不说那么多直接开干</h1><ol><li>确保电脑有安装 node/npm （不多说不懂去标签 node 找 node 安装）<a href="https://yhf7.github.io/2018/10/17/npm-Plug-in/#more" target="_blank" rel="noopener">地址</a></li><li>使用 vue-cli 是以来 webpack 使用得所以安装 webpack 先<ul><li>以往用 webpack 直接安装就行</li><li>webpack 4.x 开始要以来 webpack-cli 依赖</li><li>全局安装 webpack 和 webpack-cli</li><li>sudo npm install webpack webpack-cli -g</li><li>安装完 webpack -v 看看安装到了没有</li></ul></li><li>千新万苦终于搞完前面现在安装 vue-cli<ul><li>sudo npm install –global vue-cli</li><li>安装完 vue -v 查看版本</li></ul></li><li>不多说装完直接使用<ul><li>进入到你要开发的磁盘位置 先去那里就去那里</li><li>sudo vue init webpack baoge (这个 baoge 就是项目的名字自己定)</li><li>然后就到了后面的配置项了</li><li>Project name (baoge)： —–项目名称，直接回车，按照括号中默认名字（注意这里的名字不能有大写字母，如果有会报错 Sorry, name can no longer contain capital letters），阮一峰老师博客为什么文件名要小写 ，可以参考一下。</li><li>Project description (A Vue.js project)： —-项目描述，也可直接点击回车，使用默认名字</li><li>Author ()： —-作者，输入你的大名</li><li>接下来会让用户选择：</li><li>Runtime + Compiler: recommended for most users 运行加编译，既然已经说了推荐，就选它了</li><li>Runtime-only: about 6KB lighter min+gzip, but templates (or any Vue-specificHTML) are ONLY allowed in .vue files - render functions are required elsewhere 仅运行时，已经有推荐了就选择第一个了</li><li>Install vue-router? (Y/n) 是否安装 vue-router，这是官方的路由，大多数情况下都使用，这里就输入“y”后回车即可。</li><li>Use ESLint to lint your code? (Y/n) 是否使用 ESLint 管理代码，ESLint 是个代码风格管理工具，是用来统一代码风格的，一般项目中都会使用。</li><li>接下来也是选择题 Pick an ESLint preset (Use arrow keys) 选择一个 ESLint 预设，编写 vue 项目时的代码风格，直接 y 回车</li><li>Setup unit tests with Karma + Mocha? (Y/n) 是否安装单元测试，我选择安装 y 回车</li><li>Setup e2e tests with Nightwatch(Y/n)? 是否安装 e2e 测试 ，我选择安装 y 回车</li></ul></li><li>不想死的 UseESLint to lint your code 必须输入 n 不然标准模式下会让你痛不欲生（觉得自己代码很他妈规范的就用吧）</li><li>不过即使一开始的时候没有注意到点击了确定开启了 eslint 也不用怕，教你如何关闭 ESLint<ul><li>在项目中找到 config 文件夹，进入文件夹</li><li>找到 index.js 文件</li><li>在大概 26 行左右的位置 useEslint:true 会有这么一句命令 改为 false 就好啦 useEslint:false</li><li>记住这个东西是用 webpack 执行的如果是开启服务的时候修改请重启一下服务</li></ul></li><li>还有一个方法可以不用关掉这个 eslint 就是安装插件让它自动的帮你检查格式化<ul><li>使用的编程软件是 vs code 微软出的</li><li>安装什么插件我就不详细说了，点下面链接自己琢磨</li><li><a href="https://juejin.im/post/5be5429de51d4511a808f4ac" target="_blank" rel="noopener">插件地址</a></li></ul></li></ol>]]></content>
    
    <summary type="html">
    
      
      
        &lt;link rel=&quot;stylesheet&quot; class=&quot;aplayer-secondary-style-marker&quot; href=&quot;/assets/css/APlayer.min.css&quot;&gt;&lt;script src=&quot;/assets/js/APlayer.min.js&quot; cla
      
    
    </summary>
    
      <category term="插件/配置" scheme="http://yoursite.com/categories/%E6%8F%92%E4%BB%B6-%E9%85%8D%E7%BD%AE/"/>
    
    
      <category term="vue插件" scheme="http://yoursite.com/tags/vue%E6%8F%92%E4%BB%B6/"/>
    
  </entry>
  
  <entry>
    <title>node/php使用心得</title>
    <link href="http://yoursite.com/2018/11/07/2018-11-07/"/>
    <id>http://yoursite.com/2018/11/07/2018-11-07/</id>
    <published>2018-11-07T14:09:44.951Z</published>
    <updated>2018-11-07T14:28:12.073Z</updated>
    
    <content type="html"><![CDATA[<link rel="stylesheet" class="aplayer-secondary-style-marker" href="/assets/css/APlayer.min.css"><script src="/assets/js/APlayer.min.js" class="aplayer-secondary-script-marker"></script><p>今天有个师弟让我写一个用户注册权限的后端服务，第一个想法是用node，但是他的服务端没有node，只有php，可能是我很久没有写php的代码所以写起来还是很不习惯，写node的时候只是关心，接口，业务逻辑，操作数据库分开三步写很顺手，但是用php写，顿时脑子是比较空白的，长时间不去使用一个语言突然就要去写真的就会想不起来这么写好，只能看着以前写过的服务一点一点的拿起来，虽然是写出来了但是感觉用起来还是觉得node比php好用，虽然用起来都是比较简单</p><p>node 判断路由-&gt;业务逻辑-&gt;数据库操作<br>php 业务逻辑-&gt;数据库操作</p>]]></content>
    
    <summary type="html">
    
      
      
        &lt;link rel=&quot;stylesheet&quot; class=&quot;aplayer-secondary-style-marker&quot; href=&quot;/assets/css/APlayer.min.css&quot;&gt;&lt;script src=&quot;/assets/js/APlayer.min.js&quot; cla
      
    
    </summary>
    
      <category term="个人" scheme="http://yoursite.com/categories/%E4%B8%AA%E4%BA%BA/"/>
    
    
      <category term="个人" scheme="http://yoursite.com/tags/%E4%B8%AA%E4%BA%BA/"/>
    
  </entry>
  
  <entry>
    <title>完成YHF-Vue项目心得</title>
    <link href="http://yoursite.com/2018/11/04/2018-11-04/"/>
    <id>http://yoursite.com/2018/11/04/2018-11-04/</id>
    <published>2018-11-04T03:17:21.356Z</published>
    <updated>2018-11-04T03:34:41.412Z</updated>
    
    <content type="html"><![CDATA[<link rel="stylesheet" class="aplayer-secondary-style-marker" href="/assets/css/APlayer.min.css"><script src="/assets/js/APlayer.min.js" class="aplayer-secondary-script-marker"></script><p>完成了vue项目的时候，内心是很开心的，终于做成了一个小项目了，从当初的只是一个界面到，后面要去写后端，但是一开始不会写后端接口，那个时候真的很烦躁，后来发现了一个别人写好的跨域交互的案例，就打开来看学着别人的去写，那时候发现噢原来我自己也是可以用node去写后端的接口的喔，那时候就用node去写接口，顺着别人的思路和骨架去写，后面发现不单止要写后端接口还要去操作数据库，虽然我会一点点数据库操作，但是我对数据库的设计并不是非常的了解，只可以边写前端的页面需要用到什么的时候，看着教程的项目接口自己去设计和操作数据库，一开始也是很多碰壁的，设计好数据库图片数据用什么方式存呢也想了很久，后面就是操作数据库查询，也是一点一点的写上网查询慢慢的去改进，解决了后端的事情还是继续去写前端，就是一次又一次的写前端页面-&gt;接口-&gt;操作数据-&gt;获取返回数据，在这个时候我发现其实做后端开发也是不容易虽然说是分好路由、业务逻辑、操作数据库，但是还是挺苦的，慢慢端熟悉了其实也觉得没什么吧，在写前端页面的时候虽然是跟着教程做但是也是出现了很多的bug，也是让我很苦恼，这只是一个小小的项目就让我心态都要奔溃了，这个购物商场也还是没有写完的呢还有很多的功能可以完善，其实我很想说项目写到了后面前面的好像又忘记了，我的天啊这样着么在it界混下去呢；<br>很多的技术好像都学过但是到了用的时候发现自己脑子里面好像什么都没有，好像自己从来都没有接触过一样，一步一步慢慢的走吧！准备写一个博客的小项目</p>]]></content>
    
    <summary type="html">
    
      
      
        &lt;link rel=&quot;stylesheet&quot; class=&quot;aplayer-secondary-style-marker&quot; href=&quot;/assets/css/APlayer.min.css&quot;&gt;&lt;script src=&quot;/assets/js/APlayer.min.js&quot; cla
      
    
    </summary>
    
      <category term="个人" scheme="http://yoursite.com/categories/%E4%B8%AA%E4%BA%BA/"/>
    
    
      <category term="个人" scheme="http://yoursite.com/tags/%E4%B8%AA%E4%BA%BA/"/>
    
  </entry>
  
  <entry>
    <title>Vue day10</title>
    <link href="http://yoursite.com/2018/11/04/Vue-day10/"/>
    <id>http://yoursite.com/2018/11/04/Vue-day10/</id>
    <published>2018-11-04T02:45:10.713Z</published>
    <updated>2018-11-04T02:46:03.518Z</updated>
    
    <content type="html"><![CDATA[<link rel="stylesheet" class="aplayer-secondary-style-marker" href="/assets/css/APlayer.min.css"><script src="/assets/js/APlayer.min.js" class="aplayer-secondary-script-marker"></script><h2 id="开启Apache的gzip压缩"><a href="#开启Apache的gzip压缩" class="headerlink" title="开启Apache的gzip压缩"></a>开启Apache的gzip压缩</h2><p>要让apache支持gzip功能，要用到deflate_Module和headers_Module。打开apache的配置文件httpd.conf，大约在105行左右，找到以下两行内容：（这两行不是连续在一起的）<br><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">#LoadModule deflate_module modules/mod_deflate.so</span><br><span class="line">#LoadModule headers_module modules/mod_headers.so</span><br></pre></td></tr></table></figure></p><p>然后将其前面的“#”注释删掉，表示开启gzip压缩功能。开启以后还需要进行相关配置。在httpd.conf文件的最后添加以下内容即可：<br><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line">&lt;IfModule deflate_module&gt;</span><br><span class="line">    #必须的，就像一个开关一样，告诉apache对传输到浏览器的内容进行压缩</span><br><span class="line">    SetOutputFilter DEFLATE</span><br><span class="line">    DeflateCompressionLevel 9</span><br><span class="line">&lt;/IfModule&gt;</span><br></pre></td></tr></table></figure></p><p>最少需要加上以上内容，才可以生gzip功能生效。由于没有做其它的额外配置，所以其它相关的配置均使用Apache的默认设置。这里说一下参数“DeflateCompressionLevel”，它表示压缩级别，值从1到9，值越大表示压缩的越厉害。</p><h2 id="使用ngrok将本机映射为一个外网的Web服务器"><a href="#使用ngrok将本机映射为一个外网的Web服务器" class="headerlink" title="使用ngrok将本机映射为一个外网的Web服务器"></a>使用ngrok将本机映射为一个外网的Web服务器</h2><p>注意：由于默认使用的美国的服务器进行中间转接，所以访问速度炒鸡慢，访问时可启用FQ软件，提高网页打开速度！</p>]]></content>
    
    <summary type="html">
    
      
      
        &lt;link rel=&quot;stylesheet&quot; class=&quot;aplayer-secondary-style-marker&quot; href=&quot;/assets/css/APlayer.min.css&quot;&gt;&lt;script src=&quot;/assets/js/APlayer.min.js&quot; cla
      
    
    </summary>
    
      <category term="Vue" scheme="http://yoursite.com/categories/Vue/"/>
    
    
      <category term="Vue笔记" scheme="http://yoursite.com/tags/Vue%E7%AC%94%E8%AE%B0/"/>
    
  </entry>
  
  <entry>
    <title>YHF-Vue 前后端交互 购物城项目</title>
    <link href="http://yoursite.com/2018/11/04/yhf-vue/"/>
    <id>http://yoursite.com/2018/11/04/yhf-vue/</id>
    <published>2018-11-04T02:13:47.359Z</published>
    <updated>2018-11-15T15:02:20.309Z</updated>
    
    <content type="html"><![CDATA[<link rel="stylesheet" class="aplayer-secondary-style-marker" href="/assets/css/APlayer.min.css"><script src="/assets/js/APlayer.min.js" class="aplayer-secondary-script-marker"></script><h1 id="案例分布"><a href="#案例分布" class="headerlink" title="案例分布"></a>案例分布</h1><ul><li>前端 (2.vue-cms)<ul><li>webpack</li><li>vue</li></ul></li><li>后端 (node_server)<ul><li>node</li></ul></li><li>数据库 (VueUser.sql)<ul><li>mysql</li></ul></li><li>后端接口api</li><li><a href="https://yhf7.github.io/2018/10/17/npm-Plug-in/" target="_blank" rel="noopener">插件安装配置</a></li><li><a href="https://github.com/YHF7/Vue/tree/master/YHF-vue" target="_blank" rel="noopener">完整项目下载Github</a></li><li><a href="https://gitee.com/yhf7/vue0001" target="_blank" rel="noopener">码云前端地址</a></li><li><a href="https://gitee.com/yhf7/node" target="_blank" rel="noopener">码云后端地址</a></li><li>更多vue学习请看 vue1-vue11笔记</li></ul><h1 id="YHF·Vue-项目-说明"><a href="#YHF·Vue-项目-说明" class="headerlink" title="YHF·Vue 项目 说明"></a>YHF·Vue 项目 说明</h1><ol><li>初始化项目<ul><li>搭建基础架构</li><li>安装依赖</li><li>测试架构能否执行</li></ul></li><li><p>搭建项目主页</p><ul><li>主页头部 Header,使用 MintUI 的 Header 组件</li><li>主页底部 Tabbar,使用 MUI 的 Tabbar.html<ul><li>在制作 购物车 小图标的时候，操作会相对多一些：</li><li>先把 扩展图标的 css 样式，拷贝到 项目中</li><li>拷贝 扩展字体库 ttf 文件，到项目中</li><li>为 购物车 小图标 ，添加 如下样式 <code>mui-icon mui-icon-extra mui-icon-extra-cart</code></li></ul></li><li>要在 中间区域放一个 router-view 来展示路由匹配到的区域</li><li>改造 tabbar 为 router-link</li><li>实现路由切换高亮 linkActiveClass: ‘mui-active’ // 覆盖默认的路由高亮的类</li><li>点击 tabbar 中的路由链接，展示对应的路由组件<ul><li>导入对应的组件</li><li>配置路由</li><li>在 app.vue 插入 router-view</li></ul></li><li>添加轮播图</li><li>加载首页轮播图数据<ul><li>获取数据， 如何获取呢， 使用 vue-resource</li><li>使用 vue-resource 的 this.$http.get 获取数据</li><li>获取到的数据，要保存到 data 身上</li><li>使用 v-for 循环渲染 每个 item 项</li></ul></li><li>改造 九宫格 区域的样式</li><li>改造 新闻资讯 路由链接</li><li>新闻资讯 页面 制作<ol><li>绘制界面， 使用 MUI 中的 media-list.html</li><li>使用 vue-resource 获取数据</li><li>渲染真实数据</li></ol></li><li><p>实现 新闻资讯列表 点击跳转到新闻详情</p><ol><li>把列表中的每一项改造为 router-link,同时，在跳转的时候应该提供唯一的 Id 标识符</li><li>创建新闻详情的组件页面 NewsInfo.vue</li><li>在 路由模块中，将 新闻详情的 路由地址 和 组件页面对应起来</li></ol></li><li><p>实现 新闻详情 的 页面布局 和数据渲染</p></li><li><p>单独封装一个 comment.vue 评论子组件</p><ol><li>先创建一个 单独的 comment.vue 组件模板</li><li>在需要使用 comment 组件的 页面中，先手动 导入 comment 组件</li></ol><ul><li><code>import comment from &#39;./comment.vue&#39;</code></li></ul><ol start="3"><li>在父组件中，使用 <code>components</code> 属性，将刚才导入 comment 组件，注册为自己的 子组件</li><li>将注册子组件时候的，注册名称，以 标签形式，在页面中 引用即可</li></ol></li><li><p>获取所有的评论数据显示到页面中</p></li><li><p>实现点击加载更多评论的功能</p><ol><li>为加载更多按钮，绑定点击事件，在事件中，请求 下一页数据</li><li>点击加载更多，让 pageIndex++ , 然后重新调用 this.getComments() 方法重新获取最新一页的数据</li><li>为了防止 新数据 覆盖老数据的情况，我们在 点击加载更多的时候，每当获取到新数据，应该让 老数据 调用 数组的 concat 方法，拼接上新数组</li></ol></li><li><p>发表评论</p><ol><li>把文本框做双向数据绑定</li><li>为发表按钮绑定一个事件</li><li>校验评论内容是否为空，如果为空，则 Toast 提示用户 评论内容不能为空</li><li>通过 vue-resource 发送一个请求，把评论内容提交给 服务器</li><li>当发表评论 OK 后，重新刷新列表，以查看最新的评论</li></ol><ul><li>如果调用 getComments 方法重新刷新评论列表的话，可能只能得到 最后一页的评论，前几页的评论获取不到</li><li>换一种思路： 当评论成功后，在客户端，手动拼接出一个 最新的评论对象，然后 调用 数组的 unshift 方法， 把最新的评论，追加到 data 中 comments 的开头；这样，就能 完美实现刷新评论列表的需求；</li></ul></li><li><p>改造图片分析 按钮为 路由的链接并显示对应的组件页面</p></li><li><p>绘制 图片列表 组件页面结构并美化样式</p><ol><li>制作 顶部的滑动条</li><li>制作 底部的图片列表</li></ol></li><li><p>制作顶部滑动条的坑们：</p><ol><li>需要借助于 MUI 中的 tab-top-webview-main.html</li><li>需要把 slider 区域的 mui-fullscreen 类去掉</li><li><p>滑动条无法正常触发滑动，通过检查官方文档，发现这是 JS 组件，需要被初始化一下：</p><ul><li>导入 mui.js</li><li>调用官方提供的 方式 去初始化：<figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line">mui(&apos;.mui-scroll-wrapper&apos;).scroll(&#123;</span><br><span class="line">  deceleration: 0.0005 //flick 减速系数，系数越大，滚动速度越慢，滚动距离越小，默认值0.0006</span><br><span class="line">&#125;);</span><br></pre></td></tr></table></figure></li></ul></li><li><p>我们在初始化 滑动条 的时候，导入的 mui.js ，但是，控制台报错： <code>Uncaught TypeError: &#39;caller&#39;, &#39;callee&#39;, and &#39;arguments&#39; properties may not be accessed on strict mode</code></p><ul><li>经过我们合理的推测，觉得，可能是 mui.js 中用到了 ‘caller’, ‘callee’, and ‘arguments’ 东西，但是， webpack 打包好的 bundle.js 中，默认是启用严格模式的，所以，这两者冲突了；</li><li>解决方案： 1. 把 mui.js 中的 非严格 模式的代码改掉；但是不现实； 2. 把 webpack 打包时候的严格模式禁用掉；</li><li>最终，我们选择了 plan B 移除严格模式： 使用这个插件 babel-plugin-transform-remove-strict-mode</li></ul></li><li>刚进入 图片分享页面的时候， 滑动条无法正常工作， 经过我们认真的分析，发现， 如果要初始化 滑动条，必须要等 DOM 元素加载完毕，所以，我们把 初始化 滑动条 的代码，搬到了 mounted 生命周期函数中；</li><li>当 滑动条 调试 OK 后，发现， tabbar 无法正常工作了，这时候，我们需要把 每个 tabbar 按钮的 样式中 <code>mui-tab-item</code> 重新改一下名字；</li><li>获取所有分类，并渲染 分类列表；</li></ol></li><li><p>制作图片列表区域</p><ol><li>图片列表需要使用懒加载技术，我们可以使用 Mint-UI 提供的现成的 组件 <code>lazy-load</code></li><li>根据<code>lazy-load</code>的使用文档，尝试使用</li><li>渲染图片列表数据</li></ol></li><li><p>实现了 图片列表的 懒加载改造和 样式美化</p></li><li><p>实现了 点击图片 跳转到 图片详情页面</p><ol><li>在改造 li 成 router-link 的时候，需要使用 tag 属性指定要渲染为 哪种元素</li></ol></li><li><p>实现 详情页面的布局和美化，同时获取数据渲染页面</p></li><li><p>实现 图片详情中 缩略图的功能</p><ol><li>使用 插件 vue-preview 这个缩略图插件</li><li>获取到所有的图片列表，然后使用 v-for 指令渲染数据</li><li>注意： img 标签上的 class 不能去掉</li><li>注意： 每个 图片数据对象中，必须有 w 和 h 属性</li></ol></li><li><p>绘制 商品列表 页面基本结构并美化</p></li><li><p>尝试在手机上 去进行项目的预览和测试</p><ol><li>要保证自己的手机可以正常运行；</li><li>要保证 手机 和 开发项目的电脑 处于同一个 WIFI 环境中，也就是说 手机 可以 访问到 电脑的 IP</li><li>打开自己的 项目中 package.json 文件，在 dev 脚本中，添加一个 –host 指令， 把 当前 电脑的 WIFI IP 地址， 设置为 –host 的指令值；</li></ol></li><li><p>如何查看自己电脑所处 WIFI 的 IP 呢， 在 cmd 终端中运行 <code>ipconfig</code> ， 查看 无线网的 ip 地址</p></li></ul></li><li><p>把项目 git 远端存储库</p></li></ol><ul><li><a href="https://blog.csdn.net/testcs_dn/article/details/38496107" target="_blank" rel="noopener">开源协议</a></li><li><a href="https://www.liaoxuefeng.com/wiki/0013739516305929606dd18361248578c67b8067c8c017b000/00150154460073692d151e784de4d718c67ce836f72c7c4000" target="_blank" rel="noopener">廖雪峰教 git</a></li><li>初始化 git<ul><li>sudo git init</li><li>sudo git status</li><li>sudo git add .</li><li>sudo git commit -m “add init”</li><li>sudo git remote add origin <a href="https://github.com/YHF7/YHF7.github.io.git" target="_blank" rel="noopener">https://github.com/YHF7/YHF7.github.io.git</a></li><li>sudo git push -u origin master</li></ul></li></ul><h1 id="案例效果图"><a href="#案例效果图" class="headerlink" title="案例效果图"></a>案例效果图</h1><p><img src="/yhf-vue/yhf-vue1.png" alt="yhf-vue"><br><img src="/yhf-vue/yhf-vue2.png" alt="yhf-vue"><br><img src="/yhf-vue/yhf-vue3.png" alt="yhf-vue"><br><img src="/yhf-vue/yhf-vue4.png" alt="yhf-vue"><br><img src="/yhf-vue/yhf-vue5.png" alt="yhf-vue"><br><img src="/yhf-vue/yhf-vue6.png" alt="yhf-vue"><br><img src="/yhf-vue/yhf-vue7.png" alt="yhf-vue"></p>]]></content>
    
    <summary type="html">
    
      
      
        &lt;link rel=&quot;stylesheet&quot; class=&quot;aplayer-secondary-style-marker&quot; href=&quot;/assets/css/APlayer.min.css&quot;&gt;&lt;script src=&quot;/assets/js/APlayer.min.js&quot; cla
      
    
    </summary>
    
      <category term="Vue" scheme="http://yoursite.com/categories/Vue/"/>
    
    
      <category term="Vue 案例" scheme="http://yoursite.com/tags/Vue-%E6%A1%88%E4%BE%8B/"/>
    
  </entry>
  
  <entry>
    <title>Vue/node 前后台交互演练</title>
    <link href="http://yoursite.com/2018/10/26/Vue-interactive/"/>
    <id>http://yoursite.com/2018/10/26/Vue-interactive/</id>
    <published>2018-10-26T13:54:22.344Z</published>
    <updated>2018-10-26T14:53:42.593Z</updated>
    
    <content type="html"><![CDATA[<link rel="stylesheet" class="aplayer-secondary-style-marker" href="/assets/css/APlayer.min.css"><script src="/assets/js/APlayer.min.js" class="aplayer-secondary-script-marker"></script><h1 id="前后台交互"><a href="#前后台交互" class="headerlink" title="前后台交互"></a>前后台交互</h1><ul><li>在我们做项目的时候，会分为前端和后端<ul><li>前端：前端负责界面</li><li>后端：后端负责数据处理</li></ul></li><li>前端会有很多的框架和交互的方式<ul><li>在我们做数据交互的时候 会碰到跨域的问题</li><li>当你使用 vue 作为页面框架的时候 就会开启前端的 vue 的 npm 服务</li><li>当你使用 node 作为页面后端的服务器的时候 就会开启后端 的 node 服务</li></ul></li><li>那么问题就来了 当你开启 npm 服务 和 node 服务的时候 分别都有两个端口<ul><li>vue的 npm端口 去获取 node得服务得时候 就会出现在两个不同得服务处在不同得域内</li><li>这样就出现了跨域问题了</li></ul></li><li>既然出现了跨域问题，那么着么去解决这个跨域得问题呢<ol><li>方法一：在后端服务中设置请求报文头</li><li>方法二：在 vue 的 webpack 中的配置文件中设置代理跨域 （不会暂时不写）</li></ol></li></ul><h1 id="后台服务设置跨域-设置请求报文头就可以"><a href="#后台服务设置跨域-设置请求报文头就可以" class="headerlink" title="后台服务设置跨域(设置请求报文头就可以)"></a>后台服务设置跨域(设置请求报文头就可以)</h1><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">//2.0 将所有api的请求响应content-type设置为application/json</span></span><br><span class="line">app.all(<span class="string">'/api/*'</span>, (req, res, next) =&gt; &#123;</span><br><span class="line">  <span class="comment">//设置允许跨域响应报文头</span></span><br><span class="line">  <span class="comment">//设置跨域</span></span><br><span class="line">  <span class="comment">// 启用 Node 服务器端的 cors 跨域</span></span><br><span class="line">  res.header(<span class="string">"Access-Control-Allow-Origin"</span>, <span class="string">"*"</span>);</span><br><span class="line">  res.header(<span class="string">"Access-Control-Allow-Headers"</span>, <span class="string">"X-Requested-With"</span>);</span><br><span class="line">  res.header(<span class="string">"Access-Control-Allow-Methods"</span>, <span class="string">"*"</span>);</span><br><span class="line"></span><br><span class="line">  res.setHeader(<span class="string">'Content-Type'</span>, <span class="string">'application/json;charset=utf-8'</span>);</span><br><span class="line">  next();</span><br><span class="line">&#125;);</span><br></pre></td></tr></table></figure><h1 id="项目演练"><a href="#项目演练" class="headerlink" title="项目演练"></a>项目演练</h1><ol><li>项目地址<ul><li><a href="https://github.com/YHF7/Vue/tree/master/vue%E5%89%8D%E5%90%8E%E5%8F%B0%E4%BA%A4%E4%BA%92" target="_blank" rel="noopener">Vue与Node交互项目演练</a></li></ul></li><li>使用项目<ul><li>把地址里面都 vue-jh 这个包下载下来（用迅雷可以直接下载）</li><li>项目分布<ul><li>vue-tepmlate 是 vue 的前端案例<ul><li>index.html 是渲染的主页（留坑）</li><li>App.vue 是主页 vue 模块</li><li>main.js 是业务逻辑</li><li>router.js 路由</li><li>webpack.config.js 是 vue webpack 的配置文件</li></ul></li><li>node_server 是 node 的后端服务<ul><li>app.js 是node 服务</li><li>controller.js 业务逻辑</li><li>model.js 操作数据库</li><li>router.js 路由</li></ul></li><li>分别打开这两个文件在终端安装依赖<ul><li>suco cnpm i (安装依赖包)</li></ul></li><li>分别开启服务<ul><li>vue-tepmlate<ul><li>sudo npm run dev</li></ul></li><li>node_server<ul><li>sudo node app.js (或) sudo nodemon app.js</li></ul></li></ul></li><li>还有个最重要的是配置数据库<ul><li>在 node_serve 中的model.js 文件中配置本地的mysql数据库</li></ul></li></ul></li></ul></li></ol>]]></content>
    
    <summary type="html">
    
      
      
        &lt;link rel=&quot;stylesheet&quot; class=&quot;aplayer-secondary-style-marker&quot; href=&quot;/assets/css/APlayer.min.css&quot;&gt;&lt;script src=&quot;/assets/js/APlayer.min.js&quot; cla
      
    
    </summary>
    
      <category term="Vue" scheme="http://yoursite.com/categories/Vue/"/>
    
    
      <category term="交互" scheme="http://yoursite.com/tags/%E4%BA%A4%E4%BA%92/"/>
    
  </entry>
  
  <entry>
    <title>心态蹦</title>
    <link href="http://yoursite.com/2018/10/24/2018-10-24/"/>
    <id>http://yoursite.com/2018/10/24/2018-10-24/</id>
    <published>2018-10-24T13:13:39.493Z</published>
    <updated>2018-10-24T13:22:37.324Z</updated>
    
    <content type="html"><![CDATA[<link rel="stylesheet" class="aplayer-secondary-style-marker" href="/assets/css/APlayer.min.css"><script src="/assets/js/APlayer.min.js" class="aplayer-secondary-script-marker"></script><p>颓废了好几天的我今天终于下定决心要走出颓废的日子，我告诉自己在这样下去真的点就输了一辈子了，不想在这样颓废下去，遇到一点点的问题，就颓废这是作为一个十几岁的青年该有的的吗，为什么要这样下去<br>后端开发是啥 我要学过后台开发啊，为啥我就写不出来呢，接口？交互？ 这些我好像都学过啊， 但是 vue 与 node php 如何交互呢？ 作为主攻前端的 是应该花时间系统的去学习后端吗 ， node 刚学完啊， 为什么不去 用 node 呢<br>有想用 node 也有想用 php 但是着么写呢 这个交互的过程着么去做呢 就因为做个练习没有后台接口 颓废了好几天？ 虽然我还没有解决这个问题 但是我不想在这样下去了，我会输掉自己的 继续努力</p>]]></content>
    
    <summary type="html">
    
      
      
        &lt;link rel=&quot;stylesheet&quot; class=&quot;aplayer-secondary-style-marker&quot; href=&quot;/assets/css/APlayer.min.css&quot;&gt;&lt;script src=&quot;/assets/js/APlayer.min.js&quot; cla
      
    
    </summary>
    
      <category term="个人" scheme="http://yoursite.com/categories/%E4%B8%AA%E4%BA%BA/"/>
    
    
      <category term="个人" scheme="http://yoursite.com/tags/%E4%B8%AA%E4%BA%BA/"/>
    
  </entry>
  
  <entry>
    <title>Vue day8/9</title>
    <link href="http://yoursite.com/2018/10/24/Vue-day8%609/"/>
    <id>http://yoursite.com/2018/10/24/Vue-day8`9/</id>
    <published>2018-10-24T01:56:13.406Z</published>
    <updated>2018-11-04T02:43:03.899Z</updated>
    
    <content type="html"><![CDATA[<link rel="stylesheet" class="aplayer-secondary-style-marker" href="/assets/css/APlayer.min.css"><script src="/assets/js/APlayer.min.js" class="aplayer-secondary-script-marker"></script><h1 id="Promise"><a href="#Promise" class="headerlink" title="Promise"></a>Promise</h1><h2 id="Promise-概念"><a href="#Promise-概念" class="headerlink" title="Promise 概念"></a>Promise 概念</h2><ol><li>Promise 是一个 构造函数，既然是构造函数， 那么，我们就可以  new Promise() 得到一个 Promise 的实例；</li><li>在 Promise 上，有两个函数，分别叫做 resolve（成功之后的回调函数） 和 reject（失败之后的回调函数）</li><li>在 Promise 构造函数的 Prototype 属性上，有一个 .then() 方法，也就说，只要是 Promise 构造函数创建的实例，都可以访问到 .then() 方法</li><li>Promise 表示一个 异步操作；每当我们 new 一个 Promise 的实例，这个实例，就表示一个具体的异步操作；</li><li>既然 Promise 创建的实例，是一个异步操作，那么，这个 异步操作的结果，只能有两种状态：<ul><li>状态1： 异步执行成功了，需要在内部调用 成功的回调函数 resolve 把结果返回给调用者；</li><li>状态2： 异步执行失败了，需要在内部调用 失败的回调函数 reject 把结果返回给调用者；</li><li>由于 Promise 的实例，是一个异步操作，所以，内部拿到 操作的结果后，无法使用 return 把操作的结果返回给调用者； 这时候，只能使用回调函数的形式，来把 成功 或 失败的结果，返回给调用者；</li></ul></li><li>我们可以在 new 出来的 Promise 实例上，调用 .then() 方法，【预先】 为 这个 Promise 异步操作，指定 成功（resolve） 和 失败（reject） 回调函数；</li></ol><ul><li>注意：这里 new 出来的 promise， 只是代表 【形式上】的一个异步操作；</li><li>什么是形式上的异步操作：就是说，我们只知道它是一个异步操作，但是做什么具体的异步事情，目前还不清楚</li><li>var promise = new Promise()</li><li>每当 new 一个 Promise 实例的时候，就会立即 执行这个 异步操作中的代码</li><li>也就是说，new 的时候，除了能够得到 一个 promise 实例之外，还会立即调用 我们为 Promise 构造函数传递的那个 function，执行这个 function 中的 异步操作代码；</li></ul><h2 id="Promise-使用"><a href="#Promise-使用" class="headerlink" title="Promise 使用"></a>Promise 使用</h2><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">const</span> fs = <span class="built_in">require</span>(<span class="string">'fs'</span>)</span><br><span class="line"><span class="keyword">const</span> path = <span class="built_in">require</span>(<span class="string">'path'</span>)</span><br><span class="line"></span><br><span class="line"><span class="comment">// 定义一个promise</span></span><br><span class="line"><span class="comment">// 初衷： 给路径，返回读取到的内容</span></span><br><span class="line"><span class="function"><span class="keyword">function</span> <span class="title">getFileByPath</span>(<span class="params">fpath</span>) </span>&#123;</span><br><span class="line">  <span class="keyword">return</span> <span class="keyword">new</span> <span class="built_in">Promise</span>(<span class="function"><span class="keyword">function</span> (<span class="params">resolve, reject</span>) </span>&#123;</span><br><span class="line">    fs.readFile(fpath, <span class="string">'utf-8'</span>, (err, dataStr) =&gt; &#123;</span><br><span class="line"></span><br><span class="line">      <span class="keyword">if</span> (err) <span class="keyword">return</span> reject(err)</span><br><span class="line">      resolve(dataStr)</span><br><span class="line"></span><br><span class="line">    &#125;)</span><br><span class="line">  &#125;)</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"></span><br><span class="line">getFileByPath(path.join(__dirname, <span class="string">'./files/1.txt'</span>)</span><br><span class="line">  .then(<span class="function"><span class="keyword">function</span> (<span class="params">data</span>) </span>&#123; <span class="comment">// .then 成功时调用</span></span><br><span class="line">    <span class="built_in">console</span>.log(data + <span class="string">'-------'</span>)</span><br><span class="line">  &#125;, <span class="function"><span class="keyword">function</span> (<span class="params">err</span>) </span>&#123; <span class="comment">// 第二个函数 失败时调用</span></span><br><span class="line">    <span class="built_in">console</span>.log(err.message)</span><br><span class="line">  &#125;)</span><br></pre></td></tr></table></figure><h2 id="Promise-使用回调地狱"><a href="#Promise-使用回调地狱" class="headerlink" title="Promise 使用回调地狱"></a>Promise 使用回调地狱</h2><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">const</span> fs = <span class="built_in">require</span>(<span class="string">'fs'</span>)</span><br><span class="line"><span class="keyword">const</span> path = <span class="built_in">require</span>(<span class="string">'path'</span>)</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">function</span> <span class="title">getFileByPath</span>(<span class="params">fpath</span>) </span>&#123;</span><br><span class="line">  <span class="keyword">return</span> <span class="keyword">new</span> <span class="built_in">Promise</span>(<span class="function"><span class="keyword">function</span> (<span class="params">resolve, reject</span>) </span>&#123;</span><br><span class="line">    fs.readFile(fpath, <span class="string">'utf-8'</span>, (err, dataStr) =&gt; &#123;</span><br><span class="line"></span><br><span class="line">      <span class="keyword">if</span> (err) <span class="keyword">return</span> reject(err)</span><br><span class="line">      resolve(dataStr)</span><br><span class="line"></span><br><span class="line">    &#125;)</span><br><span class="line">  &#125;)</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"></span><br><span class="line">getFileByPath(<span class="string">'./files/1.txt'</span>)</span><br><span class="line">  .then(<span class="function"><span class="keyword">function</span> (<span class="params">data</span>) </span>&#123;</span><br><span class="line">    <span class="built_in">console</span>.log(data)</span><br><span class="line"></span><br><span class="line">    <span class="comment">// 读取文件2</span></span><br><span class="line">    <span class="keyword">return</span> getFileByPath(<span class="string">'./files/2.txt'</span>)</span><br><span class="line">  &#125;)</span><br><span class="line">  .then(<span class="function"><span class="keyword">function</span> (<span class="params">data</span>) </span>&#123;</span><br><span class="line">    <span class="built_in">console</span>.log(data)</span><br><span class="line"></span><br><span class="line">    <span class="keyword">return</span> getFileByPath(<span class="string">'./files/3.txt'</span>)</span><br><span class="line">  &#125;)</span><br><span class="line">  .then(<span class="function"><span class="keyword">function</span> (<span class="params">data</span>) </span>&#123;</span><br><span class="line">    <span class="built_in">console</span>.log(data)</span><br><span class="line">  &#125;)</span><br><span class="line">  .catch(<span class="function"><span class="keyword">function</span> (<span class="params">err</span>) </span>&#123; <span class="comment">// catch 的作用： 如果前面有任何的 Promise 执行失败，则立即终止所有 promise 的执行，并 马上进入 catch 去处理 Promise中 抛出的异常；</span></span><br><span class="line">    <span class="built_in">console</span>.log(<span class="string">'这是自己的处理方式：'</span> + err.message)</span><br><span class="line">  &#125;)</span><br></pre></td></tr></table></figure><h1 id="使用mui的tab-top-webview-main完成分类滑动栏"><a href="#使用mui的tab-top-webview-main完成分类滑动栏" class="headerlink" title="使用mui的tab-top-webview-main完成分类滑动栏"></a>使用mui的<code>tab-top-webview-main</code>完成分类滑动栏</h1><h2 id="兼容问题"><a href="#兼容问题" class="headerlink" title="兼容问题"></a>兼容问题</h2><ol><li><p>和 App.vue 中的 <code>router-link</code> 身上的类名 <code>mui-tab-item</code> 存在兼容性问题，导致tab栏失效，可以把<code>mui-tab-item</code>改名为<code>mui-tab-item1</code>，并复制相关的类样式，来解决这个问题；</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br></pre></td><td class="code"><pre><span class="line">.mui-bar-tab .mui-tab-item1.mui-active &#123;</span><br><span class="line">  color: #007aff;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line">.mui-bar-tab .mui-tab-item1 &#123;</span><br><span class="line">  display: table-cell;</span><br><span class="line">  overflow: hidden;</span><br><span class="line">  width: 1%;</span><br><span class="line">  height: 50px;</span><br><span class="line">  text-align: center;</span><br><span class="line">  vertical-align: middle;</span><br><span class="line">  white-space: nowrap;</span><br><span class="line">  text-overflow: ellipsis;</span><br><span class="line">  color: #929292;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line">.mui-bar-tab .mui-tab-item1 .mui-icon &#123;</span><br><span class="line">  top: 3px;</span><br><span class="line">  width: 24px;</span><br><span class="line">  height: 24px;</span><br><span class="line">  padding-top: 0;</span><br><span class="line">  padding-bottom: 0;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line">.mui-bar-tab .mui-tab-item1 .mui-icon~.mui-tab-label &#123;</span><br><span class="line">  font-size: 11px;</span><br><span class="line">  display: block;</span><br><span class="line">  overflow: hidden;</span><br><span class="line">  text-overflow: ellipsis;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure></li><li><p><code>tab-top-webview-main</code>组件第一次显示到页面中的时候，无法被滑动的解决方案：</p><ul><li><p>先导入 mui 的JS文件:</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">import mui from &apos;../../../lib/mui/js/mui.min.js&apos;</span><br></pre></td></tr></table></figure></li><li><p>在 组件的 <code>mounted</code> 事件钩子中，注册 mui 的滚动事件：</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line">mounted() &#123;</span><br><span class="line">  // 需要在组件的 mounted 事件钩子中，注册 mui 的 scroll 滚动事件</span><br><span class="line">      mui(&apos;.mui-scroll-wrapper&apos;).scroll(&#123;</span><br><span class="line">        deceleration: 0.0005 //flick 减速系数，系数越大，滚动速度越慢，滚动距离越小，默认值0.0006</span><br><span class="line">      &#125;);</span><br><span class="line">true&#125;</span><br></pre></td></tr></table></figure></li></ul></li><li><p>滑动的时候报警告：<code>Unable to preventDefault inside passive event listener due to target being treated as passive. See https://www.chromestatus.com/features/5093566007214080</code></p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">解决方法，可以加上* &#123; touch-action: none; &#125; 这句样式去掉。</span><br></pre></td></tr></table></figure></li></ol><p>原因：（是chrome为了提高页面的滑动流畅度而新折腾出来的一个东西） <a href="http://www.cnblogs.com/pearl07/p/6589114.html" target="_blank" rel="noopener">http://www.cnblogs.com/pearl07/p/6589114.html</a><br><a href="https://developer.mozilla.org/zh-CN/docs/Web/CSS/touch-action" target="_blank" rel="noopener">https://developer.mozilla.org/zh-CN/docs/Web/CSS/touch-action</a></p><h1 id="移除严格模式"><a href="#移除严格模式" class="headerlink" title="移除严格模式"></a>移除严格模式</h1><p><a href="https://github.com/genify/babel-plugin-transform-remove-strict-mode" target="_blank" rel="noopener">babel-plugin-transform-remove-strict-mode</a></p><h2 id="vue-preview"><a href="#vue-preview" class="headerlink" title="vue-preview"></a><a href="https://github.com/LS1231/vue-preview" target="_blank" rel="noopener">vue-preview</a></h2><p>一个Vue集成PhotoSwipe图片预览插件</p>]]></content>
    
    <summary type="html">
    
      
      
        &lt;link rel=&quot;stylesheet&quot; class=&quot;aplayer-secondary-style-marker&quot; href=&quot;/assets/css/APlayer.min.css&quot;&gt;&lt;script src=&quot;/assets/js/APlayer.min.js&quot; cla
      
    
    </summary>
    
      <category term="Vue" scheme="http://yoursite.com/categories/Vue/"/>
    
    
      <category term="Vue笔记" scheme="http://yoursite.com/tags/Vue%E7%AC%94%E8%AE%B0/"/>
    
  </entry>
  
  <entry>
    <title>Vue day7</title>
    <link href="http://yoursite.com/2018/10/20/Vue-day7/"/>
    <id>http://yoursite.com/2018/10/20/Vue-day7/</id>
    <published>2018-10-20T15:43:10.221Z</published>
    <updated>2018-10-24T01:54:12.430Z</updated>
    
    <content type="html"><![CDATA[<link rel="stylesheet" class="aplayer-secondary-style-marker" href="/assets/css/APlayer.min.css"><script src="/assets/js/APlayer.min.js" class="aplayer-secondary-script-marker"></script><h1 id="使用-饿了么的-MintUI-组件"><a href="#使用-饿了么的-MintUI-组件" class="headerlink" title="使用 饿了么的 MintUI 组件"></a>使用 饿了么的 MintUI 组件</h1><p><a href="https://github.com/ElemeFE/mint-ui" target="_blank" rel="noopener">Github 仓储地址</a></p><p><a href="http://mint-ui.github.io/#!/zh-cn" target="_blank" rel="noopener">Mint-UI官方文档</a></p><ol><li>导入所有MintUI组件：</li></ol><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line"></span><br><span class="line">import MintUI from &apos;mint-ui&apos;</span><br></pre></td></tr></table></figure><ol start="2"><li>导入样式表：</li></ol><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line"></span><br><span class="line">import &apos;mint-ui/lib/style.css&apos;</span><br></pre></td></tr></table></figure><ol start="3"><li>在 vue 中使用 MintUI中的Button按钮和Toast弹框提示：</li></ol><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line"></span><br><span class="line">Vue.use(MintUI)</span><br></pre></td></tr></table></figure><ol start="4"><li>使用的例子：</li></ol><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line"></span><br><span class="line">&lt;mt-button type=&quot;primary&quot; size=&quot;large&quot;&gt;primary&lt;/mt-button&gt;</span><br></pre></td></tr></table></figure><h1 id="Mint-UI中按需导入的配置方式"><a href="#Mint-UI中按需导入的配置方式" class="headerlink" title="Mint-UI中按需导入的配置方式"></a>Mint-UI中按需导入的配置方式</h1><ol><li><p>修改 .babelrc</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br></pre></td><td class="code"><pre><span class="line">&#123;</span><br><span class="line">  &quot;presets&quot;: [</span><br><span class="line">    [&quot;es2015&quot;, &#123; &quot;modules&quot;: false &#125;]</span><br><span class="line">  ],</span><br><span class="line">  &quot;plugins&quot;: [[&quot;component&quot;, [</span><br><span class="line">    &#123;</span><br><span class="line">      &quot;libraryName&quot;: &quot;mint-ui&quot;,</span><br><span class="line">      &quot;style&quot;: true</span><br><span class="line">    &#125;</span><br><span class="line">  ]]]</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure></li><li><p>导入所有babel-plugin-componen组件：</p></li></ol><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line"></span><br><span class="line">import &#123; Button, Cell &#125; from &apos;mint-ui&apos;</span><br></pre></td></tr></table></figure><ol start="3"><li>引入部分组件</li></ol><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><span class="line"></span><br><span class="line">Vue.component(Button.name, Button)</span><br><span class="line">// Button.name 是可以自定义的 例如 Vue.component(&quot;mybtn&quot;, Button)</span><br><span class="line">Vue.component(Cell.name, Cell)</span><br><span class="line">/* 或写为</span><br><span class="line"> * Vue.use(Button)</span><br><span class="line"> * Vue.use(Cell)</span><br><span class="line"> */</span><br></pre></td></tr></table></figure><ol start="4"><li>使用的例子：</li></ol><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line"></span><br><span class="line">&lt;mt-button type=&quot;primary&quot; size=&quot;large&quot;&gt;primary&lt;/mt-button&gt;</span><br><span class="line">// 假如改变了 名字 那就要用自定义的组件名称 &lt;mybtn&gt;1233&lt;/mybtn&gt;</span><br></pre></td></tr></table></figure><h1 id="Mint-UI中按需导入的配置方式-1"><a href="#Mint-UI中按需导入的配置方式-1" class="headerlink" title="Mint-UI中按需导入的配置方式"></a>Mint-UI中按需导入的配置方式</h1><h1 id="使用-MUI-代码片段"><a href="#使用-MUI-代码片段" class="headerlink" title="使用 MUI 代码片段"></a>使用 MUI 代码片段</h1><blockquote><p>注意： MUI 不同于 Mint-UI，MUI只是开发出来的一套好用的代码片段，里面提供了配套的样式、配套的HTML代码段，类似于 Bootstrap； 而 Mint-UI，是真正的组件库，是使用 Vue 技术封装出来的 成套的组件，可以无缝的和 VUE项目进行集成开发；<br>因此，从体验上来说， Mint-UI体验更好，因为这是别人帮我们开发好的现成的Vue组件；<br>从体验上来说， MUI和Bootstrap类似；<br>理论上，任何项目都可以使用 MUI 或 Bootstrap，但是，MInt-UI只适用于Vue项目；</p></blockquote><p>注意： MUI 并不能使用  npm 去下载，需要自己手动从 github 上，下载现成的包，自己解压出来，然后手动拷贝到项目中使用；</p><p><a href="http://dev.dcloud.net.cn/mui/" target="_blank" rel="noopener">官网首页</a></p><p><a href="http://dev.dcloud.net.cn/mui/ui/" target="_blank" rel="noopener">文档地址</a></p><ol><li>导入 MUI 的样式表：</li></ol><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line"></span><br><span class="line">import &apos;../lib/mui/css/mui.min.css&apos;</span><br></pre></td></tr></table></figure><ol start="2"><li>在<code>webpack.config.js</code>中添加新的loader规则：</li></ol><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line"></span><br><span class="line">&#123; test: /\.(png|jpg|gif|ttf)$/, use: &apos;url-loader&apos; &#125;</span><br></pre></td></tr></table></figure><ol start="3"><li>根据官方提供的文档和example，尝试使用相关的组件</li></ol><h1 id="将项目源码托管到oschina中"><a href="#将项目源码托管到oschina中" class="headerlink" title="将项目源码托管到oschina中"></a>将项目源码托管到oschina中</h1><ol><li><p>点击头像 -&gt; 修改资料 -&gt; SSH公钥 <a href="http://git.mydoc.io/?t=154712" target="_blank" rel="noopener">如何生成SSH公钥</a></p></li><li><p>创建自己的空仓储，使用 <code>git config --global user.name &quot;用户名&quot;</code> 和 <code>git config --global user.email ***@**.com</code> 来全局配置提交时用户的名称和邮箱</p></li><li><p>使用 <code>git init</code> 在本地初始化项目</p></li><li><p>使用 <code>touch README.md</code> 和 <code>touch .gitignore</code> 来创建项目的说明文件和忽略文件；</p></li><li><p>使用 <code>git add .</code> 将所有文件托管到 git 中</p></li><li><p>使用 <code>git commit -m &quot;init project&quot;</code> 将项目进行本地提交</p></li><li><p>使用 <code>git remote add origin 仓储地址</code>将本地项目和远程仓储连接，并使用origin最为远程仓储的别名</p></li><li><p>使用 <code>git push -u origin master</code> 将本地代码push到仓储中</p></li></ol><h1 id="App-vue-组件的基本设置"><a href="#App-vue-组件的基本设置" class="headerlink" title="App.vue 组件的基本设置"></a>App.vue 组件的基本设置</h1><ol><li><p>头部的固定导航栏使用 <code>Mint-UI</code> 的 <code>Header</code> 组件；</p></li><li><p>底部的页签使用 <code>mui</code> 的 <code>tabbar</code>;</p></li><li><p>购物车的图标，使用 <code>icons-extra</code> 中的 <code>mui-icon-extra mui-icon-extra-cart</code>，同时，应该把其依赖的字体图标文件 <code>mui-icons-extra.ttf</code>，复制到 <code>fonts</code> 目录下！</p></li><li><p>将底部的页签，改造成 <code>router-link</code> 来实现单页面的切换；</p></li><li><p>Tab Bar 路由激活时候设置高亮的两种方式：</p><ul><li>全局设置样式如下：</li></ul><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line"></span><br><span class="line">.router-link-active&#123;</span><br><span class="line"></span><br><span class="line">    color:#007aff !important;</span><br><span class="line"></span><br><span class="line">  &#125;</span><br></pre></td></tr></table></figure><ul><li>或者在 <code>new VueRouter</code> 的时候，通过 <code>linkActiveClass</code> 来指定高亮的类：</li></ul><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br></pre></td><td class="code"><pre><span class="line"></span><br><span class="line">// 创建路由对象</span><br><span class="line"></span><br><span class="line">  var router = new VueRouter(&#123;</span><br><span class="line"></span><br><span class="line">    routes: [</span><br><span class="line"></span><br><span class="line">      &#123; path: &apos;/&apos;, redirect: &apos;/home&apos; &#125;</span><br><span class="line"></span><br><span class="line">    ],</span><br><span class="line"></span><br><span class="line">    linkActiveClass: &apos;mui-active&apos;</span><br><span class="line"></span><br><span class="line">  &#125;);</span><br></pre></td></tr></table></figure></li></ol><h1 id="实现-tabbar-页签不同组件页面的切换"><a href="#实现-tabbar-页签不同组件页面的切换" class="headerlink" title="实现 tabbar 页签不同组件页面的切换"></a>实现 tabbar 页签不同组件页面的切换</h1><ol><li><p>将 tabbar 改造成 <code>router-link</code> 形式，并指定每个连接的 <code>to</code> 属性；</p></li><li><p>在入口文件中导入需要展示的组件，并创建路由对象：</p></li></ol><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br></pre></td><td class="code"><pre><span class="line"></span><br><span class="line">// 导入需要展示的组件</span><br><span class="line"></span><br><span class="line">import Home from &apos;./components/home/home.vue&apos;</span><br><span class="line"></span><br><span class="line">import Member from &apos;./components/member/member.vue&apos;</span><br><span class="line"></span><br><span class="line">import Shopcar from &apos;./components/shopcar/shopcar.vue&apos;</span><br><span class="line"></span><br><span class="line">import Search from &apos;./components/search/search.vue&apos;</span><br><span class="line"></span><br><span class="line"></span><br><span class="line"></span><br><span class="line">// 创建路由对象</span><br><span class="line"></span><br><span class="line">var router = new VueRouter(&#123;</span><br><span class="line"></span><br><span class="line">  routes: [</span><br><span class="line"></span><br><span class="line">    &#123; path: &apos;/&apos;, redirect: &apos;/home&apos; &#125;,</span><br><span class="line"></span><br><span class="line">    &#123; path: &apos;/home&apos;, component: Home &#125;,</span><br><span class="line"></span><br><span class="line">    &#123; path: &apos;/member&apos;, component: Member &#125;,</span><br><span class="line"></span><br><span class="line">    &#123; path: &apos;/shopcar&apos;, component: Shopcar &#125;,</span><br><span class="line"></span><br><span class="line">    &#123; path: &apos;/search&apos;, component: Search &#125;</span><br><span class="line"></span><br><span class="line">  ],</span><br><span class="line"></span><br><span class="line">  linkActiveClass: &apos;mui-active&apos;</span><br><span class="line"></span><br><span class="line">&#125;);</span><br></pre></td></tr></table></figure><h1 id="使用-mt-swipe-轮播图组件"><a href="#使用-mt-swipe-轮播图组件" class="headerlink" title="使用 mt-swipe 轮播图组件"></a>使用 mt-swipe 轮播图组件</h1><ol><li>假数据：</li></ol><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br></pre></td><td class="code"><pre><span class="line"></span><br><span class="line">lunbo: [</span><br><span class="line"></span><br><span class="line">        &apos;http://www.itcast.cn/images/slidead/BEIJING/2017440109442800.jpg&apos;,</span><br><span class="line"></span><br><span class="line">        &apos;http://www.itcast.cn/images/slidead/BEIJING/2017511009514700.jpg&apos;,</span><br><span class="line"></span><br><span class="line">        &apos;http://www.itcast.cn/images/slidead/BEIJING/2017421414422600.jpg&apos;</span><br><span class="line"></span><br><span class="line">      ]</span><br></pre></td></tr></table></figure><ol start="2"><li>引入轮播图组件：</li></ol><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br></pre></td><td class="code"><pre><span class="line"></span><br><span class="line">&lt;!-- Mint-UI 轮播图组件 --&gt;</span><br><span class="line"></span><br><span class="line">    &lt;div class=&quot;home-swipe&quot;&gt;</span><br><span class="line"></span><br><span class="line">      &lt;mt-swipe :auto=&quot;4000&quot;&gt;</span><br><span class="line"></span><br><span class="line">        &lt;mt-swipe-item v-for=&quot;(item, i) in lunbo&quot; :key=&quot;i&quot;&gt;</span><br><span class="line"></span><br><span class="line">          &lt;img :src=&quot;item&quot; alt=&quot;&quot;&gt;</span><br><span class="line"></span><br><span class="line">        &lt;/mt-swipe-item&gt;</span><br><span class="line"></span><br><span class="line">      &lt;/mt-swipe&gt;</span><br><span class="line"></span><br><span class="line">    &lt;/div&gt;</span><br><span class="line"></span><br><span class="line">  &lt;/div&gt;</span><br></pre></td></tr></table></figure><h1 id="在-vue组件中使用vue-resource获取数据"><a href="#在-vue组件中使用vue-resource获取数据" class="headerlink" title="在.vue组件中使用vue-resource获取数据"></a>在<code>.vue</code>组件中使用<code>vue-resource</code>获取数据</h1><ol><li><p>运行<code>cnpm i vue-resource -S</code>安装模块</p></li><li><p>导入 vue-resource 组件</p></li></ol><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line"></span><br><span class="line">import VueResource from &apos;vue-resource&apos;</span><br></pre></td></tr></table></figure><ol start="3"><li>在vue中使用 vue-resource 组件</li></ol><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line"></span><br><span class="line">Vue.use(VueResource);</span><br></pre></td></tr></table></figure><h1 id="使用mui的tab-top-webview-main完成分类滑动栏"><a href="#使用mui的tab-top-webview-main完成分类滑动栏" class="headerlink" title="使用mui的tab-top-webview-main完成分类滑动栏"></a>使用mui的<code>tab-top-webview-main</code>完成分类滑动栏</h1><h2 id="兼容问题"><a href="#兼容问题" class="headerlink" title="兼容问题"></a>兼容问题</h2><ol><li><p>和 App.vue 中的 <code>router-link</code> 身上的类名 <code>mui-tab-item</code> 存在兼容性问题，导致tab栏失效，可以把<code>mui-tab-item</code>改名为<code>mui-tab-item1</code>，并复制相关的类样式，来解决这个问题；</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br></pre></td><td class="code"><pre><span class="line">.mui-bar-tab .mui-tab-item1.mui-active &#123;</span><br><span class="line">  color: #007aff;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line">.mui-bar-tab .mui-tab-item1 &#123;</span><br><span class="line">  display: table-cell;</span><br><span class="line">  overflow: hidden;</span><br><span class="line">  width: 1%;</span><br><span class="line">  height: 50px;</span><br><span class="line">  text-align: center;</span><br><span class="line">  vertical-align: middle;</span><br><span class="line">  white-space: nowrap;</span><br><span class="line">  text-overflow: ellipsis;</span><br><span class="line">  color: #929292;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line">.mui-bar-tab .mui-tab-item1 .mui-icon &#123;</span><br><span class="line">  top: 3px;</span><br><span class="line">  width: 24px;</span><br><span class="line">  height: 24px;</span><br><span class="line">  padding-top: 0;</span><br><span class="line">  padding-bottom: 0;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line">.mui-bar-tab .mui-tab-item1 .mui-icon~.mui-tab-label &#123;</span><br><span class="line">  font-size: 11px;</span><br><span class="line">  display: block;</span><br><span class="line">  overflow: hidden;</span><br><span class="line">  text-overflow: ellipsis;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure></li><li><p><code>tab-top-webview-main</code>组件第一次显示到页面中的时候，无法被滑动的解决方案：</p><ul><li><p>先导入 mui 的JS文件:</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">import mui from &apos;../../../lib/mui/js/mui.min.js&apos;</span><br></pre></td></tr></table></figure></li><li><p>在 组件的 <code>mounted</code> 事件钩子中，注册 mui 的滚动事件：</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line">mounted() &#123;</span><br><span class="line">  // 需要在组件的 mounted 事件钩子中，注册 mui 的 scroll 滚动事件</span><br><span class="line">      mui(&apos;.mui-scroll-wrapper&apos;).scroll(&#123;</span><br><span class="line">        deceleration: 0.0005 //flick 减速系数，系数越大，滚动速度越慢，滚动距离越小，默认值0.0006</span><br><span class="line">      &#125;);</span><br><span class="line">true&#125;</span><br></pre></td></tr></table></figure></li></ul></li><li><p>滑动的时候报警告：<code>Unable to preventDefault inside passive event listener due to target being treated as passive. See https://www.chromestatus.com/features/5093566007214080</code></p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">解决方法，可以加上* &#123; touch-action: none; &#125; 这句样式去掉。</span><br></pre></td></tr></table></figure></li></ol><p>原因：（是chrome为了提高页面的滑动流畅度而新折腾出来的一个东西） <a href="http://www.cnblogs.com/pearl07/p/6589114.html" target="_blank" rel="noopener">http://www.cnblogs.com/pearl07/p/6589114.html</a><br><a href="https://developer.mozilla.org/zh-CN/docs/Web/CSS/touch-action" target="_blank" rel="noopener">https://developer.mozilla.org/zh-CN/docs/Web/CSS/touch-action</a></p><h1 id="移除严格模式"><a href="#移除严格模式" class="headerlink" title="移除严格模式"></a>移除严格模式</h1><p><a href="https://github.com/genify/babel-plugin-transform-remove-strict-mode" target="_blank" rel="noopener">babel-plugin-transform-remove-strict-mode</a></p><h1 id="vue-preview"><a href="#vue-preview" class="headerlink" title="vue-preview"></a><a href="https://github.com/LS1231/vue-preview" target="_blank" rel="noopener">vue-preview</a></h1><p>一个Vue集成PhotoSwipe图片预览插件</p>]]></content>
    
    <summary type="html">
    
      
      
        &lt;link rel=&quot;stylesheet&quot; class=&quot;aplayer-secondary-style-marker&quot; href=&quot;/assets/css/APlayer.min.css&quot;&gt;&lt;script src=&quot;/assets/js/APlayer.min.js&quot; cla
      
    
    </summary>
    
      <category term="Vue" scheme="http://yoursite.com/categories/Vue/"/>
    
    
      <category term="Vue笔记" scheme="http://yoursite.com/tags/Vue%E7%AC%94%E8%AE%B0/"/>
    
  </entry>
  
  <entry>
    <title>Vue day6 案例</title>
    <link href="http://yoursite.com/2018/10/19/2018-10-19/"/>
    <id>http://yoursite.com/2018/10/19/2018-10-19/</id>
    <published>2018-10-19T14:17:23.469Z</published>
    <updated>2018-10-19T14:30:33.114Z</updated>
    
    <content type="html"><![CDATA[<link rel="stylesheet" class="aplayer-secondary-style-marker" href="/assets/css/APlayer.min.css"><script src="/assets/js/APlayer.min.js" class="aplayer-secondary-script-marker"></script><h1 id="案例分布"><a href="#案例分布" class="headerlink" title="案例分布"></a>案例分布</h1><ol><li>webpack-vue (webpack中使用vue)</li><li>webpack-vue-router</li><li>webpack-路由嵌套 抽离路由</li></ol><h1 id="一、webpack-vue"><a href="#一、webpack-vue" class="headerlink" title="一、webpack-vue"></a>一、webpack-vue</h1><h2 id="重点"><a href="#重点" class="headerlink" title="重点"></a>重点</h2><ul><li>webpack 中使用vue<ul><li>安装 vue 包</li><li>导入组件</li><li>安装 vue 打包插件</li></ul></li><li>render 渲染页面</li><li>export default 和 export 向外暴露成员<ul><li>注意： export default 向外暴露的成员，可以使用任意的变量来接收</li><li>注意： 在一个模块中，export default 只允许向外暴露1次</li><li>注意： 在一个模块中，可以同时使用 export default 和 export 向外暴露成员</li></ul></li><li>import 接收成员</li></ul><h2 id="小案例-前往github"><a href="#小案例-前往github" class="headerlink" title="小案例(前往github)"></a>小案例(前往github)</h2><p><a href="https://github.com/YHF7/Vue/tree/master/day6/webpack-vue1" target="_blank" rel="noopener">webpack-vue</a></p><h1 id="二、webpack-vue-router"><a href="#二、webpack-vue-router" class="headerlink" title="二、webpack-vue-router"></a>二、webpack-vue-router</h1><h2 id="重点-1"><a href="#重点-1" class="headerlink" title="重点"></a>重点</h2><ul><li>在webpack 中使用路由<ul><li>安装 vue-router</li><li>手动安装vuerouter</li><li>创建路由</li><li>挂载路由</li><li>router-view 显示路由<h2 id="小案例-前往github-1"><a href="#小案例-前往github-1" class="headerlink" title="小案例(前往github)"></a>小案例(前往github)</h2><a href="https://github.com/YHF7/Vue/tree/master/day6/webpack-vue-router" target="_blank" rel="noopener">webpack-vue-router</a></li></ul></li></ul><h1 id="三、webpack-路由嵌套-抽离路由"><a href="#三、webpack-路由嵌套-抽离路由" class="headerlink" title="三、webpack-路由嵌套 抽离路由"></a>三、webpack-路由嵌套 抽离路由</h1><h2 id="重点-2"><a href="#重点-2" class="headerlink" title="重点"></a>重点</h2><ul><li>嵌套路由<ul><li>定义子组件</li><li>配置路由<h2 id="小案例-前往github-2"><a href="#小案例-前往github-2" class="headerlink" title="小案例(前往github)"></a>小案例(前往github)</h2><a href="https://github.com/YHF7/Vue/tree/master/day6/webpack-%E8%B7%AF%E7%94%B1%E5%B5%8C%E5%A5%97" target="_blank" rel="noopener">webpack-vue-路由嵌套</a></li></ul></li></ul>]]></content>
    
    <summary type="html">
    
      
      
        &lt;link rel=&quot;stylesheet&quot; class=&quot;aplayer-secondary-style-marker&quot; href=&quot;/assets/css/APlayer.min.css&quot;&gt;&lt;script src=&quot;/assets/js/APlayer.min.js&quot; cla
      
    
    </summary>
    
      <category term="Vue" scheme="http://yoursite.com/categories/Vue/"/>
    
    
      <category term="Vue 案例" scheme="http://yoursite.com/tags/Vue-%E6%A1%88%E4%BE%8B/"/>
    
  </entry>
  
  <entry>
    <title>Vue day6</title>
    <link href="http://yoursite.com/2018/10/19/Vue-day6/"/>
    <id>http://yoursite.com/2018/10/19/Vue-day6/</id>
    <published>2018-10-19T12:30:03.567Z</published>
    <updated>2018-10-19T14:16:56.476Z</updated>
    
    <content type="html"><![CDATA[<link rel="stylesheet" class="aplayer-secondary-style-marker" href="/assets/css/APlayer.min.css"><script src="/assets/js/APlayer.min.js" class="aplayer-secondary-script-marker"></script><h1 id="注意："><a href="#注意：" class="headerlink" title="注意："></a>注意：</h1><p>有时候使用<code>npm i node-sass -D</code>装不上，这时候，就必须使用 <code>cnpm i node-sass -D</code></p><h1 id="在普通页面中使用render函数渲染组件"><a href="#在普通页面中使用render函数渲染组件" class="headerlink" title="在普通页面中使用render函数渲染组件"></a>在普通页面中使用render函数渲染组件</h1><p><a href="https://github.com/YHF7/Vue/tree/master/day6/code" target="_blank" rel="noopener">render</a></p><h1 id="在webpack中配置-vue组件页面的解析"><a href="#在webpack中配置-vue组件页面的解析" class="headerlink" title="在webpack中配置.vue组件页面的解析"></a>在webpack中配置.vue组件页面的解析</h1><ol><li><p>运行<code>cnpm i vue -S</code>将vue安装为运行依赖；</p></li><li><p>运行<code>cnpm i vue-loader vue-template-compiler -D</code>将解析转换vue的包安装为开发依赖；</p></li><li><p>运行<code>cnpm i style-loader css-loader -D</code>将解析转换CSS的包安装为开发依赖，因为.vue文件中会写CSS样式；</p></li><li><p>在<code>webpack.config.js</code>中，添加如下<code>module</code>规则：</p></li></ol><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br></pre></td><td class="code"><pre><span class="line"></span><br><span class="line">module: &#123;</span><br><span class="line"></span><br><span class="line">    rules: [</span><br><span class="line"></span><br><span class="line">      &#123; test: /\.css$/, use: [&apos;style-loader&apos;, &apos;css-loader&apos;] &#125;,</span><br><span class="line"></span><br><span class="line">      &#123; test: /\.vue$/, use: &apos;vue-loader&apos; &#125;</span><br><span class="line"></span><br><span class="line">    ]</span><br><span class="line"></span><br><span class="line">  &#125;</span><br></pre></td></tr></table></figure><ol start="5"><li>创建<code>App.js</code>组件页面：</li></ol><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br></pre></td><td class="code"><pre><span class="line"></span><br><span class="line">&lt;template&gt;</span><br><span class="line"></span><br><span class="line">  &lt;!-- 注意：在 .vue 的组件中，template 中必须有且只有唯一的根元素进行包裹，一般都用 div 当作唯一的根元素 --&gt;</span><br><span class="line"></span><br><span class="line">  &lt;div&gt;</span><br><span class="line"></span><br><span class="line">    &lt;h1&gt;这是APP组件 - &#123;&#123;msg&#125;&#125;&lt;/h1&gt;</span><br><span class="line"></span><br><span class="line">    &lt;h3&gt;我是h3&lt;/h3&gt;</span><br><span class="line"></span><br><span class="line">  &lt;/div&gt;</span><br><span class="line"></span><br><span class="line">&lt;/template&gt;</span><br><span class="line"></span><br><span class="line"></span><br><span class="line"></span><br><span class="line">&lt;script&gt;</span><br><span class="line"></span><br><span class="line">// 注意：在 .vue 的组件中，通过 script 标签来定义组件的行为，需要使用 ES6 中提供的 export default 方式，导出一个vue实例对象</span><br><span class="line"></span><br><span class="line">export default &#123;</span><br><span class="line"></span><br><span class="line">  data() &#123;</span><br><span class="line"></span><br><span class="line">    return &#123;</span><br><span class="line"></span><br><span class="line">      msg: &apos;OK&apos;</span><br><span class="line"></span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">  &#125;</span><br><span class="line"></span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line">&lt;/script&gt;</span><br><span class="line"></span><br><span class="line"></span><br><span class="line"></span><br><span class="line">&lt;style scoped&gt;</span><br><span class="line"></span><br><span class="line">h1 &#123;</span><br><span class="line"></span><br><span class="line">  color: red;</span><br><span class="line"></span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line">&lt;/style&gt;</span><br></pre></td></tr></table></figure><ol start="6"><li>创建<code>main.js</code>入口文件：</li></ol><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br></pre></td><td class="code"><pre><span class="line"></span><br><span class="line">// 导入 Vue 组件</span><br><span class="line"></span><br><span class="line">import Vue from &apos;vue&apos;</span><br><span class="line"></span><br><span class="line"></span><br><span class="line"></span><br><span class="line">// 导入 App组件</span><br><span class="line"></span><br><span class="line">import App from &apos;./components/App.vue&apos;</span><br><span class="line"></span><br><span class="line"></span><br><span class="line"></span><br><span class="line">// 创建一个 Vue 实例，使用 render 函数，渲染指定的组件</span><br><span class="line"></span><br><span class="line">var vm = new Vue(&#123;</span><br><span class="line"></span><br><span class="line">  el: &apos;#app&apos;,</span><br><span class="line"></span><br><span class="line">  render: c =&gt; c(App)</span><br><span class="line"></span><br><span class="line">&#125;);</span><br></pre></td></tr></table></figure><h1 id="在使用webpack构建的Vue项目中使用模板对象？"><a href="#在使用webpack构建的Vue项目中使用模板对象？" class="headerlink" title="在使用webpack构建的Vue项目中使用模板对象？"></a>在使用webpack构建的Vue项目中使用模板对象？</h1><ol><li>在<code>webpack.config.js</code>中添加<code>resolve</code>属性：<figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line">resolve: &#123;</span><br><span class="line">    alias: &#123;</span><br><span class="line">      &apos;vue$&apos;: &apos;vue/dist/vue.esm.js&apos;</span><br><span class="line">    &#125;</span><br><span class="line">  &#125;</span><br></pre></td></tr></table></figure></li></ol><h1 id="ES6中语法使用总结"><a href="#ES6中语法使用总结" class="headerlink" title="ES6中语法使用总结"></a>ES6中语法使用总结</h1><ol><li><p>使用 <code>export default</code> 和 <code>export</code> 导出模块中的成员; 对应ES5中的 <code>module.exports</code> 和 <code>export</code></p></li><li><p>使用 <code>import ** from **</code> 和 <code>import &#39;路径&#39;</code> 还有 <code>import {a, b} from &#39;模块标识&#39;</code> 导入其他模块</p></li><li><p>使用箭头函数：<code>(a, b)=&gt; { return a-b; }</code></p></li></ol><h1 id="在vue组件页面中，集成vue-router路由模块"><a href="#在vue组件页面中，集成vue-router路由模块" class="headerlink" title="在vue组件页面中，集成vue-router路由模块"></a>在vue组件页面中，集成vue-router路由模块</h1><p><a href="https://router.vuejs.org/" target="_blank" rel="noopener">vue-router官网</a></p><ol><li>导入路由模块：</li></ol><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line"></span><br><span class="line">import VueRouter from &apos;vue-router&apos;</span><br></pre></td></tr></table></figure><ol start="2"><li>安装路由模块：</li></ol><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line"></span><br><span class="line">Vue.use(VueRouter);</span><br></pre></td></tr></table></figure><ol start="3"><li>导入需要展示的组件:</li></ol><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line"></span><br><span class="line">import login from &apos;./components/account/login.vue&apos;</span><br><span class="line"></span><br><span class="line">import register from &apos;./components/account/register.vue&apos;</span><br></pre></td></tr></table></figure><ol start="4"><li>创建路由对象:</li></ol><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br></pre></td><td class="code"><pre><span class="line"></span><br><span class="line">var router = new VueRouter(&#123;</span><br><span class="line"></span><br><span class="line">  routes: [</span><br><span class="line"></span><br><span class="line">    &#123; path: &apos;/&apos;, redirect: &apos;/login&apos; &#125;,</span><br><span class="line"></span><br><span class="line">    &#123; path: &apos;/login&apos;, component: login &#125;,</span><br><span class="line"></span><br><span class="line">    &#123; path: &apos;/register&apos;, component: register &#125;</span><br><span class="line"></span><br><span class="line">  ]</span><br><span class="line"></span><br><span class="line">&#125;);</span><br></pre></td></tr></table></figure><ol start="5"><li>将路由对象，挂载到 Vue 实例上:</li></ol><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br></pre></td><td class="code"><pre><span class="line"></span><br><span class="line">var vm = new Vue(&#123;</span><br><span class="line"></span><br><span class="line">  el: &apos;#app&apos;,</span><br><span class="line"></span><br><span class="line">  // render: c =&gt; &#123; return c(App) &#125;</span><br><span class="line"></span><br><span class="line">  render(c) &#123;</span><br><span class="line"></span><br><span class="line">    return c(App);</span><br><span class="line"></span><br><span class="line">  &#125;,</span><br><span class="line"></span><br><span class="line">  router // 将路由对象，挂载到 Vue 实例上</span><br><span class="line"></span><br><span class="line">&#125;);</span><br></pre></td></tr></table></figure><ol start="6"><li>改造App.vue组件，在 template 中，添加<code>router-link</code>和<code>router-view</code>：</li></ol><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><span class="line"></span><br><span class="line">&lt;router-link to=&quot;/login&quot;&gt;登录&lt;/router-link&gt;</span><br><span class="line"></span><br><span class="line">&lt;router-link to=&quot;/register&quot;&gt;注册&lt;/router-link&gt;</span><br><span class="line"></span><br><span class="line"></span><br><span class="line"></span><br><span class="line">&lt;router-view&gt;&lt;/router-view&gt;</span><br></pre></td></tr></table></figure><h1 id="组件中的css作用域问题"><a href="#组件中的css作用域问题" class="headerlink" title="组件中的css作用域问题"></a>组件中的css作用域问题</h1><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line">&lt;style lang=&quot;scss&quot; scoped&gt;</span><br><span class="line">/* 普通的 style 标签只支持 普通的 样式，如果想要启用 scss 或 less ，需要为 style 元素，设置 lang 属性 */</span><br><span class="line">// 只要 咱们的 style 标签， 是在 .vue 组件中定义的，那么，推荐都为 style 开启 scoped 属性</span><br><span class="line">&lt;style&gt;</span><br></pre></td></tr></table></figure><h1 id="抽离路由为单独的模块"><a href="#抽离路由为单独的模块" class="headerlink" title="抽离路由为单独的模块"></a>抽离路由为单独的模块</h1><p><a href="https://github.com/YHF7/Vue/blob/master/day6/webpack-%E8%B7%AF%E7%94%B1%E5%B5%8C%E5%A5%97/src/router.js" target="_blank" rel="noopener">抽离小案例</a></p>]]></content>
    
    <summary type="html">
    
      
      
        &lt;link rel=&quot;stylesheet&quot; class=&quot;aplayer-secondary-style-marker&quot; href=&quot;/assets/css/APlayer.min.css&quot;&gt;&lt;script src=&quot;/assets/js/APlayer.min.js&quot; cla
      
    
    </summary>
    
      <category term="Vue" scheme="http://yoursite.com/categories/Vue/"/>
    
    
      <category term="Vue笔记" scheme="http://yoursite.com/tags/Vue%E7%AC%94%E8%AE%B0/"/>
    
  </entry>
  
  <entry>
    <title>npm/cnpm 第三方模块/插件安装使用</title>
    <link href="http://yoursite.com/2018/10/17/npm-Plug-in/"/>
    <id>http://yoursite.com/2018/10/17/npm-Plug-in/</id>
    <published>2018-10-17T05:49:13.334Z</published>
    <updated>2018-11-12T02:37:19.477Z</updated>
    
    <content type="html"><![CDATA[<link rel="stylesheet" class="aplayer-secondary-style-marker" href="/assets/css/APlayer.min.css"><script src="/assets/js/APlayer.min.js" class="aplayer-secondary-script-marker"></script><h1 id="模块-插件"><a href="#模块-插件" class="headerlink" title="模块/插件"></a>模块/插件</h1><ul><li>express 前端 web 模块</li><li>path 路径核心模块</li><li>art-template 模版引擎（express-art-template 的依赖所以必须安装）</li><li>express-art-template 模版引擎 (视觉效果模板 子模板 模板继承)</li><li>body-parser 中间件(解析表单 post 请求体)</li><li>mongoose 数据库链接</li><li>bootstrap@3 css 页面开发场景</li><li>jquery js 框架</li><li>blueimp-md5 密码加密</li><li>npm install express-session</li><li>vue 常用 <a href="https://yhf7.github.io/2018/10/16/Vue-day5/#more" target="_blank" rel="noopener">1-6 使用点看 vue-day5</a> <a href="https://yhf7.github.io/2018/10/19/Vue-day6/#more" target="_blank" rel="noopener">7 使用点看 vue-day6</a> <a href="https://yhf7.github.io/2018/10/20/Vue-day7/#more" target="_blank" rel="noopener">8 使用点看 vue-day7</a> （在 vue 中安装插件尽量使用 cnpm）<ul><li><a href="mailto:1.webpack@3.12.0" target="_blank" rel="noopener">1.webpack@3.12.0</a> 项目构建工具</li><li><a href="mailto:2.webpack-dev-server@2.9.3" target="_blank" rel="noopener">2.webpack-dev-server@2.9.3</a> 自动打包</li><li>3.html-webpack-plugin 把 html 打包在内存</li><li>4.样式文件打包<ul><li>css<ul><li>style-loader</li><li>css-loader</li></ul></li><li>less<ul><li>style-loader</li><li>css-loader</li><li>less-loader</li><li>less // 不需要显示出来</li></ul></li><li>sass<ul><li>style-loader</li><li>css-loader</li><li>sass-loader</li><li>node-sass // 不需要显示出来</li></ul></li></ul></li><li>5.url 处理 （图片）<ul><li>url-loader</li><li>file-loader</li></ul></li><li>6.babel Es6 语法<ul><li>babel-core</li><li>babel-loader@7</li><li>babel-plugin-transform-runtime</li><li>babel-preset-env</li><li>babel-preset-stage-0</li></ul></li><li>7.vue (webpack vue)<ul><li>vue vue 依赖</li><li>vue-loader 转换 vue 包依赖</li><li>vue-template-compiler</li></ul></li><li>8.Mint-UI vue 的 ui 组件 <a href="https://mint-ui.github.io/docs/#/zh-cn2/quickstart" target="_blank" rel="noopener">Mint-ui 官网</a><ul><li>mint-ui 组件</li><li>babel-plugin-component mint-ui 按需导入</li></ul></li><li>9.vue-resource 发送数据请求</li><li>10.babel-plugin-transform-remove-strict-mode 去除严格模式</li><li>11.vue2-preview 缩略图打包</li><li>12.moment 时间处理插件</li></ul></li></ul><h1 id="模块安装与应用"><a href="#模块安装与应用" class="headerlink" title="模块安装与应用"></a>模块安装与应用</h1><h2 id="express-前端开发框架"><a href="#express-前端开发框架" class="headerlink" title="express 前端开发框架"></a>express 前端开发框架</h2><ol><li>安装</li></ol><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">$ npm init -y //添加json初始化文件</span><br><span class="line">$ npm install express --save//安装express</span><br></pre></td></tr></table></figure><ol start="2"><li>引包</li></ol><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">const</span> express = <span class="built_in">require</span>(<span class="string">'express'</span>);</span><br></pre></td></tr></table></figure><ol start="3"><li>创建服务</li></ol><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">const</span> app = express();</span><br></pre></td></tr></table></figure><ol start="4"><li>使用</li></ol><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line">app.get(<span class="string">'/'</span>, <span class="function"><span class="keyword">function</span> (<span class="params">req, res</span>) </span>&#123;</span><br><span class="line">  req.send(<span class="string">'index.html'</span>)</span><br><span class="line">&#125;)</span><br></pre></td></tr></table></figure><h1 id="art-template-模版引擎-配置在-express-中"><a href="#art-template-模版引擎-配置在-express-中" class="headerlink" title="art-template 模版引擎 (配置在 express 中)"></a>art-template 模版引擎 (配置在 express 中)</h1><h2 id="js-使用"><a href="#js-使用" class="headerlink" title="js 使用"></a>js 使用</h2><ol><li>安装</li></ol><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">$ npm install --save art-template//express-art-templat依赖了art-template所以可以不用记载但是要安装</span><br><span class="line">$ npm install --save express-art-template</span><br></pre></td></tr></table></figure><ol start="2"><li>配置</li></ol><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">app.engine(<span class="string">'art'</span>,<span class="built_in">require</span>(<span class="string">'express-art-template'</span>))<span class="comment">//art 可以替换成其他的标示 html 等</span></span><br></pre></td></tr></table></figure><ol start="3"><li>使用</li></ol><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><span class="line">app.get(<span class="string">'/'</span>,<span class="function"><span class="keyword">function</span> (<span class="params">req,res</span>) </span>&#123;</span><br><span class="line">    <span class="comment">// 在 Express 中使用模板引擎有更好的方式：res.render('文件名， &#123;模板对象&#125;)</span></span><br><span class="line">  <span class="comment">// 可以自己尝试去看 art-template 官方文档：如何让 art-template 结合 Express 来使用</span></span><br><span class="line">    res.render(<span class="string">'index.html'</span>,&#123;</span><br><span class="line">        title: <span class="string">'hello world'</span></span><br><span class="line">    &#125;);</span><br><span class="line">&#125;);</span><br></pre></td></tr></table></figure><ol start="4"><li>如果希望修改默认的 views 视图渲染存储目录， 可以如下修改</li></ol><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">// 第一个参数 views 不能写错</span></span><br><span class="line">app.set(<span class="string">'views'</span>, 目录路径)</span><br></pre></td></tr></table></figure><h2 id="视图页面输出-views"><a href="#视图页面输出-views" class="headerlink" title="视图页面输出 views"></a>视图页面输出 views</h2><ol><li>安装模版引擎<ul><li>art-template</li><li>express-art-template</li></ul></li><li>编写布局页面 layout.html</li></ol><figure class="highlight html"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">&lt;!DOCTYPE html&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">html</span> <span class="attr">lang</span>=<span class="string">"en"</span>&gt;</span></span><br><span class="line"></span><br><span class="line"><span class="tag">&lt;<span class="name">head</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">meta</span> <span class="attr">charset</span>=<span class="string">"UTF-8"</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">meta</span> <span class="attr">name</span>=<span class="string">"viewport"</span> <span class="attr">content</span>=<span class="string">"width=device-width, initial-scale=1.0"</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">meta</span> <span class="attr">http-equiv</span>=<span class="string">"X-UA-Compatible"</span> <span class="attr">content</span>=<span class="string">"ie=edge"</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">title</span>&gt;</span>Document<span class="tag">&lt;/<span class="name">title</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">link</span> <span class="attr">rel</span>=<span class="string">"stylesheet"</span> <span class="attr">href</span>=<span class="string">"/node_modules/bootstrap/dist/css/bootstrap.css"</span>&gt;</span></span><br><span class="line">    <span class="comment">&lt;!-- 留坑给页面添加css样式等链接 --&gt;</span></span><br><span class="line">    &#123;&#123; block 'head' &#125;&#125;&#123;&#123; /block &#125;&#125;</span><br><span class="line"><span class="tag">&lt;/<span class="name">head</span>&gt;</span></span><br><span class="line"></span><br><span class="line"><span class="tag">&lt;<span class="name">body</span>&gt;</span></span><br><span class="line">    <span class="comment">&lt;!-- body-固定头部-头部重用 --&gt;</span></span><br><span class="line">    &#123;&#123; include './header.html' &#125;&#125;</span><br><span class="line"></span><br><span class="line">    <span class="comment">&lt;!-- body-内容模块-可修改 --&gt;</span></span><br><span class="line">    &#123;&#123; block 'content' &#125;&#125;</span><br><span class="line">        <span class="tag">&lt;<span class="name">h1</span>&gt;</span>默认内容<span class="tag">&lt;/<span class="name">h1</span>&gt;</span></span><br><span class="line">    &#123;&#123; /block &#125;&#125;</span><br><span class="line"></span><br><span class="line">    <span class="comment">&lt;!-- body-固定底部-底部重用 --&gt;</span></span><br><span class="line">    &#123;&#123; include './footer.html' &#125;&#125;</span><br><span class="line"><span class="tag">&lt;/<span class="name">body</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">script</span> <span class="attr">src</span>=<span class="string">"../node_modules/jquery/dist/jquery.js"</span>&gt;</span><span class="undefined"></span><span class="tag">&lt;/<span class="name">script</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">script</span> <span class="attr">src</span>=<span class="string">"../node_modules/bootstrap/dist/js/bootstrap.js"</span>&gt;</span><span class="undefined"></span><span class="tag">&lt;/<span class="name">script</span>&gt;</span></span><br><span class="line"><span class="comment">&lt;!-- 留坑给页面添加js等 --&gt;</span></span><br><span class="line">&#123;&#123; block 'script' &#125;&#125;&#123;&#123; /block &#125;&#125;</span><br><span class="line"><span class="tag">&lt;/<span class="name">html</span>&gt;</span></span><br></pre></td></tr></table></figure><ol start="3"><li>调用布局模块 编写页面</li></ol><figure class="highlight html"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">&lt;!-- 继承布局模块页 --&gt;</span></span><br><span class="line">&#123;&#123;extend './layout.html'&#125;&#125;</span><br><span class="line"></span><br><span class="line"><span class="comment">&lt;!-- 添加css样式-通过坑 head  --&gt;</span></span><br><span class="line">&#123;&#123;block 'head'&#125;&#125;</span><br><span class="line"><span class="tag">&lt;<span class="name">style</span>&gt;</span><span class="undefined"></span></span><br><span class="line"><span class="undefined">    body &#123;</span></span><br><span class="line"><span class="undefined">        background-color: skyblue;</span></span><br><span class="line"><span class="undefined">    &#125;</span></span><br><span class="line"><span class="undefined">    h1 &#123;</span></span><br><span class="line"><span class="undefined">        color: red;</span></span><br><span class="line"><span class="undefined">    &#125;</span></span><br><span class="line"><span class="undefined"></span><span class="tag">&lt;/<span class="name">style</span>&gt;</span></span><br><span class="line">&#123;&#123;/block&#125;&#125;</span><br><span class="line"></span><br><span class="line"><span class="comment">&lt;!-- 修改页面内容 --&gt;</span></span><br><span class="line">&#123;&#123;block 'content'&#125;&#125;</span><br><span class="line"><span class="tag">&lt;<span class="name">div</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">h1</span>&gt;</span>index.html填坑<span class="tag">&lt;/<span class="name">h1</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">div</span>&gt;</span></span><br><span class="line">&#123;&#123;/block&#125;&#125;</span><br><span class="line"></span><br><span class="line"><span class="comment">&lt;!-- 添加js 通过script --&gt;</span></span><br><span class="line">&#123;&#123;block 'script'&#125;&#125;</span><br><span class="line"><span class="tag">&lt;<span class="name">script</span>&gt;</span><span class="undefined"></span></span><br><span class="line"><span class="javascript">    <span class="built_in">window</span>.alert(<span class="string">'index 页面自己的js 脚本'</span>)</span></span><br><span class="line"><span class="undefined"></span><span class="tag">&lt;/<span class="name">script</span>&gt;</span></span><br><span class="line">&#123;&#123;/block&#125;&#125;</span><br></pre></td></tr></table></figure><ol start="4"><li>留坑内容<ul><li>中带‘’号的内容的自定义的名，最好是取一看就明白的</li><li>坑不止可以留一个，可以留很多个</li></ul></li></ol><h1 id="body-parser-中间件-解析表单-post-请求体"><a href="#body-parser-中间件-解析表单-post-请求体" class="headerlink" title="body-parser 中间件(解析表单 post 请求体)"></a>body-parser 中间件(解析表单 post 请求体)</h1><ol><li>安装</li></ol><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">$ npm install --save body-parser</span><br></pre></td></tr></table></figure><ol start="2"><li>引包</li></ol><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">const</span> bodyParser = <span class="built_in">require</span>(<span class="string">'body-parser'</span>);</span><br></pre></td></tr></table></figure><ol start="3"><li>配置</li></ol><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">// parse application/x-www-form-urlencoded 解析application</span></span><br><span class="line">app.use(bodyParser.urlencoded(&#123; <span class="attr">extended</span>: <span class="literal">false</span> &#125;));</span><br><span class="line"><span class="comment">// parse application/json 解析</span></span><br><span class="line">app.use(bodyParser.json());</span><br></pre></td></tr></table></figure><ol start="4"><li>使用</li></ol><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br></pre></td><td class="code"><pre><span class="line">app.post(<span class="string">'/post'</span>,<span class="function"><span class="keyword">function</span> (<span class="params">req,res</span>) </span>&#123;</span><br><span class="line">    <span class="keyword">var</span> myDate = <span class="keyword">new</span> <span class="built_in">Date</span>();</span><br><span class="line">    <span class="keyword">var</span> year = myDate.getFullYear(); <span class="comment">//获取完整的年份(4位,1970-????)</span></span><br><span class="line">    <span class="keyword">var</span> month = myDate.getMonth() + <span class="number">1</span>; <span class="comment">//获取当前月份(0-11,0代表1月)</span></span><br><span class="line">    <span class="keyword">var</span> date = myDate.getDate(); <span class="comment">//获取当前日(1-31)</span></span><br><span class="line">    <span class="keyword">let</span> comment = req.body;</span><br><span class="line">    comment.dateTime = year + <span class="string">"-"</span> + month + <span class="string">"-"</span> + date;</span><br><span class="line">    comments.unshift(comment);</span><br><span class="line">    res.redirect(<span class="string">'/'</span>);</span><br><span class="line">&#125;)</span><br></pre></td></tr></table></figure><h1 id="mongoose-（mongodb-数据库链接插件）"><a href="#mongoose-（mongodb-数据库链接插件）" class="headerlink" title="mongoose （mongodb 数据库链接插件）"></a>mongoose （mongodb 数据库链接插件）</h1><ol><li>安装</li></ol><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">$ npm i -S mongoose</span><br></pre></td></tr></table></figure><ol start="2"><li>引包</li></ol><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">const</span> mongoose = <span class="built_in">require</span>(<span class="string">'mongoose'</span>);</span><br></pre></td></tr></table></figure><ol start="3"><li>配置</li></ol><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">// 连接数据库</span></span><br><span class="line">mongoose.connect(<span class="string">'mongodb://localhost/test'</span>);</span><br></pre></td></tr></table></figure><ol start="4"><li>使用</li></ol><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">// 创建一个模型</span></span><br><span class="line"><span class="comment">// 就是在设计数据库</span></span><br><span class="line"><span class="comment">// MongoDB 是动态的，非常灵活，只需要在代码中设计你的数据库就可以了</span></span><br><span class="line"><span class="comment">// mongoose 这个包就可以让你的设计编写过程变的非常的简单</span></span><br><span class="line"><span class="keyword">const</span> Cat = mongoose.model(<span class="string">'Cat'</span>, &#123;</span><br><span class="line">    name: <span class="built_in">String</span></span><br><span class="line">&#125;);</span><br><span class="line"></span><br><span class="line"><span class="comment">// 实例化一个 cat</span></span><br><span class="line"><span class="keyword">const</span> kitty = <span class="keyword">new</span> Cat(&#123;</span><br><span class="line">    name: <span class="string">'yhf'</span></span><br><span class="line">&#125;);</span><br><span class="line"><span class="comment">// 持久化保存 kitty 实例</span></span><br><span class="line">kitty.save().then(<span class="function"><span class="params">()</span> =&gt;</span> <span class="built_in">console</span>.log(<span class="string">'meow'</span>));</span><br></pre></td></tr></table></figure><h1 id="bootstrap-css-样式前端架构"><a href="#bootstrap-css-样式前端架构" class="headerlink" title="bootstrap css 样式前端架构"></a>bootstrap css 样式前端架构</h1><ol><li>安装 （3 版居多）</li></ol><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">$ npm install bootstrap@3</span><br></pre></td></tr></table></figure><ol start="2"><li>使用 （在视图的布局页面引入就好）<br>css： <link rel="stylesheet" href="/node_modules/bootstrap/dist/css/bootstrap.css"><br>js： <script src="../node_modules/bootstrap/dist/js/bootstrap.js"></script></li></ol><h1 id="jquery-js-框架"><a href="#jquery-js-框架" class="headerlink" title="jquery js 框架"></a>jquery js 框架</h1><ol><li>安装</li></ol><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">$ npm i jquery</span><br></pre></td></tr></table></figure><ol start="2"><li>使用 (在视图的布局页面引入就好)<script src="../node_modules/jquery/dist/jquery.js"></script></li></ol><h1 id="blueimp-md5-密码加密"><a href="#blueimp-md5-密码加密" class="headerlink" title="blueimp-md5 密码加密"></a>blueimp-md5 密码加密</h1><ol><li>安装</li></ol><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">$ npm install blueimp-md5</span><br></pre></td></tr></table></figure><ol start="2"><li>引包</li></ol><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">const</span> md5 = <span class="built_in">require</span>(<span class="string">'blueimp-md5'</span>);</span><br></pre></td></tr></table></figure><ol start="3"><li>调用</li></ol><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">// md() 在里面填充数据就好 多加几个是多重加密，三个为三重加密</span></span><br><span class="line">body.password = md5(md5(md5(body.password)))</span><br></pre></td></tr></table></figure><h1 id="express-session-数据存储"><a href="#express-session-数据存储" class="headerlink" title="express-session 数据存储"></a>express-session 数据存储</h1><ol><li>安装</li></ol><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">$ npm install express-session</span><br></pre></td></tr></table></figure><ol start="2"><li>配置</li></ol><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">// 引包</span></span><br><span class="line"><span class="keyword">const</span> session = <span class="built_in">require</span>(<span class="string">'express-session'</span>)</span><br><span class="line"></span><br><span class="line"><span class="comment">// 在 Express 这个框架中，默认不支持 Session 和 Cookie</span></span><br><span class="line"><span class="comment">// 但是我们可以使用第三方中间件：express-session 来解决</span></span><br><span class="line"><span class="comment">// 1. npm install express-session</span></span><br><span class="line"><span class="comment">// 2. 配置 (一定要在 app.use(router) 之前)</span></span><br><span class="line"><span class="comment">// 3. 使用</span></span><br><span class="line"><span class="comment">//    当把这个插件配置好之后，我们就可以通过 req.session 来发访问和设置 Session 成员了</span></span><br><span class="line"><span class="comment">//    添加 Session 数据：req.session.foo = 'bar'</span></span><br><span class="line"><span class="comment">//    访问 Session 数据：req.session.foo</span></span><br><span class="line"></span><br><span class="line">app.use(session(&#123;</span><br><span class="line">    <span class="comment">// 配置加密字符串，它会在原有加密基础之上和这个字符串拼起来去加密</span></span><br><span class="line">    <span class="comment">// 目的是为了增加安全性，防止客户端恶意伪造</span></span><br><span class="line">    secret: <span class="string">'itcast'</span>,</span><br><span class="line">    resave: <span class="literal">false</span>,</span><br><span class="line">    saveUninitialized: <span class="literal">false</span> <span class="comment">// 无论你是否使用 Session ，我都默认直接给你分配一把钥匙</span></span><br><span class="line">&#125;))</span><br></pre></td></tr></table></figure><ol start="3"><li>使用</li></ol><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">// 用户存在，登录成功，通过 Session 记录登录状态</span></span><br><span class="line">req.session.user = user;</span><br><span class="line"></span><br><span class="line"><span class="comment">// 用户退出，退出成功，通过 Session 清除登录状态</span></span><br><span class="line">req.session.user = <span class="literal">null</span>;</span><br></pre></td></tr></table></figure><h1 id="webpack-3-12-0"><a href="#webpack-3-12-0" class="headerlink" title="webpack@3.12.0"></a><a href="mailto:webpack@3.12.0" target="_blank" rel="noopener">webpack@3.12.0</a></h1><ol><li>安装</li></ol><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">$ sudo cnpm install webpack@3.12.0 -g   //全局安装webpack 3.12.0 版本</span><br><span class="line">$ sudo cnpm install webpack@3.12.0 -D   //项目本地安装webpack 3.12.0 版本</span><br></pre></td></tr></table></figure><ol start="2"><li>使用看 Vue day5</li></ol><h1 id="webpack-dev-server"><a href="#webpack-dev-server" class="headerlink" title="webpack-dev-server"></a>webpack-dev-server</h1><ol><li>安装</li></ol><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">sudo cnpm i webpack-dev-server@2.6.0 --save-dev</span><br></pre></td></tr></table></figure><ol start="2"><li>使用看 Vue day5</li></ol><h1 id="html-webpack-plugin-把-html-打包在内存"><a href="#html-webpack-plugin-把-html-打包在内存" class="headerlink" title="html-webpack-plugin 把 html 打包在内存"></a>html-webpack-plugin 把 html 打包在内存</h1><ol><li>安装</li></ol><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">$ sudo cnpm i html-webpack-plugin --save-dev</span><br></pre></td></tr></table></figure><h1 id="webpack-css-webpack-不会处理-js-以为的文件需要用其他的插件辅助"><a href="#webpack-css-webpack-不会处理-js-以为的文件需要用其他的插件辅助" class="headerlink" title="webpack css (webpack 不会处理 js 以为的文件需要用其他的插件辅助)"></a>webpack css (webpack 不会处理 js 以为的文件需要用其他的插件辅助)</h1><ol><li>安装 style-loader</li></ol><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">$ sudo cnpm i style-loader --save-dev</span><br></pre></td></tr></table></figure><ol start="2"><li>安装 css-loader</li></ol><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">$ sudo cnpm i css-loader --save-dev</span><br></pre></td></tr></table></figure><h1 id="less"><a href="#less" class="headerlink" title="less"></a>less</h1><ol><li>安装 less-loader</li></ol><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">$ sudo cnpm i less-loader -D</span><br></pre></td></tr></table></figure><ol start="2"><li>安装 less</li></ol><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">$ sudo cnpm i less -D</span><br></pre></td></tr></table></figure><h1 id="sass"><a href="#sass" class="headerlink" title="sass"></a>sass</h1><ol><li>安装 sass-loader</li></ol><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">$ sudo cnpm i sass-loader -D</span><br></pre></td></tr></table></figure><ol start="2"><li>安装 node-sass</li></ol><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">$ sudo cnpm i node-sass -D</span><br></pre></td></tr></table></figure><h1 id="url-loader-与-file-loader"><a href="#url-loader-与-file-loader" class="headerlink" title="url-loader 与 file-loader"></a>url-loader 与 file-loader</h1><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">$ sudo cnpm i url-loader file-loader -D //都是两个一起用可以一起安装</span><br></pre></td></tr></table></figure><h1 id="babel"><a href="#babel" class="headerlink" title="babel"></a>babel</h1><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">$ sudo cnpm i babel-core babel-loader@7 babel-plugin-transform-runtime -D</span><br><span class="line">$ sudo cnpm i babel-preset-env babel-preset-stage-0 -D</span><br></pre></td></tr></table></figure><h1 id="Vue"><a href="#Vue" class="headerlink" title="Vue"></a>Vue</h1><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">$ sudo cnpm i vue -S</span><br></pre></td></tr></table></figure><h1 id="vue-loader-vue-template-compiler"><a href="#vue-loader-vue-template-compiler" class="headerlink" title="vue-loader vue-template-compiler"></a>vue-loader vue-template-compiler</h1><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">$ sudo cnpm i vue-loader vue-template-compiler -D</span><br></pre></td></tr></table></figure><h1 id="Mint-UI"><a href="#Mint-UI" class="headerlink" title="Mint-UI"></a>Mint-UI</h1><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">$ sudo cnpm i mint-ui -S</span><br></pre></td></tr></table></figure><h1 id="babel-plugin-componen"><a href="#babel-plugin-componen" class="headerlink" title="babel-plugin-componen"></a>babel-plugin-componen</h1><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">$ sudo npm install babel-plugin-component -D</span><br></pre></td></tr></table></figure><h1 id="vue-resource"><a href="#vue-resource" class="headerlink" title="vue-resource"></a>vue-resource</h1><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">$ sudo cnpm i vue-resource -S</span><br></pre></td></tr></table></figure><h1 id="babel-plugin-transform-remove-strict-mode"><a href="#babel-plugin-transform-remove-strict-mode" class="headerlink" title="babel-plugin-transform-remove-strict-mode"></a>babel-plugin-transform-remove-strict-mode</h1><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">$ sudo cnpm i babel-plugin-transform-remove-strict-mode -D</span><br></pre></td></tr></table></figure><h1 id="vue2-preview"><a href="#vue2-preview" class="headerlink" title="vue2-preview"></a>vue2-preview</h1><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line">https://www.npmjs.com/package/vue2-preview</span><br><span class="line">$ sudo cnpm i vue2-preview -S</span><br><span class="line">http://www.mamicode.com/info-detail-2462808.html</span><br></pre></td></tr></table></figure><h1 id="moment"><a href="#moment" class="headerlink" title="moment"></a>moment</h1><ol><li><p>安装</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">$ sudo cnpm i moment -S</span><br></pre></td></tr></table></figure></li><li><p>使用</p><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">// 在main.js里面全局配置</span></span><br><span class="line"><span class="comment">// 导入时间插件</span></span><br><span class="line"><span class="keyword">import</span> moment <span class="keyword">from</span> <span class="string">'moment'</span></span><br><span class="line"><span class="comment">// 定义全局的过滤器 dateFormat 是调用方法名  dataStr 是传入参数 patter 是格式</span></span><br><span class="line">Vue.filter(<span class="string">'dateFormat'</span>, <span class="function"><span class="keyword">function</span> (<span class="params">dataStr, pattern = <span class="string">'YYYY-MM-DD HH:mm:ss'</span></span>) </span>&#123;</span><br><span class="line">  <span class="keyword">return</span> moment(dataStr).format(pattern)</span><br><span class="line">&#125;)</span><br></pre></td></tr></table></figure></li></ol>]]></content>
    
    <summary type="html">
    
      
      
        &lt;link rel=&quot;stylesheet&quot; class=&quot;aplayer-secondary-style-marker&quot; href=&quot;/assets/css/APlayer.min.css&quot;&gt;&lt;script src=&quot;/assets/js/APlayer.min.js&quot; cla
      
    
    </summary>
    
      <category term="插件/配置" scheme="http://yoursite.com/categories/%E6%8F%92%E4%BB%B6-%E9%85%8D%E7%BD%AE/"/>
    
    
      <category term="npm" scheme="http://yoursite.com/tags/npm/"/>
    
  </entry>
  
  <entry>
    <title>npm/cnpm 安装使用</title>
    <link href="http://yoursite.com/2018/10/16/npm/"/>
    <id>http://yoursite.com/2018/10/16/npm/</id>
    <published>2018-10-16T15:38:49.063Z</published>
    <updated>2018-10-17T05:47:41.446Z</updated>
    
    <content type="html"><![CDATA[<link rel="stylesheet" class="aplayer-secondary-style-marker" href="/assets/css/APlayer.min.css"><script src="/assets/js/APlayer.min.js" class="aplayer-secondary-script-marker"></script><h1 id="配置向导"><a href="#配置向导" class="headerlink" title="配置向导"></a>配置向导</h1><ol><li>node/npm<ul><li>在开发中很多时候都会用到到第三方插件 来使得开发更加到便捷</li><li>在这个时候就会想到 npm 来下载第三方插件，但是使用 npm 到前提就就要先安装 node （在安装node的时候会自动安装npm）</li><li>虽然自动安装 npm 但是，npm比Node.js更频繁地更新，因此请确保您拥有最新版本</li></ul></li><li>nrm npm镜像地址控制<ul><li>作用：提供了一些最常用的NPM包镜像地址，能够让我们快速的切换安装包时候的服务器地址；</li><li>什么是镜像：原来包刚一开始是只存在于国外的NPM服务器，但是由于网络原因，经常访问不到，这时候，我们可以在国内，创建一个和官网完全一样的NPM服务器，只不过，数据都是从人家那里拿过来的，除此之外，使用方式完全一样；</li><li>注意： nrm 只是单纯的提供了几个常用的 下载包的 URL地址，并能够让我们在 这几个 地址之间，很方便的进行切换，但是，我们每次装包的时候，使用的 装包工具，都是 npm</li></ul></li><li>cnpm （注意：这里的cnpm 和 nrm内调整的cnpm地址完全不是一个东西）<ul><li>有时候即使用 nrm 切换为国内的镜像地址仍然觉得很慢就会想到 cnpm 使用和 npm 是一样的</li><li>cnpm和npm一样都是用来安装第三方包的</li></ul></li></ol><h1 id="1-node-npm"><a href="#1-node-npm" class="headerlink" title="1.node/npm"></a>1.node/npm</h1><h2 id="安装-node"><a href="#安装-node" class="headerlink" title="安装 node"></a>安装 node</h2><ol><li><a href="http://nodejs.cn/download/" target="_blank" rel="noopener">Node下载官网</a></li><li>安装比较简单不详细说 按照自己的电脑配置下载包解压安装就可以</li><li>安装完后 node -v 出来版本号就是安装成功了</li><li>npm -v 查看npm的版本 如果发现版本不是最新的请执行下面的操作 （如果是最新直接跳过看后面nrm的安装）</li></ol><h2 id="更新-npm-使用"><a href="#更新-npm-使用" class="headerlink" title="更新 npm 使用"></a>更新 npm 使用</h2><ol><li><p>安装指令</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line">    $ sudo npm install npm@latest -g // 全局安装 -g</span><br><span class="line">  ```  </span><br><span class="line">2. 如果你想用抢先版</span><br><span class="line">    ``` bash</span><br><span class="line">    $ sudo npm install npm@next -g</span><br></pre></td></tr></table></figure></li><li><p>安装完就说一下使用</p><ul><li><p>在我们开发前要做一个初始化的json文件来记录加载我们的第三方包（执行命令后会出来一个json文件）</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">$ sudo npm init -y //init初始化  -y 直接跳过配置</span><br></pre></td></tr></table></figure></li><li><p>正式使用 npm 安装第三方插件</p><ul><li><p>例如安装一个jquery</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">$ sudo npm i jquery -S</span><br></pre></td></tr></table></figure></li><li><p>例如安装指定版本的 webpack 第三方插件</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">$ sudo cnpm install webpack@3.12.0 -g   //全局安装webpack 3.12.0 版本 </span><br><span class="line">$ sudo cnpm install webpack@3.12.0 -D   //项目本地安装webpack 3.12.0 版本</span><br></pre></td></tr></table></figure></li></ul></li><li><p>i 安装 ==== -S 添加到配置文件 ==== -g 全局安装  ==== -D 本地安装（只是安装在项目文件夹）</p></li></ul></li></ol><h1 id="2-nrm"><a href="#2-nrm" class="headerlink" title="2.nrm"></a>2.nrm</h1><ol><li><p>运行npm i nrm -g全局安装nrm包；</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">$ sudo npm i nrm -g</span><br></pre></td></tr></table></figure></li><li><p>使用nrm ls查看当前所有可用的镜像源地址以及当前所使用的镜像源地址；</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">$ sudo npm ls</span><br></pre></td></tr></table></figure></li><li><p>使用nrm use npm或nrm use taobao切换不同的镜像源地址；(国内一般都是用 cnpm 和 taobao)</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">$ sudo npm use taobao</span><br></pre></td></tr></table></figure></li></ol><h1 id="3-cnpm"><a href="#3-cnpm" class="headerlink" title="3.cnpm"></a>3.cnpm</h1><ol><li><p>运行npm i cnpm -g全局安装nrm包；</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">$ sudo npm i cnpm -g</span><br></pre></td></tr></table></figure></li><li><p>cnpm 的版本查看与使用方法和npm完全一样 只是 npm 和 cnpm 之间一个c的区别其他完全一样</p></li></ol>]]></content>
    
    <summary type="html">
    
      
      
        &lt;link rel=&quot;stylesheet&quot; class=&quot;aplayer-secondary-style-marker&quot; href=&quot;/assets/css/APlayer.min.css&quot;&gt;&lt;script src=&quot;/assets/js/APlayer.min.js&quot; cla
      
    
    </summary>
    
      <category term="插件/配置" scheme="http://yoursite.com/categories/%E6%8F%92%E4%BB%B6-%E9%85%8D%E7%BD%AE/"/>
    
    
      <category term="npm" scheme="http://yoursite.com/tags/npm/"/>
    
  </entry>
  
  <entry>
    <title>Vue day5</title>
    <link href="http://yoursite.com/2018/10/16/Vue-day5/"/>
    <id>http://yoursite.com/2018/10/16/Vue-day5/</id>
    <published>2018-10-16T15:26:43.907Z</published>
    <updated>2018-10-18T13:21:38.222Z</updated>
    
    <content type="html"><![CDATA[<link rel="stylesheet" class="aplayer-secondary-style-marker" href="/assets/css/APlayer.min.css"><script src="/assets/js/APlayer.min.js" class="aplayer-secondary-script-marker"></script><h1 id="复习"><a href="#复习" class="headerlink" title="复习"></a>复习</h1><ol><li>父子组件直接传值</li></ol><ul><li>案例代码看 vue-day5 案例</li></ul><ol start="2"><li>路由基础使用</li></ol><ul><li>案例代码看 vue-day5 案例</li></ul><h1 id="watch属性的使用"><a href="#watch属性的使用" class="headerlink" title="watch属性的使用"></a><code>watch</code>属性的使用</h1><p>考虑一个问题：想要实现 <code>名</code> 和 <code>姓</code> 两个文本框的内容改变，则全名的文本框中的值也跟着改变；（用以前的知识如何实现？？？）</p><ol><li>监听<code>data</code>中属性的改变：</li></ol><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br></pre></td><td class="code"><pre><span class="line">&lt;div id=&quot;app&quot;&gt;</span><br><span class="line">    &lt;input type=&quot;text&quot; v-model=&quot;firstName&quot;&gt; +</span><br><span class="line">    &lt;input type=&quot;text&quot; v-model=&quot;lastName&quot;&gt; =</span><br><span class="line">    &lt;span&gt;&#123;&#123;fullName&#125;&#125;&lt;/span&gt;</span><br><span class="line">  &lt;/div&gt;</span><br><span class="line"></span><br><span class="line">  &lt;script&gt;</span><br><span class="line">    // 创建 Vue 实例，得到 ViewModel</span><br><span class="line">    var vm = new Vue(&#123;</span><br><span class="line">      el: &apos;#app&apos;,</span><br><span class="line">      data: &#123;</span><br><span class="line">        firstName: &apos;jack&apos;,</span><br><span class="line">        lastName: &apos;chen&apos;,</span><br><span class="line">        fullName: &apos;jack - chen&apos;</span><br><span class="line">      &#125;,</span><br><span class="line">      methods: &#123;&#125;,</span><br><span class="line">      watch: &#123;</span><br><span class="line">        &apos;firstName&apos;: function (newVal, oldVal) &#123; // 第一个参数是新数据，第二个参数是旧数据</span><br><span class="line">          this.fullName = newVal + &apos; - &apos; + this.lastName;</span><br><span class="line">        &#125;,</span><br><span class="line">        &apos;lastName&apos;: function (newVal, oldVal) &#123;</span><br><span class="line">          this.fullName = this.firstName + &apos; - &apos; + newVal;</span><br><span class="line">        &#125;</span><br><span class="line">      &#125;</span><br><span class="line">    &#125;);</span><br><span class="line">  &lt;/script&gt;</span><br></pre></td></tr></table></figure><ol start="2"><li>监听路由对象的改变：</li></ol><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br></pre></td><td class="code"><pre><span class="line">&lt;div id=&quot;app&quot;&gt;</span><br><span class="line">    &lt;router-link to=&quot;/login&quot;&gt;登录&lt;/router-link&gt;</span><br><span class="line">    &lt;router-link to=&quot;/register&quot;&gt;注册&lt;/router-link&gt;</span><br><span class="line"></span><br><span class="line">    &lt;router-view&gt;&lt;/router-view&gt;</span><br><span class="line">  &lt;/div&gt;</span><br><span class="line"></span><br><span class="line">  &lt;script&gt;</span><br><span class="line">    var login = Vue.extend(&#123;</span><br><span class="line">      template: &apos;&lt;h1&gt;登录组件&lt;/h1&gt;&apos;</span><br><span class="line">    &#125;);</span><br><span class="line"></span><br><span class="line">    var register = Vue.extend(&#123;</span><br><span class="line">      template: &apos;&lt;h1&gt;注册组件&lt;/h1&gt;&apos;</span><br><span class="line">    &#125;);</span><br><span class="line"></span><br><span class="line">    var router = new VueRouter(&#123;</span><br><span class="line">      routes: [</span><br><span class="line">        &#123; path: &quot;/login&quot;, component: login &#125;,</span><br><span class="line">        &#123; path: &quot;/register&quot;, component: register &#125;</span><br><span class="line">      ]</span><br><span class="line">    &#125;);</span><br><span class="line"></span><br><span class="line">    // 创建 Vue 实例，得到 ViewModel</span><br><span class="line">    var vm = new Vue(&#123;</span><br><span class="line">      el: &apos;#app&apos;,</span><br><span class="line">      data: &#123;&#125;,</span><br><span class="line">      methods: &#123;&#125;,</span><br><span class="line">      router: router,</span><br><span class="line">      watch: &#123;</span><br><span class="line">        &apos;$route&apos;: function (newVal, oldVal) &#123;</span><br><span class="line">          if (newVal.path === &apos;/login&apos;) &#123;</span><br><span class="line">            console.log(&apos;这是登录组件&apos;);</span><br><span class="line">          &#125;</span><br><span class="line">        &#125;</span><br><span class="line">      &#125;</span><br><span class="line">    &#125;);</span><br><span class="line">  &lt;/script&gt;</span><br></pre></td></tr></table></figure><h1 id="computed计算属性的使用"><a href="#computed计算属性的使用" class="headerlink" title="computed计算属性的使用"></a><code>computed</code>计算属性的使用</h1><ol><li>默认只有<code>getter</code>的计算属性：</li></ol><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br></pre></td><td class="code"><pre><span class="line">&lt;div id=&quot;app&quot;&gt;</span><br><span class="line">    &lt;input type=&quot;text&quot; v-model=&quot;firstName&quot;&gt; +</span><br><span class="line">    &lt;input type=&quot;text&quot; v-model=&quot;lastName&quot;&gt; =</span><br><span class="line">    &lt;span&gt;&#123;&#123;fullName&#125;&#125;&lt;/span&gt;</span><br><span class="line">  &lt;/div&gt;</span><br><span class="line"></span><br><span class="line">  &lt;script&gt;</span><br><span class="line">    // 创建 Vue 实例，得到 ViewModel</span><br><span class="line">    var vm = new Vue(&#123;</span><br><span class="line">      el: &apos;#app&apos;,</span><br><span class="line">      data: &#123;</span><br><span class="line">        firstName: &apos;jack&apos;,</span><br><span class="line">        lastName: &apos;chen&apos;</span><br><span class="line">      &#125;,</span><br><span class="line">      methods: &#123;&#125;,</span><br><span class="line">      computed: &#123; // 计算属性； 特点：当计算属性中所以来的任何一个 data 属性改变之后，都会重新触发 本计算属性 的重新计算，从而更新 fullName 的值</span><br><span class="line">        fullName() &#123;</span><br><span class="line">          return this.firstName + &apos; - &apos; + this.lastName;</span><br><span class="line">        &#125;</span><br><span class="line">      &#125;</span><br><span class="line">    &#125;);</span><br><span class="line">  &lt;/script&gt;</span><br></pre></td></tr></table></figure><ol start="2"><li>定义有<code>getter</code>和<code>setter</code>的计算属性：</li></ol><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br></pre></td><td class="code"><pre><span class="line">&lt;div id=&quot;app&quot;&gt;</span><br><span class="line">    &lt;input type=&quot;text&quot; v-model=&quot;firstName&quot;&gt;</span><br><span class="line">    &lt;input type=&quot;text&quot; v-model=&quot;lastName&quot;&gt;</span><br><span class="line">    &lt;!-- 点击按钮重新为 计算属性 fullName 赋值 --&gt;</span><br><span class="line">    &lt;input type=&quot;button&quot; value=&quot;修改fullName&quot; @click=&quot;changeName&quot;&gt;</span><br><span class="line"></span><br><span class="line">    &lt;span&gt;&#123;&#123;fullName&#125;&#125;&lt;/span&gt;</span><br><span class="line">  &lt;/div&gt;</span><br><span class="line"></span><br><span class="line">  &lt;script&gt;</span><br><span class="line">    // 创建 Vue 实例，得到 ViewModel</span><br><span class="line">    var vm = new Vue(&#123;</span><br><span class="line">      el: &apos;#app&apos;,</span><br><span class="line">      data: &#123;</span><br><span class="line">        firstName: &apos;jack&apos;,</span><br><span class="line">        lastName: &apos;chen&apos;</span><br><span class="line">      &#125;,</span><br><span class="line">      methods: &#123;</span><br><span class="line">        changeName() &#123;</span><br><span class="line">          this.fullName = &apos;TOM - chen2&apos;;</span><br><span class="line">        &#125;</span><br><span class="line">      &#125;,</span><br><span class="line">      computed: &#123;</span><br><span class="line">        fullName: &#123;</span><br><span class="line">          get: function () &#123;</span><br><span class="line">            return this.firstName + &apos; - &apos; + this.lastName;</span><br><span class="line">          &#125;,</span><br><span class="line">          set: function (newVal) &#123;</span><br><span class="line">            var parts = newVal.split(&apos; - &apos;);</span><br><span class="line">            this.firstName = parts[0];</span><br><span class="line">            this.lastName = parts[1];</span><br><span class="line">          &#125;</span><br><span class="line">        &#125;</span><br><span class="line">      &#125;</span><br><span class="line">    &#125;);</span><br><span class="line">  &lt;/script&gt;</span><br></pre></td></tr></table></figure><h1 id="watch、computed和methods之间的对比"><a href="#watch、computed和methods之间的对比" class="headerlink" title="watch、computed和methods之间的对比"></a><code>watch</code>、<code>computed</code>和<code>methods</code>之间的对比</h1><ol><li><code>computed</code>属性的结果会被缓存，除非依赖的响应式属性变化才会重新计算。主要当作属性来使用；</li><li><code>methods</code>方法表示一个具体的操作，主要书写业务逻辑；</li><li><code>watch</code>一个对象，键是需要观察的表达式，值是对应回调函数。主要用来监听某些特定数据的变化，从而进行某些具体的业务逻辑操作；可以看作是<code>computed</code>和<code>methods</code>的结合体；</li></ol><h1 id="nrm的安装使用"><a href="#nrm的安装使用" class="headerlink" title="nrm的安装使用"></a><code>nrm</code>的安装使用</h1><p>作用：提供了一些最常用的 NPM 包镜像地址，能够让我们快速的切换安装包时候的服务器地址；<br>什么是镜像：原来包刚一开始是只存在于国外的 NPM 服务器，但是由于网络原因，经常访问不到，这时候，我们可以在国内，创建一个和官网完全一样的 NPM 服务器，只不过，数据都是从人家那里拿过来的，除此之外，使用方式完全一样；</p><ol><li>运行<code>npm i nrm -g</code>全局安装<code>nrm</code>包；</li><li>使用<code>nrm ls</code>查看当前所有可用的镜像源地址以及当前所使用的镜像源地址；</li><li>使用<code>nrm use npm</code>或<code>nrm use taobao</code>切换不同的镜像源地址；</li></ol><blockquote><p>注意： nrm 只是单纯的提供了几个常用的 下载包的 URL 地址，并能够让我们在 这几个 地址之间，很方便的进行切换，但是，我们每次装包的时候，使用的 装包工具，都是 npm</p></blockquote><h1 id="在网页中会引用哪些常见的静态资源？"><a href="#在网页中会引用哪些常见的静态资源？" class="headerlink" title="在网页中会引用哪些常见的静态资源？"></a>在网页中会引用哪些常见的静态资源？</h1><ul><li>JS</li></ul><ul><li>.js .jsx .coffee .ts（TypeScript 类 C# 语言）</li></ul><ul><li>CSS</li></ul><ul><li>.css .less .sass .scss</li></ul><ul><li>Images</li></ul><ul><li>.jpg .png .gif .bmp .svg</li></ul><ul><li>字体文件（Fonts）</li></ul><ul><li>.svg .ttf .eot .woff .woff2</li></ul><ul><li>模板文件</li></ul><ul><li>.ejs .jade .vue【这是在 webpack 中定义组件的方式，推荐这么用】</li></ul><h1 id="网页中引入的静态资源多了以后有什么问题？？？"><a href="#网页中引入的静态资源多了以后有什么问题？？？" class="headerlink" title="网页中引入的静态资源多了以后有什么问题？？？"></a>网页中引入的静态资源多了以后有什么问题？？？</h1><ol><li>网页加载速度慢， 因为 我们要发起很多的二次请求；</li><li>要处理错综复杂的依赖关系</li></ol><h1 id="如何解决上述两个问题"><a href="#如何解决上述两个问题" class="headerlink" title="如何解决上述两个问题"></a>如何解决上述两个问题</h1><ol><li>合并、压缩、精灵图、图片的 Base64 编码</li><li>可以使用之前学过的 requireJS、也可以使用 webpack 可以解决各个包之间的复杂依赖关系；</li></ol><h1 id="什么是-webpack"><a href="#什么是-webpack" class="headerlink" title="什么是 webpack?"></a>什么是 webpack?</h1><p>webpack 是前端的一个项目构建工具，它是基于 Node.js 开发出来的一个前端工具；</p><h1 id="如何完美实现上述的-2-种解决方案"><a href="#如何完美实现上述的-2-种解决方案" class="headerlink" title="如何完美实现上述的 2 种解决方案"></a>如何完美实现上述的 2 种解决方案</h1><ol><li>使用 Gulp， 是基于 task 任务的；</li><li>使用 Webpack， 是基于整个项目进行构建的；</li></ol><ul><li>借助于 webpack 这个前端自动化构建工具，可以完美实现资源的合并、打包、压缩、混淆等诸多功能。</li><li>根据官网的图片介绍 webpack 打包的过程</li><li><a href="http://webpack.github.io/" target="_blank" rel="noopener">webpack 官网</a></li></ul><h1 id="webpack-安装的两种方式"><a href="#webpack-安装的两种方式" class="headerlink" title="webpack 安装的两种方式"></a>webpack 安装的两种方式</h1><ol><li>运行<code>npm i webpack -g</code>全局安装 webpack，这样就能在全局使用 webpack 的命令</li><li>在项目根目录中运行<code>npm i webpack --save-dev</code>安装到项目依赖中</li></ol><h1 id="初步使用-webpack-打包构建列表隔行变色案例"><a href="#初步使用-webpack-打包构建列表隔行变色案例" class="headerlink" title="初步使用 webpack 打包构建列表隔行变色案例"></a>初步使用 webpack 打包构建列表隔行变色案例</h1><ol><li>运行<code>npm init</code>初始化项目，使用 npm 管理项目中的依赖包</li><li>创建项目基本的目录结构</li><li>使用<code>cnpm i jquery --save</code>安装 jquery 类库</li><li>创建<code>main.js</code>并书写各行变色的代码逻辑：</li></ol><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><span class="line">// 导入jquery类库</span><br><span class="line">   import $ from &apos;jquery&apos;</span><br><span class="line"></span><br><span class="line">   // 设置偶数行背景色，索引从0开始，0是偶数</span><br><span class="line">   $(&apos;#list li:even&apos;).css(&apos;backgroundColor&apos;,&apos;lightblue&apos;);</span><br><span class="line">   // 设置奇数行背景色</span><br><span class="line">   $(&apos;#list li:odd&apos;).css(&apos;backgroundColor&apos;,&apos;pink&apos;);</span><br></pre></td></tr></table></figure><ol start="5"><li>直接在页面上引用<code>main.js</code>会报错，因为浏览器不认识<code>import</code>这种高级的 JS 语法，需要使用 webpack 进行处理，webpack 默认会把这种高级的语法转换为低级的浏览器能识别的语法；</li><li>运行<code>webpack 入口文件路径 输出文件路径</code>对<code>main.js</code>进行处理：</li></ol><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">webpack src/js/main.js dist/bundle.js</span><br></pre></td></tr></table></figure><h1 id="使用-webpack-的配置文件简化打包时候的命令"><a href="#使用-webpack-的配置文件简化打包时候的命令" class="headerlink" title="使用 webpack 的配置文件简化打包时候的命令"></a>使用 webpack 的配置文件简化打包时候的命令</h1><ol><li>在项目根目录中创建<code>webpack.config.js</code></li><li>由于运行 webpack 命令的时候，webpack 需要指定入口文件和输出文件的路径，所以，我们需要在<code>webpack.config.js</code>中配置这两个路径：</li></ol><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br></pre></td><td class="code"><pre><span class="line">// 导入处理路径的模块</span><br><span class="line">var path = require(&apos;path&apos;);</span><br><span class="line"></span><br><span class="line">// 导出一个配置对象，将来webpack在启动的时候，会默认来查找webpack.config.js，并读取这个文件中导出的配置对象，来进行打包处理</span><br><span class="line">module.exports = &#123;</span><br><span class="line">    entry: path.resolve(__dirname, &apos;src/js/main.js&apos;), // 项目入口文件</span><br><span class="line">    output: &#123; // 配置输出选项</span><br><span class="line">        path: path.resolve(__dirname, &apos;dist&apos;), // 配置输出的路径</span><br><span class="line">        filename: &apos;bundle.js&apos; // 配置输出的文件名</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h1 id="实现-webpack-的实时打包构建"><a href="#实现-webpack-的实时打包构建" class="headerlink" title="实现 webpack 的实时打包构建"></a>实现 webpack 的实时打包构建</h1><ol><li>由于每次重新修改代码之后，都需要手动运行 webpack 打包的命令，比较麻烦，所以使用<code>webpack-dev-server</code>来实现代码实时打包编译，当修改代码之后，会自动进行打包构建。</li><li>运行<code>cnpm i webpack-dev-server --save-dev</code>安装到开发依赖</li><li>安装完成之后，在命令行直接运行<code>webpack-dev-server</code>来进行打包，发现报错，此时需要借助于<code>package.json</code>文件中的指令，来进行运行<code>webpack-dev-server</code>命令，在<code>scripts</code>节点下新增<code>&quot;dev&quot;: &quot;webpack-dev-server&quot;</code>指令，发现可以进行实时打包，但是 dist 目录下并没有生成<code>bundle.js</code>文件，这是因为<code>webpack-dev-server</code>将打包好的文件放在了内存中</li></ol><ul><li>把<code>bundle.js</code>放在内存中的好处是：由于需要实时打包编译，所以放在内存中速度会非常快</li><li>这个时候访问 webpack-dev-server 启动的<code>http://localhost:8080/</code>网站，发现是一个文件夹的面板，需要点击到 src 目录下，才能打开我们的 index 首页，此时引用不到 bundle.js 文件，需要修改 index.html 中 script 的 src 属性为:<code>&lt;script src=&quot;../bundle.js&quot;&gt;&lt;/script&gt;</code></li><li>为了能在访问<code>http://localhost:8080/</code>的时候直接访问到 index 首页，可以使用<code>--contentBase src</code>指令来修改 dev 指令，指定启动的根目录：</li></ul><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">&quot;dev&quot;: &quot;webpack-dev-server --contentBase src&quot;</span><br></pre></td></tr></table></figure><p>同时修改 index 页面中 script 的 src 属性为<code>&lt;script src=&quot;bundle.js&quot;&gt;&lt;/script&gt;</code></p><h1 id="使用html-webpack-plugin插件配置启动页面"><a href="#使用html-webpack-plugin插件配置启动页面" class="headerlink" title="使用html-webpack-plugin插件配置启动页面"></a>使用<code>html-webpack-plugin</code>插件配置启动页面</h1><p>由于使用<code>--contentBase</code>指令的过程比较繁琐，需要指定启动的目录，同时还需要修改 index.html 中 script 标签的 src 属性，所以推荐大家使用<code>html-webpack-plugin</code>插件配置启动页面.</p><ol><li>运行<code>cnpm i html-webpack-plugin --save-dev</code>安装到开发依赖</li><li>修改<code>webpack.config.js</code>配置文件如下：</li></ol><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br></pre></td><td class="code"><pre><span class="line">// 导入处理路径的模块</span><br><span class="line">var path = require(&apos;path&apos;);</span><br><span class="line">// 导入自动生成HTMl文件的插件</span><br><span class="line">var htmlWebpackPlugin = require(&apos;html-webpack-plugin&apos;);</span><br><span class="line"></span><br><span class="line">module.exports = &#123;</span><br><span class="line">    entry: path.resolve(__dirname, &apos;src/js/main.js&apos;), // 项目入口文件</span><br><span class="line">    output: &#123; // 配置输出选项</span><br><span class="line">        path: path.resolve(__dirname, &apos;dist&apos;), // 配置输出的路径</span><br><span class="line">        filename: &apos;bundle.js&apos; // 配置输出的文件名</span><br><span class="line">    &#125;,</span><br><span class="line">    plugins:[ // 添加plugins节点配置插件</span><br><span class="line">        new htmlWebpackPlugin(&#123;</span><br><span class="line">            template:path.resolve(__dirname, &apos;src/index.html&apos;),//模板路径</span><br><span class="line">            filename:&apos;index.html&apos;//自动生成的HTML文件的名称</span><br><span class="line">        &#125;)</span><br><span class="line">    ]</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><ol start="3"><li>修改<code>package.json</code>中<code>script</code>节点中的 dev 指令如下：</li></ol><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">&quot;dev&quot;: &quot;webpack-dev-server&quot;</span><br></pre></td></tr></table></figure><ol start="4"><li>将 index.html 中 script 标签注释掉，因为<code>html-webpack-plugin</code>插件会自动把 bundle.js 注入到 index.html 页面中！</li></ol><h1 id="实现自动打开浏览器、热更新和配置浏览器的默认端口号"><a href="#实现自动打开浏览器、热更新和配置浏览器的默认端口号" class="headerlink" title="实现自动打开浏览器、热更新和配置浏览器的默认端口号"></a>实现自动打开浏览器、热更新和配置浏览器的默认端口号</h1><p><strong>注意：热更新在 JS 中表现的不明显，可以从一会儿要讲到的 CSS 身上进行介绍说明！</strong></p><h2 id="方式-1："><a href="#方式-1：" class="headerlink" title="方式 1："></a>方式 1：</h2><ul><li>修改<code>package.json</code>的 script 节点如下，其中<code>--open</code>表示自动打开浏览器，<code>--port 4321</code>表示打开的端口号为 4321，<code>--hot</code>表示启用浏览器热更新：</li></ul><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">&quot;dev&quot;: &quot;webpack-dev-server --hot --port 4321 --open&quot;</span><br></pre></td></tr></table></figure><h2 id="方式-2："><a href="#方式-2：" class="headerlink" title="方式 2："></a>方式 2：</h2><ol><li>修改<code>webpack.config.js</code>文件，新增<code>devServer</code>节点如下：</li></ol><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line">devServer:&#123;</span><br><span class="line">        hot:true,</span><br><span class="line">        open:true,</span><br><span class="line">        port:4321</span><br><span class="line">    &#125;</span><br></pre></td></tr></table></figure><ol start="2"><li>在头部引入<code>webpack</code>模块：</li></ol><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">var webpack = require(&apos;webpack&apos;);</span><br></pre></td></tr></table></figure><ol start="3"><li>在<code>plugins</code>节点下新增：</li></ol><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">new webpack.HotModuleReplacementPlugin()</span><br></pre></td></tr></table></figure><h1 id="使用-webpack-打包-css-文件"><a href="#使用-webpack-打包-css-文件" class="headerlink" title="使用 webpack 打包 css 文件"></a>使用 webpack 打包 css 文件</h1><ol><li>运行<code>cnpm i style-loader css-loader --save-dev</code></li><li>修改<code>webpack.config.js</code>这个配置文件：</li></ol><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line">module: &#123; // 用来配置第三方loader模块的</span><br><span class="line">        rules: [ // 文件的匹配规则</span><br><span class="line">            &#123; test: /\.css$/, use: [&apos;style-loader&apos;, &apos;css-loader&apos;] &#125;//处理css文件的规则</span><br><span class="line">        ]</span><br><span class="line">    &#125;</span><br></pre></td></tr></table></figure><ol start="3"><li>注意：<code>use</code>表示使用哪些模块来处理<code>test</code>所匹配到的文件；<code>use</code>中相关 loader 模块的调用顺序是从后向前调用的；</li></ol><h1 id="使用-webpack-打包-less-文件"><a href="#使用-webpack-打包-less-文件" class="headerlink" title="使用 webpack 打包 less 文件"></a>使用 webpack 打包 less 文件</h1><ol><li>运行<code>cnpm i less-loader less -D</code></li><li>修改<code>webpack.config.js</code>这个配置文件：</li></ol><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">&#123; test: /\.less$/, use: [&apos;style-loader&apos;, &apos;css-loader&apos;, &apos;less-loader&apos;] &#125;,</span><br></pre></td></tr></table></figure><h1 id="使用-webpack-打包-sass-文件"><a href="#使用-webpack-打包-sass-文件" class="headerlink" title="使用 webpack 打包 sass 文件"></a>使用 webpack 打包 sass 文件</h1><ol><li>运行<code>cnpm i sass-loader node-sass --save-dev</code></li><li>在<code>webpack.config.js</code>中添加处理 sass 文件的 loader 模块：</li></ol><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">&#123; test: /\.scss$/, use: [&apos;style-loader&apos;, &apos;css-loader&apos;, &apos;sass-loader&apos;] &#125;</span><br></pre></td></tr></table></figure><h1 id="使用-webpack-处理-css-中的路径"><a href="#使用-webpack-处理-css-中的路径" class="headerlink" title="使用 webpack 处理 css 中的路径"></a>使用 webpack 处理 css 中的路径</h1><ol><li>运行<code>cnpm i url-loader file-loader --save-dev</code></li><li>在<code>webpack.config.js</code>中添加处理 url 路径的 loader 模块：</li></ol><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">&#123; test: /\.(png|jpg|gif)$/, use: &apos;url-loader&apos; &#125;</span><br></pre></td></tr></table></figure><ol start="3"><li>可以通过<code>limit</code>指定进行 base64 编码的图片大小；只有小于指定字节（byte）的图片才会进行 base64 编码：</li></ol><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">&#123; test: /\.(png|jpg|gif)$/, use: &apos;url-loader?limit=43960&amp;name=[hash:8]-[name].[ext]&apos; &#125;,</span><br></pre></td></tr></table></figure><h1 id="使用-babel-处理高级-JS-语法"><a href="#使用-babel-处理高级-JS-语法" class="headerlink" title="使用 babel 处理高级 JS 语法"></a>使用 babel 处理高级 JS 语法</h1><p>在 webpack 中，默认只能处理 一部分 ES6 的新语法，一些更高级的ES6语法或者 ES7 语法，webpack 是处理不了的；这时候，就需要 借助于第三方的 loader，来帮助webpack 处理这些高级的语法，当第三方loader 把 高级语法转为 低级的语法之后，会把结果交给 webpack 去打包到 bundle.js 中<br>通过 Babel ，可以帮我们将 高级的语法转换为 低级的语法</p><ol><li>在 webpack 中，可以运行如下两套 命令，安装两套包，去安装 Babel 相关的loader功能：<br>1.1 第一套包： cnpm i babel-core babel-loader@7 babel-plugin-transform-runtime -D<br>1.2 第二套包： cnpm i babel-preset-env babel-preset-stage-0 -D</li><li>打开 webpack 的配置文件，在 module 节点下的 rules 数组中，添加一个 新的 匹配规则：<br>2.1 <figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">&#123; test:/\.js$/, use: &apos;babel-loader&apos;, exclude:/node_modules/ &#125;</span><br></pre></td></tr></table></figure></li></ol><p>2.2 注意： 在配置 babel 的 loader规则的时候，必须 把 node_modules 目录，通过 exclude 选项排除掉：原因有俩：<br>2.2.1 如果 不排除 node_modules， 则Babel 会把 node_modules 中所有的 第三方 JS 文件，都打包编译，这样，会非常消耗CPU，同时，打包速度非常慢；<br>2.2.2 哪怕，最终，Babel 把 所有 node_modules 中的JS转换完毕了，但是，项目也无法正常运行！</p><ol start="3"><li><p>在项目的 根目录中，新建一个 叫做 .babelrc  的Babel 配置文件，这个配置文件，属于JSON格式，所以，在写 .babelrc 配置的时候，必须符合JSON语法规范： 不能写注释，字符串必须用双引号<br>3.1 在 .babelrc 写如下的配置：  大家可以把 preset 翻译成 【语法】 的意思</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line">&#123;</span><br><span class="line">  &quot;presets&quot;: [&quot;env&quot;, &quot;stage-0&quot;],</span><br><span class="line">  &quot;plugins&quot;: [&quot;transform-runtime&quot;]</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure></li><li><p>了解： 目前，我们安装的 babel-preset-env, 是比较新的ES语法， 之前， 我们安装的是 babel-preset-es2015, 现在，出了一个更新的 语法插件，叫做 babel-preset-env ，它包含了 所有的 和 es***相关的语法</p></li></ol><ol start="5"><li><strong>注意：语法插件<code>babel-preset-es2015</code>可以更新为<code>babel-preset-env</code>，它包含了所有的 ES 相关的语法；</strong></li></ol><h1 id="相关文章"><a href="#相关文章" class="headerlink" title="相关文章"></a>相关文章</h1><p><a href="https://segmentfault.com/p/1210000008466178" target="_blank" rel="noopener">babel-preset-env：你需要的唯一 Babel 插件</a><br><a href="https://segmentfault.com/a/1190000009065987" target="_blank" rel="noopener">Runtime transform 运行时编译 es6</a><br><a href="http://www.cnblogs.com/joyho/articles/4430148.html" target="_blank" rel="noopener">URL 中的 hash（井号）</a></p>]]></content>
    
    <summary type="html">
    
      
      
        &lt;link rel=&quot;stylesheet&quot; class=&quot;aplayer-secondary-style-marker&quot; href=&quot;/assets/css/APlayer.min.css&quot;&gt;&lt;script src=&quot;/assets/js/APlayer.min.js&quot; cla
      
    
    </summary>
    
      <category term="Vue" scheme="http://yoursite.com/categories/Vue/"/>
    
    
      <category term="Vue笔记" scheme="http://yoursite.com/tags/Vue%E7%AC%94%E8%AE%B0/"/>
    
  </entry>
  
</feed>
