<?xml version="1.0" encoding="utf-8"?>
<feed xmlns="http://www.w3.org/2005/Atom">
  <title>不懂IT的男孩</title>
  
  <subtitle>不忘初心，方得始终</subtitle>
  <link href="/atom.xml" rel="self"/>
  
  <link href="http://yoursite.com/"/>
  <updated>2019-03-15T16:27:43.987Z</updated>
  <id>http://yoursite.com/</id>
  
  <author>
    <name>Detail</name>
    
  </author>
  
  <generator uri="http://hexo.io/">Hexo</generator>
  
  <entry>
    <title>Js回顾 温故而而知新 可以为师矣</title>
    <link href="http://yoursite.com/2019/03/16/%E5%9B%9E%E9%A1%BEjs/"/>
    <id>http://yoursite.com/2019/03/16/回顾js/</id>
    <published>2019-03-15T16:25:58.486Z</published>
    <updated>2019-03-15T16:27:43.987Z</updated>
    
    <content type="html"><![CDATA[<link rel="stylesheet" class="aplayer-secondary-style-marker" href="/assets/css/APlayer.min.css"><script src="/assets/js/APlayer.min.js" class="aplayer-secondary-script-marker"></script><h1 id="先看看-定时器延时每一秒输出一个数字0-4-（看到别人的公众号发过）"><a href="#先看看-定时器延时每一秒输出一个数字0-4-（看到别人的公众号发过）" class="headerlink" title="先看看 定时器延时每一秒输出一个数字0-4 （看到别人的公众号发过）"></a>先看看 定时器延时每一秒输出一个数字0-4 （看到别人的公众号发过）</h1><ul><li>setTimeout 是一个延时执行的定时器（异步）</li><li>在var中使用，因为作用域相同所以最后赋值都是一样</li><li>let的好处体现</li><li>闭包</li><li>async await （异步中使用同步方法）</li></ul><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">// 错误用例</span></span><br><span class="line"><span class="comment">// 计算机的执行速度是非常快的，延时1秒早全部执行完了</span></span><br><span class="line"><span class="comment">// var 作用域相同，循环完后i的值为6，最后才输出所以为6</span></span><br><span class="line"><span class="keyword">for</span> (<span class="keyword">var</span> i = <span class="number">0</span>; i &lt; <span class="number">5</span>; i++) &#123;</span><br><span class="line">    setTimeout(<span class="function"><span class="params">()</span> =&gt;</span> &#123;</span><br><span class="line">        <span class="built_in">console</span>.log(<span class="keyword">new</span> <span class="built_in">Date</span>,i)</span><br><span class="line">    &#125;, <span class="number">1000</span>);</span><br><span class="line">&#125;</span><br><span class="line"><span class="comment">// 执行结果</span></span><br><span class="line"><span class="number">2019</span><span class="number">-03</span><span class="number">-15</span>T07:<span class="number">18</span>:<span class="number">30.917</span>Z <span class="number">5</span></span><br><span class="line"><span class="number">2019</span><span class="number">-03</span><span class="number">-15</span>T07:<span class="number">18</span>:<span class="number">30.921</span>Z <span class="number">5</span></span><br><span class="line"><span class="number">2019</span><span class="number">-03</span><span class="number">-15</span>T07:<span class="number">18</span>:<span class="number">30.922</span>Z <span class="number">5</span></span><br><span class="line"><span class="number">2019</span><span class="number">-03</span><span class="number">-15</span>T07:<span class="number">18</span>:<span class="number">30.922</span>Z <span class="number">5</span></span><br><span class="line"><span class="number">2019</span><span class="number">-03</span><span class="number">-15</span>T07:<span class="number">18</span>:<span class="number">30.922</span>Z <span class="number">5</span></span><br></pre></td></tr></table></figure><h2 id="解决1-熟悉es6的都知道-let是个好东西"><a href="#解决1-熟悉es6的都知道-let是个好东西" class="headerlink" title="解决1 熟悉es6的都知道 let是个好东西"></a>解决1 熟悉es6的都知道 let是个好东西</h2><ul><li>只要把var改let这个问题就解决了</li><li>因为let的i每一次都会生成一个作用域相隔开<figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">for</span> (<span class="keyword">let</span> i = <span class="number">0</span>; i &lt; <span class="number">5</span>; i++) &#123;</span><br><span class="line">    setTimeout(<span class="function"><span class="params">()</span> =&gt;</span> &#123;</span><br><span class="line">        <span class="built_in">console</span>.log(<span class="keyword">new</span> <span class="built_in">Date</span>,i)</span><br><span class="line">    &#125;, <span class="number">1000</span>);</span><br><span class="line">&#125;</span><br><span class="line"><span class="comment">// 执行结果</span></span><br><span class="line"><span class="number">2019</span><span class="number">-03</span><span class="number">-15</span>T07:<span class="number">19</span>:<span class="number">21.106</span>Z <span class="number">0</span></span><br><span class="line"><span class="number">2019</span><span class="number">-03</span><span class="number">-15</span>T07:<span class="number">19</span>:<span class="number">21.110</span>Z <span class="number">1</span></span><br><span class="line"><span class="number">2019</span><span class="number">-03</span><span class="number">-15</span>T07:<span class="number">19</span>:<span class="number">21.111</span>Z <span class="number">2</span></span><br><span class="line"><span class="number">2019</span><span class="number">-03</span><span class="number">-15</span>T07:<span class="number">19</span>:<span class="number">21.111</span>Z <span class="number">3</span></span><br><span class="line"><span class="number">2019</span><span class="number">-03</span><span class="number">-15</span>T07:<span class="number">19</span>:<span class="number">21.111</span>Z <span class="number">4</span></span><br></pre></td></tr></table></figure></li></ul><h2 id="解决2-熟悉闭包的同学-这个也不是问题"><a href="#解决2-熟悉闭包的同学-这个也不是问题" class="headerlink" title="解决2 熟悉闭包的同学 这个也不是问题"></a>解决2 熟悉闭包的同学 这个也不是问题</h2><ul><li>每一次作为数据传进来不就可以了这也是一个不错的方法<figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">for</span> (<span class="keyword">var</span> i = <span class="number">0</span>; i &lt; <span class="number">5</span>; i++) &#123;</span><br><span class="line">    (<span class="function"><span class="params">j</span> =&gt;</span> &#123;</span><br><span class="line">        setTimeout(<span class="function"><span class="params">()</span> =&gt;</span> &#123;</span><br><span class="line">            <span class="built_in">console</span>.log(j);</span><br><span class="line">        &#125;, <span class="number">1000</span>);    </span><br><span class="line">    &#125;)(i)</span><br><span class="line">&#125;</span><br><span class="line"><span class="comment">// 执行结果</span></span><br><span class="line"><span class="number">2019</span><span class="number">-03</span><span class="number">-15</span>T07:<span class="number">21</span>:<span class="number">58.003</span>Z <span class="number">0</span></span><br><span class="line"><span class="number">2019</span><span class="number">-03</span><span class="number">-15</span>T07:<span class="number">21</span>:<span class="number">58.007</span>Z <span class="number">1</span></span><br><span class="line"><span class="number">2019</span><span class="number">-03</span><span class="number">-15</span>T07:<span class="number">21</span>:<span class="number">58.007</span>Z <span class="number">2</span></span><br><span class="line"><span class="number">2019</span><span class="number">-03</span><span class="number">-15</span>T07:<span class="number">21</span>:<span class="number">58.007</span>Z <span class="number">3</span></span><br><span class="line"><span class="number">2019</span><span class="number">-03</span><span class="number">-15</span>T07:<span class="number">21</span>:<span class="number">58.007</span>Z <span class="number">4</span></span><br></pre></td></tr></table></figure></li></ul><hr><h3 id="看看上面好像真的成功的但是再看看输出的时间其实还是未能实现每一秒输出一个，所有的数据都是在同一时间被执行出来，那能不能解决呢？看看下一个方法"><a href="#看看上面好像真的成功的但是再看看输出的时间其实还是未能实现每一秒输出一个，所有的数据都是在同一时间被执行出来，那能不能解决呢？看看下一个方法" class="headerlink" title="看看上面好像真的成功的但是再看看输出的时间其实还是未能实现每一秒输出一个，所有的数据都是在同一时间被执行出来，那能不能解决呢？看看下一个方法"></a>看看上面好像真的成功的但是再看看输出的时间其实还是未能实现每一秒输出一个，所有的数据都是在同一时间被执行出来，那能不能解决呢？看看下一个方法</h3><h2 id="解决3-Es7-async-await-实现同步（把异步的定时器限制住）"><a href="#解决3-Es7-async-await-实现同步（把异步的定时器限制住）" class="headerlink" title="解决3 Es7 async await 实现同步（把异步的定时器限制住）"></a>解决3 Es7 async await 实现同步（把异步的定时器限制住）</h2><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">const</span> sleep = <span class="function">(<span class="params">timeountMS</span>) =&gt;</span> <span class="keyword">new</span> <span class="built_in">Promise</span>(<span class="function">(<span class="params">resolve</span>) =&gt;</span> &#123;</span><br><span class="line">    setTimeout(resolve, timeountMS);</span><br><span class="line">&#125;);</span><br><span class="line"> </span><br><span class="line">(<span class="keyword">async</span> () =&gt; &#123;  <span class="comment">// 声明即执行的 async 函数表达式</span></span><br><span class="line">    <span class="keyword">for</span> (<span class="keyword">var</span> i = <span class="number">0</span>; i &lt; <span class="number">5</span>; i++) &#123;</span><br><span class="line">        <span class="comment">// await 同步操作阻止了要等待</span></span><br><span class="line">        <span class="keyword">await</span> sleep(<span class="number">1000</span>);</span><br><span class="line">        <span class="built_in">console</span>.log(<span class="keyword">new</span> <span class="built_in">Date</span>, i);</span><br><span class="line">    &#125;</span><br><span class="line"> </span><br><span class="line">    <span class="keyword">await</span> sleep(<span class="number">1000</span>);</span><br><span class="line">    <span class="built_in">console</span>.log(<span class="keyword">new</span> <span class="built_in">Date</span>, i);</span><br><span class="line">&#125;)();</span><br><span class="line"><span class="comment">// 执行结果</span></span><br><span class="line"><span class="number">2019</span><span class="number">-03</span><span class="number">-15</span>T07:<span class="number">23</span>:<span class="number">21.193</span>Z <span class="number">0</span></span><br><span class="line"><span class="number">2019</span><span class="number">-03</span><span class="number">-15</span>T07:<span class="number">23</span>:<span class="number">22.198</span>Z <span class="number">1</span></span><br><span class="line"><span class="number">2019</span><span class="number">-03</span><span class="number">-15</span>T07:<span class="number">23</span>:<span class="number">23.202</span>Z <span class="number">2</span></span><br><span class="line"><span class="number">2019</span><span class="number">-03</span><span class="number">-15</span>T07:<span class="number">23</span>:<span class="number">24.207</span>Z <span class="number">3</span></span><br><span class="line"><span class="number">2019</span><span class="number">-03</span><span class="number">-15</span>T07:<span class="number">23</span>:<span class="number">25.207</span>Z <span class="number">4</span></span><br><span class="line"><span class="number">2019</span><span class="number">-03</span><span class="number">-15</span>T07:<span class="number">23</span>:<span class="number">26.208</span>Z <span class="number">5</span></span><br></pre></td></tr></table></figure><h1 id="数组去重复-（每一次看别人写的都比自己写的好学习起来）"><a href="#数组去重复-（每一次看别人写的都比自己写的好学习起来）" class="headerlink" title="数组去重复 （每一次看别人写的都比自己写的好学习起来）"></a>数组去重复 （每一次看别人写的都比自己写的好学习起来）</h1><ul><li>三目运算符运用</li><li>forEach</li><li>concat 数组合并</li><li>…arr es6解构<figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">// 多数组合并去重复</span></span><br><span class="line">test = <span class="function">(<span class="params">arr, ...arr2</span>) =&gt;</span> &#123;</span><br><span class="line">    <span class="comment">// 先是合并数组</span></span><br><span class="line">    <span class="keyword">let</span> array = arr.concat(...arr2);</span><br><span class="line">    <span class="comment">// 定义一个对象存储</span></span><br><span class="line">    <span class="keyword">let</span> obj = &#123;&#125;</span><br><span class="line">    <span class="comment">// 新数组</span></span><br><span class="line">    <span class="keyword">let</span> result = []</span><br><span class="line">    <span class="comment">// 循环遍历</span></span><br><span class="line">    array.forEach(<span class="function"><span class="params">item</span> =&gt;</span> &#123;</span><br><span class="line">        <span class="comment">// 三目运算符  判断是对象中存有，没有就吧值设为真 并且添加如数组</span></span><br><span class="line">        <span class="comment">// 这里为什么要是为真呢，如果出现数据是false的时候依然使用数据去存储这样就会出现问题了</span></span><br><span class="line">        obj[item] ? <span class="string">''</span> : (obj[item] = <span class="literal">true</span>) &amp;&amp; result.push(item)</span><br><span class="line">    &#125;)</span><br><span class="line">    <span class="keyword">return</span> result</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="keyword">let</span> sum = test([<span class="number">1</span>, <span class="number">2</span>, <span class="number">3</span>], [<span class="number">5</span>, <span class="number">6</span>,<span class="number">2</span>, <span class="number">3</span>], [<span class="number">4</span>, <span class="number">5</span>,<span class="number">6</span>, <span class="number">2</span>])</span><br><span class="line"><span class="built_in">console</span>.log(sum);</span><br><span class="line"><span class="comment">// 输出结果</span></span><br><span class="line">[ <span class="number">1</span>, <span class="number">2</span>, <span class="number">3</span>, <span class="number">5</span>, <span class="number">6</span>, <span class="number">4</span> ]</span><br></pre></td></tr></table></figure></li></ul><h2 id="Es6版-set-Map"><a href="#Es6版-set-Map" class="headerlink" title="Es6版 set Map"></a>Es6版 set Map</h2><ul><li>随着 ES6 的到来，去重的方法又有了进展，比如我们可以使用 Set 和 Map 数据结构，以 Set 为例，ES6 提供了新的数据结构 Set。它类似于数组，但是成员的值都是唯一的，没有重复的值</li></ul><ol><li><p>set</p><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">var</span> array = [<span class="number">1</span>, <span class="number">2</span>, <span class="number">1</span>, <span class="number">1</span>, <span class="string">'1'</span>];</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">function</span> <span class="title">unique</span>(<span class="params">array</span>) </span>&#123;</span><br><span class="line">   <span class="keyword">return</span> <span class="built_in">Array</span>.from(<span class="keyword">new</span> <span class="built_in">Set</span>(array));</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="built_in">console</span>.log(unique(array)); <span class="comment">// [1, 2, "1"]</span></span><br><span class="line"></span><br><span class="line"><span class="comment">// 再次简化</span></span><br><span class="line"><span class="function"><span class="keyword">function</span> <span class="title">unique</span>(<span class="params">array</span>) </span>&#123;</span><br><span class="line">    <span class="keyword">return</span> [...new <span class="built_in">Set</span>(array)];</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="comment">// 再简化</span></span><br><span class="line"><span class="keyword">var</span> unique = <span class="function">(<span class="params">a</span>) =&gt;</span> [...new <span class="built_in">Set</span>(a)]</span><br></pre></td></tr></table></figure></li><li><p>Map</p><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line"><span class="function"><span class="keyword">function</span> <span class="title">unique</span> (<span class="params">arr</span>) </span>&#123;</span><br><span class="line">    <span class="keyword">const</span> seen = <span class="keyword">new</span> <span class="built_in">Map</span>()</span><br><span class="line">    <span class="keyword">return</span> arr.filter(<span class="function">(<span class="params">a</span>) =&gt;</span> !seen.has(a) &amp;&amp; seen.set(a, <span class="number">1</span>))</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure></li></ol><h1 id="Promise-异步-回调地狱-async-await"><a href="#Promise-异步-回调地狱-async-await" class="headerlink" title="Promise 异步/回调地狱/async await"></a>Promise 异步/回调地狱/async await</h1><h2 id="Promise"><a href="#Promise" class="headerlink" title="Promise"></a>Promise</h2><ul><li>promise里面包含两个参数res,rej我喜欢用简写,一个是成功回调一个是失败回调</li><li>所以在我们调用时也是要输入两个回调函数的，一个成功执行，一个失败执行<figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">// 定义promisey异步函数</span></span><br><span class="line"><span class="keyword">const</span> sleep = <span class="function">(<span class="params">test</span>) =&gt;</span> <span class="keyword">new</span> <span class="built_in">Promise</span>(<span class="function">(<span class="params">res,rej</span>) =&gt;</span> &#123;</span><br><span class="line">    <span class="keyword">if</span> (test == <span class="number">1</span>) &#123;</span><br><span class="line">        res(<span class="string">'成功'</span>)</span><br><span class="line">    &#125; <span class="keyword">else</span> <span class="keyword">if</span> (test == <span class="number">0</span>) &#123;</span><br><span class="line">        res(<span class="string">'再次成功'</span>)</span><br><span class="line">    &#125; <span class="keyword">else</span> &#123;</span><br><span class="line">        rej(<span class="string">'失败了兄弟'</span>)</span><br><span class="line">    &#125;</span><br><span class="line">&#125;)</span><br><span class="line"></span><br><span class="line"><span class="comment">// 使用</span></span><br><span class="line"><span class="comment">// 调用传入参数 .then中有可以写入两个函数前面为成功的调用后面为失败时的调用</span></span><br><span class="line"><span class="comment">// 和上面是一一对应的</span></span><br><span class="line"><span class="comment">// 前面的参数等于 test  后面...then</span></span><br><span class="line">sleep(<span class="number">1</span>).then(<span class="function">(<span class="params">data</span>) =&gt;</span> &#123;</span><br><span class="line">    <span class="built_in">console</span>.log(data); <span class="comment">// 成功时获取到的数据</span></span><br><span class="line">&#125;, (err) =&gt; &#123;</span><br><span class="line">    <span class="built_in">console</span>.log(err); <span class="comment">// 错误时获取到的错误返回</span></span><br><span class="line">&#125;)</span><br><span class="line"><span class="comment">// 输出结果</span></span><br><span class="line">成功</span><br></pre></td></tr></table></figure></li></ul><h2 id="Promise-回调地狱"><a href="#Promise-回调地狱" class="headerlink" title="Promise 回调地狱"></a>Promise 回调地狱</h2><ul><li>很多时候我们都想在这个执行完毕后再去执行另外一个操作</li><li>在不影响后面的操作时，我们想到了使用Promise 异步</li><li>但是我们还不满足我们想在这个操作执行完毕再去执行另外一个操作</li><li>这个时候我们就会一个套一个的函数去写，这样就会似得代码非常的繁琐</li><li>Promise中实现回调地狱解决这个问题</li></ul><hr><ul><li>升级上面这个回调方法，实现回调地狱</li><li>在.then的后面再加.then方法就可以了</li><li>可以无限的去套用</li><li>虽然每个都有err但是只是输出报错没有去处理，回调地狱还是会往下走</li><li>后面的都会出错<figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br></pre></td><td class="code"><pre><span class="line">sleep(<span class="number">1</span>).then(<span class="function">(<span class="params">data</span>) =&gt;</span> &#123;</span><br><span class="line">    <span class="built_in">console</span>.log(data); <span class="comment">// 成功时获取到的数据</span></span><br><span class="line">    <span class="keyword">return</span> sleep(<span class="number">2</span>) <span class="comment">// 再次的执行异步函数</span></span><br><span class="line">&#125;, (err) =&gt; &#123;</span><br><span class="line">    <span class="built_in">console</span>.log(err); <span class="comment">// 错误时获取到的错误返回</span></span><br><span class="line">&#125;).then(<span class="function">(<span class="params">data</span>)=&gt;</span> &#123; <span class="comment">// 继续用.then接受</span></span><br><span class="line">    <span class="built_in">console</span>.log(data) <span class="comment">// 再次成功</span></span><br><span class="line">&#125;,(err) =&gt; &#123;</span><br><span class="line">    <span class="built_in">console</span>.log(err)</span><br><span class="line">&#125;)</span><br></pre></td></tr></table></figure></li></ul><hr><ul><li>catch属性解决你一切烦恼也不需要写那么多次err的错误处理</li><li>catch 的作用： 如果前面有任何的 Promise 执行失败，则立即终止所有 promise 的执行，并 马上进入 catch 去处理 Promise中 抛出的异常；<figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><span class="line">sleep(<span class="number">1</span>).then(<span class="function">(<span class="params">data</span>) =&gt;</span> &#123;</span><br><span class="line">    <span class="built_in">console</span>.log(data); <span class="comment">// 成功时获取到的数据</span></span><br><span class="line">    <span class="keyword">return</span> sleep(<span class="number">2</span>) <span class="comment">// 再次的执行异步函数</span></span><br><span class="line">&#125;).then(<span class="function">(<span class="params">data</span>)=&gt;</span> &#123; <span class="comment">// 继续用.then接受</span></span><br><span class="line">    <span class="built_in">console</span>.log(data) <span class="comment">// 再次成功</span></span><br><span class="line">&#125;).catch(<span class="function">(<span class="params">err</span>) =&gt;</span> &#123;</span><br><span class="line"></span><br><span class="line">&#125;)</span><br></pre></td></tr></table></figure></li></ul><h2 id="async-await-（axios封装调用中很常使用）"><a href="#async-await-（axios封装调用中很常使用）" class="headerlink" title="async/await （axios封装调用中很常使用）"></a>async/await （axios封装调用中很常使用）</h2><ul><li>其实在我们很多的前端业务请求时也是使用的异步操作</li><li>例如我们前端在请求后端api时，这个过程我们需要作为一个异步去操作不影响其他业务的操作</li><li>但是这个作为异步，可是数据总不是异步把所以数据得同步的获取</li><li>es7就帮了我们很大的忙,因为await起到同步阻挡的作用<figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">var</span> test = <span class="keyword">async</span>() =&gt; &#123; <span class="comment">// 声明即执行的 async 函数表达式</span></span><br><span class="line">    <span class="keyword">let</span> abc = <span class="keyword">await</span> sleep(<span class="number">1</span>);<span class="comment">// 都是异步操作唯独到这里被卡住了，要等待数据的返回才会去执行后面</span></span><br><span class="line">    <span class="built_in">console</span>.log(abc);</span><br><span class="line">    <span class="built_in">console</span>.log(<span class="string">'这个永远不会在前面'</span>);</span><br><span class="line">&#125;</span><br><span class="line">test()</span><br><span class="line"></span><br><span class="line"><span class="built_in">console</span>.log(<span class="string">'这个百分之99的机会都是在前面，还有那个一估计是内存卡了'</span>);</span><br></pre></td></tr></table></figure></li></ul>]]></content>
    
    <summary type="html">
    
      
      
        &lt;link rel=&quot;stylesheet&quot; class=&quot;aplayer-secondary-style-marker&quot; href=&quot;/assets/css/APlayer.min.css&quot;&gt;&lt;script src=&quot;/assets/js/APlayer.min.js&quot; cla
      
    
    </summary>
    
      <category term="JavaScript" scheme="http://yoursite.com/categories/JavaScript/"/>
    
    
      <category term="js笔记" scheme="http://yoursite.com/tags/js%E7%AC%94%E8%AE%B0/"/>
    
  </entry>
  
  <entry>
    <title>使用过的响应式解决方案+网络看到的不错的移动+pc的笔记（网络摘录）</title>
    <link href="http://yoursite.com/2019/03/14/Css%E5%93%8D%E5%BA%94%E5%BC%8F+%E7%BD%91%E7%BB%9C%E7%AC%94%E8%AE%B0/"/>
    <id>http://yoursite.com/2019/03/14/Css响应式+网络笔记/</id>
    <published>2019-03-14T09:19:28.551Z</published>
    <updated>2019-03-14T13:12:07.816Z</updated>
    
    <content type="html"><![CDATA[<link rel="stylesheet" class="aplayer-secondary-style-marker" href="/assets/css/APlayer.min.css"><script src="/assets/js/APlayer.min.js" class="aplayer-secondary-script-marker"></script><ul><li>flex布局学习： <a href="https://www.runoob.com/w3cnote/flex-grammar.html" target="_blank" rel="noopener">https://www.runoob.com/w3cnote/flex-grammar.html</a></li></ul><h1 id="Css-移动端响应式解决方案"><a href="#Css-移动端响应式解决方案" class="headerlink" title="Css 移动端响应式解决方案"></a>Css 移动端响应式解决方案</h1><ul><li>vh，vw，em，px，百分比</li><li>vh,vw 没用过 em和rem差不多</li><li>百分比也是一个不错的解决方便</li><li>并没有完美的解决方案，只能说在该使用的地方去使用对的解决方法达到最好的效果</li></ul><hr><ul><li>下面说两个我用过的<h2 id="1-知道并用过感觉挺好的一个-js控制配合rem"><a href="#1-知道并用过感觉挺好的一个-js控制配合rem" class="headerlink" title="1. 知道并用过感觉挺好的一个 js控制配合rem"></a>1. 知道并用过感觉挺好的一个 js控制配合rem</h2></li><li>这个是我在github上面看到的一个vue+vuex的练习项目中下载写了学习时发现的</li><li>感觉这个方法挺不错的，js的控制动态切换窗口大小都能切换</li><li>配合上rem的适配感觉是一个很棒的响应式的解决方法</li></ul><hr><ol><li>js（把js封装在config中在min.js引入就好了方便快捷）,自调用获取dom更改html font-size<figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br></pre></td><td class="code"><pre><span class="line">(<span class="function"><span class="keyword">function</span>(<span class="params">doc, win</span>) </span>&#123;</span><br><span class="line">    <span class="keyword">var</span> docEl = doc.documentElement,</span><br><span class="line">        resizeEvt = <span class="string">'orientationchange'</span> <span class="keyword">in</span> <span class="built_in">window</span> ? <span class="string">'orientationchange'</span> : <span class="string">'resize'</span>,</span><br><span class="line">        recalc = <span class="function"><span class="keyword">function</span>(<span class="params"></span>) </span>&#123;</span><br><span class="line">            <span class="keyword">var</span> clientWidth = docEl.clientWidth;</span><br><span class="line">            <span class="keyword">if</span> (!clientWidth) <span class="keyword">return</span>;</span><br><span class="line">            docEl.style.fontSize = <span class="number">20</span> * (clientWidth / <span class="number">320</span>) + <span class="string">'px'</span>;</span><br><span class="line">        &#125;;</span><br><span class="line">    <span class="keyword">if</span> (!doc.addEventListener) <span class="keyword">return</span>;</span><br><span class="line">    win.addEventListener(resizeEvt, recalc, <span class="literal">false</span>);</span><br><span class="line">    doc.addEventListener(<span class="string">'DOMContentLoaded'</span>, recalc, <span class="literal">false</span>);</span><br><span class="line">&#125;)(<span class="built_in">document</span>, <span class="built_in">window</span>);</span><br></pre></td></tr></table></figure></li></ol><hr><ol start="2"><li>rem (vue项目中设置Scss)</li></ol><ul><li>ios：6.1系统以上都支持</li><li>android：2.1系统以上都支持</li><li>根据网页的根元素来设置字体大小，和em（font size of the element）的区别是，em是根据其父元素的字体大小来设置，而rem是根据网页的跟元素（html）来设置字体大小的</li><li>默认 font-size是16px<figure class="highlight scss"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">/* 默认16px */</span></span><br><span class="line"><span class="selector-tag">html</span> &#123;</span><br><span class="line">    <span class="attribute">font-size</span>:<span class="number">16px</span>;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="comment">/* 我们试试把p标签设置为12px的字体大小 */</span></span><br><span class="line"><span class="selector-tag">p</span> &#123;</span><br><span class="line">    <span class="attribute">font-size</span>: <span class="number">0.75rem</span>; <span class="comment">/* 12/16=0.75 rem */</span></span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure></li></ul><hr><h3 id="进阶"><a href="#进阶" class="headerlink" title="进阶"></a>进阶</h3><ul><li><p>如果利用rem来设置css的值，一般要通过一层计算才行，比如如果要设置一个长宽为100px的div，那么就需要计算出100px对应的rem值是 100 / 16 =6.25rem，这在我们写css中，其实算比较繁琐的一步操作了。</p></li><li><p>这两个方法我都没有去使用，只是知道可以这么去改变</p></li></ul><ol><li><p>对于没有使用scss的工程：<br>为了方便起见，可以将html的font-size设置成100px，这样在写单位时，直接将数值除以100在加上rem的单位就可以了</p></li><li><p>对于使用scss的工程：<br>前端构建中，完全可以利用scss来解决这个问题，例如我们可以写一个scss的function px2rem即：</p><figure class="highlight scss"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">/* 设置定义 */</span></span><br><span class="line">@function px2rem(<span class="variable">$px</span>)&#123;</span><br><span class="line">    <span class="variable">$rem</span> : <span class="number">37.5px</span>;</span><br><span class="line">    @return (<span class="variable">$px</span>/<span class="variable">$rem</span>) + rem;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="comment">/*使用时*/</span></span><br><span class="line"><span class="attribute">height</span>: px2rem(<span class="number">90px</span>);</span><br><span class="line"><span class="attribute">width</span>: px2rem(<span class="number">90px</span>);;</span><br></pre></td></tr></table></figure></li></ol><h2 id="2-媒体查询-改变-font-size-这个挺麻烦的考虑很多"><a href="#2-媒体查询-改变-font-size-这个挺麻烦的考虑很多" class="headerlink" title="2. 媒体查询 改变 font-size 这个挺麻烦的考虑很多"></a>2. 媒体查询 改变 font-size 这个挺麻烦的考虑很多</h2><ul><li>相比我更喜欢使用rem+js<figure class="highlight css"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br></pre></td><td class="code"><pre><span class="line"><span class="selector-tag">html</span> &#123;</span><br><span class="line">        <span class="attribute">font-size</span>: <span class="number">15px</span></span><br><span class="line">    &#125;</span><br><span class="line"><span class="comment">/* html &#123;</span></span><br><span class="line"><span class="comment">                font-size: 4.7vw;</span></span><br><span class="line"><span class="comment">     /* rem(root element)配合vw(viewport width)  */</span></span><br><span class="line">            &#125; */</span><br><span class="line">@<span class="keyword">media</span> only screen and (min-width:<span class="number">320PX</span>) and (max-width:<span class="number">359PX</span>) &#123;</span><br><span class="line">    <span class="selector-tag">html</span> &#123;</span><br><span class="line">        <span class="attribute">font-size</span>: <span class="number">15px</span></span><br><span class="line">    &#125;</span><br><span class="line">.....等</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure></li></ul><h1 id="网上摘录的方法"><a href="#网上摘录的方法" class="headerlink" title="网上摘录的方法"></a>网上摘录的方法</h1><h2 id="移动端准备工作写法"><a href="#移动端准备工作写法" class="headerlink" title="移动端准备工作写法"></a>移动端准备工作写法</h2><figure class="highlight html"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br></pre></td><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">meta</span> <span class="attr">name</span>=<span class="string">"viewport"</span> <span class="attr">content</span>=<span class="string">"width=device-width, initial-scale=1.0, maximum-scale=1.0, user-scalable=no"</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">meta</span> <span class="attr">http-equiv</span>=<span class="string">"X-UA-Compatible"</span> <span class="attr">content</span>=<span class="string">"IE=Edge，chrome=1"</span>&gt;</span></span><br><span class="line"><span class="comment">&lt;!-- 设置在苹果手机上以应用模式启动时，是否全屏 --&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">meta</span> <span class="attr">name</span>=<span class="string">'apple-touch-fullscreen'</span> <span class="attr">content</span>=<span class="string">'yes'</span>&gt;</span></span><br><span class="line"><span class="comment">&lt;!-- ios 系统 作用未知 --&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">meta</span> <span class="attr">name</span>=<span class="string">"apple-mobile-web-app-capable"</span> <span class="attr">content</span>=<span class="string">"yes"</span> /&gt;</span></span><br><span class="line"><span class="comment">&lt;!-- iso 系统 作用未知 --&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">meta</span> <span class="attr">content</span>=<span class="string">"fullscreen=yes,preventMove=no"</span> <span class="attr">name</span>=<span class="string">"ML-Config"</span>&gt;</span></span><br><span class="line"><span class="comment">&lt;!-- iso 系统 作用未知 --&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">meta</span> <span class="attr">name</span>=<span class="string">"apple-mobile-web-app-status-bar-style"</span> <span class="attr">content</span>=<span class="string">"black"</span> /&gt;</span></span><br><span class="line"> <span class="comment">&lt;!-- 是否识别 手机号码、 电子邮件 地址 等--&gt;</span></span><br><span class="line"> <span class="tag">&lt;<span class="name">meta</span> <span class="attr">name</span>=<span class="string">"format-detection"</span> <span class="attr">content</span>=<span class="string">"telephone=no,email=no,address=no"</span> /&gt;</span></span><br><span class="line"></span><br><span class="line"><span class="comment">&lt;!-- 让360双核浏览器用webkit内核渲染页面 --&gt;</span>  </span><br><span class="line"></span><br><span class="line"><span class="tag">&lt;<span class="name">meta</span> <span class="attr">name</span>=<span class="string">"renderer"</span> <span class="attr">content</span>=<span class="string">"webkit"</span>&gt;</span> </span><br><span class="line"></span><br><span class="line"><span class="comment">&lt;!-- 避免IE使用兼容模式 --&gt;</span>  </span><br><span class="line"></span><br><span class="line"><span class="tag">&lt;<span class="name">meta</span> <span class="attr">http-equiv</span>=<span class="string">"X-UA-Compatible"</span> <span class="attr">content</span>=<span class="string">"IE=edge"</span>&gt;</span> </span><br><span class="line"></span><br><span class="line"> 允许全屏模式浏览,隐藏浏览器导航栏--&gt;</span><br><span class="line"><span class="tag">&lt;<span class="name">meta</span> <span class="attr">name</span>=<span class="string">"apple-mobile-web-app-capable"</span> <span class="attr">content</span>=<span class="string">"yes"</span> /&gt;</span></span><br><span class="line"></span><br><span class="line"><span class="comment">&lt;!--微信缓存--&gt;</span>  </span><br><span class="line">    <span class="tag">&lt;<span class="name">meta</span> <span class="attr">http-equiv</span>=<span class="string">"Cache-Control"</span> <span class="attr">content</span>=<span class="string">"no-cache, no-store, must-revalidate"</span> /&gt;</span>  </span><br><span class="line">    <span class="tag">&lt;<span class="name">meta</span> <span class="attr">http-equiv</span>=<span class="string">"Pragma"</span> <span class="attr">content</span>=<span class="string">"no-cache"</span> /&gt;</span>  </span><br><span class="line">    <span class="tag">&lt;<span class="name">meta</span> <span class="attr">http-equiv</span>=<span class="string">"Expires"</span> <span class="attr">content</span>=<span class="string">"0"</span> /&gt;</span>  </span><br><span class="line"></span><br><span class="line"><span class="comment">&lt;!--[if lt IE 9]&gt;</span></span><br><span class="line"><span class="comment">  &lt;script src="https://oss.maxcdn.com/libs/html5shiv/3.7.0/html5shiv.js"&gt;&lt;/script&gt;</span></span><br><span class="line"><span class="comment">  &lt;script src="https://oss.maxcdn.com/libs/respond.js/1.3.0/respond.min.js"&gt;&lt;/script&gt;</span></span><br><span class="line"><span class="comment">&lt;![endif]--&gt;</span></span><br></pre></td></tr></table></figure><h2 id="pc端准备工作"><a href="#pc端准备工作" class="headerlink" title="pc端准备工作"></a>pc端准备工作</h2><figure class="highlight html"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br></pre></td><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">meta</span> <span class="attr">name</span>=<span class="string">"viewport"</span> <span class="attr">content</span>=<span class="string">"width=device-width, initial-scale=1.0, maximum-scale=1.0, user-scalable=no"</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">meta</span> <span class="attr">http-equiv</span>=<span class="string">"X-UA-Compatible"</span> <span class="attr">content</span>=<span class="string">"IE=Edge，chrome=1"</span>&gt;</span></span><br><span class="line"><span class="comment">&lt;!-- 让360双核浏览器用webkit内核渲染页面 --&gt;</span>  </span><br><span class="line"></span><br><span class="line"><span class="tag">&lt;<span class="name">meta</span> <span class="attr">name</span>=<span class="string">"renderer"</span> <span class="attr">content</span>=<span class="string">"webkit"</span>&gt;</span> </span><br><span class="line"></span><br><span class="line"><span class="comment">&lt;!--[if lt IE 9]&gt;</span></span><br><span class="line"><span class="comment">  &lt;script src="https://oss.maxcdn.com/libs/html5shiv/3.7.0/html5shiv.js"&gt;&lt;/script&gt;</span></span><br><span class="line"><span class="comment">  &lt;script src="https://oss.maxcdn.com/libs/respond.js/1.3.0/respond.min.js"&gt;&lt;/script&gt;</span></span><br><span class="line"><span class="comment">&lt;![endif]--&gt;</span></span><br></pre></td></tr></table></figure><h2 id="base-css公共样式pc端"><a href="#base-css公共样式pc端" class="headerlink" title="base.css公共样式pc端"></a>base.css公共样式pc端</h2><figure class="highlight css"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br></pre></td><td class="code"><pre><span class="line"><span class="selector-tag">body</span>, <span class="selector-tag">div</span>, <span class="selector-tag">span</span>, <span class="selector-tag">object</span>, <span class="selector-tag">iframe</span>, <span class="selector-tag">h1</span>, <span class="selector-tag">h2</span>, <span class="selector-tag">h3</span>, <span class="selector-tag">h4</span>, <span class="selector-tag">h5</span>, <span class="selector-tag">h6</span>, <span class="selector-tag">p</span>, <span class="selector-tag">blockquote</span>, <span class="selector-tag">pre</span>, <span class="selector-tag">abbr</span>, <span class="selector-tag">address</span>, <span class="selector-tag">cite</span>, <span class="selector-tag">code</span>, <span class="selector-tag">del</span>, <span class="selector-tag">dfn</span>, <span class="selector-tag">em</span>, <span class="selector-tag">img</span>, <span class="selector-tag">ins</span>, <span class="selector-tag">kbd</span>, <span class="selector-tag">q</span>, <span class="selector-tag">samp</span>, <span class="selector-tag">small</span>, <span class="selector-tag">strong</span>, <span class="selector-tag">sub</span>, <span class="selector-tag">sup</span>, <span class="selector-tag">var</span>, <span class="selector-tag">b</span>, <span class="selector-tag">i</span>, <span class="selector-tag">dl</span>, <span class="selector-tag">dt</span>, <span class="selector-tag">dd</span>, <span class="selector-tag">ol</span>, <span class="selector-tag">ul</span>, <span class="selector-tag">li</span>, <span class="selector-tag">fieldset</span>, <span class="selector-tag">form</span>, <span class="selector-tag">label</span>, <span class="selector-tag">legend</span>, <span class="selector-tag">table</span>, <span class="selector-tag">caption</span>, <span class="selector-tag">tbody</span>, <span class="selector-tag">tfoot</span>, <span class="selector-tag">thead</span>, <span class="selector-tag">tr</span>, <span class="selector-tag">th</span>, <span class="selector-tag">td</span>, <span class="selector-tag">article</span>, <span class="selector-tag">aside</span>, <span class="selector-tag">canvas</span>, <span class="selector-tag">details</span>, <span class="selector-tag">figcaption</span>, <span class="selector-tag">figure</span>, <span class="selector-tag">footer</span>, <span class="selector-tag">header</span>, <span class="selector-tag">hgroup</span>, <span class="selector-tag">menu</span>, <span class="selector-tag">nav</span>, <span class="selector-tag">section</span>, <span class="selector-tag">summary</span>, <span class="selector-tag">time</span>, <span class="selector-tag">mark</span>, <span class="selector-tag">audio</span>, <span class="selector-tag">video</span> &#123; <span class="attribute">margin</span>:<span class="number">0</span>;<span class="attribute">padding</span>:<span class="number">0</span>；border: <span class="number">0</span>;&#125;</span><br><span class="line"></span><br><span class="line"><span class="selector-tag">ol</span>,<span class="selector-tag">li</span>,<span class="selector-tag">ul</span>,<span class="selector-tag">dl</span>,<span class="selector-tag">dt</span>,<span class="selector-tag">dd</span>&#123;<span class="attribute">list-style</span>:none;&#125;</span><br><span class="line"></span><br><span class="line"><span class="selector-tag">table</span>&#123;<span class="attribute">border-collapse</span>:collapse;<span class="attribute">border-spacing</span>:<span class="number">0</span>&#125;</span><br><span class="line"></span><br><span class="line"><span class="selector-tag">h1</span>,<span class="selector-tag">h2</span>,<span class="selector-tag">h3</span>,<span class="selector-tag">h4</span>,<span class="selector-tag">h5</span>,<span class="selector-tag">h6</span>,<span class="selector-tag">i</span>,<span class="selector-tag">strong</span> &#123;<span class="attribute">font-weight</span>: normal;&#125;  </span><br><span class="line"></span><br><span class="line"><span class="selector-tag">img</span> &#123;<span class="attribute">vertical-align</span>: middle;<span class="attribute">border</span>: none;<span class="attribute">width</span>: <span class="number">100%</span>;&#125;  </span><br><span class="line"><span class="selector-tag">i</span> &#123;<span class="attribute">font</span>: inherit;&#125;  </span><br><span class="line"></span><br><span class="line"><span class="selector-tag">a</span> &#123;<span class="attribute">color</span>: <span class="number">#fff</span>;<span class="attribute">text-decoration</span>: none;<span class="attribute">-webkit-tap-highlight-color</span>: <span class="built_in">rgba</span>(0, 0, 0, 0); <span class="attribute">background-color</span>:transparent;&#125;</span><br><span class="line"></span><br><span class="line"><span class="selector-tag">a</span><span class="selector-pseudo">:hover</span> &#123;<span class="attribute">text-decoration</span>: underline; <span class="attribute">outline</span>: none;&#125;  </span><br><span class="line"></span><br><span class="line"><span class="selector-tag">select</span><span class="selector-pseudo">::-ms-expand</span> &#123; <span class="attribute">display</span>: none; &#125;  </span><br><span class="line"></span><br><span class="line"><span class="selector-tag">a</span><span class="selector-pseudo">:active</span>,<span class="selector-tag">a</span><span class="selector-pseudo">:hover</span>&#123;<span class="attribute">outline</span>:<span class="number">0</span>&#125;</span><br><span class="line"></span><br><span class="line"><span class="selector-class">.clearfix</span><span class="selector-pseudo">::before</span>,</span><br><span class="line"><span class="selector-class">.clearfix</span><span class="selector-pseudo">::after</span>&#123;</span><br><span class="line">    <span class="attribute">content</span>: <span class="string">''</span>;</span><br><span class="line">    <span class="attribute">display</span>: block;</span><br><span class="line">    <span class="attribute">height</span>: <span class="number">0</span>;</span><br><span class="line">    <span class="attribute">line-height</span>: <span class="number">0</span>;</span><br><span class="line">    <span class="attribute">visibility</span>: hidden;</span><br><span class="line">    <span class="attribute">clear</span>: both;</span><br><span class="line"></span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="selector-class">.fl</span>&#123; <span class="attribute">float</span>:left;&#125;</span><br><span class="line"><span class="selector-class">.fr</span>&#123;<span class="attribute">float</span>:right;&#125;</span><br><span class="line"></span><br><span class="line"><span class="selector-tag">input</span>,<span class="selector-tag">select</span>,<span class="selector-tag">option</span>&#123;<span class="attribute">vertical-align</span>:middle;<span class="attribute">border-radius</span>:<span class="number">0px</span>;<span class="attribute">-moz-appearance</span>:none;<span class="attribute">-webkit-appearance</span>:none;<span class="attribute">appearance</span>:none;<span class="attribute">-webkit-tap-highlight-color</span>: <span class="built_in">rgba</span>(0, 0, 0, 0);<span class="attribute">outline</span>: none;&#125;</span><br><span class="line"></span><br><span class="line"><span class="selector-tag">input</span><span class="selector-attr">[type="text"]</span>,<span class="selector-tag">input</span><span class="selector-attr">[type="button"]</span>,<span class="selector-tag">input</span><span class="selector-attr">[type="submit"]</span>,<span class="selector-tag">input</span><span class="selector-attr">[type="reset"]</span>&#123;<span class="attribute">-webkit-appearance</span>: none;<span class="attribute">appearance</span>: none;<span class="attribute">border-radius</span>: <span class="number">0</span>;<span class="attribute">outline</span>: none;&#125;  </span><br><span class="line"></span><br><span class="line"><span class="selector-class">.overflow</span> &#123;<span class="attribute">overflow</span>:hidden; &#125;</span><br></pre></td></tr></table></figure><h2 id="base-css公共样式移动端"><a href="#base-css公共样式移动端" class="headerlink" title="base.css公共样式移动端"></a>base.css公共样式移动端</h2><figure class="highlight css"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br><span class="line">64</span><br><span class="line">65</span><br><span class="line">66</span><br><span class="line">67</span><br><span class="line">68</span><br><span class="line">69</span><br><span class="line">70</span><br><span class="line">71</span><br><span class="line">72</span><br><span class="line">73</span><br><span class="line">74</span><br><span class="line">75</span><br><span class="line">76</span><br><span class="line">77</span><br><span class="line">78</span><br><span class="line">79</span><br><span class="line">80</span><br><span class="line">81</span><br><span class="line">82</span><br><span class="line">83</span><br><span class="line">84</span><br><span class="line">85</span><br><span class="line">86</span><br><span class="line">87</span><br><span class="line">88</span><br><span class="line">89</span><br><span class="line">90</span><br><span class="line">91</span><br><span class="line">92</span><br><span class="line">93</span><br><span class="line">94</span><br><span class="line">95</span><br><span class="line">96</span><br><span class="line">97</span><br><span class="line">98</span><br><span class="line">99</span><br><span class="line">100</span><br><span class="line">101</span><br><span class="line">102</span><br><span class="line">103</span><br><span class="line">104</span><br><span class="line">105</span><br><span class="line">106</span><br><span class="line">107</span><br><span class="line">108</span><br><span class="line">109</span><br><span class="line">110</span><br><span class="line">111</span><br></pre></td><td class="code"><pre><span class="line"><span class="selector-tag">body</span>, <span class="selector-tag">div</span>, <span class="selector-tag">span</span>, <span class="selector-tag">object</span>, <span class="selector-tag">iframe</span>, <span class="selector-tag">h1</span>, <span class="selector-tag">h2</span>, <span class="selector-tag">h3</span>, <span class="selector-tag">h4</span>, <span class="selector-tag">h5</span>, <span class="selector-tag">h6</span>, <span class="selector-tag">p</span>, <span class="selector-tag">blockquote</span>, <span class="selector-tag">pre</span>, <span class="selector-tag">abbr</span>, <span class="selector-tag">address</span>, <span class="selector-tag">cite</span>, <span class="selector-tag">code</span>, <span class="selector-tag">del</span>, <span class="selector-tag">dfn</span>, <span class="selector-tag">em</span>, <span class="selector-tag">img</span>, <span class="selector-tag">ins</span>, <span class="selector-tag">kbd</span>, <span class="selector-tag">q</span>, <span class="selector-tag">samp</span>, <span class="selector-tag">small</span>, <span class="selector-tag">strong</span>, <span class="selector-tag">sub</span>, <span class="selector-tag">sup</span>, <span class="selector-tag">var</span>, <span class="selector-tag">b</span>, <span class="selector-tag">i</span>, <span class="selector-tag">dl</span>, <span class="selector-tag">dt</span>, <span class="selector-tag">dd</span>, <span class="selector-tag">ol</span>, <span class="selector-tag">ul</span>, <span class="selector-tag">li</span>, <span class="selector-tag">fieldset</span>, <span class="selector-tag">form</span>, <span class="selector-tag">label</span>, <span class="selector-tag">legend</span>, <span class="selector-tag">table</span>, <span class="selector-tag">caption</span>, <span class="selector-tag">tbody</span>, <span class="selector-tag">tfoot</span>, <span class="selector-tag">thead</span>, <span class="selector-tag">tr</span>, <span class="selector-tag">th</span>, <span class="selector-tag">td</span>, <span class="selector-tag">article</span>, <span class="selector-tag">aside</span>, <span class="selector-tag">canvas</span>, <span class="selector-tag">details</span>, <span class="selector-tag">figcaption</span>, <span class="selector-tag">figure</span>, <span class="selector-tag">footer</span>, <span class="selector-tag">header</span>, <span class="selector-tag">hgroup</span>, <span class="selector-tag">menu</span>, <span class="selector-tag">nav</span>, <span class="selector-tag">section</span>, <span class="selector-tag">summary</span>, <span class="selector-tag">time</span>, <span class="selector-tag">mark</span>, <span class="selector-tag">audio</span>, <span class="selector-tag">video</span> &#123; <span class="attribute">margin</span>:<span class="number">0</span>;<span class="attribute">padding</span>:<span class="number">0</span>&#125;</span><br><span class="line"></span><br><span class="line"><span class="selector-tag">ol</span>,<span class="selector-tag">li</span>,<span class="selector-tag">ul</span>,<span class="selector-tag">dl</span>,<span class="selector-tag">dt</span>,<span class="selector-tag">dd</span>&#123;<span class="attribute">list-style</span>:none;&#125;</span><br><span class="line"><span class="selector-class">.fl</span> &#123;<span class="attribute">float</span>: left;&#125;  </span><br><span class="line"><span class="selector-class">.fr</span> &#123;<span class="attribute">float</span>: right;&#125; </span><br><span class="line"></span><br><span class="line"><span class="selector-tag">table</span>&#123;<span class="attribute">border-collapse</span>:collapse;<span class="attribute">border-spacing</span>:<span class="number">0</span>&#125;</span><br><span class="line"></span><br><span class="line"><span class="selector-tag">html</span> &#123;  </span><br><span class="line">    <span class="attribute">-webkit-text-size-adjust</span>: <span class="number">100%</span>;  </span><br><span class="line">    <span class="attribute">-ms-text-size-adjust</span>: <span class="number">100%</span>;  </span><br><span class="line">    <span class="comment">/* 解决IOS默认滑动很卡的情况 */</span>  </span><br><span class="line">    <span class="attribute">-webkit-overflow-scrolling </span>: touch;  </span><br><span class="line">&#125;  </span><br><span class="line">  </span><br><span class="line"><span class="comment">/* 禁止缩放表单 */</span>  </span><br><span class="line"><span class="selector-tag">input</span><span class="selector-attr">[type="submit"]</span>, <span class="selector-tag">input</span><span class="selector-attr">[type="reset"]</span>, <span class="selector-tag">input</span><span class="selector-attr">[type="button"]</span>, <span class="selector-tag">input</span> &#123;  </span><br><span class="line">    <span class="attribute">resize</span>: none;  </span><br><span class="line">    <span class="attribute">border</span>: none;  </span><br><span class="line">&#125;  </span><br><span class="line">  </span><br><span class="line"><span class="comment">/* 取消链接高亮  */</span>  </span><br><span class="line"><span class="selector-tag">body</span>, <span class="selector-tag">div</span>, <span class="selector-tag">ul</span>, <span class="selector-tag">li</span>, <span class="selector-tag">ol</span>, <span class="selector-tag">h1</span>, <span class="selector-tag">h2</span>, <span class="selector-tag">h3</span>, <span class="selector-tag">h4</span>, <span class="selector-tag">h5</span>, <span class="selector-tag">h6</span>, <span class="selector-tag">input</span>, <span class="selector-tag">textarea</span>, <span class="selector-tag">select</span>, <span class="selector-tag">p</span>, <span class="selector-tag">dl</span>, <span class="selector-tag">dt</span>, <span class="selector-tag">dd</span>, <span class="selector-tag">a</span>, <span class="selector-tag">img</span>, <span class="selector-tag">button</span>, <span class="selector-tag">form</span>, <span class="selector-tag">table</span>, <span class="selector-tag">th</span>, <span class="selector-tag">tr</span>, <span class="selector-tag">td</span>, <span class="selector-tag">tbody</span>, <span class="selector-tag">article</span>, <span class="selector-tag">aside</span>, <span class="selector-tag">details</span>, <span class="selector-tag">figcaption</span>, <span class="selector-tag">figure</span>, <span class="selector-tag">footer</span>, <span class="selector-tag">header</span>, <span class="selector-tag">hgroup</span>, <span class="selector-tag">menu</span>, <span class="selector-tag">nav</span>, <span class="selector-tag">section</span> &#123;  </span><br><span class="line">    <span class="attribute">-webkit-tap-highlight-color</span>: <span class="built_in">rgba</span>(0, 0, 0, 0);  </span><br><span class="line">&#125;  </span><br><span class="line">  </span><br><span class="line"><span class="comment">/* 设置HTML5元素为块 */</span>  </span><br><span class="line"><span class="selector-tag">article</span>, <span class="selector-tag">aside</span>, <span class="selector-tag">details</span>, <span class="selector-tag">figcaption</span>, <span class="selector-tag">figure</span>, <span class="selector-tag">footer</span>, <span class="selector-tag">header</span>, <span class="selector-tag">hgroup</span>, <span class="selector-tag">menu</span>, <span class="selector-tag">nav</span>, <span class="selector-tag">section</span> &#123;  </span><br><span class="line">    <span class="attribute">display</span>: block;  </span><br><span class="line">&#125;  </span><br><span class="line">  </span><br><span class="line"><span class="comment">/* 图片自适应 */</span>  </span><br><span class="line"><span class="selector-tag">img</span> &#123;  </span><br><span class="line">    <span class="attribute">width</span>: <span class="number">100%</span>;  </span><br><span class="line">    <span class="attribute">height</span>: auto;  </span><br><span class="line">    <span class="attribute">width</span>: auto\<span class="number">9</span>; <span class="comment">/* ie8 */</span>  </span><br><span class="line">    <span class="attribute">-ms-interpolation-mode</span>: bicubic;<span class="comment">/*为了照顾ie图片缩放失真*/</span>  </span><br><span class="line">&#125;  </span><br><span class="line"><span class="selector-tag">em</span>, <span class="selector-tag">i</span> &#123;  </span><br><span class="line">    <span class="attribute">font-style</span>: normal;  </span><br><span class="line">&#125;  </span><br><span class="line"><span class="selector-tag">textarea</span> &#123;  </span><br><span class="line">    <span class="attribute">resize</span>:none; <span class="comment">/*禁用了文本的拖拉，尤其在谷歌下*/</span>  </span><br><span class="line">&#125;   </span><br><span class="line"><span class="selector-tag">p</span> &#123;  </span><br><span class="line">    <span class="attribute">word-wrap</span>:break-word; <span class="comment">/* 不够的单词自动换行 而不会被截掉 */</span>  </span><br><span class="line">&#125;  </span><br><span class="line"><span class="selector-class">.clearfix</span><span class="selector-pseudo">:after</span> &#123;  </span><br><span class="line">    <span class="attribute">content</span>: <span class="string">""</span>;  </span><br><span class="line">    <span class="attribute">display</span>: block;  </span><br><span class="line">    <span class="attribute">visibility</span>: hidden;  </span><br><span class="line">    <span class="attribute">height</span>: <span class="number">0</span>;  </span><br><span class="line">    <span class="attribute">clear</span>: both;  </span><br><span class="line">&#125;  </span><br><span class="line"><span class="selector-class">.clearfix</span> &#123;  </span><br><span class="line">    <span class="attribute">zoom</span>: <span class="number">1</span>;  </span><br><span class="line">&#125;  </span><br><span class="line"><span class="selector-tag">a</span> &#123;  </span><br><span class="line">    <span class="attribute">text-decoration</span>: none;  </span><br><span class="line">    <span class="attribute">color</span>: <span class="number">#fff</span>;  </span><br><span class="line">    <span class="attribute">font-family</span>: <span class="string">'Microsoft YaHei'</span>, Tahoma, Arial, sans-serif;  </span><br><span class="line">&#125;  </span><br><span class="line"><span class="selector-tag">a</span><span class="selector-pseudo">:hover</span> &#123;  </span><br><span class="line">    <span class="attribute">text-decoration</span>: none;  <span class="attribute">outline</span>: none;</span><br><span class="line"></span><br><span class="line">&#125;  </span><br><span class="line"> </span><br><span class="line"><span class="selector-tag">h1</span>, <span class="selector-tag">h2</span>, <span class="selector-tag">h3</span>, <span class="selector-tag">h4</span>, <span class="selector-tag">h5</span>, <span class="selector-tag">h6</span> &#123;  </span><br><span class="line">    <span class="attribute">font-size</span>: <span class="number">100%</span>;  </span><br><span class="line">    <span class="attribute">font-family</span>: <span class="string">'Microsoft YaHei'</span>;  </span><br><span class="line">&#125;  </span><br><span class="line"><span class="selector-tag">img</span> &#123;  </span><br><span class="line">    <span class="attribute">border</span>: none;  </span><br><span class="line">&#125;  </span><br><span class="line"><span class="selector-tag">input</span>&#123;  </span><br><span class="line">    <span class="attribute">font-family</span>: <span class="string">'Microsoft YaHei'</span>;  </span><br><span class="line">&#125;  </span><br><span class="line"><span class="comment">/*单行溢出*/</span>  </span><br><span class="line"><span class="selector-class">.one-txt-cut</span>&#123;  </span><br><span class="line">    <span class="attribute">overflow</span>: hidden;  </span><br><span class="line">    <span class="attribute">white-space</span>: nowrap;  </span><br><span class="line">    <span class="attribute">text-overflow</span>: ellipsis;  </span><br><span class="line">&#125;  </span><br><span class="line"><span class="comment">/*多行溢出 手机端使用*/</span>  </span><br><span class="line"><span class="selector-class">.txt-cut</span>&#123;  </span><br><span class="line">    <span class="attribute">overflow </span>: hidden;  </span><br><span class="line">    <span class="attribute">text-overflow</span>: ellipsis;  </span><br><span class="line">    <span class="attribute">display</span>: -webkit-box;  </span><br><span class="line">    <span class="comment">/* -webkit-line-clamp: 2; */</span>  </span><br><span class="line">    <span class="attribute">-webkit-box-orient</span>: vertical;  </span><br><span class="line">&#125;  </span><br><span class="line"><span class="comment">/* 移动端点击a链接出现蓝色背景问题解决 */</span>  </span><br><span class="line"><span class="selector-tag">a</span><span class="selector-pseudo">:link</span>,<span class="selector-tag">a</span><span class="selector-pseudo">:active</span>,<span class="selector-tag">a</span><span class="selector-pseudo">:visited</span>,<span class="selector-tag">a</span><span class="selector-pseudo">:hover</span> &#123;  </span><br><span class="line">    <span class="attribute">background</span>: none;  </span><br><span class="line">    <span class="attribute">-webkit-tap-highlight-color</span>: <span class="built_in">rgba</span>(0,0,0,0);  </span><br><span class="line">    <span class="attribute">-webkit-tap-highlight-color</span>: transparent;  </span><br><span class="line">&#125;  </span><br><span class="line"><span class="selector-class">.overflow</span> &#123;<span class="attribute">overflow</span>:hidden; &#125;</span><br><span class="line"></span><br><span class="line"><span class="selector-class">.w50</span>&#123;  </span><br><span class="line">    <span class="attribute">width</span>: <span class="number">50%</span>;  </span><br><span class="line">&#125;  </span><br><span class="line"><span class="selector-class">.w25</span>&#123;  </span><br><span class="line">    <span class="attribute">width</span>: <span class="number">25%</span>;  </span><br><span class="line">&#125;  </span><br><span class="line"><span class="selector-class">.w20</span>&#123;  </span><br><span class="line">    <span class="attribute">width</span>: <span class="number">20%</span>;  </span><br><span class="line">&#125;  </span><br><span class="line"><span class="selector-class">.w33</span>&#123;  </span><br><span class="line">    <span class="attribute">width</span>: <span class="number">33.333333%</span>;  </span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h2 id="移动端布局使用方法rem-他这个和我那个差不多"><a href="#移动端布局使用方法rem-他这个和我那个差不多" class="headerlink" title="移动端布局使用方法rem (他这个和我那个差不多)"></a>移动端布局使用方法rem (他这个和我那个差不多)</h2><h3 id="第一种：js控制html字体大小，-js代码放在head里面"><a href="#第一种：js控制html字体大小，-js代码放在head里面" class="headerlink" title="第一种：js控制html字体大小， js代码放在head里面"></a>第一种：js控制html字体大小， js代码放在head里面</h3><ul><li>html设置初始font-size：320px的字体大小 <figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br></pre></td><td class="code"><pre><span class="line"> <span class="keyword">var</span> html = <span class="built_in">document</span>.getElementsByTagName(<span class="string">'html'</span>)[<span class="number">0</span>];</span><br><span class="line"></span><br><span class="line"><span class="keyword">if</span>(html)&#123;</span><br><span class="line">    <span class="keyword">var</span> w = <span class="built_in">window</span>.innerWidth;</span><br><span class="line">    <span class="keyword">var</span> fontSize = (w&gt;<span class="number">640</span>?<span class="number">640</span>:w)/<span class="number">640</span> *<span class="number">30</span>; 这里最少<span class="number">30</span>，</span><br><span class="line">    html.style.fontSize = fontSize + <span class="string">'px'</span>;</span><br><span class="line">&#125;</span><br><span class="line"><span class="built_in">window</span>.onload = <span class="function"><span class="keyword">function</span>(<span class="params"></span>)</span>&#123;</span><br><span class="line">    <span class="built_in">window</span>.onresize = <span class="function"><span class="keyword">function</span>(<span class="params"></span>)</span>&#123;</span><br><span class="line">        <span class="keyword">var</span> w = <span class="built_in">window</span>.innerWidth;</span><br><span class="line">        <span class="built_in">console</span>.log(w);</span><br><span class="line">        <span class="keyword">var</span> fontSize = (w&gt;<span class="number">640</span>?<span class="number">640</span>:w)/<span class="number">640</span> * <span class="number">30</span>;这里最少<span class="number">30</span>，</span><br><span class="line">        html.style.fontSize = fontSize + <span class="string">'px'</span>;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure></li></ul><h3 id="第二种：js控制html字体大小常用-，js代码放在head里面"><a href="#第二种：js控制html字体大小常用-，js代码放在head里面" class="headerlink" title="第二种：js控制html字体大小常用 ，js代码放在head里面"></a>第二种：js控制html字体大小常用 ，js代码放在head里面</h3><ul><li>html设置初始font-size：320px的字体大小 <figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br></pre></td><td class="code"><pre><span class="line">(<span class="function"><span class="keyword">function</span>(<span class="params">doc, win</span>) </span>&#123;  </span><br><span class="line">    <span class="keyword">var</span> docEl = doc.documentElement;  </span><br><span class="line">    <span class="keyword">var</span> resizeEvt = <span class="string">'orientationchange'</span> <span class="keyword">in</span> <span class="built_in">window</span> ? <span class="string">'orientationchange'</span>: <span class="string">'resize'</span>;   </span><br><span class="line">    <span class="keyword">var</span> recalc = <span class="function"><span class="keyword">function</span>(<span class="params"></span>) </span>&#123;  </span><br><span class="line">        <span class="keyword">var</span> clientWidth = docEl.clientWidth;  </span><br><span class="line">        <span class="keyword">if</span> (!clientWidth)  </span><br><span class="line">            <span class="keyword">return</span>;  </span><br><span class="line">        docEl.style.fontSize = (clientWidth&gt;<span class="number">640</span>?<span class="number">640</span>:clientWidth)/ <span class="number">320</span> *<span class="number">20</span> +  <span class="string">'px'</span>;  </span><br><span class="line">    &#125;;  </span><br><span class="line">    <span class="comment">// 不同浏览器resize事件处理机制不同  </span></span><br><span class="line">    <span class="comment">// 使用定时器延迟处理resize回调函数以降低重复响应  </span></span><br><span class="line">    <span class="keyword">var</span> recalcTimer = <span class="literal">null</span>;  </span><br><span class="line">    <span class="keyword">var</span> delaycalc = <span class="function"><span class="keyword">function</span>(<span class="params"></span>) </span>&#123;  </span><br><span class="line">        win.clearTimeout(recalcTimer);  </span><br><span class="line">        recalcTimer = win.setTimeout(recalc, <span class="number">100</span>);  </span><br><span class="line">    &#125;;  </span><br><span class="line">    <span class="comment">// 移动端不需要考虑事件注册函数的兼容性  </span></span><br><span class="line">    <span class="keyword">if</span> (!doc.addEventListener)  </span><br><span class="line">        <span class="keyword">return</span>;  </span><br><span class="line">    win.addEventListener(resizeEvt, delaycalc, <span class="literal">false</span>);  </span><br><span class="line">    <span class="comment">// DOMContentLoaded事件只在DOM文档树加载完毕触发，此处不用延迟处理  </span></span><br><span class="line"> doc.addEventListener(<span class="string">'DOMContentLoaded'</span>, recalc, <span class="literal">false</span>); </span><br><span class="line">&#125;)(<span class="built_in">document</span>, <span class="built_in">window</span>);</span><br></pre></td></tr></table></figure></li></ul><h3 id="第三种：用媒体查询控制html字体大小（这种也是我用过的看看他着么说）"><a href="#第三种：用媒体查询控制html字体大小（这种也是我用过的看看他着么说）" class="headerlink" title="第三种：用媒体查询控制html字体大小（这种也是我用过的看看他着么说）"></a>第三种：用媒体查询控制html字体大小（这种也是我用过的看看他着么说）</h3><h4 id="一：字体大小为15px开始-常用"><a href="#一：字体大小为15px开始-常用" class="headerlink" title="一：字体大小为15px开始 常用"></a>一：字体大小为15px开始 常用</h4><figure class="highlight css"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br></pre></td><td class="code"><pre><span class="line"><span class="selector-tag">html</span> &#123;</span><br><span class="line">                <span class="attribute">font-size</span>: <span class="number">15px</span></span><br><span class="line">            &#125;</span><br><span class="line"><span class="selector-tag">html</span> &#123;</span><br><span class="line">                <span class="attribute">font-size</span>: <span class="number">4.7vw</span>;</span><br><span class="line">                <span class="comment">/* rem(root element)配合vw(viewport width)  */</span></span><br><span class="line">            &#125;</span><br><span class="line">@<span class="keyword">media</span> only screen and (min-width:<span class="number">320PX</span>) and (max-width:<span class="number">359PX</span>) &#123;</span><br><span class="line">    <span class="selector-tag">html</span> &#123;</span><br><span class="line">        <span class="attribute">font-size</span>: <span class="number">15px</span></span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line">@<span class="keyword">media</span> only screen and (min-width:<span class="number">360PX</span>) and (max-width:<span class="number">374PX</span>) &#123;</span><br><span class="line">    <span class="selector-tag">html</span> &#123;</span><br><span class="line">        <span class="attribute">font-size</span>: <span class="number">16.875px</span></span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line">@<span class="keyword">media</span> only screen and (min-width:<span class="number">375PX</span>) and (max-width:<span class="number">389PX</span>) &#123;</span><br><span class="line">    <span class="selector-tag">html</span> &#123;</span><br><span class="line">        <span class="attribute">font-size</span>: <span class="number">17.5781px</span></span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line">@<span class="keyword">media</span> only screen and (min-width:<span class="number">390PX</span>) and (max-width:<span class="number">400PX</span>) &#123;</span><br><span class="line">    <span class="selector-tag">html</span> &#123;</span><br><span class="line">        <span class="attribute">font-size</span>: <span class="number">18.75px</span></span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line">@<span class="keyword">media</span> only screen and (min-width:<span class="number">401PX</span>) and (max-width:<span class="number">414PX</span>) &#123;</span><br><span class="line">    <span class="selector-tag">html</span> &#123;</span><br><span class="line">        <span class="attribute">font-size</span>: <span class="number">19.4063px</span></span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br><span class="line">@<span class="keyword">media</span> only screen and (min-width:<span class="number">415PX</span>) and (max-width:<span class="number">640PX</span>) &#123;</span><br><span class="line">    <span class="selector-tag">html</span> &#123;</span><br><span class="line">        <span class="attribute">font-size</span>:<span class="number">22.5px</span></span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line">@<span class="keyword">media</span> screen and (min-width:<span class="number">641PX</span>) &#123;</span><br><span class="line">    <span class="selector-tag">html</span> &#123;</span><br><span class="line">        <span class="attribute">font-size</span>: <span class="number">30px</span></span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h4 id="二：字体大小为13-65px-不常用"><a href="#二：字体大小为13-65px-不常用" class="headerlink" title="二：字体大小为13.65px 不常用"></a>二：字体大小为13.65px 不常用</h4><figure class="highlight css"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br></pre></td><td class="code"><pre><span class="line"><span class="selector-tag">html</span> &#123;</span><br><span class="line">           <span class="attribute">font-size</span>: <span class="number">4.2vw</span>;</span><br><span class="line">           <span class="comment">/* rem(root element)配合vw(viewport width)  */</span></span><br><span class="line">       &#125;</span><br><span class="line">       <span class="selector-tag">html</span> &#123;</span><br><span class="line">                <span class="attribute">font-size</span>: <span class="number">13.65px</span></span><br><span class="line">            &#125;</span><br><span class="line">       @<span class="keyword">media</span> only screen and (min-width:<span class="number">320PX</span>) and (max-width:<span class="number">360PX</span>) &#123;</span><br><span class="line">            <span class="selector-tag">html</span> &#123;</span><br><span class="line">                <span class="attribute">font-size</span>: <span class="number">13.65px</span></span><br><span class="line">            &#125;</span><br><span class="line">        &#125;</span><br><span class="line"></span><br><span class="line">        @<span class="keyword">media</span> only screen and (min-width:<span class="number">360PX</span>) and (max-width:<span class="number">375PX</span>) &#123;</span><br><span class="line">            <span class="selector-tag">html</span> &#123;</span><br><span class="line">                <span class="attribute">font-size</span>: <span class="number">15.36px</span></span><br><span class="line">            &#125;</span><br><span class="line">        &#125;</span><br><span class="line"></span><br><span class="line">        @<span class="keyword">media</span> only screen and (min-width:<span class="number">375PX</span>) and (max-width:<span class="number">390PX</span>) &#123;</span><br><span class="line">            <span class="selector-tag">html</span> &#123;</span><br><span class="line">                <span class="attribute">font-size</span>: <span class="number">16px</span></span><br><span class="line">            &#125;</span><br><span class="line">        &#125;</span><br><span class="line"></span><br><span class="line">        @<span class="keyword">media</span> only screen and (min-width:<span class="number">390PX</span>) and (max-width:<span class="number">414PX</span>) &#123;</span><br><span class="line">            <span class="selector-tag">html</span> &#123;</span><br><span class="line">                <span class="attribute">font-size</span>: <span class="number">16.64px</span></span><br><span class="line">            &#125;</span><br><span class="line">        &#125;</span><br><span class="line"></span><br><span class="line">        @<span class="keyword">media</span> only screen and (min-width:<span class="number">414PX</span>) and (max-width:<span class="number">460PX</span>) &#123;</span><br><span class="line">            <span class="selector-tag">html</span> &#123;</span><br><span class="line">                <span class="attribute">font-size</span>: <span class="number">17.664px</span></span><br><span class="line">            &#125;</span><br><span class="line">        &#125;</span><br><span class="line">        @<span class="keyword">media</span> only screen and (min-width:<span class="number">460PX</span>) and (max-width:<span class="number">640PX</span>) &#123;</span><br><span class="line">            <span class="selector-tag">html</span> &#123;</span><br><span class="line">                <span class="attribute">font-size</span>: <span class="number">20px</span></span><br><span class="line">            &#125;</span><br><span class="line">        &#125;</span><br><span class="line">        @<span class="keyword">media</span> screen and (min-width:<span class="number">640PX</span>) &#123;</span><br><span class="line">            <span class="selector-tag">html</span> &#123;</span><br><span class="line">                <span class="attribute">font-size</span>: <span class="number">27.31px</span></span><br><span class="line">            &#125;</span><br><span class="line">        &#125;</span><br></pre></td></tr></table></figure><h2 id="移动端布局用flex和自动缩放"><a href="#移动端布局用flex和自动缩放" class="headerlink" title="移动端布局用flex和自动缩放"></a>移动端布局用flex和自动缩放</h2><ul><li>新旧版本兼容：这里设置flex容器为.box，子元素为.item</li></ul><h3 id="Flex-布局"><a href="#Flex-布局" class="headerlink" title="Flex 布局"></a>Flex 布局</h3><figure class="highlight css"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><span class="line"><span class="selector-class">.box</span>&#123;</span><br><span class="line"> <span class="attribute">display</span>: -ms-flexbox; </span><br><span class="line"> <span class="attribute">display</span>: -webkit-flex; </span><br><span class="line"> <span class="attribute">display</span>: flex; </span><br><span class="line"> <span class="attribute">display</span>: -webkit-box; </span><br><span class="line"> <span class="attribute">display</span>: -moz-box; </span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>旧版：display：box<br>新版：display：flex</p><h3 id="定义主轴的方向"><a href="#定义主轴的方向" class="headerlink" title="定义主轴的方向"></a>定义主轴的方向</h3><ul><li><p>水平方向</p><figure class="highlight css"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><span class="line"><span class="selector-class">.box</span>&#123; </span><br><span class="line">  <span class="attribute">-moz-flex-direction</span>: row; </span><br><span class="line">  <span class="attribute">-webkit-flex-direction</span>: row;</span><br><span class="line">  <span class="attribute">flex-direction</span>: row;</span><br><span class="line">  <span class="attribute">-webkit-box-direction</span>: normal; </span><br><span class="line">  <span class="attribute">-webkit-box-orient</span>: horizontal; </span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure></li><li><p>垂直方向</p><figure class="highlight css"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><span class="line"><span class="selector-class">.box</span>&#123;</span><br><span class="line"> <span class="attribute">-moz-flex-direction</span>: column;</span><br><span class="line"> <span class="attribute">-webkit-flex-direction</span>: column;</span><br><span class="line"> <span class="attribute">flex-direction</span>: column;</span><br><span class="line"> <span class="attribute">-webkit-box-direction</span>: normal;</span><br><span class="line"> <span class="attribute">-webkit-box-orient</span>: vertical;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure></li></ul><hr><p>旧版：box-direction: normal 水平方向 | reverse 垂直方向 | inherit ，跟子元素的方向一致; 定义子元素的显示方向。</p><pre><code> box-orient: horizontal  水平排列| vertical 垂直排列| inline-axis 默认 | block-axis 快方式排列 | inherit继承父元素; 定义子元素是否应水平或垂直排列。这两种要同时设置才能确定排列方式；水平方向：box-direction: normal；box-orient: horizontal垂直方向：box-direction: normal； box-orient:vertical</code></pre><p>新版：flex-direction：row（默认值）：主轴为水平方向，起点在左端。</p><pre><code>row-reverse：主轴为水平方向，起点在右端。column：主轴为垂直方向，起点在上沿。column-reverse：主轴为垂直方向，起点在下沿。</code></pre><h3 id="子元素主轴对齐方式"><a href="#子元素主轴对齐方式" class="headerlink" title="子元素主轴对齐方式"></a>子元素主轴对齐方式</h3><figure class="highlight css"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line"><span class="selector-class">.box</span>&#123;</span><br><span class="line"> <span class="attribute">-moz-justify-content</span>: center;</span><br><span class="line"> <span class="attribute">-webkit-justify-content</span>: center;</span><br><span class="line"> <span class="attribute">justify-content</span>: center;</span><br><span class="line"> <span class="attribute">-webkit-box-pack</span>: center;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>旧版： box-pack: start | end | center | justify;</p><p>注意：兼容写法新版语法的space-around是不可用的 </p><p>新版：justify-content：flex-start（默认值）：左对齐</p><pre><code>flex-end：右对齐center： 居中space-between：两端对齐，项目之间的间隔都相等。space-around：每个项目两侧的间隔相等。所以，项目之间的间隔比项目与边框的间隔大一倍。</code></pre><h3 id="子元素交叉轴对齐方式"><a href="#子元素交叉轴对齐方式" class="headerlink" title="子元素交叉轴对齐方式"></a>子元素交叉轴对齐方式</h3><figure class="highlight css"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line"><span class="selector-class">.box</span>&#123;</span><br><span class="line"> <span class="attribute">-moz-align-items</span>: center;</span><br><span class="line"> <span class="attribute">-webkit-align-items</span>: center;</span><br><span class="line"> <span class="attribute">align-items</span>: center;</span><br><span class="line"> <span class="attribute">-webkit-box-align</span>: center;                                                                                </span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>旧版： box-align: start | end | center | baseline | stretch;</p><p>新版：align-items：flex-start：交叉轴的起点对齐。<br>                              flex-end：交叉轴的终点对齐。<br>                              center：交叉轴的中点对齐。<br>                              baseline: 项目的第一行文字的基线对齐。<br>                              stretch（默认值）：如果项目未设置高度或设为auto，将占满整个容器的高度。</p><h3 id="子元素属性：子元素在水平或者垂直方向占几分"><a href="#子元素属性：子元素在水平或者垂直方向占几分" class="headerlink" title="子元素属性：子元素在水平或者垂直方向占几分"></a>子元素属性：子元素在水平或者垂直方向占几分</h3><figure class="highlight css"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line"><span class="selector-class">.item</span>&#123;</span><br><span class="line"> <span class="attribute">-moz-flex</span>: <span class="number">1</span>;</span><br><span class="line"> <span class="attribute">-webkit-flex</span>: <span class="number">1</span>;</span><br><span class="line"> <span class="attribute">flex</span>: <span class="number">1</span>;</span><br><span class="line"> <span class="attribute">-webkit-box-flex</span>: <span class="number">1.0</span>;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>旧版：box-flex：1.0浮点数字<br>新版：flex：1 数字</p><h3 id="超出要不要换行-不兼容，就是兼容了也无效"><a href="#超出要不要换行-不兼容，就是兼容了也无效" class="headerlink" title="超出要不要换行 不兼容，就是兼容了也无效"></a>超出要不要换行 不兼容，就是兼容了也无效</h3><ul><li>要求换行<figure class="highlight css"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line"><span class="selector-class">.box</span>&#123;</span><br><span class="line"> <span class="attribute">flex-wrap</span>:wrap;</span><br><span class="line"> <span class="attribute">box-lines</span>: multiple; </span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure></li></ul><p>旧版： box-lines: single默认不允许 | multiple 允许;</p><p>新版：flex-wrap: nowrap 不换行</p><pre><code>wrap 换行，第一行在上方wrap-reverse 换行，第一行在下方</code></pre><h3 id="新版的其他语法"><a href="#新版的其他语法" class="headerlink" title="新版的其他语法"></a>新版的其他语法</h3><ol><li><p>行内元素也可以定义flex语法：不常用</p><figure class="highlight css"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line"><span class="selector-class">.box</span>&#123;</span><br><span class="line">  <span class="attribute">display</span>: -webkit-inline-flex;</span><br><span class="line">  <span class="attribute">display</span>: inline-flex;</span><br><span class="line">&#125;：</span><br></pre></td></tr></table></figure></li><li><p>父元素属性align-content属性 定义在多跟抽线的对齐方式，一般是换行以后的对齐方式，只有一条抽线改属性不生效，常用在换行以后有间距的问题：设置align-content：flex-start； 不常用</p><p>align-content：flex-start：与交叉轴的起点对齐。</p><pre><code>flex-end：与交叉轴的终点对齐。center：与交叉轴的中点对齐。space-between：与交叉轴两端对齐，轴线之间的间隔平均分布。space-around：每根轴线两侧的间隔都相等。所以，轴线之间的间隔比轴线与边框的间隔大一倍。stretch（默认值）：轴线占满整个交叉轴。</code></pre></li><li><p>子元素属性flex，是flex-grow, flex-shrink 和 flex-basis的简写，一般只定义子元素占多少份，常用</p></li><li><p>子元素属性flex-grow 定义子元素占一行的多少份，值为数字  不常用</p></li></ol><p>05、子元素属性flex-basis属性  定义了在分配多余空间之前，项目占据的主轴空间 像素单位和百分比，默认auto</p><ol start="6"><li><p>子元素属性flex-shrink属性 定义了子元素的缩小比例，如果所有项目的flex-shrink属性都为1，当空间不足时，都将等比例缩小。如果一个项目的flex-shrink属性为0，其他项目都为1，则空间不足时，前者不缩小。负值无效</p></li><li><p>子元素属性order属性  定义子元素的排列方式，数值越小，越靠前排列，数字</p></li><li><p>子元素属性align-self属性 定义允许单个项目有与其他项目不一样的对齐方式，会覆盖algin-items属性 不常用</p><pre><code>align-self: auto  默认  表示继承父元素                            flex-start  与交叉轴的起点对齐。                 flex-end  与交叉轴的终点对齐。                 center  与交叉轴的中点对齐                 baseline: 项目的第一行文字的基线对齐。            stretch（默认值）：如果项目未设置高度或设为auto，将占满整个容器的高度。</code></pre></li></ol><h3 id="兼容无效"><a href="#兼容无效" class="headerlink" title="兼容无效"></a>兼容无效</h3><p> justify-content: space-around 不能用</p><pre><code>flex-wrap: wrap 不能用</code></pre><h3 id="flex兼容的标准写法"><a href="#flex兼容的标准写法" class="headerlink" title="flex兼容的标准写法"></a>flex兼容的标准写法</h3><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line">-webkit-前缀标准版</span><br><span class="line">-moz-前缀标准版</span><br><span class="line">标准版</span><br><span class="line">-webkit-前缀09版</span><br></pre></td></tr></table></figure><ul><li>试例<figure class="highlight css"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><span class="line"><span class="selector-class">.box</span>&#123;</span><br><span class="line"> <span class="attribute">display</span>: -ms-flexbox; </span><br><span class="line"> <span class="attribute">display</span>: -webkit-flex; </span><br><span class="line"> <span class="attribute">display</span>: flex; </span><br><span class="line"> <span class="attribute">display</span>: -webkit-box; </span><br><span class="line"> <span class="attribute">display</span>: -moz-box; </span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure></li></ul><h3 id="新版的语法"><a href="#新版的语法" class="headerlink" title="新版的语法"></a>新版的语法</h3><p>定义flex:<br><figure class="highlight css"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br></pre></td><td class="code"><pre><span class="line"><span class="selector-class">.box</span>&#123;</span><br><span class="line">    <span class="attribute">display</span>: -webkit-flex; <span class="comment">/*webkit*/</span></span><br><span class="line">    <span class="attribute">display</span>: flex;</span><br><span class="line">&#125;</span><br><span class="line"><span class="comment">/*行内flex*/</span></span><br><span class="line"><span class="selector-class">.box</span>&#123;</span><br><span class="line">    <span class="attribute">display</span>: -webkit-inline-flex; <span class="comment">/*webkit*/</span></span><br><span class="line">    <span class="attribute">display</span>:inline-flex;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure></p><p>父元素属性：<br><figure class="highlight css"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br></pre></td><td class="code"><pre><span class="line"><span class="selector-class">.box</span>&#123;</span><br><span class="line">    <span class="attribute">flex-direction</span>:    row      | row-reverse | column | column-reverse;</span><br><span class="line">         <span class="comment">/*主轴方向：左到右（默认） |   右到左    | 上到下 | 下到上*/</span></span><br><span class="line"> </span><br><span class="line">    <span class="attribute">flex-wrap</span>:    nowrap   | wrap | wrap-reverse;</span><br><span class="line">       <span class="comment">/*换行：不换行（默认） | 换行 | 换行并第一行在下方*/</span></span><br><span class="line"> </span><br><span class="line">    <span class="attribute">flex-flow</span>: &lt;flex-direction&gt; || &lt;flex-wrap&gt;;</span><br><span class="line">     <span class="comment">/*主轴方向和换行简写*/</span></span><br><span class="line"> </span><br><span class="line">    <span class="attribute">justify-content</span>:   flex-start   | flex-end |   center | space-between | space-around;</span><br><span class="line">        <span class="comment">/*主轴对齐方式： 左对齐（默认） |  右对齐  | 居中对齐 |     两端对齐  | 平均分布*/</span></span><br><span class="line"> </span><br><span class="line">    <span class="attribute">align-items</span>:         flex-start    | flex-end | center   | baseline       | stretch;</span><br><span class="line">        <span class="comment">/*交叉轴对齐方式：顶部对齐（默认） | 底部对齐 | 居中对齐 | 上下对齐并铺满 | 文本基线对齐*/</span></span><br><span class="line"> </span><br><span class="line">    <span class="attribute">align-content</span>: flex-start      | flex-end | center   | space-between  | space-around | stretch;</span><br><span class="line">        <span class="comment">/*多主轴对齐：顶部对齐（默认） | 底部对齐   | 居中对齐  | 上下对齐并铺满  | 上下平均分布*/</span></span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure></p><p>子元素属性：<br><figure class="highlight css"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br></pre></td><td class="code"><pre><span class="line"><span class="selector-class">.item</span>&#123;</span><br><span class="line">    order: &lt;integer&gt;; number</span><br><span class="line">    <span class="comment">/*排序：数值越小，越排前，默认为0*/</span></span><br><span class="line"> </span><br><span class="line">    <span class="selector-tag">flex-grow</span>: &lt;<span class="selector-tag">number</span>&gt;; <span class="comment">/* default 0 */</span></span><br><span class="line">    <span class="comment">/*放大：默认0（即如果有剩余空间也不放大，值为1则放大，2是1的双倍大小，以此类推）*/</span></span><br><span class="line"> </span><br><span class="line">    <span class="selector-tag">flex-shrink</span>: &lt;<span class="selector-tag">number</span>&gt;; <span class="comment">/* default 1 */</span></span><br><span class="line">    <span class="comment">/*缩小：默认1（如果空间不足则会缩小，值为0不缩小）*/</span></span><br><span class="line"> </span><br><span class="line">    flex-basis: &lt;length&gt; | auto; /* default auto */</span><br><span class="line">    <span class="comment">/*固定大小：默认为0，可以设置px值，也可以设置百分比大小*/</span></span><br><span class="line"> </span><br><span class="line">    flex: none | [ &lt;'flex-grow'&gt; &lt;'flex-shrink'&gt;? || &lt;'flex-basis'&gt; ]</span><br><span class="line">    <span class="comment">/*flex-grow, flex-shrink 和 flex-basis的简写，默认值为0 1 auto，*/</span></span><br><span class="line"> </span><br><span class="line">    align-self:         auto     | flex-start | flex-end | center   |  baseline      | stretch;</span><br><span class="line">       <span class="comment">/*单独对齐方式：自动（默认） | 顶部对齐   | 底部对齐 | 居中对齐 | 上下对齐并铺满 | 文本基线对齐*/</span></span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure></p><h1 id="后记"><a href="#后记" class="headerlink" title="后记"></a>后记</h1><ul><li>前面是使用过的解决方案后面这些是网上摘录的一些方法，侵权立删</li><li><a href="https://yhf7.github.io/" target="_blank" rel="noopener">欢迎进入我的博客</a>：<a href="https://yhf7.github.io/" target="_blank" rel="noopener">https://yhf7.github.io/</a></li><li>如果有什么侵权的话，请及时添加小编微信以及qq也可以来告诉小编（905477376微信qq通用），谢谢！</li></ul>]]></content>
    
    <summary type="html">
    
      
      
        &lt;link rel=&quot;stylesheet&quot; class=&quot;aplayer-secondary-style-marker&quot; href=&quot;/assets/css/APlayer.min.css&quot;&gt;&lt;script src=&quot;/assets/js/APlayer.min.js&quot; cla
      
    
    </summary>
    
      <category term="Css" scheme="http://yoursite.com/categories/Css/"/>
    
    
      <category term="Css笔记" scheme="http://yoursite.com/tags/Css%E7%AC%94%E8%AE%B0/"/>
    
  </entry>
  
  <entry>
    <title>TypeScript 自学笔记4 类</title>
    <link href="http://yoursite.com/2019/03/10/TypeScript%E7%AC%94%E8%AE%B04/"/>
    <id>http://yoursite.com/2019/03/10/TypeScript笔记4/</id>
    <published>2019-03-10T04:31:07.830Z</published>
    <updated>2019-03-11T13:04:57.121Z</updated>
    
    <content type="html"><![CDATA[<link rel="stylesheet" class="aplayer-secondary-style-marker" href="/assets/css/APlayer.min.css"><script src="/assets/js/APlayer.min.js" class="aplayer-secondary-script-marker"></script><h1 id="前言"><a href="#前言" class="headerlink" title="前言"></a>前言</h1><ul><li>自学TypeScript第四天</li><li>今天对学过java的很友好基本上都是后端的东西</li></ul><h1 id="介绍"><a href="#介绍" class="headerlink" title="介绍"></a>介绍</h1><ul><li>传统的JavaScript程序使用函数和基于原型的继承来创建可重用的组件，但对于熟悉使用面向对象方式的程序员来讲就有些棘手，因为他们用的是基于类的继承并且对象是由类构建出来的。 从ECMAScript 2015，也就是ECMAScript 6开始，JavaScript程序员将能够使用基于类的面向对象的方式。 使用TypeScript，我们允许开发者现在就使用这些特性，并且编译后的JavaScript可以在所有主流浏览器和平台上运行，而不需要等到下个JavaScript版本。</li></ul><h1 id="类"><a href="#类" class="headerlink" title="类"></a>类</h1><ul><li>类我们学过后端的话对这个就会非常的熟悉，类在后端是一个非常常用的属性，在es6开始js增加了类</li><li>这个添加对很多开发者来说算是一个福音</li><li><p>如果你使用过C#或Java，你会对这种语法非常熟悉。 我们声明一个 Greeter类。这个类有3个成员：一个叫做 greeting的属性，一个构造函数和一个 greet方法。</p></li><li><p>你会注意到，我们在引用任何一个类成员的时候都用了 this。 它表示我们访问的是类的成员。</p></li><li><p>最后一行，我们使用 new构造了 Greeter类的一个实例。 它会调用之前定义的构造函数，创建一个 Greeter类型的新对象，并执行构造函数初始化它。</p></li><li>作为一个学过后端的人，我对这一个类感到非常熟悉也很容易上手</li></ul><figure class="highlight typescript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">class</span> Greeter &#123;</span><br><span class="line">    greeting: <span class="built_in">string</span>;</span><br><span class="line">    <span class="keyword">constructor</span>(<span class="params">message: <span class="built_in">string</span></span>) &#123;</span><br><span class="line">        <span class="keyword">this</span>.greeting = message;</span><br><span class="line">    &#125;</span><br><span class="line">    greet() &#123;</span><br><span class="line">        <span class="keyword">return</span> <span class="string">"Hello, "</span> + <span class="keyword">this</span>.greeting;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="keyword">let</span> greeter = <span class="keyword">new</span> Greeter(<span class="string">"world"</span>);</span><br><span class="line"></span><br><span class="line"><span class="built_in">console</span>.log(greeter.greet())</span><br></pre></td></tr></table></figure><h1 id="继承"><a href="#继承" class="headerlink" title="继承"></a>继承</h1><ul><li>继承也是很常见的</li><li>在TypeScript里，我们可以使用常用的面向对象模式。 基于类的程序设计中一种最基本的模式是允许使用继承来扩展现有的类。</li><li><p>很简单的说就是，儿子继承了爸爸的所有东西</p><figure class="highlight typescript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">class</span> Animal &#123;</span><br><span class="line">    move(distanceInMeters: <span class="built_in">number</span> = <span class="number">0</span>) &#123;</span><br><span class="line">        <span class="built_in">console</span>.log(<span class="string">`Animal moved <span class="subst">$&#123;distanceInMeters&#125;</span>m.`</span>);</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="keyword">class</span> Dog <span class="keyword">extends</span> Animal &#123;</span><br><span class="line">    bark() &#123;</span><br><span class="line">        <span class="built_in">console</span>.log(<span class="string">'Woof! Woof!'</span>);</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="keyword">const</span> dog = <span class="keyword">new</span> Dog();</span><br><span class="line">dog.bark();</span><br><span class="line">dog.move(<span class="number">10</span>);</span><br><span class="line">dog.bark();</span><br></pre></td></tr></table></figure></li><li><p>这个例子展示了最基本的继承：类从基类中继承了属性和方法。 这里， Dog是一个 派生类，它派生自 Animal 基类，通过 extends关键字。 派生类通常被称作 子类，基类通常被称作 超类。</p></li></ul><hr><ul><li>这个例子展示了一些上面没有提到的特性。 这一次，我们使用 extends关键字创建了 Animal的两个子类： Horse和 Snake。</li><li>与前一个例子的不同点是，派生类包含了一个构造函数，它 必须调用 super()，它会执行基类的构造函数。 而且，在构造函数里访问 this的属性之前，我们 一定要调用 super()。 这个是TypeScript强制执行的一条重要规则。</li><li>这个例子演示了如何在子类里可以重写父类的方法。 Snake类和 Horse类都创建了 move方法，它们重写了从 Animal继承来的 move方法，使得 move方法根据不同的类而具有不同的功能。 注意，即使 tom被声明为 Animal类型，但因为它的值是 Horse，调用 tom.move(34)时，它会调用 Horse里重写的方法：<figure class="highlight typescript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">class</span> Animal &#123;</span><br><span class="line">    <span class="comment">// 属性</span></span><br><span class="line">    name: <span class="built_in">string</span>;</span><br><span class="line">    <span class="comment">// 构造函数</span></span><br><span class="line">    <span class="keyword">constructor</span>(<span class="params">theName: <span class="built_in">string</span></span>) &#123; <span class="keyword">this</span>.name = theName; &#125;</span><br><span class="line">    <span class="comment">// 内部方法</span></span><br><span class="line">    move(distanceInMeters: <span class="built_in">number</span> = <span class="number">0</span>) &#123;</span><br><span class="line">        <span class="built_in">console</span>.log(<span class="string">`<span class="subst">$&#123;this.name&#125;</span> moved <span class="subst">$&#123;distanceInMeters&#125;</span>m.`</span>);</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="keyword">class</span> Snake <span class="keyword">extends</span> Animal &#123;</span><br><span class="line">    <span class="comment">// 构造函数，super调用父级构造函数</span></span><br><span class="line">    <span class="keyword">constructor</span>(<span class="params">name: <span class="built_in">string</span></span>) &#123; <span class="keyword">super</span>(name); &#125;</span><br><span class="line">    <span class="comment">// 子类重写方法</span></span><br><span class="line">    move(distanceInMeters = <span class="number">5</span>) &#123;</span><br><span class="line">        <span class="built_in">console</span>.log(<span class="string">"Slithering..."</span>);</span><br><span class="line">        <span class="comment">// 内部调用了父级的方法</span></span><br><span class="line">        <span class="keyword">super</span>.move(distanceInMeters);</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="keyword">class</span> Horse <span class="keyword">extends</span> Animal &#123;</span><br><span class="line">    <span class="keyword">constructor</span>(<span class="params">name: <span class="built_in">string</span></span>) &#123; <span class="keyword">super</span>(name); &#125;</span><br><span class="line">    move(distanceInMeters = <span class="number">45</span>) &#123;</span><br><span class="line">        <span class="built_in">console</span>.log(<span class="string">"Galloping..."</span>);</span><br><span class="line">        <span class="keyword">super</span>.move(distanceInMeters);</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="keyword">let</span> sam = <span class="keyword">new</span> Snake(<span class="string">"Sammy the Python"</span>);</span><br><span class="line"><span class="keyword">let</span> tom: Animal = <span class="keyword">new</span> Horse(<span class="string">"Tommy the Palomino"</span>);</span><br><span class="line"></span><br><span class="line">sam.move();</span><br><span class="line">tom.move(<span class="number">34</span>);</span><br></pre></td></tr></table></figure></li></ul><h1 id="公共，私有与受保护的修饰符"><a href="#公共，私有与受保护的修饰符" class="headerlink" title="公共，私有与受保护的修饰符"></a>公共，私有与受保护的修饰符</h1><h2 id="默认-public-公共类型"><a href="#默认-public-公共类型" class="headerlink" title="默认 public 公共类型"></a>默认 public 公共类型</h2><ul><li>我以前学习java的时候这个属性的要写出来的</li><li>但是js给我们默认了<figure class="highlight typescript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">class</span> Animal &#123;</span><br><span class="line">    <span class="keyword">public</span> name: <span class="built_in">string</span>;</span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">constructor</span>(<span class="params">theName: <span class="built_in">string</span></span>) &#123; <span class="keyword">this</span>.name = theName; &#125;</span><br><span class="line">    <span class="keyword">public</span> move(distanceInMeters: <span class="built_in">number</span>) &#123;</span><br><span class="line">        <span class="built_in">console</span>.log(<span class="string">`<span class="subst">$&#123;this.name&#125;</span> moved <span class="subst">$&#123;distanceInMeters&#125;</span>m.`</span>);</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="comment">// 我们平时都是这么写的</span></span><br><span class="line"><span class="keyword">class</span> Animal &#123;</span><br><span class="line">    name: <span class="built_in">string</span>;</span><br><span class="line">    <span class="keyword">constructor</span>(<span class="params">theName: <span class="built_in">string</span></span>) &#123; <span class="keyword">this</span>.name = theName; &#125;</span><br><span class="line">    move(distanceInMeters: <span class="built_in">number</span>) &#123;</span><br><span class="line">        <span class="built_in">console</span>.log(<span class="string">`<span class="subst">$&#123;this.name&#125;</span> moved <span class="subst">$&#123;distanceInMeters&#125;</span>m.`</span>);</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure></li></ul><h2 id="理解-private-私有化"><a href="#理解-private-私有化" class="headerlink" title="理解 private 私有化"></a>理解 private 私有化</h2><ul><li>private 就是私有化，简单点说就是唯独我有，你们虽都不可以用只可以我自己用</li><li>我自己拥有的连儿子都不可用唯独我自己可以用</li></ul><figure class="highlight typescript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">class</span> Animal &#123;</span><br><span class="line">    <span class="keyword">private</span> name: <span class="built_in">string</span>;</span><br><span class="line">    <span class="keyword">constructor</span>(<span class="params">theName: <span class="built_in">string</span></span>) &#123; <span class="keyword">this</span>.name = theName; &#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="comment">// 定义使用报错</span></span><br><span class="line"><span class="keyword">new</span> Animal(<span class="string">"Cat"</span>).name; <span class="comment">// 错误: 'name' 是私有的.</span></span><br><span class="line"></span><br><span class="line"><span class="comment">// 我们来试试在继承中能不能用，儿子继承父亲的东西</span></span><br><span class="line"></span><br><span class="line"><span class="keyword">class</span> Test &#123;</span><br><span class="line">    <span class="keyword">constructor</span>(<span class="params">test: <span class="built_in">string</span></span>) &#123;</span><br><span class="line">        <span class="keyword">super</span>(test)</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    Test () &#123;</span><br><span class="line">        <span class="built_in">console</span>.log(<span class="keyword">this</span>.name) <span class="comment">// 注意了，这样也是错误的</span></span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><hr><ul><li>其实就是说不是同一个爸爸生出来的都不算有关系。</li><li>TypeScript使用的是结构性类型系统。 当我们比较两种不同的类型时，并不在乎它们从何处而来，如果所有成员的类型都是兼容的，我们就认为它们的类型是兼容的</li><li>然而，当我们比较带有 private或 protected成员的类型的时候，情况就不同了。 如果其中一个类型里包含一个 private成员，那么只有当另外一个类型中也存在这样一个 private成员， 并且它们都是来自同一处声明时，我们才认为这两个类型是兼容的。 对于 protected成员也使用这个规则</li><li>这个例子中有 Animal和 Rhino两个类， Rhino是 Animal类的子类。 还有一个 Employee类，其类型看上去与 Animal是相同的。 我们创建了几个这些类的实例，并相互赋值来看看会发生什么。 因为 Animal和 Rhino共享了来自 Animal里的私有成员定义 private name: string，因此它们是兼容的。 然而 Employee却不是这样。当把 Employee赋值给 Animal的时候，得到一个错误，说它们的类型不兼容。 尽管 Employee里也有一个私有成员 name，但它明显不是 Animal里面定义的那个。<figure class="highlight typescript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">class</span> Animal &#123;</span><br><span class="line">    <span class="keyword">private</span> name: <span class="built_in">string</span>;</span><br><span class="line">    <span class="keyword">constructor</span>(<span class="params">theName: <span class="built_in">string</span></span>) &#123; <span class="keyword">this</span>.name = theName; &#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="keyword">class</span> Rhino <span class="keyword">extends</span> Animal &#123;</span><br><span class="line">    <span class="keyword">constructor</span>(<span class="params"></span>) &#123; <span class="keyword">super</span>(<span class="string">"Rhino"</span>); &#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="keyword">class</span> Employee &#123;</span><br><span class="line">    <span class="keyword">private</span> name: <span class="built_in">string</span>;</span><br><span class="line">    <span class="keyword">constructor</span>(<span class="params">theName: <span class="built_in">string</span></span>) &#123; <span class="keyword">this</span>.name = theName; &#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="keyword">let</span> animal = <span class="keyword">new</span> Animal(<span class="string">"Goat"</span>);</span><br><span class="line"><span class="keyword">let</span> rhino = <span class="keyword">new</span> Rhino();</span><br><span class="line"><span class="keyword">let</span> employee = <span class="keyword">new</span> Employee(<span class="string">"Bob"</span>);</span><br><span class="line"></span><br><span class="line">animal = rhino;</span><br><span class="line">animal = employee</span><br></pre></td></tr></table></figure></li></ul><h1 id="理解-protected-（比私有低一个级别）"><a href="#理解-protected-（比私有低一个级别）" class="headerlink" title="理解 protected （比私有低一个级别）"></a>理解 protected （比私有低一个级别）</h1><ul><li>和私有化几乎一模一样</li><li>这个属性比私有化低一个级别，儿子可以用了</li><li>在继承中还是可以使用的</li></ul><ol><li>属性<figure class="highlight typescript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">// 这个例子比较经典</span></span><br><span class="line"><span class="keyword">class</span> Person &#123;</span><br><span class="line">    <span class="keyword">protected</span> name: <span class="built_in">string</span>;</span><br><span class="line">    <span class="keyword">constructor</span>(<span class="params">name: <span class="built_in">string</span></span>) &#123; <span class="keyword">this</span>.name = name; &#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="comment">// 继承</span></span><br><span class="line"><span class="keyword">class</span> Employee <span class="keyword">extends</span> Person &#123;</span><br><span class="line">    <span class="keyword">private</span> department: <span class="built_in">string</span>;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">constructor</span>(<span class="params">name: <span class="built_in">string</span>, department: <span class="built_in">string</span></span>) &#123;</span><br><span class="line">        <span class="keyword">super</span>(name)</span><br><span class="line">        <span class="keyword">this</span>.department = department;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">public</span> getElevatorPitch() &#123;</span><br><span class="line">        <span class="comment">// 继承类里面是可以使用父级的name的</span></span><br><span class="line">        <span class="keyword">return</span> <span class="string">`Hello, my name is <span class="subst">$&#123;this.name&#125;</span> and I work in <span class="subst">$&#123;this.department&#125;</span>.`</span>;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="keyword">let</span> howard = <span class="keyword">new</span> Employee(<span class="string">"Howard"</span>, <span class="string">"Sales"</span>);</span><br><span class="line"><span class="built_in">console</span>.log(howard.getElevatorPitch());</span><br><span class="line"><span class="comment">// 外面就不可用了</span></span><br><span class="line"><span class="built_in">console</span>.log(howard.name); <span class="comment">// 错误</span></span><br></pre></td></tr></table></figure></li></ol><hr><ol start="2"><li>构造函数也是可以被保护起来的</li></ol><ul><li>在外面是无法使用的哈哈哈，起到了很好的保护作用<figure class="highlight typescript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">class</span> Person &#123;</span><br><span class="line">    <span class="keyword">protected</span> name: <span class="built_in">string</span>;</span><br><span class="line">    <span class="keyword">protected</span> <span class="keyword">constructor</span>(<span class="params">theName: <span class="built_in">string</span></span>) &#123; <span class="keyword">this</span>.name = theName; &#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="comment">// Employee 能够继承 Person</span></span><br><span class="line"><span class="keyword">class</span> Employee <span class="keyword">extends</span> Person &#123;</span><br><span class="line">    <span class="keyword">private</span> department: <span class="built_in">string</span>;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">constructor</span>(<span class="params">name: <span class="built_in">string</span>, department: <span class="built_in">string</span></span>) &#123;</span><br><span class="line">        <span class="keyword">super</span>(name);</span><br><span class="line">        <span class="keyword">this</span>.department = department;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">public</span> getElevatorPitch() &#123;</span><br><span class="line">        <span class="keyword">return</span> <span class="string">`Hello, my name is <span class="subst">$&#123;this.name&#125;</span> and I work in <span class="subst">$&#123;this.department&#125;</span>.`</span>;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="keyword">let</span> howard = <span class="keyword">new</span> Employee(<span class="string">"Howard"</span>, <span class="string">"Sales"</span>);</span><br><span class="line"><span class="keyword">let</span> john = <span class="keyword">new</span> Person(<span class="string">"John"</span>); <span class="comment">// 错误: 'Person' 的构造函数是被保护的.</span></span><br></pre></td></tr></table></figure></li></ul><h1 id="readonly修饰符-（只读）"><a href="#readonly修饰符-（只读）" class="headerlink" title="readonly修饰符 （只读）"></a>readonly修饰符 （只读）</h1><ul><li>你可以使用 readonly关键字将属性设置为只读的。 只读属性必须在声明时或构造函数里被初始化</li><li>说白了只能看看不能改变，一开始就定义好</li><li>就好像你妈打你只能挨着不能还手<figure class="highlight typescript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">class</span> Octopus &#123;</span><br><span class="line">    readonly name: <span class="built_in">string</span>;</span><br><span class="line">    readonly numberOfLegs: <span class="built_in">number</span> = <span class="number">8</span>;</span><br><span class="line">    <span class="keyword">constructor</span> (<span class="params">theName: <span class="built_in">string</span></span>) &#123;</span><br><span class="line">        <span class="keyword">this</span>.name = theName;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br><span class="line"><span class="keyword">let</span> dad = <span class="keyword">new</span> Octopus(<span class="string">"Man with the 8 strong legs"</span>);</span><br><span class="line">dad.name = <span class="string">"Man with the 3-piece suit"</span>; <span class="comment">// 错误! name 是只读的.</span></span><br></pre></td></tr></table></figure></li></ul><hr><h2 id="参数属性"><a href="#参数属性" class="headerlink" title="参数属性"></a>参数属性</h2><ul><li>参数的自带属性然我们可以减少一些写法</li><li>在上面的例子中，我们必须在Octopus类里定义一个只读成员 name和一个参数为 theName的构造函数，并且立刻将 theName的值赋给 name，这种情况经常会遇到。 参数属性可以方便地让我们在一个地方定义并初始化一个成员。 下面的例子是对之前 Octopus类的修改版，使用了参数属性：</li><li>参数属性通过给构造函数参数前面添加一个访问限定符来声明。 使用 private限定一个参数属性会声明并初始化一个私有成员；对于 public和 protected来说也是一样。<figure class="highlight typescript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">// 在这里可以验证，自读属性会自动初始化一个私有成员</span></span><br><span class="line"><span class="keyword">class</span> Octopus &#123;</span><br><span class="line">    readonly numberOfLegs: <span class="built_in">number</span> = <span class="number">8</span>;</span><br><span class="line">    <span class="keyword">constructor</span>(<span class="params">readonly name: <span class="built_in">string</span></span>) &#123;</span><br><span class="line">        <span class="comment">// 在这里可以得到证实</span></span><br><span class="line">        <span class="keyword">this</span>.name = name;</span><br><span class="line">    &#125;</span><br><span class="line">    test () &#123;</span><br><span class="line">        <span class="keyword">return</span> <span class="keyword">this</span>.name;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="keyword">let</span> test1 = <span class="keyword">new</span> Octopus(<span class="string">'YHF'</span>);</span><br><span class="line"><span class="built_in">console</span>.log(test1.test()); <span class="comment">// YHF</span></span><br></pre></td></tr></table></figure></li></ul><h1 id="存取器-（get-set，es5以上才可以用，编译会报错但是可以使用的）"><a href="#存取器-（get-set，es5以上才可以用，编译会报错但是可以使用的）" class="headerlink" title="存取器 （get/set，es5以上才可以用，编译会报错但是可以使用的）"></a>存取器 （get/set，es5以上才可以用，编译会报错但是可以使用的）</h1><ul><li>这个get/set 写java的真的在熟悉不过了，这个是结合私有化属性使用的</li><li>私有化属性，就是通过get/set来限制学习</li><li>TypeScript支持通过getters/setters来截取对对象成员的访问。 它能帮助你有效的控制对对象成员的访问</li><li>注意：首先，存取器要求你将编译器设置为输出ECMAScript 5或更高。 不支持降级到ECMAScript 3。 其次，只带有 get不带有 set的存取器自动被推断为 readonly。 这在从代码生成 .d.ts文件时是有帮助的，因为利用这个属性的用户会看到不允许够改变它的值。<figure class="highlight typescript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">// 版本1</span></span><br><span class="line"><span class="comment">// 在这里面fullname可以随意更改，确实方便也带来了很多麻烦</span></span><br><span class="line"><span class="keyword">class</span> Employee &#123;</span><br><span class="line">    fullName: <span class="built_in">string</span>;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="keyword">let</span> employee = <span class="keyword">new</span> Employee();</span><br><span class="line">employee.fullName = <span class="string">"Bob Smith"</span>;</span><br><span class="line"><span class="keyword">if</span> (employee.fullName) &#123;</span><br><span class="line">    <span class="built_in">console</span>.log(employee.fullName);</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="comment">// 升级版，设置权限</span></span><br><span class="line"><span class="keyword">let</span> passcode = <span class="string">"secret passcode"</span>;</span><br><span class="line"></span><br><span class="line"><span class="keyword">class</span> Employee &#123;</span><br><span class="line">    <span class="keyword">private</span> _fullName: <span class="built_in">string</span>;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">get</span> fullName(): <span class="built_in">string</span> &#123;</span><br><span class="line">        <span class="keyword">return</span> <span class="keyword">this</span>._fullName;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">set</span> fullName(newName: <span class="built_in">string</span>) &#123;</span><br><span class="line">        <span class="keyword">if</span> (passcode &amp;&amp; passcode == <span class="string">"secret passcode"</span>) &#123;</span><br><span class="line">            <span class="keyword">this</span>._fullName = newName;</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="keyword">else</span> &#123;</span><br><span class="line">            <span class="built_in">console</span>.log(<span class="string">"Error: Unauthorized update of employee!"</span>);</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="keyword">let</span> employee = <span class="keyword">new</span> Employee();</span><br><span class="line">employee.fullName = <span class="string">"Bob Smith"</span>;</span><br><span class="line"><span class="keyword">if</span> (employee.fullName) &#123;</span><br><span class="line">    alert(employee.fullName);</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure></li></ul><h1 id="静态属性"><a href="#静态属性" class="headerlink" title="静态属性"></a>静态属性</h1><ul><li>类的静态属性，每一次调用都是直接通过类名去调用</li><li>哪里都可用的很广泛，无需实例，调用就是实例</li><li>我们也可以创建类的静态成员，这些属性存在于类本身上面而不是类的实例上。 在这个例子里，我们使用 static定义 origin，因为它是所有网格都会用到的属性。 每个实例想要访问这个属性的时候，都要在 origin前面加上类名。 如同在实例属性上使用 this.前缀来访问属性一样，这里我们使用 Grid.来访问静态属性。<figure class="highlight typescript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">class</span> Grid &#123;</span><br><span class="line">    <span class="keyword">static</span> origin = &#123;x: <span class="number">0</span>, y: <span class="number">0</span>&#125;;</span><br><span class="line">    calculateDistanceFromOrigin(point: &#123;x: <span class="built_in">number</span>; y: <span class="built_in">number</span>;&#125;) &#123;</span><br><span class="line">        <span class="keyword">let</span> xDist = (point.x - Grid.origin.x);</span><br><span class="line">        <span class="keyword">let</span> yDist = (point.y - Grid.origin.y);</span><br><span class="line">        <span class="keyword">return</span> <span class="built_in">Math</span>.sqrt(xDist * xDist + yDist * yDist) / <span class="keyword">this</span>.scale;</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">constructor</span> (<span class="params"><span class="keyword">public</span> scale: <span class="built_in">number</span></span>) &#123; &#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="keyword">let</span> grid1 = <span class="keyword">new</span> Grid(<span class="number">1.0</span>);  <span class="comment">// 1x scale</span></span><br><span class="line"><span class="keyword">let</span> grid2 = <span class="keyword">new</span> Grid(<span class="number">5.0</span>);  <span class="comment">// 5x scale</span></span><br><span class="line"></span><br><span class="line"><span class="comment">// 这个今天属性在外面页面可以用的</span></span><br><span class="line"><span class="built_in">console</span>.log(Grid.origin)</span><br><span class="line"></span><br><span class="line"><span class="built_in">console</span>.log(grid1.calculateDistanceFromOrigin(&#123;x: <span class="number">10</span>, y: <span class="number">10</span>&#125;));</span><br><span class="line"><span class="built_in">console</span>.log(grid2.calculateDistanceFromOrigin(&#123;x: <span class="number">10</span>, y: <span class="number">10</span>&#125;));</span><br></pre></td></tr></table></figure></li></ul><h1 id="抽象类-（和继承差不多）"><a href="#抽象类-（和继承差不多）" class="headerlink" title="抽象类 （和继承差不多）"></a>抽象类 （和继承差不多）</h1><ul><li>又是一个后端的最爱</li><li>抽象类，就是只是写元素名，方法名，但继承了这个抽象类，并实例化里面但抽象方法</li><li>抽象类做为其它派生类的基类使用。 它们一般不会直接被实例化。 不同于接口，抽象类可以包含成员的实现细节。 abstract关键字是用于定义抽象类和在抽象类内部定义抽象方法</li></ul><figure class="highlight typescript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">// 抽象类</span></span><br><span class="line"><span class="keyword">abstract</span> <span class="keyword">class</span> Department &#123;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">constructor</span>(<span class="params"><span class="keyword">public</span> name: <span class="built_in">string</span></span>) &#123;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    printName(): <span class="built_in">void</span> &#123;</span><br><span class="line">        <span class="built_in">console</span>.log(<span class="string">'Department name: '</span> + <span class="keyword">this</span>.name);</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="comment">// 抽象方法</span></span><br><span class="line">    <span class="keyword">abstract</span> printMeeting(): <span class="built_in">void</span>; <span class="comment">// 必须在派生类中实现</span></span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="comment">// 继承抽象类</span></span><br><span class="line"><span class="keyword">class</span> AccountingDepartment <span class="keyword">extends</span> Department &#123;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">constructor</span>(<span class="params"></span>) &#123;</span><br><span class="line">        <span class="keyword">super</span>(<span class="string">'Accounting and Auditing'</span>); <span class="comment">// 在派生类的构造函数中必须调用 super()</span></span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    printMeeting(): <span class="built_in">void</span> &#123;</span><br><span class="line">        <span class="built_in">console</span>.log(<span class="string">'The Accounting Department meets each Monday at 10am.'</span>);</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    generateReports(): <span class="built_in">void</span> &#123;</span><br><span class="line">        <span class="built_in">console</span>.log(<span class="string">'Generating accounting reports...'</span>);</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="comment">// 声明一个抽象类但属性</span></span><br><span class="line"><span class="keyword">let</span> department: Department; <span class="comment">// 允许创建一个对抽象类型的引用</span></span><br><span class="line"><span class="comment">// 抽象类是不可实例的</span></span><br><span class="line">department = <span class="keyword">new</span> Department(); <span class="comment">// 错误: 不能创建一个抽象类的实例</span></span><br><span class="line">department = <span class="keyword">new</span> AccountingDepartment(); <span class="comment">// 允许对一个抽象子类进行实例化和赋值</span></span><br><span class="line">department.printName();</span><br><span class="line">department.printMeeting();</span><br><span class="line"><span class="comment">// 这个错误并不是因为不可以这样去写，只是声明但时候抽象类里面没有</span></span><br><span class="line">department.generateReports(); <span class="comment">// 错误: 方法在声明的抽象类中不存在</span></span><br></pre></td></tr></table></figure><h1 id="高级技巧"><a href="#高级技巧" class="headerlink" title="高级技巧"></a>高级技巧</h1><h2 id="构造函数"><a href="#构造函数" class="headerlink" title="构造函数"></a>构造函数</h2><ul><li>当你在TypeScript里声明了一个类的时候，实际上同时声明了很多东西。 首先就是类的 实例的类型</li><li>这里，我们写了 let greeter: Greeter，意思是 Greeter类的实例的类型是 Greeter。 这对于用过其它面向对象语言的程序员来讲已经是老习惯了。</li><li>let Greeter将被赋值为构造函数。 当我们调用 new并执行了这个函数后，便会得到一个类的实例。 这个构造函数也包含了类的所有静态属性。 换个角度说，我们可以认为类具有 实例部分与 静态部分这两个部分。<figure class="highlight typescript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">class</span> Greeter &#123;</span><br><span class="line">    greeting: <span class="built_in">string</span>;</span><br><span class="line">    <span class="keyword">constructor</span>(<span class="params">message: <span class="built_in">string</span></span>) &#123;</span><br><span class="line">        <span class="keyword">this</span>.greeting = message;</span><br><span class="line">    &#125;</span><br><span class="line">    greet() &#123;</span><br><span class="line">        <span class="keyword">return</span> <span class="string">"Hello, "</span> + <span class="keyword">this</span>.greeting;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="keyword">let</span> greeter: Greeter;</span><br><span class="line">greeter = <span class="keyword">new</span> Greeter(<span class="string">"world"</span>);</span><br><span class="line"><span class="built_in">console</span>.log(greeter.greet());</span><br></pre></td></tr></table></figure></li></ul><hr><ul><li>这里会比较绕不过是解释构造函数</li><li>这个例子里， greeter1与之前看到的一样。 我们实例化 Greeter类，并使用这个对象。 与我们之前看到的一样。<br>再之后，我们直接使用类。 我们创建了一个叫做 greeterMaker的变量。 这个变量保存了这个类或者说保存了类构造函数。 然后我们使用 typeof Greeter，意思是取Greeter类的类型，而不是实例的类型。 或者更确切的说，”告诉我 Greeter标识符的类型”，也就是构造函数的类型。 这个类型包含了类的所有静态成员和构造函数。 之后，就和前面一样，我们在 greeterMaker上使用 new，创建 Greeter的实例。<figure class="highlight typescript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">class</span> Greeter &#123;</span><br><span class="line">    <span class="keyword">static</span> standardGreeting = <span class="string">"Hello, there"</span>;</span><br><span class="line">    greeting: <span class="built_in">string</span>;</span><br><span class="line">    greet() &#123;</span><br><span class="line">        <span class="keyword">if</span> (<span class="keyword">this</span>.greeting) &#123;</span><br><span class="line">            <span class="keyword">return</span> <span class="string">"Hello, "</span> + <span class="keyword">this</span>.greeting;</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="keyword">else</span> &#123;</span><br><span class="line">            <span class="keyword">return</span> Greeter.standardGreeting;</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="keyword">let</span> greeter1: Greeter;</span><br><span class="line">greeter1 = <span class="keyword">new</span> Greeter();</span><br><span class="line"><span class="built_in">console</span>.log(greeter1.greet());</span><br><span class="line"></span><br><span class="line"><span class="keyword">let</span> greeterMaker: <span class="keyword">typeof</span> Greeter = Greeter;</span><br><span class="line">greeterMaker.standardGreeting = <span class="string">"Hey there!"</span>;</span><br><span class="line"></span><br><span class="line"><span class="keyword">let</span> greeter2: Greeter = <span class="keyword">new</span> greeterMaker();</span><br><span class="line"><span class="built_in">console</span>.log(greeter2.greet());</span><br></pre></td></tr></table></figure></li></ul><h2 id="把类当做接口使用"><a href="#把类当做接口使用" class="headerlink" title="把类当做接口使用"></a>把类当做接口使用</h2><ul><li>如上一节里所讲的，类定义会创建两个东西：类的实例类型和一个构造函数。 因为类可以创建出类型，所以你能够在允许使用接口的地方使用类。<figure class="highlight typescript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">class</span> Point &#123;</span><br><span class="line">    x: <span class="built_in">number</span>;</span><br><span class="line">    y: <span class="built_in">number</span>;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="keyword">interface</span> Point3d <span class="keyword">extends</span> Point &#123;</span><br><span class="line">    z: <span class="built_in">number</span>;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="keyword">let</span> point3d: Point3d = &#123;x: <span class="number">1</span>, y: <span class="number">2</span>, z: <span class="number">3</span>&#125;;</span><br></pre></td></tr></table></figure></li></ul><h1 id="后记"><a href="#后记" class="headerlink" title="后记"></a>后记</h1><ul><li>这个就是我学习Ts的第四天的笔记，欢迎更多的同行大哥指导交流</li><li><a href="https://yhf7.github.io/" target="_blank" rel="noopener">欢迎进入我的博客</a>：<a href="https://yhf7.github.io/" target="_blank" rel="noopener">https://yhf7.github.io/</a></li><li>如果有什么侵权的话，请及时添加小编微信以及qq也可以来告诉小编（905477376微信qq通用），谢谢！</li></ul>]]></content>
    
    <summary type="html">
    
      
      
        &lt;link rel=&quot;stylesheet&quot; class=&quot;aplayer-secondary-style-marker&quot; href=&quot;/assets/css/APlayer.min.css&quot;&gt;&lt;script src=&quot;/assets/js/APlayer.min.js&quot; cla
      
    
    </summary>
    
      <category term="TypeScript" scheme="http://yoursite.com/categories/TypeScript/"/>
    
    
      <category term="TypeScript 笔记" scheme="http://yoursite.com/tags/TypeScript-%E7%AC%94%E8%AE%B0/"/>
    
  </entry>
  
  <entry>
    <title>TypeScript 自学笔记3 接口</title>
    <link href="http://yoursite.com/2019/03/09/TypeScript%E7%AC%94%E8%AE%B03/"/>
    <id>http://yoursite.com/2019/03/09/TypeScript笔记3/</id>
    <published>2019-03-09T15:07:16.925Z</published>
    <updated>2019-03-11T13:04:35.562Z</updated>
    
    <content type="html"><![CDATA[<link rel="stylesheet" class="aplayer-secondary-style-marker" href="/assets/css/APlayer.min.css"><script src="/assets/js/APlayer.min.js" class="aplayer-secondary-script-marker"></script><h1 id="前言"><a href="#前言" class="headerlink" title="前言"></a>前言</h1><ul><li>个人学习笔记，仅供参考</li></ul><h1 id="介绍"><a href="#介绍" class="headerlink" title="介绍"></a>介绍</h1><ul><li>TypeScript的核心原则之一是对值所具有的结构进行类型检查。 它有时被称做“鸭式辨型法”或“结构性子类型化”。 在TypeScript里，接口的作用就是为这些类型命名和为你的代码或第三方代码定义契约。</li></ul><h1 id="接口初探"><a href="#接口初探" class="headerlink" title="接口初探"></a>接口初探</h1><ul><li>类型检查器会查看printLabel的调用。 printLabel有一个参数，并要求这个对象参数有一个名为label类型为string的属性。 需要注意的是，我们传入的对象参数实际上会包含很多属性，但是编译器只会检查那些必需的属性是否存在，并且其类型是否匹配</li><li>不但要求传入参数还要求这个参数里面有一个名为label的string参数</li><li>如果没有把label这个必须传入的参数传入就会报错<figure class="highlight typescript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line"><span class="function"><span class="keyword">function</span> <span class="title">printLabel</span>(<span class="params">labelledObj: &#123; label: <span class="built_in">string</span> &#125;</span>) </span>&#123;</span><br><span class="line">  <span class="built_in">console</span>.log(labelledObj.label);</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="keyword">let</span> myObj = &#123; size: <span class="number">10</span>, label: <span class="string">"Size 10 Object"</span> &#125;;</span><br><span class="line">printLabel(myObj);</span><br></pre></td></tr></table></figure></li></ul><hr><ul><li>重写这个例子</li><li>类型检查器不会去检查属性的顺序，只要相应的属性存在并且类型也是对的就可以</li><li>interface 泛指接口<figure class="highlight typescript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">// 接口     后面这个是名称</span></span><br><span class="line"><span class="comment">// 定义一个名为LabelledValue的接口</span></span><br><span class="line"><span class="keyword">interface</span> LabelledValue &#123;</span><br><span class="line">  label: <span class="built_in">string</span>;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="comment">// 在接收参数时，作为指定类型引用</span></span><br><span class="line"><span class="function"><span class="keyword">function</span> <span class="title">printLabel</span>(<span class="params">labelledObj: LabelledValue</span>) </span>&#123;</span><br><span class="line">  <span class="built_in">console</span>.log(labelledObj.label);</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="keyword">let</span> myObj = &#123;size: <span class="number">10</span>, label: <span class="string">"Size 10 Object"</span>&#125;;</span><br><span class="line">printLabel(myObj);</span><br></pre></td></tr></table></figure></li></ul><h1 id="可选属性"><a href="#可选属性" class="headerlink" title="可选属性"></a>可选属性</h1><ul><li>这个可选属性我们在之前也有学过了</li><li>带有可选属性的接口与普通的接口定义差不多，只是在可选属性名字定义的后面加一个?符号</li><li>接口里的属性不全都是必需的。 有些是只在某些条件下存在，或者根本不存在。 可选属性在应用“option bags”模式时很常用，即给函数传入的参数对象中只有部分属性赋值了。</li></ul><hr><ul><li>下面是应用了“option bags”的例子：</li><li>这里考到了两个知识点<ul><li><ol><li>可选属性的使用</li></ol></li><li><ol start="2"><li>返回类型的指定</li></ol></li></ul></li><li>重点：<ul><li>可选参数</li><li>返回参数<figure class="highlight typescript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">// 接口 </span></span><br><span class="line"><span class="keyword">interface</span> SquareConfig &#123;</span><br><span class="line">    <span class="comment">// 两个可选属性</span></span><br><span class="line">  color?: <span class="built_in">string</span>;</span><br><span class="line">  width?: <span class="built_in">number</span>;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="comment">//         函数参数调用接口，可不传参数，给空对象</span></span><br><span class="line"><span class="comment">//          但是返回中，指定了必须返回 color 和area这两个属性</span></span><br><span class="line"><span class="function"><span class="keyword">function</span> <span class="title">createSquare</span>(<span class="params">config: SquareConfig</span>): </span>&#123;color: <span class="built_in">string</span>; area: <span class="built_in">number</span>&#125; &#123;</span><br><span class="line">  <span class="keyword">let</span> newSquare = &#123;color: <span class="string">"white"</span>, area: <span class="number">100</span>&#125;;</span><br><span class="line">  <span class="keyword">if</span> (config.color) &#123;</span><br><span class="line">    newSquare.color = config.color;</span><br><span class="line">  &#125;</span><br><span class="line">  <span class="keyword">if</span> (config.width) &#123;</span><br><span class="line">    newSquare.area = config.width * config.width;</span><br><span class="line">  &#125;</span><br><span class="line">  <span class="keyword">return</span> newSquare;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="keyword">let</span> mySquare = createSquare(&#123;color: <span class="string">"black"</span>&#125;);</span><br></pre></td></tr></table></figure></li></ul></li></ul><h1 id="只读属性-（readonly）"><a href="#只读属性-（readonly）" class="headerlink" title="只读属性 （readonly）"></a>只读属性 （readonly）</h1><ul><li>在Ts中更好的体现了，权限的控制</li><li>限制为只读属性</li><li>一些对象属性只能在对象刚刚创建的时候修改其值。 你可以在属性名前用 readonly来指定只读属性<figure class="highlight typescript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">// 1. 定义一个接口，x变量设置为只读</span></span><br><span class="line"><span class="keyword">interface</span> Point &#123;</span><br><span class="line">    readonly x: <span class="built_in">number</span>;</span><br><span class="line">    readonly y: <span class="built_in">number</span>;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="comment">// 2. 构造出一个point的对象</span></span><br><span class="line"><span class="keyword">let</span> p1: Point = &#123;x:<span class="number">10</span>,y:<span class="number">20</span>&#125;</span><br><span class="line"></span><br><span class="line"><span class="comment">// 3.尝试改变内部的x值,会说这是个只读属性不能修改</span></span><br><span class="line">p1.x = <span class="number">5</span>;<span class="comment">// err Cannot assign to 'x' because it is a read-only property.</span></span><br></pre></td></tr></table></figure></li></ul><hr><h2 id="ReadonlyArray-只读数组"><a href="#ReadonlyArray-只读数组" class="headerlink" title="ReadonlyArray 只读数组"></a>ReadonlyArray<t> 只读数组</t></h2><ul><li>不要以为只有数据有，数组也是有的哦</li><li>ReadonlyArray<t> 类型用于数组</t></li><li>一旦创建后无法更改，不能赋值，也不能赋值给别的数据<figure class="highlight typescript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">let</span> a: <span class="built_in">number</span>[] = [<span class="number">1</span>, <span class="number">2</span>, <span class="number">3</span>, <span class="number">4</span>];</span><br><span class="line"><span class="keyword">let</span> ro: ReadonlyArray&lt;<span class="built_in">number</span>&gt; = a;</span><br><span class="line">ro[<span class="number">0</span>] = <span class="number">12</span>; <span class="comment">// error!</span></span><br><span class="line">ro.push(<span class="number">5</span>); <span class="comment">// error!</span></span><br><span class="line">ro.length = <span class="number">100</span>; <span class="comment">// error!</span></span><br><span class="line">a = ro; <span class="comment">// error!</span></span><br></pre></td></tr></table></figure></li></ul><hr><ul><li>ReadonlyArray赋值到一个普通数组也是不可以的</li><li>但是有一种情况可以赋值给别人那就是使用类型断言重写</li><li>这样就是可以赋值的<figure class="highlight typescript"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">let</span> b = ro <span class="keyword">as</span> <span class="built_in">number</span>[];</span><br></pre></td></tr></table></figure></li></ul><h2 id="readonly-vs-const"><a href="#readonly-vs-const" class="headerlink" title="readonly vs const"></a>readonly vs const</h2><ul><li>最简单判断该用readonly还是const的方法是看要把它做为变量使用还是做为一个属性。 做为变量使用的话用 const，若做为属性则使用readonly</li></ul><h1 id="额外的属性检查"><a href="#额外的属性检查" class="headerlink" title="额外的属性检查"></a>额外的属性检查</h1><h2 id="额外检查错误"><a href="#额外检查错误" class="headerlink" title="额外检查错误"></a>额外检查错误</h2><ul><li>我们学会了可选属性知道了optionbages 模式的使用</li><li>但是把可选属性和传值结合在一起时会发出错误，就是在参数中加入指定类型以外的属性</li><li>ts中定义了类型指定后，会做额外的检查</li><li>虽然是可选属性但是还是报出错误,限制没有属性就会报错</li><li>TypeScript会认为这段代码可能存在bug。 对象字面量会被特殊对待而且会经过 额外属性检查，当将它们赋值给变量或作为参数传递的时候。 如果一个对象字面量存在任何“目标类型”不包含的属性时，你会得到一个错误<figure class="highlight typescript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">interface</span> SquareConfig &#123;</span><br><span class="line">    color?: <span class="built_in">string</span>;</span><br><span class="line">    width?: <span class="built_in">number</span>;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">function</span> <span class="title">createSquare</span>(<span class="params">config: SquareConfig</span>): </span>&#123; color: <span class="built_in">string</span>; area: <span class="built_in">number</span> &#125; &#123;</span><br><span class="line">    <span class="comment">// ...</span></span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="comment">// 注意传入的参数colour</span></span><br><span class="line"><span class="comment">// error: 'colour' not expected in type 'SquareConfig'</span></span><br><span class="line"><span class="comment">// 在指定类型中是没有的</span></span><br><span class="line"><span class="keyword">let</span> mySquare = createSquare(&#123; colour: <span class="string">"red"</span>, width: <span class="number">100</span> &#125;);</span><br></pre></td></tr></table></figure></li></ul><hr><h2 id="解决额外检查错误（绕开检查）"><a href="#解决额外检查错误（绕开检查）" class="headerlink" title="解决额外检查错误（绕开检查）"></a>解决额外检查错误（绕开检查）</h2><h3 id="解决方法一-（断言）"><a href="#解决方法一-（断言）" class="headerlink" title="解决方法一 （断言）"></a>解决方法一 （断言）</h3><ul><li>在传入参数时后面加入断言<figure class="highlight typescript"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">let</span> mySquare = createSquare(&#123; width: <span class="number">100</span>, opacity: <span class="number">0.5</span> &#125; <span class="keyword">as</span> SquareConfig);</span><br></pre></td></tr></table></figure></li></ul><h3 id="解决方法二-（完美解法，添加一个字符串索引签名）"><a href="#解决方法二-（完美解法，添加一个字符串索引签名）" class="headerlink" title="解决方法二 （完美解法，添加一个字符串索引签名）"></a>解决方法二 （完美解法，添加一个字符串索引签名）</h3><ul><li>前提是你能够确定这个对象可能具有某些做为特殊用途使用的额外属性</li><li>如果 SquareConfig带有上面定义的类型的color和width属性，并且还会带有任意数量的其它属性，那么我们可以这样定义它</li><li>所以虽然是最完美的解决方法，但是要一开始就确立是否会带有</li><li>只要它们不是color和width，那么就无所谓它们的类型是什么。<figure class="highlight typescript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">interface</span> SquareConfig &#123;</span><br><span class="line">    color?: <span class="built_in">string</span>;</span><br><span class="line">    width?: <span class="built_in">number</span>;</span><br><span class="line">    <span class="comment">// 字符串索引签名</span></span><br><span class="line">    [propName: <span class="built_in">string</span>]: <span class="built_in">any</span>;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure></li></ul><h3 id="解决方法三-（耍赖皮-没有理解，我觉得这样是一个漏洞）"><a href="#解决方法三-（耍赖皮-没有理解，我觉得这样是一个漏洞）" class="headerlink" title="解决方法三 （耍赖皮,没有理解，我觉得这样是一个漏洞）"></a>解决方法三 （耍赖皮,没有理解，我觉得这样是一个漏洞）</h3><ul><li>将这个对象赋值给一个另一个变量： 因为 squareOptions不会经过额外属性检查，所以编译器不会报错<figure class="highlight typescript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">let</span> squareOptions = &#123; colour: <span class="string">"red"</span>, width: <span class="number">100</span> &#125;;</span><br><span class="line"><span class="keyword">let</span> mySquare = createSquare(squareOptions);</span><br></pre></td></tr></table></figure></li></ul><hr><ul><li>要留意，在像上面一样的简单代码里，你可能不应该去绕开这些检查。 对于包含方法和内部状态的复杂对象字面量来讲，你可能需要使用这些技巧，但是大部额外属性检查错误是真正的bug。 就是说你遇到了额外类型检查出的错误，比如“option bags”，你应该去审查一下你的类型声明。 在这里，如果支持传入 color或colour属性到createSquare，你应该修改SquareConfig定义来体现出这一点。</li></ul><h1 id="函数类型"><a href="#函数类型" class="headerlink" title="函数类型"></a>函数类型</h1><ul><li>接口能够描述JavaScript中对象拥有的各种各样的外形。 除了描述带有属性的普通对象外，接口也可以描述函数类型</li><li>为了使用接口表示函数类型，我们需要给接口定义一个调用签名。 它就像是一个只有参数列表和返回值类型的函数定义。参数列表里的每个参数都需要名字和类型。</li><li>其实和声明函数差不多，只是没有了前面的function和后面的业务</li><li>使用像使用其它接口一样使用这个函数类型的接口。 下例展示了如何创建一个函数类型的变量，并将一个同类型的函数赋值给这个变量<figure class="highlight typescript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">// 定义名为 SearchFunc 的接口</span></span><br><span class="line"><span class="keyword">interface</span> SearchFunc &#123;</span><br><span class="line">  <span class="comment">// 定义参数为source，subString 都为string</span></span><br><span class="line">  <span class="comment">// 返回类型为boolean</span></span><br><span class="line">  (source: <span class="built_in">String</span>, subString: <span class="built_in">String</span>) : <span class="built_in">boolean</span>;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="comment">// 使用接口</span></span><br><span class="line"><span class="keyword">let</span> mySearch: SearchFunc = <span class="function"><span class="keyword">function</span> (<span class="params">source: <span class="built_in">string</span>, subString: <span class="built_in">string</span></span>) </span>&#123;</span><br><span class="line">  <span class="keyword">let</span> result = source.search(subString);</span><br><span class="line">  <span class="keyword">return</span> result &gt; <span class="number">-1</span>;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="built_in">console</span>.log(mySearch(<span class="string">'aaabb'</span>,<span class="string">'bb'</span>))</span><br></pre></td></tr></table></figure></li></ul><hr><ul><li>对于函数类型的类型检查来说，函数的参数名不需要与接口里定义的名字相匹配</li><li>因为只是参数，传入时也无法判断<figure class="highlight typescript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">let</span> mySearch: SearchFunc;</span><br><span class="line">mySearch = <span class="function"><span class="keyword">function</span>(<span class="params">src: <span class="built_in">string</span>, sub: <span class="built_in">string</span></span>): <span class="title">boolean</span> </span>&#123;</span><br><span class="line">  <span class="keyword">let</span> result = src.search(sub);</span><br><span class="line">  <span class="keyword">return</span> result &gt; <span class="number">-1</span>;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure></li></ul><hr><ul><li>函数的参数会逐个进行检查，要求对应位置上的参数类型是兼容的。 如果你不想指定类型，TypeScript的类型系统会推断出参数类型，因为函数直接赋值给了 SearchFunc类型变量。 函数的返回值类型是通过其返回值推断出来的（此例是 false和true）。 如果让这个函数返回数字或字符串，类型检查器会警告我们函数的返回值类型与 SearchFunc接口中的定义不匹配</li><li>定义时可以不写指定类型</li><li>但是传入和返回类型不匹配就会报错<figure class="highlight typescript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">let</span> mySearch: SearchFunc;</span><br><span class="line">mySearch = <span class="function"><span class="keyword">function</span>(<span class="params">src, sub</span>) </span>&#123;</span><br><span class="line">    <span class="keyword">let</span> result = src.search(sub);</span><br><span class="line">    <span class="keyword">return</span> result &gt; <span class="number">-1</span>;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure></li></ul><h1 id="可索引的类型"><a href="#可索引的类型" class="headerlink" title="可索引的类型"></a>可索引的类型</h1><h2 id="数字索引-数组"><a href="#数字索引-数组" class="headerlink" title="数字索引(数组)"></a>数字索引(数组)</h2><ul><li>第一感觉这个索引是为数组而设立的</li><li>通过不同类型的值去索引</li><li>与使用接口描述函数类型差不多，我们也可以描述那些能够“通过索引得到”的类型，比如a[10]或ageMap[“daniel”]。 可索引类型具有一个 索引签名，它描述了对象索引的类型，还有相应的索引返回值类型。 </li><li>我们定义了StringArray接口，它具有索引签名。 这个索引签名表示了当用 number去索引StringArray时会得到string类型的返回值<figure class="highlight typescript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">interface</span> StringArray &#123;</span><br><span class="line">  [index: <span class="built_in">number</span>]: <span class="built_in">string</span>;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="keyword">let</span> myArray: StringArray;</span><br><span class="line">myArray = [<span class="string">"Bob"</span>, <span class="string">"Fred"</span>];</span><br><span class="line"></span><br><span class="line"><span class="keyword">let</span> myStr: <span class="built_in">string</span> = myArray[<span class="number">0</span>];</span><br></pre></td></tr></table></figure></li></ul><hr><h2 id="字符串索引（对象）"><a href="#字符串索引（对象）" class="headerlink" title="字符串索引（对象）"></a>字符串索引（对象）</h2><ul><li>TypeScript支持两种索引签名：字符串和数字。 可以同时使用两种类型的索引，但是数字索引的返回值必须是字符串索引返回值类型的子类型。 这是因为当使用 number来索引时，JavaScript会将它转换成string然后再去索引对象。 也就是说用 100（一个number）去索引等同于使用”100”（一个string）去索引，因此两者需要保持一致<figure class="highlight typescript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">// 错误</span></span><br><span class="line"><span class="keyword">class</span> Animal &#123;</span><br><span class="line">    name: <span class="built_in">string</span>;</span><br><span class="line">&#125;</span><br><span class="line"><span class="keyword">class</span> Dog <span class="keyword">extends</span> Animal &#123;</span><br><span class="line">    breed: <span class="built_in">string</span>;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="comment">// 错误：使用数值型的字符串索引，有时会得到完全不同的Animal!</span></span><br><span class="line"><span class="keyword">interface</span> NotOkay &#123;</span><br><span class="line">    [x: <span class="built_in">number</span>]: Animal;</span><br><span class="line">    [x: <span class="built_in">string</span>]: Dog;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure></li></ul><hr><ul><li>字符串索引签名能够很好的描述dictionary模式，并且它们也会确保所有属性与其返回值类型相匹配。 因为字符串索引声明了 obj.property和obj[“property”]两种形式都可以<figure class="highlight typescript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">interface</span> NumberDictionary &#123;</span><br><span class="line">  [index: <span class="built_in">string</span>]: <span class="built_in">number</span>;</span><br><span class="line">  length: <span class="built_in">number</span>;    <span class="comment">// 可以，length是number类型</span></span><br><span class="line">  name: <span class="built_in">string</span>       <span class="comment">// 错误，`name`的类型与索引类型返回值的类型不匹配</span></span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="keyword">let</span> myArray: NumberDictionary;</span><br><span class="line">myArray = &#123;test1:<span class="number">100</span>,length:<span class="number">20</span>,test2:<span class="number">200</span>&#125;;</span><br><span class="line"></span><br><span class="line"><span class="built_in">console</span>.log(myArray.test1)</span><br><span class="line"><span class="built_in">console</span>.log(myArray.test2)</span><br><span class="line"><span class="built_in">console</span>.log(myArray.length)</span><br></pre></td></tr></table></figure></li></ul><hr><h2 id="防止索引被篡改-只读"><a href="#防止索引被篡改-只读" class="headerlink" title="防止索引被篡改 (只读)"></a>防止索引被篡改 (只读)</h2><ul><li>最后，你可以将索引签名设置为只读，这样就防止了给索引赋值<figure class="highlight typescript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">interface</span> ReadonlyStringArray &#123;</span><br><span class="line">    readonly [index: <span class="built_in">number</span>]: <span class="built_in">string</span>;</span><br><span class="line">&#125;</span><br><span class="line"><span class="keyword">let</span> myArray: ReadonlyStringArray = [<span class="string">"Alice"</span>, <span class="string">"Bob"</span>];</span><br><span class="line">myArray[<span class="number">2</span>] = <span class="string">"Mallory"</span>; <span class="comment">// error!</span></span><br></pre></td></tr></table></figure></li></ul><h1 id="类类型"><a href="#类类型" class="headerlink" title="类类型"></a>类类型</h1><h2 id="实现接口"><a href="#实现接口" class="headerlink" title="实现接口"></a>实现接口</h2><ul><li>与C#或Java里接口的基本作用一样，TypeScript也能够用它来明确的强制一个类去符合某种契约。</li><li>其实就是java的抽象方法</li><li>定义了就必须去执行</li><li>接口描述了类的公共部分，而不是公共和私有两部分。 它不会帮你检查类是否具有某些私有成员。</li></ul><hr><ol><li>元素<figure class="highlight typescript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">// 实现元素</span></span><br><span class="line"><span class="keyword">interface</span> ClockInterface &#123;</span><br><span class="line">    currentTime: <span class="built_in">Date</span>;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="keyword">class</span> Clock <span class="keyword">implements</span> ClockInterface &#123;</span><br><span class="line">    currentTime: <span class="built_in">Date</span>;</span><br><span class="line">    <span class="keyword">constructor</span>(<span class="params">h: <span class="built_in">number</span>, m: <span class="built_in">number</span></span>) &#123; &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure></li></ol><hr><ol start="2"><li>方法</li></ol><ul><li>你也可以在接口中描述一个方法，在类里实现它<figure class="highlight typescript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">interface</span> ClockInterface &#123;</span><br><span class="line">    currentTime: <span class="built_in">Date</span>;</span><br><span class="line">    setTime(d: <span class="built_in">Date</span>);</span><br><span class="line">    <span class="comment">// constructor(d: Date) // 这个是不允许的构造函数是不允许这样被定义的</span></span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="keyword">class</span> Clock <span class="keyword">implements</span> ClockInterface &#123;</span><br><span class="line">    currentTime: <span class="built_in">Date</span>;</span><br><span class="line">    setTime(d: <span class="built_in">Date</span>) &#123;</span><br><span class="line">        <span class="keyword">this</span>.currentTime = d;</span><br><span class="line">        <span class="keyword">return</span> <span class="keyword">this</span>.currentTime;</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">constructor</span>(<span class="params">h: <span class="built_in">number</span>, m: <span class="built_in">number</span></span>) &#123; &#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="keyword">let</span> test = <span class="keyword">new</span> Clock(<span class="number">10</span>,<span class="number">20</span>);</span><br><span class="line"><span class="built_in">console</span>.log(test.setTime(<span class="keyword">new</span> <span class="built_in">Date</span>())); <span class="comment">//2019-03-09T14:12:10.617Z</span></span><br></pre></td></tr></table></figure></li></ul><h2 id="类静态部分与实例部分的区别-（令人费解的地方，未知）"><a href="#类静态部分与实例部分的区别-（令人费解的地方，未知）" class="headerlink" title="类静态部分与实例部分的区别 （令人费解的地方，未知）"></a>类静态部分与实例部分的区别 （令人费解的地方，未知）</h2><ul><li>这个地方不太好理解</li><li>当你操作类和接口的时候，你要知道类是具有两个类型的：静态部分的类型和实例的类型。 你会注意到，当你用构造器签名去定义一个接口并试图定义一个类去实现这个接口时会得到一个错误</li><li>因为当一个类实现了一个接口时，只对其实例部分进行类型检查。 constructor存在于类的静态部分，所以不在检查的范围内</li><li>因为createClock的第一个参数是ClockConstructor类型，在createClock(AnalogClock, 7, 32)里，会检查AnalogClock是否符合构造函数签名</li></ul><hr><ol><li>这个直指类中的构造函数，就是在new时要传参，并有返回值</li><li>因为在类中是不会去检索构造函数，所以直接定义就会出错</li><li>所以我们在fn中传参数时定义，就会去检测构造函数签名</li><li>其实就是说作为参数和类是不想同的检索方式<figure class="highlight typescript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">// 错误</span></span><br><span class="line"><span class="keyword">interface</span> ClockConstructor &#123;</span><br><span class="line">    <span class="keyword">new</span> (hour: <span class="built_in">number</span>, minute: <span class="built_in">number</span>);</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="keyword">class</span> Clock <span class="keyword">implements</span> ClockConstructor &#123;</span><br><span class="line">    currentTime: <span class="built_in">Date</span>;</span><br><span class="line">    <span class="keyword">constructor</span>(<span class="params">h: <span class="built_in">number</span>, m: <span class="built_in">number</span></span>) &#123; &#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line">------------------------------</span><br><span class="line"><span class="comment">// 正确</span></span><br><span class="line"><span class="keyword">interface</span> ClockConstructor &#123;</span><br><span class="line">  <span class="comment">// 约束 new 一个实例，直接针对class的构造函数</span></span><br><span class="line">    <span class="keyword">new</span> (hour: <span class="built_in">number</span>, minute: <span class="built_in">number</span>): ClockInterface;</span><br><span class="line">&#125;</span><br><span class="line"><span class="keyword">interface</span> ClockInterface &#123;</span><br><span class="line">    tick();</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">function</span> <span class="title">createClock</span>(<span class="params">ctor: ClockConstructor, hour: <span class="built_in">number</span>, minute: <span class="built_in">number</span></span>): <span class="title">ClockInterface</span> </span>&#123;</span><br><span class="line">    <span class="keyword">return</span> <span class="keyword">new</span> ctor(hour, minute);</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="keyword">class</span> DigitalClock <span class="keyword">implements</span> ClockInterface &#123;</span><br><span class="line">    <span class="keyword">constructor</span>(<span class="params">h: <span class="built_in">number</span>, m: <span class="built_in">number</span></span>) &#123; &#125;</span><br><span class="line">    tick() &#123;</span><br><span class="line">        <span class="built_in">console</span>.log(<span class="string">"beep beep"</span>);</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br><span class="line"><span class="keyword">class</span> AnalogClock <span class="keyword">implements</span> ClockInterface &#123;</span><br><span class="line">    <span class="keyword">constructor</span>(<span class="params">h: <span class="built_in">number</span>, m: <span class="built_in">number</span></span>) &#123; &#125;</span><br><span class="line">    tick() &#123;</span><br><span class="line">        <span class="built_in">console</span>.log(<span class="string">"tick tock"</span>);</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="keyword">let</span> digital = createClock(DigitalClock, <span class="number">12</span>, <span class="number">17</span>);</span><br><span class="line"><span class="keyword">let</span> analog = createClock(AnalogClock, <span class="number">7</span>, <span class="number">32</span>);</span><br><span class="line"><span class="built_in">console</span>.log(digital.tick())</span><br></pre></td></tr></table></figure></li></ol><h1 id="继承接口"><a href="#继承接口" class="headerlink" title="继承接口"></a>继承接口</h1><ul><li>和类一样，接口也可以相互继承。 这让我们能够从一个接口里复制成员到另一个接口里，可以更灵活地将接口分割到可重用的模块里</li><li>这个就比较好理解，就是儿子继承爸爸的东西</li><li>也可多接口<figure class="highlight typescript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">interface</span> Shape &#123;</span><br><span class="line">    color: <span class="built_in">string</span>;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="keyword">interface</span> Square <span class="keyword">extends</span> Shape &#123;</span><br><span class="line">    sideLength: <span class="built_in">number</span>;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="comment">// 定义</span></span><br><span class="line"><span class="keyword">let</span> square = &lt;Square&gt;&#123;&#125;;</span><br><span class="line">square.color = <span class="string">"blue"</span>;</span><br><span class="line">square.sideLength = <span class="number">10</span>;</span><br><span class="line"></span><br><span class="line"><span class="comment">// 多接口</span></span><br><span class="line"><span class="keyword">interface</span> Shape &#123;</span><br><span class="line">    color: <span class="built_in">string</span>;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="keyword">interface</span> PenStroke &#123;</span><br><span class="line">    penWidth: <span class="built_in">number</span>;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="keyword">interface</span> Square <span class="keyword">extends</span> Shape, PenStroke &#123;</span><br><span class="line">    sideLength: <span class="built_in">number</span>;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="keyword">let</span> square = &lt;Square&gt;&#123;&#125;;</span><br><span class="line">square.color = <span class="string">"blue"</span>;</span><br><span class="line">square.sideLength = <span class="number">10</span>;</span><br><span class="line">square.penWidth = <span class="number">5.0</span>;</span><br></pre></td></tr></table></figure></li></ul><h1 id="混合类型"><a href="#混合类型" class="headerlink" title="混合类型"></a>混合类型</h1><ul><li>一个对象可以同时做为函数和对象使用，并带有额外的属性</li></ul><figure class="highlight typescript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">interface</span> Counter &#123;</span><br><span class="line">    (start: <span class="built_in">number</span>): <span class="built_in">string</span>;</span><br><span class="line">    interval: <span class="built_in">number</span>;</span><br><span class="line">    reset(): <span class="built_in">void</span>;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">function</span> <span class="title">getCounter</span>(<span class="params"></span>): <span class="title">Counter</span> </span>&#123;</span><br><span class="line">    <span class="keyword">let</span> counter = &lt;Counter&gt;<span class="function"><span class="keyword">function</span> (<span class="params">start: <span class="built_in">number</span></span>) </span>&#123; &#125;;</span><br><span class="line">    counter.interval = <span class="number">123</span>;</span><br><span class="line">    counter.reset = <span class="function"><span class="keyword">function</span> (<span class="params"></span>) </span>&#123; &#125;;</span><br><span class="line">    <span class="keyword">return</span> counter;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="keyword">let</span> c = getCounter();</span><br><span class="line">c(<span class="number">10</span>);</span><br><span class="line">c.reset();</span><br><span class="line">c.interval = <span class="number">5.0</span>;</span><br></pre></td></tr></table></figure><h1 id="接口继承类"><a href="#接口继承类" class="headerlink" title="接口继承类"></a>接口继承类</h1><ul><li>当接口继承了一个类类型时，它会继承类的成员但不包括其实现。 就好像接口声明了所有类中存在的成员，但并没有提供具体实现一样。 接口同样会继承到类的private和protected成员。 这意味着当你创建了一个接口继承了一个拥有私有或受保护的成员的类时，这个接口类型只能被这个类或其子类所实现（implement）</li><li><p>当你有一个庞大的继承结构时这很有用，但要指出的是你的代码只在子类拥有特定属性时起作用。 这个子类除了继承至基类外与基类没有任何关系</p><figure class="highlight typescript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">class</span> Control &#123;</span><br><span class="line">    <span class="keyword">private</span> state: <span class="built_in">any</span>;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="keyword">interface</span> SelectableControl <span class="keyword">extends</span> Control &#123;</span><br><span class="line">    select(): <span class="built_in">void</span>;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="keyword">class</span> Button <span class="keyword">extends</span> Control <span class="keyword">implements</span> SelectableControl &#123;</span><br><span class="line">    select() &#123; &#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="keyword">class</span> TextBox <span class="keyword">extends</span> Control &#123;</span><br><span class="line">    select() &#123; &#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="comment">// 错误：“Image”类型缺少“state”属性。</span></span><br><span class="line"><span class="keyword">class</span> Image <span class="keyword">implements</span> SelectableControl &#123;</span><br><span class="line">    select() &#123; &#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="keyword">class</span> Location &#123;</span><br><span class="line"></span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure></li><li><p>在上面的例子里，SelectableControl包含了Control的所有成员，包括私有成员state。 因为 state是私有成员，所以只能够是Control的子类们才能实现SelectableControl接口。 因为只有 Control的子类才能够拥有一个声明于Control的私有成员state，这对私有成员的兼容性是必需的</p></li><li>在Control类内部，是允许通过SelectableControl的实例来访问私有成员state的。 实际上， SelectableControl接口和拥有select方法的Control类是一样的。 Button和TextBox类是SelectableControl的子类（因为它们都继承自Control并有select方法），但Image和Location类并不是这样的</li></ul><h1 id="后记"><a href="#后记" class="headerlink" title="后记"></a>后记</h1><ul><li>这个就是我学习Ts的第三天的笔记，欢迎更多的同行大哥指导交流</li><li><a href="https://yhf7.github.io/" target="_blank" rel="noopener">欢迎进入我的博客</a>：<a href="https://yhf7.github.io/" target="_blank" rel="noopener">https://yhf7.github.io/</a></li><li>如果有什么侵权的话，请及时添加小编微信以及qq也可以来告诉小编（905477376微信qq通用），谢谢！</li></ul>]]></content>
    
    <summary type="html">
    
      
      
        &lt;link rel=&quot;stylesheet&quot; class=&quot;aplayer-secondary-style-marker&quot; href=&quot;/assets/css/APlayer.min.css&quot;&gt;&lt;script src=&quot;/assets/js/APlayer.min.js&quot; cla
      
    
    </summary>
    
      <category term="TypeScript" scheme="http://yoursite.com/categories/TypeScript/"/>
    
    
      <category term="TypeScript 笔记" scheme="http://yoursite.com/tags/TypeScript-%E7%AC%94%E8%AE%B0/"/>
    
  </entry>
  
  <entry>
    <title>TypeScript 自学笔记2 变量声明</title>
    <link href="http://yoursite.com/2019/03/07/TypeScript%E7%AC%94%E8%AE%B02/"/>
    <id>http://yoursite.com/2019/03/07/TypeScript笔记2/</id>
    <published>2019-03-07T13:17:11.558Z</published>
    <updated>2019-03-11T01:49:44.270Z</updated>
    
    <content type="html"><![CDATA[<link rel="stylesheet" class="aplayer-secondary-style-marker" href="/assets/css/APlayer.min.css"><script src="/assets/js/APlayer.min.js" class="aplayer-secondary-script-marker"></script><h1 id="前言"><a href="#前言" class="headerlink" title="前言"></a>前言</h1><ul><li>个人学习笔记，仅供参考</li></ul><h1 id="Var-声明"><a href="#Var-声明" class="headerlink" title="Var 声明"></a>Var 声明</h1><ul><li>可以在函数内部定义变量</li><li>可以在其它函数内部访问相同的变量<figure class="highlight typescript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br></pre></td><td class="code"><pre><span class="line"><span class="function"><span class="keyword">function</span> <span class="title">f</span>(<span class="params"></span>) </span>&#123;</span><br><span class="line">    <span class="keyword">var</span> a = <span class="number">1</span>;</span><br><span class="line"></span><br><span class="line">    a = <span class="number">2</span>;</span><br><span class="line">    <span class="keyword">var</span> b = g();</span><br><span class="line">    a = <span class="number">3</span>;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">return</span> b;</span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">function</span> <span class="title">g</span>(<span class="params"></span>) </span>&#123;</span><br><span class="line">        <span class="keyword">return</span> a;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line">f(); <span class="comment">// returns 2</span></span><br></pre></td></tr></table></figure></li></ul><h2 id="作用域规则"><a href="#作用域规则" class="headerlink" title="作用域规则"></a>作用域规则</h2><ul><li>对于var声明奇怪的作用域规则</li><li>在这里以为程序在执行时会先编译一遍所以x就已经被声明了</li></ul><ol><li><p>可以在包含它的函数，模块，命名空间或全局作用域内部任何位置被访问</p><figure class="highlight typescript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br></pre></td><td class="code"><pre><span class="line"><span class="function"><span class="keyword">function</span> <span class="title">f</span>(<span class="params">shouldInitialize: <span class="built_in">boolean</span></span>) </span>&#123;</span><br><span class="line">    <span class="keyword">if</span> (shouldInitialize) &#123;</span><br><span class="line">        <span class="keyword">var</span> x = <span class="number">10</span>;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">return</span> x;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line">f(<span class="literal">true</span>);  <span class="comment">// returns '10'</span></span><br><span class="line">f(<span class="literal">false</span>); <span class="comment">// returns 'undefined'</span></span><br></pre></td></tr></table></figure></li><li><p>var多次声明并不会报错</p><figure class="highlight typescript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br></pre></td><td class="code"><pre><span class="line"><span class="function"><span class="keyword">function</span> <span class="title">sumMatrix</span>(<span class="params">matrix: <span class="built_in">number</span>[][]</span>) </span>&#123;</span><br><span class="line">    <span class="keyword">var</span> sum = <span class="number">0</span>;</span><br><span class="line">    <span class="keyword">for</span> (<span class="keyword">var</span> i = <span class="number">0</span>; i &lt; matrix.length; i++) &#123;</span><br><span class="line">        <span class="keyword">var</span> currentRow = matrix[i];</span><br><span class="line">        <span class="keyword">for</span> (<span class="keyword">var</span> i = <span class="number">0</span>; i &lt; currentRow.length; i++) &#123;</span><br><span class="line">            sum += currentRow[i];</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">return</span> sum;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure></li></ol><h2 id="捕获变量怪异之处"><a href="#捕获变量怪异之处" class="headerlink" title="捕获变量怪异之处"></a>捕获变量怪异之处</h2><ul><li>setTimeout 定时器，而且每一次的时间就加长了</li><li>执行的速度是非常快的，很快就循环完毕开启了所有的定时器</li><li>但是定时器的执行会延时，在最后执行时i已经是10了</li><li><p>所以所有的输出都是10，并不是想象的1……9</p><figure class="highlight typescript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">for</span> (<span class="keyword">var</span> i = <span class="number">0</span>; i &lt; <span class="number">10</span>; i++) &#123;</span><br><span class="line">    setTimeout(<span class="function"><span class="keyword">function</span>(<span class="params"></span>) </span>&#123; <span class="built_in">console</span>.log(i); &#125;, <span class="number">100</span> * i);</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure></li><li><p>解决方案，使用闭包,每一次的值都是传进去的就不会被改变</p><figure class="highlight typescript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">for</span> (<span class="keyword">var</span> i = <span class="number">0</span>; i &lt; <span class="number">10</span>; i++) &#123;</span><br><span class="line">    <span class="comment">// capture the current state of 'i'</span></span><br><span class="line">    <span class="comment">// by invoking a function with its current value</span></span><br><span class="line">    (<span class="function"><span class="keyword">function</span>(<span class="params">i</span>) </span>&#123;</span><br><span class="line">        setTimeout(<span class="function"><span class="keyword">function</span>(<span class="params"></span>) </span>&#123; <span class="built_in">console</span>.log(i); &#125;, <span class="number">100</span> * i);</span><br><span class="line">    &#125;)(i);</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure></li></ul><h1 id="Let声明"><a href="#Let声明" class="headerlink" title="Let声明"></a>Let声明</h1><ul><li>在let中和var还是有一定的区别的</li><li>let中使用的是作用域或块作用域</li><li>所有在区块内没有定义是不可以使用的</li><li>let并没有作用域提示的概念</li></ul><h2 id="块作用域"><a href="#块作用域" class="headerlink" title="块作用域"></a>块作用域</h2><ul><li>这里我们定义了2个变量a和b。 a的作用域是f函数体内，而b的作用域是if语句块</li><li>这就是我们提到的变量不会提升，所以不能使用</li><li>如果是用var这个就可以是用了</li><li>而且我们使用ts 在编译时就会报错的</li><li>直接会 error TS2304: Cannot find name ‘b’ 提示没有定义这个名称的变量</li><li>但是a为什么可以获取呢？因为a所在的作用域块大于if，而在外面的作用域是不能访问内部定义的变量<figure class="highlight typescript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br></pre></td><td class="code"><pre><span class="line"><span class="function"><span class="keyword">function</span> <span class="title">f</span>(<span class="params">input: <span class="built_in">boolean</span></span>) </span>&#123;</span><br><span class="line">    <span class="keyword">let</span> a = <span class="number">100</span>;</span><br><span class="line"></span><br><span class="line">    <span class="comment">// if内部定义的b</span></span><br><span class="line">    <span class="keyword">if</span> (input) &#123;</span><br><span class="line">        <span class="comment">// 但是在这里面是可以获取a的因为a在fn的作用域块比if大</span></span><br><span class="line">        <span class="comment">// Still okay to reference 'a'</span></span><br><span class="line">        <span class="keyword">let</span> b = a + <span class="number">1</span>;</span><br><span class="line">        <span class="keyword">return</span> b;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="comment">// 外面是无法访问的，就会报错</span></span><br><span class="line">    <span class="comment">// Error: 'b' doesn't exist here</span></span><br><span class="line">    <span class="keyword">return</span> b;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure></li></ul><h3 id="暂时性死区"><a href="#暂时性死区" class="headerlink" title="暂时性死区"></a>暂时性死区</h3><ul><li>未声明前无法读/写</li><li>很多人对这个let不了解就想当然的像var一样去用</li><li>但是虽然变量存在，在let声明前所定义的所有代码都是无效的，因为let有着暂时性死区（声明前的所有区域都是）</li><li>ts中编译也是会爆出来的<figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">a++; <span class="comment">// illegal to use 'a' before it's declared;</span></span><br><span class="line"><span class="keyword">let</span> a;</span><br></pre></td></tr></table></figure></li></ul><hr><ul><li>注意一点，我们仍然可以在一个拥有块作用域变量被声明前获取它。 只是我们不能在变量声明前去调用那个函数。 如果生成代码目标为ES2015，现代的运行时会抛出一个错误；然而，现今TypeScript是不会报错的。<figure class="highlight typescript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br></pre></td><td class="code"><pre><span class="line"><span class="function"><span class="keyword">function</span> <span class="title">foo</span>(<span class="params"></span>) </span>&#123;</span><br><span class="line">    <span class="comment">// okay to capture 'a'</span></span><br><span class="line">    <span class="keyword">return</span> a;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="comment">// 不能在'a'被声明前调用'foo'</span></span><br><span class="line"><span class="comment">// 运行时应该抛出错误</span></span><br><span class="line">foo();</span><br><span class="line"></span><br><span class="line"><span class="keyword">let</span> a;</span><br></pre></td></tr></table></figure></li></ul><h2 id="重定义及屏蔽"><a href="#重定义及屏蔽" class="headerlink" title="重定义及屏蔽"></a>重定义及屏蔽</h2><h3 id="重定义"><a href="#重定义" class="headerlink" title="重定义"></a>重定义</h3><ul><li>我们在使用var 时可以无限的重复声明最后只会得到一个（会出现bug）</li><li>let在同一作用域下是不可以重复声明的</li><li>并不是要求两个均是块级作用域的声明TypeScript才会给出一个错误的警告。</li><li>并不是说块级作用域变量不能用函数作用域变量来声明。 而是块级作用域变量需要在明显不同的块里声明。<figure class="highlight typescript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">// 例1</span></span><br><span class="line"><span class="keyword">let</span> x = <span class="number">10</span>;</span><br><span class="line"><span class="keyword">let</span> x = <span class="number">20</span>; <span class="comment">// 错误，不能在1个作用域里多次声明`x`</span></span><br><span class="line"></span><br><span class="line"><span class="comment">// 例2</span></span><br><span class="line"><span class="comment">// 变量和声明明显在同一个作用域下</span></span><br><span class="line"><span class="function"><span class="keyword">function</span> <span class="title">f</span>(<span class="params">x</span>) </span>&#123;</span><br><span class="line">    <span class="keyword">let</span> x = <span class="number">100</span>; <span class="comment">// error: interferes with parameter declaration</span></span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="comment">// 例3</span></span><br><span class="line"><span class="comment">// 无论let前后都不能重新定义变量</span></span><br><span class="line"><span class="function"><span class="keyword">function</span> <span class="title">g</span>(<span class="params"></span>) </span>&#123;</span><br><span class="line">    <span class="keyword">let</span> x = <span class="number">100</span>;</span><br><span class="line">    <span class="keyword">var</span> x = <span class="number">100</span>; <span class="comment">// error: can't have both declarations of 'x'</span></span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="comment">// 例4</span></span><br><span class="line"><span class="comment">// 正确的重定义</span></span><br><span class="line"><span class="comment">// 这样就分开了两个完全不同的作用域</span></span><br><span class="line"><span class="comment">// if内部只可以使用x = 5的这个和x=100一点关系都没有</span></span><br><span class="line"><span class="function"><span class="keyword">function</span> <span class="title">g</span>(<span class="params"></span>) </span>&#123;</span><br><span class="line">    <span class="keyword">let</span> x = <span class="number">100</span>;</span><br><span class="line">    <span class="built_in">console</span>.log(<span class="string">'fn g x'</span>,x) <span class="comment">//fn g x 100</span></span><br><span class="line">    <span class="keyword">if</span> (<span class="literal">true</span>) &#123;</span><br><span class="line">        <span class="keyword">let</span> x = <span class="number">5</span>;</span><br><span class="line">        <span class="built_in">console</span>.log(<span class="string">'fn if x'</span>,x)<span class="comment">//fn if x 5</span></span><br><span class="line">    &#125;</span><br><span class="line">    <span class="built_in">console</span>.log(<span class="string">'fn g x'</span>,x)<span class="comment">//fn g x 100</span></span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="comment">// 例5</span></span><br><span class="line"><span class="comment">// 正确的重定义</span></span><br><span class="line"><span class="function"><span class="keyword">function</span> <span class="title">f</span>(<span class="params">condition, x</span>) </span>&#123;</span><br><span class="line">    <span class="keyword">if</span> (condition) &#123;</span><br><span class="line">        <span class="keyword">let</span> x = <span class="number">100</span>;</span><br><span class="line">        <span class="keyword">return</span> x;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">return</span> x;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line">f(<span class="literal">false</span>, <span class="number">0</span>); <span class="comment">// returns 0</span></span><br><span class="line">f(<span class="literal">true</span>, <span class="number">0</span>);  <span class="comment">// returns 100</span></span><br></pre></td></tr></table></figure></li></ul><h3 id="屏蔽"><a href="#屏蔽" class="headerlink" title="屏蔽"></a>屏蔽</h3><ul><li>在一个嵌套作用域里引入一个新名字的行为称做屏蔽。 它是一把双刃剑，它可能会不小心地引入新问题，同时也可能会解决一些错误</li><li>使用let重写sumMatrix上面var写过的</li><li>在这里 在重新定义的数据，会出现一个数据屏蔽把前面定义的数据屏蔽掉</li><li>这样解决了数据不会相互影响的问题</li></ul><figure class="highlight typescript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br></pre></td><td class="code"><pre><span class="line">- </span><br><span class="line"><span class="function"><span class="keyword">function</span> <span class="title">sumMatrix</span>(<span class="params">matrix: <span class="built_in">number</span>[][]</span>) </span>&#123;</span><br><span class="line">    <span class="keyword">let</span> sum = <span class="number">0</span>;</span><br><span class="line">    <span class="keyword">for</span> (<span class="keyword">let</span> i = <span class="number">0</span>; i &lt; matrix.length; i++) &#123;</span><br><span class="line">        <span class="keyword">var</span> currentRow = matrix[i];</span><br><span class="line">        <span class="keyword">for</span> (<span class="keyword">let</span> i = <span class="number">0</span>; i &lt; currentRow.length; i++) &#123;</span><br><span class="line">            sum += currentRow[i];</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">return</span> sum;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h2 id="块级作用域变量的获取"><a href="#块级作用域变量的获取" class="headerlink" title="块级作用域变量的获取"></a>块级作用域变量的获取</h2><ul><li>在我们最初谈及获取用var声明的变量时，我们简略地探究了一下在获取到了变量之后它的行为是怎样的。 直观地讲，每次进入一个作用域时，它创建了一个变量的 环境。 就算作用域内代码已经执行完毕，这个环境与其捕获的变量依然存在。</li><li>因为我们已经在city的环境里获取到了city，所以就算if语句执行结束后我们仍然可以访问它。</li></ul><figure class="highlight typescript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br></pre></td><td class="code"><pre><span class="line"><span class="function"><span class="keyword">function</span> <span class="title">theCityThatAlwaysSleeps</span>(<span class="params"></span>) </span>&#123;</span><br><span class="line">    <span class="comment">// fn作用域定义了</span></span><br><span class="line">    <span class="keyword">let</span> getCity;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">if</span> (<span class="literal">true</span>) &#123;</span><br><span class="line">        <span class="keyword">let</span> city = <span class="string">"Seattle"</span>;</span><br><span class="line">        <span class="comment">// if内部赋值</span></span><br><span class="line">        getCity = <span class="function"><span class="keyword">function</span>(<span class="params"></span>) </span>&#123;</span><br><span class="line">            <span class="comment">// 在if作用域已经执行获取到了</span></span><br><span class="line">            <span class="keyword">return</span> city;</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="comment">// 外侧依然是能访问</span></span><br><span class="line">    <span class="keyword">return</span> getCity();</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><hr><ul><li>当let声明出现在循环体里时拥有完全不同的行为。 不仅是在循环里引入了一个新的变量环境，而是针对 每次迭代都会创建这样一个新作用域。 这就是我们在使用立即执行的函数表达式时做的事，所以在 setTimeout例子里我们仅使用let声明就可以了。</li><li>这样就可以理想的输出1-9了<figure class="highlight typescript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">for</span> (<span class="keyword">let</span> i = <span class="number">0</span>; i &lt; <span class="number">10</span> ; i++) &#123;</span><br><span class="line">    setTimeout(<span class="function"><span class="keyword">function</span>(<span class="params"></span>) </span>&#123;<span class="built_in">console</span>.log(i); &#125;, <span class="number">100</span> * i);</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure></li></ul><h1 id="const-声明"><a href="#const-声明" class="headerlink" title="const 声明"></a>const 声明</h1><ul><li>它们与let声明相似，但是就像它的名字所表达的，它们被赋值后不能再改变。 换句话说，它们拥有与 let相同的作用域规则，但是不能对它们重新赋值</li></ul><figure class="highlight typescript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">const</span> numLivesForCat = <span class="number">9</span>;</span><br><span class="line"><span class="keyword">const</span> kitty = &#123;</span><br><span class="line">    name: <span class="string">"Aurora"</span>,</span><br><span class="line">    numLives: numLivesForCat,</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="comment">// 定义后，外层是无法被重新定义的</span></span><br><span class="line"><span class="comment">// 可以使用但是无法重新在外层整体的去赋值</span></span><br><span class="line"><span class="comment">// Error</span></span><br><span class="line">kitty = &#123;</span><br><span class="line">    name: <span class="string">"Danielle"</span>,</span><br><span class="line">    numLives: numLivesForCat</span><br><span class="line">&#125;;</span><br><span class="line"></span><br><span class="line"><span class="comment">// 但是使用这样的方式去更改内部的值是不受限制的</span></span><br><span class="line"><span class="comment">// all "okay"</span></span><br><span class="line">kitty.name = <span class="string">"Rory"</span>;</span><br><span class="line">kitty.name = <span class="string">"Kitty"</span>;</span><br><span class="line">kitty.name = <span class="string">"Cat"</span>;</span><br><span class="line">kitty.numLives--;</span><br></pre></td></tr></table></figure><h1 id="解构【es6特性】"><a href="#解构【es6特性】" class="headerlink" title="解构【es6特性】"></a>解构【es6特性】</h1><h2 id="数组解构"><a href="#数组解构" class="headerlink" title="数组解构"></a>数组解构</h2><ul><li>相当于使用了索引，但更为方便</li><li>你可以在数组里使用…语法创建剩余变量</li></ul><hr><ul><li>可以解开单个</li><li>可以获取多个</li><li>可以跳过,隔开就可以<figure class="highlight typescript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">// 1.数组使用</span></span><br><span class="line"><span class="keyword">let</span> input = [<span class="number">1</span>, <span class="number">2</span>];</span><br><span class="line"><span class="keyword">let</span> [first, second] = input;</span><br><span class="line"><span class="built_in">console</span>.log(first); <span class="comment">// outputs 1</span></span><br><span class="line"><span class="built_in">console</span>.log(second); <span class="comment">// outputs 2</span></span><br><span class="line"></span><br><span class="line"><span class="comment">// 相当于</span></span><br><span class="line">first = input[<span class="number">0</span>];</span><br><span class="line">second = input[<span class="number">1</span>];</span><br><span class="line"></span><br><span class="line"></span><br><span class="line"><span class="comment">// 2.函数使用结构数组，传递一个数组解开两个变量</span></span><br><span class="line"><span class="function"><span class="keyword">function</span> <span class="title">f</span>(<span class="params">[first, second]: [<span class="built_in">number</span>, <span class="built_in">number</span>]</span>) </span>&#123;</span><br><span class="line">    <span class="built_in">console</span>.log(first);</span><br><span class="line">    <span class="built_in">console</span>.log(second);</span><br><span class="line">&#125;</span><br><span class="line">f(input);</span><br><span class="line"></span><br><span class="line"></span><br><span class="line"><span class="comment">// 3. 剩余变量</span></span><br><span class="line"><span class="keyword">let</span> [first, ...rest] = [<span class="number">1</span>, <span class="number">2</span>, <span class="number">3</span>, <span class="number">4</span>];</span><br><span class="line"><span class="built_in">console</span>.log(first); <span class="comment">// outputs 1</span></span><br><span class="line"><span class="built_in">console</span>.log(rest); <span class="comment">// outputs [ 2, 3, 4 ]</span></span><br><span class="line"></span><br><span class="line"></span><br><span class="line"><span class="comment">// 4. 单独提取也可以</span></span><br><span class="line"><span class="keyword">let</span> [first] = [<span class="number">1</span>, <span class="number">2</span>, <span class="number">3</span>, <span class="number">4</span>];</span><br><span class="line"><span class="built_in">console</span>.log(first); <span class="comment">// outputs 1</span></span><br><span class="line"></span><br><span class="line"><span class="comment">// 5. 获取其他元素,隔开</span></span><br><span class="line"><span class="keyword">let</span> [, second, , fourth] = [<span class="number">1</span>, <span class="number">2</span>, <span class="number">3</span>, <span class="number">4</span>];</span><br></pre></td></tr></table></figure></li></ul><h2 id="对象解构"><a href="#对象解构" class="headerlink" title="对象解构"></a>对象解构</h2><ul><li>和数组的没什么区别</li><li>同样不需要的可以直接忽略<figure class="highlight typescript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">let</span> o = &#123;</span><br><span class="line">    a: <span class="string">"foo"</span>,</span><br><span class="line">    b: <span class="number">12</span>,</span><br><span class="line">    c: <span class="string">"bar"</span></span><br><span class="line">&#125;;</span><br><span class="line"><span class="keyword">let</span> &#123; a, b &#125; = o;</span><br><span class="line"></span><br><span class="line"><span class="comment">// 剩余变量</span></span><br><span class="line"><span class="keyword">let</span> &#123; a, ...passthrough &#125; = o;</span><br><span class="line"><span class="keyword">let</span> total = passthrough.b + passthrough.c.length;</span><br></pre></td></tr></table></figure></li></ul><h3 id="属性重命名"><a href="#属性重命名" class="headerlink" title="属性重命名"></a>属性重命名</h3><ul><li>在对象中结构我们可以赋于其他于属性不同的名字</li><li>这里就会有疑惑ts里面‘:’后面不是加的是指示类型么</li><li>如果你想指定它的类型， 仍然需要在其后写上完整的模式。</li></ul><figure class="highlight typescript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">// 前面为属性名：后面为更改的属性名</span></span><br><span class="line"><span class="keyword">let</span> &#123; a: newName1, b: newName2 &#125; = o;</span><br><span class="line"></span><br><span class="line"><span class="comment">// 相等于</span></span><br><span class="line"><span class="keyword">let</span> newName1 = o.a;</span><br><span class="line"><span class="keyword">let</span> newName2 = o.b;</span><br><span class="line"></span><br><span class="line"></span><br><span class="line"><span class="comment">//添加指示类型</span></span><br><span class="line"><span class="keyword">let</span> &#123;a, b&#125;: &#123;a: <span class="built_in">string</span>, b: <span class="built_in">number</span>&#125; = o;</span><br></pre></td></tr></table></figure><h3 id="默认值"><a href="#默认值" class="headerlink" title="默认值"></a>默认值</h3><ul><li>? 可选属性</li><li>在指定类型前面加?号代表可以不传</li><li>在结构时用=给定默认值</li><li>默认值可以让你在属性为 undefined 时使用缺省值</li></ul><figure class="highlight typescript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><span class="line"><span class="function"><span class="keyword">function</span> <span class="title">keepWholeObject</span>(<span class="params">wholeObject: &#123; a: <span class="built_in">string</span>, b?: <span class="built_in">number</span> &#125;</span>) </span>&#123;</span><br><span class="line">    <span class="keyword">let</span> &#123; a, b = <span class="number">1001</span> &#125; = wholeObject;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="keyword">let</span> wholeObject = &#123;a:<span class="string">'abc'</span>&#125;</span><br><span class="line"></span><br><span class="line"><span class="built_in">console</span>.log(keepWholeObject(wholeObject)) </span><br><span class="line"><span class="comment">// a=abc  b=1001</span></span><br></pre></td></tr></table></figure><h3 id="函数声明"><a href="#函数声明" class="headerlink" title="函数声明"></a>函数声明</h3><ul><li>解构也能用于函数声明。 看以下简单的情况<figure class="highlight typescript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">type</span> C = &#123; a: <span class="built_in">string</span>, b?: <span class="built_in">number</span> &#125;</span><br><span class="line"><span class="function"><span class="keyword">function</span> <span class="title">f</span>(<span class="params">&#123; a, b &#125;: C</span>): <span class="title">void</span> </span>&#123;</span><br><span class="line">    </span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure></li></ul><hr><ul><li>可以使用结构的同时使用默认值</li><li>通常情况下更多的是指定默认值，解构默认值有些棘手。 首先，你需要在默认值之前设置其格式</li><li>官网的例子并不能实现<figure class="highlight typescript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line">function f(&#123; a="", b=0 &#125; : &#123;a?:String,b?:Number&#125;): void &#123;</span><br><span class="line">    <span class="comment">// ...</span></span><br><span class="line">    <span class="built_in">console</span>.log(a);</span><br><span class="line">    <span class="built_in">console</span>.log(b);</span><br><span class="line">&#125;</span><br><span class="line">f(&#123;&#125;);</span><br></pre></td></tr></table></figure></li></ul><h2 id="展开"><a href="#展开" class="headerlink" title="展开"></a>展开</h2><ul><li>展开操作符正与解构相反。 它允许你将一个数组展开为另一个数组，或将一个对象展开为另一个对象</li><li>这样我们合并数组/对象就方便了很多</li><li>但是展开对，对象的缺陷还是有的</li><li>两个对象展开相同还是对象，相同的属性就会覆盖<figure class="highlight typescript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">// 合并数组</span></span><br><span class="line"><span class="keyword">let</span> first = [<span class="number">1</span>, <span class="number">2</span>];</span><br><span class="line"><span class="keyword">let</span> second = [<span class="number">3</span>, <span class="number">4</span>];</span><br><span class="line"><span class="keyword">let</span> bothPlus = [<span class="number">0</span>, ...first, ...second, <span class="number">5</span>];</span><br><span class="line"></span><br><span class="line"><span class="comment">// 合并对象</span></span><br><span class="line"><span class="keyword">let</span> defaults = &#123; food: <span class="string">"spicy"</span>, price: <span class="string">"$$"</span>, ambiance: <span class="string">"noisy"</span> &#125;;</span><br><span class="line"><span class="keyword">let</span> search = &#123; ...defaults, food: <span class="string">"rich"</span> &#125;;</span><br></pre></td></tr></table></figure></li></ul><hr><ul><li>对象展开还有其它一些意想不到的限制。 首先，它仅包含对象 自身的可枚举属性。 大体上是说当你展开一个对象实例时，你会丢失其方法：<figure class="highlight typescript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">class</span> C &#123;</span><br><span class="line">  p = <span class="number">12</span>;</span><br><span class="line">  m() &#123;</span><br><span class="line">  &#125;</span><br><span class="line">&#125;</span><br><span class="line"><span class="keyword">let</span> c = <span class="keyword">new</span> C();</span><br><span class="line"><span class="keyword">let</span> clone = &#123; ...c &#125;;</span><br><span class="line">clone.p; <span class="comment">// ok</span></span><br><span class="line">clone.m(); <span class="comment">// error!</span></span><br></pre></td></tr></table></figure></li></ul><h1 id="后记"><a href="#后记" class="headerlink" title="后记"></a>后记</h1><ul><li>这个就是我学习Ts的第二天的笔记，欢迎更多的同行大哥指导交流</li><li><a href="https://yhf7.github.io/" target="_blank" rel="noopener">欢迎进入我的博客</a>：<a href="https://yhf7.github.io/" target="_blank" rel="noopener">https://yhf7.github.io/</a></li><li>如果有什么侵权的话，请及时添加小编微信以及qq也可以来告诉小编（905477376微信qq通用），谢谢！</li></ul>]]></content>
    
    <summary type="html">
    
      
      
        &lt;link rel=&quot;stylesheet&quot; class=&quot;aplayer-secondary-style-marker&quot; href=&quot;/assets/css/APlayer.min.css&quot;&gt;&lt;script src=&quot;/assets/js/APlayer.min.js&quot; cla
      
    
    </summary>
    
      <category term="TypeScript" scheme="http://yoursite.com/categories/TypeScript/"/>
    
    
      <category term="TypeScript 笔记" scheme="http://yoursite.com/tags/TypeScript-%E7%AC%94%E8%AE%B0/"/>
    
  </entry>
  
  <entry>
    <title>ES6 以上的个人遇到的知识</title>
    <link href="http://yoursite.com/2019/03/07/ES6+%E7%9A%84%E7%94%A8%E6%B3%95%E7%AC%94%E8%AE%B0/"/>
    <id>http://yoursite.com/2019/03/07/ES6+的用法笔记/</id>
    <published>2019-03-07T06:43:03.234Z</published>
    <updated>2019-03-07T06:57:07.877Z</updated>
    
    <content type="html"><![CDATA[<link rel="stylesheet" class="aplayer-secondary-style-marker" href="/assets/css/APlayer.min.css"><script src="/assets/js/APlayer.min.js" class="aplayer-secondary-script-marker"></script><h1 id="…-数组-对象的扩展"><a href="#…-数组-对象的扩展" class="headerlink" title="… 数组/对象的扩展"></a>… 数组/对象的扩展</h1><ul><li>在我一开始看到…后面带参数是我写vue中时使用vuex引入数据的时候使用的</li><li>在一开始我只是以为它只是vuex引入数据的写法</li><li>但是在我再次遇到的时候我对这个表示很疑惑，所以就问人</li><li>通过查阅资料和他人的告知我知道了这个是数组/对象的扩展是es6以上的知识</li><li>我就去查阅了es6+的资料并知道了是着么的一个东西</li><li>相当于把整个对象搬迁过来本地一样</li></ul><ol><li><p>对象 (分开放test.js)</p><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">var</span> test = &#123;</span><br><span class="line">    test1 (e) &#123;</span><br><span class="line">        <span class="built_in">console</span>.log(e);</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="keyword">export</span> &#123;test&#125;</span><br></pre></td></tr></table></figure></li><li><p>引入方法</p><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">import</span> &#123;test&#125;  <span class="keyword">from</span> <span class="string">'./test.js'</span></span><br><span class="line"></span><br><span class="line"><span class="comment">// 小程序中使用</span></span><br><span class="line">Page(&#123;</span><br><span class="line">  <span class="comment">// 函数的扩展 es6+  等于new一个类</span></span><br><span class="line">  ...detailsTpl,</span><br><span class="line"></span><br><span class="line"></span><br><span class="line">  test() &#123;</span><br><span class="line">      <span class="comment">// 在内部就可以直接用this来使用，相当于把整个函数搬迁过来了</span></span><br><span class="line">      <span class="keyword">this</span>.test1(<span class="string">'测试'</span>);</span><br><span class="line">  &#125;</span><br><span class="line"></span><br><span class="line">&#125;)</span><br></pre></td></tr></table></figure></li></ol>]]></content>
    
    <summary type="html">
    
      
      
        &lt;link rel=&quot;stylesheet&quot; class=&quot;aplayer-secondary-style-marker&quot; href=&quot;/assets/css/APlayer.min.css&quot;&gt;&lt;script src=&quot;/assets/js/APlayer.min.js&quot; cla
      
    
    </summary>
    
      <category term="JavaScript" scheme="http://yoursite.com/categories/JavaScript/"/>
    
    
      <category term="js笔记" scheme="http://yoursite.com/tags/js%E7%AC%94%E8%AE%B0/"/>
    
  </entry>
  
  <entry>
    <title>js复习笔记（学校课程）</title>
    <link href="http://yoursite.com/2019/03/07/%E5%A4%A7%E4%BA%8C%E4%B8%8Bjs%E5%A4%8D%E4%B9%A0%E7%AC%94%E8%AE%B0/"/>
    <id>http://yoursite.com/2019/03/07/大二下js复习笔记/</id>
    <published>2019-03-07T04:59:33.941Z</published>
    <updated>2019-03-07T06:42:30.578Z</updated>
    
    <content type="html"><![CDATA[<link rel="stylesheet" class="aplayer-secondary-style-marker" href="/assets/css/APlayer.min.css"><script src="/assets/js/APlayer.min.js" class="aplayer-secondary-script-marker"></script><p>今天内容：<br>1、js的内置对象<br>2、js的函数<br>3、js的事件<br>4、js的BOM<br>5、js的DOM</p><p>一、js的内置对象<br>1、Number对象<br>创建方式：<br>“var myNum=new Number(value);<br>var myNum=Number(value);”<br>常用方法：<br>toString():把数字转换为字符串，使用指定的基数。<br>valueOf():返回一个 Number 对象的基本数字值。<br>2、Boolean对象<br>创建方式：<br>“var bool = new Boolean(value);<br>var bool = Boolean(value);”<br>常用方法：<br>toString():把逻辑值转换为字符串，并返回结果。<br>valueOf():返回 Boolean 对象的原始值。</p><p>3、String对象<br>创建方式：<br>“var str = new String(s);<br>var str = String(s);”<br>属性：length:字符串的长度<br>常用方法：<br>indexOf():检索字符串。<br>lastIndexOf():从后向前搜索字符串。<br>split():把字符串分割为字符串数组。<br>substring():提取字符串中两个指定的索引号之间的字符。包括头不包括尾<br>substr():从起始索引号提取字符串中指定数目的字符。<br>toUpperCase():把字符串转换为大写。<br>valueOf():返回某个字符串对象的原始值。</p><p>4、Date对象<br>创建方式：<br>var myDate=new Date();     Date 对象会自动把当前日期和时间保存为其初始值。<br>var myDate=new Date(毫秒值);     1970年1月1日到先目前的时间点的毫秒<br>常见方法：<br>getFullYear():从 Date 对象以四位数字返回年份。<br>getMonth():从 Date 对象返回月份 (0 ~ 11)。<br>getDate():从 Date 对象返回一个月中的某一天 (1 ~ 31)。<br>getDay():从 Date 对象返回一周中的某一天 (0 ~ 6)。<br>getTime():返回 1970 年 1 月 1 日至今的毫秒数。<br>toString():把 Date 对象转换为字符串。<br>toLocaleString():根据本地时间格式，把 Date 对象转换为字符串。</p><p>5、Math对象<br>“Math 对象并不像 Date 和 String 那样是对象的类，因此没有构造函数 Math()，像 Math.sin() 这样的<br>函数只是函数，不是某个对象的方法。您无需创建它，通过把 Math 作为对象使用就可以调用其所有属<br>性和方法。”</p><p>常用的方法：<br>ceil():对数进行上舍入。<br>floor():对数进行下舍入。<br>round():把数四舍五入为最接近的整数。<br>random():返回 0 ~ 1 之间的随机数。</p><p>6、RegExp对象<br>对象的方式：var reg = new RegExp(pattern);<br>直接量语法：var reg = /pattern/;<br>注意：正则规则一般是^开始 以$结束<br>正则规则：<br>[0-9]:代表0-9的数字<br>[A-Z]:代表大写字母<br>[a-z]:代表小写<br>[A-z]:大小写都行<br>\d：代表数字        \D:非数字<br>\w:代表单词         \W:非单词<br>{n}:n个<br>{n,m}:n到m个<br>n+:1次或多次<br>n?:0次或一次<br>n*:0次或多次</p><p>常用方法：<br>test(待校验的字符串)</p><p>需求：校验一个邮箱：<a href="mailto:haohao_827@163.com" target="_blank" rel="noopener">haohao_827@163.com</a></p><p>7、Array对象<br>“var arr = new Array();<br>var arr = new Array(size);<br>var arr = new Array(element0, element1, …, elementn);<br>var arr = [element0, element1, …, elementn];”<br>属性：length:数组的长度<br>常用方法：<br>join();把数组的所有元素放入一个字符串。元素通过指定的分隔符进行分隔。<br>pop():删除并返回数组的最后一个元素<br>reverse():颠倒数组中元素的顺序。<br>sort():对数组的元素进行排序   按照字典顺序排序</p><p>二、js的函数<br>1、自定义函数<br>(1) 普通函数<br>语法：function 函数名称(参数列表){函数体}</p><p>(2) 匿名函数<br>语法：function(参数列表){函数体}</p><p>(3) 对象函数<br>语法：new Function(“参数1”，”参数2”，…”参数n”，”函数体”);<br>注意：函数体必须写在最后，参数和函数体需要字符串的形式</p><p>参数列表:<br>NaN:not a number 不是一个数字<br>arguments对象：数组对象，负责收集实参</p><p>返回值：<br>返回值不需要在定义函数的时候声明<br>函数需要返回值只需在函数体中使用return进行返回，return后的代码不执行</p><p>2、js的全局函数<br>(1) 编码和解码<br>encodeURI():把字符串编码为 URI。<br>decodeURI():解码某个编码的 URI。<br>encodeURIcomponent():把为 URI 组件进行编码。<br>decodeURIcomponent()：把为 URI 组件进行解码。<br>escape():编码字符串<br>unescape():解码字符串<br>需求：对url进行编码 <a href="http://www.baidu.com?name=张&amp;pass=123" target="_blank" rel="noopener">http://www.baidu.com?name=张&amp;pass=123</a><br>区别：对一些特殊字符编码的范围不同<br><a href="http://www.baidu.com?name=%E5%BC%A0&amp;pass=123" target="_blank" rel="noopener">http://www.baidu.com?name=%E5%BC%A0&amp;pass=123</a><br>http%3A%2F%2F<a href="http://www.baidu.com%3Fname%3D%E5%BC%A0%26pass%3D123：适合编码提交的参数部分" target="_blank" rel="noopener">www.baidu.com%3Fname%3D%E5%BC%A0%26pass%3D123：适合编码提交的参数部分</a><br>http%3A//<a href="http://www.baidu.com%3Fname%3D%u5F20%26pass%3D123：适合编码单独的字符串" target="_blank" rel="noopener">www.baidu.com%3Fname%3D%u5F20%26pass%3D123：适合编码单独的字符串</a><br>(2) 强制转换<br>Boolean()<br>String()<br>Number()<br>(3) 转成数字<br>parseFloat():解析一个字符串并返回一个浮点数。<br>parseInt():解析一个字符串并返回一个整数。<br>(4) eval()函数<br>把字符串作为脚本代码来执行。</p><p>三、js的事件<br>事件、事件源、响应行为</p><p>1、常用事件<br>onchange事件</p><p>onfocus()事件和onblur()事件</p><p>onmouseover事件和onmouseout事件onload事件<br>2、事件与事件源的绑定方式<br>(1) 事件与响应行为与事件源绑定(2)事件与事件源绑定 响应行为使用函数封装<br>this关键字：代表本事件源对象<br>(3) 事件、响应行为  与事件源完全分离3、阻止事件的默认行为<br>W3C的标准：e.preventDefault()<br>IE标准：window.event.returnValue = false;<br>4、阻止事件的传播<br>W3C的标准：e.stopPropagation();<br>IE标准：window.event.cancelBubble = true;<br>四、js的BOM<br>1、window对象<br>(1) 弹框的方法<br>提示框：alert(确认信息);<br>确认框：confirm(确认信息);<br>存在返回值：如果点击确认返回true  点击取消 返回false<br>输入框：prompt(输入提示信息)<br>存在返回值：如果输入内容点击确认返回输入的内容 点击取消返回null(2) open()方法<br>作用就是在js中使用此方法打开新页面 参数是url地址(3) 定时器方法<br>指定的延时时间后执行一定行为<br>setTimeout(函数对象，毫秒值)</p><p>var timer = setInterval(函数对象，毫秒值)<br>clearInterval(timer);</p><p>2、location对象<br>location.href=”url路径”;<br>location.href = “<a href="http://www.baidu.com&quot;" target="_blank" rel="noopener">http://www.baidu.com&quot;</a>;</p><p>需求：实现页面注册成功后的跳转主页<br>技术：location.href+setInterval</p><p>3、history对象<br>history.back();返回上一页<br>history.forward():进入下一页<br>history.go();跳转到哪一页</p><p>五、DOM对象<br>document.getElementById(“id属性值”);<br>document.getElementsByTagName(“标签名称”);<br>document.getElementsByName(“name属性值”);<br>innerHTML：获取某个元素中的html代码</p>]]></content>
    
    <summary type="html">
    
      
      
        &lt;link rel=&quot;stylesheet&quot; class=&quot;aplayer-secondary-style-marker&quot; href=&quot;/assets/css/APlayer.min.css&quot;&gt;&lt;script src=&quot;/assets/js/APlayer.min.js&quot; cla
      
    
    </summary>
    
      <category term="JavaScript" scheme="http://yoursite.com/categories/JavaScript/"/>
    
    
      <category term="js笔记" scheme="http://yoursite.com/tags/js%E7%AC%94%E8%AE%B0/"/>
    
  </entry>
  
  <entry>
    <title>Android 学习笔记（学校课程）</title>
    <link href="http://yoursite.com/2019/03/07/%E5%A4%A7%E4%BA%8C%E4%B8%8BAndroid%E5%BC%80%E5%8F%91%E7%AC%94%E8%AE%B0/"/>
    <id>http://yoursite.com/2019/03/07/大二下Android开发笔记/</id>
    <published>2019-03-07T03:33:56.141Z</published>
    <updated>2019-03-07T04:58:48.449Z</updated>
    
    <content type="html"><![CDATA[<link rel="stylesheet" class="aplayer-secondary-style-marker" href="/assets/css/APlayer.min.css"><script src="/assets/js/APlayer.min.js" class="aplayer-secondary-script-marker"></script><h1 id="组件"><a href="#组件" class="headerlink" title="组件"></a>组件</h1><h2 id="Button"><a href="#Button" class="headerlink" title="Button"></a>Button</h2><ul><li>text 文本</li><li>textSize 大小</li><li>dp 为单位</li><li>background 背景色<figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line">&lt;Button</span><br><span class="line">        android:layout_width=<span class="string">"wrap_content"</span></span><br><span class="line">        android:layout_height=<span class="string">"wrap_content"</span></span><br><span class="line">        android:textSize=<span class="string">"30dp"</span></span><br><span class="line">        android:background=<span class="string">"#00f"</span></span><br><span class="line">        android:text=<span class="string">"2"</span>/&gt;</span><br></pre></td></tr></table></figure></li></ul><h1 id="布局-布局常用属性"><a href="#布局-布局常用属性" class="headerlink" title="布局/布局常用属性"></a>布局/布局常用属性</h1><h2 id="LinearLayout-线性布局"><a href="#LinearLayout-线性布局" class="headerlink" title="LinearLayout 线性布局"></a>LinearLayout 线性布局</h2><h3 id="布局排列方式"><a href="#布局排列方式" class="headerlink" title="布局排列方式"></a>布局排列方式</h3><ul><li>垂直布局 orientation = “vertical”</li><li>水平布局 orientation = “horizontal”</li></ul><figure class="highlight"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line">&lt;LinearLayout</span><br><span class="line">        <span class="comment">// 垂直布局</span></span><br><span class="line">        android:orientation=<span class="string">"horizontal"</span>&gt;</span><br><span class="line">&lt;/LinearLayout&gt;</span><br></pre></td></tr></table></figure><h3 id="大小格式"><a href="#大小格式" class="headerlink" title="大小格式"></a>大小格式</h3><ul><li>充满父类 match_parent </li><li>根据内容改变 wrap_content<figure class="highlight"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><span class="line">&lt;LinearLayout</span><br><span class="line">        <span class="comment">// 设置宽高均为充满父类</span></span><br><span class="line">        android:layout_width=<span class="string">"match_parent"</span></span><br><span class="line">        android:layout_height=<span class="string">"match_parent"</span></span><br><span class="line">        <span class="comment">// 垂直布局</span></span><br><span class="line">        android:orientation=<span class="string">"horizontal"</span>&gt;</span><br><span class="line">&lt;/LinearLayout&gt;</span><br></pre></td></tr></table></figure></li></ul><h3 id="权重"><a href="#权重" class="headerlink" title="权重"></a>权重</h3><ul><li>android:layout_weight=”1”</li></ul><h2 id="RelativeLayout-相对布局"><a href="#RelativeLayout-相对布局" class="headerlink" title="RelativeLayout 相对布局"></a>RelativeLayout 相对布局</h2><ul><li>是通过相对定位的方式让控件出现在布局任意位置；</li><li>在相对布局中如果不指定控件摆放的位置，那么控件都会被默认放在RelativeLayout的左上角。</li><li>因此要先指定第一个控件的位置，其他控件为该位置的相对位置； </li><li>RelativeLayout属性： (使用相对布局属性需要先指定控件的id，其他控件根据该控件的id，来确定相对于该控件的相对位置)</li><li>第一个控件默认在布局左上角，如果指定放在第一个控件的左边或者上面，会看不到第二个控件</li></ul><figure class="highlight"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line">&lt;RelativeLayout</span><br><span class="line">        <span class="comment">// 设置宽高均为充满父类</span></span><br><span class="line">        android:layout_width=<span class="string">"match_parent"</span></span><br><span class="line">        android:layout_height=<span class="string">"match_parent"</span>&gt;</span><br><span class="line">        ......</span><br><span class="line">&lt;/RelativeLayout&gt;</span><br></pre></td></tr></table></figure><h3 id="与兄弟控件的边缘对齐：（值为id）-id"><a href="#与兄弟控件的边缘对齐：（值为id）-id" class="headerlink" title="与兄弟控件的边缘对齐：（值为id）@id/"></a>与兄弟控件的边缘对齐：（值为id）@id/</h3><p>android:layout_below 将该控件的上边缘对齐指定控件的下边缘<br>android:layout_above 将该控件的下边缘对齐指定控件的上边缘<br>android:layout_toLeftOf 将该控件的右边缘对齐指定控件的左边缘</p><h2 id="android-layout-toRightOf-将该控件的左边缘对齐指定控件的右边缘"><a href="#android-layout-toRightOf-将该控件的左边缘对齐指定控件的右边缘" class="headerlink" title="android:layout_toRightOf 将该控件的左边缘对齐指定控件的右边缘"></a>android:layout_toRightOf 将该控件的左边缘对齐指定控件的右边缘</h2><p>android:layout_alignRight 将此控件的右边缘与给定ID的控件右边缘对齐。<br>android:layout_alignLeft    将此控件的左边缘与给定ID的控件左边缘对齐。<br>android:layout_alignTop 将此控件的上边缘与给定ID的控件上边缘对齐。<br>android:layout_alignBottom 将此控件的底部边缘与给定ID的控件底部边缘对齐。</p><h3 id="与父控件的边缘对齐：-（属性值为true，false）"><a href="#与父控件的边缘对齐：-（属性值为true，false）" class="headerlink" title="与父控件的边缘对齐： （属性值为true，false）"></a>与父控件的边缘对齐： （属性值为true，false）</h3><ul><li>（可以同时使用两个属性，如android:layout_alignParentRight ?android:layout_alignParentBottom 表示将该控件放到父控件的右下角）<br>android:layout_alignParentLeft  将此控件的左边缘与父容器的左边缘匹配。<br>android:layout_alignParentRight 将此控件的右边缘与父容器的右边缘匹配。<br>android:layout_alignParentTop 将此控件的上边缘与父容器的上边缘匹配。<br>android:layout_alignParentBottom 将此控件的底部边缘与父容器的底部边缘匹配。</li></ul><h3 id="对齐置父控件的中间：-属性值为true，false"><a href="#对齐置父控件的中间：-属性值为true，false" class="headerlink" title="对齐置父控件的中间： (属性值为true，false)"></a>对齐置父控件的中间： (属性值为true，false)</h3><p>android:layout_centerInParent   放置到父控件的正中间<br>android:layout_centerHorizontal    放置到父控件的水平中间</p><h2 id="android-layout-centerVertical-放置到父控件的垂直中间"><a href="#android-layout-centerVertical-放置到父控件的垂直中间" class="headerlink" title="android:layout_centerVertical  放置到父控件的垂直中间"></a>android:layout_centerVertical  放置到父控件的垂直中间</h2><p>android:layout_alignStart  对齐置兄弟控件的起始位置<br>android:layout_alignEnd  对齐置兄弟控件的末尾位置<br>android:layout_alignParentStart  对齐置父控件的起始位置<br>android:layout_alignParentEnd  对齐置父控件的末尾位置  </p><h3 id="基准线"><a href="#基准线" class="headerlink" title="基准线"></a>基准线</h3><p>android:layout_alignBaseline   对齐基准线  (值为id）</p><h3 id="控件之间的距离设置"><a href="#控件之间的距离设置" class="headerlink" title="控件之间的距离设置"></a>控件之间的距离设置</h3><p>android:padding:指定控件中的内容与到此控件的四边缘的距离</p><h2 id="android-layout-margin-设置此控件的四边缘与其他控件的距离"><a href="#android-layout-margin-设置此控件的四边缘与其他控件的距离" class="headerlink" title="android:layout_margin:设置此控件的四边缘与其他控件的距离"></a>android:layout_margin:设置此控件的四边缘与其他控件的距离</h2><p>android:paddingBottom:设置控件内容与控件下边缘的距离<br>android:paddingTop:设置控件内容与控件上边缘的距离<br>android:paddingLeft:设置控件内容与控件左边缘的距离</p><h2 id="android-paddingRight-设置控件内容与控件右边缘的距离"><a href="#android-paddingRight-设置控件内容与控件右边缘的距离" class="headerlink" title="android:paddingRight:设置控件内容与控件右边缘的距离"></a>android:paddingRight:设置控件内容与控件右边缘的距离</h2><p>android:layout_marginBottom:设置此控件的下边缘与其他控件的距离<br>android:layout_marginTop:设置此控件的上边缘与其他控件的距离<br>android:layout_marginLeft:设置此控件的左边缘与其他控件的距离<br>android:layout_marginRight:设置此控件的右边缘与其他控件的距离</p><h2 id="FrameLayout-帧布局"><a href="#FrameLayout-帧布局" class="headerlink" title="FrameLayout 帧布局"></a>FrameLayout 帧布局</h2><p>android:layout_gravity:控制位置<br>android:foreground:设置改帧布局容器的前景图像<br>android:foregroundGravity:设置前景图像显示的位置</p>]]></content>
    
    <summary type="html">
    
      
      
        &lt;link rel=&quot;stylesheet&quot; class=&quot;aplayer-secondary-style-marker&quot; href=&quot;/assets/css/APlayer.min.css&quot;&gt;&lt;script src=&quot;/assets/js/APlayer.min.js&quot; cla
      
    
    </summary>
    
      <category term="Android" scheme="http://yoursite.com/categories/Android/"/>
    
    
      <category term="Android 笔记" scheme="http://yoursite.com/tags/Android-%E7%AC%94%E8%AE%B0/"/>
    
  </entry>
  
  <entry>
    <title>微信小程序前端笔记</title>
    <link href="http://yoursite.com/2019/03/03/%E5%BE%AE%E4%BF%A1%E5%B0%8F%E7%A8%8B%E5%BA%8F%E5%AE%9E%E6%88%98%E7%AC%94%E8%AE%B0/"/>
    <id>http://yoursite.com/2019/03/03/微信小程序实战笔记/</id>
    <published>2019-03-03T09:19:41.516Z</published>
    <updated>2019-03-03T09:20:13.795Z</updated>
    
    <content type="html"><![CDATA[<link rel="stylesheet" class="aplayer-secondary-style-marker" href="/assets/css/APlayer.min.css"><script src="/assets/js/APlayer.min.js" class="aplayer-secondary-script-marker"></script><h1 id="小程序中ES6类"><a href="#小程序中ES6类" class="headerlink" title="小程序中ES6类"></a>小程序中ES6类</h1><ul><li>在小程序中我们也是可以使用ES6的语法去是实现我们的业务逻辑</li><li>在ES6中新增了，类方法那我们就来一起用一样吧</li><li>实际与后端的类没有区别</li></ul><ol><li><p>创建类</p><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">// class 构建一个类</span></span><br><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">Home</span></span>&#123;</span><br><span class="line">    <span class="comment">// 类的构造函数</span></span><br><span class="line">  <span class="keyword">constructor</span> () &#123;</span><br><span class="line"></span><br><span class="line">  &#125;</span><br><span class="line"></span><br><span class="line">    <span class="comment">// 自定义的类内部方法</span></span><br><span class="line">  getBannerData () &#123;</span><br><span class="line">      ...</span><br><span class="line">  &#125;</span><br><span class="line"></span><br><span class="line">&#125;</span><br><span class="line"><span class="comment">//外部想要使用这个类就需要向export抛出这个类</span></span><br><span class="line"><span class="keyword">export</span> &#123;Home&#125;;</span><br></pre></td></tr></table></figure></li><li><p>使用类</p><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">// 1.首先引入这个类 home-mode.js这个是我的类文件名</span></span><br><span class="line"><span class="keyword">import</span> &#123;Home&#125; <span class="keyword">from</span> <span class="string">'home-model.js'</span>;</span><br><span class="line"><span class="comment">// 2.实例化 home-model 的home类</span></span><br><span class="line"><span class="keyword">var</span> home = <span class="keyword">new</span> Home();</span><br><span class="line"><span class="comment">// 3.调用</span></span><br><span class="line">Page(&#123;</span><br><span class="line">    onLoad: <span class="function"><span class="keyword">function</span> (<span class="params"></span>) </span>&#123;</span><br><span class="line">        <span class="comment">// 调用方法</span></span><br><span class="line">        home.getBannerData(<span class="function"><span class="params">()</span> =&gt;</span> &#123;</span><br><span class="line">            ....</span><br><span class="line">        &#125;)</span><br><span class="line">    &#125;</span><br><span class="line">&#125;)</span><br></pre></td></tr></table></figure></li></ol><h1 id="小程序中ES6类继承"><a href="#小程序中ES6类继承" class="headerlink" title="小程序中ES6类继承"></a>小程序中ES6类继承</h1><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">// 1.引入类</span></span><br><span class="line"><span class="keyword">import</span> &#123;Base&#125; <span class="keyword">from</span> <span class="string">'../../utils/base.js'</span></span><br><span class="line"></span><br><span class="line"><span class="comment">// 2.继承类</span></span><br><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">Home</span> <span class="keyword">extends</span> <span class="title">Base</span> </span>&#123;</span><br><span class="line"></span><br><span class="line">  <span class="keyword">constructor</span> () &#123;</span><br><span class="line">    <span class="comment">// 有构造函数的时候必须调用基类的构造函数</span></span><br><span class="line">    <span class="keyword">super</span>();</span><br><span class="line">  &#125;</span><br><span class="line"></span><br><span class="line">  <span class="comment">// 3. 调用基类方法</span></span><br><span class="line">  getBannerData () &#123;</span><br><span class="line">      <span class="comment">// 直接this加方法名就可以了</span></span><br><span class="line">      <span class="keyword">this</span>.request()</span><br><span class="line">  &#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="keyword">export</span> &#123;Home&#125;;</span><br></pre></td></tr></table></figure><h1 id="requert请求封装-（如何使用上面说了）"><a href="#requert请求封装-（如何使用上面说了）" class="headerlink" title="requert请求封装 （如何使用上面说了）"></a>requert请求封装 （如何使用上面说了）</h1><ol><li>在我们调用后端的api的时候我们会大量的去请求后端的Api，这样会使得我们前端的业务逻辑不断的重复</li><li>我们使用面向对象的方式对请求函数做了封装</li><li>这样我们代码的复用性更高，代码的重复性更少</li><li>封装这种复用性很高的函数时我们都要创建基类使得让其他的类去继承使用<figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">// 1. utils/base.js  创建utils 新疆base基类文件</span></span><br><span class="line"><span class="comment">// 2. 新建 config.js 用来储存公共数据或配置信息</span></span><br><span class="line"></span><br><span class="line"><span class="comment">// 3. 引入配置类</span></span><br><span class="line"><span class="keyword">import</span> &#123;Config&#125; <span class="keyword">from</span> <span class="string">'config.js'</span></span><br><span class="line"></span><br><span class="line"><span class="comment">// 2. 创建基类Base</span></span><br><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">Base</span> </span>&#123;</span><br><span class="line">    <span class="comment">// 构造函数</span></span><br><span class="line">  <span class="keyword">constructor</span>() &#123;</span><br><span class="line">      <span class="comment">// 获取配置在信息类的 公共url信息</span></span><br><span class="line">    <span class="keyword">this</span>.baseRequestUrl = Config.restUrl;</span><br><span class="line">  &#125;</span><br><span class="line"></span><br><span class="line">  <span class="comment">/**</span></span><br><span class="line"><span class="comment">   * 请求封装</span></span><br><span class="line"><span class="comment">   */</span></span><br><span class="line">  request (params) &#123;</span><br><span class="line">    <span class="comment">// url内外拼接</span></span><br><span class="line">    <span class="keyword">var</span> url = <span class="keyword">this</span>.baseRequestUrl + params.url;</span><br><span class="line"></span><br><span class="line">    <span class="comment">// 判断没有传获取方式默认为get</span></span><br><span class="line">    <span class="keyword">if</span> (!params.type) &#123;</span><br><span class="line">      params.type = <span class="string">'GET'</span></span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="comment">// 调用微信请求api</span></span><br><span class="line">    wx.request(&#123;</span><br><span class="line">      url: url,</span><br><span class="line">      data: params.data,</span><br><span class="line">      method: params.type,</span><br><span class="line">      header: &#123;</span><br><span class="line">        <span class="string">'content-type'</span>:<span class="string">'application/json'</span>,</span><br><span class="line">        <span class="string">'token'</span>: wx.getStorageSync(<span class="string">'token'</span>)</span><br><span class="line">      &#125;,</span><br><span class="line">      success: <span class="function"><span class="params">res</span> =&gt;</span> &#123;</span><br><span class="line">        <span class="comment">// 判断函数，存在才调用</span></span><br><span class="line">        <span class="comment">// 返回信息的函数回调</span></span><br><span class="line">        params.sCallback&amp;&amp;params.sCallback(res.data);</span><br><span class="line">      &#125;,</span><br><span class="line">      fail: <span class="function"><span class="params">err</span> =&gt;</span> &#123;</span><br><span class="line">        <span class="built_in">console</span>.log(err);</span><br><span class="line">      &#125;</span><br><span class="line">    &#125;)</span><br><span class="line">  &#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="keyword">export</span> &#123;Base&#125;;</span><br></pre></td></tr></table></figure></li></ol><h1 id="小程序自定义模版"><a href="#小程序自定义模版" class="headerlink" title="小程序自定义模版"></a>小程序自定义模版</h1><ul><li>在我们的页面开发中也会存在很多的页面会有复用</li><li>那我们定义一个模块模版就更容易让我们使用</li></ul><ol><li><p>创建模版</p><figure class="highlight html"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><span class="line">// 模版</span><br><span class="line">// 为模版加name 唯一标示用来调用的时候用的，其实内部和写html没有区别</span><br><span class="line"><span class="tag">&lt;<span class="name">template</span> <span class="attr">name</span>=<span class="string">"products"</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">view</span> <span class="attr">class</span>=<span class="string">"products-box"</span>&gt;</span></span><br><span class="line">        </span><br><span class="line">    <span class="tag">&lt;/<span class="name">view</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">template</span>&gt;</span></span><br></pre></td></tr></table></figure></li><li><p>调用模版</p><figure class="highlight html"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">&lt;!-- 引入模版文件 --&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">import</span> <span class="attr">src</span>=<span class="string">"../tpls/products/products-tpl.wxml"</span> /&gt;</span></span><br><span class="line"></span><br><span class="line"><span class="tag">&lt;<span class="name">view</span>&gt;</span></span><br><span class="line">    <span class="comment">&lt;!-- 使用模版和定义一样只是吧name改为is就可以了 --&gt;</span></span><br><span class="line">    <span class="comment">&lt;!-- data给模版传递数据 --&gt;</span></span><br><span class="line">    <span class="comment">&lt;!-- 做一个对象传递过去使用起来会方便一点，方法名自定义 --&gt;</span></span><br><span class="line">    <span class="comment">&lt;!-- key为products 传递的值为productsArr --&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">template</span> <span class="attr">is</span>=<span class="string">"products"</span> <span class="attr">data</span>=<span class="string">"&#123;&#123;products:productsArr&#125;&#125;"</span>&gt;</span><span class="tag">&lt;/<span class="name">template</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">view</span>&gt;</span></span><br></pre></td></tr></table></figure></li></ol><h1 id="事件绑定、页面跳转、数据传输"><a href="#事件绑定、页面跳转、数据传输" class="headerlink" title="事件绑定、页面跳转、数据传输"></a>事件绑定、页面跳转、数据传输</h1><ul><li>小程序中的事件绑定就是 bindtap 后面带函数名</li><li>页面跳转 wx.navigateTo api调用</li><li>页面之间数据传输，可以同url传输</li></ul><ol><li><p>数据绑定，数据传输</p><figure class="highlight html"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br></pre></td><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">swiper</span> <span class="attr">indicator-dots</span>=<span class="string">"true"</span> <span class="attr">autoplay</span>=<span class="string">"true"</span> <span class="attr">class</span>=<span class="string">"swiper"</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">block</span> <span class="attr">wx:for</span>=<span class="string">"&#123;&#123;bannerArr&#125;&#125;"</span> <span class="attr">wx:key</span>=<span class="string">"index"</span>&gt;</span></span><br><span class="line">      <span class="comment">&lt;!-- 事件绑定，bindtap绑定事件，后面带方法名就可以了 --&gt;</span></span><br><span class="line">      <span class="comment">&lt;!-- 数据传输 data-开头后面自定义名字 --&gt;</span></span><br><span class="line">      <span class="comment">&lt;!-- 没有为什么微信规定的反正就这么干 --&gt;</span></span><br><span class="line">      <span class="tag">&lt;<span class="name">swiper-item</span> <span class="attr">data-id</span>=<span class="string">"&#123;&#123;item.key_word&#125;&#125;"</span> <span class="attr">bindtap</span>=<span class="string">"onProductsItemTap"</span>&gt;</span></span><br><span class="line">        .....</span><br><span class="line">      <span class="tag">&lt;/<span class="name">swiper-item</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;/<span class="name">block</span>&gt;</span></span><br><span class="line">  <span class="tag">&lt;/<span class="name">swiper</span>&gt;</span></span><br></pre></td></tr></table></figure></li><li><p>实现方法，跳转页面</p><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br></pre></td><td class="code"><pre><span class="line">Page(&#123;</span><br><span class="line">  <span class="comment">/**</span></span><br><span class="line"><span class="comment">   * banner点击事件</span></span><br><span class="line"><span class="comment">   * event自带的变量</span></span><br><span class="line"><span class="comment">   */</span></span><br><span class="line">  onProductsItemTap: <span class="function"><span class="keyword">function</span> (<span class="params">event</span>) </span>&#123;</span><br><span class="line">    <span class="comment">// id，存放在event.currentTarget.dataset.id中</span></span><br><span class="line">    <span class="comment">// 所有传过来的数据都在 event.currentTarget.dataset 中，传过来的时候是不带data的要记住</span></span><br><span class="line">    <span class="comment">// 这里我做了一个小小的封装提高复用性，放在了基类中</span></span><br><span class="line">    <span class="comment">//getDataSet(event,key) &#123;</span></span><br><span class="line">    <span class="comment">// return event.currentTarget.dataset[key];</span></span><br><span class="line">    <span class="comment">//&#125;</span></span><br><span class="line">    <span class="keyword">var</span> id = home.getDataSet(event,<span class="string">"id"</span>);</span><br><span class="line"></span><br><span class="line">    <span class="comment">// 调用接口</span></span><br><span class="line">    <span class="comment">// url就是你要跳转页面的地址</span></span><br><span class="line">    <span class="comment">// 可以通过url传送参数到页面中去</span></span><br><span class="line">    wx.navigateTo(&#123;</span><br><span class="line">      url: <span class="string">'../product/product?id='</span> + id,</span><br><span class="line">    &#125;);</span><br><span class="line">  &#125;</span><br><span class="line">&#125;)</span><br></pre></td></tr></table></figure></li><li><p>跳转的页面获取调整前传过来的数据</p><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br></pre></td><td class="code"><pre><span class="line">Page(&#123;</span><br><span class="line"></span><br><span class="line">  <span class="comment">/**</span></span><br><span class="line"><span class="comment">   * 生命周期函数--监听页面加载</span></span><br><span class="line"><span class="comment">   * 就是在跳转后的页面js文件中， onload 里面获取</span></span><br><span class="line"><span class="comment">   * options是自带的常量</span></span><br><span class="line"><span class="comment">   */</span></span><br><span class="line">  onLoad: <span class="function"><span class="keyword">function</span> (<span class="params">options</span>) </span>&#123;</span><br><span class="line">    <span class="comment">// 传的是命名什么就.什么</span></span><br><span class="line">    <span class="keyword">var</span> id = options.id;</span><br><span class="line">    <span class="built_in">console</span>.log(id)</span><br><span class="line">  &#125;</span><br><span class="line">&#125;)</span><br></pre></td></tr></table></figure></li></ol><h1 id="动态修改导航栏"><a href="#动态修改导航栏" class="headerlink" title="动态修改导航栏"></a>动态修改导航栏</h1><ul><li>wx.setNavigationBarTitle<figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">/**</span></span><br><span class="line"><span class="comment">   * 生命周期函数--监听页面初次渲染完成</span></span><br><span class="line"><span class="comment">   */</span></span><br><span class="line">  onReady: <span class="function"><span class="keyword">function</span> (<span class="params"></span>) </span>&#123;</span><br><span class="line">    <span class="comment">// 动态设置导航栏</span></span><br><span class="line">    wx.setNavigationBarTitle(&#123;</span><br><span class="line">      title: <span class="keyword">this</span>.data.name</span><br><span class="line">    &#125;)</span><br><span class="line">  &#125;</span><br></pre></td></tr></table></figure></li></ul><h1 id="拒绝频繁向服务器请求数据"><a href="#拒绝频繁向服务器请求数据" class="headerlink" title="拒绝频繁向服务器请求数据"></a>拒绝频繁向服务器请求数据</h1><ul><li>在我们请求数据时使用对象保存起来</li><li>再次请求前判断以请求的不让请求直接再对象中获取</li></ul><h1 id="触底刷新"><a href="#触底刷新" class="headerlink" title="触底刷新"></a>触底刷新</h1><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line">/**</span><br><span class="line">   * 页面拉到底部</span><br><span class="line">   */</span><br><span class="line">  onReachBottom: function () &#123;</span><br><span class="line">    </span><br><span class="line">  &#125;</span><br></pre></td></tr></table></figure>]]></content>
    
    <summary type="html">
    
      
      
        &lt;link rel=&quot;stylesheet&quot; class=&quot;aplayer-secondary-style-marker&quot; href=&quot;/assets/css/APlayer.min.css&quot;&gt;&lt;script src=&quot;/assets/js/APlayer.min.js&quot; cla
      
    
    </summary>
    
      <category term="小程序" scheme="http://yoursite.com/categories/%E5%B0%8F%E7%A8%8B%E5%BA%8F/"/>
    
    
      <category term="小程序 笔记" scheme="http://yoursite.com/tags/%E5%B0%8F%E7%A8%8B%E5%BA%8F-%E7%AC%94%E8%AE%B0/"/>
    
  </entry>
  
  <entry>
    <title>TypeScript 自学笔记1 基础类型</title>
    <link href="http://yoursite.com/2019/03/03/TypeScript%E7%AC%94%E8%AE%B01/"/>
    <id>http://yoursite.com/2019/03/03/TypeScript笔记1/</id>
    <published>2019-03-03T07:22:08.136Z</published>
    <updated>2019-03-11T01:48:10.371Z</updated>
    
    <content type="html"><![CDATA[<link rel="stylesheet" class="aplayer-secondary-style-marker" href="/assets/css/APlayer.min.css"><script src="/assets/js/APlayer.min.js" class="aplayer-secondary-script-marker"></script><h1 id="前言"><a href="#前言" class="headerlink" title="前言"></a>前言</h1><ul><li>现在Ts也是比较流行，想自学一下ts</li><li>所以就一起来学习一下，做下笔记吧</li></ul><h1 id="笔记目录"><a href="#笔记目录" class="headerlink" title="笔记目录"></a>笔记目录</h1><ol><li>安装ts</li><li>第一个ts</li><li>项目使用</li><li>五分钟上手ts</li><li>基础类型</li></ol><h1 id="安装ts"><a href="#安装ts" class="headerlink" title="安装ts"></a>安装ts</h1><ol><li><p>全局安装ts</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">$ sudo npm install -g typescript</span><br></pre></td></tr></table></figure></li><li><p>全局安装编译环境tsc</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">$ sudo npm install -g tsc</span><br></pre></td></tr></table></figure></li></ol><h1 id="第一个ts"><a href="#第一个ts" class="headerlink" title="第一个ts"></a>第一个ts</h1><ol><li>创建 greeter.ts文件</li><li><p>文件内部写一个greeter的函数</p><figure class="highlight typescript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line"><span class="function"><span class="keyword">function</span> <span class="title">greeter</span>(<span class="params">person</span>) </span>&#123;</span><br><span class="line">    <span class="keyword">return</span> <span class="string">"Hello, "</span> + person;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="keyword">let</span> user = <span class="string">"Jane User"</span>;</span><br><span class="line"><span class="built_in">console</span>.log(greeter(user))</span><br></pre></td></tr></table></figure></li><li><p>编译</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">$ sudo tsc greeter.ts</span><br></pre></td></tr></table></figure></li><li><p>运行查看</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">$ sudo node greeter.js</span><br></pre></td></tr></table></figure></li></ol><h1 id="项目使用"><a href="#项目使用" class="headerlink" title="项目使用"></a>项目使用</h1><ol><li>npm init -y 初始化</li><li><p>定义package</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line">&quot;build&quot; : &quot;tsc greeter.ts&quot;,</span><br><span class="line">    &quot;test&quot; : &quot;node greeter.js&quot;,</span><br><span class="line">    &quot;start&quot; : &quot;npm run build &amp;&amp; npm run test&quot;</span><br></pre></td></tr></table></figure></li><li><p>npm run start 就等于运行了全部</p></li></ol><h1 id="五分钟上手TypeScript"><a href="#五分钟上手TypeScript" class="headerlink" title="五分钟上手TypeScript"></a>五分钟上手TypeScript</h1><h2 id="定义类型实现规范化，类型注解"><a href="#定义类型实现规范化，类型注解" class="headerlink" title="定义类型实现规范化，类型注解"></a>定义类型实现规范化，类型注解</h2><figure class="highlight typescript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">// 给输入的类型添加约束</span></span><br><span class="line"><span class="comment">// 在函数参数接受的时候定义一个类型从而在编译时，把不真确的类型就会报错拦截下来</span></span><br><span class="line"><span class="comment">// 没有按照规定输入就会报错</span></span><br><span class="line"><span class="comment">// 从而更加的规范化</span></span><br><span class="line"><span class="function"><span class="keyword">function</span> <span class="title">greeter</span> (<span class="params">person:<span class="built_in">string</span></span>) </span>&#123;</span><br><span class="line">    <span class="keyword">return</span> <span class="string">"Hello, "</span> + person;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="keyword">let</span> user = <span class="string">"YHF"</span>;</span><br><span class="line"></span><br><span class="line"><span class="built_in">document</span>.body.innerHTML = greeter(user);</span><br></pre></td></tr></table></figure><h2 id="接口"><a href="#接口" class="headerlink" title="接口"></a>接口</h2><figure class="highlight typescript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">// 定义接口</span></span><br><span class="line"><span class="keyword">interface</span> Person &#123;</span><br><span class="line">    firstName: <span class="built_in">string</span>;</span><br><span class="line">    lastName: <span class="built_in">string</span>;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="comment">// 函数</span></span><br><span class="line"><span class="comment">// 在接收函数时接受 接受这个约束的接口</span></span><br><span class="line"><span class="function"><span class="keyword">function</span> <span class="title">greeter</span>(<span class="params">person: Person</span>) </span>&#123;</span><br><span class="line">    <span class="keyword">return</span> <span class="string">"Hello, "</span> + person.firstName + <span class="string">" "</span> + person.lastName;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="comment">// 输入时定义对象输入</span></span><br><span class="line"><span class="keyword">let</span> user = &#123; firstName: <span class="string">"Y"</span>, lastName: <span class="string">"HF"</span> &#125;;</span><br><span class="line"></span><br><span class="line"><span class="built_in">console</span>.log(greeter(user));</span><br></pre></td></tr></table></figure><h2 id="类"><a href="#类" class="headerlink" title="类"></a>类</h2><ul><li>可以使用类的方法对数据进行约束</li><li>在构造函数的参数上使用public等同于创建了同名的成员变量</li><li>在定义的时候也是可以使用数据约束的<figure class="highlight typescript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">class</span> Student &#123;</span><br><span class="line">    fullName: <span class="built_in">string</span>;</span><br><span class="line">    <span class="keyword">constructor</span>(<span class="params"><span class="keyword">public</span> firstName,<span class="keyword">public</span> middleInitial : <span class="built_in">number</span>,<span class="keyword">public</span> lastName</span>) &#123;</span><br><span class="line">        <span class="keyword">this</span>.fullName = firstName+ <span class="string">" "</span> + middleInitial.toString() + <span class="string">" "</span> + lastName; </span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="comment">// 等同于</span></span><br><span class="line"><span class="keyword">class</span> Student &#123;</span><br><span class="line">    fullName: <span class="built_in">string</span>;</span><br><span class="line">    firstName: <span class="built_in">string</span>;</span><br><span class="line">    middleInitial: <span class="built_in">number</span>;</span><br><span class="line">    lastName: <span class="built_in">string</span>;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure></li></ul><h2 id="在web如何使用ts"><a href="#在web如何使用ts" class="headerlink" title="在web如何使用ts"></a>在web如何使用ts</h2><ul><li>其实很简单就是调用ts打包出来的js文件就可以了</li></ul><h1 id="基础类型"><a href="#基础类型" class="headerlink" title="基础类型"></a>基础类型</h1><h2 id="布尔值"><a href="#布尔值" class="headerlink" title="布尔值"></a>布尔值</h2><figure class="highlight typescript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">// 参数约束 后面直接跟布尔值</span></span><br><span class="line"><span class="keyword">let</span> isDoneNew : <span class="built_in">boolean</span> = <span class="literal">true</span>;</span><br><span class="line"></span><br><span class="line"><span class="comment">// 像这样的写法是不严谨的是错误的 ，不能接受带有字符串的值</span></span><br><span class="line"><span class="keyword">let</span> isDoneString: <span class="built_in">boolean</span> = <span class="string">"true"</span>;</span><br></pre></td></tr></table></figure><h2 id="数字"><a href="#数字" class="headerlink" title="数字"></a>数字</h2><figure class="highlight typescript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">// 2,8,10,16进制都可以</span></span><br><span class="line"><span class="keyword">let</span> decLiteral: <span class="built_in">number</span> = <span class="number">6</span>;</span><br><span class="line"><span class="keyword">let</span> hexLiteral: <span class="built_in">number</span> = <span class="number">0xf00d</span>;</span><br><span class="line"><span class="keyword">let</span> binaryLiteral: <span class="built_in">number</span> = <span class="number">0b1010</span>;</span><br><span class="line"><span class="keyword">let</span> octalLiteral: <span class="built_in">number</span> = <span class="number">0o744</span>;</span><br></pre></td></tr></table></figure><h2 id="字符串"><a href="#字符串" class="headerlink" title="字符串"></a>字符串</h2><ul><li>单双引号无差别<figure class="highlight typescript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">let</span> name: <span class="built_in">string</span> = <span class="string">"bob"</span>;</span><br><span class="line">name = <span class="string">"smith"</span>;</span><br><span class="line"></span><br><span class="line"><span class="comment">// 也可以使用字符串模版，在开发的过程中也是常用的一种</span></span><br><span class="line"><span class="comment">// 与字符串拼接效果相同的</span></span><br><span class="line"><span class="keyword">let</span> name: <span class="built_in">string</span> = <span class="string">`Gene`</span>;</span><br><span class="line"><span class="keyword">let</span> age: <span class="built_in">number</span> = <span class="number">37</span>;</span><br><span class="line"><span class="keyword">let</span> sentence: <span class="built_in">string</span> = <span class="string">`Hello, my name is <span class="subst">$&#123; name &#125;</span>.</span></span><br><span class="line"><span class="string"></span></span><br><span class="line"><span class="string">I'll be <span class="subst">$&#123; age + 1 &#125;</span> years old next month.`</span>;</span><br></pre></td></tr></table></figure></li></ul><h2 id="数组"><a href="#数组" class="headerlink" title="数组"></a>数组</h2><ul><li>可以定义类型数组，和定义范型<figure class="highlight typescript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">// number数组</span></span><br><span class="line"><span class="keyword">let</span> list : <span class="built_in">number</span>[] = [<span class="number">1</span>,<span class="number">2</span>,<span class="number">3</span>];</span><br><span class="line"><span class="comment">// 范型</span></span><br><span class="line"><span class="keyword">let</span> list2: <span class="built_in">Array</span>&lt;<span class="built_in">number</span>&gt; = [<span class="number">1</span>, <span class="number">2</span>, <span class="number">3</span>];</span><br></pre></td></tr></table></figure></li></ul><h2 id="元组-其实还是数组"><a href="#元组-其实还是数组" class="headerlink" title="元组 (其实还是数组)"></a>元组 (其实还是数组)</h2><ul><li>这个东西看起来很人性化</li><li>在内部每一个位置你都可以定义类型，不相同的类型</li><li>但是需要插入数据时要一一的对应</li></ul><figure class="highlight typescript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">// 数组中定义每一个位的属性</span></span><br><span class="line"><span class="keyword">let</span> x: [<span class="built_in">string</span>, <span class="built_in">number</span>];</span><br><span class="line"><span class="comment">// 这样来赋值就是对的</span></span><br><span class="line">x = [<span class="string">'hello'</span>, <span class="number">10</span>]; <span class="comment">// OK</span></span><br><span class="line"><span class="comment">// 没有按相应的来就会报错</span></span><br><span class="line">x = [<span class="number">10</span>, <span class="string">'hello'</span>]; <span class="comment">// Error</span></span><br></pre></td></tr></table></figure><h2 id="枚举-（和js比起来容易实现很多）"><a href="#枚举-（和js比起来容易实现很多）" class="headerlink" title="枚举 （和js比起来容易实现很多）"></a>枚举 （和js比起来容易实现很多）</h2><ul><li>这个枚举呢说是对象也不像对象，说数值也不像数组</li><li>用对象获取法，获取到的是对应的编号</li><li>用数组获取法，获取到的是对应的文字<figure class="highlight typescript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">// 1. 对象获取，通过名字获取值</span></span><br><span class="line"><span class="keyword">enum</span> Color &#123;Red, Green, Blue&#125;</span><br><span class="line"><span class="keyword">let</span> c: Color = Color.Green; <span class="comment">// 1</span></span><br><span class="line"></span><br><span class="line"><span class="comment">// 2. 数组获取，通过便利枚举值得到名字</span></span><br><span class="line"><span class="keyword">enum</span> Color &#123;Red, Green, Blue&#125;</span><br><span class="line"><span class="keyword">let</span> colorName: <span class="built_in">string</span> = Color[<span class="number">2</span>]; <span class="comment">// Blue</span></span><br><span class="line"></span><br><span class="line"></span><br><span class="line"><span class="comment">// 3. 改变编号，默认为0</span></span><br><span class="line"><span class="comment">// 改变后为 1，2，3</span></span><br><span class="line"><span class="keyword">enum</span> Color &#123;Red = <span class="number">1</span>, Green, Blue&#125;</span><br><span class="line"><span class="keyword">let</span> c: Color = Color.Green;</span><br><span class="line"></span><br><span class="line"><span class="comment">// 4. 全手工赋值</span></span><br><span class="line"><span class="keyword">enum</span> Color &#123;Red = <span class="number">1</span>, Green = <span class="number">2</span>, Blue = <span class="number">4</span>&#125;</span><br><span class="line"><span class="keyword">let</span> c: Color = Color.Green;</span><br></pre></td></tr></table></figure></li></ul><h2 id="Any-（简称任意类型什么都可以支持）"><a href="#Any-（简称任意类型什么都可以支持）" class="headerlink" title="Any （简称任意类型什么都可以支持）"></a>Any （简称任意类型什么都可以支持）</h2><figure class="highlight typescript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">let</span> notSure: <span class="built_in">any</span> = <span class="number">4</span>; <span class="comment">// number</span></span><br><span class="line">notSure = <span class="string">"maybe a string instead"</span>; <span class="comment">// String</span></span><br><span class="line">notSure = <span class="literal">false</span>; <span class="comment">// boolean</span></span><br><span class="line"></span><br><span class="line"><span class="comment">// 也可以用来数组上</span></span><br><span class="line"><span class="keyword">let</span> list:<span class="built_in">any</span>[] = [<span class="number">1</span>,<span class="literal">true</span>,<span class="string">"free"</span>];</span><br><span class="line"><span class="comment">// 但是在第一个的类型确立了后再去改变是不可以的</span></span><br><span class="line">list[<span class="number">0</span>] = <span class="string">'aaa'</span> <span class="comment">// 这个是错误的不可以这样用，虽然任意类型但是还是要注意</span></span><br></pre></td></tr></table></figure><h2 id="Void-不能拥有返回类型，就是无返回类型"><a href="#Void-不能拥有返回类型，就是无返回类型" class="headerlink" title="Void (不能拥有返回类型，就是无返回类型)"></a>Void (不能拥有返回类型，就是无返回类型)</h2><figure class="highlight typescript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">// 1. 函数</span></span><br><span class="line"><span class="function"><span class="keyword">function</span> <span class="title">warnUser</span>(<span class="params"></span>): <span class="title">void</span> </span>&#123;</span><br><span class="line">    <span class="built_in">console</span>.log(<span class="string">"This is my warning message"</span>);</span><br><span class="line">    <span class="comment">// return 这样呢可以编译通过</span></span><br><span class="line">    <span class="comment">// return 1 只要加上值这样就不可以了</span></span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="comment">// 2. 变量</span></span><br><span class="line"><span class="comment">// 只能接收null 和 undefined</span></span><br><span class="line"><span class="keyword">let</span> unusable: <span class="built_in">void</span> = <span class="literal">undefined</span>;</span><br></pre></td></tr></table></figure><h2 id="null-undefined"><a href="#null-undefined" class="headerlink" title="null/undefined"></a>null/undefined</h2><ul><li>这个就不说了只可以接收自己本身null或undefined 或者 赋值给 void</li></ul><h2 id="Never-永远无法到达的类型…"><a href="#Never-永远无法到达的类型…" class="headerlink" title="Never (永远无法到达的类型…)"></a>Never (永远无法到达的类型…)</h2><ul><li>简单的说就是一下常抛出异常</li><li>数据永不为真时也是never类型</li><li>任何类型除了never本身都不可以赋值给他</li><li>但是never可以赋值给任何类型<figure class="highlight typescript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">// 返回never的函数必须存在无法达到的终点</span></span><br><span class="line"><span class="function"><span class="keyword">function</span> <span class="title">error</span>(<span class="params">message: <span class="built_in">string</span></span>): <span class="title">never</span> </span>&#123;</span><br><span class="line">    <span class="keyword">throw</span> <span class="keyword">new</span> <span class="built_in">Error</span>(message);</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="comment">// 推断的返回值类型为never</span></span><br><span class="line"><span class="function"><span class="keyword">function</span> <span class="title">fail</span>(<span class="params"></span>) </span>&#123;</span><br><span class="line">    <span class="keyword">return</span> error(<span class="string">"Something failed"</span>);</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="comment">// 返回never的函数必须存在无法达到的终点</span></span><br><span class="line"><span class="function"><span class="keyword">function</span> <span class="title">infiniteLoop</span>(<span class="params"></span>): <span class="title">never</span> </span>&#123;</span><br><span class="line">    <span class="keyword">while</span> (<span class="literal">true</span>) &#123;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure></li></ul><h2 id="Object-简单点就是对象"><a href="#Object-简单点就是对象" class="headerlink" title="Object (简单点就是对象)"></a>Object (简单点就是对象)</h2><ul><li>object表示非原始类型，也就是除number，string，boolean，symbol，null或undefined之外的类型。<figure class="highlight typescript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">// declare 声明</span></span><br><span class="line"><span class="comment">// declare function 在ts是声明函数的意思</span></span><br><span class="line"><span class="comment">// 这里就是声明一个名为create 参数o类型为object 或null，的无返回函数</span></span><br><span class="line"><span class="keyword">declare</span> <span class="function"><span class="keyword">function</span> <span class="title">create</span>(<span class="params">o: object | <span class="literal">null</span></span>): <span class="title">void</span></span>;</span><br><span class="line"></span><br><span class="line"><span class="comment">// 正确的调用方法</span></span><br><span class="line">create(&#123; prop: <span class="number">0</span> &#125;); <span class="comment">// OK</span></span><br><span class="line">create(<span class="literal">null</span>); <span class="comment">// OK</span></span><br><span class="line"></span><br><span class="line"><span class="comment">// 错误的调用方法</span></span><br><span class="line">create(<span class="number">42</span>); <span class="comment">// Error</span></span><br><span class="line">create(<span class="string">"string"</span>); <span class="comment">// Error</span></span><br><span class="line">create(<span class="literal">false</span>); <span class="comment">// Error</span></span><br><span class="line">create(<span class="literal">undefined</span>); <span class="comment">// Error</span></span><br></pre></td></tr></table></figure></li></ul><h2 id="类型断言-（明确类型）"><a href="#类型断言-（明确类型）" class="headerlink" title="类型断言 （明确类型）"></a>类型断言 （明确类型）</h2><ul><li>有时候你会遇到这样的情况，你会比TypeScript更了解某个值的详细信息。 通常这会发生在你清楚地知道一个实体具有比它现有类型更确切的类型。</li><li>其实就是给他明确类型的意思，就是你知道这个是什么类型就直接写什么</li><li>但是如果上面any定义的类型和你写的不一样，就会出现报错就是出不来</li><li>两种形式是等价的。 至于使用哪个大多数情况下是凭个人喜好；然而，当你在TypeScript里使用JSX时，只有 as语法断言是被允许的。</li></ul><figure class="highlight typescript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br></pre></td><td class="code"><pre><span class="line"></span><br><span class="line"><span class="keyword">let</span> someValue: <span class="built_in">any</span> = <span class="string">"this is a string"</span>;</span><br><span class="line"></span><br><span class="line"><span class="keyword">let</span> strLength: <span class="built_in">number</span> = (&lt;<span class="built_in">string</span>&gt;someValue).length;</span><br><span class="line"></span><br><span class="line"><span class="comment">// as 语法 和上面一样的,但是就这样运行跑不起来，等到后面jsx的时候再去看看</span></span><br><span class="line"><span class="keyword">let</span> someValue: <span class="built_in">any</span> = <span class="string">"this is a string"</span>;</span><br><span class="line"></span><br><span class="line"><span class="keyword">let</span> strLength: <span class="built_in">number</span> = (someValue <span class="keyword">as</span> <span class="built_in">string</span>).length;</span><br></pre></td></tr></table></figure><h1 id="后记"><a href="#后记" class="headerlink" title="后记"></a>后记</h1><ul><li>这个就是我学习Ts的第一天的笔记，欢迎更多的同行大哥指导交流</li><li><a href="https://yhf7.github.io/" target="_blank" rel="noopener">欢迎进入我的博客</a>：<a href="https://yhf7.github.io/" target="_blank" rel="noopener">https://yhf7.github.io/</a></li><li>如果有什么侵权的话，请及时添加小编微信以及qq也可以来告诉小编（905477376微信qq通用），谢谢！</li></ul>]]></content>
    
    <summary type="html">
    
      
      
        &lt;link rel=&quot;stylesheet&quot; class=&quot;aplayer-secondary-style-marker&quot; href=&quot;/assets/css/APlayer.min.css&quot;&gt;&lt;script src=&quot;/assets/js/APlayer.min.js&quot; cla
      
    
    </summary>
    
      <category term="TypeScript" scheme="http://yoursite.com/categories/TypeScript/"/>
    
    
      <category term="TypeScript 笔记" scheme="http://yoursite.com/tags/TypeScript-%E7%AC%94%E8%AE%B0/"/>
    
  </entry>
  
  <entry>
    <title>配置maven 下载jar包，配置Idea maven , 导入项目 下包</title>
    <link href="http://yoursite.com/2019/03/03/Mac%20%E5%AE%89%E8%A3%85maven/"/>
    <id>http://yoursite.com/2019/03/03/Mac 安装maven/</id>
    <published>2019-03-03T01:38:50.603Z</published>
    <updated>2019-03-03T02:24:44.739Z</updated>
    
    <content type="html"><![CDATA[<link rel="stylesheet" class="aplayer-secondary-style-marker" href="/assets/css/APlayer.min.css"><script src="/assets/js/APlayer.min.js" class="aplayer-secondary-script-marker"></script><h1 id="前言"><a href="#前言" class="headerlink" title="前言"></a>前言</h1><ul><li>maven其实我也不是很会，只是帮助一位朋友解决前后的交互问题需要用到，据说maven现在比较流行都是这样了应用和下包</li><li>我很久没有接触java 对这个不是很了解，在他的帮助下知道了要搭建maven和构建好项目</li><li>所以把这个方法记录下来以后遇到还能用起来</li></ul><h1 id="重点"><a href="#重点" class="headerlink" title="重点"></a>重点</h1><ol><li>插入指令时要把位置配置成自己的配置，我的图片哪里有一点点选错了，知道就好了我不再去修改那个图片</li></ol><h1 id="配置-工具"><a href="#配置-工具" class="headerlink" title="配置/工具"></a>配置/工具</h1><ol><li>Mac Os 10.13.3</li><li>maven 包 我下载的是3.6.0（一会说着么下载）</li><li>控制台</li><li>Intelli IDEA （我的是2018）</li><li>apache-tomcat 服务器（我的是9.0.11）</li></ol><h1 id="开始"><a href="#开始" class="headerlink" title="开始"></a>开始</h1><h2 id="第一步maven包"><a href="#第一步maven包" class="headerlink" title="第一步maven包"></a>第一步maven包</h2><ol><li><a href="https://maven.apache.org/download.cgi" target="_blank" rel="noopener">点击进入官网</a></li><li>下载 maven 包<br><img src="/Java/java-maven1.png" alt="java-maven"></li><li>解压 maven 包</li></ol><ul><li>直接电脑双击解压</li></ul><ol start="4"><li>存放</li></ol><ul><li>放在系统文件夹下，哪里都可以自己要记住后面要用(记住这个地址后面配置需要)</li><li>我是放在/Users/yhf/apache-maven-3.6.0</li></ul><h2 id="第二步-安装"><a href="#第二步-安装" class="headerlink" title="第二步 安装"></a>第二步 安装</h2><ol><li><p>打开控制台</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">$ vi ~/.bash_profile</span><br></pre></td></tr></table></figure></li><li><p>插入配置指令</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">export M2_HOME=/Users/yhf/apache-maven-3.6.0</span><br><span class="line">export PATH=$PATH:$M2_HOME/bin</span><br></pre></td></tr></table></figure></li></ol><ul><li>说明一下图片里面选错了，是红框和红框下面那句，反正接着export后面哪里加入就好了<br><img src="/Java/java-maven2.png" alt="java-maven"><br><img src="/Java/java-maven3.png" alt="java-maven"></li></ul><ol start="3"><li><p>运行指令</p><ul><li>这一条是运行刚才的配置文件</li><li>输入命令以使bash_profile生效<figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">$ <span class="built_in">source</span> ~/.bash_profile</span><br></pre></td></tr></table></figure></li></ul></li><li><p>输入mvn -v查看Maven是否安装成功</p><ul><li>看到下面这样就是配置成功了<figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">$ mvn -v</span><br></pre></td></tr></table></figure></li></ul></li></ol><p><img src="/Java/java-maven4.png" alt="java-maven"></p><h2 id="第三步-配置Idea-maven"><a href="#第三步-配置Idea-maven" class="headerlink" title="第三步 配置Idea maven"></a>第三步 配置Idea maven</h2><ul><li>按照图片的来就可以了<br><img src="/Java/java-maven5.png" alt="java-maven"><br><img src="/Java/java-maven6.png" alt="java-maven"></li></ul><h2 id="导入项目"><a href="#导入项目" class="headerlink" title="导入项目"></a>导入项目</h2><ol><li>导入pom.xml<br><img src="/Java/java-idea1.png" alt="java-maven"><br><img src="/Java/java-idea2.png" alt="java-maven"><br><img src="/Java/java-idea3.png" alt="java-maven"></li><li>下载jar包<ul><li>刚才我们导入了现在下jar包</li><li>点开右侧的maven projects</li><li>选择安装<br><img src="/Java/java-idea4.png" alt="java-maven"><br><img src="/Java/java-idea5.png" alt="java-maven"></li></ul></li><li>安装好配置<br><img src="/Java/java-idea6.png" alt="java-maven"></li></ol><h2 id="开启项目跑起来"><a href="#开启项目跑起来" class="headerlink" title="开启项目跑起来"></a>开启项目跑起来</h2><pre><code>- 配置serve，然后跑起来</code></pre><p><img src="/Java/java-idea7.png" alt="java-maven"><br><img src="/Java/java-idea8.png" alt="java-maven"></p><h1 id="后记"><a href="#后记" class="headerlink" title="后记"></a>后记</h1><ul><li>这个就是我安装mave 导入项目 和配置mave 跑起来的笔记，希望能帮到有缘人</li><li>如有什么问题加微信我们互相学习共同讨论</li></ul>]]></content>
    
    <summary type="html">
    
      
      
        &lt;link rel=&quot;stylesheet&quot; class=&quot;aplayer-secondary-style-marker&quot; href=&quot;/assets/css/APlayer.min.css&quot;&gt;&lt;script src=&quot;/assets/js/APlayer.min.js&quot; cla
      
    
    </summary>
    
      <category term="Java" scheme="http://yoursite.com/categories/Java/"/>
    
    
      <category term="Java 配置" scheme="http://yoursite.com/tags/Java-%E9%85%8D%E7%BD%AE/"/>
    
  </entry>
  
  <entry>
    <title>微信小程序后端笔记</title>
    <link href="http://yoursite.com/2019/02/18/%E5%BE%AE%E4%BF%A1%E5%B0%8F%E7%A8%8B%E5%BA%8Fphp%E5%90%8E%E7%AB%AF%E5%AD%A6%E4%B9%A0%E7%AC%94%E8%AE%B0/"/>
    <id>http://yoursite.com/2019/02/18/微信小程序php后端学习笔记/</id>
    <published>2019-02-18T08:46:28.742Z</published>
    <updated>2019-03-11T01:58:35.411Z</updated>
    
    <content type="html"><![CDATA[<link rel="stylesheet" class="aplayer-secondary-style-marker" href="/assets/css/APlayer.min.css"><script src="/assets/js/APlayer.min.js" class="aplayer-secondary-script-marker"></script><h1 id="微信小程序商城构建全栈应用"><a href="#微信小程序商城构建全栈应用" class="headerlink" title="微信小程序商城构建全栈应用"></a>微信小程序商城构建全栈应用</h1><ul><li>php+微信小程序全栈应用</li></ul><h1 id="软件-素材"><a href="#软件-素材" class="headerlink" title="软件/素材"></a>软件/素材</h1><ul><li>mac os 10.13.3</li><li>PhpStorm 2018</li><li>Postman</li><li>XAMPP 7.0.2-1</li><li>ThinkPHP 5.0.7</li></ul><h1 id="项目目录结构"><a href="#项目目录结构" class="headerlink" title="项目目录结构"></a>项目目录结构</h1><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br></pre></td><td class="code"><pre><span class="line">├─application           应用目录</span><br><span class="line">  ├─api                公共模块目录（可以更改）</span><br><span class="line">  │  │-controller      控制器目录  （版本以及业务）</span><br><span class="line">  │  │-model           模型目录  （关联模型处理）</span><br><span class="line">  │  │-service         模型服务层（相对复杂的业务处理）</span><br><span class="line">  │  └─validate        验证层     （客户端数据验证）</span><br><span class="line">  ├─extra              自定义公共资源层（tp5自带的）</span><br><span class="line">  ├─lib                模块目录</span><br><span class="line">  │  ├─enum            枚举</span><br><span class="line">  │  └─exception       全局异常处理目录</span><br><span class="line">  │</span><br><span class="line">  ├─command.php        命令行工具配置文件</span><br><span class="line">  ├─common.php         公共函数文件</span><br><span class="line">  ├─config.php         公共配置文件</span><br><span class="line">  ├─route.php          路由配置文件</span><br><span class="line">  ├─tags.php           应用行为扩展定义文件</span><br><span class="line">  └─database.php       数据库配置文件</span><br></pre></td></tr></table></figure><h1 id="笔记"><a href="#笔记" class="headerlink" title="笔记"></a>笔记</h1><h2 id="第八章"><a href="#第八章" class="headerlink" title="第八章"></a>第八章</h2><h3 id="数据表关系分析-（写着写着就绕了）"><a href="#数据表关系分析-（写着写着就绕了）" class="headerlink" title="数据表关系分析 （写着写着就绕了）"></a>数据表关系分析 （写着写着就绕了）</h3><ol><li>数据表之间的关系： 1 对 1 1 对多 多对多<ul><li>如何判断数据表之间的结构</li></ul></li><li>首先确立是否是一个多对多的关系<ul><li>查看表与表之间是否存在双方的外建均能被多个表调用，如果不是那就去除多对多关系</li></ul></li><li>1 对 1 1 对多<ul><li>在 thinkphp 中问题不大</li><li>如何去分析 1 对多或 1 对 1</li><li>1 对 1 的关系中， 两个表直接同时并且单次被执行，就是说一个关联请求中，表 1 一次只可以调用一个表 2 的元素，并且表 2 也只是被调用了一次</li><li>1 对多 的关系中， 表 1 通过一个外建，调用了多个表 2 的数据,并且表 2 的数据不能属于多个表 1，这样就是 1 对多的表现了</li></ul></li></ol><h3 id="模型关联（我们确立了-er-关系再来做这么的一个关联）"><a href="#模型关联（我们确立了-er-关系再来做这么的一个关联）" class="headerlink" title="模型关联（我们确立了 er 关系再来做这么的一个关联）"></a>模型关联（我们确立了 er 关系再来做这么的一个关联）</h3><ol><li><p>模型关联查询</p><ul><li>在我们的 model 是作为一个 ORM 模式的模型结构</li><li>在这之前我们就已经定义了模型了</li><li>我们有两个模型 Banner 与 BannerItem</li><li>tp5 对我们提供了关联查询的方法 hasMany</li><li><p>定义关联查询</p><figure class="highlight php"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">// 在当前模型 Banner 新建类  类名自定义喜欢什么来什么</span></span><br><span class="line"><span class="comment">// 函数体要写在 Banner 这个主模型中，BannerItem是被关联模型</span></span><br><span class="line"><span class="comment">// 调用模型关联时要清晰的知道 外键 以及主建（某程度下是不用写后面两个，不建议）</span></span><br><span class="line"><span class="keyword">public</span> <span class="function"><span class="keyword">function</span> <span class="title">items</span> <span class="params">()</span> </span>&#123;</span><br><span class="line">        <span class="comment">// 关联查询方法hasMany 关联模型      外建      当前模型 banner id主建</span></span><br><span class="line">       <span class="keyword">return</span> <span class="keyword">$this</span>-&gt;hasMany(<span class="string">'BannerItem'</span>,<span class="string">'banner_id'</span>,<span class="string">'id'</span>);</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure></li><li><p>调用关联查询</p><figure class="highlight php"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">  <span class="comment">//  在调用 模型的时候加上 with这么个方法 （括号内填写的就是刚才定义的函数名）</span></span><br><span class="line">$banner = BannerModel::with(<span class="string">'items'</span>)-&gt;find($id);</span><br></pre></td></tr></table></figure></li></ul></li><li><p>模型嵌套关联查询</p><ul><li>在我们的 查询中 会存在被关联体中还关联着变得关联体，在 tp5 中就形成了嵌套查询</li><li>当然 tp5 也给我们提供了方法：belongsTo</li><li>嵌套关系 Banner -&gt; BannerItem -&gt; Image (这里就存在了多重的嵌套)</li><li>模型 Banner BannerItem Image</li><li>是 BannerItem 关联 Image 所以关联函数我们写在 BannerItem 中</li><li>定义嵌套查询</li></ul><figure class="highlight php"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line">  <span class="keyword">public</span> <span class="function"><span class="keyword">function</span> <span class="title">img</span><span class="params">()</span> </span>&#123;</span><br><span class="line"><span class="comment">//        处理方法名其他都是一样的，这里就不多说了</span></span><br><span class="line">      <span class="keyword">return</span> <span class="keyword">$this</span>-&gt;belongsTo(<span class="string">'Image'</span>,<span class="string">'img_id'</span>,<span class="string">'id'</span>);</span><br><span class="line">  &#125;</span><br></pre></td></tr></table></figure><ul><li>调用查询 (这个比较关键，不过还是很简单的)</li></ul><figure class="highlight php"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">// with 可以是字符串也可以是数组（嵌套关联时就会用数组）</span></span><br><span class="line"><span class="comment">// 为什么是items.img 而不是 直接img呢，因为是嵌套关系，在模型中可以嵌套这里也是可以的</span></span><br><span class="line"><span class="comment">// 但是在 嵌套时 是items 关联的 img ，这里就会用.来链接</span></span><br><span class="line"><span class="comment">// 这个解释比较绕但是，知道方法就是要这样去用的就好啦</span></span><br><span class="line">$banner = BannerModel::with([<span class="string">'items'</span>,<span class="string">'items.img'</span>])-&gt;find($id);</span><br></pre></td></tr></table></figure></li></ol><h3 id="隐藏模型字段-模型自带"><a href="#隐藏模型字段-模型自带" class="headerlink" title="隐藏模型字段 (模型自带)"></a>隐藏模型字段 (模型自带)</h3><ol><li>hidden 方法隐藏字段</li></ol><figure class="highlight php"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">// 数据      方法      字段名</span></span><br><span class="line"> $banner-&gt;hidden([<span class="string">'字段名例：id'</span>])</span><br></pre></td></tr></table></figure><ol start="2"><li>visible 只显示的字段</li></ol><figure class="highlight php"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">$banner-&gt;visible([<span class="string">'字段名例：id'</span>,<span class="string">'update_time])</span></span><br></pre></td></tr></table></figure><h3 id="模型内部隐藏字段-（自定义模型的内部隐藏-把一些前端不需要的字段隐藏了）"><a href="#模型内部隐藏字段-（自定义模型的内部隐藏-把一些前端不需要的字段隐藏了）" class="headerlink" title="模型内部隐藏字段 （自定义模型的内部隐藏,把一些前端不需要的字段隐藏了）"></a>模型内部隐藏字段 （自定义模型的内部隐藏,把一些前端不需要的字段隐藏了）</h3><ul><li>hidden 隐藏</li><li>直接在 model 定义的模型内添加方法 （以 Banner 为例）</li></ul><figure class="highlight php"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">namespace</span> <span class="title">app</span>\<span class="title">api</span>\<span class="title">model</span>;</span><br><span class="line"></span><br><span class="line"><span class="keyword">use</span> <span class="title">think</span>\<span class="title">Model</span>;</span><br><span class="line"></span><br><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">Banner</span> <span class="keyword">extends</span> <span class="title">Model</span></span></span><br><span class="line"><span class="class"></span>&#123;</span><br><span class="line">     <span class="comment">// 直接添加 $hidden的数组填入要隐藏的字段即可</span></span><br><span class="line">     <span class="comment">// visible 等方法用法一样，那个模型内部的字段要隐藏就在那个模型内部设置</span></span><br><span class="line">    <span class="keyword">protected</span> $hidden = [<span class="string">'id'</span>];</span><br><span class="line"></span><br><span class="line">    <span class="keyword">public</span> <span class="function"><span class="keyword">function</span> <span class="title">items</span> <span class="params">()</span> </span>&#123;</span><br><span class="line">                                <span class="comment">// 关联模型           外建                当前模型 banner id主建</span></span><br><span class="line">        <span class="keyword">return</span> <span class="keyword">$this</span>-&gt;hasMany(<span class="string">'BannerItem'</span>,<span class="string">'banner_id'</span>,<span class="string">'id'</span>);</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">static</span> <span class="function"><span class="keyword">function</span> <span class="title">getBannerByID</span><span class="params">($id)</span> </span>&#123;</span><br><span class="line">        $banner = <span class="keyword">self</span>::with([<span class="string">'items'</span>,<span class="string">'items.img'</span>])-&gt;find($id);</span><br><span class="line"></span><br><span class="line">        <span class="keyword">return</span> $banner;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h3 id="自定义配置"><a href="#自定义配置" class="headerlink" title="自定义配置"></a>自定义配置</h3><ul><li>/application/extra （extra 自己新建的，凡是放在这里面的配置文件都会被自动加载）</li><li>手动配置一个本地的 img 图片路径</li></ul><ol><li>在 extra 下 新建 setting.php</li></ol><figure class="highlight php"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">return</span> [</span><br><span class="line">    <span class="comment">//  名称                 域名   路径（直接放在public下的images就是这样写就可以了）</span></span><br><span class="line">    <span class="string">'img_prefix'</span> =&gt; <span class="string">'http://zerg.cn/images'</span></span><br><span class="line">];</span><br></pre></td></tr></table></figure><ol start="2"><li>使用自定义变量<ul><li>因为是在 extra 内部定义的所以会自动调用，那么我们用 config 就可以去掉用到了<figure class="highlight php"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">      <span class="comment">// 配置文件名.变量名</span></span><br><span class="line">config(<span class="string">'setting.img_prefix'</span>);</span><br></pre></td></tr></table></figure></li></ul></li></ol><h3 id="静态文件存放"><a href="#静态文件存放" class="headerlink" title="静态文件存放"></a>静态文件存放</h3><ul><li>静态的外部文件，例如图片啊文本啊等的文件，必须放在 public 这个公共目录下</li><li>并不是放在 application 的这个开发目录下，因为 tp5 的架构里面只有 public 这个目录是对外开放的</li><li>所以文件都必须是要放在 public 目录下</li></ul><h3 id="tp-模型读取器-数据拼合"><a href="#tp-模型读取器-数据拼合" class="headerlink" title="tp 模型读取器 (数据拼合)"></a>tp 模型读取器 (数据拼合)</h3><ul><li>为了获取数据/修改数据，tp5 给出了一个读取器的方法</li><li>用来给我们读取数据修改数据用的</li><li>那个模型要修改数据就在哪个模型定义</li></ul><ol><li>定义读取器（其实也是一个函数方法）<ul><li>读取器命名规范 开头 get 必须有 + 读取数据的名称并且开头要大写例 Url + Attr 必须加的（利用驼峰命名法）</li><li>getUrlAttr （完整的编写，除了中间的那个数据，其他都是必须有的，中间数据名开头必须大写）</li><li>传入一个值，名字自定义 （这个传入的数据其实就是我们要获取到要修改的数据）</li><li>每一次传入一个数据，有多个输出就会重复的执行读取器</li><li>因为在我们的业务逻辑中会调用到当前模型的其他数据，但是第一个参数只是获取到的是当前读取器的数据，并无法读取到其他的数据</li><li>所以添加了第二个参数 （这个参数会给我们返回一个这个模型的数据，就是所有的数据）</li></ul></li></ol><figure class="highlight php"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="function"><span class="keyword">function</span> <span class="title">getUrlAttr</span> <span class="params">($value,$data)</span> </span>&#123;</span><br><span class="line"></span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><ol start="2"><li>使用读取器 （做数据的修改然后返回）</li></ol><figure class="highlight php"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="function"><span class="keyword">function</span> <span class="title">getUrlAttr</span> <span class="params">($value)</span> </span>&#123;</span><br><span class="line">    <span class="comment">// 这里我们只是做了一个自定义的 变量和url路径的拼接</span></span><br><span class="line">    <span class="keyword">return</span> config(<span class="string">'setting.img_prefix'</span>).$value;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><ol start="3"><li>业务逻辑添加</li></ol><figure class="highlight php"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="function"><span class="keyword">function</span> <span class="title">getUrlAttr</span> <span class="params">($value,$data)</span> </span>&#123;</span><br><span class="line">$finalUrl = $value;</span><br><span class="line">    <span class="comment">// 判断是否要拼接</span></span><br><span class="line"><span class="keyword">if</span> ($data[<span class="string">'from'</span>] === <span class="number">1</span>) &#123;</span><br><span class="line">    $finalUrl = config(<span class="string">'setting.img_prefix'</span>) . $value;</span><br><span class="line">&#125;</span><br><span class="line"><span class="keyword">return</span> $finalUrl;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h3 id="自定义基类-（面向对象，提取模型读取器）"><a href="#自定义基类-（面向对象，提取模型读取器）" class="headerlink" title="自定义基类 （面向对象，提取模型读取器）"></a>自定义基类 （面向对象，提取模型读取器）</h3><ul><li>一开始这样做会觉得好像代码还多了啊，这么不就是做无用功吗，在业务不断增加的时候，后期修改就可以看出来好处了</li><li>集中业务逻辑</li><li>创建 BaseModel.php 作为模型基类</li><li>把让所有的模型都继承这个基类</li></ul><ol><li><p>把读取器提取到 模型基类 （这样做是一个面向对象的思想）</p><ul><li>但是提取了模型基类后我们所有的子模型都会自动的去执行模型</li><li>这样可能会造成一些数据的变更和错误，比如说，两个命名一样但是代表的数据不同是就会出现错误</li><li>所以我们把它封装为一个自调用的方法<figure class="highlight php"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">// BaseModel</span></span><br><span class="line"><span class="comment">// 读取器</span></span><br><span class="line"><span class="keyword">protected</span> <span class="function"><span class="keyword">function</span> <span class="title">prefixImgUrl</span> <span class="params">($value,$data)</span> </span>&#123;</span><br><span class="line">    $finalUrl = $value;</span><br><span class="line">    <span class="keyword">if</span> ($data[<span class="string">'from'</span>] === <span class="number">1</span>) &#123;</span><br><span class="line">        $finalUrl = config(<span class="string">'setting.img_prefix'</span>) . $value;</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">return</span> $finalUrl;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure></li></ul></li><li><p>子模型调用基类方法</p><ul><li>Image<figure class="highlight php"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="function"><span class="keyword">function</span> <span class="title">getUrlAttr</span> <span class="params">($value,$data)</span> </span>&#123;</span><br><span class="line">    <span class="keyword">return</span> <span class="keyword">$this</span>-&gt;prefixImgUrl($value,$data);</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure></li></ul></li></ol><h3 id="定义-api-版本号"><a href="#定义-api-版本号" class="headerlink" title="定义 api 版本号"></a>定义 api 版本号</h3><ul><li>在互联网的项目中，我们会对项目版本对升级，以及业务逻辑改变和变更</li><li>同时也是需要去兼容旧版本，所以会保留旧版本的 api</li></ul><ol><li>开发开闭原则<ul><li>代码对拓展开发，对修改封闭</li><li>添加功能直接以拓展的方式添加就可以，不需要去改变代码</li><li>修改是封闭的，业务变更上升版本</li><li>不可以修改原来的版本代码，会破坏了原版本的代码，和影响功能调用的风险</li><li>需要修改就要添加新的版本</li></ul></li><li>多版本<ul><li>版本的分离，新旧版本不发生冲突</li><li>新老版本的兼容问题</li><li>给用户缓冲时间，也不能兼容太多的版本，成本太高</li><li>v1 做 v1 版本层</li><li>v2 做 v2 版本层</li></ul></li></ol><h3 id="路由-api-动态变更"><a href="#路由-api-动态变更" class="headerlink" title="路由 api 动态变更"></a>路由 api 动态变更</h3><figure class="highlight php"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">//              动态版本 实现传什么就调用什么版本的api，同时也是要修改版本指向接口</span></span><br><span class="line"><span class="comment">//                 传 v1 就是 v1</span></span><br><span class="line"><span class="comment">//                 传 v2 就是 v2           动态写入</span></span><br><span class="line">Route::get(<span class="string">'api/:version/banner/:id'</span>,<span class="string">'api/:version.Banner/getBanner'</span>);</span><br></pre></td></tr></table></figure><h3 id="一对一关系选择关联方法"><a href="#一对一关系选择关联方法" class="headerlink" title="一对一关系选择关联方法"></a>一对一关系选择关联方法</h3><ol><li>belongsTo<ul><li>在有外建的表内请求就用 belongsTo</li></ul></li><li>hasOne<ul><li>在没有外建的表亲求就用 hasOne</li></ul></li></ol><h3 id="多对多查询-（belongsToMany）"><a href="#多对多查询-（belongsToMany）" class="headerlink" title="多对多查询 （belongsToMany）"></a>多对多查询 （belongsToMany）</h3><p>-</p><ul><li>多对多的查询呢 就比一对多和 1 对 1 的查询要多了一个参数</li><li>在参数中第二个是放入第三个表也就是中间表</li></ul><figure class="highlight php"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="function"><span class="keyword">function</span> <span class="title">products</span> <span class="params">()</span> </span>&#123;</span><br><span class="line">                                    <span class="comment">// 关联表名        中间表名                 关联表id            主建</span></span><br><span class="line">    <span class="keyword">return</span> <span class="keyword">$this</span>-&gt;belongsToMany(<span class="string">'Product'</span>,<span class="string">'theme_product'</span>,<span class="string">'product_id'</span>,<span class="string">'theme_id'</span>);</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h3 id="开启路由完整匹配模式"><a href="#开启路由完整匹配模式" class="headerlink" title="开启路由完整匹配模式"></a>开启路由完整匹配模式</h3><ul><li>开我们开发的过程中难免会有 api 相同当是请求的方式以及传参的不同，但是又需要相同的 api 名称</li><li>在我们的 tp5 中，会自动追寻一个半路径的匹配，所以当匹配到了相关的路由时就会停止匹配</li><li>但是这样返回的结果肯定不是我们要的，所以就要开启这个完整的路由匹配模式</li><li>在 config.php 配置文件中，我们就可以来更改了</li></ul><figure class="highlight php"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">//  只有找到这句话改变就可以了   false -&gt; true</span></span><br><span class="line"><span class="comment">// 路由使用完整匹配</span></span><br><span class="line"><span class="string">'route_complete_match'</span>   =&gt; <span class="keyword">true</span>,</span><br></pre></td></tr></table></figure><h3 id="合理利用数据冗余"><a href="#合理利用数据冗余" class="headerlink" title="合理利用数据冗余"></a>合理利用数据冗余</h3><ul><li>在查询量上来的时候避免数据量大多表查询之间耗时</li><li>合理的利用数据冗余来减少联合表的查询减少查询时间</li><li>但不要太过多但使用，只是为了减少数据库压力</li><li>在数据库中做相关的优化</li></ul><h3 id="collection-字符集"><a href="#collection-字符集" class="headerlink" title="collection 字符集"></a>collection 字符集</h3><ul><li>我们使用获取到的数据是字符集更方便让我们来修改数据</li></ul><ol><li>tp5 修改获取返回数据 （/application/database.php）</li></ol><figure class="highlight php"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">// 找到这个吧 arr改为 collection</span></span><br><span class="line"><span class="comment">// 数据集返回类型</span></span><br><span class="line"><span class="string">'resultset_type'</span>  =&gt; <span class="string">'collection'</span>,</span><br></pre></td></tr></table></figure><ol start="2"><li><p>使用字符集就可以轻松的临时隐藏字段</p><ul><li>当我们在开发的过程中，不是所有业务逻辑都需要隐藏的字段，我们就不可以在关联模型中直接就隐藏字段</li><li>我们会使用临时隐藏字段</li><li>当然数组我们是不可以直接这样来隐藏的，但是使用字符集的话就可以直接的去使用函数进行数据的隐藏<figure class="highlight php"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">// 使用hidden进行隐藏</span></span><br><span class="line">$products = $products-&gt;hidden([<span class="string">'summary'</span>]);</span><br></pre></td></tr></table></figure></li></ul></li><li><p>字符集判空</p><ul><li>isEmpty 内置函数</li></ul></li></ol><figure class="highlight php"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">// 判断空抛出异常</span></span><br><span class="line"><span class="keyword">if</span> ($products-&gt;isEmpty()) &#123;</span><br><span class="line">    <span class="keyword">throw</span> <span class="keyword">new</span> ProductException();</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>##第九章</p><h3 id="service-建立在-model-上的，用来处理复制的业务"><a href="#service-建立在-model-上的，用来处理复制的业务" class="headerlink" title="service (建立在 model 上的，用来处理复制的业务)"></a>service (建立在 model 上的，用来处理复制的业务)</h3><ul><li>在我们的 tp5 中，我们的 model 代表的一个很重要的位置</li><li>可以写业务逻辑，也访问数据库</li><li>但是 service 不可以用来访问数据库，因为上建立在 model 之上的</li><li>我们都会把复杂的业务逻辑放在 service 层中</li></ul><h3 id="公共应用文件-common-php"><a href="#公共应用文件-common-php" class="headerlink" title="公共应用文件 common.php"></a>公共应用文件 common.php</h3><ul><li>编写公共的 http 请求</li></ul><figure class="highlight php"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">/*</span></span><br><span class="line"><span class="comment">* <span class="doctag">@param</span> string $url get 请求地址</span></span><br><span class="line"><span class="comment">* <span class="doctag">@param</span> int $httpCode 返回状态码</span></span><br><span class="line"><span class="comment">* <span class="doctag">@return</span> mixed</span></span><br><span class="line"><span class="comment">*/</span></span><br><span class="line"><span class="function"><span class="keyword">function</span> <span class="title">curl_get</span> <span class="params">($url,&amp;$httpCode = <span class="number">0</span>)</span> </span>&#123;</span><br><span class="line"> $ch = curl_init();</span><br><span class="line"> curl_setopt($ch,CURLOPT_URL,$url);</span><br><span class="line"> curl_setopt($ch,CURLOPT_RETURNTRANSFER,<span class="number">1</span>);</span><br><span class="line"></span><br><span class="line"><span class="comment">//    不做证书校验，部署在linux环境下请改为true</span></span><br><span class="line"> curl_setopt($ch,CURLOPT_SSL_VERIFYPEER,<span class="keyword">false</span>);</span><br><span class="line"> curl_setopt($ch,CURLOPT_CONNECTTIMEOUT,<span class="number">10</span>);</span><br><span class="line"> $file_contents = curl_exec($ch);</span><br><span class="line"> $httpCode = curl_getinfo($ch,CURLINFO_HTTP_CODE);</span><br><span class="line"> curl_close($ch);</span><br><span class="line"> <span class="keyword">return</span> $file_contents;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h3 id="模型插入数据（create）"><a href="#模型插入数据（create）" class="headerlink" title="模型插入数据（create）"></a>模型插入数据（create）</h3><ul><li>在 tp5 中如何向数据库插入数据</li><li>tp5 模型给我们准备了 create 的方法</li></ul><figure class="highlight php"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line">    <span class="comment">//  模型名   create方法 数组传入要添加的字段和数据</span></span><br><span class="line">$user = UserModel::create([</span><br><span class="line">        <span class="string">'openid'</span> =&gt; $openid</span><br><span class="line">    ]);</span><br></pre></td></tr></table></figure><h3 id="动态传入数值随机生成字符串方法"><a href="#动态传入数值随机生成字符串方法" class="headerlink" title="动态传入数值随机生成字符串方法"></a>动态传入数值随机生成字符串方法</h3><figure class="highlight php"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">/*</span></span><br><span class="line"><span class="comment"> * 生成随机字符串</span></span><br><span class="line"><span class="comment"> */</span></span><br><span class="line"><span class="function"><span class="keyword">function</span> <span class="title">getRandChar</span> <span class="params">($length)</span> </span>&#123;</span><br><span class="line">    $str = <span class="keyword">null</span>;</span><br><span class="line">    $strPol = <span class="string">"ABCDEFGHIJKLMNOPQRSTUVWXYZ0123456789abcdefghijklmnopqrstuvwxyz"</span>;</span><br><span class="line">    $max = strlen($strPol) - <span class="number">1</span>;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">for</span> ($i=<span class="number">0</span>;$i &lt; $length; $i++) &#123;</span><br><span class="line">        $str .= $strPol[rand(<span class="number">0</span>,$max)];</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">return</span> $str;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h3 id="文件缓存-chache"><a href="#文件缓存-chache" class="headerlink" title="文件缓存 chache"></a>文件缓存 chache</h3><ul><li>使用 cache 写入缓存</li><li>使用文件存储的方式</li><li>缓存的地址在目录文件/runtime/cache 文件内</li></ul><figure class="highlight php"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">$request = cache($key,$value,$expire_in);</span><br></pre></td></tr></table></figure><h3 id="路由分组"><a href="#路由分组" class="headerlink" title="路由分组"></a>路由分组</h3><ul><li>由于我们 api 接口的不断增加</li><li>在一个分类中会有很多的相同的接口路由</li><li>这个时候如果我们业务的变更修改起来就会很麻烦</li><li>所以我们是用来路由分组来实现</li><li>group 方法</li><li>第一个是公共的路由部分，第二个是一个闭包（也就是一个 function 的方法）</li><li>在里面还是安装路由一样去定义就可以了</li><li>也能提高路由的效率</li></ul><figure class="highlight php"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br></pre></td><td class="code"><pre><span class="line"></span><br><span class="line"><span class="comment">//Route::get('api/:version/product/recent','api/:version.Product/getRecent');</span></span><br><span class="line"><span class="comment">//Route::get('api/:version/product/by_category','api/:version.Product/getAllInCategory');</span></span><br><span class="line"><span class="comment">//Route::get('api/:version/product/:id','api/:version.Product/getOne',[],['id'=&gt;'\d+']);</span></span><br><span class="line"></span><br><span class="line">Route::group(<span class="string">'api/:version/product'</span>, <span class="function"><span class="keyword">function</span> <span class="params">()</span> </span>&#123;</span><br><span class="line">    Route::get(<span class="string">'/recent'</span>,<span class="string">'api/:version.Product/getRecent'</span>);</span><br><span class="line">    Route::get(<span class="string">'/by_category'</span>,<span class="string">'api/:version.Product/getAllInCategory'</span>);</span><br><span class="line">    Route::get(<span class="string">'/:id'</span>,<span class="string">'api/:version.Product/getOne'</span>,[],[<span class="string">'id'</span>=&gt;<span class="string">'\d+'</span>]);</span><br><span class="line">&#125;);</span><br></pre></td></tr></table></figure><h3 id="关联模型下个关联数据排序（tp5-没有的，重点）"><a href="#关联模型下个关联数据排序（tp5-没有的，重点）" class="headerlink" title="关联模型下个关联数据排序（tp5 没有的，重点）"></a>关联模型下个关联数据排序（tp5 没有的，重点）</h3><ul><li>使用 模型+query 添加排序</li></ul><figure class="highlight php"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">// 关联模型 imgs  properties 查询</span></span><br><span class="line"><span class="comment">// 模型的嵌套 imgurl</span></span><br><span class="line"><span class="keyword">public</span> <span class="keyword">static</span> <span class="function"><span class="keyword">function</span> <span class="title">getProductDetail</span> <span class="params">($id)</span> </span>&#123;</span><br><span class="line">    <span class="comment">// 在 with 中 嵌套function</span></span><br><span class="line">    <span class="comment">// 在内部添加 query</span></span><br><span class="line">    $product = <span class="keyword">self</span>::with([<span class="string">'imgs'</span> =&gt; <span class="function"><span class="keyword">function</span> <span class="params">($query)</span> </span>&#123;</span><br><span class="line">        $query-&gt;with([<span class="string">'imgUrl'</span>])-&gt;order(<span class="string">'order'</span>,<span class="string">'asc'</span>);</span><br><span class="line">    &#125;])-&gt;with([<span class="string">'properties'</span>])-&gt;find($id);</span><br><span class="line">    <span class="keyword">return</span> $product;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h3 id="使用-关联模型-添加-更新数据"><a href="#使用-关联模型-添加-更新数据" class="headerlink" title="使用 关联模型 添加/更新数据"></a>使用 关联模型 添加/更新数据</h3><ul><li>添加数据的方法有很多，我们来使用一下关联模型的方法</li><li>两个的区别在于 修改操作的 关联 不可以用括号</li></ul><figure class="highlight php"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">// 调用 user 中的 address 关联 使用 save方法添加数据</span></span><br><span class="line">$user-&gt;address()-&gt;save($dataArray);</span><br><span class="line"><span class="comment">// 调用 user 中的 address 关联 使用 save方法修改数据</span></span><br><span class="line">$user-&gt;address-&gt;save($dataArray);</span><br></pre></td></tr></table></figure><h2 id="第十章"><a href="#第十章" class="headerlink" title="第十章"></a>第十章</h2><h3 id="前置操作"><a href="#前置操作" class="headerlink" title="前置操作"></a>前置操作</h3><ul><li>在我们编写 api 业务逻辑的时候，我们会想在调用 api 接口之前，需要满足某些条件</li><li>这样才可以去访问我们的接口中的业务逻辑</li><li>所以我们要在做一个前置操作，抵挡不满足条件的抛出异常</li></ul><ol><li>tp5 中使用前置操作需要基础自带的一个基类 Controller</li><li>定义一个名为 \$beforeActionList 的数组</li></ol><figure class="highlight php"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">use</span> <span class="title">think</span>\<span class="title">Controller</span></span><br><span class="line"></span><br><span class="line"> <span class="title">class</span> <span class="title">Address</span> <span class="title">extends</span> <span class="title">Controller</span></span><br><span class="line"> &#123;</span><br><span class="line">     // 定义前置属性</span><br><span class="line">     // 第一个字段是 访问<span class="title">api</span>接口前 需要 访问的一个前置方法</span><br><span class="line">     // 箭指的 是一个数组</span><br><span class="line">     // 数组内部定义一个箭指数据，也可以直接是一个字符串（内部填入<span class="title">api</span>接口函数就可以了）</span><br><span class="line">     // 否则向下面这样写</span><br><span class="line">     // 多<span class="title">api</span>编写</span><br><span class="line">     <span class="title">protected</span> $<span class="title">beforeActionList</span> = [</span><br><span class="line">         '<span class="title">first</span>' =&gt; ['<span class="title">only</span>' =&gt; '<span class="title">second</span>,<span class="title">third</span>']</span><br><span class="line">     ];</span><br><span class="line"></span><br><span class="line">     <span class="comment">// 触发api前 执行的前置函数</span></span><br><span class="line">     <span class="keyword">protected</span> <span class="function"><span class="keyword">function</span> <span class="title">first</span> <span class="params">()</span> </span>&#123;</span><br><span class="line">         <span class="keyword">echo</span> <span class="string">'first'</span>;</span><br><span class="line">     &#125;</span><br><span class="line"></span><br><span class="line">     <span class="comment">// api接口</span></span><br><span class="line">     <span class="keyword">public</span> <span class="function"><span class="keyword">function</span> <span class="title">second</span> <span class="params">()</span> </span>&#123;</span><br><span class="line">         <span class="keyword">echo</span> <span class="string">'second'</span>;</span><br><span class="line">     &#125;</span><br><span class="line"></span><br><span class="line">     <span class="comment">// api接口</span></span><br><span class="line">     <span class="keyword">public</span> <span class="function"><span class="keyword">function</span> <span class="title">third</span> <span class="params">()</span> </span>&#123;</span><br><span class="line">         <span class="keyword">echo</span> <span class="string">'third'</span>;</span><br><span class="line">     &#125;</span><br><span class="line"> &#125;</span><br></pre></td></tr></table></figure><h3 id="重构前置验证操作-（实现面向对象）"><a href="#重构前置验证操作-（实现面向对象）" class="headerlink" title="重构前置验证操作 （实现面向对象）"></a>重构前置验证操作 （实现面向对象）</h3><ul><li>提取验证业务逻辑到 service 的基类中</li><li>提取前置方法到 BaseController 的基类中</li><li>继承基类，执行前置方法</li></ul><ol><li>提取出一个前置的基类 BaseController （继承内置 Controller）</li></ol><figure class="highlight php"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">use</span> <span class="title">app</span>\<span class="title">api</span>\<span class="title">service</span>\<span class="title">Token</span> <span class="title">as</span> <span class="title">TokenService</span>;</span><br><span class="line"></span><br><span class="line"><span class="comment">// 继承</span></span><br><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">BaseController</span> <span class="keyword">extends</span> <span class="title">Controller</span></span></span><br><span class="line"><span class="class"></span>&#123;</span><br><span class="line"> <span class="comment">// 前置方法</span></span><br><span class="line"> <span class="comment">// 验证初级权限作用域,用户和cms都可以访问</span></span><br><span class="line"> <span class="keyword">protected</span> <span class="function"><span class="keyword">function</span> <span class="title">checkPrimaryScope</span> <span class="params">()</span> </span>&#123;</span><br><span class="line">     <span class="comment">// 向Token调用验证方法</span></span><br><span class="line">     TokenService::needPrimaryScope();</span><br><span class="line"> &#125;</span><br><span class="line"></span><br><span class="line"> <span class="comment">// 验证权限，只有用户可以访问，cms无法访问</span></span><br><span class="line"> <span class="keyword">protected</span> <span class="function"><span class="keyword">function</span> <span class="title">checkExclusiveScope</span> <span class="params">()</span> </span>&#123;</span><br><span class="line">     TokenService::needExclusiveScope();</span><br><span class="line"> &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><ol start="2"><li>提取验证业务逻辑（因为是 token 相关的就归并到 token 的 service 业务层中）</li></ol><figure class="highlight php"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">// 重构前置方法，验证权限</span></span><br><span class="line"><span class="comment">// 用户和cms管理员都可以访问的权限</span></span><br><span class="line"><span class="keyword">public</span> <span class="keyword">static</span> <span class="function"><span class="keyword">function</span> <span class="title">needPrimaryScope</span> <span class="params">()</span> </span>&#123;</span><br><span class="line">    <span class="comment">// 调用token中的方法获取scope</span></span><br><span class="line">    $scope = <span class="keyword">self</span>::getCurrentTokenVar(<span class="string">'scope'</span>);</span><br><span class="line">    <span class="comment">// 判断是否存在</span></span><br><span class="line">    <span class="keyword">if</span> ($scope) &#123;</span><br><span class="line">        <span class="comment">// 判断 scope的权限大小</span></span><br><span class="line">        <span class="keyword">if</span> ($scope &gt;= ScopeEnum::User) &#123;</span><br><span class="line">            <span class="keyword">return</span> <span class="keyword">true</span>;</span><br><span class="line">        &#125; <span class="keyword">else</span> &#123;</span><br><span class="line">            <span class="keyword">throw</span> <span class="keyword">new</span> ForbiddenException();</span><br><span class="line">        &#125;</span><br><span class="line">    &#125; <span class="keyword">else</span> &#123;</span><br><span class="line">        <span class="keyword">throw</span> <span class="keyword">new</span> TokenException();</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><ol start="3"><li>继承 BaseController 基类使用前置方法</li></ol><figure class="highlight php"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br></pre></td><td class="code"><pre><span class="line">         <span class="comment">// 继承基类</span></span><br><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">Address</span> <span class="keyword">extends</span> <span class="title">BaseController</span></span></span><br><span class="line"><span class="class"></span>&#123;</span><br><span class="line"> <span class="comment">// 调用前置的方法</span></span><br><span class="line"> <span class="keyword">protected</span> $beforeActionList = [</span><br><span class="line">     <span class="comment">// 前置验证的方法名                   需要前置验证的函数</span></span><br><span class="line">     <span class="string">'checkPrimaryScope'</span> =&gt; [<span class="string">'only'</span> =&gt; <span class="string">'createOrUpdateAddress'</span>]</span><br><span class="line"> ];</span><br><span class="line"></span><br><span class="line"> <span class="comment">/*</span></span><br><span class="line"><span class="comment">  * <span class="doctag">@url</span> api/v1/address</span></span><br><span class="line"><span class="comment">  */</span></span><br><span class="line"> <span class="keyword">public</span> <span class="function"><span class="keyword">function</span> <span class="title">createOrUpdateAddress</span> <span class="params">()</span> </span>&#123;</span><br><span class="line"></span><br><span class="line"> &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h3 id="验证器数据自定义子项验证"><a href="#验证器数据自定义子项验证" class="headerlink" title="验证器数据自定义子项验证"></a>验证器数据自定义子项验证</h3><ul><li>自定义子项验证，通过自定义的方法调用实现</li><li>当我们在验证时，传入的是一个二维数组，就可以使用来验证子项</li><li>我们就自定义一个验证的方法，通过基类的验证的调用</li></ul><figure class="highlight php"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br></pre></td><td class="code"><pre><span class="line"></span><br><span class="line"><span class="comment">// 整体验证</span></span><br><span class="line"><span class="keyword">protected</span> $rule = [</span><br><span class="line">  <span class="string">'products'</span> =&gt; <span class="string">'checkProducts'</span></span><br><span class="line">];</span><br><span class="line"></span><br><span class="line"><span class="comment">// 数据子项的验证</span></span><br><span class="line"><span class="keyword">protected</span> $singleRule = [</span><br><span class="line">    <span class="string">'product_id'</span> =&gt; <span class="string">'require|isPositiveInteger'</span>,</span><br><span class="line">    <span class="string">'count'</span> =&gt; <span class="string">'require|isPositiveInteger'</span></span><br><span class="line">];</span><br><span class="line"></span><br><span class="line"><span class="comment">/*</span></span><br><span class="line"><span class="comment"> * 自定义整体验证</span></span><br><span class="line"><span class="comment"> */</span></span><br><span class="line"><span class="keyword">protected</span> <span class="function"><span class="keyword">function</span> <span class="title">checkProducts</span> <span class="params">($values)</span> </span>&#123;</span><br><span class="line">    <span class="comment">// 验证是不是数组</span></span><br><span class="line">    <span class="keyword">if</span> (!is_array($values)) &#123;</span><br><span class="line">        <span class="keyword">throw</span> <span class="keyword">new</span> ParameterException([</span><br><span class="line">            <span class="string">'msg'</span> =&gt; <span class="string">'商品参数不正确'</span></span><br><span class="line">        ]);</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="comment">// 验证不为空</span></span><br><span class="line">    <span class="keyword">if</span> (<span class="keyword">empty</span>($values)) &#123;</span><br><span class="line">        <span class="keyword">throw</span> <span class="keyword">new</span> ParameterException([</span><br><span class="line">            <span class="string">'msg'</span> =&gt; <span class="string">'商品列表不能为空'</span></span><br><span class="line">        ]);</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="comment">// 循环对每一项进行验证</span></span><br><span class="line">    <span class="keyword">foreach</span> ($values <span class="keyword">as</span> $value) &#123;</span><br><span class="line">        <span class="keyword">$this</span>-&gt;checkProduct($value);</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">return</span> <span class="keyword">true</span>;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="comment">// 基础调用子项验证</span></span><br><span class="line"><span class="keyword">protected</span> <span class="function"><span class="keyword">function</span> <span class="title">checkProduct</span> <span class="params">($value)</span> </span>&#123;</span><br><span class="line">    $validate = <span class="keyword">new</span> BaseValidate(<span class="keyword">$this</span>-&gt;singleRule);</span><br><span class="line">    $result = $validate-&gt;check($value);</span><br><span class="line">    <span class="keyword">if</span> (!$result) &#123;</span><br><span class="line">        <span class="keyword">throw</span> <span class="keyword">new</span> ParameterException([</span><br><span class="line">            <span class="string">'msg'</span> =&gt; <span class="string">'商品参数不正确'</span></span><br><span class="line">        ]);</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h3 id="自动添加时间戳（TP5-内置添加时间戳）"><a href="#自动添加时间戳（TP5-内置添加时间戳）" class="headerlink" title="自动添加时间戳（TP5 内置添加时间戳）"></a>自动添加时间戳（TP5 内置添加时间戳）</h3><ul><li>在我们的操作中，我们的数据中会带有数据，tp5 为我们提供了自动添加时间戳</li></ul><ol><li>找到自己要添加的时间戳的模型 我是在 order 添加那我就去 orde 人的模型中</li><li>\$autoWriteTimestamp 添加为 true，需要是模型的方式才可以使用的</li><li>创建 修改 删除</li><li>默认为 create_time update_time delete_time</li><li>修改方法名 在模型下修改</li></ol><figure class="highlight php"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">// 自动写入时间戳</span></span><br><span class="line"><span class="keyword">protected</span> $autoWriteTimestamp = <span class="keyword">true</span>;</span><br><span class="line"><span class="comment">// 修改字段名</span></span><br><span class="line"><span class="comment">//         内置名称           自定义修改的名称</span></span><br><span class="line"><span class="keyword">protected</span> $createTime = <span class="string">'create_timestamp'</span>;</span><br></pre></td></tr></table></figure><h3 id="Tp5-事务应用"><a href="#Tp5-事务应用" class="headerlink" title="Tp5 事务应用"></a>Tp5 事务应用</h3><ul><li>在我们的应用中可能会出现分步的操作，可能会本地与服务端出现不一致</li><li>所以我们使用事务来做处理</li><li>在中间出现错误就会把数据回滚保持数据的一致性</li></ul><figure class="highlight php"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">// 开头加入开始</span></span><br><span class="line">    Db::startTrans();</span><br><span class="line">    <span class="keyword">try</span> &#123;</span><br><span class="line">        $orderNo = <span class="keyword">$this</span>-&gt;makeOrderNo();</span><br><span class="line">        $order = <span class="keyword">new</span> \app\api\model\Order();</span><br><span class="line">        $order-&gt;user_id = <span class="keyword">$this</span>-&gt;uid;</span><br><span class="line">        $order-&gt;order_no = $orderNo;</span><br><span class="line">        $order-&gt;total_price = $snap[<span class="string">'orderPrice'</span>];</span><br><span class="line">        $order-&gt;total_count = $snap[<span class="string">'totalCount'</span>];</span><br><span class="line">        $order-&gt;snap_img = $snap[<span class="string">'snapImg'</span>];</span><br><span class="line">        $order-&gt;snap_name = $snap[<span class="string">'snapName'</span>];</span><br><span class="line">        $order-&gt;snap_address = $snap[<span class="string">'snapAddress'</span>];</span><br><span class="line">        $order-&gt;snap_items = json_encode($snap[<span class="string">'pStatus'</span>]);</span><br><span class="line"></span><br><span class="line">        $order-&gt;save();</span><br><span class="line"></span><br><span class="line">        $orderID = $order-&gt;id;</span><br><span class="line">        $create_time = $order-&gt;create_time;</span><br><span class="line"></span><br><span class="line">        <span class="keyword">foreach</span> (<span class="keyword">$this</span>-&gt;oProducts <span class="keyword">as</span> &amp;$p) &#123;</span><br><span class="line">            $p[<span class="string">'order_id'</span>] = $orderID;</span><br><span class="line">        &#125;</span><br><span class="line"></span><br><span class="line">        $orderProduct = <span class="keyword">new</span> OrderProduct();</span><br><span class="line">        $orderProduct-&gt;saveAll(<span class="keyword">$this</span>-&gt;oProducts);</span><br><span class="line"></span><br><span class="line">        <span class="comment">// 结尾加上结束</span></span><br><span class="line">        Db::commit();</span><br><span class="line"></span><br><span class="line">        <span class="keyword">return</span> [</span><br><span class="line">            <span class="string">'order_no'</span> =&gt; $orderNo,</span><br><span class="line">            <span class="string">'order_id'</span> =&gt; $orderID,</span><br><span class="line">            <span class="string">'create_time'</span> =&gt; $create_time</span><br><span class="line">        ];</span><br><span class="line">    &#125; <span class="keyword">catch</span> (<span class="keyword">Exception</span> $ex) &#123;</span><br><span class="line">        <span class="comment">// 异常出现回滚</span></span><br><span class="line">        Db::rollback();</span><br><span class="line">        <span class="keyword">throw</span> $ex;</span><br><span class="line">    &#125;</span><br></pre></td></tr></table></figure><h3 id="引入没有命名空间的文件与调用-Loader-，手动引入微信支付-php"><a href="#引入没有命名空间的文件与调用-Loader-，手动引入微信支付-php" class="headerlink" title="引入没有命名空间的文件与调用(Loader)，手动引入微信支付 php"></a>引入没有命名空间的文件与调用(Loader)，手动引入微信支付 php</h3><ul><li>使用 loader 的 import 方法</li><li>extend/WxPay/WePay.Api.php</li></ul><figure class="highlight php"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line">    <span class="comment">//         文件开头的第一个  文件路径       // 类的名称</span></span><br><span class="line">Loader::import(<span class="string">'WxPay.WxPay'</span>,EXTEND_PATH,<span class="string">'.Api.php'</span>);</span><br><span class="line"><span class="comment">// 调用</span></span><br><span class="line"><span class="comment">// 调用的时候前面要加反斜杠</span></span><br><span class="line">$wxOrderData = <span class="keyword">new</span> \WxPayUnifiedOrder();</span><br></pre></td></tr></table></figure><h3 id="TP5-模型实现数据减少-setDec"><a href="#TP5-模型实现数据减少-setDec" class="headerlink" title="TP5 模型实现数据减少 setDec"></a>TP5 模型实现数据减少 setDec</h3><figure class="highlight php"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">                                            <span class="comment">// 前面是查询  第一个数是写要改变的字段  第二个是要减少的数量</span></span><br><span class="line">Product::where(<span class="string">'id'</span>,<span class="string">'='</span>,$singlePStatus[<span class="string">'id'</span>])-&gt;setDec(<span class="string">'stock'</span>,$singlePStatus[<span class="string">'count'</span>]);</span><br></pre></td></tr></table></figure><h3 id="数据库锁与事务锁的区别"><a href="#数据库锁与事务锁的区别" class="headerlink" title="数据库锁与事务锁的区别"></a>数据库锁与事务锁的区别</h3><ul><li>数据库模型-&gt;lock(true)</li><li>事务锁 Db</li></ul><ol><li>事务锁是等待整个事务提交才会执行第二次事务，但是数据库模型锁只是单步的锁着了数据库查询语句</li><li>在后面的操作还没有执行时，数据库模型锁已经放开了</li></ol><h3 id="外部网址使用"><a href="#外部网址使用" class="headerlink" title="外部网址使用"></a>外部网址使用</h3><ul><li>要从根目录一直到 index.php</li><li>后面才是路由</li><li><a href="http://www.yhf7/zerg/public/index.php/api/v1/pay/notify" target="_blank" rel="noopener">www.yhf7/zerg/public/index.php/api/v1/pay/notify</a></li></ul><h3 id="模型分页查询-paginate"><a href="#模型分页查询-paginate" class="headerlink" title="模型分页查询(paginate)"></a>模型分页查询(paginate)</h3><ul><li>第一个参数是分类数</li><li>第二个数是否简洁模式</li><li>第三个是数组填入分页数</li></ul><figure class="highlight php"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line"></span><br><span class="line"><span class="keyword">public</span> <span class="keyword">static</span> <span class="function"><span class="keyword">function</span> <span class="title">getSummaryByUser</span> <span class="params">($uid,$page=<span class="number">1</span>,$size=<span class="number">15</span>)</span> </span>&#123;</span><br><span class="line">    $paginData = <span class="keyword">self</span>::where(<span class="string">'user_id'</span>,<span class="string">'='</span>,$uid)-&gt;order(<span class="string">'create_time desc'</span>)-&gt;paginate($size,<span class="keyword">true</span>,[<span class="string">'page'</span> =&gt; $page]);</span><br><span class="line">    <span class="keyword">return</span> $paginData;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h1 id="后记"><a href="#后记" class="headerlink" title="后记"></a>后记</h1><ul><li>这是学习微信小程序开发后端PHP时候的笔记，欢迎更多的同行大哥指导交流</li><li><a href="https://yhf7.github.io/" target="_blank" rel="noopener">欢迎进入我的博客</a>：<a href="https://yhf7.github.io/" target="_blank" rel="noopener">https://yhf7.github.io/</a></li><li>如果有什么侵权的话，请及时添加小编微信以及qq也可以来告诉小编（905477376微信qq通用），谢谢！</li></ul>]]></content>
    
    <summary type="html">
    
      
      
        &lt;link rel=&quot;stylesheet&quot; class=&quot;aplayer-secondary-style-marker&quot; href=&quot;/assets/css/APlayer.min.css&quot;&gt;&lt;script src=&quot;/assets/js/APlayer.min.js&quot; cla
      
    
    </summary>
    
      <category term="小程序" scheme="http://yoursite.com/categories/%E5%B0%8F%E7%A8%8B%E5%BA%8F/"/>
    
    
      <category term="小程序 笔记" scheme="http://yoursite.com/tags/%E5%B0%8F%E7%A8%8B%E5%BA%8F-%E7%AC%94%E8%AE%B0/"/>
    
  </entry>
  
  <entry>
    <title>Git ssh 重构</title>
    <link href="http://yoursite.com/2019/02/11/gitshh-%E9%87%8D%E6%9E%84/"/>
    <id>http://yoursite.com/2019/02/11/gitshh-重构/</id>
    <published>2019-02-11T02:20:52.229Z</published>
    <updated>2019-03-11T02:04:24.408Z</updated>
    
    <content type="html"><![CDATA[<link rel="stylesheet" class="aplayer-secondary-style-marker" href="/assets/css/APlayer.min.css"><script src="/assets/js/APlayer.min.js" class="aplayer-secondary-script-marker"></script><h1 id="前言"><a href="#前言" class="headerlink" title="前言"></a>前言</h1><ul><li>昨天我说了忘记密码，今天我想说一下ssh的配置</li><li>有时候可以用但是ssh内部公钥可能会存在问题</li><li>所以今天我就来重构ssh</li></ul><h1 id="解决"><a href="#解决" class="headerlink" title="解决"></a>解决</h1><ol><li><p>进入.ssh</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">$ <span class="built_in">cd</span> .ssh/</span><br></pre></td></tr></table></figure></li><li><p>备份文件</p><ul><li>把公钥文件拷贝出来以防万一</li></ul></li><li><p>生成公钥</p><ul><li>生成密钥</li><li>输入后后面所有的都是直接回车就可以了</li><li>如果你要设置密码那就设置吧，ssh本来就是用来免密登录的，最好就是不用密码吧<figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">$ ssh-keygen</span><br></pre></td></tr></table></figure></li></ul></li></ol><p><img src="/git/git-ssh5.png" alt="git-ssh"></p><ol start="4"><li>查看密钥<ul><li>查看密钥配置<figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">$ cat ~/.ssh/id_rsa.pub</span><br></pre></td></tr></table></figure></li></ul></li></ol><p><img src="/git/git-ssh1.png" alt="git-ssh"></p><ol start="5"><li><p>添加密钥</p><ul><li>把查看密钥生成的代码拷贝到Github或码云</li><li>删除原有的输入新的就可以了<br><img src="/git/git-ssh2.png" alt="git-ssh"></li></ul></li><li><p>ssh下载项目</p><ul><li>复制项目到ssh地址下载</li><li>第一次使用ssh遇到Are you sure you want to continue connecting (yes/no)? yes 要输入yes表示同意验证本地ssh<figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">$ git <span class="built_in">clone</span> git@gitee.com:yhf7/zerg.git</span><br></pre></td></tr></table></figure></li></ul></li></ol><p><img src="/git/git-ssh3.png" alt="git-ssh"></p><ol start="7"><li>查看ssh配置了什么地方<ul><li>要在.ssh文件下</li><li>在什么地方设置了会看的出来<figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">$ cat known_hosts</span><br></pre></td></tr></table></figure></li></ul></li></ol><p><img src="/git/git-ssh4.png" alt="git-ssh"></p><h1 id="后记"><a href="#后记" class="headerlink" title="后记"></a>后记</h1><pre><code>- 才疏学浅，遇到了问题还好有大哥教我重构才得以解决，马上记录解决办法- [欢迎进入我的博客](https://yhf7.github.io/)：https://yhf7.github.io/- 如果有什么侵权的话，请及时添加小编微信以及qq也可以来告诉小编（905477376微信qq通用），谢谢！</code></pre>]]></content>
    
    <summary type="html">
    
      
      
        &lt;link rel=&quot;stylesheet&quot; class=&quot;aplayer-secondary-style-marker&quot; href=&quot;/assets/css/APlayer.min.css&quot;&gt;&lt;script src=&quot;/assets/js/APlayer.min.js&quot; cla
      
    
    </summary>
    
      <category term="Git" scheme="http://yoursite.com/categories/Git/"/>
    
    
      <category term="Git" scheme="http://yoursite.com/tags/Git/"/>
    
  </entry>
  
  <entry>
    <title>2019-01 - 02心得</title>
    <link href="http://yoursite.com/2019/02/10/%E6%96%B0%E5%B9%B4%E6%84%9F%E6%82%9F/"/>
    <id>http://yoursite.com/2019/02/10/新年感悟/</id>
    <published>2019-02-10T15:30:13.897Z</published>
    <updated>2019-02-10T15:54:43.982Z</updated>
    
    <content type="html"><![CDATA[<link rel="stylesheet" class="aplayer-secondary-style-marker" href="/assets/css/APlayer.min.css"><script src="/assets/js/APlayer.min.js" class="aplayer-secondary-script-marker"></script><p>在新的一年的这两个月中，看了书看了教学视频，也在掘金认识了一些人，加了一些学习交流群，看到了很多志同道合的人，很多也是和我一样科班出身然后也自己努力学习的前端后端的同学们，大家有问题就拿出来讨论一起学习你帮我解决一下问题你帮我解决一下问题这样的学习氛围非常的好，<br>看到小伙伴们都很用功的学习，大年三十也是有人开着电脑敲着代码，奋力的去学习，生怕被人超越了看到被人都很努力的在学习进步，你自己就在那里玩手机玩电脑的闲着，不是老天不公平而是你自己不努力怨不得天，当别人在拼命学习的时候你在为自己的小小能力而沾沾自喜的时候你已经输了<br>我不希望自己到了毕业也不知道找什么工作，什么工作适合自己，我想通过自己的努力改变生活改变自己的未来，所以我自己也开始了学习，但是知识永远是学不完的只能每天学一点慢慢的去积累，只有拼了才知道自己到底有多强大，也只有拼了才知道自己到底有多么的渺小，世界之大无奇不有<br>比你强的人大有人在，比你弱的也是大有人在，为何不做人中龙凤呢？只有自己强大起来才不会被人欺负被人看不起，我不想靠别人帮我什么，欠了的人情是要还的，我一直希望的是只要实力够强大就不会需要别人的帮助，所以自己要强大起来，用什么强大自己呢，那就只有学习，不断的学习<br>在it的领域中技术的更新换代是非常快了，我们还没来得及学完这一个，又到了下一个新的时代了，作为一个学生我非常想知道的是在职场中到底我们需要做什么可以做什么，需要很多的实战经验，但是经验是需要积累起来的，问过很多的大神在工作中要做什么，问很多的实战的东西，但是别人的<br>回答也只是做项目做多了就会有经验了，作为一个学生而且很多都是自学的自己对于做项目我是非常的吃力的，即使我可以写出前后端交互的项目来，毕竟也是一些小的项目，对于权限分级啊、路由拦截啊等的一些我都不会，遇到稍微难一点的业务逻辑我就要很久很久才可以想出来，而且还是用了<br>很多很笨的方法去实现，所以2019年的目标就是打好基础练好技术，找一份实习<br>2019目标：<br>3月完成小程序<br>4月vue的项目实战，reacts学习<br>5月 项目实战<br>后面都是一些实战，暑假找一份实习锻炼一下自己</p>]]></content>
    
    <summary type="html">
    
      
      
        &lt;link rel=&quot;stylesheet&quot; class=&quot;aplayer-secondary-style-marker&quot; href=&quot;/assets/css/APlayer.min.css&quot;&gt;&lt;script src=&quot;/assets/js/APlayer.min.js&quot; cla
      
    
    </summary>
    
      <category term="个人" scheme="http://yoursite.com/categories/%E4%B8%AA%E4%BA%BA/"/>
    
    
      <category term="个人" scheme="http://yoursite.com/tags/%E4%B8%AA%E4%BA%BA/"/>
    
  </entry>
  
  <entry>
    <title>解决Git ssh 密钥忘记密码</title>
    <link href="http://yoursite.com/2019/02/10/git-ssh%E5%BF%98%E8%AE%B0%E5%AF%86%E7%A0%81/"/>
    <id>http://yoursite.com/2019/02/10/git-ssh忘记密码/</id>
    <published>2019-02-10T15:14:32.896Z</published>
    <updated>2019-03-11T02:01:33.630Z</updated>
    
    <content type="html"><![CDATA[<link rel="stylesheet" class="aplayer-secondary-style-marker" href="/assets/css/APlayer.min.css"><script src="/assets/js/APlayer.min.js" class="aplayer-secondary-script-marker"></script><h1 id="前言"><a href="#前言" class="headerlink" title="前言"></a>前言</h1><ul><li>如果在之前有创建SSH的时候设置过密码，那就很有可能git操作时出现忘记密码的尴尬情况。</li><li>今天我就忘记了密码，在网上找到了解决的方法就记录下来</li></ul><h1 id="解决"><a href="#解决" class="headerlink" title="解决"></a>解决</h1><ul><li>在ssh密码忘记密码我们是无法去修改的，这个是一个保护机制，我们无法修改当是我们可以重新创建一个ssh密钥</li></ul><ol><li><p>进入本地ssh</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">$ <span class="built_in">cd</span> ~/.ssh</span><br></pre></td></tr></table></figure></li><li><p>查看文件 ls</p></li></ol><ul><li>如果本地有ssh秘钥的话会有id_rsa.pub，config，known_hosts等文件。如果本地没有ssh的话cd ~/.ssh这一步可能就会有找不到文件的提示了。 </li><li>一般忘记密码都是已经有的我们就不说了</li></ul><ol start="3"><li>创建新的ssh</li></ol><ul><li>输入这个后面改自己git的邮箱<figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">$ ssh-keygen -t rsa -b 4096 -C <span class="string">"905477376@qq.com"</span></span><br></pre></td></tr></table></figure></li></ul><ol start="4"><li>新密码</li></ol><ul><li>如果本地有ssh，会出现如下提示：<br><img src="/git/gitssh.png" alt="gitssh"><br>这里选择y，表示覆盖本地的ssh key，这也就是ssh秘钥删除的意思。<br>接着就是让你输入密码的，可以直接回车不设置密码，我还是设置密码的</li></ul><ol start="5"><li>查看密钥</li></ol><ul><li>把之前的公钥删掉添加新的</li><li>输入代码查看密钥然后复制到 GitHub或者码云上<figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">$ cat ~/.ssh/id_rsa.pub</span><br></pre></td></tr></table></figure></li></ul><p><img src="/git/gitssh2.png" alt="gitssh"></p><h1 id="后记"><a href="#后记" class="headerlink" title="后记"></a>后记</h1><ul><li>这就是我实践了的方法</li><li>欢迎一起学习交流</li><li><a href="https://yhf7.github.io/" target="_blank" rel="noopener">欢迎进入我的博客</a>：<a href="https://yhf7.github.io/" target="_blank" rel="noopener">https://yhf7.github.io/</a></li><li>如果有什么侵权的话，请及时添加小编微信以及qq也可以来告诉小编（905477376微信qq通用），谢谢！</li></ul>]]></content>
    
    <summary type="html">
    
      
      
        &lt;link rel=&quot;stylesheet&quot; class=&quot;aplayer-secondary-style-marker&quot; href=&quot;/assets/css/APlayer.min.css&quot;&gt;&lt;script src=&quot;/assets/js/APlayer.min.js&quot; cla
      
    
    </summary>
    
      <category term="Git" scheme="http://yoursite.com/categories/Git/"/>
    
    
      <category term="Git" scheme="http://yoursite.com/tags/Git/"/>
    
  </entry>
  
  <entry>
    <title>Vue动画多个元素嵌套使用过渡</title>
    <link href="http://yoursite.com/2019/01/17/vue%20%E5%8A%A8%E7%94%BB%E5%B5%8C%E5%A5%97%E4%BD%BF%E7%94%A8/"/>
    <id>http://yoursite.com/2019/01/17/vue 动画嵌套使用/</id>
    <published>2019-01-17T04:01:32.491Z</published>
    <updated>2019-03-11T02:09:50.833Z</updated>
    
    <content type="html"><![CDATA[<link rel="stylesheet" class="aplayer-secondary-style-marker" href="/assets/css/APlayer.min.css"><script src="/assets/js/APlayer.min.js" class="aplayer-secondary-script-marker"></script><h1 id="前言"><a href="#前言" class="headerlink" title="前言"></a>前言</h1><ul><li>在我们前端的工作中我们的去写页面，总会觉得这样的效果给到用户好像很干没有什么体验</li><li>那我们就想搞搞新意思？</li><li>弄点动画上去憋，那么弄动画我又想他滚动又想他偏移又想有渐变效果</li><li>渐变和移动可以写在一起，但是滚动和偏移好像不可以一起执行喔</li><li>那我们就要分开两步来执行但是，vue的transition里面好像不可以同时执行两个transform</li><li>所以我们就来解决这个问题</li><li>其实嘛是可以嵌套使用的哦</li></ul><h1 id="工具-资料"><a href="#工具-资料" class="headerlink" title="工具/资料"></a>工具/资料</h1><ul><li>mac os 10.13.3</li><li>vue官方文档 <a href="https://cn.vuejs.org/v2/guide/transitions.html" target="_blank" rel="noopener">https://cn.vuejs.org/v2/guide/transitions.html</a></li><li>vs code</li></ul><h1 id="开始"><a href="#开始" class="headerlink" title="开始"></a>开始</h1><ol><li><p>套用我们的 transition</p><ul><li>在我们需要定义效果的外面包上 transition</li><li>这个 name 呢是自定义的也可以不写，个人认为最好是写一下<figure class="highlight html"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">transition</span> <span class="attr">name</span>=<span class="string">"move"</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">div</span> <span class="attr">class</span>=<span class="string">"cart-decrease"</span> <span class="attr">v-show</span>=<span class="string">"food.count&gt;0"</span> @<span class="attr">click</span>=<span class="string">"decreaseCart"</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">span</span> <span class="attr">class</span>=<span class="string">"inner icon-remove_circle_outline"</span>&gt;</span><span class="tag">&lt;/<span class="name">span</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;/<span class="name">div</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">transition</span>&gt;</span></span><br></pre></td></tr></table></figure></li></ul></li><li><p>定义Css</p><ul><li>如果使用name了，-前面写的就是name定义的名称，如果没有写那就直接用v就好</li><li>在我们要嵌套动画的地方也是向平时css关系那些嵌套进去就好了<figure class="highlight css"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">/* 这里我们定义了滑动和渐变 */</span></span><br><span class="line"><span class="selector-class">.move-enter-active</span>, <span class="selector-class">.move-leave-active</span></span><br><span class="line">    <span class="selector-tag">transition</span>: <span class="selector-tag">all</span> <span class="selector-class">.4s</span> <span class="selector-tag">linear</span></span><br><span class="line">    <span class="selector-tag">opacity</span>: 1</span><br><span class="line">    <span class="selector-tag">transform</span> <span class="selector-tag">translate3d</span>(0,0,0)</span><br><span class="line"><span class="selector-class">.move-enter</span>, <span class="selector-class">.move-leave-to</span> <span class="comment">/* .fade-leave-active below version 2.1.8 */</span></span><br><span class="line">    <span class="selector-tag">opacity</span>: 0</span><br><span class="line">    <span class="selector-tag">transform</span> <span class="selector-tag">translate3d</span>(24<span class="selector-tag">px</span>,0,0)</span><br><span class="line"></span><br><span class="line"><span class="comment">/* </span></span><br><span class="line"><span class="comment">    定义滚动</span></span><br><span class="line"><span class="comment">    这里我是动画下的，span想添加效果</span></span><br><span class="line"><span class="comment">    那么我们就把类名拼接在后面去使用就好了</span></span><br><span class="line"><span class="comment">    如果添加了不生效，那就换一个类名，因为有一些是官方的类名是不允许使用的</span></span><br><span class="line"><span class="comment"> */</span></span><br><span class="line"><span class="selector-class">.move-enter-active</span> <span class="selector-class">.inner</span>, <span class="selector-class">.move-leave-active</span> <span class="selector-class">.inner</span></span><br><span class="line">    <span class="selector-tag">transition</span>: <span class="selector-tag">all</span> <span class="selector-class">.4s</span> <span class="selector-tag">linear</span></span><br><span class="line">    <span class="selector-tag">transform</span> <span class="selector-tag">rotate</span>(0)</span><br><span class="line"><span class="selector-class">.move-enter</span> <span class="selector-class">.inner</span>, <span class="selector-class">.move-leave-to</span> <span class="selector-class">.inner</span></span><br><span class="line">    <span class="selector-tag">transform</span> <span class="selector-tag">rotate</span>(180<span class="selector-tag">deg</span>)</span><br></pre></td></tr></table></figure></li></ul></li></ol><ul><li>这样我们就实现了即滚动也偏移</li></ul><h1 id="后记"><a href="#后记" class="headerlink" title="后记"></a>后记</h1><ul><li>看了有没有发现很简单哈，其实本来也就是很简单嘛，只是一开始傻乎乎的用了in使得效果没粗来以为不可以这样用</li><li>这是本人的学习问题记录的笔记，有需要的可以借鉴</li><li>欢迎添加微信交流学习</li><li><a href="https://yhf7.github.io/" target="_blank" rel="noopener">欢迎进入我的博客</a>：<a href="https://yhf7.github.io/" target="_blank" rel="noopener">https://yhf7.github.io/</a></li><li>如果有什么侵权的话，请及时添加小编微信以及qq也可以来告诉小编（905477376微信qq通用），谢谢！</li></ul>]]></content>
    
    <summary type="html">
    
      
      
        &lt;link rel=&quot;stylesheet&quot; class=&quot;aplayer-secondary-style-marker&quot; href=&quot;/assets/css/APlayer.min.css&quot;&gt;&lt;script src=&quot;/assets/js/APlayer.min.js&quot; cla
      
    
    </summary>
    
      <category term="Vue" scheme="http://yoursite.com/categories/Vue/"/>
    
    
      <category term="Vue笔记" scheme="http://yoursite.com/tags/Vue%E7%AC%94%E8%AE%B0/"/>
    
  </entry>
  
  <entry>
    <title>安装/解决Hexo next搜索错误笔记</title>
    <link href="http://yoursite.com/2019/01/09/%E6%90%9C%E7%B4%A2%E9%94%99%E8%AF%AF/"/>
    <id>http://yoursite.com/2019/01/09/搜索错误/</id>
    <published>2019-01-09T13:08:00.585Z</published>
    <updated>2019-03-11T02:20:46.368Z</updated>
    
    <content type="html"><![CDATA[<link rel="stylesheet" class="aplayer-secondary-style-marker" href="/assets/css/APlayer.min.css"><script src="/assets/js/APlayer.min.js" class="aplayer-secondary-script-marker"></script><h1 id="前言"><a href="#前言" class="headerlink" title="前言"></a>前言</h1><ul><li>搜索功能无效，一直在哪转圈圈，头都晕了</li><li>说起就来气，添加了那么多篇文章，突然就这几天就不可以用hexo的搜索功能，我写了那么多篇文章突然今天写项目发现不记得想来查一下居然用不了气得我</li><li>横看竖看都不知道错哪里，配置了好几遍也是不行</li><li>最后还是被我ko了</li><li>赶紧记录下来下一次就不用怕了</li></ul><h1 id="所需工具-资料"><a href="#所需工具-资料" class="headerlink" title="所需工具/资料"></a>所需工具/资料</h1><ul><li>mac 10.13.3</li><li>VS code (软件很多自己喜欢，这个失败了一会说原因)</li><li>Chrome</li><li>Sublime (这个是解决问题的关键哦)</li></ul><h1 id="开始ko错误之旅"><a href="#开始ko错误之旅" class="headerlink" title="开始ko错误之旅"></a>开始ko错误之旅</h1><p><img src="/hexo/hexo-x1.png" alt="hexo"></p><h3 id="查错第一步（其实和安装没有啥区别）"><a href="#查错第一步（其实和安装没有啥区别）" class="headerlink" title="查错第一步（其实和安装没有啥区别）"></a>查错第一步（其实和安装没有啥区别）</h3><ol><li>查看package</li></ol><ul><li>根目录 package.json<br>看看有没有 hexo-generator-searchdb 看这个的主要原因的看看有没有安装这个中间件，如果没有安装就安装一下<figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">$ npm install hexo-generator-searchdb --save</span><br></pre></td></tr></table></figure></li></ul><ol start="2"><li>查看 /themes/next/_config.yml 配置</li></ol><ul><li>搜索 local_search看看这个下面的enable 是否处于<figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">local_search:</span><br><span class="line">  enable: true</span><br></pre></td></tr></table></figure></li></ul><ol start="3"><li>查看添加配置（这个我个人觉得嘛加和不加没有区别）</li></ol><ul><li>添加 /themes/next/_config.yml<figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line">search:</span><br><span class="line">  path: search.xml</span><br><span class="line">  field: post</span><br><span class="line">  format: html</span><br><span class="line">  limit: 10000</span><br></pre></td></tr></table></figure></li></ul><h3 id="查错第二步"><a href="#查错第二步" class="headerlink" title="查错第二步"></a>查错第二步</h3><ol><li>有可能是文字的数量太多引起的</li></ol><ul><li>可以修改刚才配置的 search：内的limit 把数值加大试试</li></ul><ol start="2"><li>查看文件名什么的有没有定义错误或者是什么弄错了</li></ol><ul><li>直接 sudo hexo g 打包就知道了，如果报错了那就是文件有问题</li></ul><h3 id="查错第三步（关键，很多的问题会出在这里）"><a href="#查错第三步（关键，很多的问题会出在这里）" class="headerlink" title="查错第三步（关键，很多的问题会出在这里）"></a>查错第三步（关键，很多的问题会出在这里）</h3><ul><li>有可能是文章内部的一下符号引起的错误 （我就知道是这样引起的为什么不执行我真的不懂）（这样的错误有可能是因为跟编辑器或者输入法有关系）</li><li>字符错误 <span style="color:red">Bytes: 0x08 0xE4 0xB8 0x80</span> 其实也是空格只是不识别的软件才可以看的出了</li><li>在我们的 vs code 这个软件呢就是识别了这种符号所以并没有显示出了 在我们的Sublime 就是不识别直接就可以显示出来了<h4 id="解决问题方法一-（这些只可以在sublime或者其他的软件中做，vs-code不可以的哦）"><a href="#解决问题方法一-（这些只可以在sublime或者其他的软件中做，vs-code不可以的哦）" class="headerlink" title="解决问题方法一 （这些只可以在sublime或者其他的软件中做，vs code不可以的哦）"></a>解决问题方法一 （这些只可以在sublime或者其他的软件中做，vs code不可以的哦）</h4></li><li>直接就在 search.xml 文件中 直接搜索 \x08 或者 \u0008删掉</li><li>但是呢这样的方法治标不治本啊</li><li>在你下一次的添加文件编译的时候还是会带上的<h4 id="解决方法二（方法一治标不治本那我们再来一个方法）"><a href="#解决方法二（方法一治标不治本那我们再来一个方法）" class="headerlink" title="解决方法二（方法一治标不治本那我们再来一个方法）"></a>解决方法二（方法一治标不治本那我们再来一个方法）</h4></li><li>直接找到错误文件 这里我是把文件都考出来然后把一些比较早点文件先放回去</li><li>然后后面都文件一个一个那样去测试找到错误文件 （主要是我一开始不知道是这样的错误才那样去找）</li><li>现在知道了错误直接就在 Sublime 打开所有的md看看有没有 上面的错误字符 有就删掉就可以了</li><li>这个是我的错误（每个人的都可能不一样）<br><img src="/hexo/hexo-x2.png" alt="hexo"></li></ul><h1 id="后记"><a href="#后记" class="headerlink" title="后记"></a><span>后记</span></h1><ul><li>终于吐槽完，也说完错误了，这是我个人的一个查错以及解决的方法，希望有缘人看到可以帮到你</li><li>这些都是我的一些笔记，欢迎一起学习讨论</li><li><a href="https://yhf7.github.io/" target="_blank" rel="noopener">欢迎进入我的博客</a>：<a href="https://yhf7.github.io/" target="_blank" rel="noopener">https://yhf7.github.io/</a></li><li>如果有什么侵权的话，请及时添加小编微信以及qq也可以来告诉小编（905477376微信qq通用），谢谢！</li></ul>]]></content>
    
    <summary type="html">
    
      
      
        &lt;link rel=&quot;stylesheet&quot; class=&quot;aplayer-secondary-style-marker&quot; href=&quot;/assets/css/APlayer.min.css&quot;&gt;&lt;script src=&quot;/assets/js/APlayer.min.js&quot; cla
      
    
    </summary>
    
      <category term="Hexo" scheme="http://yoursite.com/categories/Hexo/"/>
    
    
      <category term="Hexo笔记" scheme="http://yoursite.com/tags/Hexo%E7%AC%94%E8%AE%B0/"/>
    
  </entry>
  
  <entry>
    <title>网上抓取 Git进阶笔记</title>
    <link href="http://yoursite.com/2019/01/09/Git%E8%BF%9B%E9%98%B6/"/>
    <id>http://yoursite.com/2019/01/09/Git进阶/</id>
    <published>2019-01-09T12:29:35.691Z</published>
    <updated>2019-03-11T02:25:24.359Z</updated>
    
    <content type="html"><![CDATA[<link rel="stylesheet" class="aplayer-secondary-style-marker" href="/assets/css/APlayer.min.css"><script src="/assets/js/APlayer.min.js" class="aplayer-secondary-script-marker"></script><h1 id="前言"><a href="#前言" class="headerlink" title="前言"></a>前言</h1><ul><li>这个git的解说是我在网上看到然后觉得挺好抓取下来给自己用的，并非个人所写</li></ul><p>Git 进阶知识点<br>作为分布式的版本控制系统，Git 的操作指令非常多，但是我们可以灵活的组合使用一些常用指令，就可以玩转大多数的日常 Git 使用场景。</p><h1 id="1、温习-Git-工作-区域"><a href="#1、温习-Git-工作-区域" class="headerlink" title="1、温习 Git 工作  区域"></a>1、温习 Git 工作  区域</h1><p>先来温习一下 Git 的工作区域划分：工作目录、暂存区、本地仓库，实际操作中，我们需要知道每一步操作发生在哪个工作区域，那么再复杂的 Git 问题都能  轻松解决。</p><p>先看一张逻辑工作区域划分图：<br><img src="/git/git_07.png" alt="git_07.png"></p><p>物理  工作区域划分图：<br><img src="/git/git_08.png" alt="git_07.png"></p><ul><li>.git 是隐藏文件夹，大多版本控制软件都会用一个隐藏的文件夹作为其本地版本仓库，SVN 也是如此。用户的每一步操作都被这个隐藏文件夹里的代码记录着。</li></ul><h1 id="2、一次完整的本地提交"><a href="#2、一次完整的本地提交" class="headerlink" title="2、一次完整的本地提交"></a>2、一次完整的本地提交</h1><p>虽然 Git 是分布式的  版本控制系统，工作中，我们都会有远程仓库的概念，但只需熟练玩转本地仓库即可，因为远程仓库不过是别人电脑上的本地仓库。接下来我们来看看一次完整的提交，是如何在三个工作区域之间转换的：<br><img src="/git/git_09.png" alt="git_07.png"></p><p>上图中也引出了 git reset 回滚命令的三个参数：–soft –mixed –hard，三个  参数回滚的程度  逐渐增强，实际使用中可以根据具体需求灵活使用。</p><p>另外不要忽略了 git commit 只提交那些被记录到了暂存区的修改。</p><h1 id="3、使用好-checkout"><a href="#3、使用好-checkout" class="headerlink" title="3、使用好 checkout"></a>3、使用好 checkout</h1><p>checkout 可能是 git 中比较多功能的一个命令。</p><ul><li>git checkout [分支名] : 切换分支。</li><li>git checkout [commit 序列号] : 穿越到指定的某次 commit。</li><li>git checkout -b [分支名] : 创建并切换分支。</li><li>git checkout –ours/theirs : 解决冲突时用来检出某方的提交。</li><li>git checkout [文件名/路径/.] : 丢弃某些文件/文件夹/所有修改。</li></ul><p>所以 checkout 这个检出操作，不仅仅是用来切换分支，还有很多强大的功能；注意点：git checkout . 指令丢弃的文件是无法找回的，使用请谨慎，防止车祸现场。</p><h1 id="4、使用简单的组合命令进行历史修改"><a href="#4、使用简单的组合命令进行历史修改" class="headerlink" title="4、使用简单的组合命令进行历史修改"></a>4、使用简单的组合命令进行历史修改</h1><h3 id="修改历史中的某次提交信息"><a href="#修改历史中的某次提交信息" class="headerlink" title="修改历史中的某次提交信息"></a>修改历史中的某次提交信息</h3><p>由于某些原因， 有时候总要修改一下提交历史，或者叫重写历史，最简单的修改最近一次提交命令 git commit –amend，然后会进入文本编辑状态，修改你的提交信息。</p><p>但是如果不是最近一次提交，而是历史中较远的前几条信息，那么单纯使用 git commit –amend 就不行了，比如下图这种情况，想要将 “第一次提交” 改为 “首次提交”。<br><img src="/git/git_10.png" alt="git_07.png"></p><p>这时你可能马上会想到 git rebase 变基命令，但是对于这种情况，我们可以使用  git checkout 组合 git commit –amend 完成同样的工作:</p><p>1、先用 git checkout 36ae20…  穿越回第一次提交的节点中，此时我们执行 git log 看到的只有第一次提交的 commit:<br><img src="/git/git_11.png" alt="git_07.png"></p><p>2、那么接下来你也猜到了，执行 git commit –amend 吧。<br>3、然后再次 git checkout master  穿越回当前分支的最新节点。</p><h3 id="合并多次提交历史-为一次"><a href="#合并多次提交历史-为一次" class="headerlink" title="合并多次提交历史  为一次"></a>合并多次提交历史  为一次</h3><p>合并多次历史是比较常见的需求，同样我们先不用 rebase，使用一些常用的命令；例如我们要将上边例子中的三次提交合并为一次，我们可以先用 reset 回滚多次历史提交，然后 commit –amend 重写提交即可：</p><p>1、 先用 git reset –soft 36ae20…，软回滚到第一次提交(36ae20…是历史中第一次的提交序列号，这里也可以使用 HEAD~3 这种头指针回数的形式)，这时候  git log 又变成了只有第一次的 commit 信息：</p><p><img src="/git/git_11.png" alt="git_07.png"></p><p>但是通过 git status 可以看到其他两次提交都已经被我们  使用 reset –soft 将最近两次提交回滚到了暂存区：<br><img src="/git/git_13.png" alt="git_07.png"></p><p>2、接下来，使用 git commit –amend 重新提交并修改最近一次的 commit 信息即可。</p><p>使用 reset –soft 我们将提交回滚到暂存区，这样可以在重新提交的时候，少写一次 git add。<br>如果多次合并的 commit 不是从最近一次的提交历史  开始，那么久多使用一次 git checkout 。</p><p>你看，貌似不需要  学习 rebase 也能完成 Git 重写历史。</p><h1 id="5、使用-git-rebase-修改历史"><a href="#5、使用-git-rebase-修改历史" class="headerlink" title="5、使用 git rebase  修改历史"></a>5、使用 git rebase  修改历史</h1><p>对于  4、使用简单的组合命令进行历史修改 中的案例，我们可以使用更加高级的 git 工具 rebase，使用 rebase 来干这些事情会显得更加专业，当然 rebase 的功能也更加强大一些。但是依然要写出来 4、使用简单的组合命令进行历史修改 这一部分内容，是想表达，有时候一些问题的解决办法并不唯一，灵活使用一些我们已经学过的  知识点也能曲线救国；假如你还不会使用 rebase，眼下又个紧急的 git 历史合并任务要做，马上去学习 rebase 又有些来不及，那么只能急中生智了。</p><p>接着  4 中的例子，我们使用 git rebase -i 36ae20… ，然后我们会看到如下的文本编辑界面：</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br></pre></td><td class="code"><pre><span class="line">pick 1f737d8 第二次提交</span><br><span class="line">pick 8e401d5 第三次提交</span><br><span class="line">pick bc9c6f0 第四次提交</span><br><span class="line"></span><br><span class="line"><span class="comment"># Rebase d973330..bc9c6f0 onto d973330 (3 commands)</span></span><br><span class="line"></span><br><span class="line"><span class="comment">#</span></span><br><span class="line"></span><br><span class="line"><span class="comment"># Commands:</span></span><br><span class="line"></span><br><span class="line"><span class="comment"># p, pick = use commit</span></span><br><span class="line"></span><br><span class="line"><span class="comment"># r, reword = use commit, but edit the commit message</span></span><br><span class="line"></span><br><span class="line"><span class="comment"># e, edit = use commit, but stop for amending</span></span><br><span class="line"></span><br><span class="line"><span class="comment"># s, squash = use commit, but meld into previous commit</span></span><br><span class="line"></span><br><span class="line"><span class="comment"># f, fixup = like "squash", but discard this commit's log message</span></span><br><span class="line"></span><br><span class="line"><span class="comment"># x, exec = run command (the rest of the line) using shell</span></span><br><span class="line"></span><br><span class="line"><span class="comment"># d, drop = remove commit</span></span><br><span class="line"></span><br><span class="line"><span class="comment">#</span></span><br><span class="line"></span><br><span class="line"><span class="comment"># These lines can be re-ordered; they are executed from top to bottom.</span></span><br><span class="line"></span><br><span class="line"><span class="comment">#</span></span><br><span class="line"></span><br><span class="line"><span class="comment"># If you remove a line here THAT COMMIT WILL BE LOST.</span></span><br><span class="line"></span><br><span class="line"><span class="comment">#</span></span><br><span class="line"></span><br><span class="line"><span class="comment"># However, if you remove everything, the rebase will be aborted.</span></span><br><span class="line"></span><br><span class="line"><span class="comment">#</span></span><br><span class="line"></span><br><span class="line"><span class="comment"># Note that empty commits are commented out</span></span><br></pre></td></tr></table></figure><p>注释中，我们看到 reword edit squash 等指令，这里我们把 pick 改为 edit。</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line">edit 1f737d8 第二次提交</span><br><span class="line">pick 8e401d5 第三次提交</span><br><span class="line">pick bc9c6f0 第四次提交</span><br></pre></td></tr></table></figure><p>然后保存退出，接下来 git 会把你带入第二次的 commit 节点， 并有如下提示：<br><img src="/git/git_14.png" alt="git_07.png"></p><p>到这里，我们需要执行 git commit –amend 来执行 commit 修改。编辑保存后，再执行：</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">$ git rebase --<span class="built_in">continue</span></span><br></pre></td></tr></table></figure><p>然后  git 把你带回到 master 分支的最新节点，整个操作完成。</p><p>如果要合并提交，我们需要把 edit 改为 squash：<br><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line">pick 1f737d8 修改为第二次提交</span><br><span class="line">squash 8e401d5 第三次提交</span><br><span class="line">squash bc9c6f0 第四次提交</span><br></pre></td></tr></table></figure></p><p>接下来，git 会进入另一个编辑界面：</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment"># This is a combination of 3 commits.</span></span><br><span class="line"></span><br><span class="line"><span class="comment"># This is the 1st commit message:</span></span><br><span class="line"></span><br><span class="line">修改为第二次提交</span><br><span class="line"></span><br><span class="line"><span class="comment"># This is the commit message #2:</span></span><br><span class="line"></span><br><span class="line">第三次提交</span><br><span class="line"></span><br><span class="line"><span class="comment"># This is the commit message #3:</span></span><br><span class="line"></span><br><span class="line">第四次提交</span><br><span class="line"></span><br><span class="line"><span class="comment"># Please enter the commit message for your changes. Lines starting</span></span><br><span class="line"></span><br><span class="line"><span class="comment"># with '#' will be ignored, and an empty message aborts the commit.</span></span><br></pre></td></tr></table></figure><p>这个界面里，可以修改你最终要显示的提交信息，这里直接保存退出，完成合并，此时 git log 显示如下：</p><p><img src="/git/git_15.png" alt="git_15.png"></p><p>除了修改和  合并提交，还可以使用 git rebase 进行拆分、删除提交操作，就不一一演示。</p><p>最终你会发现，使用 git rebase 来修改历史步骤比较繁琐，还不如使用 4、使用简单的组合命令进行历史修改 的方式来操作简单。</p><h4 id="理解分支合并中的-Fast-forward-merge-rebase"><a href="#理解分支合并中的-Fast-forward-merge-rebase" class="headerlink" title="理解分支合并中的 Fast-forward/merge/rebase"></a>理解分支合并中的 Fast-forward/merge/rebase</h4><p>在分支合并的场景  中，我们有时会看到 Fast-forward ， Fast-Forword 很好理解，在 Git 中就是它直译  过来的意思’快进‘，下面我做了四个小视频，来解释 Fast-forward/merge/rebase。</p><p>观看视频前，我们以下图做个 demo 背景说明：</p><p><img src="/git/git_16.png" alt="git_15.png"></p><p>图中有两条分支，master 和 feature1 分支，feature1 是从 master 的 C2 节点拉出来的分支，背景说明完毕。</p><p>Fast-forward 合并模式</p><video controls width="100%" height="100%"><br>    <source src="/git/fast-forward.mov"><br></video><p>Fast-forward 的合并模式永远不会有冲突产生。</p><h4 id="非-Fast-forward-合并模式"><a href="#非-Fast-forward-合并模式" class="headerlink" title="非 Fast-forward 合并模式"></a>非 Fast-forward 合并模式</h4><video controls width="100%" height="100%"><br>    <source src="/git/nofast-forward.mov"><br></video><p>这种非 Fast-forward 的合并模式下才有可能发生合并冲突。</p><h4 id="merge-过程"><a href="#merge-过程" class="headerlink" title="merge 过程"></a>merge 过程</h4><p>为了和下边的 rebase 做对比，视频中在 feature1 分支中做 git merge master 操作</p><p><video controls width="100%" height="100%"><br>    <source src="/git/from-feature-merge.mov"><br></video></p><h4 id="rebase-过程"><a href="#rebase-过程" class="headerlink" title="rebase 过程"></a>rebase 过程</h4><p><video controls width="100%" height="100%"><br>    <source src="/git/rebase-process.mov"><br></video><br>前边我们用 rebase 来重写历史，这里的 rebase 用来在分支之间合并变基，变基可以理解为改变基点，基点就是某条分支在另一条分支上的起点，这个点是出现分支的点；rebase 和 merge 在从结果上来看，及其相似，但是其过程却大不相同，我想看了视频，你应该理解了。</p><p>rebase 的目的并不是做一次合并，而是为了让某条分支  与主分支的  当前进程保持同步更新，进而在合入主分支的时候，能够以 Fast-forward 的过程合并，避免冲突；rebase 的过程  有冲突的可能，但是这种冲突时发生在当前分支，不会影响主分支，所以也不会影响和你一起合作的其他小伙伴。所以  在多人合作的时候经常使用 rebase 是个好习惯。</p><p>一次完整的 rebase 场景</p><p><video controls width="100%" height="100%"><br>    <source src="/git/rebase-demo.mov"><br></video></p><h1 id="解决冲突"><a href="#解决冲突" class="headerlink" title="解决冲突"></a>解决冲突</h1><p>解决冲突其实很简单，理解了 git 本地操作和 git merge 过程，解决冲突就是个体力活了；cherry-pick/merge/rebase/revert 等操作都有可能发生冲突；</p><p>冲突产生时我们只需要通过 git status 查看具体发生冲突的文件，然后打开编辑文件，选择保留的内容后保存文件，然后继续 merge 或者 rebase，指令分别是：git merge –continuegit rebase –continue；除了 –continue 参数，我们还可以使用 –abort 来终止 merge 或者 rebase 。</p><p>之所以说解决冲突是个体力活主要看，冲突文件的数量和内容多不多，如果冲突较多时，我们一一修改可能就比较累了，这时候可以借助 checkout 指令来保留冲突双方的其中一方修改：</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">$ git checkout --ours // 保留自己的修改</span><br><span class="line">$ git checkout --their // 保留别人的修改</span><br></pre></td></tr></table></figure><p>注意点：rebase 的过程，ours 和 theirs 是反过来的。当然，我们也可以借助图像化工具来解决冲突：<br><img src="/git/git_17.png" alt="git"></p><p>选择后，会进入图像化操作：</p><p><img src="/git/git_18.png" alt="git"></p><h1 id="关联远程仓库"><a href="#关联远程仓库" class="headerlink" title="关联远程仓库"></a>关联远程仓库</h1><p>当我们需要关联远程仓库的时候，可以通过 git remote add [远程仓库命名][ssh/http 地址]，例如：</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">$ git remote add origin git@git.coding.net:demo/demo.git</span><br></pre></td></tr></table></figure><p>这里把远程仓库 <a href="mailto:git@git.coding.net" target="_blank" rel="noopener">git@git.coding.net</a>:demo/demo.git 命名为 origin。一个仓库可以关联多个远程仓库，但是仓库名不能相同：</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">$ git remote add gh git@git.github.com:demo/demo.git</span><br></pre></td></tr></table></figure><p>这里，我们把另一个远程仓库 <a href="mailto:git@git.github.com" target="_blank" rel="noopener">git@git.github.com</a>:demo/demo.git 命名为 gb 关联了本地仓库，当我们需要同时往多个远程仓库推送文件时，可以使用了。</p><p>最后通过 git remote -v 可以查看本地仓库关联的所有远程仓库。</p><h1 id="git-config-配置文件"><a href="#git-config-配置文件" class="headerlink" title="git config 配置文件"></a>git config 配置文件</h1><p>在 Mac 系统中，git 的配置文件有两处，一个是全局配置文件：~/.gitconfig ，在用户目录下；另一个是当前仓库的配置文件，在 .git 文件夹下，两种重复时，优先使用 .git 文件下的 config 文件。</p><p><img src="/git/git_20.png" alt="git"></p><p>config 文件的内容：</p><p><img src="/git/git_19.png" alt="git"></p><p>一些情况下，我们可以直接编辑 config 文件来修改 git 的配置。</p><h1 id="git-常用指令表-参数省略"><a href="#git-常用指令表-参数省略" class="headerlink" title="git 常用指令表 参数省略"></a>git 常用指令表 参数省略</h1><ul><li>本地操作<ul><li>git init</li><li>git add/rm</li><li>git commit</li><li>git squash</li><li>git rebase</li><li>git checkout</li></ul></li><li>状态查看及信息检查和比较<ul><li>git status</li><li>git log</li><li>git diff</li></ul></li><li>配置及别名<ul><li>git config</li><li>git alias</li></ul></li><li>分支操作<ul><li>git branch</li><li>git merge</li><li>git rebase</li><li>git cherry-pick</li><li>git checkout</li></ul></li><li>远程操作<ul><li>git clone</li><li>git remote</li><li>git push/pull</li><li>git fetch</li><li>git 时间旅行：分支切换、 回退历史、保存/清理现场</li><li>git reset</li><li>git revert</li><li>git stash</li><li>git checkout</li><li>git clean -fdx</li></ul></li></ul><h1 id="后记"><a href="#后记" class="headerlink" title="后记"></a>后记</h1><ul><li>个人认为这个git的笔记还是挺不错的</li><li><a href="https://yhf7.github.io/" target="_blank" rel="noopener">欢迎进入我的博客</a>：<a href="https://yhf7.github.io/" target="_blank" rel="noopener">https://yhf7.github.io/</a></li><li>如果有什么侵权的话，请及时添加小编微信以及qq也可以来告诉小编（905477376微信qq通用），谢谢！</li></ul>]]></content>
    
    <summary type="html">
    
      
      
        &lt;link rel=&quot;stylesheet&quot; class=&quot;aplayer-secondary-style-marker&quot; href=&quot;/assets/css/APlayer.min.css&quot;&gt;&lt;script src=&quot;/assets/js/APlayer.min.js&quot; cla
      
    
    </summary>
    
      <category term="Git" scheme="http://yoursite.com/categories/Git/"/>
    
    
      <category term="Git" scheme="http://yoursite.com/tags/Git/"/>
    
  </entry>
  
  <entry>
    <title>Vue-cli 2.0/3.0 mock数据配置</title>
    <link href="http://yoursite.com/2019/01/06/vue-cli-mock/"/>
    <id>http://yoursite.com/2019/01/06/vue-cli-mock/</id>
    <published>2019-01-06T13:08:47.101Z</published>
    <updated>2019-03-11T02:38:26.084Z</updated>
    
    <content type="html"><![CDATA[<link rel="stylesheet" class="aplayer-secondary-style-marker" href="/assets/css/APlayer.min.css"><script src="/assets/js/APlayer.min.js" class="aplayer-secondary-script-marker"></script><h1 id="前言"><a href="#前言" class="headerlink" title="前言"></a>前言</h1><ul><li>在我们开发的时候现在都是前后端分离的模式，后端给前端提供一个接口，由前端向后端发请求，得到数据后前端进行渲染。由于前后端开发进度的不统一，前端往往使用本地的测试数据进行数据渲染的测试。</li><li>所以我们就会用本地的json，来实现一个本地的数据测试，从而就有我们的mock数据</li><li>在我们使用 vue 开发的时候 也随着 vue-cli 脚手架的版本不断的升级，我们的配置方法也是不一样来，vue-cli3 基本自动会没有配置文件</li><li>在之前我也说过了vue-cli 编写node服务的 其实 app和express 并不用自己去引入的直接使用就可以了（我也是后面才意识到了这个问题）</li></ul><h1 id="所需工具-资料"><a href="#所需工具-资料" class="headerlink" title="所需工具/资料"></a>所需工具/资料</h1><ul><li>mac 10.13.3</li><li>vue-cli 2/3 (版本个人喜欢吧，我现在是3.0)</li><li>VS code (软件很多自己喜欢)</li><li>Chrome插件 jsonView (这个是用来在你页面看数据的时候自动对json进行格式化)</li><li>Postman 用来对api接口测试的 </li></ul><h1 id="开始"><a href="#开始" class="headerlink" title="开始"></a>开始</h1><h2 id="vue-cli2"><a href="#vue-cli2" class="headerlink" title="vue-cli2"></a>vue-cli2</h2><ul><li>在vue-cli构建的项目，我们可以借助devServer开启一个服务，然后我们可以通过路由模拟一个接口来进行测试。</li></ul><ol><li>第一步我们当然的建立一个json数据的文件（我这里自己定义好了,至于放不放在mock文件夹里面见仁见智）<br><img src="/vue-cli/vue-cli2-2.png" alt="vue-cli"></li><li>当然是配置啦 （打开build/webpack.dev.conf.js 进行配置）<ul><li>打开文件后先引入 json文件数据</li><li>找到 devServer 这个对象在里面添加 before</li><li>这里的app 是不需要我们自己去定义的直接调用就好<figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br></pre></td><td class="code"><pre><span class="line">  <span class="comment">// 引入文件</span></span><br><span class="line">  <span class="keyword">var</span> appData = <span class="built_in">require</span>(<span class="string">"../data.json"</span>);</span><br><span class="line">  <span class="keyword">var</span> seller = appData.seller;</span><br><span class="line">  <span class="keyword">var</span> goods = appData.goods;</span><br><span class="line">  <span class="keyword">var</span> ratings = appData.ratings;</span><br><span class="line"></span><br><span class="line">  <span class="comment">// 配置devServer</span></span><br><span class="line">  devServer: &#123;</span><br><span class="line">  before(app) &#123; <span class="comment">// 我直接就加在了开头的位置</span></span><br><span class="line">  <span class="comment">//  获取方法 路由 返回的数据</span></span><br><span class="line">    app.get(<span class="string">'/seller'</span>, (req, res) =&gt; &#123;</span><br><span class="line">      <span class="comment">// res.json(mockdata);</span></span><br><span class="line">      res.json(&#123;</span><br><span class="line">        errno: <span class="number">0</span>,</span><br><span class="line">        data: seller</span><br><span class="line">      &#125;);</span><br><span class="line">    &#125;);</span><br><span class="line"></span><br><span class="line">    app.get(<span class="string">'/goods'</span>, (req, res) =&gt; &#123;</span><br><span class="line">      <span class="comment">// res.json(mockdata);</span></span><br><span class="line">      res.json(&#123;</span><br><span class="line">        errno: <span class="number">0</span>,</span><br><span class="line">        data: goods</span><br><span class="line">      &#125;);</span><br><span class="line">    &#125;);</span><br><span class="line"></span><br><span class="line">    app.get(<span class="string">'/ratings'</span>, (req, res) =&gt; &#123;</span><br><span class="line">      <span class="comment">// res.json(mockdata);</span></span><br><span class="line">      res.json(&#123;</span><br><span class="line">        errno: <span class="number">0</span>,</span><br><span class="line">        data: ratings</span><br><span class="line">      &#125;);</span><br><span class="line">    &#125;);</span><br><span class="line">  &#125;,</span><br><span class="line">  clientLogLevel: <span class="string">"warning"</span>,</span><br><span class="line">  historyApiFallback: &#123;</span><br><span class="line">    rewrites: [&#123;</span><br><span class="line">      <span class="keyword">from</span>: <span class="regexp">/.*/</span>,</span><br><span class="line">      to: path.posix.join(config.dev.assetsPublicPath, <span class="string">"index.html"</span>)</span><br><span class="line">    &#125;]</span><br><span class="line">  &#125;,</span><br><span class="line">  hot: <span class="literal">true</span>,</span><br><span class="line">  contentBase: <span class="literal">false</span>, <span class="comment">// since we use CopyWebpackPlugin.</span></span><br><span class="line">  compress: <span class="literal">true</span>,</span><br><span class="line">  host: HOST || config.dev.host,</span><br><span class="line">  port: PORT || config.dev.port,</span><br><span class="line">  open: config.dev.autoOpenBrowser,</span><br><span class="line">  overlay: config.dev.errorOverlay ?</span><br><span class="line">    &#123;</span><br><span class="line">      warnings: <span class="literal">false</span>,</span><br><span class="line">      errors: <span class="literal">true</span></span><br><span class="line">    &#125; :</span><br><span class="line">    <span class="literal">false</span>,</span><br><span class="line">  publicPath: config.dev.assetsPublicPath,</span><br><span class="line">  proxy: config.dev.proxyTable,</span><br><span class="line">  quiet: <span class="literal">true</span>, <span class="comment">// necessary for FriendlyErrorsPlugin</span></span><br><span class="line">  watchOptions: &#123;</span><br><span class="line">    poll: config.dev.poll</span><br><span class="line">  &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure></li></ul></li></ol><p><img src="/vue-cli/vue-cli2-1.png" alt="vue-cli"></p><ol start="3"><li>调用</li></ol><ul><li>后面的before(app)部分就定义了可以通过向/seller发送get请求来得到我们要的json文件。</li><li>同时我们在vue文件中只要</li></ul><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">// 利用了axios</span></span><br><span class="line">axios.get(<span class="string">"/seller"</span>).then(<span class="function"><span class="params">res</span> =&gt;</span> &#123;</span><br><span class="line">        <span class="keyword">this</span>.seller = res.data;</span><br><span class="line">      &#125;).catch(<span class="function"><span class="params">error</span>=&gt;</span>&#123;</span><br><span class="line">        <span class="built_in">console</span>.log(error);</span><br><span class="line">      &#125;);</span><br></pre></td></tr></table></figure><ol start="4"><li>页面查看/postman 调试<br><img src="/vue-cli/vue-cli2-3.png" alt="vue-cli"><br><img src="/vue-cli/vue-cli2-4.png" alt="vue-cli"></li></ol><h2 id="vue-cli3"><a href="#vue-cli3" class="headerlink" title="vue-cli3"></a>vue-cli3</h2><ul><li>vue-cli3主打自动化，0配置。但是我们往往需要进行一些配置，这时我们就要创建一个配置文件。</li><li>mock 是我创建的文件夹存放data数据的</li><li>vue.config.js就是我们手动创建的配置文件，完整的配置项可以在官网看到，在这里我们着重于devServer</li><li>在这里的配置和2.0的差不多的只是简化了很多</li></ul><ol><li>配置<figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">const</span> appData = <span class="built_in">require</span>(<span class="string">'./mock/data.json'</span>);</span><br><span class="line"><span class="keyword">const</span> seller = appData.seller;</span><br><span class="line"><span class="keyword">const</span> goods = appData.goods;</span><br><span class="line"><span class="keyword">const</span> ratings = appData.ratings;</span><br><span class="line"></span><br><span class="line"><span class="built_in">module</span>.exports = &#123;</span><br><span class="line">        devServer: &#123;</span><br><span class="line">            <span class="comment">// port: 8080,</span></span><br><span class="line">            before(app) &#123;</span><br><span class="line">                app.get(<span class="string">'/seller'</span>, (req, res) =&gt; &#123;</span><br><span class="line">                    <span class="comment">// res.json(mockdata);</span></span><br><span class="line">                    res.json(&#123;</span><br><span class="line">                        errno: <span class="number">0</span>,</span><br><span class="line">                        data: seller</span><br><span class="line">                    &#125;);</span><br><span class="line">                &#125;);</span><br><span class="line"></span><br><span class="line">                app.get(<span class="string">'/goods'</span>, (req, res) =&gt; &#123;</span><br><span class="line">                    <span class="comment">// res.json(mockdata);</span></span><br><span class="line">                    res.json(&#123;</span><br><span class="line">                        errno: <span class="number">0</span>,</span><br><span class="line">                        data: goods</span><br><span class="line">                    &#125;);</span><br><span class="line">                &#125;);</span><br><span class="line"></span><br><span class="line">                app.get(<span class="string">'/ratings'</span>, (req, res) =&gt; &#123;</span><br><span class="line">                    <span class="comment">// res.json(mockdata);</span></span><br><span class="line">                    res.json(&#123;</span><br><span class="line">                        errno: <span class="number">0</span>,</span><br><span class="line">                        data: ratings</span><br><span class="line">                    &#125;);</span><br><span class="line">                &#125;);</span><br><span class="line">            &#125;</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br></pre></td></tr></table></figure></li></ol><p><img src="/vue-cli/vue-cli3-1.png" alt="vue-cli"></p><ol start="2"><li>运行就可以了会自动检查并运行</li><li>后面的效果和2.0的是一样的那我们就不再看了</li></ol><h1 id="后记"><a href="#后记" class="headerlink" title="后记"></a>后记</h1><ul><li>这个vue-cli 的配置方法是本人解决问题所记录的笔记，欢迎更多的同行大哥指导交流</li><li><a href="https://yhf7.github.io/" target="_blank" rel="noopener">欢迎进入我的博客</a>：<a href="https://yhf7.github.io/" target="_blank" rel="noopener">https://yhf7.github.io/</a></li><li>如果有什么侵权的话，请及时添加小编微信以及qq也可以来告诉小编（905477376微信qq通用），谢谢！</li></ul>]]></content>
    
    <summary type="html">
    
      
      
        &lt;link rel=&quot;stylesheet&quot; class=&quot;aplayer-secondary-style-marker&quot; href=&quot;/assets/css/APlayer.min.css&quot;&gt;&lt;script src=&quot;/assets/js/APlayer.min.js&quot; cla
      
    
    </summary>
    
      <category term="插件/配置" scheme="http://yoursite.com/categories/%E6%8F%92%E4%BB%B6-%E9%85%8D%E7%BD%AE/"/>
    
    
      <category term="Vue" scheme="http://yoursite.com/tags/Vue/"/>
    
  </entry>
  
  <entry>
    <title>Postman 调试Api，以及xdebug断点调试补充</title>
    <link href="http://yoursite.com/2019/01/06/Postman/"/>
    <id>http://yoursite.com/2019/01/06/Postman/</id>
    <published>2019-01-06T06:07:12.999Z</published>
    <updated>2019-03-11T03:08:42.444Z</updated>
    
    <content type="html"><![CDATA[<link rel="stylesheet" class="aplayer-secondary-style-marker" href="/assets/css/APlayer.min.css"><script src="/assets/js/APlayer.min.js" class="aplayer-secondary-script-marker"></script><h1 id="前言"><a href="#前言" class="headerlink" title="前言"></a>前言</h1><ul><li>无论我们作为一个后端开发，还是前端开发我们都需要用到api接口</li><li>但是作为前端呢就倾向于直接调用接口</li><li>作为后端人员不单要编写接口还是要去测试一下自己到接口是否能有或者通过经验测试相关会引起到bug，从而去编写全局异常处理到机制</li><li>那我们就来走入测试接口的世界其实还是很简单的</li><li>xdebug断点调试每一次都配置web的话太麻烦了，我们用小技巧就可以不用那么麻烦</li></ul><h1 id="所需工具-资料"><a href="#所需工具-资料" class="headerlink" title="所需工具/资料"></a>所需工具/资料</h1><ul><li>mac 10.13.3</li><li>Xampp （小编使用的是集成开发的,开启状态）</li><li>PHPStorm (<a href="https://www.jetbrains.com/phpstorm/download/download-thanks.html，没有的就去官网下载，破解什么的我就不说了如果需要直接联系我" target="_blank" rel="noopener">https://www.jetbrains.com/phpstorm/download/download-thanks.html，没有的就去官网下载，破解什么的我就不说了如果需要直接联系我</a>)</li><li>已经安装及配置好了 xdebug</li><li>ThinkPHP 5.07</li><li>postman（<a href="https://www.getpostman.com/，官网免费安装）" target="_blank" rel="noopener">https://www.getpostman.com/，官网免费安装）</a></li></ul><h1 id="开始"><a href="#开始" class="headerlink" title="开始"></a>开始</h1><h3 id="简单的说一下安装吧"><a href="#简单的说一下安装吧" class="headerlink" title="简单的说一下安装吧"></a>简单的说一下安装吧</h3><ol><li>直接进入官网 点击下载安装包，然后双击运行就可以了 <a href="https://www.getpostman.com/" target="_blank" rel="noopener">https://www.getpostman.com/</a><br><img src="/Api/post1.png" alt="api"></li><li>安装好的效果<br><img src="/Api/post2.png" alt="api"></li></ol><h3 id="测试"><a href="#测试" class="headerlink" title="测试"></a>测试</h3><ol><li>我们用的是 ThinkPHP 那我们就在路由哪里定义一个get的路由（其他的业务逻辑就自己写吧）<br><img src="/Api/post3.png" alt="api"></li><li>我们来到 postman 测试 选择相应的 获取方式和地址 点击send进行测试<br><img src="/Api/post4.png" alt="api"></li><li>这样我们就会的到来相应的结果，如果报错了就是端口有问题（以及看到错误端口）<br><img src="/Api/post6.png" alt="api"><br><img src="/Api/post5.png" alt="api"></li><li>看了一个报错一个异常处理后，我们来看看真正的获取到接口信息<br><img src="/Api/post7.png" alt="api"></li><li>传值的方法很多 ? / body这些都可以<br><img src="/Api/post8.png" alt="api"></li><li>测试就是这样的还是很简单</li></ol><h3 id="测试api小技巧"><a href="#测试api小技巧" class="headerlink" title="测试api小技巧"></a>测试api小技巧</h3><ul><li>日常我们测试的端口会比较多，一个个的过很容易忘记也很麻烦，那我们有方法可以把它收藏到一个文件里面用哪个点那个</li><li>postman为我们提供了这样的收藏的方法</li></ul><ol><li>点击收藏<br><img src="/Api/post9.png" alt="api"></li><li>选择文件和修改信息（这个不强求自己喜欢就好）<br><img src="/Api/post10.png" alt="api"></li><li>seve to 文件夹名<br><img src="/Api/post11.png" alt="api"></li><li>再下次打开的时候点击文件夹就可以看到要测试的api了<br><img src="/Api/post12.png" alt="api"></li><li>多人的话可以右上角登录</li></ol><h3 id="xdebug断点调试"><a href="#xdebug断点调试" class="headerlink" title="xdebug断点调试"></a>xdebug断点调试</h3><ul><li>每一次都配置会使得加重工作都负担以及不必要</li></ul><ol><li>设置断点，启动测试<br><img src="/Api/post13.png" alt="api"></li><li>获取测试码（每一次的启动都是不一样的，如果想多次测试那就不要断开，只是执行完就好，下一次send的时候还是会继续启用刚才的端口，如果终止了的话下一次开启需要拷贝新的端口）<br><img src="/Api/post14.png" alt="api"></li><li>断点测试<br><img src="/Api/post15.png" alt="api"><br><img src="/Api/post16.png" alt="api"></li></ol><h1 id="后记"><a href="#后记" class="headerlink" title="后记"></a>后记</h1><ul><li>Postman的api测试，以及小技巧，有什么疑问请直接添加小编微信，欢迎有更多的技术交流</li><li><a href="https://yhf7.github.io/" target="_blank" rel="noopener">欢迎进入我的博客</a>：<a href="https://yhf7.github.io/" target="_blank" rel="noopener">https://yhf7.github.io/</a></li><li>这只是本人的一些解决做法，个人笔记，如果有什么侵权的话，请及时添加小编微信以及qq也可以来告诉小编（905477376微信qq通用），谢谢！</li></ul>]]></content>
    
    <summary type="html">
    
      
      
        &lt;link rel=&quot;stylesheet&quot; class=&quot;aplayer-secondary-style-marker&quot; href=&quot;/assets/css/APlayer.min.css&quot;&gt;&lt;script src=&quot;/assets/js/APlayer.min.js&quot; cla
      
    
    </summary>
    
      <category term="Api" scheme="http://yoursite.com/categories/Api/"/>
    
    
      <category term="Api" scheme="http://yoursite.com/tags/Api/"/>
    
  </entry>
  
</feed>
