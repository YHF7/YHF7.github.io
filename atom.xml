<?xml version="1.0" encoding="utf-8"?>
<feed xmlns="http://www.w3.org/2005/Atom">
  <title>不懂IT的男孩</title>
  
  <subtitle>不忘初心，方得始终</subtitle>
  <link href="/atom.xml" rel="self"/>
  
  <link href="http://yoursite.com/"/>
  <updated>2019-02-18T08:49:39.727Z</updated>
  <id>http://yoursite.com/</id>
  
  <author>
    <name>Detail</name>
    
  </author>
  
  <generator uri="http://hexo.io/">Hexo</generator>
  
  <entry>
    <title>微信小程序后端笔记</title>
    <link href="http://yoursite.com/2019/02/18/%E5%BE%AE%E4%BF%A1%E5%B0%8F%E7%A8%8B%E5%BA%8Fphp%E5%90%8E%E7%AB%AF%E5%AD%A6%E4%B9%A0%E7%AC%94%E8%AE%B0/"/>
    <id>http://yoursite.com/2019/02/18/微信小程序php后端学习笔记/</id>
    <published>2019-02-18T08:46:28.742Z</published>
    <updated>2019-02-18T08:49:39.727Z</updated>
    
    <content type="html"><![CDATA[<link rel="stylesheet" class="aplayer-secondary-style-marker" href="/assets/css/APlayer.min.css"><script src="/assets/js/APlayer.min.js" class="aplayer-secondary-script-marker"></script><h1 id="微信小程序商城构建全栈应用"><a href="#微信小程序商城构建全栈应用" class="headerlink" title="微信小程序商城构建全栈应用"></a>微信小程序商城构建全栈应用</h1><ul><li>php+微信小程序全栈应用</li></ul><h1 id="软件-素材"><a href="#软件-素材" class="headerlink" title="软件/素材"></a>软件/素材</h1><ul><li>mac os 10.13.3</li><li>PhpStorm 2018</li><li>Postman</li><li>XAMPP 7.0.2-1</li><li>ThinkPHP 5.0.7</li></ul><h1 id="项目目录结构"><a href="#项目目录结构" class="headerlink" title="项目目录结构"></a>项目目录结构</h1><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br></pre></td><td class="code"><pre><span class="line">├─application           应用目录</span><br><span class="line">  ├─api                公共模块目录（可以更改）</span><br><span class="line">  │  │-controller      控制器目录  （版本以及业务）</span><br><span class="line">  │  │-model           模型目录  （关联模型处理）</span><br><span class="line">  │  │-service         模型服务层（相对复杂的业务处理）</span><br><span class="line">  │  └─validate        验证层     （客户端数据验证）</span><br><span class="line">  ├─extra              自定义公共资源层（tp5自带的）</span><br><span class="line">  ├─lib                模块目录</span><br><span class="line">  │  ├─enum            枚举</span><br><span class="line">  │  └─exception       全局异常处理目录</span><br><span class="line">  │</span><br><span class="line">  ├─command.php        命令行工具配置文件</span><br><span class="line">  ├─common.php         公共函数文件</span><br><span class="line">  ├─config.php         公共配置文件</span><br><span class="line">  ├─route.php          路由配置文件</span><br><span class="line">  ├─tags.php           应用行为扩展定义文件</span><br><span class="line">  └─database.php       数据库配置文件</span><br></pre></td></tr></table></figure><h1 id="笔记"><a href="#笔记" class="headerlink" title="笔记"></a>笔记</h1><h2 id="第八章"><a href="#第八章" class="headerlink" title="第八章"></a>第八章</h2><h3 id="数据表关系分析-（写着写着就绕了）"><a href="#数据表关系分析-（写着写着就绕了）" class="headerlink" title="数据表关系分析 （写着写着就绕了）"></a>数据表关系分析 （写着写着就绕了）</h3><ol><li>数据表之间的关系： 1 对 1 1 对多 多对多<ul><li>如何判断数据表之间的结构</li></ul></li><li>首先确立是否是一个多对多的关系<ul><li>查看表与表之间是否存在双方的外建均能被多个表调用，如果不是那就去除多对多关系</li></ul></li><li>1 对 1 1 对多<ul><li>在 thinkphp 中问题不大</li><li>如何去分析 1 对多或 1 对 1</li><li>1 对 1 的关系中， 两个表直接同时并且单次被执行，就是说一个关联请求中，表 1 一次只可以调用一个表 2 的元素，并且表 2 也只是被调用了一次</li><li>1 对多 的关系中， 表 1 通过一个外建，调用了多个表 2 的数据,并且表 2 的数据不能属于多个表 1，这样就是 1 对多的表现了</li></ul></li></ol><h3 id="模型关联（我们确立了-er-关系再来做这么的一个关联）"><a href="#模型关联（我们确立了-er-关系再来做这么的一个关联）" class="headerlink" title="模型关联（我们确立了 er 关系再来做这么的一个关联）"></a>模型关联（我们确立了 er 关系再来做这么的一个关联）</h3><ol><li><p>模型关联查询</p><ul><li>在我们的 model 是作为一个 ORM 模式的模型结构</li><li>在这之前我们就已经定义了模型了</li><li>我们有两个模型 Banner 与 BannerItem</li><li>tp5 对我们提供了关联查询的方法 hasMany</li><li><p>定义关联查询</p><figure class="highlight php"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">// 在当前模型 Banner 新建类  类名自定义喜欢什么来什么</span></span><br><span class="line"><span class="comment">// 函数体要写在 Banner 这个主模型中，BannerItem是被关联模型</span></span><br><span class="line"><span class="comment">// 调用模型关联时要清晰的知道 外键 以及主建（某程度下是不用写后面两个，不建议）</span></span><br><span class="line"><span class="keyword">public</span> <span class="function"><span class="keyword">function</span> <span class="title">items</span> <span class="params">()</span> </span>&#123;</span><br><span class="line">        <span class="comment">// 关联查询方法hasMany 关联模型      外建      当前模型 banner id主建</span></span><br><span class="line">       <span class="keyword">return</span> <span class="keyword">$this</span>-&gt;hasMany(<span class="string">'BannerItem'</span>,<span class="string">'banner_id'</span>,<span class="string">'id'</span>);</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure></li><li><p>调用关联查询</p><figure class="highlight php"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">  <span class="comment">//  在调用 模型的时候加上 with这么个方法 （括号内填写的就是刚才定义的函数名）</span></span><br><span class="line">$banner = BannerModel::with(<span class="string">'items'</span>)-&gt;find($id);</span><br></pre></td></tr></table></figure></li></ul></li><li><p>模型嵌套关联查询</p><ul><li>在我们的 查询中 会存在被关联体中还关联着变得关联体，在 tp5 中就形成了嵌套查询</li><li>当然 tp5 也给我们提供了方法：belongsTo</li><li>嵌套关系 Banner -&gt; BannerItem -&gt; Image (这里就存在了多重的嵌套)</li><li>模型 Banner BannerItem Image</li><li>是 BannerItem 关联 Image 所以关联函数我们写在 BannerItem 中</li><li>定义嵌套查询</li></ul><figure class="highlight php"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line">  <span class="keyword">public</span> <span class="function"><span class="keyword">function</span> <span class="title">img</span><span class="params">()</span> </span>&#123;</span><br><span class="line"><span class="comment">//        处理方法名其他都是一样的，这里就不多说了</span></span><br><span class="line">      <span class="keyword">return</span> <span class="keyword">$this</span>-&gt;belongsTo(<span class="string">'Image'</span>,<span class="string">'img_id'</span>,<span class="string">'id'</span>);</span><br><span class="line">  &#125;</span><br></pre></td></tr></table></figure><ul><li>调用查询 (这个比较关键，不过还是很简单的)</li></ul><figure class="highlight php"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">// with 可以是字符串也可以是数组（嵌套关联时就会用数组）</span></span><br><span class="line"><span class="comment">// 为什么是items.img 而不是 直接img呢，因为是嵌套关系，在模型中可以嵌套这里也是可以的</span></span><br><span class="line"><span class="comment">// 但是在 嵌套时 是items 关联的 img ，这里就会用.来链接</span></span><br><span class="line"><span class="comment">// 这个解释比较绕但是，知道方法就是要这样去用的就好啦</span></span><br><span class="line">$banner = BannerModel::with([<span class="string">'items'</span>,<span class="string">'items.img'</span>])-&gt;find($id);</span><br></pre></td></tr></table></figure></li></ol><h3 id="隐藏模型字段-模型自带"><a href="#隐藏模型字段-模型自带" class="headerlink" title="隐藏模型字段 (模型自带)"></a>隐藏模型字段 (模型自带)</h3><ol><li>hidden 方法隐藏字段</li></ol><figure class="highlight php"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">// 数据      方法      字段名</span></span><br><span class="line"> $banner-&gt;hidden([<span class="string">'字段名例：id'</span>])</span><br></pre></td></tr></table></figure><ol start="2"><li>visible 只显示的字段</li></ol><figure class="highlight php"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">$banner-&gt;visible([<span class="string">'字段名例：id'</span>,<span class="string">'update_time])</span></span><br></pre></td></tr></table></figure><h3 id="模型内部隐藏字段-（自定义模型的内部隐藏-把一些前端不需要的字段隐藏了）"><a href="#模型内部隐藏字段-（自定义模型的内部隐藏-把一些前端不需要的字段隐藏了）" class="headerlink" title="模型内部隐藏字段 （自定义模型的内部隐藏,把一些前端不需要的字段隐藏了）"></a>模型内部隐藏字段 （自定义模型的内部隐藏,把一些前端不需要的字段隐藏了）</h3><ul><li>hidden 隐藏</li><li>直接在 model 定义的模型内添加方法 （以 Banner 为例）</li></ul><figure class="highlight php"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">namespace</span> <span class="title">app</span>\<span class="title">api</span>\<span class="title">model</span>;</span><br><span class="line"></span><br><span class="line"><span class="keyword">use</span> <span class="title">think</span>\<span class="title">Model</span>;</span><br><span class="line"></span><br><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">Banner</span> <span class="keyword">extends</span> <span class="title">Model</span></span></span><br><span class="line"><span class="class"></span>&#123;</span><br><span class="line">     <span class="comment">// 直接添加 $hidden的数组填入要隐藏的字段即可</span></span><br><span class="line">     <span class="comment">// visible 等方法用法一样，那个模型内部的字段要隐藏就在那个模型内部设置</span></span><br><span class="line">    <span class="keyword">protected</span> $hidden = [<span class="string">'id'</span>];</span><br><span class="line"></span><br><span class="line">    <span class="keyword">public</span> <span class="function"><span class="keyword">function</span> <span class="title">items</span> <span class="params">()</span> </span>&#123;</span><br><span class="line">                                <span class="comment">// 关联模型           外建                当前模型 banner id主建</span></span><br><span class="line">        <span class="keyword">return</span> <span class="keyword">$this</span>-&gt;hasMany(<span class="string">'BannerItem'</span>,<span class="string">'banner_id'</span>,<span class="string">'id'</span>);</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">static</span> <span class="function"><span class="keyword">function</span> <span class="title">getBannerByID</span><span class="params">($id)</span> </span>&#123;</span><br><span class="line">        $banner = <span class="keyword">self</span>::with([<span class="string">'items'</span>,<span class="string">'items.img'</span>])-&gt;find($id);</span><br><span class="line"></span><br><span class="line">        <span class="keyword">return</span> $banner;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h3 id="自定义配置"><a href="#自定义配置" class="headerlink" title="自定义配置"></a>自定义配置</h3><ul><li>/application/extra （extra 自己新建的，凡是放在这里面的配置文件都会被自动加载）</li><li>手动配置一个本地的 img 图片路径</li></ul><ol><li>在 extra 下 新建 setting.php</li></ol><figure class="highlight php"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">return</span> [</span><br><span class="line">    <span class="comment">//  名称                 域名   路径（直接放在public下的images就是这样写就可以了）</span></span><br><span class="line">    <span class="string">'img_prefix'</span> =&gt; <span class="string">'http://zerg.cn/images'</span></span><br><span class="line">];</span><br></pre></td></tr></table></figure><ol start="2"><li>使用自定义变量<ul><li>因为是在 extra 内部定义的所以会自动调用，那么我们用 config 就可以去掉用到了<figure class="highlight php"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">      <span class="comment">// 配置文件名.变量名</span></span><br><span class="line">config(<span class="string">'setting.img_prefix'</span>);</span><br></pre></td></tr></table></figure></li></ul></li></ol><h3 id="静态文件存放"><a href="#静态文件存放" class="headerlink" title="静态文件存放"></a>静态文件存放</h3><ul><li>静态的外部文件，例如图片啊文本啊等的文件，必须放在 public 这个公共目录下</li><li>并不是放在 application 的这个开发目录下，因为 tp5 的架构里面只有 public 这个目录是对外开放的</li><li>所以文件都必须是要放在 public 目录下</li></ul><h3 id="tp-模型读取器-数据拼合"><a href="#tp-模型读取器-数据拼合" class="headerlink" title="tp 模型读取器 (数据拼合)"></a>tp 模型读取器 (数据拼合)</h3><ul><li>为了获取数据/修改数据，tp5 给出了一个读取器的方法</li><li>用来给我们读取数据修改数据用的</li><li>那个模型要修改数据就在哪个模型定义</li></ul><ol><li>定义读取器（其实也是一个函数方法）<ul><li>读取器命名规范 开头 get 必须有 + 读取数据的名称并且开头要大写例 Url + Attr 必须加的（利用驼峰命名法）</li><li>getUrlAttr （完整的编写，除了中间的那个数据，其他都是必须有的，中间数据名开头必须大写）</li><li>传入一个值，名字自定义 （这个传入的数据其实就是我们要获取到要修改的数据）</li><li>每一次传入一个数据，有多个输出就会重复的执行读取器</li><li>因为在我们的业务逻辑中会调用到当前模型的其他数据，但是第一个参数只是获取到的是当前读取器的数据，并无法读取到其他的数据</li><li>所以添加了第二个参数 （这个参数会给我们返回一个这个模型的数据，就是所有的数据）</li></ul></li></ol><figure class="highlight php"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="function"><span class="keyword">function</span> <span class="title">getUrlAttr</span> <span class="params">($value,$data)</span> </span>&#123;</span><br><span class="line"></span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><ol start="2"><li>使用读取器 （做数据的修改然后返回）</li></ol><figure class="highlight php"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="function"><span class="keyword">function</span> <span class="title">getUrlAttr</span> <span class="params">($value)</span> </span>&#123;</span><br><span class="line">    <span class="comment">// 这里我们只是做了一个自定义的 变量和url路径的拼接</span></span><br><span class="line">    <span class="keyword">return</span> config(<span class="string">'setting.img_prefix'</span>).$value;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><ol start="3"><li>业务逻辑添加</li></ol><figure class="highlight php"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="function"><span class="keyword">function</span> <span class="title">getUrlAttr</span> <span class="params">($value,$data)</span> </span>&#123;</span><br><span class="line">$finalUrl = $value;</span><br><span class="line">    <span class="comment">// 判断是否要拼接</span></span><br><span class="line"><span class="keyword">if</span> ($data[<span class="string">'from'</span>] === <span class="number">1</span>) &#123;</span><br><span class="line">    $finalUrl = config(<span class="string">'setting.img_prefix'</span>) . $value;</span><br><span class="line">&#125;</span><br><span class="line"><span class="keyword">return</span> $finalUrl;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h3 id="自定义基类-（面向对象，提取模型读取器）"><a href="#自定义基类-（面向对象，提取模型读取器）" class="headerlink" title="自定义基类 （面向对象，提取模型读取器）"></a>自定义基类 （面向对象，提取模型读取器）</h3><ul><li>一开始这样做会觉得好像代码还多了啊，这么不就是做无用功吗，在业务不断增加的时候，后期修改就可以看出来好处了</li><li>集中业务逻辑</li><li>创建 BaseModel.php 作为模型基类</li><li>把让所有的模型都继承这个基类</li></ul><ol><li><p>把读取器提取到 模型基类 （这样做是一个面向对象的思想）</p><ul><li>但是提取了模型基类后我们所有的子模型都会自动的去执行模型</li><li>这样可能会造成一些数据的变更和错误，比如说，两个命名一样但是代表的数据不同是就会出现错误</li><li>所以我们把它封装为一个自调用的方法<figure class="highlight php"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">// BaseModel</span></span><br><span class="line"><span class="comment">// 读取器</span></span><br><span class="line"><span class="keyword">protected</span> <span class="function"><span class="keyword">function</span> <span class="title">prefixImgUrl</span> <span class="params">($value,$data)</span> </span>&#123;</span><br><span class="line">    $finalUrl = $value;</span><br><span class="line">    <span class="keyword">if</span> ($data[<span class="string">'from'</span>] === <span class="number">1</span>) &#123;</span><br><span class="line">        $finalUrl = config(<span class="string">'setting.img_prefix'</span>) . $value;</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">return</span> $finalUrl;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure></li></ul></li><li><p>子模型调用基类方法</p><ul><li>Image<figure class="highlight php"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="function"><span class="keyword">function</span> <span class="title">getUrlAttr</span> <span class="params">($value,$data)</span> </span>&#123;</span><br><span class="line">    <span class="keyword">return</span> <span class="keyword">$this</span>-&gt;prefixImgUrl($value,$data);</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure></li></ul></li></ol><h3 id="定义-api-版本号"><a href="#定义-api-版本号" class="headerlink" title="定义 api 版本号"></a>定义 api 版本号</h3><ul><li>在互联网的项目中，我们会对项目版本对升级，以及业务逻辑改变和变更</li><li>同时也是需要去兼容旧版本，所以会保留旧版本的 api</li></ul><ol><li>开发开闭原则<ul><li>代码对拓展开发，对修改封闭</li><li>添加功能直接以拓展的方式添加就可以，不需要去改变代码</li><li>修改是封闭的，业务变更上升版本</li><li>不可以修改原来的版本代码，会破坏了原版本的代码，和影响功能调用的风险</li><li>需要修改就要添加新的版本</li></ul></li><li>多版本<ul><li>版本的分离，新旧版本不发生冲突</li><li>新老版本的兼容问题</li><li>给用户缓冲时间，也不能兼容太多的版本，成本太高</li><li>v1 做 v1 版本层</li><li>v2 做 v2 版本层</li></ul></li></ol><h3 id="路由-api-动态变更"><a href="#路由-api-动态变更" class="headerlink" title="路由 api 动态变更"></a>路由 api 动态变更</h3><figure class="highlight php"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">//              动态版本 实现传什么就调用什么版本的api，同时也是要修改版本指向接口</span></span><br><span class="line"><span class="comment">//                 传 v1 就是 v1</span></span><br><span class="line"><span class="comment">//                 传 v2 就是 v2           动态写入</span></span><br><span class="line">Route::get(<span class="string">'api/:version/banner/:id'</span>,<span class="string">'api/:version.Banner/getBanner'</span>);</span><br></pre></td></tr></table></figure><h3 id="一对一关系选择关联方法"><a href="#一对一关系选择关联方法" class="headerlink" title="一对一关系选择关联方法"></a>一对一关系选择关联方法</h3><ol><li>belongsTo<ul><li>在有外建的表内请求就用 belongsTo</li></ul></li><li>hasOne<ul><li>在没有外建的表亲求就用 hasOne</li></ul></li></ol><h3 id="多对多查询-（belongsToMany）"><a href="#多对多查询-（belongsToMany）" class="headerlink" title="多对多查询 （belongsToMany）"></a>多对多查询 （belongsToMany）</h3><p>-</p><ul><li>多对多的查询呢 就比一对多和 1 对 1 的查询要多了一个参数</li><li>在参数中第二个是放入第三个表也就是中间表</li></ul><figure class="highlight php"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="function"><span class="keyword">function</span> <span class="title">products</span> <span class="params">()</span> </span>&#123;</span><br><span class="line">                                    <span class="comment">// 关联表名        中间表名                 关联表id            主建</span></span><br><span class="line">    <span class="keyword">return</span> <span class="keyword">$this</span>-&gt;belongsToMany(<span class="string">'Product'</span>,<span class="string">'theme_product'</span>,<span class="string">'product_id'</span>,<span class="string">'theme_id'</span>);</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h3 id="开启路由完整匹配模式"><a href="#开启路由完整匹配模式" class="headerlink" title="开启路由完整匹配模式"></a>开启路由完整匹配模式</h3><ul><li>开我们开发的过程中难免会有 api 相同当是请求的方式以及传参的不同，但是又需要相同的 api 名称</li><li>在我们的 tp5 中，会自动追寻一个半路径的匹配，所以当匹配到了相关的路由时就会停止匹配</li><li>但是这样返回的结果肯定不是我们要的，所以就要开启这个完整的路由匹配模式</li><li>在 config.php 配置文件中，我们就可以来更改了</li></ul><figure class="highlight php"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">//  只有找到这句话改变就可以了   false -&gt; true</span></span><br><span class="line"><span class="comment">// 路由使用完整匹配</span></span><br><span class="line"><span class="string">'route_complete_match'</span>   =&gt; <span class="keyword">true</span>,</span><br></pre></td></tr></table></figure><h3 id="合理利用数据冗余"><a href="#合理利用数据冗余" class="headerlink" title="合理利用数据冗余"></a>合理利用数据冗余</h3><ul><li>在查询量上来的时候避免数据量大多表查询之间耗时</li><li>合理的利用数据冗余来减少联合表的查询减少查询时间</li><li>但不要太过多但使用，只是为了减少数据库压力</li><li>在数据库中做相关的优化</li></ul><h3 id="collection-字符集"><a href="#collection-字符集" class="headerlink" title="collection 字符集"></a>collection 字符集</h3><ul><li>我们使用获取到的数据是字符集更方便让我们来修改数据</li></ul><ol><li>tp5 修改获取返回数据 （/application/database.php）</li></ol><figure class="highlight php"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">// 找到这个吧 arr改为 collection</span></span><br><span class="line"><span class="comment">// 数据集返回类型</span></span><br><span class="line"><span class="string">'resultset_type'</span>  =&gt; <span class="string">'collection'</span>,</span><br></pre></td></tr></table></figure><ol start="2"><li><p>使用字符集就可以轻松的临时隐藏字段</p><ul><li>当我们在开发的过程中，不是所有业务逻辑都需要隐藏的字段，我们就不可以在关联模型中直接就隐藏字段</li><li>我们会使用临时隐藏字段</li><li>当然数组我们是不可以直接这样来隐藏的，但是使用字符集的话就可以直接的去使用函数进行数据的隐藏<figure class="highlight php"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">// 使用hidden进行隐藏</span></span><br><span class="line">$products = $products-&gt;hidden([<span class="string">'summary'</span>]);</span><br></pre></td></tr></table></figure></li></ul></li><li><p>字符集判空</p><ul><li>isEmpty 内置函数</li></ul></li></ol><figure class="highlight php"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">// 判断空抛出异常</span></span><br><span class="line"><span class="keyword">if</span> ($products-&gt;isEmpty()) &#123;</span><br><span class="line">    <span class="keyword">throw</span> <span class="keyword">new</span> ProductException();</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>##第九章</p><h3 id="service-建立在-model-上的，用来处理复制的业务"><a href="#service-建立在-model-上的，用来处理复制的业务" class="headerlink" title="service (建立在 model 上的，用来处理复制的业务)"></a>service (建立在 model 上的，用来处理复制的业务)</h3><ul><li>在我们的 tp5 中，我们的 model 代表的一个很重要的位置</li><li>可以写业务逻辑，也访问数据库</li><li>但是 service 不可以用来访问数据库，因为上建立在 model 之上的</li><li>我们都会把复杂的业务逻辑放在 service 层中</li></ul><h3 id="公共应用文件-common-php"><a href="#公共应用文件-common-php" class="headerlink" title="公共应用文件 common.php"></a>公共应用文件 common.php</h3><ul><li>编写公共的 http 请求</li></ul><figure class="highlight php"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">/*</span></span><br><span class="line"><span class="comment">* <span class="doctag">@param</span> string $url get 请求地址</span></span><br><span class="line"><span class="comment">* <span class="doctag">@param</span> int $httpCode 返回状态码</span></span><br><span class="line"><span class="comment">* <span class="doctag">@return</span> mixed</span></span><br><span class="line"><span class="comment">*/</span></span><br><span class="line"><span class="function"><span class="keyword">function</span> <span class="title">curl_get</span> <span class="params">($url,&amp;$httpCode = <span class="number">0</span>)</span> </span>&#123;</span><br><span class="line"> $ch = curl_init();</span><br><span class="line"> curl_setopt($ch,CURLOPT_URL,$url);</span><br><span class="line"> curl_setopt($ch,CURLOPT_RETURNTRANSFER,<span class="number">1</span>);</span><br><span class="line"></span><br><span class="line"><span class="comment">//    不做证书校验，部署在linux环境下请改为true</span></span><br><span class="line"> curl_setopt($ch,CURLOPT_SSL_VERIFYPEER,<span class="keyword">false</span>);</span><br><span class="line"> curl_setopt($ch,CURLOPT_CONNECTTIMEOUT,<span class="number">10</span>);</span><br><span class="line"> $file_contents = curl_exec($ch);</span><br><span class="line"> $httpCode = curl_getinfo($ch,CURLINFO_HTTP_CODE);</span><br><span class="line"> curl_close($ch);</span><br><span class="line"> <span class="keyword">return</span> $file_contents;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h3 id="模型插入数据（create）"><a href="#模型插入数据（create）" class="headerlink" title="模型插入数据（create）"></a>模型插入数据（create）</h3><ul><li>在 tp5 中如何向数据库插入数据</li><li>tp5 模型给我们准备了 create 的方法</li></ul><figure class="highlight php"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line">    <span class="comment">//  模型名   create方法 数组传入要添加的字段和数据</span></span><br><span class="line">$user = UserModel::create([</span><br><span class="line">        <span class="string">'openid'</span> =&gt; $openid</span><br><span class="line">    ]);</span><br></pre></td></tr></table></figure><h3 id="动态传入数值随机生成字符串方法"><a href="#动态传入数值随机生成字符串方法" class="headerlink" title="动态传入数值随机生成字符串方法"></a>动态传入数值随机生成字符串方法</h3><figure class="highlight php"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">/*</span></span><br><span class="line"><span class="comment"> * 生成随机字符串</span></span><br><span class="line"><span class="comment"> */</span></span><br><span class="line"><span class="function"><span class="keyword">function</span> <span class="title">getRandChar</span> <span class="params">($length)</span> </span>&#123;</span><br><span class="line">    $str = <span class="keyword">null</span>;</span><br><span class="line">    $strPol = <span class="string">"ABCDEFGHIJKLMNOPQRSTUVWXYZ0123456789abcdefghijklmnopqrstuvwxyz"</span>;</span><br><span class="line">    $max = strlen($strPol) - <span class="number">1</span>;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">for</span> ($i=<span class="number">0</span>;$i &lt; $length; $i++) &#123;</span><br><span class="line">        $str .= $strPol[rand(<span class="number">0</span>,$max)];</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">return</span> $str;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h3 id="文件缓存-chache"><a href="#文件缓存-chache" class="headerlink" title="文件缓存 chache"></a>文件缓存 chache</h3><ul><li>使用 cache 写入缓存</li><li>使用文件存储的方式</li><li>缓存的地址在目录文件/runtime/cache 文件内</li></ul><figure class="highlight php"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">$request = cache($key,$value,$expire_in);</span><br></pre></td></tr></table></figure><h3 id="路由分组"><a href="#路由分组" class="headerlink" title="路由分组"></a>路由分组</h3><ul><li>由于我们 api 接口的不断增加</li><li>在一个分类中会有很多的相同的接口路由</li><li>这个时候如果我们业务的变更修改起来就会很麻烦</li><li>所以我们是用来路由分组来实现</li><li>group 方法</li><li>第一个是公共的路由部分，第二个是一个闭包（也就是一个 function 的方法）</li><li>在里面还是安装路由一样去定义就可以了</li><li>也能提高路由的效率</li></ul><figure class="highlight php"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br></pre></td><td class="code"><pre><span class="line"></span><br><span class="line"><span class="comment">//Route::get('api/:version/product/recent','api/:version.Product/getRecent');</span></span><br><span class="line"><span class="comment">//Route::get('api/:version/product/by_category','api/:version.Product/getAllInCategory');</span></span><br><span class="line"><span class="comment">//Route::get('api/:version/product/:id','api/:version.Product/getOne',[],['id'=&gt;'\d+']);</span></span><br><span class="line"></span><br><span class="line">Route::group(<span class="string">'api/:version/product'</span>, <span class="function"><span class="keyword">function</span> <span class="params">()</span> </span>&#123;</span><br><span class="line">    Route::get(<span class="string">'/recent'</span>,<span class="string">'api/:version.Product/getRecent'</span>);</span><br><span class="line">    Route::get(<span class="string">'/by_category'</span>,<span class="string">'api/:version.Product/getAllInCategory'</span>);</span><br><span class="line">    Route::get(<span class="string">'/:id'</span>,<span class="string">'api/:version.Product/getOne'</span>,[],[<span class="string">'id'</span>=&gt;<span class="string">'\d+'</span>]);</span><br><span class="line">&#125;);</span><br></pre></td></tr></table></figure><h3 id="关联模型下个关联数据排序（tp5-没有的，重点）"><a href="#关联模型下个关联数据排序（tp5-没有的，重点）" class="headerlink" title="关联模型下个关联数据排序（tp5 没有的，重点）"></a>关联模型下个关联数据排序（tp5 没有的，重点）</h3><ul><li>使用 模型+query 添加排序</li></ul><figure class="highlight php"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">// 关联模型 imgs  properties 查询</span></span><br><span class="line"><span class="comment">// 模型的嵌套 imgurl</span></span><br><span class="line"><span class="keyword">public</span> <span class="keyword">static</span> <span class="function"><span class="keyword">function</span> <span class="title">getProductDetail</span> <span class="params">($id)</span> </span>&#123;</span><br><span class="line">    <span class="comment">// 在 with 中 嵌套function</span></span><br><span class="line">    <span class="comment">// 在内部添加 query</span></span><br><span class="line">    $product = <span class="keyword">self</span>::with([<span class="string">'imgs'</span> =&gt; <span class="function"><span class="keyword">function</span> <span class="params">($query)</span> </span>&#123;</span><br><span class="line">        $query-&gt;with([<span class="string">'imgUrl'</span>])-&gt;order(<span class="string">'order'</span>,<span class="string">'asc'</span>);</span><br><span class="line">    &#125;])-&gt;with([<span class="string">'properties'</span>])-&gt;find($id);</span><br><span class="line">    <span class="keyword">return</span> $product;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h3 id="使用-关联模型-添加-更新数据"><a href="#使用-关联模型-添加-更新数据" class="headerlink" title="使用 关联模型 添加/更新数据"></a>使用 关联模型 添加/更新数据</h3><ul><li>添加数据的方法有很多，我们来使用一下关联模型的方法</li><li>两个的区别在于 修改操作的 关联 不可以用括号</li></ul><figure class="highlight php"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">// 调用 user 中的 address 关联 使用 save方法添加数据</span></span><br><span class="line">$user-&gt;address()-&gt;save($dataArray);</span><br><span class="line"><span class="comment">// 调用 user 中的 address 关联 使用 save方法修改数据</span></span><br><span class="line">$user-&gt;address-&gt;save($dataArray);</span><br></pre></td></tr></table></figure><h2 id="第十章"><a href="#第十章" class="headerlink" title="第十章"></a>第十章</h2><h3 id="前置操作"><a href="#前置操作" class="headerlink" title="前置操作"></a>前置操作</h3><ul><li>在我们编写 api 业务逻辑的时候，我们会想在调用 api 接口之前，需要满足某些条件</li><li>这样才可以去访问我们的接口中的业务逻辑</li><li>所以我们要在做一个前置操作，抵挡不满足条件的抛出异常</li></ul><ol><li>tp5 中使用前置操作需要基础自带的一个基类 Controller</li><li>定义一个名为 \$beforeActionList 的数组</li></ol><figure class="highlight php"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">use</span> <span class="title">think</span>\<span class="title">Controller</span></span><br><span class="line"></span><br><span class="line"> <span class="title">class</span> <span class="title">Address</span> <span class="title">extends</span> <span class="title">Controller</span></span><br><span class="line"> &#123;</span><br><span class="line">     // 定义前置属性</span><br><span class="line">     // 第一个字段是 访问<span class="title">api</span>接口前 需要 访问的一个前置方法</span><br><span class="line">     // 箭指的 是一个数组</span><br><span class="line">     // 数组内部定义一个箭指数据，也可以直接是一个字符串（内部填入<span class="title">api</span>接口函数就可以了）</span><br><span class="line">     // 否则向下面这样写</span><br><span class="line">     // 多<span class="title">api</span>编写</span><br><span class="line">     <span class="title">protected</span> $<span class="title">beforeActionList</span> = [</span><br><span class="line">         '<span class="title">first</span>' =&gt; ['<span class="title">only</span>' =&gt; '<span class="title">second</span>,<span class="title">third</span>']</span><br><span class="line">     ];</span><br><span class="line"></span><br><span class="line">     <span class="comment">// 触发api前 执行的前置函数</span></span><br><span class="line">     <span class="keyword">protected</span> <span class="function"><span class="keyword">function</span> <span class="title">first</span> <span class="params">()</span> </span>&#123;</span><br><span class="line">         <span class="keyword">echo</span> <span class="string">'first'</span>;</span><br><span class="line">     &#125;</span><br><span class="line"></span><br><span class="line">     <span class="comment">// api接口</span></span><br><span class="line">     <span class="keyword">public</span> <span class="function"><span class="keyword">function</span> <span class="title">second</span> <span class="params">()</span> </span>&#123;</span><br><span class="line">         <span class="keyword">echo</span> <span class="string">'second'</span>;</span><br><span class="line">     &#125;</span><br><span class="line"></span><br><span class="line">     <span class="comment">// api接口</span></span><br><span class="line">     <span class="keyword">public</span> <span class="function"><span class="keyword">function</span> <span class="title">third</span> <span class="params">()</span> </span>&#123;</span><br><span class="line">         <span class="keyword">echo</span> <span class="string">'third'</span>;</span><br><span class="line">     &#125;</span><br><span class="line"> &#125;</span><br></pre></td></tr></table></figure><h3 id="重构前置验证操作-（实现面向对象）"><a href="#重构前置验证操作-（实现面向对象）" class="headerlink" title="重构前置验证操作 （实现面向对象）"></a>重构前置验证操作 （实现面向对象）</h3><ul><li>提取验证业务逻辑到 service 的基类中</li><li>提取前置方法到 BaseController 的基类中</li><li>继承基类，执行前置方法</li></ul><ol><li>提取出一个前置的基类 BaseController （继承内置 Controller）</li></ol><figure class="highlight php"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">use</span> <span class="title">app</span>\<span class="title">api</span>\<span class="title">service</span>\<span class="title">Token</span> <span class="title">as</span> <span class="title">TokenService</span>;</span><br><span class="line"></span><br><span class="line"><span class="comment">// 继承</span></span><br><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">BaseController</span> <span class="keyword">extends</span> <span class="title">Controller</span></span></span><br><span class="line"><span class="class"></span>&#123;</span><br><span class="line"> <span class="comment">// 前置方法</span></span><br><span class="line"> <span class="comment">// 验证初级权限作用域,用户和cms都可以访问</span></span><br><span class="line"> <span class="keyword">protected</span> <span class="function"><span class="keyword">function</span> <span class="title">checkPrimaryScope</span> <span class="params">()</span> </span>&#123;</span><br><span class="line">     <span class="comment">// 向Token调用验证方法</span></span><br><span class="line">     TokenService::needPrimaryScope();</span><br><span class="line"> &#125;</span><br><span class="line"></span><br><span class="line"> <span class="comment">// 验证权限，只有用户可以访问，cms无法访问</span></span><br><span class="line"> <span class="keyword">protected</span> <span class="function"><span class="keyword">function</span> <span class="title">checkExclusiveScope</span> <span class="params">()</span> </span>&#123;</span><br><span class="line">     TokenService::needExclusiveScope();</span><br><span class="line"> &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><ol start="2"><li>提取验证业务逻辑（因为是 token 相关的就归并到 token 的 service 业务层中）</li></ol><figure class="highlight php"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">// 重构前置方法，验证权限</span></span><br><span class="line"><span class="comment">// 用户和cms管理员都可以访问的权限</span></span><br><span class="line"><span class="keyword">public</span> <span class="keyword">static</span> <span class="function"><span class="keyword">function</span> <span class="title">needPrimaryScope</span> <span class="params">()</span> </span>&#123;</span><br><span class="line">    <span class="comment">// 调用token中的方法获取scope</span></span><br><span class="line">    $scope = <span class="keyword">self</span>::getCurrentTokenVar(<span class="string">'scope'</span>);</span><br><span class="line">    <span class="comment">// 判断是否存在</span></span><br><span class="line">    <span class="keyword">if</span> ($scope) &#123;</span><br><span class="line">        <span class="comment">// 判断 scope的权限大小</span></span><br><span class="line">        <span class="keyword">if</span> ($scope &gt;= ScopeEnum::User) &#123;</span><br><span class="line">            <span class="keyword">return</span> <span class="keyword">true</span>;</span><br><span class="line">        &#125; <span class="keyword">else</span> &#123;</span><br><span class="line">            <span class="keyword">throw</span> <span class="keyword">new</span> ForbiddenException();</span><br><span class="line">        &#125;</span><br><span class="line">    &#125; <span class="keyword">else</span> &#123;</span><br><span class="line">        <span class="keyword">throw</span> <span class="keyword">new</span> TokenException();</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><ol start="3"><li>继承 BaseController 基类使用前置方法</li></ol><figure class="highlight php"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br></pre></td><td class="code"><pre><span class="line">         <span class="comment">// 继承基类</span></span><br><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">Address</span> <span class="keyword">extends</span> <span class="title">BaseController</span></span></span><br><span class="line"><span class="class"></span>&#123;</span><br><span class="line"> <span class="comment">// 调用前置的方法</span></span><br><span class="line"> <span class="keyword">protected</span> $beforeActionList = [</span><br><span class="line">     <span class="comment">// 前置验证的方法名                   需要前置验证的函数</span></span><br><span class="line">     <span class="string">'checkPrimaryScope'</span> =&gt; [<span class="string">'only'</span> =&gt; <span class="string">'createOrUpdateAddress'</span>]</span><br><span class="line"> ];</span><br><span class="line"></span><br><span class="line"> <span class="comment">/*</span></span><br><span class="line"><span class="comment">  * <span class="doctag">@url</span> api/v1/address</span></span><br><span class="line"><span class="comment">  */</span></span><br><span class="line"> <span class="keyword">public</span> <span class="function"><span class="keyword">function</span> <span class="title">createOrUpdateAddress</span> <span class="params">()</span> </span>&#123;</span><br><span class="line"></span><br><span class="line"> &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h3 id="验证器数据自定义子项验证"><a href="#验证器数据自定义子项验证" class="headerlink" title="验证器数据自定义子项验证"></a>验证器数据自定义子项验证</h3><ul><li>自定义子项验证，通过自定义的方法调用实现</li><li>当我们在验证时，传入的是一个二维数组，就可以使用来验证子项</li><li>我们就自定义一个验证的方法，通过基类的验证的调用</li></ul><figure class="highlight php"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br></pre></td><td class="code"><pre><span class="line"></span><br><span class="line"><span class="comment">// 整体验证</span></span><br><span class="line"><span class="keyword">protected</span> $rule = [</span><br><span class="line">  <span class="string">'products'</span> =&gt; <span class="string">'checkProducts'</span></span><br><span class="line">];</span><br><span class="line"></span><br><span class="line"><span class="comment">// 数据子项的验证</span></span><br><span class="line"><span class="keyword">protected</span> $singleRule = [</span><br><span class="line">    <span class="string">'product_id'</span> =&gt; <span class="string">'require|isPositiveInteger'</span>,</span><br><span class="line">    <span class="string">'count'</span> =&gt; <span class="string">'require|isPositiveInteger'</span></span><br><span class="line">];</span><br><span class="line"></span><br><span class="line"><span class="comment">/*</span></span><br><span class="line"><span class="comment"> * 自定义整体验证</span></span><br><span class="line"><span class="comment"> */</span></span><br><span class="line"><span class="keyword">protected</span> <span class="function"><span class="keyword">function</span> <span class="title">checkProducts</span> <span class="params">($values)</span> </span>&#123;</span><br><span class="line">    <span class="comment">// 验证是不是数组</span></span><br><span class="line">    <span class="keyword">if</span> (!is_array($values)) &#123;</span><br><span class="line">        <span class="keyword">throw</span> <span class="keyword">new</span> ParameterException([</span><br><span class="line">            <span class="string">'msg'</span> =&gt; <span class="string">'商品参数不正确'</span></span><br><span class="line">        ]);</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="comment">// 验证不为空</span></span><br><span class="line">    <span class="keyword">if</span> (<span class="keyword">empty</span>($values)) &#123;</span><br><span class="line">        <span class="keyword">throw</span> <span class="keyword">new</span> ParameterException([</span><br><span class="line">            <span class="string">'msg'</span> =&gt; <span class="string">'商品列表不能为空'</span></span><br><span class="line">        ]);</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="comment">// 循环对每一项进行验证</span></span><br><span class="line">    <span class="keyword">foreach</span> ($values <span class="keyword">as</span> $value) &#123;</span><br><span class="line">        <span class="keyword">$this</span>-&gt;checkProduct($value);</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">return</span> <span class="keyword">true</span>;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="comment">// 基础调用子项验证</span></span><br><span class="line"><span class="keyword">protected</span> <span class="function"><span class="keyword">function</span> <span class="title">checkProduct</span> <span class="params">($value)</span> </span>&#123;</span><br><span class="line">    $validate = <span class="keyword">new</span> BaseValidate(<span class="keyword">$this</span>-&gt;singleRule);</span><br><span class="line">    $result = $validate-&gt;check($value);</span><br><span class="line">    <span class="keyword">if</span> (!$result) &#123;</span><br><span class="line">        <span class="keyword">throw</span> <span class="keyword">new</span> ParameterException([</span><br><span class="line">            <span class="string">'msg'</span> =&gt; <span class="string">'商品参数不正确'</span></span><br><span class="line">        ]);</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h3 id="自动添加时间戳（TP5-内置添加时间戳）"><a href="#自动添加时间戳（TP5-内置添加时间戳）" class="headerlink" title="自动添加时间戳（TP5 内置添加时间戳）"></a>自动添加时间戳（TP5 内置添加时间戳）</h3><ul><li>在我们的操作中，我们的数据中会带有数据，tp5 为我们提供了自动添加时间戳</li></ul><ol><li>找到自己要添加的时间戳的模型 我是在 order 添加那我就去 orde 人的模型中</li><li>\$autoWriteTimestamp 添加为 true，需要是模型的方式才可以使用的</li><li>创建 修改 删除</li><li>默认为 create_time update_time delete_time</li><li>修改方法名 在模型下修改</li></ol><figure class="highlight php"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">// 自动写入时间戳</span></span><br><span class="line"><span class="keyword">protected</span> $autoWriteTimestamp = <span class="keyword">true</span>;</span><br><span class="line"><span class="comment">// 修改字段名</span></span><br><span class="line"><span class="comment">//         内置名称           自定义修改的名称</span></span><br><span class="line"><span class="keyword">protected</span> $createTime = <span class="string">'create_timestamp'</span>;</span><br></pre></td></tr></table></figure><h3 id="Tp5-事务应用"><a href="#Tp5-事务应用" class="headerlink" title="Tp5 事务应用"></a>Tp5 事务应用</h3><ul><li>在我们的应用中可能会出现分步的操作，可能会本地与服务端出现不一致</li><li>所以我们使用事务来做处理</li><li>在中间出现错误就会把数据回滚保持数据的一致性</li></ul><figure class="highlight php"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">// 开头加入开始</span></span><br><span class="line">    Db::startTrans();</span><br><span class="line">    <span class="keyword">try</span> &#123;</span><br><span class="line">        $orderNo = <span class="keyword">$this</span>-&gt;makeOrderNo();</span><br><span class="line">        $order = <span class="keyword">new</span> \app\api\model\Order();</span><br><span class="line">        $order-&gt;user_id = <span class="keyword">$this</span>-&gt;uid;</span><br><span class="line">        $order-&gt;order_no = $orderNo;</span><br><span class="line">        $order-&gt;total_price = $snap[<span class="string">'orderPrice'</span>];</span><br><span class="line">        $order-&gt;total_count = $snap[<span class="string">'totalCount'</span>];</span><br><span class="line">        $order-&gt;snap_img = $snap[<span class="string">'snapImg'</span>];</span><br><span class="line">        $order-&gt;snap_name = $snap[<span class="string">'snapName'</span>];</span><br><span class="line">        $order-&gt;snap_address = $snap[<span class="string">'snapAddress'</span>];</span><br><span class="line">        $order-&gt;snap_items = json_encode($snap[<span class="string">'pStatus'</span>]);</span><br><span class="line"></span><br><span class="line">        $order-&gt;save();</span><br><span class="line"></span><br><span class="line">        $orderID = $order-&gt;id;</span><br><span class="line">        $create_time = $order-&gt;create_time;</span><br><span class="line"></span><br><span class="line">        <span class="keyword">foreach</span> (<span class="keyword">$this</span>-&gt;oProducts <span class="keyword">as</span> &amp;$p) &#123;</span><br><span class="line">            $p[<span class="string">'order_id'</span>] = $orderID;</span><br><span class="line">        &#125;</span><br><span class="line"></span><br><span class="line">        $orderProduct = <span class="keyword">new</span> OrderProduct();</span><br><span class="line">        $orderProduct-&gt;saveAll(<span class="keyword">$this</span>-&gt;oProducts);</span><br><span class="line"></span><br><span class="line">        <span class="comment">// 结尾加上结束</span></span><br><span class="line">        Db::commit();</span><br><span class="line"></span><br><span class="line">        <span class="keyword">return</span> [</span><br><span class="line">            <span class="string">'order_no'</span> =&gt; $orderNo,</span><br><span class="line">            <span class="string">'order_id'</span> =&gt; $orderID,</span><br><span class="line">            <span class="string">'create_time'</span> =&gt; $create_time</span><br><span class="line">        ];</span><br><span class="line">    &#125; <span class="keyword">catch</span> (<span class="keyword">Exception</span> $ex) &#123;</span><br><span class="line">        <span class="comment">// 异常出现回滚</span></span><br><span class="line">        Db::rollback();</span><br><span class="line">        <span class="keyword">throw</span> $ex;</span><br><span class="line">    &#125;</span><br></pre></td></tr></table></figure><h3 id="引入没有命名空间的文件与调用-Loader-，手动引入微信支付-php"><a href="#引入没有命名空间的文件与调用-Loader-，手动引入微信支付-php" class="headerlink" title="引入没有命名空间的文件与调用(Loader)，手动引入微信支付 php"></a>引入没有命名空间的文件与调用(Loader)，手动引入微信支付 php</h3><ul><li>使用 loader 的 import 方法</li><li>extend/WxPay/WePay.Api.php</li></ul><figure class="highlight php"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line">    <span class="comment">//         文件开头的第一个  文件路径       // 类的名称</span></span><br><span class="line">Loader::import(<span class="string">'WxPay.WxPay'</span>,EXTEND_PATH,<span class="string">'.Api.php'</span>);</span><br><span class="line"><span class="comment">// 调用</span></span><br><span class="line"><span class="comment">// 调用的时候前面要加反斜杠</span></span><br><span class="line">$wxOrderData = <span class="keyword">new</span> \WxPayUnifiedOrder();</span><br></pre></td></tr></table></figure><h3 id="TP5-模型实现数据减少-setDec"><a href="#TP5-模型实现数据减少-setDec" class="headerlink" title="TP5 模型实现数据减少 setDec"></a>TP5 模型实现数据减少 setDec</h3><figure class="highlight php"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">                                            <span class="comment">// 前面是查询  第一个数是写要改变的字段  第二个是要减少的数量</span></span><br><span class="line">Product::where(<span class="string">'id'</span>,<span class="string">'='</span>,$singlePStatus[<span class="string">'id'</span>])-&gt;setDec(<span class="string">'stock'</span>,$singlePStatus[<span class="string">'count'</span>]);</span><br></pre></td></tr></table></figure><h3 id="数据库锁与事务锁的区别"><a href="#数据库锁与事务锁的区别" class="headerlink" title="数据库锁与事务锁的区别"></a>数据库锁与事务锁的区别</h3><ul><li>数据库模型-&gt;lock(true)</li><li>事务锁 Db</li></ul><ol><li>事务锁是等待整个事务提交才会执行第二次事务，但是数据库模型锁只是单步的锁着了数据库查询语句</li><li>在后面的操作还没有执行时，数据库模型锁已经放开了</li></ol><h3 id="外部网址使用"><a href="#外部网址使用" class="headerlink" title="外部网址使用"></a>外部网址使用</h3><ul><li>要从根目录一直到 index.php</li><li>后面才是路由</li><li><a href="http://www.yhf7/zerg/public/index.php/api/v1/pay/notify" target="_blank" rel="noopener">www.yhf7/zerg/public/index.php/api/v1/pay/notify</a></li></ul><h3 id="模型分页查询-paginate"><a href="#模型分页查询-paginate" class="headerlink" title="模型分页查询(paginate)"></a>模型分页查询(paginate)</h3><ul><li>第一个参数是分类数</li><li>第二个数是否简洁模式</li><li>第三个是数组填入分页数</li></ul><figure class="highlight php"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line"></span><br><span class="line"><span class="keyword">public</span> <span class="keyword">static</span> <span class="function"><span class="keyword">function</span> <span class="title">getSummaryByUser</span> <span class="params">($uid,$page=<span class="number">1</span>,$size=<span class="number">15</span>)</span> </span>&#123;</span><br><span class="line">    $paginData = <span class="keyword">self</span>::where(<span class="string">'user_id'</span>,<span class="string">'='</span>,$uid)-&gt;order(<span class="string">'create_time desc'</span>)-&gt;paginate($size,<span class="keyword">true</span>,[<span class="string">'page'</span> =&gt; $page]);</span><br><span class="line">    <span class="keyword">return</span> $paginData;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>]]></content>
    
    <summary type="html">
    
      
      
        &lt;link rel=&quot;stylesheet&quot; class=&quot;aplayer-secondary-style-marker&quot; href=&quot;/assets/css/APlayer.min.css&quot;&gt;&lt;script src=&quot;/assets/js/APlayer.min.js&quot; cla
      
    
    </summary>
    
      <category term="小程序" scheme="http://yoursite.com/categories/%E5%B0%8F%E7%A8%8B%E5%BA%8F/"/>
    
    
      <category term="小程序 笔记" scheme="http://yoursite.com/tags/%E5%B0%8F%E7%A8%8B%E5%BA%8F-%E7%AC%94%E8%AE%B0/"/>
    
  </entry>
  
  <entry>
    <title>Git ssh 重构</title>
    <link href="http://yoursite.com/2019/02/11/gitshh-%E9%87%8D%E6%9E%84/"/>
    <id>http://yoursite.com/2019/02/11/gitshh-重构/</id>
    <published>2019-02-11T02:20:52.229Z</published>
    <updated>2019-02-11T02:47:42.050Z</updated>
    
    <content type="html"><![CDATA[<link rel="stylesheet" class="aplayer-secondary-style-marker" href="/assets/css/APlayer.min.css"><script src="/assets/js/APlayer.min.js" class="aplayer-secondary-script-marker"></script><h1 id="前言"><a href="#前言" class="headerlink" title="前言"></a>前言</h1><ul><li>昨天我说了忘记密码，今天我想说一下ssh的配置</li><li>有时候可以用但是ssh内部公钥可能会存在问题</li><li>所以今天我就来重构ssh</li></ul><h1 id="解决"><a href="#解决" class="headerlink" title="解决"></a>解决</h1><ol><li><p>进入.ssh</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">$ <span class="built_in">cd</span> .ssh/</span><br></pre></td></tr></table></figure></li><li><p>备份文件</p><ul><li>把公钥文件拷贝出来以防万一</li></ul></li><li><p>生成公钥</p><ul><li>生成密钥</li><li>输入后后面所有的都是直接回车就可以了</li><li>如果你要设置密码那就设置吧，ssh本来就是用来免密登录的，最好就是不用密码吧<figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">$ ssh-keygen</span><br></pre></td></tr></table></figure></li></ul></li></ol><p><img src="/git/git-ssh5.png" alt="git-ssh"></p><ol start="4"><li>查看密钥<ul><li>查看密钥配置<figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">$ cat ~/.ssh/id_rsa.pub</span><br></pre></td></tr></table></figure></li></ul></li></ol><p><img src="/git/git-ssh1.png" alt="git-ssh"></p><ol start="5"><li><p>添加密钥</p><ul><li>把查看密钥生成的代码拷贝到Github或码云</li><li>删除原有的输入新的就可以了<br><img src="/git/git-ssh2.png" alt="git-ssh"></li></ul></li><li><p>ssh下载项目</p><ul><li>复制项目到ssh地址下载</li><li>第一次使用ssh遇到Are you sure you want to continue connecting (yes/no)? yes 要输入yes表示同意验证本地ssh<figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">$ git <span class="built_in">clone</span> git@gitee.com:yhf7/zerg.git</span><br></pre></td></tr></table></figure></li></ul></li></ol><p><img src="/git/git-ssh3.png" alt="git-ssh"></p><ol start="7"><li>查看ssh配置了什么地方<ul><li>要在.ssh文件下</li><li>在什么地方设置了会看的出来<figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">$ cat known_hosts</span><br></pre></td></tr></table></figure></li></ul></li></ol><p><img src="/git/git-ssh4.png" alt="git-ssh"></p><h1 id="后记"><a href="#后记" class="headerlink" title="后记"></a>后记</h1><pre><code>- 才疏学浅，遇到了问题还好有大哥教我重构才得以解决，马上记录解决办法</code></pre>]]></content>
    
    <summary type="html">
    
      
      
        &lt;link rel=&quot;stylesheet&quot; class=&quot;aplayer-secondary-style-marker&quot; href=&quot;/assets/css/APlayer.min.css&quot;&gt;&lt;script src=&quot;/assets/js/APlayer.min.js&quot; cla
      
    
    </summary>
    
      <category term="Git" scheme="http://yoursite.com/categories/Git/"/>
    
    
      <category term="Git" scheme="http://yoursite.com/tags/Git/"/>
    
  </entry>
  
  <entry>
    <title>2019-01 - 02心得</title>
    <link href="http://yoursite.com/2019/02/10/%E6%96%B0%E5%B9%B4%E6%84%9F%E6%82%9F/"/>
    <id>http://yoursite.com/2019/02/10/新年感悟/</id>
    <published>2019-02-10T15:30:13.897Z</published>
    <updated>2019-02-10T15:54:43.982Z</updated>
    
    <content type="html"><![CDATA[<link rel="stylesheet" class="aplayer-secondary-style-marker" href="/assets/css/APlayer.min.css"><script src="/assets/js/APlayer.min.js" class="aplayer-secondary-script-marker"></script><p>在新的一年的这两个月中，看了书看了教学视频，也在掘金认识了一些人，加了一些学习交流群，看到了很多志同道合的人，很多也是和我一样科班出身然后也自己努力学习的前端后端的同学们，大家有问题就拿出来讨论一起学习你帮我解决一下问题你帮我解决一下问题这样的学习氛围非常的好，<br>看到小伙伴们都很用功的学习，大年三十也是有人开着电脑敲着代码，奋力的去学习，生怕被人超越了看到被人都很努力的在学习进步，你自己就在那里玩手机玩电脑的闲着，不是老天不公平而是你自己不努力怨不得天，当别人在拼命学习的时候你在为自己的小小能力而沾沾自喜的时候你已经输了<br>我不希望自己到了毕业也不知道找什么工作，什么工作适合自己，我想通过自己的努力改变生活改变自己的未来，所以我自己也开始了学习，但是知识永远是学不完的只能每天学一点慢慢的去积累，只有拼了才知道自己到底有多强大，也只有拼了才知道自己到底有多么的渺小，世界之大无奇不有<br>比你强的人大有人在，比你弱的也是大有人在，为何不做人中龙凤呢？只有自己强大起来才不会被人欺负被人看不起，我不想靠别人帮我什么，欠了的人情是要还的，我一直希望的是只要实力够强大就不会需要别人的帮助，所以自己要强大起来，用什么强大自己呢，那就只有学习，不断的学习<br>在it的领域中技术的更新换代是非常快了，我们还没来得及学完这一个，又到了下一个新的时代了，作为一个学生我非常想知道的是在职场中到底我们需要做什么可以做什么，需要很多的实战经验，但是经验是需要积累起来的，问过很多的大神在工作中要做什么，问很多的实战的东西，但是别人的<br>回答也只是做项目做多了就会有经验了，作为一个学生而且很多都是自学的自己对于做项目我是非常的吃力的，即使我可以写出前后端交互的项目来，毕竟也是一些小的项目，对于权限分级啊、路由拦截啊等的一些我都不会，遇到稍微难一点的业务逻辑我就要很久很久才可以想出来，而且还是用了<br>很多很笨的方法去实现，所以2019年的目标就是打好基础练好技术，找一份实习<br>2019目标：<br>3月完成小程序<br>4月vue的项目实战，reacts学习<br>5月 项目实战<br>后面都是一些实战，暑假找一份实习锻炼一下自己</p>]]></content>
    
    <summary type="html">
    
      
      
        &lt;link rel=&quot;stylesheet&quot; class=&quot;aplayer-secondary-style-marker&quot; href=&quot;/assets/css/APlayer.min.css&quot;&gt;&lt;script src=&quot;/assets/js/APlayer.min.js&quot; cla
      
    
    </summary>
    
      <category term="个人" scheme="http://yoursite.com/categories/%E4%B8%AA%E4%BA%BA/"/>
    
    
      <category term="个人" scheme="http://yoursite.com/tags/%E4%B8%AA%E4%BA%BA/"/>
    
  </entry>
  
  <entry>
    <title>解决Git ssh 密钥忘记密码</title>
    <link href="http://yoursite.com/2019/02/10/git-ssh%E5%BF%98%E8%AE%B0%E5%AF%86%E7%A0%81/"/>
    <id>http://yoursite.com/2019/02/10/git-ssh忘记密码/</id>
    <published>2019-02-10T15:14:32.896Z</published>
    <updated>2019-02-10T15:29:29.014Z</updated>
    
    <content type="html"><![CDATA[<link rel="stylesheet" class="aplayer-secondary-style-marker" href="/assets/css/APlayer.min.css"><script src="/assets/js/APlayer.min.js" class="aplayer-secondary-script-marker"></script><h1 id="前言"><a href="#前言" class="headerlink" title="前言"></a>前言</h1><ul><li>如果在之前有创建SSH的时候设置过密码，那就很有可能git操作时出现忘记密码的尴尬情况。</li><li>今天我就忘记了密码，在网上找到了解决的方法就记录下来</li></ul><h1 id="解决"><a href="#解决" class="headerlink" title="解决"></a>解决</h1><ul><li>在ssh密码忘记密码我们是无法去修改的，这个是一个保护机制，我们无法修改当是我们可以重新创建一个ssh密钥</li></ul><ol><li><p>进入本地ssh</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">$ <span class="built_in">cd</span> ~/.ssh</span><br></pre></td></tr></table></figure></li><li><p>查看文件 ls</p></li></ol><ul><li>如果本地有ssh秘钥的话会有id_rsa.pub，config，known_hosts等文件。如果本地没有ssh的话cd ~/.ssh这一步可能就会有找不到文件的提示了。 </li><li>一般忘记密码都是已经有的我们就不说了</li></ul><ol start="3"><li>创建新的ssh</li></ol><ul><li>输入这个后面改自己git的邮箱<figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">$ ssh-keygen -t rsa -b 4096 -C <span class="string">"905477376@qq.com"</span></span><br></pre></td></tr></table></figure></li></ul><ol start="4"><li>新密码</li></ol><ul><li>如果本地有ssh，会出现如下提示：<br><img src="/git/gitssh.png" alt="gitssh"><br>这里选择y，表示覆盖本地的ssh key，这也就是ssh秘钥删除的意思。<br>接着就是让你输入密码的，可以直接回车不设置密码，我还是设置密码的</li></ul><ol start="5"><li>查看密钥</li></ol><ul><li>把之前的公钥删掉添加新的</li><li>输入代码查看密钥然后复制到 GitHub或者码云上<figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">$ cat ~/.ssh/id_rsa.pub</span><br></pre></td></tr></table></figure></li></ul><p><img src="/git/gitssh2.png" alt="gitssh"></p><h1 id="后记"><a href="#后记" class="headerlink" title="后记"></a>后记</h1><ul><li>这就是我实践了的方法</li><li>欢迎一起学习交流</li></ul>]]></content>
    
    <summary type="html">
    
      
      
        &lt;link rel=&quot;stylesheet&quot; class=&quot;aplayer-secondary-style-marker&quot; href=&quot;/assets/css/APlayer.min.css&quot;&gt;&lt;script src=&quot;/assets/js/APlayer.min.js&quot; cla
      
    
    </summary>
    
      <category term="Git" scheme="http://yoursite.com/categories/Git/"/>
    
    
      <category term="Git" scheme="http://yoursite.com/tags/Git/"/>
    
  </entry>
  
  <entry>
    <title>Vue动画多个元素嵌套使用过渡</title>
    <link href="http://yoursite.com/2019/01/17/vue%20%E5%8A%A8%E7%94%BB%E5%B5%8C%E5%A5%97%E4%BD%BF%E7%94%A8/"/>
    <id>http://yoursite.com/2019/01/17/vue 动画嵌套使用/</id>
    <published>2019-01-17T04:01:32.491Z</published>
    <updated>2019-01-17T05:57:49.746Z</updated>
    
    <content type="html"><![CDATA[<link rel="stylesheet" class="aplayer-secondary-style-marker" href="/assets/css/APlayer.min.css"><script src="/assets/js/APlayer.min.js" class="aplayer-secondary-script-marker"></script><h1 id="前言"><a href="#前言" class="headerlink" title="前言"></a>前言</h1><ul><li>在我们前端的工作中我们的去写页面，总会觉得这样的效果给到用户好像很干没有什么体验</li><li>那我们就想搞搞新意思？</li><li>弄点动画上去憋，那么弄动画我又想他滚动又想他偏移又想有渐变效果</li><li>渐变和移动可以写在一起，但是滚动和偏移好像不可以一起执行喔</li><li>那我们就要分开两步来执行但是，vue的transition里面好像不可以同时执行两个transform</li><li>所以我们就来解决这个问题</li><li>其实嘛是可以嵌套使用的哦</li></ul><h1 id="工具-资料"><a href="#工具-资料" class="headerlink" title="工具/资料"></a>工具/资料</h1><ul><li>mac os 10.13.3</li><li>vue官方文档 <a href="https://cn.vuejs.org/v2/guide/transitions.html" target="_blank" rel="noopener">https://cn.vuejs.org/v2/guide/transitions.html</a></li><li>vs code</li></ul><h1 id="开始"><a href="#开始" class="headerlink" title="开始"></a>开始</h1><ol><li><p>套用我们的 transition</p><ul><li>在我们需要定义效果的外面包上 transition</li><li>这个 name 呢是自定义的也可以不写，个人认为最好是写一下<figure class="highlight html"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">transition</span> <span class="attr">name</span>=<span class="string">"move"</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">div</span> <span class="attr">class</span>=<span class="string">"cart-decrease"</span> <span class="attr">v-show</span>=<span class="string">"food.count&gt;0"</span> @<span class="attr">click</span>=<span class="string">"decreaseCart"</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">span</span> <span class="attr">class</span>=<span class="string">"inner icon-remove_circle_outline"</span>&gt;</span><span class="tag">&lt;/<span class="name">span</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;/<span class="name">div</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">transition</span>&gt;</span></span><br></pre></td></tr></table></figure></li></ul></li><li><p>定义Css</p><ul><li>如果使用name了，-前面写的就是name定义的名称，如果没有写那就直接用v就好</li><li>在我们要嵌套动画的地方也是向平时css关系那些嵌套进去就好了<figure class="highlight css"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">/* 这里我们定义了滑动和渐变 */</span></span><br><span class="line"><span class="selector-class">.move-enter-active</span>, <span class="selector-class">.move-leave-active</span></span><br><span class="line">    <span class="selector-tag">transition</span>: <span class="selector-tag">all</span> <span class="selector-class">.4s</span> <span class="selector-tag">linear</span></span><br><span class="line">    <span class="selector-tag">opacity</span>: 1</span><br><span class="line">    <span class="selector-tag">transform</span> <span class="selector-tag">translate3d</span>(0,0,0)</span><br><span class="line"><span class="selector-class">.move-enter</span>, <span class="selector-class">.move-leave-to</span> <span class="comment">/* .fade-leave-active below version 2.1.8 */</span></span><br><span class="line">    <span class="selector-tag">opacity</span>: 0</span><br><span class="line">    <span class="selector-tag">transform</span> <span class="selector-tag">translate3d</span>(24<span class="selector-tag">px</span>,0,0)</span><br><span class="line"></span><br><span class="line"><span class="comment">/* </span></span><br><span class="line"><span class="comment">    定义滚动</span></span><br><span class="line"><span class="comment">    这里我是动画下的，span想添加效果</span></span><br><span class="line"><span class="comment">    那么我们就把类名拼接在后面去使用就好了</span></span><br><span class="line"><span class="comment">    如果添加了不生效，那就换一个类名，因为有一些是官方的类名是不允许使用的</span></span><br><span class="line"><span class="comment"> */</span></span><br><span class="line"><span class="selector-class">.move-enter-active</span> <span class="selector-class">.inner</span>, <span class="selector-class">.move-leave-active</span> <span class="selector-class">.inner</span></span><br><span class="line">    <span class="selector-tag">transition</span>: <span class="selector-tag">all</span> <span class="selector-class">.4s</span> <span class="selector-tag">linear</span></span><br><span class="line">    <span class="selector-tag">transform</span> <span class="selector-tag">rotate</span>(0)</span><br><span class="line"><span class="selector-class">.move-enter</span> <span class="selector-class">.inner</span>, <span class="selector-class">.move-leave-to</span> <span class="selector-class">.inner</span></span><br><span class="line">    <span class="selector-tag">transform</span> <span class="selector-tag">rotate</span>(180<span class="selector-tag">deg</span>)</span><br></pre></td></tr></table></figure></li></ul></li></ol><ul><li>这样我们就实现了即滚动也偏移</li></ul><h1 id="后记"><a href="#后记" class="headerlink" title="后记"></a>后记</h1><ul><li>看了有没有发现很简单哈，其实本来也就是很简单嘛，只是一开始傻乎乎的用了in使得效果没粗来以为不可以这样用</li><li>这是本人的学习问题记录的笔记，有需要的可以借鉴</li><li>欢迎添加微信交流学习</li></ul>]]></content>
    
    <summary type="html">
    
      
      
        &lt;link rel=&quot;stylesheet&quot; class=&quot;aplayer-secondary-style-marker&quot; href=&quot;/assets/css/APlayer.min.css&quot;&gt;&lt;script src=&quot;/assets/js/APlayer.min.js&quot; cla
      
    
    </summary>
    
      <category term="Vue" scheme="http://yoursite.com/categories/Vue/"/>
    
    
      <category term="Vue笔记" scheme="http://yoursite.com/tags/Vue%E7%AC%94%E8%AE%B0/"/>
    
  </entry>
  
  <entry>
    <title>安装/解决Hexo next搜索错误笔记</title>
    <link href="http://yoursite.com/2019/01/09/%E6%90%9C%E7%B4%A2%E9%94%99%E8%AF%AF/"/>
    <id>http://yoursite.com/2019/01/09/搜索错误/</id>
    <published>2019-01-09T13:08:00.585Z</published>
    <updated>2019-01-09T14:03:15.784Z</updated>
    
    <content type="html"><![CDATA[<link rel="stylesheet" class="aplayer-secondary-style-marker" href="/assets/css/APlayer.min.css"><script src="/assets/js/APlayer.min.js" class="aplayer-secondary-script-marker"></script><h1 id="前言"><a href="#前言" class="headerlink" title="前言"></a>前言</h1><ul><li>搜索功能无效，一直在哪转圈圈，头都晕了</li><li>说起就来气，添加了那么多篇文章，突然就这几天就不可以用hexo的搜索功能，我写了那么多篇文章突然今天写项目发现不记得想来查一下居然用不了气得我</li><li>横看竖看都不知道错哪里，配置了好几遍也是不行</li><li>最后还是被我ko了</li><li>赶紧记录下来下一次就不用怕了</li></ul><h1 id="所需工具-资料"><a href="#所需工具-资料" class="headerlink" title="所需工具/资料"></a>所需工具/资料</h1><ul><li>mac 10.13.3</li><li>VS code (软件很多自己喜欢，这个失败了一会说原因)</li><li>Chrome</li><li>Sublime (这个是解决问题的关键哦)</li></ul><h1 id="开始ko错误之旅"><a href="#开始ko错误之旅" class="headerlink" title="开始ko错误之旅"></a>开始ko错误之旅</h1><p><img src="/hexo/hexo-x1.png" alt="hexo"></p><h3 id="查错第一步（其实和安装没有啥区别）"><a href="#查错第一步（其实和安装没有啥区别）" class="headerlink" title="查错第一步（其实和安装没有啥区别）"></a>查错第一步（其实和安装没有啥区别）</h3><ol><li>查看package</li></ol><ul><li>根目录 package.json<br>看看有没有 hexo-generator-searchdb 看这个的主要原因的看看有没有安装这个中间件，如果没有安装就安装一下<figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">$ npm install hexo-generator-searchdb --save</span><br></pre></td></tr></table></figure></li></ul><ol start="2"><li>查看 /themes/next/_config.yml 配置</li></ol><ul><li>搜索 local_search看看这个下面的enable 是否处于<figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">local_search:</span><br><span class="line">  enable: true</span><br></pre></td></tr></table></figure></li></ul><ol start="3"><li>查看添加配置（这个我个人觉得嘛加和不加没有区别）</li></ol><ul><li>添加 /themes/next/_config.yml<figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line">search:</span><br><span class="line">  path: search.xml</span><br><span class="line">  field: post</span><br><span class="line">  format: html</span><br><span class="line">  limit: 10000</span><br></pre></td></tr></table></figure></li></ul><h3 id="查错第二步"><a href="#查错第二步" class="headerlink" title="查错第二步"></a>查错第二步</h3><ol><li>有可能是文字的数量太多引起的</li></ol><ul><li>可以修改刚才配置的 search：内的limit 把数值加大试试</li></ul><ol start="2"><li>查看文件名什么的有没有定义错误或者是什么弄错了</li></ol><ul><li>直接 sudo hexo g 打包就知道了，如果报错了那就是文件有问题</li></ul><h3 id="差错第三步（关键，很多的问题会出在这里）"><a href="#差错第三步（关键，很多的问题会出在这里）" class="headerlink" title="差错第三步（关键，很多的问题会出在这里）"></a>差错第三步（关键，很多的问题会出在这里）</h3><ul><li>有可能是文章内部的一下符号引起的错误 （我就知道是这样引起的为什么不执行我真的不懂）（这样的错误有可能是因为跟编辑器或者输入法有关系）</li><li>字符错误 <span style="color:red">Bytes: 0x08 0xE4 0xB8 0x80</span> 其实也是空格只是不识别的软件才可以看的出了</li><li>在我们的 vs code 这个软件呢就是识别了这种符号所以并没有显示出了 在我们的Sublime 就是不识别直接就可以显示出来了<h4 id="解决问题方法一-（这些只可以在sublime或者其他的软件中做，vs-code不可以的哦）"><a href="#解决问题方法一-（这些只可以在sublime或者其他的软件中做，vs-code不可以的哦）" class="headerlink" title="解决问题方法一 （这些只可以在sublime或者其他的软件中做，vs code不可以的哦）"></a>解决问题方法一 （这些只可以在sublime或者其他的软件中做，vs code不可以的哦）</h4></li><li>直接就在 search.xml 文件中 直接搜索 \x08 或者 \u0008删掉</li><li>但是呢这样的方法治标不治本啊</li><li>在你下一次的添加文件编译的时候还是会带上的<h4 id="解决方法二（方法一治标不治本那我们再来一个方法）"><a href="#解决方法二（方法一治标不治本那我们再来一个方法）" class="headerlink" title="解决方法二（方法一治标不治本那我们再来一个方法）"></a>解决方法二（方法一治标不治本那我们再来一个方法）</h4></li><li>直接找到错误文件 这里我是把文件都考出来然后把一些比较早点文件先放回去</li><li>然后后面都文件一个一个那样去测试找到错误文件 （主要是我一开始不知道是这样的错误才那样去找）</li><li>现在知道了错误直接就在 Sublime 打开所有的md看看有没有 上面的错误字符 有就删掉就可以了</li><li>这个是我的错误（每个人的都可能不一样）<br><img src="/hexo/hexo-x2.png" alt="hexo"></li></ul><h1 id="后记"><a href="#后记" class="headerlink" title="后记"></a><span>后记</span></h1><ul><li>终于吐槽完，也说完错误了，这是我个人的一个查错以及解决的方法，希望有缘人看到可以帮到你</li><li>这些都是我的一些笔记，欢迎一起学习讨论</li></ul>]]></content>
    
    <summary type="html">
    
      
      
        &lt;link rel=&quot;stylesheet&quot; class=&quot;aplayer-secondary-style-marker&quot; href=&quot;/assets/css/APlayer.min.css&quot;&gt;&lt;script src=&quot;/assets/js/APlayer.min.js&quot; cla
      
    
    </summary>
    
      <category term="Hexo" scheme="http://yoursite.com/categories/Hexo/"/>
    
    
      <category term="Hexo笔记" scheme="http://yoursite.com/tags/Hexo%E7%AC%94%E8%AE%B0/"/>
    
  </entry>
  
  <entry>
    <title>网上抓取 Git进阶笔记</title>
    <link href="http://yoursite.com/2019/01/09/Git%E8%BF%9B%E9%98%B6/"/>
    <id>http://yoursite.com/2019/01/09/Git进阶/</id>
    <published>2019-01-09T12:29:35.691Z</published>
    <updated>2019-01-09T12:29:35.691Z</updated>
    
    <content type="html"><![CDATA[<link rel="stylesheet" class="aplayer-secondary-style-marker" href="/assets/css/APlayer.min.css"><script src="/assets/js/APlayer.min.js" class="aplayer-secondary-script-marker"></script><h1 id="前言"><a href="#前言" class="headerlink" title="前言"></a>前言</h1><ul><li>这个git的解说是我在网上看到然后觉得挺好抓取下来给自己用的，并非个人所写</li></ul><p>Git 进阶知识点<br>作为分布式的版本控制系统，Git 的操作指令非常多，但是我们可以灵活的组合使用一些常用指令，就可以玩转大多数的日常 Git 使用场景。</p><h1 id="1、温习-Git-工作-区域"><a href="#1、温习-Git-工作-区域" class="headerlink" title="1、温习 Git 工作  区域"></a>1、温习 Git 工作  区域</h1><p>先来温习一下 Git 的工作区域划分：工作目录、暂存区、本地仓库，实际操作中，我们需要知道每一步操作发生在哪个工作区域，那么再复杂的 Git 问题都能  轻松解决。</p><p>先看一张逻辑工作区域划分图：<br><img src="/git/git_07.png" alt="git_07.png"></p><p>物理  工作区域划分图：<br><img src="/git/git_08.png" alt="git_07.png"></p><ul><li>.git 是隐藏文件夹，大多版本控制软件都会用一个隐藏的文件夹作为其本地版本仓库，SVN 也是如此。用户的每一步操作都被这个隐藏文件夹里的代码记录着。</li></ul><h1 id="2、一次完整的本地提交"><a href="#2、一次完整的本地提交" class="headerlink" title="2、一次完整的本地提交"></a>2、一次完整的本地提交</h1><p>虽然 Git 是分布式的  版本控制系统，工作中，我们都会有远程仓库的概念，但只需熟练玩转本地仓库即可，因为远程仓库不过是别人电脑上的本地仓库。接下来我们来看看一次完整的提交，是如何在三个工作区域之间转换的：<br><img src="/git/git_09.png" alt="git_07.png"></p><p>上图中也引出了 git reset 回滚命令的三个参数：–soft –mixed –hard，三个  参数回滚的程度  逐渐增强，实际使用中可以根据具体需求灵活使用。</p><p>另外不要忽略了 git commit 只提交那些被记录到了暂存区的修改。</p><h1 id="3、使用好-checkout"><a href="#3、使用好-checkout" class="headerlink" title="3、使用好 checkout"></a>3、使用好 checkout</h1><p>checkout 可能是 git 中比较多功能的一个命令。</p><ul><li>git checkout [分支名] : 切换分支。</li><li>git checkout [commit 序列号] : 穿越到指定的某次 commit。</li><li>git checkout -b [分支名] : 创建并切换分支。</li><li>git checkout –ours/theirs : 解决冲突时用来检出某方的提交。</li><li>git checkout [文件名/路径/.] : 丢弃某些文件/文件夹/所有修改。</li></ul><p>所以 checkout 这个检出操作，不仅仅是用来切换分支，还有很多强大的功能；注意点：git checkout . 指令丢弃的文件是无法找回的，使用请谨慎，防止车祸现场。</p><h1 id="4、使用简单的组合命令进行历史修改"><a href="#4、使用简单的组合命令进行历史修改" class="headerlink" title="4、使用简单的组合命令进行历史修改"></a>4、使用简单的组合命令进行历史修改</h1><h3 id="修改历史中的某次提交信息"><a href="#修改历史中的某次提交信息" class="headerlink" title="修改历史中的某次提交信息"></a>修改历史中的某次提交信息</h3><p>由于某些原因， 有时候总要修改一下提交历史，或者叫重写历史，最简单的修改最近一次提交命令 git commit –amend，然后会进入文本编辑状态，修改你的提交信息。</p><p>但是如果不是最近一次提交，而是历史中较远的前几条信息，那么单纯使用 git commit –amend 就不行了，比如下图这种情况，想要将 “第一次提交” 改为 “首次提交”。<br><img src="/git/git_10.png" alt="git_07.png"></p><p>这时你可能马上会想到 git rebase 变基命令，但是对于这种情况，我们可以使用  git checkout 组合 git commit –amend 完成同样的工作:</p><p>1、先用 git checkout 36ae20…  穿越回第一次提交的节点中，此时我们执行 git log 看到的只有第一次提交的 commit:<br><img src="/git/git_11.png" alt="git_07.png"></p><p>2、那么接下来你也猜到了，执行 git commit –amend 吧。<br>3、然后再次 git checkout master  穿越回当前分支的最新节点。</p><h3 id="合并多次提交历史-为一次"><a href="#合并多次提交历史-为一次" class="headerlink" title="合并多次提交历史  为一次"></a>合并多次提交历史  为一次</h3><p>合并多次历史是比较常见的需求，同样我们先不用 rebase，使用一些常用的命令；例如我们要将上边例子中的三次提交合并为一次，我们可以先用 reset 回滚多次历史提交，然后 commit –amend 重写提交即可：</p><p>1、 先用 git reset –soft 36ae20…，软回滚到第一次提交(36ae20…是历史中第一次的提交序列号，这里也可以使用 HEAD~3 这种头指针回数的形式)，这时候  git log 又变成了只有第一次的 commit 信息：</p><p><img src="/git/git_11.png" alt="git_07.png"></p><p>但是通过 git status 可以看到其他两次提交都已经被我们  使用 reset –soft 将最近两次提交回滚到了暂存区：<br><img src="/git/git_13.png" alt="git_07.png"></p><p>2、接下来，使用 git commit –amend 重新提交并修改最近一次的 commit 信息即可。</p><p>使用 reset –soft 我们将提交回滚到暂存区，这样可以在重新提交的时候，少写一次 git add。<br>如果多次合并的 commit 不是从最近一次的提交历史  开始，那么久多使用一次 git checkout 。</p><p>你看，貌似不需要  学习 rebase 也能完成 Git 重写历史。</p><h1 id="5、使用-git-rebase-修改历史"><a href="#5、使用-git-rebase-修改历史" class="headerlink" title="5、使用 git rebase  修改历史"></a>5、使用 git rebase  修改历史</h1><p>对于  4、使用简单的组合命令进行历史修改 中的案例，我们可以使用更加高级的 git 工具 rebase，使用 rebase 来干这些事情会显得更加专业，当然 rebase 的功能也更加强大一些。但是依然要写出来 4、使用简单的组合命令进行历史修改 这一部分内容，是想表达，有时候一些问题的解决办法并不唯一，灵活使用一些我们已经学过的  知识点也能曲线救国；假如你还不会使用 rebase，眼下又个紧急的 git 历史合并任务要做，马上去学习 rebase 又有些来不及，那么只能急中生智了。</p><p>接着  4 中的例子，我们使用 git rebase -i 36ae20… ，然后我们会看到如下的文本编辑界面：</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br></pre></td><td class="code"><pre><span class="line">pick 1f737d8 第二次提交</span><br><span class="line">pick 8e401d5 第三次提交</span><br><span class="line">pick bc9c6f0 第四次提交</span><br><span class="line"></span><br><span class="line"><span class="comment"># Rebase d973330..bc9c6f0 onto d973330 (3 commands)</span></span><br><span class="line"></span><br><span class="line"><span class="comment">#</span></span><br><span class="line"></span><br><span class="line"><span class="comment"># Commands:</span></span><br><span class="line"></span><br><span class="line"><span class="comment"># p, pick = use commit</span></span><br><span class="line"></span><br><span class="line"><span class="comment"># r, reword = use commit, but edit the commit message</span></span><br><span class="line"></span><br><span class="line"><span class="comment"># e, edit = use commit, but stop for amending</span></span><br><span class="line"></span><br><span class="line"><span class="comment"># s, squash = use commit, but meld into previous commit</span></span><br><span class="line"></span><br><span class="line"><span class="comment"># f, fixup = like "squash", but discard this commit's log message</span></span><br><span class="line"></span><br><span class="line"><span class="comment"># x, exec = run command (the rest of the line) using shell</span></span><br><span class="line"></span><br><span class="line"><span class="comment"># d, drop = remove commit</span></span><br><span class="line"></span><br><span class="line"><span class="comment">#</span></span><br><span class="line"></span><br><span class="line"><span class="comment"># These lines can be re-ordered; they are executed from top to bottom.</span></span><br><span class="line"></span><br><span class="line"><span class="comment">#</span></span><br><span class="line"></span><br><span class="line"><span class="comment"># If you remove a line here THAT COMMIT WILL BE LOST.</span></span><br><span class="line"></span><br><span class="line"><span class="comment">#</span></span><br><span class="line"></span><br><span class="line"><span class="comment"># However, if you remove everything, the rebase will be aborted.</span></span><br><span class="line"></span><br><span class="line"><span class="comment">#</span></span><br><span class="line"></span><br><span class="line"><span class="comment"># Note that empty commits are commented out</span></span><br></pre></td></tr></table></figure><p>注释中，我们看到 reword edit squash 等指令，这里我们把 pick 改为 edit。</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line">edit 1f737d8 第二次提交</span><br><span class="line">pick 8e401d5 第三次提交</span><br><span class="line">pick bc9c6f0 第四次提交</span><br></pre></td></tr></table></figure><p>然后保存退出，接下来 git 会把你带入第二次的 commit 节点， 并有如下提示：<br><img src="/git/git_14.png" alt="git_07.png"></p><p>到这里，我们需要执行 git commit –amend 来执行 commit 修改。编辑保存后，再执行：</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">$ git rebase --<span class="built_in">continue</span></span><br></pre></td></tr></table></figure><p>然后  git 把你带回到 master 分支的最新节点，整个操作完成。</p><p>如果要合并提交，我们需要把 edit 改为 squash：<br><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line">pick 1f737d8 修改为第二次提交</span><br><span class="line">squash 8e401d5 第三次提交</span><br><span class="line">squash bc9c6f0 第四次提交</span><br></pre></td></tr></table></figure></p><p>接下来，git 会进入另一个编辑界面：</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment"># This is a combination of 3 commits.</span></span><br><span class="line"></span><br><span class="line"><span class="comment"># This is the 1st commit message:</span></span><br><span class="line"></span><br><span class="line">修改为第二次提交</span><br><span class="line"></span><br><span class="line"><span class="comment"># This is the commit message #2:</span></span><br><span class="line"></span><br><span class="line">第三次提交</span><br><span class="line"></span><br><span class="line"><span class="comment"># This is the commit message #3:</span></span><br><span class="line"></span><br><span class="line">第四次提交</span><br><span class="line"></span><br><span class="line"><span class="comment"># Please enter the commit message for your changes. Lines starting</span></span><br><span class="line"></span><br><span class="line"><span class="comment"># with '#' will be ignored, and an empty message aborts the commit.</span></span><br></pre></td></tr></table></figure><p>这个界面里，可以修改你最终要显示的提交信息，这里直接保存退出，完成合并，此时 git log 显示如下：</p><p><img src="/git/git_15.png" alt="git_15.png"></p><p>除了修改和  合并提交，还可以使用 git rebase 进行拆分、删除提交操作，就不一一演示。</p><p>最终你会发现，使用 git rebase 来修改历史步骤比较繁琐，还不如使用 4、使用简单的组合命令进行历史修改 的方式来操作简单。</p><h4 id="理解分支合并中的-Fast-forward-merge-rebase"><a href="#理解分支合并中的-Fast-forward-merge-rebase" class="headerlink" title="理解分支合并中的 Fast-forward/merge/rebase"></a>理解分支合并中的 Fast-forward/merge/rebase</h4><p>在分支合并的场景  中，我们有时会看到 Fast-forward ， Fast-Forword 很好理解，在 Git 中就是它直译  过来的意思’快进‘，下面我做了四个小视频，来解释 Fast-forward/merge/rebase。</p><p>观看视频前，我们以下图做个 demo 背景说明：</p><p><img src="/git/git_16.png" alt="git_15.png"></p><p>图中有两条分支，master 和 feature1 分支，feature1 是从 master 的 C2 节点拉出来的分支，背景说明完毕。</p><p>Fast-forward 合并模式</p><video controls width="100%" height="100%"><br>    <source src="/git/fast-forward.mov"><br></video><p>Fast-forward 的合并模式永远不会有冲突产生。</p><h4 id="非-Fast-forward-合并模式"><a href="#非-Fast-forward-合并模式" class="headerlink" title="非 Fast-forward 合并模式"></a>非 Fast-forward 合并模式</h4><video controls width="100%" height="100%"><br>    <source src="/git/nofast-forward.mov"><br></video><p>这种非 Fast-forward 的合并模式下才有可能发生合并冲突。</p><h4 id="merge-过程"><a href="#merge-过程" class="headerlink" title="merge 过程"></a>merge 过程</h4><p>为了和下边的 rebase 做对比，视频中在 feature1 分支中做 git merge master 操作</p><p><video controls width="100%" height="100%"><br>    <source src="/git/from-feature-merge.mov"><br></video></p><h4 id="rebase-过程"><a href="#rebase-过程" class="headerlink" title="rebase 过程"></a>rebase 过程</h4><p><video controls width="100%" height="100%"><br>    <source src="/git/rebase-process.mov"><br></video><br>前边我们用 rebase 来重写历史，这里的 rebase 用来在分支之间合并变基，变基可以理解为改变基点，基点就是某条分支在另一条分支上的起点，这个点是出现分支的点；rebase 和 merge 在从结果上来看，及其相似，但是其过程却大不相同，我想看了视频，你应该理解了。</p><p>rebase 的目的并不是做一次合并，而是为了让某条分支  与主分支的  当前进程保持同步更新，进而在合入主分支的时候，能够以 Fast-forward 的过程合并，避免冲突；rebase 的过程  有冲突的可能，但是这种冲突时发生在当前分支，不会影响主分支，所以也不会影响和你一起合作的其他小伙伴。所以  在多人合作的时候经常使用 rebase 是个好习惯。</p><p>一次完整的 rebase 场景</p><p><video controls width="100%" height="100%"><br>    <source src="/git/rebase-demo.mov"><br></video></p><h1 id="解决冲突"><a href="#解决冲突" class="headerlink" title="解决冲突"></a>解决冲突</h1><p>解决冲突其实很简单，理解了 git 本地操作和 git merge 过程，解决冲突就是个体力活了；cherry-pick/merge/rebase/revert 等操作都有可能发生冲突；</p><p>冲突产生时我们只需要通过 git status 查看具体发生冲突的文件，然后打开编辑文件，选择保留的内容后保存文件，然后继续 merge 或者 rebase，指令分别是：git merge –continuegit rebase –continue；除了 –continue 参数，我们还可以使用 –abort 来终止 merge 或者 rebase 。</p><p>之所以说解决冲突是个体力活主要看，冲突文件的数量和内容多不多，如果冲突较多时，我们一一修改可能就比较累了，这时候可以借助 checkout 指令来保留冲突双方的其中一方修改：</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">$ git checkout --ours // 保留自己的修改</span><br><span class="line">$ git checkout --their // 保留别人的修改</span><br></pre></td></tr></table></figure><p>注意点：rebase 的过程，ours 和 theirs 是反过来的。当然，我们也可以借助图像化工具来解决冲突：<br><img src="/git/git_17.png" alt="git"></p><p>选择后，会进入图像化操作：</p><p><img src="/git/git_18.png" alt="git"></p><h1 id="关联远程仓库"><a href="#关联远程仓库" class="headerlink" title="关联远程仓库"></a>关联远程仓库</h1><p>当我们需要关联远程仓库的时候，可以通过 git remote add [远程仓库命名][ssh/http 地址]，例如：</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">$ git remote add origin git@git.coding.net:demo/demo.git</span><br></pre></td></tr></table></figure><p>这里把远程仓库 <a href="mailto:git@git.coding.net" target="_blank" rel="noopener">git@git.coding.net</a>:demo/demo.git 命名为 origin。一个仓库可以关联多个远程仓库，但是仓库名不能相同：</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">$ git remote add gh git@git.github.com:demo/demo.git</span><br></pre></td></tr></table></figure><p>这里，我们把另一个远程仓库 <a href="mailto:git@git.github.com" target="_blank" rel="noopener">git@git.github.com</a>:demo/demo.git 命名为 gb 关联了本地仓库，当我们需要同时往多个远程仓库推送文件时，可以使用了。</p><p>最后通过 git remote -v 可以查看本地仓库关联的所有远程仓库。</p><h1 id="git-config-配置文件"><a href="#git-config-配置文件" class="headerlink" title="git config 配置文件"></a>git config 配置文件</h1><p>在 Mac 系统中，git 的配置文件有两处，一个是全局配置文件：~/.gitconfig ，在用户目录下；另一个是当前仓库的配置文件，在 .git 文件夹下，两种重复时，优先使用 .git 文件下的 config 文件。</p><p><img src="/git/git_20.png" alt="git"></p><p>config 文件的内容：</p><p><img src="/git/git_19.png" alt="git"></p><p>一些情况下，我们可以直接编辑 config 文件来修改 git 的配置。</p><h1 id="git-常用指令表-参数省略"><a href="#git-常用指令表-参数省略" class="headerlink" title="git 常用指令表 参数省略"></a>git 常用指令表 参数省略</h1><ul><li>本地操作<ul><li>git init</li><li>git add/rm</li><li>git commit</li><li>git squash</li><li>git rebase</li><li>git checkout</li></ul></li><li>状态查看及信息检查和比较<ul><li>git status</li><li>git log</li><li>git diff</li></ul></li><li>配置及别名<ul><li>git config</li><li>git alias</li></ul></li><li>分支操作<ul><li>git branch</li><li>git merge</li><li>git rebase</li><li>git cherry-pick</li><li>git checkout</li></ul></li><li>远程操作<ul><li>git clone</li><li>git remote</li><li>git push/pull</li><li>git fetch</li><li>git 时间旅行：分支切换、 回退历史、保存/清理现场</li><li>git reset</li><li>git revert</li><li>git stash</li><li>git checkout</li><li>git clean -fdx</li></ul></li></ul><h1 id="后记"><a href="#后记" class="headerlink" title="后记"></a>后记</h1><ul><li>个人认为这个git的笔记还是挺不错的</li><li>假如有侵犯到个人的权益请联系小编，我会及时的屏蔽这额笔记</li></ul>]]></content>
    
    <summary type="html">
    
      
      
        &lt;link rel=&quot;stylesheet&quot; class=&quot;aplayer-secondary-style-marker&quot; href=&quot;/assets/css/APlayer.min.css&quot;&gt;&lt;script src=&quot;/assets/js/APlayer.min.js&quot; cla
      
    
    </summary>
    
      <category term="Git" scheme="http://yoursite.com/categories/Git/"/>
    
    
      <category term="Git" scheme="http://yoursite.com/tags/Git/"/>
    
  </entry>
  
  <entry>
    <title>Vue-cli 2.0/3.0 mock数据配置</title>
    <link href="http://yoursite.com/2019/01/06/vue-cli-mock/"/>
    <id>http://yoursite.com/2019/01/06/vue-cli-mock/</id>
    <published>2019-01-06T13:08:47.101Z</published>
    <updated>2019-01-06T13:47:19.774Z</updated>
    
    <content type="html"><![CDATA[<link rel="stylesheet" class="aplayer-secondary-style-marker" href="/assets/css/APlayer.min.css"><script src="/assets/js/APlayer.min.js" class="aplayer-secondary-script-marker"></script><h1 id="前言"><a href="#前言" class="headerlink" title="前言"></a>前言</h1><ul><li>在我们开发的时候现在都是前后端分离的模式，后端给前端提供一个接口，由前端向后端发请求，得到数据后前端进行渲染。由于前后端开发进度的不统一，前端往往使用本地的测试数据进行数据渲染的测试。</li><li>所以我们就会用本地的json，来实现一个本地的数据测试，从而就有我们的mock数据</li><li>在我们使用 vue 开发的时候 也随着 vue-cli 脚手架的版本不断的升级，我们的配置方法也是不一样来，vue-cli3 基本自动会没有配置文件</li><li>在之前我也说过了vue-cli 编写node服务的 其实 app和express 并不用自己去引入的直接使用就可以了（我也是后面才意识到了这个问题）</li></ul><h1 id="所需工具-资料"><a href="#所需工具-资料" class="headerlink" title="所需工具/资料"></a>所需工具/资料</h1><ul><li>mac 10.13.3</li><li>vue-cli 2/3 (版本个人喜欢吧，我现在是3.0)</li><li>VS code (软件很多自己喜欢)</li><li>Chrome插件 jsonView (这个是用来在你页面看数据的时候自动对json进行格式化)</li><li>Postman 用来对api接口测试的 </li></ul><h1 id="开始"><a href="#开始" class="headerlink" title="开始"></a>开始</h1><h2 id="vue-cli2"><a href="#vue-cli2" class="headerlink" title="vue-cli2"></a>vue-cli2</h2><ul><li>在vue-cli构建的项目，我们可以借助devServer开启一个服务，然后我们可以通过路由模拟一个接口来进行测试。</li></ul><ol><li>第一步我们当然的建立一个json数据的文件（我这里自己定义好了,至于放不放在mock文件夹里面见仁见智）<br><img src="/vue-cli/vue-cli2-2.png" alt="vue-cli"></li><li>当然是配置啦 （打开build/webpack.dev.conf.js 进行配置）<ul><li>打开文件后先引入 json文件数据</li><li>找到 devServer 这个对象在里面添加 before</li><li>这里的app 是不需要我们自己去定义的直接调用就好<figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br></pre></td><td class="code"><pre><span class="line">  <span class="comment">// 引入文件</span></span><br><span class="line">  <span class="keyword">var</span> appData = <span class="built_in">require</span>(<span class="string">"../data.json"</span>);</span><br><span class="line">  <span class="keyword">var</span> seller = appData.seller;</span><br><span class="line">  <span class="keyword">var</span> goods = appData.goods;</span><br><span class="line">  <span class="keyword">var</span> ratings = appData.ratings;</span><br><span class="line"></span><br><span class="line">  <span class="comment">// 配置devServer</span></span><br><span class="line">  devServer: &#123;</span><br><span class="line">  before(app) &#123; <span class="comment">// 我直接就加在了开头的位置</span></span><br><span class="line">  <span class="comment">//  获取方法 路由 返回的数据</span></span><br><span class="line">    app.get(<span class="string">'/seller'</span>, (req, res) =&gt; &#123;</span><br><span class="line">      <span class="comment">// res.json(mockdata);</span></span><br><span class="line">      res.json(&#123;</span><br><span class="line">        errno: <span class="number">0</span>,</span><br><span class="line">        data: seller</span><br><span class="line">      &#125;);</span><br><span class="line">    &#125;);</span><br><span class="line"></span><br><span class="line">    app.get(<span class="string">'/goods'</span>, (req, res) =&gt; &#123;</span><br><span class="line">      <span class="comment">// res.json(mockdata);</span></span><br><span class="line">      res.json(&#123;</span><br><span class="line">        errno: <span class="number">0</span>,</span><br><span class="line">        data: goods</span><br><span class="line">      &#125;);</span><br><span class="line">    &#125;);</span><br><span class="line"></span><br><span class="line">    app.get(<span class="string">'/ratings'</span>, (req, res) =&gt; &#123;</span><br><span class="line">      <span class="comment">// res.json(mockdata);</span></span><br><span class="line">      res.json(&#123;</span><br><span class="line">        errno: <span class="number">0</span>,</span><br><span class="line">        data: ratings</span><br><span class="line">      &#125;);</span><br><span class="line">    &#125;);</span><br><span class="line">  &#125;,</span><br><span class="line">  clientLogLevel: <span class="string">"warning"</span>,</span><br><span class="line">  historyApiFallback: &#123;</span><br><span class="line">    rewrites: [&#123;</span><br><span class="line">      <span class="keyword">from</span>: <span class="regexp">/.*/</span>,</span><br><span class="line">      to: path.posix.join(config.dev.assetsPublicPath, <span class="string">"index.html"</span>)</span><br><span class="line">    &#125;]</span><br><span class="line">  &#125;,</span><br><span class="line">  hot: <span class="literal">true</span>,</span><br><span class="line">  contentBase: <span class="literal">false</span>, <span class="comment">// since we use CopyWebpackPlugin.</span></span><br><span class="line">  compress: <span class="literal">true</span>,</span><br><span class="line">  host: HOST || config.dev.host,</span><br><span class="line">  port: PORT || config.dev.port,</span><br><span class="line">  open: config.dev.autoOpenBrowser,</span><br><span class="line">  overlay: config.dev.errorOverlay ?</span><br><span class="line">    &#123;</span><br><span class="line">      warnings: <span class="literal">false</span>,</span><br><span class="line">      errors: <span class="literal">true</span></span><br><span class="line">    &#125; :</span><br><span class="line">    <span class="literal">false</span>,</span><br><span class="line">  publicPath: config.dev.assetsPublicPath,</span><br><span class="line">  proxy: config.dev.proxyTable,</span><br><span class="line">  quiet: <span class="literal">true</span>, <span class="comment">// necessary for FriendlyErrorsPlugin</span></span><br><span class="line">  watchOptions: &#123;</span><br><span class="line">    poll: config.dev.poll</span><br><span class="line">  &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure></li></ul></li></ol><p><img src="/vue-cli/vue-cli2-1.png" alt="vue-cli"></p><ol start="3"><li>调用</li></ol><ul><li>后面的before(app)部分就定义了可以通过向/seller发送get请求来得到我们要的json文件。</li><li>同时我们在vue文件中只要</li></ul><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">// 利用了axios</span></span><br><span class="line">axios.get(<span class="string">"/seller"</span>).then(<span class="function"><span class="params">res</span> =&gt;</span> &#123;</span><br><span class="line">        <span class="keyword">this</span>.seller = res.data;</span><br><span class="line">      &#125;).catch(<span class="function"><span class="params">error</span>=&gt;</span>&#123;</span><br><span class="line">        <span class="built_in">console</span>.log(error);</span><br><span class="line">      &#125;);</span><br></pre></td></tr></table></figure><ol start="4"><li>页面查看/postman 调试<br><img src="/vue-cli/vue-cli2-3.png" alt="vue-cli"><br><img src="/vue-cli/vue-cli2-4.png" alt="vue-cli"></li></ol><h2 id="vue-cli3"><a href="#vue-cli3" class="headerlink" title="vue-cli3"></a>vue-cli3</h2><ul><li>vue-cli3主打自动化，0配置。但是我们往往需要进行一些配置，这时我们就要创建一个配置文件。</li><li>mock 是我创建的文件夹存放data数据的</li><li>vue.config.js就是我们手动创建的配置文件，完整的配置项可以在官网看到，在这里我们着重于devServer</li><li>在这里的配置和2.0的差不多的只是简化了很多</li></ul><ol><li>配置<figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">const</span> appData = <span class="built_in">require</span>(<span class="string">'./mock/data.json'</span>);</span><br><span class="line"><span class="keyword">const</span> seller = appData.seller;</span><br><span class="line"><span class="keyword">const</span> goods = appData.goods;</span><br><span class="line"><span class="keyword">const</span> ratings = appData.ratings;</span><br><span class="line"></span><br><span class="line"><span class="built_in">module</span>.exports = &#123;</span><br><span class="line">        devServer: &#123;</span><br><span class="line">            <span class="comment">// port: 8080,</span></span><br><span class="line">            before(app) &#123;</span><br><span class="line">                app.get(<span class="string">'/seller'</span>, (req, res) =&gt; &#123;</span><br><span class="line">                    <span class="comment">// res.json(mockdata);</span></span><br><span class="line">                    res.json(&#123;</span><br><span class="line">                        errno: <span class="number">0</span>,</span><br><span class="line">                        data: seller</span><br><span class="line">                    &#125;);</span><br><span class="line">                &#125;);</span><br><span class="line"></span><br><span class="line">                app.get(<span class="string">'/goods'</span>, (req, res) =&gt; &#123;</span><br><span class="line">                    <span class="comment">// res.json(mockdata);</span></span><br><span class="line">                    res.json(&#123;</span><br><span class="line">                        errno: <span class="number">0</span>,</span><br><span class="line">                        data: goods</span><br><span class="line">                    &#125;);</span><br><span class="line">                &#125;);</span><br><span class="line"></span><br><span class="line">                app.get(<span class="string">'/ratings'</span>, (req, res) =&gt; &#123;</span><br><span class="line">                    <span class="comment">// res.json(mockdata);</span></span><br><span class="line">                    res.json(&#123;</span><br><span class="line">                        errno: <span class="number">0</span>,</span><br><span class="line">                        data: ratings</span><br><span class="line">                    &#125;);</span><br><span class="line">                &#125;);</span><br><span class="line">            &#125;</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br></pre></td></tr></table></figure></li></ol><p><img src="/vue-cli/vue-cli3-1.png" alt="vue-cli"></p><ol start="2"><li>运行就可以了会自动检查并运行</li><li>后面的效果和2.0的是一样的那我们就不再看了</li></ol><h1 id="后记"><a href="#后记" class="headerlink" title="后记"></a>后记</h1><ul><li>这个vue-cli 的配置方法是本人解决问题所记录的笔记，欢迎更多的同行大哥指导交流</li><li>如果有什么侵权的话，请及时添加小编微信以及qq也可以来告诉小编，谢谢！</li></ul>]]></content>
    
    <summary type="html">
    
      
      
        &lt;link rel=&quot;stylesheet&quot; class=&quot;aplayer-secondary-style-marker&quot; href=&quot;/assets/css/APlayer.min.css&quot;&gt;&lt;script src=&quot;/assets/js/APlayer.min.js&quot; cla
      
    
    </summary>
    
      <category term="插件/配置" scheme="http://yoursite.com/categories/%E6%8F%92%E4%BB%B6-%E9%85%8D%E7%BD%AE/"/>
    
    
      <category term="Vue" scheme="http://yoursite.com/tags/Vue/"/>
    
  </entry>
  
  <entry>
    <title>Postman 调试Api，以及xdebug断点调试补充</title>
    <link href="http://yoursite.com/2019/01/06/Postman/"/>
    <id>http://yoursite.com/2019/01/06/Postman/</id>
    <published>2019-01-06T06:07:12.999Z</published>
    <updated>2019-01-06T07:02:43.339Z</updated>
    
    <content type="html"><![CDATA[<link rel="stylesheet" class="aplayer-secondary-style-marker" href="/assets/css/APlayer.min.css"><script src="/assets/js/APlayer.min.js" class="aplayer-secondary-script-marker"></script><h1 id="前言"><a href="#前言" class="headerlink" title="前言"></a>前言</h1><ul><li>无论我们作为一个后端开发，还是前端开发我们都需要用到api接口</li><li>但是作为前端呢就倾向于直接调用接口</li><li>作为后端人员不单要编写接口还是要去测试一下自己到接口是否能有或者通过经验测试相关会引起到bug，从而去编写全局异常处理到机制</li><li>那我们就来走入测试接口的世界其实还是很简单的</li><li>xdebug断点调试每一次都配置web的话太麻烦了，我们用小技巧就可以不用那么麻烦</li></ul><h1 id="所需工具-资料"><a href="#所需工具-资料" class="headerlink" title="所需工具/资料"></a>所需工具/资料</h1><ul><li>mac 10.13.3</li><li>Xampp （小编使用的是集成开发的,开启状态）</li><li>PHPStorm (<a href="https://www.jetbrains.com/phpstorm/download/download-thanks.html，没有的就去官网下载，破解什么的我就不说了如果需要直接联系我" target="_blank" rel="noopener">https://www.jetbrains.com/phpstorm/download/download-thanks.html，没有的就去官网下载，破解什么的我就不说了如果需要直接联系我</a>)</li><li>已经安装及配置好了 xdebug</li><li>ThinkPHP 5.07</li><li>postman（<a href="https://www.getpostman.com/，官网免费安装）" target="_blank" rel="noopener">https://www.getpostman.com/，官网免费安装）</a></li></ul><h1 id="开始"><a href="#开始" class="headerlink" title="开始"></a>开始</h1><h3 id="简单的说一下安装吧"><a href="#简单的说一下安装吧" class="headerlink" title="简单的说一下安装吧"></a>简单的说一下安装吧</h3><ol><li>直接进入官网 点击下载安装包，然后双击运行就可以了 <a href="https://www.getpostman.com/" target="_blank" rel="noopener">https://www.getpostman.com/</a><br><img src="/Api/post1.png" alt="api"></li><li>安装好的效果<br><img src="/Api/post2.png" alt="api"></li></ol><h3 id="测试"><a href="#测试" class="headerlink" title="测试"></a>测试</h3><ol><li>我们用的是 ThinkPHP 那我们就在路由哪里定义一个get的路由（其他的业务逻辑就自己写吧）<br><img src="/Api/post3.png" alt="api"></li><li>我们来到 postman 测试 选择相应的 获取方式和地址 点击send进行测试<br><img src="/Api/post4.png" alt="api"></li><li>这样我们就会的到来相应的结果，如果报错了就是端口有问题（以及看到错误端口）<br><img src="/Api/post6.png" alt="api"><br><img src="/Api/post5.png" alt="api"></li><li>看了一个报错一个异常处理后，我们来看看真正的获取到接口信息<br><img src="/Api/post7.png" alt="api"></li><li>传值的方法很多 ? / body这些都可以<br><img src="/Api/post8.png" alt="api"></li><li>测试就是这样的还是很简单</li></ol><h3 id="测试api小技巧"><a href="#测试api小技巧" class="headerlink" title="测试api小技巧"></a>测试api小技巧</h3><ul><li>日常我们测试的端口会比较多，一个个的过很容易忘记也很麻烦，那我们有方法可以把它收藏到一个文件里面用哪个点那个</li><li>postman为我们提供了这样的收藏的方法</li></ul><ol><li>点击收藏<br><img src="/Api/post9.png" alt="api"></li><li>选择文件和修改信息（这个不强求自己喜欢就好）<br><img src="/Api/post10.png" alt="api"></li><li>seve to 文件夹名<br><img src="/Api/post11.png" alt="api"></li><li>再下次打开的时候点击文件夹就可以看到要测试的api了<br><img src="/Api/post12.png" alt="api"></li><li>多人的话可以右上角登录</li></ol><h3 id="xdebug断点调试"><a href="#xdebug断点调试" class="headerlink" title="xdebug断点调试"></a>xdebug断点调试</h3><ul><li>每一次都配置会使得加重工作都负担以及不必要</li></ul><ol><li>设置断点，启动测试<br><img src="/Api/post13.png" alt="api"></li><li>获取测试码（每一次的启动都是不一样的，如果想多次测试那就不要断开，只是执行完就好，下一次send的时候还是会继续启用刚才的端口，如果终止了的话下一次开启需要拷贝新的端口）<br><img src="/Api/post14.png" alt="api"></li><li>断点测试<br><img src="/Api/post15.png" alt="api"><br><img src="/Api/post16.png" alt="api"></li></ol><h1 id="后记"><a href="#后记" class="headerlink" title="后记"></a>后记</h1><ul><li>Postman的api测试，以及小技巧，有什么疑问请直接添加小编微信，欢迎有更多的技术交流</li><li>这只是本人的学习笔记以及小技巧，如有侵权请通知删除</li></ul>]]></content>
    
    <summary type="html">
    
      
      
        &lt;link rel=&quot;stylesheet&quot; class=&quot;aplayer-secondary-style-marker&quot; href=&quot;/assets/css/APlayer.min.css&quot;&gt;&lt;script src=&quot;/assets/js/APlayer.min.js&quot; cla
      
    
    </summary>
    
      <category term="Api" scheme="http://yoursite.com/categories/Api/"/>
    
    
      <category term="Api" scheme="http://yoursite.com/tags/Api/"/>
    
  </entry>
  
  <entry>
    <title>JavaWeb 实训项目</title>
    <link href="http://yoursite.com/2019/01/01/JavaWeb%E5%AE%9E%E8%AE%AD/"/>
    <id>http://yoursite.com/2019/01/01/JavaWeb实训/</id>
    <published>2019-01-01T12:19:29.596Z</published>
    <updated>2019-01-01T12:57:16.308Z</updated>
    
    <content type="html"><![CDATA[<link rel="stylesheet" class="aplayer-secondary-style-marker" href="/assets/css/APlayer.min.css"><script src="/assets/js/APlayer.min.js" class="aplayer-secondary-script-marker"></script><h1 id="前言"><a href="#前言" class="headerlink" title="前言"></a>前言</h1><ul><li>先来吐槽一下这个项目</li><li>既然是吐槽，我先从自身出发，作为一个前端为主的开发人员我看到这个界面的是我是忍不住的，哪有人做界面这么难看（不过从后端的角度出发界面也就那么回事吧能实现业务逻辑就好）</li><li>虽然是后端，也用了 java 的语言 但是这样绕来绕去的写法看得我头皮发麻，我还是喜欢简单明了的写法</li><li>不过既然是一个学习的项目那就要好好的去对待</li><li>这次只是分享项目不是写，看着可以的可以下来看看研究研究还是可以的</li></ul><h1 id="所需工具-资料"><a href="#所需工具-资料" class="headerlink" title="所需工具/资料"></a>所需工具/资料</h1><ul><li>mac 10.13.3</li><li>mysql 5.0+ 的版本（不要太高不然链接方式有问题）</li><li>Intelli IDEA 2018 （软件自己去官网下，破解不会可以私聊我）</li></ul><h1 id="项目源码"><a href="#项目源码" class="headerlink" title="项目源码"></a>项目源码</h1><ul><li>是存放在一个大的文件内可以全部都下了，使用浏览器迅雷可以下单独的哦</li><li>里面有 sql 直接导入就可以了</li><li>Github(<a href="https://github.com/YHF7/JavaWeb/tree/master/netstop" target="_blank" rel="noopener">https://github.com/YHF7/JavaWeb/tree/master/netstop</a>)</li></ul><h1 id="效果图"><a href="#效果图" class="headerlink" title="效果图"></a>效果图</h1><p><img src="/javaweb/j1.jpg" alt="javaweb"><br><img src="/javaweb/j2.jpg" alt="javaweb"><br><img src="/javaweb/j3.jpg" alt="javaweb"><br><img src="/javaweb/j4.jpg" alt="javaweb"><br><img src="/javaweb/j5.jpg" alt="javaweb"><br><img src="/javaweb/j6.jpg" alt="javaweb"></p>]]></content>
    
    <summary type="html">
    
      
      
        &lt;link rel=&quot;stylesheet&quot; class=&quot;aplayer-secondary-style-marker&quot; href=&quot;/assets/css/APlayer.min.css&quot;&gt;&lt;script src=&quot;/assets/js/APlayer.min.js&quot; cla
      
    
    </summary>
    
      <category term="JavaWeb" scheme="http://yoursite.com/categories/JavaWeb/"/>
    
    
      <category term="JavaWeb 案例" scheme="http://yoursite.com/tags/JavaWeb-%E6%A1%88%E4%BE%8B/"/>
    
  </entry>
  
  <entry>
    <title>XAMPP 配置虚拟域名/localhost重定向</title>
    <link href="http://yoursite.com/2019/01/01/XAMPP%E9%85%8D%E7%BD%AE%E8%99%9A%E6%8B%9F%E5%9F%9F%E5%90%8D/"/>
    <id>http://yoursite.com/2019/01/01/XAMPP配置虚拟域名/</id>
    <published>2019-01-01T11:44:49.175Z</published>
    <updated>2019-01-01T12:57:27.366Z</updated>
    
    <content type="html"><![CDATA[<link rel="stylesheet" class="aplayer-secondary-style-marker" href="/assets/css/APlayer.min.css"><script src="/assets/js/APlayer.min.js" class="aplayer-secondary-script-marker"></script><h1 id="前言"><a href="#前言" class="headerlink" title="前言"></a>前言</h1><ul><li>说到这个 xampp 这个东西配置虚拟域名，小编一肚子的气啊，搞技术这些东西还是网上搞比较容易。</li><li>相同的方法同样的配置，白天弄了一天还是不行，晚上洗完澡把东西都回执到原样结果就可以了</li><li>记录下来以后配置的时候可以用</li></ul><h1 id="坑提醒"><a href="#坑提醒" class="headerlink" title="坑提醒"></a>坑提醒</h1><ol><li>mac 下域名不可使用 test_1.cn 类似此种格式的域名，windows 下面可以，mac 下不可以，今天碰到的大坑</li><li>hosts 填写的域名和 httpd-vhosts.conf 中的域名请保持一致</li><li>ErrorLog 和 CustomLog 这两个最好就是不要修改吧，不然很容易出现权限不足就报错的，之前我也试过（导出错误一般都不回去看吧，也看不懂最好就不要动了）</li><li>网上说的添加什么这些不用去添加的，添加了反而错了（因为本来自带的就是有访问权限的）</li></ol><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><span class="line">&lt;Directory &quot;/Applications/XAMPP/xamppfiles/htdocs&quot;&gt;</span><br><span class="line">        #Options Indexes FollowSymLinks ExecCGI Includes #don&apos;t permission see list</span><br><span class="line">        Options All</span><br><span class="line">        AllowOverride All</span><br><span class="line">        Order allow,deny</span><br><span class="line">        Allow from all</span><br><span class="line">&lt;/Directory&gt;</span><br></pre></td></tr></table></figure><ol start="5"><li>在配置完后 localhost 地址也会被改变，无法访问同目录下的其他项目，所以我们要做一次重定向</li><li>配置完记得重启服务器不然看不到修改的效果然后就觉得自己弄错了</li></ol><h1 id="所需工具-资料"><a href="#所需工具-资料" class="headerlink" title="所需工具/资料"></a>所需工具/资料</h1><ul><li>mac 10.13.3</li><li>Xampp （7.0 版本基本无差）</li><li>VS code (vim 个人觉得麻烦还是用界面的快一点)</li></ul><h1 id="配置"><a href="#配置" class="headerlink" title="配置"></a>配置</h1><h2 id="配置本地域名"><a href="#配置本地域名" class="headerlink" title="配置本地域名"></a>配置本地域名</h2><ol><li>前往本地的/etx/hosts 打开 hosts 文件（我用的是 vscode，你们自己可以随意，也可以用命令直接修改）<br><img src="/tp/xp1.png" alt="xp1"></li><li>填写自己想要的域名</li></ol><ul><li>127.0.0.1 zerg.cn # added by Apache Friends XAMPP （我自己用的）</li><li>图片中黄色部分，可写可不写，最好写上吧<br><img src="/tp/xp2.png" alt="xp2"></li></ul><h2 id="配置-xampp-httpd-conf-其实就是检查开启了域名配置了没有"><a href="#配置-xampp-httpd-conf-其实就是检查开启了域名配置了没有" class="headerlink" title="配置 xampp httpd.conf(其实就是检查开启了域名配置了没有)"></a>配置 xampp httpd.conf(其实就是检查开启了域名配置了没有)</h2><ol><li>前往本地 xampp/xamppfiles/etc/httpd.conf</li><li>查找 etc/extra/httpd-vhosts.conf 看看是否打开，如果被注释了去掉#<br><img src="/tp/xp3.png" alt="xp3"></li></ol><h2 id="配置-xampp-httpd-vhosts-conf-域名的向导"><a href="#配置-xampp-httpd-vhosts-conf-域名的向导" class="headerlink" title="配置 xampp httpd-vhosts.conf (域名的向导)"></a>配置 xampp httpd-vhosts.conf (域名的向导)</h2><ol><li>前往本地 xampp/xamppfiles/etc/extra/httpd-vhosts.conf</li><li>添加域名导向(ServerName 必须要和定义的域名一致)<ul><li>*:80 表示端口</li><li>DocumentRoot 表示项目的目录</li><li>ServerName 你要使用的虚拟域名，这里和前面 host 文件中的保持一致，不然会出错</li><li>配置以上两个就可以，重启 Apache 就可以使用你配置的虚拟域名</li></ul></li></ol><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><span class="line">&lt;VirtualHost *:80&gt;</span><br><span class="line">  #  ServerAdmin webmaster@dummy-host2.example.com</span><br><span class="line">    DocumentRoot &quot;/Applications/XAMPP/xamppfiles/htdocs/zerg/public&quot;</span><br><span class="line">    ServerName zerg.cn</span><br><span class="line">    ErrorLog &quot;logs/dummy-host2.example.com-error_log&quot;</span><br><span class="line">    CustomLog &quot;logs/dummy-host2.example.com-access_log&quot; common</span><br><span class="line">&lt;/VirtualHost&gt;</span><br></pre></td></tr></table></figure><p><img src="/tp/xp4.png" alt="xp4"></p><h1 id="最终结果（本地-自定义）"><a href="#最终结果（本地-自定义）" class="headerlink" title="最终结果（本地/自定义）"></a>最终结果（本地/自定义）</h1><ol><li>域名<br><img src="/tp/xp5.png" alt="xp5"></li><li>本地<br><img src="/tp/xp6.png" alt="xp6"></li></ol><h1 id="localhost-重定向"><a href="#localhost-重定向" class="headerlink" title="localhost 重定向"></a>localhost 重定向</h1><ul><li>我们定义完后地址访问路径也会被改变，在多项目的情况下就无法查看其他的项目<br><img src="/tp/xp7.png" alt="xp7"></li><li>解决的方法就是我们给他做一个重定向，然后重启服务器<br><img src="/tp/xp8.png" alt="xp8"></li><li>这样我们就可以看到项目目录了<br><img src="/tp/xp9.png" alt="xp9"></li></ul><h1 id="后记"><a href="#后记" class="headerlink" title="后记"></a>后记</h1><ul><li>完整的 XAMPP 配置虚拟域名,遇到问题欢迎添加微信 qq 一起学习交流</li><li>这只是本人的一些解决做法，个人笔记，如有侵权请通知删除</li></ul>]]></content>
    
    <summary type="html">
    
      
      
        &lt;link rel=&quot;stylesheet&quot; class=&quot;aplayer-secondary-style-marker&quot; href=&quot;/assets/css/APlayer.min.css&quot;&gt;&lt;script src=&quot;/assets/js/APlayer.min.js&quot; cla
      
    
    </summary>
    
      <category term="插件/配置" scheme="http://yoursite.com/categories/%E6%8F%92%E4%BB%B6-%E9%85%8D%E7%BD%AE/"/>
    
    
      <category term="PHP" scheme="http://yoursite.com/tags/PHP/"/>
    
  </entry>
  
  <entry>
    <title>PHPStorm配置 xdebug断点调试</title>
    <link href="http://yoursite.com/2018/12/31/PHPStorm%E9%85%8D%E7%BD%AE%E6%96%AD%E7%82%B9%E8%B0%83%E8%AF%95/"/>
    <id>http://yoursite.com/2018/12/31/PHPStorm配置断点调试/</id>
    <published>2018-12-31T14:55:23.811Z</published>
    <updated>2018-12-31T15:28:42.694Z</updated>
    
    <content type="html"><![CDATA[<link rel="stylesheet" class="aplayer-secondary-style-marker" href="/assets/css/APlayer.min.css"><script src="/assets/js/APlayer.min.js" class="aplayer-secondary-script-marker"></script><h1 id="前言"><a href="#前言" class="headerlink" title="前言"></a>前言</h1><ul><li>继上一节我们说了 ThinkPHP 安装 xdebug 这个断点调试的插件，但是没有说着么去结合我们的软件去使用这么的一个插件，按我们就来说一下把</li></ul><h1 id="所需工具-资料"><a href="#所需工具-资料" class="headerlink" title="所需工具/资料/"></a>所需工具/资料/</h1><ul><li>mac 10.13.3</li><li>Xampp （小编使用的是集成开发的,开启状态）</li><li>PHPStorm (<a href="https://www.jetbrains.com/phpstorm/download/download-thanks.html，没有的就去官网下载，破解什么的我就不说了如果需要直接联系我" target="_blank" rel="noopener">https://www.jetbrains.com/phpstorm/download/download-thanks.html，没有的就去官网下载，破解什么的我就不说了如果需要直接联系我</a>)</li><li>已经安装及配置好了 xdebug</li></ul><h1 id="开始配置（有个提醒软件在配置前不要汉化不然打不开-preferences-亲自躺坑）"><a href="#开始配置（有个提醒软件在配置前不要汉化不然打不开-preferences-亲自躺坑）" class="headerlink" title="开始配置（有个提醒软件在配置前不要汉化不然打不开 preferences,亲自躺坑）"></a>开始配置（有个提醒软件在配置前不要汉化不然打不开 preferences,亲自躺坑）</h1><ul><li>打开 phpstorm 进行配置 command+,打开 PhpStorm 的配置列表。</li></ul><h2 id="1-首先，打开-Language-amp-Framework-下的-Debug-然后如图配置，这里的端口要和-php-ini-里的-xdebug-remote-port-保持一致。"><a href="#1-首先，打开-Language-amp-Framework-下的-Debug-然后如图配置，这里的端口要和-php-ini-里的-xdebug-remote-port-保持一致。" class="headerlink" title="1. 首先，打开 Language&amp;Framework 下的 Debug,然后如图配置，这里的端口要和 php.ini 里的 xdebug.remote_port 保持一致。"></a>1. 首先，打开 Language&amp;Framework 下的 Debug,然后如图配置，这里的端口要和 php.ini 里的 xdebug.remote_port 保持一致。</h2><p><img src="/tp/ph1.png" alt="ph1"></p><h2 id="2-接下来配置-DBGp-Proxy-port-要和你的-Apache-端口一致。"><a href="#2-接下来配置-DBGp-Proxy-port-要和你的-Apache-端口一致。" class="headerlink" title="2. 接下来配置 DBGp Proxy, port 要和你的 Apache 端口一致。"></a>2. 接下来配置 DBGp Proxy, port 要和你的 Apache 端口一致。</h2><p><img src="/tp/ph2.png" alt="ph2"></p><h2 id="3-然后是-servers-的配置，没有的同学可以点击-号创建一个，Host-和-Port-根据你的实际情况来设置，我这里用的本地环境，大家也可以用测试环境。"><a href="#3-然后是-servers-的配置，没有的同学可以点击-号创建一个，Host-和-Port-根据你的实际情况来设置，我这里用的本地环境，大家也可以用测试环境。" class="headerlink" title="3. 然后是 servers 的配置，没有的同学可以点击+号创建一个，Host 和 Port 根据你的实际情况来设置，我这里用的本地环境，大家也可以用测试环境。"></a>3. 然后是 servers 的配置，没有的同学可以点击+号创建一个，Host 和 Port 根据你的实际情况来设置，我这里用的本地环境，大家也可以用测试环境。</h2><p><img src="/tp/ph3.png" alt="ph3"></p><h2 id="4-接下来在调试页创建一个-web-application"><a href="#4-接下来在调试页创建一个-web-application" class="headerlink" title="4. 接下来在调试页创建一个 web application"></a>4. 接下来在调试页创建一个 web application</h2><p><img src="/tp/ph4.png" alt="ph4"><br><img src="/tp/ph5.png" alt="ph5"></p><h2 id="5-配置断点开启调试"><a href="#5-配置断点开启调试" class="headerlink" title="5. 配置断点开启调试"></a>5. 配置断点开启调试</h2><p><img src="/tp/ph6.png" alt="ph6"></p><h2 id="6-成功开启调试"><a href="#6-成功开启调试" class="headerlink" title="6. 成功开启调试"></a>6. 成功开启调试</h2><p><img src="/tp/ph7.png" alt="ph7"></p><h1 id="后记"><a href="#后记" class="headerlink" title="后记"></a>后记</h1><ul><li>完整的 php 断点安装配置已经完成，有什么疑问请直接添加小编微信，欢迎有更多的技术交流</li><li>这只是本人的一些解决做法，如有侵权请通知删除</li></ul>]]></content>
    
    <summary type="html">
    
      
      
        &lt;link rel=&quot;stylesheet&quot; class=&quot;aplayer-secondary-style-marker&quot; href=&quot;/assets/css/APlayer.min.css&quot;&gt;&lt;script src=&quot;/assets/js/APlayer.min.js&quot; cla
      
    
    </summary>
    
      <category term="插件/配置" scheme="http://yoursite.com/categories/%E6%8F%92%E4%BB%B6-%E9%85%8D%E7%BD%AE/"/>
    
    
      <category term="PHP" scheme="http://yoursite.com/tags/PHP/"/>
    
  </entry>
  
  <entry>
    <title>ThinkPHP xdebug安装以及报错处理</title>
    <link href="http://yoursite.com/2018/12/30/ThinkPHP%E5%AE%89%E8%A3%85xdebug/"/>
    <id>http://yoursite.com/2018/12/30/ThinkPHP安装xdebug/</id>
    <published>2018-12-30T15:32:34.242Z</published>
    <updated>2018-12-30T16:16:22.673Z</updated>
    
    <content type="html"><![CDATA[<link rel="stylesheet" class="aplayer-secondary-style-marker" href="/assets/css/APlayer.min.css"><script src="/assets/js/APlayer.min.js" class="aplayer-secondary-script-marker"></script><h1 id="前言"><a href="#前言" class="headerlink" title="前言"></a>前言</h1><ul><li>在我们开发的过程中我们肯定是会有一定的错误，当我们去查错的时候有很多的方法</li><li>可以使用断点的方法运行查看错误，也可也使用输出来一点点缩小范围</li><li>但是在 ThinkPHP 中并不可以直接就插入断点来查错，所以很多的 php 工程师觉得麻烦就不去安装使用 xdebug 的插件</li><li>在这里我们就一起来安装以及配置</li></ul><h1 id="所需工具-资料"><a href="#所需工具-资料" class="headerlink" title="所需工具/资料"></a>所需工具/资料</h1><ul><li>mac 10.13.3 （自带 php 所以会出现一定的问题）</li><li>Xampp （小编使用的是集成开发的）</li><li>ThinkPHP 5.0.7（版本自己喜欢都可以的）</li><li>VS code 用来改文件</li><li><a href="https://xdebug.org/wizard.php" target="_blank" rel="noopener">https://xdebug.org/wizard.php</a> xdebug 下载网址</li></ul><h1 id="开启-xdebug-之旅"><a href="#开启-xdebug-之旅" class="headerlink" title="开启 xdebug 之旅"></a>开启 xdebug 之旅</h1><h2 id="1-开启服务"><a href="#1-开启服务" class="headerlink" title="1. 开启服务"></a>1. 开启服务</h2><ul><li>开启 xampp</li><li>在 ThinkPHP 中 public/下新建 info.php 在里面加 phpinfo();<br><img src="/tp/tp1.png" alt="tp1"></li><li><a href="http://localhost/zerg/public/info.php" target="_blank" rel="noopener">http://localhost/zerg/public/info.php</a> （zerg 是我项目名，查看 phpversion）<br><img src="/tp/tp3.png" alt="tp3"></li><li>可以搜索 xdebug 看看有没有，php 是不自带的如果不是配置来都是没有的</li></ul><h2 id="2-下载-xdebug"><a href="#2-下载-xdebug" class="headerlink" title="2. 下载 xdebug"></a>2. 下载 xdebug</h2><ul><li>打开官网 <a href="https://xdebug.org/wizard.php" target="_blank" rel="noopener">https://xdebug.org/wizard.php</a></li><li>进入来官网直接就是下图这样的下载地方了<br><img src="/tp/tp2.png" alt="tp2"></li><li>回到 info.php 的页面右键查看源代码 （进入了界面直接 全选复制）<br><img src="/tp/tp4.png" alt="tp4"></li><li>把复制的代码放到刚才的框内，并点击 analyse my phpinfo()的那个按钮 就会自动的监测你的 php 版本需要用什么版本的 sdebug<br><img src="/tp/tp5.png" alt="tp5"></li><li>就会得到下面图所显示的页面，点击红色框的部分下载包<br><img src="/tp/tp6.png" alt="tp6"></li></ul><h2 id="3-配置-xdebug"><a href="#3-配置-xdebug" class="headerlink" title="3. 配置 xdebug"></a>3. 配置 xdebug</h2><ul><li>当我们下载好了后找到自己下载的位置 会有 xdebug-2.6.1.tgz 的压缩包</li><li>然后我们就跟着他给的步骤做，是什么步骤看上面下包的图</li><li>第一步：解压包 在终端进入到 文件的目录 sudo tar -xvzf xdebug-2.6.1.tgz 就可以解压</li><li>第二步：进入文件目录 cd xdebug-2.6.1</li><li>第三步：执行 phpize （一般没有安装 brew 和 autoconf 的都会出现下面的错误）<br><img src="/tp/tp8.png" alt="tp8"> - 有错我们只好修复这个错误（是因为没有安装 autoconf 引发的）那我们就安装一下 - 安装 autoconf 需要用 brew 所以先安装 brew - ruby -e “\$(curl -fsSL <a href="https://raw.githubusercontent.com/Homebrew/install/master/install)&quot;" target="_blank" rel="noopener">https://raw.githubusercontent.com/Homebrew/install/master/install)&quot;</a> -（使用上面的命令就可以安装了，如果不行就去<a href="http://brew.sh/官网看看吧）" target="_blank" rel="noopener">http://brew.sh/官网看看吧）</a></li><li>安装好我们安装 autoconf - brew install autoconf</li><li>第四步：继续执行 phpize<ul><li>一般都是直接 sudo phpize （mac 系统这样做肯定报错如图，为什么呢因为多端 php，系统自带一个 xampp 带一个 brew 也会补一个,而且系统默认是抓取本地的 php 所以无论你着么配最后都没有效果）<br><img src="/tp/tp7.png" alt="tp7"></li><li>面对这个坑我们不怕直接全路径安装就好</li><li>sudo /Applications/XAMPP/xamppfiles/bin/phpize 这样就可以了</li></ul></li><li>第五步：执行 confoigure 吃了上一次的亏这一次不可以再吃了<ul><li>sudo ./configure –with-php-config=/Applications/XAMPP/xamppfiles/bin/php-config</li></ul></li><li>第六步：这里按照图片的操作也可以，当然我是直接复制粘贴的，因为我被命令行伤透了心，找到当前目录下的 modules 文件夹，找到该文件夹下的 xdebug.so(想说爱你不容易啊)，狠狠的复制。</li><li>第七步：把复制的粘贴（如果按照图片的做跳过这一步）<ul><li>/Applications/XAMPP/xamppfiles/lib/php/extensions/no-debug-non-zts-20151012/xdebug.so</li></ul></li><li><p>xdebug.so 探寻结束，开始配置 php.ini</p><ul><li><p>到/Applications/XAMPP/xamppfiles/etc/php.ini 目录中找到 php.ini 然后打开，在最后面添加如下</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br></pre></td><td class="code"><pre><span class="line">[xdebug]</span><br><span class="line">zend_extension = /Applications/XAMPP/xamppfiles/lib/php/extensions/no-debug-non-zts-20151012/xdebug.so</span><br><span class="line">xdebug.remote_autostart=on</span><br><span class="line">xdebug.remote_enable=on</span><br><span class="line">xdebug.remote_mode=&quot;req&quot;</span><br><span class="line">xdebug.remote_host=localhost</span><br><span class="line">xdebug.remote_port=9000</span><br><span class="line">xdebug.remote_handler=&quot;dbgp&quot;</span><br><span class="line">xdebug.idekey=&quot;PhpStorm&quot;</span><br><span class="line">xdebug.profiler_enable = Off</span><br></pre></td></tr></table></figure></li><li><p>最后保存，然后重启 Apache 服务，重新输出 phpinfo()信息，然后搜索一下，发现如下内容即告成功。</p></li></ul></li></ul><h2 id="4-最后效果"><a href="#4-最后效果" class="headerlink" title="4. 最后效果"></a>4. 最后效果</h2><p><img src="/tp/tp9.png" alt="tp"></p><h1 id="后记"><a href="#后记" class="headerlink" title="后记"></a>后记</h1><ul><li>这只是本人的一些解决做法，如有侵权请通知删除</li></ul>]]></content>
    
    <summary type="html">
    
      
      
        &lt;link rel=&quot;stylesheet&quot; class=&quot;aplayer-secondary-style-marker&quot; href=&quot;/assets/css/APlayer.min.css&quot;&gt;&lt;script src=&quot;/assets/js/APlayer.min.js&quot; cla
      
    
    </summary>
    
      <category term="插件/配置" scheme="http://yoursite.com/categories/%E6%8F%92%E4%BB%B6-%E9%85%8D%E7%BD%AE/"/>
    
    
      <category term="PHP" scheme="http://yoursite.com/tags/PHP/"/>
    
  </entry>
  
  <entry>
    <title>移动web期末大作业</title>
    <link href="http://yoursite.com/2018/12/11/%E7%A7%BB%E5%8A%A8web%E6%9C%9F%E6%9C%AB/"/>
    <id>http://yoursite.com/2018/12/11/移动web期末/</id>
    <published>2018-12-11T04:35:43.954Z</published>
    <updated>2018-12-11T04:45:48.497Z</updated>
    
    <content type="html"><![CDATA[<link rel="stylesheet" class="aplayer-secondary-style-marker" href="/assets/css/APlayer.min.css"><script src="/assets/js/APlayer.min.js" class="aplayer-secondary-script-marker"></script><h2 id="前言"><a href="#前言" class="headerlink" title="前言"></a>前言</h2><ul><li>这是一个移动web的环保登陆页设计</li><li>是我们学校的期末考试大作业来的</li><li>主要是用来检测，css，表单的使用</li></ul><h2 id="技术-插件"><a href="#技术-插件" class="headerlink" title="技术/插件"></a>技术/插件</h2><ul><li>js<ul><li>jquery.min.js</li><li>bootstrap.min.js</li></ul></li><li>css<ul><li>animate.css  初始化页面</li><li>bootstrap.min.css </li><li>font-awesome 字体处理</li><li>style.css 布局处理</li></ul></li></ul><h2 id="项目地址传送"><a href="#项目地址传送" class="headerlink" title="项目地址传送"></a><a href="https://github.com/YHF7/HtmlCss/tree/master/%E7%A7%BB%E5%8A%A8web%E6%9C%9F%E6%9C%AB%E5%A4%A7%E4%BD%9C%E4%B8%9A" target="_blank" rel="noopener">项目地址传送</a></h2><h2 id="效果图"><a href="#效果图" class="headerlink" title="效果图"></a>效果图</h2><p><img src="/web/login.jpg" alt="登录"></p>]]></content>
    
    <summary type="html">
    
      
      
        &lt;link rel=&quot;stylesheet&quot; class=&quot;aplayer-secondary-style-marker&quot; href=&quot;/assets/css/APlayer.min.css&quot;&gt;&lt;script src=&quot;/assets/js/APlayer.min.js&quot; cla
      
    
    </summary>
    
      <category term="Css" scheme="http://yoursite.com/categories/Css/"/>
    
    
      <category term="Css笔记/案例" scheme="http://yoursite.com/tags/Css%E7%AC%94%E8%AE%B0-%E6%A1%88%E4%BE%8B/"/>
    
  </entry>
  
  <entry>
    <title>node 后端服务器开发插件</title>
    <link href="http://yoursite.com/2018/12/07/node%E5%90%8E%E7%AB%AF%E5%BC%80%E5%8F%91%E6%8F%92%E4%BB%B6/"/>
    <id>http://yoursite.com/2018/12/07/node后端开发插件/</id>
    <published>2018-12-07T03:48:11.401Z</published>
    <updated>2018-12-07T03:49:04.362Z</updated>
    
    <content type="html"><![CDATA[<link rel="stylesheet" class="aplayer-secondary-style-marker" href="/assets/css/APlayer.min.css"><script src="/assets/js/APlayer.min.js" class="aplayer-secondary-script-marker"></script><h2 id="插件目录-插件官网"><a href="#插件目录-插件官网" class="headerlink" title="插件目录 插件官网"></a>插件目录 <a href="https://www.npmjs.com/" target="_blank" rel="noopener">插件官网</a></h2><ul><li>ES2015（es6）</li><li>express node 的前端模板</li><li>nodemon node 改变监听</li><li>config-lite 1.5.0 文件的遍历</li><li>chalk 粉笔插件变色</li><li>mongoose mongodb 使用插件</li><li>body-parser 配置解析表单 POST 请求体插件</li></ul><h2 id="ES2015"><a href="#ES2015" class="headerlink" title="ES2015"></a>ES2015</h2><ul><li>都是用来处理 es6 的兼容的直接放 json 文件里面安装就好想装新版本也可以一个一个装</li></ul><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br></pre></td><td class="code"><pre><span class="line"><span class="string">"babel"</span>: <span class="string">"^6.23.0"</span>,</span><br><span class="line"><span class="string">"babel-cli"</span>: <span class="string">"^6.26.0"</span>,</span><br><span class="line"><span class="string">"babel-core"</span>: <span class="string">"^6.24.0"</span>,</span><br><span class="line"><span class="string">"babel-preset-es2015"</span>: <span class="string">"^6.24.1"</span>,</span><br><span class="line"><span class="string">"babel-preset-stage-3"</span>: <span class="string">"^6.22.1"</span>,</span><br><span class="line"><span class="string">"babel-register"</span>: <span class="string">"^6.24.0"</span>,</span><br><span class="line"><span class="string">"babel-plugin-transform-async-to-generator"</span>: <span class="string">"^6.24.1"</span>,</span><br><span class="line"><span class="string">"babel-plugin-transform-es2015-classes"</span>: <span class="string">"^6.24.1"</span>,</span><br><span class="line"><span class="string">"babel-plugin-transform-es2015-modules-commonjs"</span>: <span class="string">"^6.24.1"</span>,</span><br><span class="line"><span class="string">"babel-plugin-transform-export-extensions"</span>: <span class="string">"^6.22.0"</span></span><br></pre></td></tr></table></figure><ul><li>.babelrc 配置 es6</li></ul><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><span class="line">&#123;</span><br><span class="line">    <span class="string">"presets"</span>: [<span class="string">"stage-3"</span>],</span><br><span class="line">    <span class="string">"plugins"</span>: [</span><br><span class="line">        <span class="string">"transform-async-to-generator"</span>,</span><br><span class="line">        <span class="string">"transform-es2015-modules-commonjs"</span>,</span><br><span class="line">        <span class="string">"transform-export-extensions"</span></span><br><span class="line">    ]</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><ul><li>index.js （默认启动文件）</li></ul><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line"><span class="built_in">require</span>(<span class="string">"babel-core/register"</span>);</span><br><span class="line"><span class="built_in">require</span>(<span class="string">"./app.js"</span>); <span class="comment">// 被调用的入口文件</span></span><br></pre></td></tr></table></figure><h2 id="express"><a href="#express" class="headerlink" title="express"></a>express</h2><ul><li>node 的前端开发模板</li></ul><ol><li>安装</li></ol><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">$ sudo cnpm i express -S</span><br></pre></td></tr></table></figure><ol start="2"><li>使用</li></ol><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">import</span> Express <span class="keyword">from</span> <span class="string">"express"</span>; <span class="comment">//引入</span></span><br><span class="line"><span class="keyword">const</span> app = Express(); <span class="comment">//定义</span></span><br><span class="line"></span><br><span class="line">app.all(<span class="string">"/*"</span>, (req, res, next) =&gt; &#123;</span><br><span class="line">  <span class="comment">//设置跨域请求报文头</span></span><br><span class="line">  <span class="comment">//设置允许跨域响应报文头</span></span><br><span class="line">  <span class="comment">//设置跨域</span></span><br><span class="line">  <span class="comment">// 启用 Node 服务器端的 cors 跨域</span></span><br><span class="line">  res.header(<span class="string">"Access-Control-Allow-Origin"</span>, <span class="string">"*"</span>);</span><br><span class="line">  res.header(<span class="string">"Access-Control-Allow-Headers"</span>, <span class="string">"X-Requested-With"</span>);</span><br><span class="line">  res.header(<span class="string">"Access-Control-Allow-Methods"</span>, <span class="string">"*"</span>);</span><br><span class="line"></span><br><span class="line">  res.setHeader(<span class="string">"Content-Type"</span>, <span class="string">"application/json;charset=utf-8"</span>);</span><br><span class="line">  next();</span><br><span class="line">&#125;);</span><br><span class="line"></span><br><span class="line">app.get(<span class="string">"/"</span>, (req, res) =&gt; &#123;</span><br><span class="line">  <span class="comment">// 路由判断</span></span><br><span class="line">  res.send(<span class="string">`hello world!`</span>);</span><br><span class="line">&#125;);</span><br><span class="line"></span><br><span class="line">app.listen(<span class="number">5000</span>, () =&gt; &#123;</span><br><span class="line">  <span class="comment">//开启服务</span></span><br><span class="line">  <span class="built_in">console</span>.log(<span class="string">"server running http://localhost:"</span> + <span class="number">5000</span>);</span><br><span class="line">&#125;);</span><br></pre></td></tr></table></figure><h2 id="nodemon"><a href="#nodemon" class="headerlink" title="nodemon"></a>nodemon</h2><ul><li>nodemon 是 node 的改变监听 ，只要改变就会重新编译，就不需要每次改变都手动改变 （也可以作为全局安装）</li></ul><ol><li>安装</li></ol><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">$ sudo cnpm i nodemon -S 本地安装</span><br><span class="line">$ sudo cnpm i nodemon -g 全局安装</span><br></pre></td></tr></table></figure><ol start="2"><li>使用</li></ol><ul><li><p>本地安装使用 在 package.json 定义</p><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line"><span class="string">"scripts"</span>: &#123;</span><br><span class="line">    <span class="string">"start"</span>: <span class="string">"nodemon index.js"</span></span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><ul><li>终端 sudo npm run start 调用</li></ul></li><li>全局方法 直接在终端 sudo nodemon index.js</li></ul><h2 id="config-lite-1-5-0"><a href="#config-lite-1-5-0" class="headerlink" title="config-lite 1.5.0"></a>config-lite 1.5.0</h2><ul><li>这是一个用了遍历查找文件的插件，其实简单的来说就是用来定义一些公共的参数，调用的时候方便一点</li></ul><ol><li>安装</li></ol><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">$ sudo cnpm i config-lite@1.5 -S</span><br></pre></td></tr></table></figure><ol start="2"><li><p>配置</p><ul><li>默认是查找 config 下的 default.js 文件（为了用起来方便我们就不改变直接定义）</li><li>在项目目录新建 config 文件夹 在里面建立 default.js 文件 然后定义一些公共的元素或者是可变的元素</li></ul><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">"use strict"</span>;</span><br><span class="line"></span><br><span class="line"><span class="built_in">module</span>.exports = &#123;</span><br><span class="line">  port: <span class="number">5000</span>,</span><br><span class="line">  url: <span class="string">"mongodb://localhost/myelm"</span>,</span><br><span class="line">  session: &#123;</span><br><span class="line">    name: <span class="string">"SID"</span>,</span><br><span class="line">    secret: <span class="string">"SID"</span>,</span><br><span class="line">    cookie: &#123;</span><br><span class="line">      httpOnly: <span class="literal">true</span>,</span><br><span class="line">      secure: <span class="literal">false</span>,</span><br><span class="line">      maxAge: <span class="number">365</span> * <span class="number">24</span> * <span class="number">60</span> * <span class="number">60</span> * <span class="number">1000</span></span><br><span class="line">    &#125;</span><br><span class="line">  &#125;</span><br><span class="line">&#125;;</span><br></pre></td></tr></table></figure></li><li><p>调用</p></li></ol><ul><li>调用就比较简单</li></ul><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">import</span> config <span class="keyword">from</span> <span class="string">"config-lite"</span>; <span class="comment">//引入</span></span><br><span class="line"></span><br><span class="line">config.url; <span class="comment">//好像用对象那样使用，不过要你返回的是个对象才可以</span></span><br></pre></td></tr></table></figure><h2 id="chalk"><a href="#chalk" class="headerlink" title="chalk"></a>chalk</h2><ul><li>这个插件主要是用了改变输出的颜色，在不同的情况定义输出的字体颜色</li></ul><ol><li>安装</li></ol><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">$ sudo cnpm i chalk -S</span><br></pre></td></tr></table></figure><ol start="2"><li>使用</li></ol><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">import</span> chalk <span class="keyword">from</span> <span class="string">"chalk"</span>; <span class="comment">//引入</span></span><br><span class="line">chalk.yellow(<span class="string">"连接数据库成功"</span>); <span class="comment">// 直接 chalk.颜色(变色内容)</span></span><br></pre></td></tr></table></figure><h2 id="mongoose-官方"><a href="#mongoose-官方" class="headerlink" title="mongoose 官方"></a>mongoose <a href="https://www.npmjs.com/package/mongoose" target="_blank" rel="noopener">官方</a></h2><ul><li>数据库就自己装这里不说，直接安装全局的</li><li>这是一个 mongodb 数据库的开发插件</li></ul><ol><li>安装</li></ol><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">$ sudo cnpm i mongoose -S</span><br></pre></td></tr></table></figure><ol start="2"><li>使用</li></ol><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">import</span> mongoose <span class="keyword">from</span> <span class="string">"mongoose"</span>; <span class="comment">//引入</span></span><br><span class="line"></span><br><span class="line">mongoose.connect(</span><br><span class="line">  <span class="string">"mongodb://localhost/myelm"</span>,</span><br><span class="line">  &#123;</span><br><span class="line">    <span class="comment">//连接数据库</span></span><br><span class="line">    useNewUrlParser: <span class="literal">true</span></span><br><span class="line">  &#125;</span><br><span class="line">);</span><br><span class="line"></span><br><span class="line"><span class="keyword">const</span> db = mongoose.connection;</span><br><span class="line"></span><br><span class="line">db.once(<span class="string">"open"</span>, () =&gt; &#123;</span><br><span class="line">  <span class="built_in">console</span>.log(chalk.yellow(<span class="string">"连接数据库成功"</span>));</span><br><span class="line">&#125;);</span><br><span class="line"></span><br><span class="line">db.on(<span class="string">"error"</span>, <span class="function"><span class="keyword">function</span>(<span class="params">error</span>) </span>&#123;</span><br><span class="line">  <span class="built_in">console</span>.error(</span><br><span class="line">    chalk.red(<span class="string">"Error in MongoDb connection: "</span> + error + <span class="string">" 数据库有问题"</span>)</span><br><span class="line">  );</span><br><span class="line">  mongoose.disconnect();</span><br><span class="line">&#125;);</span><br><span class="line"></span><br><span class="line">db.on(<span class="string">"close"</span>, <span class="function"><span class="keyword">function</span>(<span class="params"></span>) </span>&#123;</span><br><span class="line">  <span class="built_in">console</span>.log(chalk.red(<span class="string">"数据库断开，重新连接数据库"</span>));</span><br><span class="line">  mongoose.connect(</span><br><span class="line">    config.url,</span><br><span class="line">    &#123;</span><br><span class="line">      server: &#123;</span><br><span class="line">        auto_reconnect: <span class="literal">true</span></span><br><span class="line">      &#125;</span><br><span class="line">    &#125;</span><br><span class="line">  );</span><br><span class="line">&#125;);</span><br><span class="line"></span><br><span class="line"><span class="keyword">const</span> Schema = mongoose.Schema;</span><br><span class="line"><span class="keyword">const</span> ObjectId = Schema.ObjectId;</span><br><span class="line"></span><br><span class="line"><span class="keyword">const</span> BlogPost = <span class="keyword">new</span> Schema(&#123;</span><br><span class="line">  <span class="comment">//定义数据库</span></span><br><span class="line">  author: ObjectId,</span><br><span class="line">  title: <span class="built_in">String</span>,</span><br><span class="line">  body: <span class="built_in">String</span>,</span><br><span class="line">  date: <span class="built_in">Date</span></span><br><span class="line">&#125;);</span><br></pre></td></tr></table></figure><h2 id="body-parser"><a href="#body-parser" class="headerlink" title="body-parser"></a>body-parser</h2><ul><li>这个是解析表单 post 请求体的插件</li></ul><ol><li>安装</li></ol><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">$ sudo cnpm i body-parser -S</span><br></pre></td></tr></table></figure><ol start="2"><li>配置</li></ol><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">// 在主页定义 一定要在路由判断之前才能生效</span></span><br><span class="line"><span class="comment">// 配置解析表单 POST 请求体插件 （注意：一定要在 app.use(router) 之前）</span></span><br><span class="line"><span class="comment">// parse application/x-www-form-urlencoded 解析application</span></span><br><span class="line">app.use(</span><br><span class="line">  bodyParser.urlencoded(&#123;</span><br><span class="line">    extended: <span class="literal">false</span></span><br><span class="line">  &#125;)</span><br><span class="line">);</span><br><span class="line"><span class="comment">// parse application/json 解析</span></span><br><span class="line">app.use(bodyParser.json());</span><br></pre></td></tr></table></figure><ol start="3"><li>调用</li></ol><ul><li>调用就很简单不用引入，传过来的数据解析在 req.body 里面</li></ul><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line">app.post(<span class="string">"/api/ts"</span>, (req, res) =&gt; &#123;</span><br><span class="line">  <span class="built_in">console</span>.log(req.body);</span><br><span class="line">&#125;);</span><br></pre></td></tr></table></figure>]]></content>
    
    <summary type="html">
    
      
      
        &lt;link rel=&quot;stylesheet&quot; class=&quot;aplayer-secondary-style-marker&quot; href=&quot;/assets/css/APlayer.min.css&quot;&gt;&lt;script src=&quot;/assets/js/APlayer.min.js&quot; cla
      
    
    </summary>
    
      <category term="插件/配置" scheme="http://yoursite.com/categories/%E6%8F%92%E4%BB%B6-%E9%85%8D%E7%BD%AE/"/>
    
    
      <category term="npm" scheme="http://yoursite.com/tags/npm/"/>
    
  </entry>
  
  <entry>
    <title>YHF 管理系统（javaweb）</title>
    <link href="http://yoursite.com/2018/12/01/JavaWeb1/"/>
    <id>http://yoursite.com/2018/12/01/JavaWeb1/</id>
    <published>2018-12-01T14:48:35.118Z</published>
    <updated>2018-12-01T15:00:17.963Z</updated>
    
    <content type="html"><![CDATA[<link rel="stylesheet" class="aplayer-secondary-style-marker" href="/assets/css/APlayer.min.css"><script src="/assets/js/APlayer.min.js" class="aplayer-secondary-script-marker"></script><h1 id="前言"><a href="#前言" class="headerlink" title="前言"></a>前言</h1><ol><li>这是一个期末考试项目</li><li>老师出的一个题目 要求有 数据库、css、js、等特效 至少 3 个页面以上</li><li>所有做了这么等一个小项目</li></ol><h1 id="项目所用技术"><a href="#项目所用技术" class="headerlink" title="项目所用技术"></a>项目所用技术</h1><ul><li>页面<ul><li>架构主要都是 javaweb （主页是 bootcss 的页面）</li><li>部分用到了 js</li></ul></li><li>数据库<ul><li>mysql</li></ul></li><li>插件<ul><li>js<ul><li>jq</li><li>echarts 图表插件</li></ul></li><li>css<ul><li>bootcss</li></ul></li></ul></li></ul><h1 id="项目源码地址"><a href="#项目源码地址" class="headerlink" title="项目源码地址"></a><a href="https://github.com/YHF7/JavaWeb/tree/master/qmxmyhf" target="_blank" rel="noopener">项目源码地址</a></h1><h1 id="项目效果图"><a href="#项目效果图" class="headerlink" title="项目效果图"></a>项目效果图</h1><h3 id="登录页"><a href="#登录页" class="headerlink" title="登录页"></a>登录页</h3><p><img src="/qmxmyhf/q1.png" alt="登录"></p><h3 id="注册页"><a href="#注册页" class="headerlink" title="注册页"></a>注册页</h3><p><img src="/qmxmyhf/q2.png" alt="登录"></p><h3 id="主页"><a href="#主页" class="headerlink" title="主页"></a>主页</h3><p><img src="/qmxmyhf/q3.png" alt="登录"></p><h3 id="用户图表页"><a href="#用户图表页" class="headerlink" title="用户图表页"></a>用户图表页</h3><p><img src="/qmxmyhf/q4.png" alt="登录"></p><h3 id="修改用户信息页"><a href="#修改用户信息页" class="headerlink" title="修改用户信息页"></a>修改用户信息页</h3><p><img src="/qmxmyhf/q5.png" alt="登录"></p><h3 id="数据库结构"><a href="#数据库结构" class="headerlink" title="数据库结构"></a>数据库结构</h3><p><img src="/qmxmyhf/qmxmyhf1.png" alt="登录"></p>]]></content>
    
    <summary type="html">
    
      
      
        &lt;link rel=&quot;stylesheet&quot; class=&quot;aplayer-secondary-style-marker&quot; href=&quot;/assets/css/APlayer.min.css&quot;&gt;&lt;script src=&quot;/assets/js/APlayer.min.js&quot; cla
      
    
    </summary>
    
      <category term="JavaWeb" scheme="http://yoursite.com/categories/JavaWeb/"/>
    
    
      <category term="JavaWeb 案例" scheme="http://yoursite.com/tags/JavaWeb-%E6%A1%88%E4%BE%8B/"/>
    
  </entry>
  
  <entry>
    <title>mpvue搭建初始小程序</title>
    <link href="http://yoursite.com/2018/11/24/%E6%90%AD%E5%BB%BA%E5%B0%8F%E7%A8%8B%E5%BA%8F/"/>
    <id>http://yoursite.com/2018/11/24/搭建小程序/</id>
    <published>2018-11-24T13:05:40.356Z</published>
    <updated>2018-11-24T13:31:03.506Z</updated>
    
    <content type="html"><![CDATA[<link rel="stylesheet" class="aplayer-secondary-style-marker" href="/assets/css/APlayer.min.css"><script src="/assets/js/APlayer.min.js" class="aplayer-secondary-script-marker"></script><h1 id="前言"><a href="#前言" class="headerlink" title="前言"></a>前言</h1><p>前段时间，美团开源了 mpvue 这个项目，使得我们又多了一种用来开发小程序的框架选项。由于 mpvue 框架是完全基于 Vue 框架的（重写了其 runtime 和 compiler），因此在用法上面是高度和 Vue 一致的（某些功能由于受限于小程序环境本身的原因而不能使用），这给使用过 Vue 开发 Web 应用的前端开发者提供了极低的切换门槛来开发小程序。</p><p>没学过 vue 的想去学一下先</p><h1 id="开始"><a href="#开始" class="headerlink" title="开始"></a>开始</h1><h2 id="1-开发环境"><a href="#1-开发环境" class="headerlink" title="1. 开发环境"></a>1. 开发环境</h2><pre><code>- 系统自己喜欢 （本人 OS 10.0）- node.js npm (最好切换为国内镜像 npm set registry https://registry.npm.taobao.org/)- vue-cli （npm install vue-cli -g）- 微信开发者工具 https://developers.weixin.qq.com/miniprogram/dev/devtools/download.html- 开发软件 vscode （个人喜欢）- 软件内部插件 Vetur （vue语法高亮）</code></pre><h2 id="2-架构第一个-mpvue-的小程序"><a href="#2-架构第一个-mpvue-的小程序" class="headerlink" title="2. 架构第一个 mpvue 的小程序"></a>2. 架构第一个 mpvue 的小程序</h2><pre><code>- vue init mpvue/mpvue-quickstart firstapp  （在命令行运行，firstapp项目名自己定）- 然后就会看到这个 （如果自己代码不是很规范的话eslint那里请选n）<figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br></pre></td><td class="code"><pre><span class="line">? Project name firstapp</span><br><span class="line">? wxmp appid touristappid</span><br><span class="line">? Project description A Mpvue project</span><br><span class="line">? Author kevinzhang 邮箱</span><br><span class="line">? Vue build runtime</span><br><span class="line">? Use Vuex? Yes</span><br><span class="line">? Use ESLint to lint your code? Yes</span><br><span class="line">? Pick an ESLint preset Standard</span><br><span class="line">? 小程序测试，敬请关注最新微信开发者工具的“测试报告”功能</span><br><span class="line"></span><br><span class="line">vue-cli · Generated <span class="string">"firstapp"</span>.</span><br><span class="line"></span><br><span class="line">To get started:</span><br><span class="line"></span><br><span class="line">    <span class="built_in">cd</span> firstapp</span><br><span class="line">    npm install</span><br><span class="line">    npm run dev</span><br><span class="line"></span><br><span class="line">Documentation can be found at http://mpvue.com</span><br></pre></td></tr></table></figure>- 安装好后    - cd firstapp    - npm install (这一步是安装要用的插件和依赖)- 执行命令让这个代码运行起来，进入开发模式    - npm run dev- 成功运行后，这个项目代码就进入开发模式，一旦有源代码发生修改，就会触发自动编译。因为mpvue使用的是Vue + HTML Web的开发方式开发小程序，它最终还是需要被转换成小程序的代码才可以在小程序环境运行，所以这里的自动编译的目的就是要把Web代码编译成小程序代码。编译后的代码会在dist目录下：![编译成功](/xcx/3.webp)</code></pre><h2 id="3-部署到微信开发者工具"><a href="#3-部署到微信开发者工具" class="headerlink" title="3. 部署到微信开发者工具"></a>3. 部署到微信开发者工具</h2><pre><code>- 打开微信开发者工具，选择新增项目![新增](/xcx/1.webp)- 项目目录选择指向firstapp目录：![新增](/xcx/4.webp)- 点击“确定”按钮，进入小程序开发主界面，在左边的小程序模拟器中就能看到firstapp小程序的执行结果了：![新增](/xcx/5.webp)- 【提醒】记得在微信开发者工具的菜单》设置 》编辑设置 中，将“保存时自动编译小程序”勾选上，这样当mpvue的代码自动编译完成后，模拟器才会自动刷新界面。![新增](/xcx/2.webp)</code></pre><h1 id="小结"><a href="#小结" class="headerlink" title="小结"></a>小结</h1><ul><li>本文简要介绍使用 mpvue 开发小程序的前期准备，后面还会继续学习再介绍其他功能</li></ul>]]></content>
    
    <summary type="html">
    
      
      
        &lt;link rel=&quot;stylesheet&quot; class=&quot;aplayer-secondary-style-marker&quot; href=&quot;/assets/css/APlayer.min.css&quot;&gt;&lt;script src=&quot;/assets/js/APlayer.min.js&quot; cla
      
    
    </summary>
    
      <category term="小程序" scheme="http://yoursite.com/categories/%E5%B0%8F%E7%A8%8B%E5%BA%8F/"/>
    
    
      <category term="小程序" scheme="http://yoursite.com/tags/%E5%B0%8F%E7%A8%8B%E5%BA%8F/"/>
    
  </entry>
  
  <entry>
    <title>部署线上node/vue项目</title>
    <link href="http://yoursite.com/2018/11/23/%E9%83%A8%E7%BD%B2%E7%BA%BF%E4%B8%8Anode/"/>
    <id>http://yoursite.com/2018/11/23/部署线上node/</id>
    <published>2018-11-23T14:38:38.276Z</published>
    <updated>2018-11-23T15:42:19.657Z</updated>
    
    <content type="html"><![CDATA[<link rel="stylesheet" class="aplayer-secondary-style-marker" href="/assets/css/APlayer.min.css"><script src="/assets/js/APlayer.min.js" class="aplayer-secondary-script-marker"></script><ul><li>当你写了node项目的时候就想抛到网上去</li><li>前面有教 外网映射 也是一个好方法</li><li>但是用起来开启服务就好，但是关闭主机就不能用了</li><li>那我们就来使用网上的服务器</li></ul><h2 id="服务器"><a href="#服务器" class="headerlink" title="服务器"></a>服务器</h2><ol><li>阿里云、腾讯云 复杂贵买不起</li><li><a href="http://www.sinacloud.com/" target="_blank" rel="noopener">新浪云</a> （这个还不错不过也是要钱还是挺方便，服务器与数据库基本齐全）</li><li><a href="https://devcenter.heroku.com/" target="_blank" rel="noopener">Heroku</a> 不过要vpn (支持的语言多但是没有mysql数据库)</li><li><a href="https://www.openshift.com/trial/" target="_blank" rel="noopener">openshift</a> 也是外网服务器不过不用vpn （没用过，不过好像是试用也是要收费）</li></ol><h2 id="部署"><a href="#部署" class="headerlink" title="部署"></a>部署</h2><h3 id="检查配置"><a href="#检查配置" class="headerlink" title="检查配置"></a>检查配置</h3><ol><li>node</li><li>git</li><li>npm</li></ol><h3 id="Heroku"><a href="#Heroku" class="headerlink" title="Heroku"></a>Heroku</h3><ol><li>上到官网 登录/注册<ul><li><a href="https://devcenter.heroku.com/" target="_blank" rel="noopener">https://devcenter.heroku.com/</a></li></ul></li><li>选择自己要的语言 （回跳到开发文档）<ul><li>我选的是node</li></ul></li><li>选择安装homebrew cli<ul><li>我是os系统 我选的是苹果 （下载后安装）</li></ul></li><li>登录 homebrew<ul><li>终端 heroku login (苹果加 sudo)</li></ul></li><li>在一个你想放项目的地方新建项目文件夹 <ul><li>用终端进入到文件夹</li><li>执行 git clone <a href="https://github.com/heroku/node-js-getting-started.git" target="_blank" rel="noopener">https://github.com/heroku/node-js-getting-started.git</a> （这个命令是用来克隆应用源代码的）</li><li>克隆好 cd node-js-getting-started 进入文件夹</li></ul></li><li>创建应用程序 （虽然下载了但是是空的架构要自己安装）<ul><li>heroku create （生成项目的时候项目名是随机生成的）</li></ul></li><li>部署到 网上 （前面已经登录了现在直接上传就好）<ul><li>刚创的应用直接push就好</li><li>sudo git push heroku master</li><li>上传完 heroku open查看</li></ul></li><li><p>有个绿色页面就是成功了</p></li><li><p>好前面都是说配置现在来说部署</p><ul><li>1.把vue项目打包出来 </li><li>2.把打包好的html文件拷贝到 node-js-getting-started/views/pages/<ul><li>我们考到这里面然后把里面index.ejs文件删掉 </li><li>把我们的文件改为ejs</li></ul></li><li>3.打包出来的static 直接放到public里面就好</li></ul></li><li>部署好我们就上传<ul><li>git add .</li><li>git commit -m “”</li><li>git push heroku master</li><li>上传三部曲不多说</li></ul></li><li><p>heroku open 查看有自己喜欢的效果就是对了</p></li><li><p>查错 如果出现 application err就是错了  </p><ul><li>heroku logs –tail 使用这个命令查看错在哪里</li></ul></li><li><p>一些自定义的文件啥的在项目根目录传文件放</p><ul><li>在 index.js文件中引入配置就好</li></ul></li></ol><h3 id="新浪云"><a href="#新浪云" class="headerlink" title="新浪云"></a>新浪云</h3><ul><li>新浪云还是比较简单</li></ul><ol><li>登录 进入控制台</li><li>创建应用 选择自己要的服务器 设计域名和应用名称</li><li>然后里面有git代码说明</li><li>就是把git克隆下来再来写代码就好了</li><li>git push三部曲</li><li>数据库那些也是这样差不多自己研究</li></ol>]]></content>
    
    <summary type="html">
    
      
      
        &lt;link rel=&quot;stylesheet&quot; class=&quot;aplayer-secondary-style-marker&quot; href=&quot;/assets/css/APlayer.min.css&quot;&gt;&lt;script src=&quot;/assets/js/APlayer.min.js&quot; cla
      
    
    </summary>
    
      <category term="插件/配置" scheme="http://yoursite.com/categories/%E6%8F%92%E4%BB%B6-%E9%85%8D%E7%BD%AE/"/>
    
    
      <category term="npm" scheme="http://yoursite.com/tags/npm/"/>
    
  </entry>
  
  <entry>
    <title>Vue-cli开启的服务内部写 node 接口</title>
    <link href="http://yoursite.com/2018/11/23/vue-node%E6%9C%8D%E5%8A%A1/"/>
    <id>http://yoursite.com/2018/11/23/vue-node服务/</id>
    <published>2018-11-23T13:18:03.234Z</published>
    <updated>2018-11-23T13:59:11.291Z</updated>
    
    <content type="html"><![CDATA[<link rel="stylesheet" class="aplayer-secondary-style-marker" href="/assets/css/APlayer.min.css"><script src="/assets/js/APlayer.min.js" class="aplayer-secondary-script-marker"></script><ul><li>在我们的开发中很多时候都是前后端分离，但是在一些个别的案例中也不需要开启两个 node 服务（这里也有一个问题就是开启两个端口会有跨域的问问）</li><li>跨域问题在前面获取数据的 axio 说过就不说了</li><li>那么我们能不能把 node 后台服务也写到 vue-cli 开启的服务中呢？ 能 那我们就来吧</li></ul><ol><li>在 vue-cli 中我也不知道他有没有 expore 这个包 那就自己装一下吧有没有都好</li><li>在项目文件夹内 创建一个名为 server 的文件夹 在里面新建 router.js 文件 (文件夹名和位置自己喜欢着么来就着么来)</li><li>在 router 文件里面写接口和业务逻辑</li></ol><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">// 这里我就简单的写一个接口这些学过node都懂不多说</span></span><br><span class="line"><span class="keyword">const</span> express = <span class="built_in">require</span>(<span class="string">'express'</span>)</span><br><span class="line"></span><br><span class="line"><span class="keyword">const</span> router = express.Router()</span><br><span class="line"></span><br><span class="line">router.get(<span class="string">'/yhf/abc'</span>, (req, res) =&gt; &#123;</span><br><span class="line">  res.send(<span class="string">'欢迎访问 Node 服务器数据 API 接口！'</span>)</span><br><span class="line">&#125;)</span><br><span class="line"></span><br><span class="line"><span class="built_in">module</span>.exports = router</span><br></pre></td></tr></table></figure><ol start="4"><li>如何调用 router 呢？（我们找到 build/webpack.dev.conf.js）（说一下为什么是这个文件，在旧版本呢就是在 build/sev-server.js 中配置的，在新版本中去除了这个配置文件改为了前面的那个 webpack 配置文件）</li></ol><ul><li>1.找到了这个文件后 第一步肯定是引包啦 要加在 const portfinder = require(‘portfinder’) 的后面</li></ul><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">const</span> express = <span class="built_in">require</span>(<span class="string">'express'</span>) express包</span><br><span class="line"><span class="keyword">const</span> app = express.Router() 开启服务 这个自己喜欢吧</span><br><span class="line"><span class="keyword">const</span> router = <span class="built_in">require</span>(<span class="string">'../server/router'</span>)  你自己的接口包</span><br></pre></td></tr></table></figure><ul><li>2.第二步当然就是配置啦 （找到 devServer 大约在 25 行左右那里）</li></ul><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">// 加入这一段代码 本来是没有before的要自己加</span></span><br><span class="line">before(app) &#123;</span><br><span class="line">    <span class="comment">// 这个方法是直接在这里自己写接口</span></span><br><span class="line">      app.get(<span class="string">'/api/getDiscList'</span>,(req,res) =&gt; &#123;</span><br><span class="line">        res.send(<span class="string">"欢迎来的node服务"</span>)</span><br><span class="line">      &#125;)</span><br><span class="line">    <span class="comment">//   这个是外部引入</span></span><br><span class="line">      app.use(router)</span><br><span class="line">    &#125;</span><br></pre></td></tr></table></figure>]]></content>
    
    <summary type="html">
    
      
      
        &lt;link rel=&quot;stylesheet&quot; class=&quot;aplayer-secondary-style-marker&quot; href=&quot;/assets/css/APlayer.min.css&quot;&gt;&lt;script src=&quot;/assets/js/APlayer.min.js&quot; cla
      
    
    </summary>
    
      <category term="Vue" scheme="http://yoursite.com/categories/Vue/"/>
    
    
      <category term="Vue笔记" scheme="http://yoursite.com/tags/Vue%E7%AC%94%E8%AE%B0/"/>
    
  </entry>
  
  <entry>
    <title>仿写 vue2-vuex 案例</title>
    <link href="http://yoursite.com/2018/11/21/2018-11-21/"/>
    <id>http://yoursite.com/2018/11/21/2018-11-21/</id>
    <published>2018-11-21T05:21:48.662Z</published>
    <updated>2018-11-21T05:27:44.056Z</updated>
    
    <content type="html"><![CDATA[<link rel="stylesheet" class="aplayer-secondary-style-marker" href="/assets/css/APlayer.min.css"><script src="/assets/js/APlayer.min.js" class="aplayer-secondary-script-marker"></script><h2 id="案例心得"><a href="#案例心得" class="headerlink" title="案例心得"></a>案例心得</h2><ul><li>在分析完那个vuex的小案例后，我觉得自己好像真的明白了vuex是着么写的</li><li>但是在我重新去仿照这个案例写的时候，还是发现了自己有很多的不足</li><li>那也只可以一点点的去查一点点的去写</li><li>在仿写的过程中，也有向源码学习</li><li>从中知道和学到了很多之前自己不会的方法和技巧</li></ul><h2 id="仿写源码"><a href="#仿写源码" class="headerlink" title="仿写源码"></a><a href="https://github.com/YHF7/Vue/tree/master/vue2-vuex-yhf" target="_blank" rel="noopener">仿写源码</a></h2><h2 id="vue2-vuex案例分析"><a href="#vue2-vuex案例分析" class="headerlink" title="vue2-vuex案例分析"></a><a href="https://yhf7.github.io/2018/11/17/vue2-vuex%E6%A1%88%E4%BE%8B/#more" target="_blank" rel="noopener">vue2-vuex案例分析</a></h2>]]></content>
    
    <summary type="html">
    
      
      
        &lt;link rel=&quot;stylesheet&quot; class=&quot;aplayer-secondary-style-marker&quot; href=&quot;/assets/css/APlayer.min.css&quot;&gt;&lt;script src=&quot;/assets/js/APlayer.min.js&quot; cla
      
    
    </summary>
    
      <category term="Vue" scheme="http://yoursite.com/categories/Vue/"/>
    
    
      <category term="Vue 案例" scheme="http://yoursite.com/tags/Vue-%E6%A1%88%E4%BE%8B/"/>
    
  </entry>
  
</feed>
