[{"title":"Vue day4 案例","url":"%2F2018%2F10%2F13%2F2018-10-13%2F","content":"\n# 案例分布\n\n    1. 组件案例练习\n    2. 路由嵌套\n    3. 命名视图案例\n\n# 一、组件案例练习\n\n## 重点\n\n- vue\n  - @(v-on) v-for :key v-model\n  - localStorage 本地存储\n  - 子组件 data methods 方法\n  - JSON\n  - created 生命周期\n\n```html\n    <!DOCTYPE html>\n<html lang=\"en\">\n\n<head>\n    <meta charset=\"UTF-8\">\n    <meta name=\"viewport\" content=\"width=device-width, initial-scale=1.0\">\n    <meta http-equiv=\"X-UA-Compatible\" content=\"ie=edge\">\n    <title>Document</title>\n    <script src=\"./lib/vue-2.5.17.js\"></script>\n    <link rel=\"stylesheet\" href=\"./lib/bootstrap-3.3.7.css\">\n</head>\n\n<body>\n    <div id=\"app\">\n        <tmp-box @add=\"addBox\"></tmp-box>\n\n\n        <ul class=\"list-group\">\n            <li class=\"list-group-item\" v-for=\"item in list\" :key=\"item.id\">\n                <span class=\"badge\">评论人：{{item.name}}</span>\n                {{item.con}}\n            </li>\n        </ul>\n    </div>\n\n    <template id=\"tmp\">\n        <div>\n            <div class=\"form-group\">\n                <label>姓名：</label>\n                <input type=\"text\" class=\"form-control\" v-model=\"name\">\n            </div>\n            <div class=\"form-group\">\n                <label>评论：</label>\n                <textarea class=\"form-control\" rows=\"3\" v-model=\"con\"></textarea>\n            </div>\n            <div class=\"form-group\">\n                <button type=\"button\" class=\"btn btn-success\" @click='add'>提交</button>\n            </div>\n        </div>\n    </template>\n\n</body>\n<script>\n    let tmpBox = {\n        template: '#tmp',\n        data() {\n            return {\n                id: Date.now(),\n                name: '',\n                con: ''\n            }\n        },\n        methods: {\n            add() {\n                let addCon = {\n                    id: Date.now(),\n                    name: this.name,\n                    con: this.con\n                };\n\n                if (addCon.name!==''&&addCon.con!=='') {\n                    let list = JSON.parse(localStorage.getItem('yhf') || '[]');\n                    list.unshift(addCon);\n\n                    localStorage.setItem('yhf', JSON.stringify(list));\n                    this.name = this.con = '';\n\n                    this.$emit('add');\n                }else {\n                    alert('请输入姓名')\n                }\n            }\n        }\n    }\n\n    var vm = new Vue({\n        el: '#app',\n        data: {\n            list: [{\n                    id: 1,\n                    name: 'yhf',\n                    con: 'djifjeifefefefe'\n                },\n                {\n                    id: 2,\n                    name: 'yhf2',\n                    con: 'djifjeifeefeffefefe'\n                },\n                {\n                    id: 3,\n                    name: 'yhf3',\n                    con: 'djifjeifefeefefefefe'\n                },\n            ]\n        },\n        created: function () {\n            this.addBox()\n        },\n        methods: {\n            addBox() {\n                let list = JSON.parse(localStorage.getItem('yhf') || '[]');\n                this.list = list;\n            }\n        },\n        components: {\n            tmpBox\n        }\n    })\n</script>\n\n</html>\n```\n\n# 二、路由嵌套\n\n## 重点\n\n- vue\n  - children 属性\n  - 子路由的设置 带/ 和不带/\n\n```html\n<!DOCTYPE html>\n<html lang=\"en\">\n\n<head>\n    <meta charset=\"UTF-8\">\n    <meta name=\"viewport\" content=\"width=device-width, initial-scale=1.0\">\n    <meta http-equiv=\"X-UA-Compatible\" content=\"ie=edge\">\n    <title>Document</title>\n    <script src=\"./lib/vue-2.5.17.js\"></script>\n    <script src=\"./lib/vue-router-3.0.1.js\"></script>\n</head>\n\n<body>\n    <div id=\"app\">\n        <router-link to=\"/account\">Account</router-link>\n\n        <router-view></router-view>\n    </div>\n\n    <template id=\"tmp1\">\n        <div>\n            <h1>这是 Account 组件</h1>\n\n            <router-link to=\"/login\">登录</router-link>\n            <router-link to=\"/account/register\">注册</router-link>\n\n            <router-view></router-view>\n        </div>\n    </template>\n</body>\n<script>\n    var account = {\n        template: '#tmp1'\n    }\n\n    var login = {\n        template: '<h3>登录</h3>'\n    }\n\n    var register = {\n        template: '<h3>注册</h3>'\n    }\n\n    var router = new VueRouter({\n        routes: [{\n                path: '/account',\n                component: account,\n                // 使用 children 属性，实现子路由，同时，子路由的 path 前面，不要带 / ，否则永远以根路径开始请求，这样不方便我们用户去理解URL地址\n                children: [{\n                        path: '/login',\n                        component: login\n                    },\n                    {\n                        path: 'register',\n                        component: register\n                    }\n                ]\n            }\n\n        ]\n    })\n\n    // 创建 Vue 实例,得到 ViewModel\n    var vm = new Vue({\n        el: '#app',\n        data: {},\n        methods: {},\n        router\n    })\n</script>\n\n</html>\n```\n\n# 三、命名视图案例\n\n## 重点\n\n- vue\n  - 属性名 name\n  - components 多地址设置\n  - css 设置\n\n```html\n    <!DOCTYPE html>\n<html lang=\"en\">\n\n<head>\n    <meta charset=\"UTF-8\">\n    <meta name=\"viewport\" content=\"width=device-width, initial-scale=1.0\">\n    <meta http-equiv=\"X-UA-Compatible\" content=\"ie=edge\">\n    <title>Document</title>\n    <script src=\"./lib/vue-2.5.17.js\"></script>\n    <script src=\"./lib/vue-router-3.0.1.js\"></script>\n\n    <style>\n        * {\n            margin: 0;\n            padding: 0;\n            font-size: 16px;\n        }\n\n        .header {\n            background-color: orange;\n            height: 80px;\n        }\n\n        .container {\n            display: flex;\n            height: 600px;\n        }\n\n        .left {\n            background-color: lightgreen;\n            flex: 2;\n        }\n\n        .main {\n            background-color: lightpink;\n            flex: 8;\n        }\n    </style>\n\n</head>\n\n<body>\n    <div id=\"app\">\n        <router-view></router-view>\n        <div class=\"container\">\n            <router-view name=\"left\"></router-view>\n            <router-view name=\"main\"></router-view>\n        </div>\n    </div>\n</body>\n<script>\n    var header = {\n        template: '<h1 class=\"header\">header</h1>'\n    }\n\n\n    var leftBox = {\n        template: '<h1 class=\"left\">leftBox</h1>'\n    }\n\n\n    var mainBox = {\n        template: '<h1 class=\"main\">mainBox</h1>'\n    }\n\n    var router = new VueRouter({\n        routes: [{\n            path: '/',\n            components: {\n                'default': header,\n                'left': leftBox,\n                'main': mainBox\n            }\n        }]\n    })\n\n    // 创建 Vue 实例,得到 ViewModel\n    var vm = new Vue({\n        el: '#app',\n        data: {},\n        methods: {},\n        router\n    })\n</script>\n\n</html>\n```\n","tags":["Vue 案例"],"categories":["Vue"]},{"title":"Vue day4","url":"%2F2018%2F10%2F13%2FVue-day4%2F","content":"\n# 复习\n1. 实现小球\n    - @click 控制小球的显示隐藏\n    - @before-enter=\"beforeEnter\" @enter=\"enter\" @after-enter=\"afterEnter\" 钩子动画函数 \n2. 定义组件\n    ```\n    <script>\n        // 定义组件的时候，如果要定义全局的组件， Vue.component('组件的名称', {})\n\n\n        // 通过 对象 字面量的形式， 定义了一个 组件模板对象\n        var login = {\n            template: '<h1>1234</h1>'\n        }\n        //  通过  Vue.component 把 组件模板对象，注册为一个全局的Vue 组件，同时，为这个组件起了一个名称，可以让我们  通过 标签形式，在页面中直接引入这个组件\n        // Vue.component('mylogin', login)\n\n\n\n        // 创建 Vue 实例，得到 ViewModel\n        var vm = new Vue({\n            el: '#app',\n            data: {},\n            methods: {},\n            components: {\n                // '组件的名称': 组件的模板对象\n                // 'mylogin': login\n                login\n            }\n        });\n    </script>\n    ```\n\n\n# 父组件向子组件传值\n1. 组件实例定义方式，注意：一定要使用`props`属性来定义父组件传递过来的数据\n```\n<script>\n    // 创建 Vue 实例，得到 ViewModel\n    var vm = new Vue({\n      el: '#app',\n      data: {\n        msg: '这是父组件中的消息'\n      },\n      components: {\n        son: {\n          template: '<h1>这是子组件 --- {{finfo}}</h1>',\n          props: ['finfo']\n        }\n      }\n    });\n  </script>\n```\n2. 使用`v-bind`或简化指令，将数据传递到子组件中：\n```\n<div id=\"app\">\n    <son :finfo=\"msg\"></son>\n  </div>\n```\n\n# 子组件向父组件传值\n1. 原理：父组件将方法的引用，传递到子组件内部，子组件在内部调用父组件传递过来的方法，同时把要发送给父组件的数据，在调用方法的时候当作参数传递进去；\n2. 父组件将方法的引用传递给子组件，其中，`getMsg`是父组件中`methods`中定义的方法名称，`func`是子组件调用传递过来方法时候的方法名称\n```\n<son @func=\"getMsg\"></son>\n```\n3. 子组件内部通过`this.$emit('方法名', 要传递的数据)`方式，来调用父组件中的方法，同时把数据传递给父组件使用\n```\n<div id=\"app\">\n    <!-- 引用父组件 -->\n    <son @func=\"getMsg\"></son>\n\n    <!-- 组件模板定义 -->\n    <script type=\"x-template\" id=\"son\">\n      <div>\n        <input type=\"button\" value=\"向父组件传值\" @click=\"sendMsg\" />\n      </div>\n    </script>\n  </div>\n\n  <script>\n    // 子组件的定义方式\n    Vue.component('son', {\n      template: '#son', // 组件模板Id\n      methods: {\n        sendMsg() { // 按钮的点击事件\n          this.$emit('func', 'OK'); // 调用父组件传递过来的方法，同时把数据传递出去\n        }\n      }\n    });\n\n    // 创建 Vue 实例，得到 ViewModel\n    var vm = new Vue({\n      el: '#app',\n      data: {},\n      methods: {\n        getMsg(val){ // 子组件中，通过 this.$emit() 实际调用的方法，在此进行定义\n          alert(val);\n        }\n      }\n    });\n  </script>\n```\n\n# 组件中data和props的区别\n\n# 评论列表案例\n目标：主要练习父子组件之间传值\n\n# 使用 `this.$refs` 来获取元素和组件\n```\n  <div id=\"app\">\n    <div>\n      <input type=\"button\" value=\"获取元素内容\" @click=\"getElement\" />\n      <!-- 使用 ref 获取元素 -->\n      <h1 ref=\"myh1\">这是一个大大的H1</h1>\n\n      <hr>\n      <!-- 使用 ref 获取子组件 -->\n      <my-com ref=\"mycom\"></my-com>\n    </div>\n  </div>\n\n  <script>\n    Vue.component('my-com', {\n      template: '<h5>这是一个子组件</h5>',\n      data() {\n        return {\n          name: '子组件'\n        }\n      }\n    });\n\n    // 创建 Vue 实例，得到 ViewModel\n    var vm = new Vue({\n      el: '#app',\n      data: {},\n      methods: {\n        getElement() {\n          // 通过 this.$refs 来获取元素\n          console.log(this.$refs.myh1.innerText);\n          // 通过 this.$refs 来获取组件\n          console.log(this.$refs.mycom.name);\n        }\n      }\n    });\n  </script>\n```\n\n# 什么是路由\n1. **后端路由：**对于普通的网站，所有的超链接都是URL地址，所有的URL地址都对应服务器上对应的资源；\n\n2. **前端路由：**对于单页面应用程序来说，主要通过URL中的hash(#号)来实现不同页面之间的切换，同时，hash有一个特点：HTTP请求中不会包含hash相关的内容；所以，单页面程序中的页面跳转主要用hash实现；\n\n3. 在单页面应用程序中，这种通过hash改变来切换页面的方式，称作前端路由（区别于后端路由）；\n\n# 在 vue 中使用 vue-router\n1. 导入 vue-router 组件类库：\n```\n<!-- 1. 导入 vue-router 组件类库 -->\n  <script src=\"./lib/vue-router-2.7.0.js\"></script>\n```\n2. 使用 router-link 组件来导航\n```\n<!-- 2. 使用 router-link 组件来导航 -->\n<router-link to=\"/login\">登录</router-link>\n<router-link to=\"/register\">注册</router-link>\n```\n3. 使用 router-view 组件来显示匹配到的组件\n```\n<!-- 3. 使用 router-view 组件来显示匹配到的组件 -->\n<router-view></router-view>\n```\n4. 创建使用`Vue.extend`创建组件\n```\n    // 4.1 使用 Vue.extend 来创建登录组件\n    var login = Vue.extend({\n      template: '<h1>登录组件</h1>'\n    });\n\n    // 4.2 使用 Vue.extend 来创建注册组件\n    var register = Vue.extend({\n      template: '<h1>注册组件</h1>'\n    });\n```\n5. 创建一个路由 router 实例，通过 routers 属性来定义路由匹配规则\n```\n// 5. 创建一个路由 router 实例，通过 routers 属性来定义路由匹配规则\n    var router = new VueRouter({\n      routes: [\n        { path: '/login', component: login },\n        { path: '/register', component: register }\n      ]\n    });\n```\n6. 使用 router 属性来使用路由规则\n```\n// 6. 创建 Vue 实例，得到 ViewModel\n    var vm = new Vue({\n      el: '#app',\n      router: router // 使用 router 属性来使用路由规则\n    });\n```\n\n# 使用tag属性指定router-link渲染的标签类型\n\n# 设置路由重定向\n\n# 设置路由高亮\n\n# 设置路由切换动效\n\n# 在路由规则中定义参数\n1. 在规则中定义参数：\n```\n{ path: '/register/:id', component: register }\n```\n2. 通过 `this.$route.params`来获取路由中的参数：\n```\nvar register = Vue.extend({\n      template: '<h1>注册组件 --- {{this.$route.params.id}}</h1>'\n    });\n```\n\n# 使用 `children` 属性实现路由嵌套\n```\n  <div id=\"app\">\n    <router-link to=\"/account\">Account</router-link>\n\n    <router-view></router-view>\n  </div>\n\n  <script>\n    // 父路由中的组件\n    const account = Vue.extend({\n      template: `<div>\n        这是account组件\n        <router-link to=\"/account/login\">login</router-link> | \n        <router-link to=\"/account/register\">register</router-link>\n        <router-view></router-view>\n      </div>`\n    });\n\n    // 子路由中的 login 组件\n    const login = Vue.extend({\n      template: '<div>登录组件</div>'\n    });\n\n    // 子路由中的 register 组件\n    const register = Vue.extend({\n      template: '<div>注册组件</div>'\n    });\n\n    // 路由实例\n    var router = new VueRouter({\n      routes: [\n        { path: '/', redirect: '/account/login' }, // 使用 redirect 实现路由重定向\n        {\n          path: '/account',\n          component: account,\n          children: [ // 通过 children 数组属性，来实现路由的嵌套\n            { path: 'login', component: login }, // 注意，子路由的开头位置，不要加 / 路径符\n            { path: 'register', component: register }\n          ]\n        }\n      ]\n    });\n\n    // 创建 Vue 实例，得到 ViewModel\n    var vm = new Vue({\n      el: '#app',\n      data: {},\n      methods: {},\n      components: {\n        account\n      },\n      router: router\n    });\n  </script>\n```\n\n# 命名视图实现经典布局\n1. 标签代码结构：\n```\n<div id=\"app\">\n    <router-view></router-view>\n    <div class=\"content\">\n      <router-view name=\"a\"></router-view>\n      <router-view name=\"b\"></router-view>\n    </div>\n  </div>\n```\n2. JS代码：\n```\n<script>\n    var header = Vue.component('header', {\n      template: '<div class=\"header\">header</div>'\n    });\n\n    var sidebar = Vue.component('sidebar', {\n      template: '<div class=\"sidebar\">sidebar</div>'\n    });\n\n    var mainbox = Vue.component('mainbox', {\n      template: '<div class=\"mainbox\">mainbox</div>'\n    });\n\n    // 创建路由对象\n    var router = new VueRouter({\n      routes: [\n        {\n          path: '/', components: {\n            default: header,\n            a: sidebar,\n            b: mainbox\n          }\n        }\n      ]\n    });\n\n    // 创建 Vue 实例，得到 ViewModel\n    var vm = new Vue({\n      el: '#app',\n      data: {},\n      methods: {},\n      router\n    });\n  </script>\n```\n3. CSS 样式：\n```\n  <style>\n    .header {\n      border: 1px solid red;\n    }\n\n    .content{\n      display: flex;\n    }\n    .sidebar {\n      flex: 2;\n      border: 1px solid green;\n      height: 500px;\n    }\n    .mainbox{\n      flex: 8;\n      border: 1px solid blue;\n      height: 500px;\n    }\n  </style>\n```\n\n# `watch`属性的使用\n考虑一个问题：想要实现 `名` 和 `姓` 两个文本框的内容改变，则全名的文本框中的值也跟着改变；（用以前的知识如何实现？？？）\n\n1. 监听`data`中属性的改变：\n```\n<div id=\"app\">\n    <input type=\"text\" v-model=\"firstName\"> +\n    <input type=\"text\" v-model=\"lastName\"> =\n    <span>{{fullName}}</span>\n  </div>\n\n  <script>\n    // 创建 Vue 实例，得到 ViewModel\n    var vm = new Vue({\n      el: '#app',\n      data: {\n        firstName: 'jack',\n        lastName: 'chen',\n        fullName: 'jack - chen'\n      },\n      methods: {},\n      watch: {\n        'firstName': function (newVal, oldVal) { // 第一个参数是新数据，第二个参数是旧数据\n          this.fullName = newVal + ' - ' + this.lastName;\n        },\n        'lastName': function (newVal, oldVal) {\n          this.fullName = this.firstName + ' - ' + newVal;\n        }\n      }\n    });\n  </script>\n```\n2. 监听路由对象的改变：\n```\n<div id=\"app\">\n    <router-link to=\"/login\">登录</router-link>\n    <router-link to=\"/register\">注册</router-link>\n\n    <router-view></router-view>\n  </div>\n\n  <script>\n    var login = Vue.extend({\n      template: '<h1>登录组件</h1>'\n    });\n\n    var register = Vue.extend({\n      template: '<h1>注册组件</h1>'\n    });\n\n    var router = new VueRouter({\n      routes: [\n        { path: \"/login\", component: login },\n        { path: \"/register\", component: register }\n      ]\n    });\n\n    // 创建 Vue 实例，得到 ViewModel\n    var vm = new Vue({\n      el: '#app',\n      data: {},\n      methods: {},\n      router: router,\n      watch: {\n        '$route': function (newVal, oldVal) {\n          if (newVal.path === '/login') {\n            console.log('这是登录组件');\n          }\n        }\n      }\n    });\n  </script>\n```\n\n# `computed`计算属性的使用\n1. 默认只有`getter`的计算属性：\n```\n<div id=\"app\">\n    <input type=\"text\" v-model=\"firstName\"> +\n    <input type=\"text\" v-model=\"lastName\"> =\n    <span>{{fullName}}</span>\n  </div>\n\n  <script>\n    // 创建 Vue 实例，得到 ViewModel\n    var vm = new Vue({\n      el: '#app',\n      data: {\n        firstName: 'jack',\n        lastName: 'chen'\n      },\n      methods: {},\n      computed: { // 计算属性； 特点：当计算属性中所以来的任何一个 data 属性改变之后，都会重新触发 本计算属性 的重新计算，从而更新 fullName 的值\n        fullName() {\n          return this.firstName + ' - ' + this.lastName;\n        }\n      }\n    });\n  </script>\n```\n2. 定义有`getter`和`setter`的计算属性：\n```\n<div id=\"app\">\n    <input type=\"text\" v-model=\"firstName\">\n    <input type=\"text\" v-model=\"lastName\">\n    <!-- 点击按钮重新为 计算属性 fullName 赋值 -->\n    <input type=\"button\" value=\"修改fullName\" @click=\"changeName\">\n\n    <span>{{fullName}}</span>\n  </div>\n\n  <script>\n    // 创建 Vue 实例，得到 ViewModel\n    var vm = new Vue({\n      el: '#app',\n      data: {\n        firstName: 'jack',\n        lastName: 'chen'\n      },\n      methods: {\n        changeName() {\n          this.fullName = 'TOM - chen2';\n        }\n      },\n      computed: {\n        fullName: {\n          get: function () {\n            return this.firstName + ' - ' + this.lastName;\n          },\n          set: function (newVal) {\n            var parts = newVal.split(' - ');\n            this.firstName = parts[0];\n            this.lastName = parts[1];\n          }\n        }\n      }\n    });\n  </script>\n```\n\n# `watch`、`computed`和`methods`之间的对比\n1. `computed`属性的结果会被缓存，除非依赖的响应式属性变化才会重新计算。主要当作属性来使用；\n2. `methods`方法表示一个具体的操作，主要书写业务逻辑；\n3. `watch`一个对象，键是需要观察的表达式，值是对应回调函数。主要用来监听某些特定数据的变化，从而进行某些具体的业务逻辑操作；可以看作是`computed`和`methods`的结合体；\n\n# `nrm`的安装使用\n作用：提供了一些最常用的NPM包镜像地址，能够让我们快速的切换安装包时候的服务器地址；\n什么是镜像：原来包刚一开始是只存在于国外的NPM服务器，但是由于网络原因，经常访问不到，这时候，我们可以在国内，创建一个和官网完全一样的NPM服务器，只不过，数据都是从人家那里拿过来的，除此之外，使用方式完全一样；\n1. 运行`npm i nrm -g`全局安装`nrm`包；\n2. 使用`nrm ls`查看当前所有可用的镜像源地址以及当前所使用的镜像源地址；\n3. 使用`nrm use npm`或`nrm use taobao`切换不同的镜像源地址；\n\n# 相关文件\n1. [URL中的hash（井号）](http://www.cnblogs.com/joyho/articles/4430148.html)","tags":["Vue笔记"],"categories":["Vue"]},{"title":"Vue 重点","url":"%2F2018%2F10%2F13%2FVue-Akey%2F","content":"\n# day1\n\n1. MVC 和 MVVM 的区别\n\n2. 学习了 Vue 中最基本代码的结构\n\n3. 插值表达式 v-cloak v-text v-html v-bind（缩写是:） v-on（缩写是@） v-model v-for v-if v-show\n\n4. 事件修饰符 ： .stop .prevent .capture .self .once\n\n5. el 指定要控制的区域 data 是个对象，指定了控制的区域内要用到的数据 methods 虽然带个 s 后缀，但是是个对象，这里可以自定义了方法\n\n6. 在 VM 实例中，如果要访问 data 上的数据，或者要访问 methods 中的方法， 必须带 this\n\n7. 在 v-for 要会使用 key 属性 （只接受 string / number）\n\n8. v-model 只能应用于表单元素\n\n9. 在 vue 中绑定样式两种方式 v-bind:class v-bind:style\n\n# day2\n\n1. filter 过滤器\n2. 生命周期\n   - beofreCreate 实例被创建前\n   - created （data created）初始化完成\n   - beforeMount 模版内存编译完成 未渲染\n   - mounted 内存模板已经挂载到页面\n   - beforeUpdate 数据以更新未同步到页面\n   - updated 数据与页面以同步\n3. vue-resource 数据获取\n   - getInfo get 发起请求\n   - postInfo post 发起请求\n   - jsonpInfo jsonp 发起请求\n4. 模拟客户端获取 jsonp 数据 （node）\n\n- 通过<script src=\"http://127.0.0.1:3000/index?callback=showInfo123\"></script>调用并执行本地的回调函数（端口，路由，数据判断，函数）\n- nodejs 开启端口为 3000 的服务\n- 使用前端模板引擎 express\n- app.get 判断路由 /index\n- 通过 url 获取到传过来的数据（query）\n- 使用数据模板拼接 var scriptStr = `${query.callback}(${JSON.stringify(data)})`(query.callback 是 url 获取过来的数据于后台服务的数据拼接)\n- res.end(data)把数据返回\n- 在页面中就可以用函数接收传过来的数据（showInfor123 就是页面自定义函数名）\n\n# day3\n\n1. 动画 1 控制语句\n   - 通过@click 和 v-if 、 data 判断数据的显示隐藏\n2. 动画 2 transition css 控制\n   - transition vue 官方控制用在 需要被动画控制滴元素，包裹起来\n   - css 控制\n     - v-enter [这是一个时间点] 是进入前，元素的起始状态，此时还没有进入\n     - v-leave-to 【】是动画离开之后，离开的终止状态，此时元素动画已经结束\n     - v-enter-active 【入场动画的时间段\n     - v-leave-active 【离场动画的时间段\n3. 动画 修改 v-前缀(在定义多个不同动画的时候，用来解决动画重复问题)\n   - <transition name=\"my\"> 在 transition 包裹的时候给它一个 name\n   - css 控制的时候\n     - 就可以把 v-enter 改为 my-enter （这个就可以同时定义多个不同的动画效果）\n4. 动画 3 使用第三方类\n   - animate 第三方类\n   - 引入 <link rel=\"stylesheet\" href=\"./lib/animate.css\">\n   - 入场使用 bounceIn 离场使用 bounceOut （不固定去官网看效果喜欢那个用那个）\n   - enter-active-class=\"bounceIn\"\n   - leave-active-class=\"bounceOut\"\n   - 使用 :duration=\"{ enter: 200, leave: 400 }\" 来分别设置 入场的时长 和 离场的时长\n   - 用法简单添加在 transition 里面就可以\n5. 动画 4 钩子函数\n   - 使用 transition 元素，把 需要被动画控制滴元素，包裹起来\n   - 绑定钩子方法 @before-enter=\"beforeEnter\" @enter=\"enter\" @after-enter=\"afterEnter\"\n   - 在 methods 实现方法\n     - beforeEnter: function(el){//动画钩子函数的第一个参数：el，表示 要执行动画的那个 DOM 元素，是个原生的 JS DOM 对象}// 函数开始前\n     - enter: function (el,done) {// done 其实就是 afterEnter 这个函数，也就是说：done 是 afterEnter 函数的引用}// 函数执行动画\n     - afterEnter: function(el){// 动画完成后}\n6. 动画 5 动画列表\n   - 在实现列表过度的时候，如果需要过渡元素，是通过 v-for 循环渲染出来的，不能使用 transition 包裹，需要使用 transitionGroup\n   - 如果要为 v-for 循环创建的元素设置动画，必须给每一个元素 设置 :key 属性\n   - 给 ransition-group 添加 appear 属性，实现页面刚展示出来时候，入场时候的效果\n   - 通过 为 transition-group 元素，设置 tag 属性(指定渲染的类型 如：span 就会渲染成 span ul 就会渲染成 ul)，指定 transition-group 渲染为指定的元素，如果不指定 tag 属性，默认，渲染为 span 标签\n7. 组件 1\n\n   - 使用 Vue-extend 来创建全局的 Vue 组件\n   - // Vue.component 第一个参赛:组件的名称，将来引用组件的时候，就是一个 标签形式 来引入 它的 第二个参赛：Vue.extend 创建的组件，其中 template 就是组件将来展示的 html 内容\n\n   ```\n   Vue.component('myCom1', Vue.extend({\n       template: '<h3>这是使用 Vue.extend 创建的组件</h3>' // 通过 template 属性，指定了组件要展示的html结构\n   }));\n   ```\n\n   - 如果要使用组件，直接，把组件的名称，以 html 的标签形式，引入到页面中，即可\n   - 如果使用 Vue.component 定义组件的时候，组件名称使用了 驼峰命名，则在引用组件的时候，需要把 大写的驼峰改为小写的字母，同时，两个单词之间，使用 - 连接；\n\n   ```\n   <my-com1></my-com1>\n   ```\n\n8. 组件 2\n   - 在组件 1 的基础上改进 Vue.component 第二个参赛直接返回一个对象\n   ```\n      Vue.component('mycom2', {\n       // 注意:不论是哪种方式创建出来的组件,组件的 template 属性指向的模板内容,必须有且只能有唯一的一个根元素\n       template: '<div><h3>这是使用 Vue.extend 创建的组件</h3><span>123</span></div>' // 通过 template 属性，指定了组件要展示的html结构\n      });\n   ```\n9. 组件 3\n   - 在 被控制的 #app 外面，使用 template 元素，定义组件的 html 模板结构\n   ```\n   <template id='tmp1'>\n       <div>\n           <h1>这是通过 template 元素，在外部定义的组件结构，有代码的智能提示</h1>\n           <h4>好用 不错</h4>\n       </div>\n   </template>\n   ```\n   - 定义全局组件\n   ```\n   Vue.component('mycom3', {\n       template: '#tmp1'\n   });\n   ```\n   - 定义私有化\n   ```\n   components: { // 定义实例内部的私有组件\n           login: {\n               template: '#tmp1'\n           }\n       }\n   ```\n10. 组件中的 data\n    - 组件可以有自己的 data 数据\n    - 组件的 data 和 实例的 data 有点不一样，实例中的 data 可以为一个对象，但是 组将中的 data 必须是一个方法\n    - 组件的 data 除了必须为一个方法，这个方法内部，还必须返回一个对象\n    - 组件中 的 data 数据 ，使用方法，和实例中的 data 使用方法完全一样！！！\n    ```\n    data: function () {\n            return {\n                msg: '这是组件中data的数据'\n            }\n        }\n    ```\n11. 组件的切换 1\n\n    - @click v-if v-else 控制\n\n12. 组件切换 2\n    - <!-- Vue 提供了 component，来展示对应名称的组件 -->\n    - <!-- component 是一个占位符，:is 属性，可以用来展示组件的名称 -->\n    - <component :is=\"comName\"></component>\n    - 通过改变 comName 这个数值改变显示组件（data 中 comName 是 login 就会显示 login 的数据 register 就会显示 register 的数据）\n13. 组件切换 3\n    - <transition mode=\"out-in\"> 通过 mode 属性，设置组件切换时候的 模式 （用来给组件添加动画的时候给 css 动画知道,等待动画完成再执行另一个动画）\n\n# day4\n\n1. 父组件向子组件传值\n   - 父组件，可以在引用子组件的时候，通过 属性绑定（v-bind：）的形式，把 需要传递给 子组件的数据， 以属性绑定的形式，传递到子组件内部，供子组件使用\n   - 使用 props 把父组件传递过来的 （parentmsg）在 v-bind:parentmsg=\"msg\" 自定义的一个名称 msg 是父级的数据 属性，先在 props 数组中，定义一下，才能使用数据\n   - 组件中的 所有 props 中的数据，都是通过 父组件传递给子组件的\n   - props 中的数据都是只读的，无法更新赋值 （其实是可以修改但是不符合规定会报错）\n2. 父组件向子组件传方法\n   - 父组件向子组件 传递 方法，使用的是 事件绑定机制 v-on，当我们自定义了 一个 事件属性之后，那么，子组建就能够，通过某些方法，来调用 传递过来的数据\n   ```\n   <com2 @func=\"show\"></com2>//func是自定义的名称 show 是父组件的方法\n   ```\n   - 在子组件如何调用父组件方法 使用 emit 触发，调用\n   ```\n   this.$emit('func',this.sonmsg)//第一个是上面调用定义的方法名 第二个参数开始是向父组件传参数，可以有多个\n   ```\n3. localStorage.getItem 和 localStorage.setItem 本地存储的获取和设置\n   - 一般 getItem 是配和 JSON.parse 使用 转化为 json 数据\n   - setItem 是配合 JSON.stringfy 使用 解析为本地存储格式\n4. ref 获取 dom 元素和组件\n   - 在 元素中添加 ref=\"login\" （login 是自定义的名称）\n   - 在 父组件就可以用 this.$refs.login 获取到 dom 元素\n   - this.$refs.login.show() 可直接获取到方法（show()是 login 子组件内的方法）\n5. router 页面路由\n\n   - vue-router 是 vue 的路由第三方插件\n   - 创建一个路由对象，当 导入 vue-router 包之后，在 window 全局对象中，就有一个路由当架构函数，叫做 VueRouter\n   - linkActiveClass: 'myactive' // 通过 linkActiveClass 来修改样式属性名 在 vuerouter 内定义\n   - redirect 重定向\n\n   ```\n       // 在 new 路由对象当时候，可以为 构造函数，传递一个配置对象\n       var routerObj = new VueRouter({\n       // route // 这个配置对象中的 route 表示[路由匹配规则]的意思\n       routes: [ // 路由匹配规则\n           // 每个路由规则，都是一个对象，这个规则对象，身上，有两个必须当属性：\n           //   属性1 是 path，表示监听 那个路由链接地址\n           //   属性2 上 component，表示，如果 路由是前面匹配到的 path, 展示 component 属性对应的那个组件\n           // 注意： component 的属性值，必须是一个 组件的模版对象，不能是 组件的引用名称\n\n           // 不推荐使用\n           // {\n           //     path:\"/\",\n           //     component: login\n           // },\n           { // 这里的 redirect 和 node 中的 redirect 完全啥两码事\n               path: '/',\n               redirect: '/login'\n           },\n           {\n               path: '/login',\n               component: login\n           },\n           {\n               path: '/register',\n               component: register\n           }\n       ],\n       linkActiveClass: 'myactive' // 通过linkActiveClass 来修改样式属性名\n   });\n   ```\n\n   ```\n        /* vue-router 提供的类名修改样式 */\n        /* .router-link-active {\n            color: red;\n            font-weight: 800;\n            font-style: italic;\n            font-size: 80px;\n            text-decoration: underline;\n            background-color: pink;\n        } */\n\n        /* 自定义类名修改样式 */\n        .myactive {\n            color: red;\n            font-weight: 800;\n            font-style: italic;\n            font-size: 80px;\n            text-decoration: underline;\n            background-color: pink;\n        }\n\n        .v-enter,\n        .v-leave-to {\n            opacity: 0;\n            transform: translateX(140px);\n        }\n\n        .v-enter-active,\n        .v-leave-active {\n            transition: all .5s ease;\n        }\n   ```\n\n   - vue-router 提供的元素，专门用来 当作占位符的，将来，路由规则，匹配到的组件，就会展示到这个 router-view 中去 <router-view></router-view>\n   - router-link 默认渲染为一个 a 标签\n   - tag 指定渲染类型\n\n   ```\n       <!-- router-link 默认渲染为一个 a标签 -->\n       <!-- msg 指定渲染类型 -->\n       <router-link to=\"/login\" tag=\"span\">登录</router-link>\n       <router-link to=\"/register\">注册</router-link>\n\n       <!-- 这是 vue-router 提供的元素，专门用来 当作占位符的，将来，路由规则，匹配到的组件，就会展示到这个 router-view 中去 -->\n       <!-- 所以：我们可以把 router-view 认为是一个占位符 -->\n       <!-- mode 定义过渡摸索 先out 再 in -->\n       <transition mode='out-in'>\n           <router-view></router-view>\n       </transition>\n   ```\n6. 路由规则中定义参数 $route\n    - 方法一 query\n        - 如果在路由中，使用 查询字符串 则 不需要修改 路由规则对 path 属性（在router-link 直接用?拼接）\n        ```\n        <router-link to=\"/login?id=10&name=李白\">登录</router-link>\n        ```\n        - 数据会存储在 $route 内的 query 的对象中 如何获取呢 因为是在子组件内部获取的本身就是自己this可写可不写\n        ```\n        console.log(this.$route.query);\n        this.$route.query.id // 可获取到内部自己设置的id\n        this.$route.query.(设置的数据名)\n        ```\n    - 方法二 params\n        - 与方法一不同的是数据名不是在url设置是直接在路由设置，直接写数据就可以 /数据\n        ```\n        <router-link to=\"/login/12/yhf\">登录</router-link>\n        ```\n        - 设置了url 再去设置路由判断  在路由后面以/:元素名的形式添加\n        ```\n        routes: [{\n                path: '/login/:id/:name',\n                component: login\n            }]\n        ```\n        - 数据还是会存在 $route 里面但是 不是在 query 里面了 而是在 $route 内的 params 里面 获取的方法和 query 一样\n        ```\n        console.log(this.$route.params);\n        console.log(this.$route.params.id);\n        console.log(this.$route.params.name);\n        ```\n7. 路由中嵌套路由\n    - 在一个路由中我们会通过点击这个路由，展示路由中另一个路由的内容（只是更改路由处的数据不影响其他页面的显示）\n    - 设置路由\n    ```\n    <router-link to=\"/login\">登录</router-link>// 为继承account路由 所有在数据查找的时候会在根目录查找 （也是因为后面路由的设置而判断 后面的路由继承了account 路由就不可以这样  继承的事根路由就要这样用）\n    <router-link to=\"/account/register\">注册</router-link> // 继承在account下的路由\n    ```\n    - 设置路由\n    ```\n    routes: [{\n            path: '/account',// 设置主路由\n            component: account,// 路由展示的组件\n\n            children: [// 设置嵌套的 子路由\n                // 使用 children 属性，实现子路由，同时，子路由的 path 前面，不要带 / ，否则永远以根路径开始请求，这样不方便我们用户去理解URL地址\n                //这样就是设置了根为查找目录\n                {\n                    path: '/login',\n                    component: login\n                },\n                // 这个就是嵌套了子路有 不需要添加 /\n                {\n                    path: 'register',\n                    component: register\n                }\n            ]\n        }\n    ]\n    ``` \n8. 命名视图\n    - 在同一个页面展示多个视图 在路由判断中就会被主路由覆盖\n    - 在路由判断中 路由地址 component 不止可以存放一个地址\n    - 在存放多个地址的时候 把 components 加个s 接收对象就可以存放多个地址\n    ```\n    routes: [{\n        path: '/',\n        components: { // 路由地址\n            'default': header,// 设置多地址的时候 前面'' 号中填写的是这个路由的属性名（自定义） 后面的是路由地址\n            'left': leftBox,\n            'main': mainBox\n        }\n    }]\n    ```\n    - 如何使用多路由视图呢\n    ```\n    <router-view></router-view>// 主路由可不用写属性名\n    <router-view name=\"left\"></router-view>// 但是子路由就必须写属性名 name\n    <router-view name=\"main\"></router-view>\n    ```","tags":["Vue笔记"],"categories":["Vue"]},{"title":"Vue day3","url":"%2F2018%2F10%2F12%2FVue-day3%2F","content":"\n# [Vue 中的动画](https://cn.vuejs.org/v2/guide/transitions.html)\n\n为什么要有动画：动画能够提高用户的体验，帮助用户更好的理解页面中的功能；\n\n# 使用过渡类名\n\n1. HTML 结构：\n\n```\n<div id=\"app\">\n    <input type=\"button\" value=\"动起来\" @click=\"myAnimate\">\n    <!-- 使用 transition 将需要过渡的元素包裹起来 -->\n    <transition name=\"fade\">\n      <div v-show=\"isshow\">动画哦</div>\n    </transition>\n  </div>\n```\n\n2. VM 实例：\n\n```\n// 创建 Vue 实例，得到 ViewModel\nvar vm = new Vue({\n  el: '#app',\n  data: {\n    isshow: false\n  },\n  methods: {\n    myAnimate() {\n      this.isshow = !this.isshow;\n    }\n  }\n});\n```\n\n3. 定义两组类样式：\n\n```\n/* 定义进入和离开时候的过渡状态 */\n    .fade-enter-active,\n    .fade-leave-active {\n      transition: all 0.2s ease;\n      position: absolute;\n    }\n\n    /* 定义进入过渡的开始状态 和 离开过渡的结束状态 */\n    .fade-enter,\n    .fade-leave-to {\n      opacity: 0;\n      transform: translateX(100px);\n    }\n```\n\n# [使用第三方 CSS 动画库](https://cn.vuejs.org/v2/guide/transitions.html#自定义过渡类名)\n\n1. 导入动画类库：\n\n```\n<link rel=\"stylesheet\" type=\"text/css\" href=\"./lib/animate.css\">\n```\n\n2. 定义 transition 及属性：\n\n```\n<transition\n\tenter-active-class=\"fadeInRight\"\n    leave-active-class=\"fadeOutRight\"\n    :duration=\"{ enter: 500, leave: 800 }\">\n  \t<div class=\"animated\" v-show=\"isshow\">动画哦</div>\n</transition>\n```\n\n# 使用动画钩子函数\n\n1. 定义 transition 组件以及三个钩子函数：\n\n```\n<div id=\"app\">\n    <input type=\"button\" value=\"切换动画\" @click=\"isshow = !isshow\">\n    <transition\n    @before-enter=\"beforeEnter\"\n    @enter=\"enter\"\n    @after-enter=\"afterEnter\">\n      <div v-if=\"isshow\" class=\"show\">OK</div>\n    </transition>\n  </div>\n```\n\n2. 定义三个 methods 钩子方法：\n\n```\nmethods: {\n        beforeEnter(el) { // 动画进入之前的回调\n          el.style.transform = 'translateX(500px)';\n        },\n        enter(el, done) { // 动画进入完成时候的回调\n          el.offsetWidth;\n          el.style.transform = 'translateX(0px)';\n          done();\n        },\n        afterEnter(el) { // 动画进入完成之后的回调\n          this.isshow = !this.isshow;\n        }\n      }\n```\n\n3. 定义动画过渡时长和样式：\n\n```\n.show{\n      transition: all 0.4s ease;\n    }\n```\n\n# [v-for 的列表过渡](https://cn.vuejs.org/v2/guide/transitions.html#列表的进入和离开过渡)\n\n1. 定义过渡样式：\n\n```\n<style>\n    .list-enter,\n    .list-leave-to {\n      opacity: 0;\n      transform: translateY(10px);\n    }\n\n    .list-enter-active,\n    .list-leave-active {\n      transition: all 0.3s ease;\n    }\n</style>\n```\n\n2. 定义 DOM 结构，其中，需要使用 transition-group 组件把 v-for 循环的列表包裹起来：\n\n```\n  <div id=\"app\">\n    <input type=\"text\" v-model=\"txt\" @keyup.enter=\"add\">\n\n    <transition-group tag=\"ul\" name=\"list\">\n      <li v-for=\"(item, i) in list\" :key=\"i\">{{item}}</li>\n    </transition-group>\n  </div>\n```\n\n3. 定义 VM 中的结构：\n\n```\n    // 创建 Vue 实例，得到 ViewModel\n    var vm = new Vue({\n      el: '#app',\n      data: {\n        txt: '',\n        list: [1, 2, 3, 4]\n      },\n      methods: {\n        add() {\n          this.list.push(this.txt);\n          this.txt = '';\n        }\n      }\n    });\n```\n\n# 列表的排序过渡\n\n`<transition-group>` 组件还有一个特殊之处。不仅可以进入和离开动画，**还可以改变定位**。要使用这个新功能只需了解新增的 `v-move` 特性，**它会在元素的改变定位的过程中应用**。\n\n- `v-move` 和 `v-leave-active` 结合使用，能够让列表的过渡更加平缓柔和：\n\n```\n.v-move{\n  transition: all 0.8s ease;\n}\n.v-leave-active{\n  position: absolute;\n}\n```\n\n# 定义Vue组件\n什么是组件： 组件的出现，就是为了拆分Vue实例的代码量的，能够让我们以不同的组件，来划分不同的功能模块，将来我们需要什么样的功能，就可以去调用对应的组件即可；\n组件化和模块化的不同：\n + 模块化： 是从代码逻辑的角度进行划分的；方便代码分层开发，保证每个功能模块的职能单一；\n + 组件化： 是从UI界面的角度进行划分的；前端的组件化，方便UI组件的重用；\n## 全局组件定义的三种方式\n1. 使用 Vue.extend 配合 Vue.component 方法：\n```\nvar login = Vue.extend({\n      template: '<h1>登录</h1>'\n    });\n    Vue.component('login', login);\n```\n2. 直接使用 Vue.component 方法：\n```\nVue.component('register', {\n      template: '<h1>注册</h1>'\n    });\n```\n3. 将模板字符串，定义到script标签种：\n```\n<script id=\"tmpl\" type=\"x-template\">\n      <div><a href=\"#\">登录</a> | <a href=\"#\">注册</a></div>\n    </script>\n```\n同时，需要使用 Vue.component 来定义组件：\n```\nVue.component('account', {\n      template: '#tmpl'\n    });\n```\n\n> 注意： 组件中的DOM结构，有且只能有唯一的根元素（Root Element）来进行包裹！\n\n## 组件中展示数据和响应事件\n1. 在组件中，`data`需要被定义为一个方法，例如：\n```\nVue.component('account', {\n      template: '#tmpl',\n      data() {\n        return {\n          msg: '大家好！'\n        }\n      },\n      methods:{\n        login(){\n          alert('点击了登录按钮');\n        }\n      }\n    });\n```\n2. 在子组件中，如果将模板字符串，定义到了script标签中，那么，要访问子组件身上的`data`属性中的值，需要使用`this`来访问；\n\n## 【重点】为什么组件中的data属性必须定义为一个方法并返回一个对象\n1. 通过计数器案例演示\n\n## 使用`components`属性定义局部子组件\n1. 组件实例定义方式：\n```\n<script>\n    // 创建 Vue 实例，得到 ViewModel\n    var vm = new Vue({\n      el: '#app',\n      data: {},\n      methods: {},\n      components: { // 定义子组件\n        account: { // account 组件\n          template: '<div><h1>这是Account组件{{name}}</h1><login></login></div>', // 在这里使用定义的子组件\n          components: { // 定义子组件的子组件\n            login: { // login 组件\n              template: \"<h3>这是登录组件</h3>\"\n            }\n          }\n        }\n      }\n    });\n  </script>\n```\n2. 引用组件：\n```\n<div id=\"app\">\n    <account></account>\n  </div>\n```\n\n# 使用`flag`标识符结合`v-if`和`v-else`切换组件\n1. 页面结构：\n```\n<div id=\"app\">\n    <input type=\"button\" value=\"toggle\" @click=\"flag=!flag\">\n    <my-com1 v-if=\"flag\"></my-com1>\n    <my-com2 v-else=\"flag\"></my-com2>\n  </div>\n```\n2. Vue实例定义：\n```\n<script>\n    Vue.component('myCom1', {\n      template: '<h3>奔波霸</h3>'\n    })\n\n    Vue.component('myCom2', {\n      template: '<h3>霸波奔</h3>'\n    })\n\n    // 创建 Vue 实例，得到 ViewModel\n    var vm = new Vue({\n      el: '#app',\n      data: {\n        flag: true\n      },\n      methods: {}\n    });\n  </script>\n```\n\n# 使用`:is`属性来切换不同的子组件,并添加切换动画\n1. 组件实例定义方式：\n```\n  // 登录组件\n    const login = Vue.extend({\n      template: `<div>\n        <h3>登录组件</h3>\n      </div>`\n    });\n    Vue.component('login', login);\n\n    // 注册组件\n    const register = Vue.extend({\n      template: `<div>\n        <h3>注册组件</h3>\n      </div>`\n    });\n    Vue.component('register', register);\n\n    // 创建 Vue 实例，得到 ViewModel\n    var vm = new Vue({\n      el: '#app',\n      data: { comName: 'login' },\n      methods: {}\n    });\n```\n2. 使用`component`标签，来引用组件，并通过`:is`属性来指定要加载的组件：\n```\n  <div id=\"app\">\n    <a href=\"#\" @click.prevent=\"comName='login'\">登录</a>\n    <a href=\"#\" @click.prevent=\"comName='register'\">注册</a>\n    <hr>\n    <transition mode=\"out-in\">\n      <component :is=\"comName\"></component>\n    </transition>\n  </div>\n```\n3. 添加切换样式：\n```\n  <style>\n    .v-enter,\n    .v-leave-to {\n      opacity: 0;\n      transform: translateX(30px);\n    }\n\n    .v-enter-active,\n    .v-leave-active {\n      position: absolute;\n      transition: all 0.3s ease;\n    }\n\n    h3{\n      margin: 0;\n    }\n  </style>\n```","tags":["Vue笔记"],"categories":["Vue"]},{"title":"Vue day1 案例","url":"%2F2018%2F10%2F08%2F2018-10-08(1)%2F","content":"\n# 案例分布\n1. 跑马灯效果\n2. 简易计算器\n\n# 一、跑马灯效果\n## 重点\n- @click(v-on:click)点击事件\n- 字符串的截取和赋值\n- 定时器的控制\n\n## 效果图\n![跑马灯效果](/Vue/Vue-day1-1-1.png)\n![跑马灯效果](/Vue/Vue-day1-1-2.png)\n\n## 案例代码\n``` html\n<!DOCTYPE html>\n<html lang=\"en\">\n<head>\n    <meta charset=\"UTF-8\">\n    <meta name=\"viewport\" content=\"width=device-width, initial-scale=1.0\">\n    <meta http-equiv=\"X-UA-Compatible\" content=\"ie=edge\">\n    <title>Document</title>\n    <!-- 1.倒入vue包 -->\n    <script src=\"./lib/vue-2.4.0.js\"></script>\n</head>\n<body>\n    <!-- 2.创建一个要控制的区域 -->\n    <div id=\"app\">\n        <input type=\"button\" value=\"浪起来\" @click=\"lang\">\n        <input type=\"button\" value=\"低调\" @click=\"stop\">\n        <h4>{{msg}}</h4>\n    </div>\n</body>\n\n    <script>\n        //注意；在vm实例中，如果想要获取data上的数据，或者想要调用methos中的方法，必须通过this.数据名 或 this.方法名来进行访问，这里的this 就等于我们new出来的vm 实例对象\n        var vm = new Vue({\n            el: '#app',\n            data:{\n                msg: '猥琐发育，别浪～～！',\n                intervalId:null //在data上定义 定时器Id\n            },\n            methods:{\n                lang() {\n                    console.log(this.msg)\n                    \n                    if(this.intervalId != null) return;\n                    this.intervalId = setInterval(() => {\n                        //获取到头的第一个字符\n                        var start = this.msg.substring(0,1)\n                        // 获取到后面的所有字符\n                        var end = this.msg.substring(1)\n                        // 重新拼接到新的字符串，并附值到 this.msg\n\n                        this.msg = end + start\n                    },400)\n\n                    //注意：vm实例，会监听自己身上的data 中所有数据的变化 ，只要数据一发生变化，就会自动把 最新的数据，从data上同步到页面中去；【好处：程序员只需要关系数据,不需要考虑重新渲染dom页面】\n                },\n                stop() {//停止定时器\n                    clearInterval(this.intervalId)\n                    // 每当清楚了定时器之后，需要重新把定时器重制为null\n                    this.intervalId = null;\n                }\n            }\n        })\n\n        // 分析：\n        // 1.给 【浪起来】 按钮，绑定一个点击事件 v-on @\n        // 2.在按钮灯事件处理函数中，雌鹅相关灯业务逻辑代码：拿到msg字符串，然后调用字符串灯 substring 来进行字符串灯截取操作，吧 第一个截取出来放到最后面\n        // 3.为了实习点击按钮，自动截取的功能，需要把2步骤放到定时器里面\n    </script>\n\n</html>\n```\n\n# 二、简易计算器\n## 重点\n- v-model(数据双向绑定)\n- v-click(点击事件)\n- 数据的判断\n\n## 效果图\n![简易计算器](/Vue/Vue-day1-2-1.png)\n![简易计算器](/Vue/Vue-day1-2-2.png)\n\n## 案例代码\n``` html\n<!DOCTYPE html>\n<html lang=\"en\">\n<head>\n    <meta charset=\"UTF-8\">\n    <meta name=\"viewport\" content=\"width=device-width, initial-scale=1.0\">\n    <meta http-equiv=\"X-UA-Compatible\" content=\"ie=edge\">\n    <title>Document</title>\n    <script src=\"./lib/vue-2.4.0.js\"></script>\n</head>\n<body>\n    <div id=\"app\">\n        <input type=\"text\" v-model=\"n1\">\n\n        <select v-model=\"opt\">\n            <option value=\"+\">+</option>\n            <option value=\"-\">-</option>\n            <option value=\"*\">*</option>\n            <option value=\"/\">/</option>\n        </select>\n\n        <input type=\"text\" v-model=\"n2\">\n        <input type=\"button\" value=\"=\" @click=\"calc\">\n\n        <input type=\"text\" v-model=\"result\">\n\n    </div>\n</body>\n<script>\n    var vm = new Vue({\n        el:'#app',\n        data: {\n            n1: 0,\n            n2: 0,\n            result: 0,\n            opt: '+'\n        },\n        methods:{\n            calc(){//计算器算数的方法\n                //逻辑:\n                // switch(this.opt){\n                //     case '+':\n                //     this.result = parseInt(this.n1)+parseInt(this.n2)\n                //         break;\n                //     case '-':\n                //     this.result = parseInt(this.n1)-parseInt(this.n2)\n                //         break;\n                //     case '*':\n                //     this.result = parseInt(this.n1)*parseInt(this.n2)\n                //         break;\n                //     case '/':\n                //     this.result = parseInt(this.n1)/parseInt(this.n2)\n                //         break;\n                // }\n\n                //注意:这是投机取巧的方式，正式开发中尽量少用\n                var cideStr = 'parseInt(this.n1)'+this.opt+'parseInt(this.n2)'\n                this.result = eval(cideStr)\n            }\n        }\n    })\n</script>\n</html>\n```","tags":["Vue 案例"],"categories":["Vue"]},{"title":"Vue day2 案例","url":"%2F2018%2F10%2F08%2F2018-10-08(2)%2F","content":"\n# 案例分布\n\n1. 品牌列表案例\n\n# 一、品牌列表案例\n\n## 重点\n\n- vue 指令\n  - v-model(数据双向绑定)\n  - v-on(点击事件)\n  - v-focus(光标定位) 自定义\n  - v-color(颜色改变) 自定义\n  - @keyup(键盘抬起)\n- vue 添加方法\n  - new Vue({})\n  - add()添加方法\n  - del(id)删除方法\n  - search 检索 关键字\n  - Vue.filter 全局过滤器(过滤时间)\n  - filters 私有化过滤器(局部)\n  - padStart(填充完毕后的总数, 在前面填充的元素) 字符串新特性\n  - Vue.directive 全局自定义方法 自定义获取焦点\n  - directives 私有化自定义方法 \n  - Vue.config.keyCodes.f2 = 113 自定义全局按键修饰符 （Vue.config 配置）\n\n## 效果图\n\n![品牌列表案例](/Vue/Vue-day2-1-1.png)\n![品牌列表案例](/Vue/Vue-day2-1-2.png)\n![品牌列表案例](/Vue/Vue-day2-1-3.png)\n![品牌列表案例](/Vue/Vue-day2-1-4.png)\n\n## 案例代码\n\n```Html\n<!DOCTYPE html>\n<html lang=\"en\">\n<head>\n    <meta charset=\"UTF-8\">\n    <meta name=\"viewport\" content=\"width=device-width, initial-scale=1.0\">\n    <meta http-equiv=\"X-UA-Compatible\" content=\"ie=edge\">\n    <title>Document</title>\n    <script src=\"./lib/vue-2.4.0.js\"></script>\n    <link rel=\"stylesheet\" href=\"./lib/bootstrap-3.3.7.css\">\n    <!-- 需要用到jquery吗？ -->\n</head>\n<body>\n    <div id=\"app\">\n\n        <div class=\"panel panel-primary\">\n            <div class=\"panel-heading\">\n                <h3 class=\"panel-title\">\n                    添加品牌\n                </h3>\n            </div>\n            <div class=\"panel-body form-inline\">\n                <label>\n                    Id:\n                    <input type=\"text\" class=\"form-control\" v-model=\"id\">\n                </label>\n                <label>\n                    Name:\n                    <input type=\"text\" class=\"form-control\" v-model=\"name\" @keyup.f2=\"add\">\n                </label>\n\n                <!-- 在 vue中，使用事件绑定机制，为元素制定处理函数都时候，如果加了小括号，就可以为函数传参 -->\n                <input type=\"button\" value=\"添加\" class=\"btn btn-primary\" @click=\"add\">\n\n                <label>\n                    搜索名称关键字:\n                    <!-- vue中所有的指令，在调用的时候，都以v-开头 -->\n                    <input type=\"text\" class=\"form-control\" v-model=\"keywords\" id=\"search\" v-focus v-color=\"'pink'\">\n                </label>\n\n            </div>\n        </div>\n\n        <table class=\"table table-bordered table-hover table-striped\">\n            <thead>\n                <tr>\n                    <th>Id</th>\n                    <th>Name</th>\n                    <th>Ctime</th>\n                    <th>Operation</th>\n                </tr>\n            </thead>\n            <thead>\n                <!-- 之前，v-for 中的数据 都是直接从data 上的list中直接渲染过来的 -->\n                <!-- 现在， 我们自定义的一个 search  方法，同时，把 搜索的关键字，通过传参的形式，传递给了search 方法 -->\n                <!-- 在 search 方法内部，通过 执行 for 循环，把所有符合 搜索关键字的数据，保管到 一个新数组中。返回 -->\n                <tr v-for=\"item in search(keywords)\" :key=\"item.id\">\n                    <td>{{item.id}}</td>\n                    <td v-text=\"item.name\"></td>\n                    <td>{{ item.ctime | dateFormat() }}</td>\n                    <td><a href=\"\" @click.prevent=\"del(item.id)\">删除</a></td>\n                </tr>\n            </thead>\n        </table>\n    </div>\n\n    <div id=\"app2\">\n        <h3 v-color=\"'red'\" v-fontweight=\"900\" v-fontsize=\"'50px'\">{{dt | dateFormat}}</h3>\n    </div>\n</body>\n<script>\n    // 全局的过滤器，进行时间的格式化\n    // 所谓的全局过滤器，就是所有的vm实例都共享的\n    Vue.filter('dateFormat',function (dataStr, pattern=\"\"){\n        //根据给定的时间字符串，得到特定的时间\n        var dt = new Date(dataStr)\n\n        var y = dt.getFullYear()\n        var m = dt.getMonth() + 1\n        var d = dt.getDate()\n\n        // return y + '-' + m + '-' d\n        // return `${y}-${m}-${d}`\n\n        if(pattern.toLowerCase() === 'yyyy-mm-dd'){\n            return `${y}-${m}-${d}`\n        }else {\n            var hh = dt.getHours()\n            var mm = dt.getMinutes()\n            var ss = dt.getSeconds()\n            return `${y}-${m}-${d} ${hh}:${mm}:${ss}`\n        }\n    })\n\n\n    // 自定义全局按键修饰符\n    Vue.config.keyCodes.f2 = 113\n\n    //使用vue.directive() 定义全局都指令\n    // 其中：参数1:指令的名称，注意，在定义都时候，指令都名称前面，不需要加 v- 前缀，\n    // 但是：在调用都时候，必须 在指令都名称前面 加上 v- 前缀来进行调用\n    // 参数2: 是一个对象，这个对象身上，有一些指令相关都函数，这些函数可以在特定都阶段执行相关的操作\n    Vue.directive('focus',{\n        bind: function(el){//每当指令绑定到元素上的时候，会立即执行这个 bind 函数 ，只执行一次\n            // 注意： 在每个 函数中，第一个参数 el， 表示 被绑定了指令的那个元素，这个 el 参数，数一个原生的js对象\n            // 在元素 刚绑定了指令的时候，还没有 插入到 dom中去，这时候，调用focus 方法没有作用\n            // 因为，一个元素，只有插入dom之后，才能获取到焦点\n            // el.focus()\n        },\n        inserted: function(el){//表示元素 插入到dom中的时候会执行 inserted 函数 只触发一次\n            el.focus()\n            // 和js行为有关的操作最好在inserted中执行，防止js行为不生效\n        },\n        updated: function(){//当vnode更新的时候，会执行 updated ，可能会触发多次\n\n        }\n    })\n\n    //自定义一个 设置字体颜色的指令\n    Vue.directive('color', {\n        // 样式，只要通过指令绑定给了元素，不管这个元素有没有插入到页面中去，这个元素肯定有了一个内联的样式\n        // 将来元素肯定会显示到页面中，这时候，浏览器的渲染引擎必然会解析样式，应用给这个元素\n        bind: function(el,binding){\n            // el.style.color = 'red'\n            // 和样式相关的操作，一般都可以在bind中执行\n\n            el.style.color = binding.value\n        }\n    })\n\n\n    var vm = new Vue({\n        el:'#app',\n        data: {\n            id:'',\n            name:'',\n            keywords: '', //搜索关键字\n            list:[\n                {id: 1 , name: '奔驰' , ctime: new Date() },\n                {id: 2 , name: '宝马' , ctime: new Date() }\n            ]\n        },\n        methods:{\n            add(){//添加的方法\n                // 分析：\n                // 1.获取到 id 和 name，直接从data上获取\n                // 2.组织出一个对象\n                // 3.把对象调用数组都相关方法，添加到当前data上的list中\n                // 4.注意：在vue中已经实现数据都双向绑定，每当我们修改了data中的数据vue会默认监听到数据的改动，自动更新数据应用到页面上\n                // 5.当我们意识到上面的第四步的时候，就证明打击已经入门vue了，我们更多的是在进行vm中model数据的操作，同时在操作model数据的时候，指定的业务逻辑操作\n\n                var car = { id:this.id , name: this.name , ctime: new Date()}\n                this.list.push(car)\n                this.id = this.name = ''\n            },\n            del(id){//根据id删数据\n                // 分析：\n                // 1.如何根据id找到要删除对象的索引\n                // 2.如果找到索引了，直接调用 数组的splice方法\n\n                // this.list.some((item,i)=>{\n                //     if(item.id == id){\n                //         this.list.splice(i,1)\n                //         // 在数组的some方法中，如果return true，就会立即终止这个数组的后续循环\n                //         return true;\n                //     }\n                // })\n\n                var index = this.list.findIndex(item => {\n                    if(item.id == id){\n                        return true;\n                    }\n                })\n                this.list.splice(index,1)\n            },\n            search(keywords){//根据关键字，进行数据的搜索\n                // var newList = []\n                // this.list.forEach(item=>{\n                //     if(item.name.indexOf(keywords) != -1){\n                //         newList.push(item)\n                //     }\n                // })\n                // return newList;\n\n                // 注意： forEach some filter findIndex 这些都是属于数组的新方法\n                // 都会对数组中的每一项，进行遍历，执行相关的操作\n                return this.list.filter(item => {\n                    // if(item.name.indexOf(keywords) != -1)\n\n                    // 注意：ES6中，为字符窜提供了一个新方法，叫做 String.prototype.includes(‘要包含的字符串’)\n                    // 如果包含，则返回 true ，否则返回 false\n                    // contains\n                    if(item.name.includes(keywords)){\n                        return item\n                    }\n                })\n            }\n        }\n    });\n\n    // 如何自定义一个私有的过滤器（局部）\n    var vm2 = new Vue({\n        el: '#app2',\n        data: {\n            dt: new Date()\n        },\n        methods: {},\n        filters: {//定义私有过滤器  过滤器又两个条件 【过滤器名称 和 处理函数】\n            //过滤器调用的时候，采用的是就近原则，如果私有过滤器和全局过滤器名称一直，会优先调用私有的过滤器\n            dateFormat: function (dataStr, pattern=\"\"){\n                //根据给定的时间字符串，得到特定的时间\n                var dt = new Date(dataStr)\n\n                var y = dt.getFullYear()\n                var m = (dt.getMonth() + 1).toString().padStart(2,'0')\n                var d = dt.getDate().toString().padStart(2,'0')\n\n                // return y + '-' + m + '-' d\n                // return `${y}-${m}-${d}`\n\n                if(pattern.toLowerCase() === 'yyyy-mm-dd'){\n                    return `${y}-${m}-${d}`\n                }else {\n                    var hh = dt.getHours().toString().padStart(2,'0')\n                    var mm = dt.getMinutes().toString().padStart(2,'0')\n                    var ss = dt.getSeconds().toString().padStart(2,'0')\n                    return `${y}-${m}-${d} ${hh}:${mm}:${ss}`\n                }\n            }\n        },\n        directives: { //自定义私有指令\n            'fontweight': {//设置字体粗细\n                bind: function (el, binding){\n                    el.style.fontWeight = binding.value\n                }\n            },\n            'fontsize': function (el, binding){//注意：这个是 function 等同于 把 代码写到 bind 和 update中去\n                el.style.fontSize = parseInt(binding.value) + 'px'\n            }\n        }\n    })\n\n\n\n\n    //过滤器的定于语法\n    // Vue.filter('过滤器的名称',function(){})\n\n    // 过滤器中的function，第一个参数 ，已经背规定死，永远都是，过滤器 管道符前面 传过了的数据\n    // Vue.filter('过滤器的名称',function (data) {\n    //     return data +'123'\n    // })\n\n        // document.getElementById('search').focus()\n\n</script>\n</html>\n\n\n\n<!-- 过滤器调用时候的格式 {{name | 过滤器的名称}} -->\n```\n","tags":["Vue 案例"],"categories":["Vue"]},{"title":"Vue day2","url":"%2F2018%2F10%2F08%2FVue-day2%2F","content":"\n# vue 生命周期表\n\n![vue生命周期表](/Vue/lifecycle.png)\n\n# 品牌管理案例\n\n## 添加新品牌\n\n## 删除品牌\n\n## 根据条件筛选品牌\n\n1. 1.x 版本中的 filterBy 指令，在 2.x 中已经被废除：\n\n[filterBy - 指令](https://v1-cn.vuejs.org/api/#filterBy)\n\n```\n<tr v-for=\"item in list | filterBy searchName in 'name'\">\n\n  <td>{{item.id}}</td>\n\n  <td>{{item.name}}</td>\n\n  <td>{{item.ctime}}</td>\n\n  <td>\n\n    <a href=\"#\" @click.prevent=\"del(item.id)\">删除</a>\n\n  </td>\n\n</tr>\n```\n\n2. 在 2.x 版本中[手动实现筛选的方式](https://cn.vuejs.org/v2/guide/list.html#显示过滤-排序结果)：\n\n- 筛选框绑定到 VM 实例中的 `searchName` 属性：\n\n```\n<hr> 输入筛选名称：\n\n<input type=\"text\" v-model=\"searchName\">\n```\n\n- 在使用 `v-for` 指令循环每一行数据的时候，不再直接 `item in list`，而是 `in` 一个 过滤的 methods 方法，同时，把过滤条件`searchName`传递进去：\n\n```\n<tbody>\n\n      <tr v-for=\"item in search(searchName)\">\n\n        <td>{{item.id}}</td>\n\n        <td>{{item.name}}</td>\n\n        <td>{{item.ctime}}</td>\n\n        <td>\n\n          <a href=\"#\" @click.prevent=\"del(item.id)\">删除</a>\n\n        </td>\n\n      </tr>\n\n    </tbody>\n```\n\n- `search` 过滤方法中，使用 数组的 `filter` 方法进行过滤：\n\n```\nsearch(name) {\n\n  return this.list.filter(x => {\n\n    return x.name.indexOf(name) != -1;\n\n  });\n\n}\n```\n\n# Vue 调试工具`vue-devtools`的安装步骤和使用\n\n[Vue.js devtools - 翻墙安装方式 - 推荐](https://chrome.google.com/webstore/detail/vuejs-devtools/nhdogjmejiglipccpnnnanhbledajbpd?hl=zh-CN)\n\n# 过滤器\n\n概念：Vue.js 允许你自定义过滤器，**可被用作一些常见的文本格式化**。过滤器可以用在两个地方：**mustache 插值和 v-bind 表达式**。过滤器应该被添加在 JavaScript 表达式的尾部，由“管道”符指示；\n\n## 私有过滤器\n\n1. HTML 元素：\n\n```\n<td>{{item.ctime | dataFormat('yyyy-mm-dd')}}</td>\n```\n\n2. 私有 `filters` 定义方式：\n\n```\nfilters: { // 私有局部过滤器，只能在 当前 VM 对象所控制的 View 区域进行使用\n\n    dataFormat(input, pattern = \"\") { // 在参数列表中 通过 pattern=\"\" 来指定形参默认值，防止报错\n\n      var dt = new Date(input);\n\n      // 获取年月日\n\n      var y = dt.getFullYear();\n\n      var m = (dt.getMonth() + 1).toString().padStart(2, '0');\n\n      var d = dt.getDate().toString().padStart(2, '0');\n\n\n\n      // 如果 传递进来的字符串类型，转为小写之后，等于 yyyy-mm-dd，那么就返回 年-月-日\n\n      // 否则，就返回  年-月-日 时：分：秒\n\n      if (pattern.toLowerCase() === 'yyyy-mm-dd') {\n\n        return `${y}-${m}-${d}`;\n\n      } else {\n\n        // 获取时分秒\n\n        var hh = dt.getHours().toString().padStart(2, '0');\n\n        var mm = dt.getMinutes().toString().padStart(2, '0');\n\n        var ss = dt.getSeconds().toString().padStart(2, '0');\n\n\n\n        return `${y}-${m}-${d} ${hh}:${mm}:${ss}`;\n\n      }\n\n    }\n\n  }\n```\n\n> 使用 ES6 中的字符串新方法 String.prototype.padStart(maxLength, fillString='') 或 String.prototype.padEnd(maxLength, fillString='')来填充字符串；\n\n## 全局过滤器\n\n```\n// 定义一个全局过滤器\n\nVue.filter('dataFormat', function (input, pattern = '') {\n\n  var dt = new Date(input);\n\n  // 获取年月日\n\n  var y = dt.getFullYear();\n\n  var m = (dt.getMonth() + 1).toString().padStart(2, '0');\n\n  var d = dt.getDate().toString().padStart(2, '0');\n\n\n\n  // 如果 传递进来的字符串类型，转为小写之后，等于 yyyy-mm-dd，那么就返回 年-月-日\n\n  // 否则，就返回  年-月-日 时：分：秒\n\n  if (pattern.toLowerCase() === 'yyyy-mm-dd') {\n\n    return `${y}-${m}-${d}`;\n\n  } else {\n\n    // 获取时分秒\n\n    var hh = dt.getHours().toString().padStart(2, '0');\n\n    var mm = dt.getMinutes().toString().padStart(2, '0');\n\n    var ss = dt.getSeconds().toString().padStart(2, '0');\n\n\n\n    return `${y}-${m}-${d} ${hh}:${mm}:${ss}`;\n\n  }\n\n});\n```\n\n> 注意：当有局部和全局两个名称相同的过滤器时候，会以就近原则进行调用，即：局部过滤器优先于全局过滤器被调用！\n\n# 键盘修饰符以及自定义键盘修饰符\n\n## 1.x 中自定义键盘修饰符【了解即可】\n\n```\nVue.directive('on').keyCodes.f2 = 113;\n```\n\n## [2.x 中自定义键盘修饰符](https://cn.vuejs.org/v2/guide/events.html#键值修饰符)\n\n1. 通过`Vue.config.keyCodes.名称 = 按键值`来自定义案件修饰符的别名：\n\n```\nVue.config.keyCodes.f2 = 113;\n```\n\n2. 使用自定义的按键修饰符：\n\n```\n<input type=\"text\" v-model=\"name\" @keyup.f2=\"add\">\n```\n\n# [自定义指令](https://cn.vuejs.org/v2/guide/custom-directive.html)\n\n1. 自定义全局和局部的 自定义指令：\n\n```\n    // 自定义全局指令 v-focus，为绑定的元素自动获取焦点：\n\n    Vue.directive('focus', {\n\n      inserted: function (el) { // inserted 表示被绑定元素插入父节点时调用\n\n        el.focus();\n\n      }\n\n    });\n\n\n\n    // 自定义局部指令 v-color 和 v-font-weight，为绑定的元素设置指定的字体颜色 和 字体粗细：\n\n      directives: {\n\n        color: { // 为元素设置指定的字体颜色\n\n          bind(el, binding) {\n\n            el.style.color = binding.value;\n\n          }\n\n        },\n\n        'font-weight': function (el, binding2) { // 自定义指令的简写形式，等同于定义了 bind 和 update 两个钩子函数\n\n          el.style.fontWeight = binding2.value;\n\n        }\n\n      }\n```\n\n2. 自定义指令的使用方式：\n\n```\n<input type=\"text\" v-model=\"searchName\" v-focus v-color=\"'red'\" v-font-weight=\"900\">\n```\n\n# Vue 1.x 中 自定义元素指令【已废弃,了解即可】\n\n```\nVue.elementDirective('red-color', {\n  bind: function () {\n    this.el.style.color = 'red';\n  }\n});\n```\n\n使用方式：\n\n```\n<red-color>1232</red-color>\n```\n\n# [vue 实例的生命周期](https://cn.vuejs.org/v2/guide/instance.html#实例生命周期)\n\n- 什么是生命周期：从 Vue 实例创建、运行、到销毁期间，总是伴随着各种各样的事件，这些事件，统称为生命周期！\n- [生命周期钩子](https://cn.vuejs.org/v2/api/#选项-生命周期钩子)：就是生命周期事件的别名而已；\n- 生命周期钩子 = 生命周期函数 = 生命周期事件\n- 主要的生命周期函数分类：\n\n* 创建期间的生命周期函数： + beforeCreate：实例刚在内存中被创建出来，此时，还没有初始化好 data 和 methods 属性 + created：实例已经在内存中创建 OK，此时 data 和 methods 已经创建 OK，此时还没有开始 编译模板 + beforeMount：此时已经完成了模板的编译，但是还没有挂载到页面中 + mounted：此时，已经将编译好的模板，挂载到了页面指定的容器中显示\n* 运行期间的生命周期函数： + beforeUpdate：状态更新之前执行此函数， 此时 data 中的状态值是最新的，但是界面上显示的 数据还是旧的，因为此时还没有开始重新渲染 DOM 节点 + updated：实例更新完毕之后调用此函数，此时 data 中的状态值 和 界面上显示的数据，都已经完成了更新，界面已经被重新渲染好了！\n* 销毁期间的生命周期函数： + beforeDestroy：实例销毁之前调用。在这一步，实例仍然完全可用。 + destroyed：Vue 实例销毁后调用。调用后，Vue 实例指示的所有东西都会解绑定，所有的事件监听器会被移除，所有的子实例也会被销毁。\n\n# [vue-resource 实现 get, post, jsonp 请求](https://github.com/pagekit/vue-resource)\n\n除了 vue-resource 之外，还可以使用 `axios` 的第三方包实现实现数据的请求\n\n1. 之前的学习中，如何发起数据请求？\n2. 常见的数据请求类型？ get post jsonp\n3. 测试的 URL 请求资源地址：\n\n- get 请求地址： http://vue.studyit.io/api/getlunbo\n- post 请求地址：http://vue.studyit.io/api/post\n- jsonp 请求地址：http://vue.studyit.io/api/jsonp\n\n4. JSONP 的实现原理\n\n- 由于浏览器的安全性限制，不允许 AJAX 访问 协议不同、域名不同、端口号不同的 数据接口，浏览器认为这种访问不安全；\n- 可以通过动态创建 script 标签的形式，把 script 标签的 src 属性，指向数据接口的地址，因为 script 标签不存在跨域限制，这种数据获取方式，称作 JSONP（注意：根据 JSONP 的实现原理，知晓，JSONP 只支持 Get 请求）；\n- 具体实现过程： - 先在客户端定义一个回调方法，预定义对数据的操作； - 再把这个回调方法的名称，通过 URL 传参的形式，提交到服务器的数据接口； - 服务器数据接口组织好要发送给客户端的数据，再拿着客户端传递过来的回调方法名称，拼接出一个调用这个方法的字符串，发送给客户端去解析执行； - 客户端拿到服务器返回的字符串之后，当作 Script 脚本去解析执行，这样就能够拿到 JSONP 的数据了；\n- 带大家通过 Node.js ，来手动实现一个 JSONP 的请求例子；\n\n```\n   const http = require('http');\n   // 导入解析 URL 地址的核心模块\n   const urlModule = require('url');\n\n   const server = http.createServer();\n   // 监听 服务器的 request 请求事件，处理每个请求\n   server.on('request', (req, res) => {\n     const url = req.url;\n\n     // 解析客户端请求的URL地址\n     var info = urlModule.parse(url, true);\n\n     // 如果请求的 URL 地址是 /getjsonp ，则表示要获取JSONP类型的数据\n     if (info.pathname === '/getjsonp') {\n       // 获取客户端指定的回调函数的名称\n       var cbName = info.query.callback;\n       // 手动拼接要返回给客户端的数据对象\n       var data = {\n         name: 'zs',\n         age: 22,\n         gender: '男',\n         hobby: ['吃饭', '睡觉', '运动']\n       }\n       // 拼接出一个方法的调用，在调用这个方法的时候，把要发送给客户端的数据，序列化为字符串，作为参数传递给这个调用的方法：\n       var result = `${cbName}(${JSON.stringify(data)})`;\n       // 将拼接好的方法的调用，返回给客户端去解析执行\n       res.end(result);\n     } else {\n       res.end('404');\n     }\n   });\n\n   server.listen(3000, () => {\n     console.log('server running at http://127.0.0.1:3000');\n   });\n```\n\n5. vue-resource 的配置步骤：\n\n- 直接在页面中，通过`script`标签，引入 `vue-resource` 的脚本文件；\n- 注意：引用的先后顺序是：先引用 `Vue` 的脚本文件，再引用 `vue-resource` 的脚本文件；\n\n6. 发送 get 请求：\n\n```\ngetInfo() { // get 方式获取数据\n  this.$http.get('http://127.0.0.1:8899/api/getlunbo').then(res => {\n    console.log(res.body);\n  })\n}\n```\n\n7. 发送 post 请求：\n\n```\npostInfo() {\n  var url = 'http://127.0.0.1:8899/api/post';\n  // post 方法接收三个参数：\n  // 参数1： 要请求的URL地址\n  // 参数2： 要发送的数据对象\n  // 参数3： 指定post提交的编码类型为 application/x-www-form-urlencoded\n  this.$http.post(url, { name: 'zs' }, { emulateJSON: true }).then(res => {\n    console.log(res.body);\n  });\n}\n```\n\n8. 发送 JSONP 请求获取数据：\n\n```\njsonpInfo() { // JSONP形式从服务器获取数据\n  var url = 'http://127.0.0.1:8899/api/jsonp';\n  this.$http.jsonp(url).then(res => {\n    console.log(res.body);\n  });\n}\n```\n\n# 配置本地数据库和数据接口 API\n\n1. 先解压安装 `PHPStudy`;\n2. 解压安装 `Navicat` 这个数据库可视化工具，并激活；\n3. 打开 `Navicat` 工具，新建空白数据库，名为 `dtcmsdb4`;\n4. 双击新建的数据库，连接上这个空白数据库，在新建的数据库上`右键` -> `运行SQL文件`，选择并执行 `dtcmsdb4.sql` 这个数据库脚本文件；如果执行不报错，则数据库导入完成；\n5. 进入文件夹 `vuecms3_nodejsapi` 内部，执行 `npm i` 安装所有的依赖项；\n6. 先确保本机安装了 `nodemon`, 没有安装，则运行 `npm i nodemon -g` 进行全局安装，安装完毕后，进入到 `vuecms3_nodejsapi`目录 -> `src`目录 -> 双击运行 `start.bat`\n7. 如果 API 启动失败，请检查 PHPStudy 是否正常开启，同时，检查 `app.js` 中第 `14行` 中数据库连接配置字符串是否正确；PHPStudy 中默认的 用户名是 root，默认的密码也是 root\n\n# 品牌管理改造\n\n## 展示品牌列表\n\n## 添加品牌数据\n\n## 删除品牌数据\n\n\n\n# 相关文章\n\n1. [vue.js 1.x 文档](https://v1-cn.vuejs.org/)\n2. [vue.js 2.x 文档](https://cn.vuejs.org/)\n3. [String.prototype.padStart(maxLength, fillString)](http://www.css88.com/archives/7715)\n4. [js 里面的键盘事件对应的键码](http://www.cnblogs.com/wuhua1/p/6686237.html)\n5. [pagekit/vue-resource](https://github.com/pagekit/vue-resource)\n6. [navicat 如何导入 sql 文件和导出 sql 文件](https://jingyan.baidu.com/article/a65957f4976aad24e67f9b9b.html)\n7. [贝塞尔在线生成器](http://cubic-bezier.com/#.4,-0.3,1,.33)\n","tags":["Vue笔记"],"categories":["Vue"]},{"title":"Vue day1","url":"%2F2018%2F10%2F08%2FVue-day1%2F","content":"\n# day1 总结\n1. MVC 和 MVVM 的区别 \n\n2. 学习了Vue中最基本代码的结构 \n\n3. 插值表达式   v-cloak   v-text   v-html   v-bind（缩写是:）   v-on（缩写是@）   v-model   v-for   v-if     v-show \n\n4. 事件修饰符  ：  .stop   .prevent   .capture   .self     .once \n\n5. el  指定要控制的区域    data 是个对象，指定了控制的区域内要用到的数据    methods 虽然带个s后缀，但是是个对象，这里可以自定义了方法 \n\n6. 在 VM 实例中，如果要访问 data 上的数据，或者要访问 methods 中的方法， 必须带 this \n\n7. 在 v-for 要会使用 key 属性 （只接受 string / number） \n\n8. v-model 只能应用于表单元素 \n\n9. 在vue中绑定样式两种方式  v-bind:class   v-bind:style \n\n# 什么是 Vue.js\n\n- Vue.js 是目前最火的一个前端框架，React 是最流行的一个前端框架（React 除了开发网站，还可以开发手机 App， Vue 语法也是可以用于进行手机 App 开发的，需要借助于 Weex）\n\n- Vue.js 是前端的**主流框架之一**，和 Angular.js、React.js 一起，并成为前端三大主流框架！\n\n- Vue.js 是一套构建用户界面的框架，**只关注视图层**，它不仅易于上手，还便于与第三方库或既有项目整合。（Vue 有配套的第三方类库，可以整合起来做大型项目的开发）\n\n- 前端的主要工作？主要负责 MVC 中的 V 这一层；主要工作就是和界面打交道，来制作前端页面效果；\n\n# 为什么要学习流行框架\n\n- 企业为了提高开发效率：在企业中，时间就是效率，效率就是金钱；\n\n* 企业中，使用框架，能够提高开发的效率；\n\n- 提高开发效率的发展历程：原生 JS -> Jquery 之类的类库 -> 前端模板引擎 -> Angular.js / Vue.js（能够帮助我们减少不必要的 DOM 操作；提高渲染效率；双向数据绑定的概念【通过框架提供的指令，我们前端程序员只需要关心数据的业务逻辑，不再关心 DOM 是如何渲染的了】）\n- 在 Vue 中，一个核心的概念，就是让用户不再操作 DOM 元素，解放了用户的双手，让程序员可以更多的时间去关注业务逻辑；\n\n* 增强自己就业时候的竞争力\n\n- 人无我有，人有我优\n- 你平时不忙的时候，都在干嘛？\n\n# 框架和库的区别\n\n- 框架：是一套完整的解决方案；对项目的侵入性较大，项目如果需要更换框架，则需要重新架构整个项目。\n\n* node 中的 express；\n\n- 库（插件）：提供某一个小功能，对项目的侵入性较小，如果某个库无法完成某些需求，可以很容易切换到其它库实现需求。\n\n* 1. 从 Jquery 切换到 Zepto\n* 2. 从 EJS 切换到 art-template\n\n# Node（后端）中的 MVC 与 前端中的 MVVM 之间的区别\n\n- MVC 是后端的分层开发概念；\n- MVVM 是前端视图层的概念，主要关注于 视图层分离，也就是说：MVVM 把前端的视图层，分为了 三部分 Model, View , VM ViewModel\n\n- 为什么有了 MVC 还要有 MVVM\n\n# Vue.js `基本的代码结构`和`插值表达式` 和 MVVM 之间的对应关系\n\n``` Html\n<!DOCTYPE html>\n<html lang=\"en\">\n<head>\n    <meta charset=\"UTF-8\">\n    <meta name=\"viewport\" content=\"width=device-width, initial-scale=1.0\">\n    <meta http-equiv=\"X-UA-Compatible\" content=\"ie=edge\">\n    <title>Document</title>\n    <!-- 1.导入vue的包 -->\n    <script src=\"./lib/vue-2.4.0.js\"></script>\n</head>\n<body>\n    <!-- 将来new的vue实例，会控制这个元素中的所有内容 -->\n    <!-- vue 实例所控制的这个元素区域，就是我们的 v-->\n    <div id=\"app\">\n        <p>{{msg}}</p>\n    </div>\n</body>\n\n<script>\n        // 2.创建个vue的实例\n        // 当我们导入包在浏览器中多了vue构造函数\n        // 注意我们new出来的这个vm对象就是我们mvvm中的 vm调度者\n        var vm = new Vue({\n            el:'#app', //表示当前我们new的这个vue实例要控制表面上的那区域\n            // 这里了的data 就是mvvm中的m，专门用俩保存每个页面的数据\n            data: { //data属性中，存放的是el中的实例\n                msg: '欢迎学习vue' //通过vue提供的指令很方便的渲染到页面上，程序员不再需要手动操作dom元素\n            }\n        })\n    </script>\n\n</html>\n```\n\n# Vue 之 - `v-cloak`\n``` html\n <!-- 使用 v-cloak 能解决 插值表达式闪烁问题 -->\n<p v-cloak>======{{msg}}-------</p>\n```\n# Vue 指令之`v-text`和`v-html`\n``` html\n<h4 v-text=\"msg\"></h4>\n<!-- 默认v-text 是没有闪烁问题的 -->\n<!-- v-text 会覆盖元素用原本的内容，但是 插入值表达式 只会替换自己的这个占位符，不会整个元素的内容清空 -->\n\n<div>{{msg2}}</div>\n<div v-text=\"msg2\"></div>\n<div v-html=\"msg2\"></div>\n<!-- html 插入html的效果表达式 -->\n```\n``` JavaScript\n<script src=\"./lib/vue-2.4.0.js\"></script>\n<script>\n    var vm = new Vue({\n        el: '#id',\n        data: {\n            msg: '我是你爸爸',\n            msg2: '<h1>哈哈，我是你爸爸，我很骄傲</h1>',\n            mytitle: '这是一个自己定义的title'\n        },\n        methods: { //这个methos属性中定义当前vue实例所有可用的方法\n            show: function () {\n                alert(\"我是你爸爸\")\n            }\n        }\n    })\n</script>\n```\n# Vue 指令之`v-bind`的三种用法\n\n1. 直接使用指令`v-bind`\n\n2. 使用简化指令`:`\n\n3. 在绑定的时候，拼接绑定内容：`:title=\"btnTitle + ', 这是追加的内容'\"`\n\n``` html\n<!-- v-bind: 是 vue中 用来绑定属性的指令 -->\n<input type=\"button\" value=\"按钮\" v-bind:title=\"mytitle + '123'\">\n<!-- 注意： v-bind： 指令可以被简写位:要绑定的属性 -->\n<!-- v-bind中，可以写合法的js表达式 -->\n\n<!-- js 代码看v-text v-html处 -->\n```\n\n# Vue 指令之`v-on`和`跑马灯效果`\n## v-on\n1. 直接使用指令`v-on`\n\n2. 使用简化指令`@`\n\n``` Html\n<!-- vue 中提供了 v-on ：事件绑定机制 -->\n<!-- <input type=\"button\" value=\"按钮\" :title=\"mytitle + '123'\"> -->\n\n<input type=\"button\" v-on:click=\"show\" :value=\"mytitle + '123'\">\n<input type=\"button\" value=\"按钮\" @click=\"show\">\n<input type=\"button\" value=\"按钮\" v-on:mouseover=\"show\">\n\n<!-- js 代码看v-text v-html处 -->\n```\n\n\n## 跑马灯效果\n\n1. HTML 结构：\n\n```\n<div id=\"app\">\n\n    <p>{{info}}</p>\n\n    <input type=\"button\" value=\"开启\" v-on:click=\"go\">\n\n    <input type=\"button\" value=\"停止\" v-on:click=\"stop\">\n\n  </div>\n```\n\n2. Vue 实例：\n\n```\n\t// 创建 Vue 实例，得到 ViewModel\n\n    var vm = new Vue({\n\n      el: '#app',\n\n      data: {\n\n        info: '猥琐发育，别浪~！',\n\n        intervalId: null\n\n      },\n\n      methods: {\n\n        go() {\n\n          // 如果当前有定时器在运行，则直接return\n\n          if (this.intervalId != null) {\n\n            return;\n\n          }\n\n          // 开始定时器\n\n          this.intervalId = setInterval(() => {\n\n            this.info = this.info.substring(1) + this.info.substring(0, 1);\n\n          }, 500);\n\n        },\n\n        stop() {\n\n          clearInterval(this.intervalId);\n\n        }\n\n      }\n\n    });\n```\n\n# Vue 指令之`v-on的缩写`和`事件修饰符`\n\n## 事件修饰符：\n\n- .stop 阻止冒泡\n\n- .prevent 阻止默认事件\n\n- .capture 添加事件侦听器时使用事件捕获模式\n\n- .self 只当事件在该元素本身（比如不是子元素）触发时触发回调\n\n- .once 事件只触发一次\n\n# Vue 指令之`v-model`和`双向数据绑定`\n\n# 简易计算器案例\n\n1. HTML 代码结构\n\n```\n  <div id=\"app\">\n\n    <input type=\"text\" v-model=\"n1\">\n\n    <select v-model=\"opt\">\n\n      <option value=\"0\">+</option>\n\n      <option value=\"1\">-</option>\n\n      <option value=\"2\">*</option>\n\n      <option value=\"3\">÷</option>\n\n    </select>\n\n    <input type=\"text\" v-model=\"n2\">\n\n    <input type=\"button\" value=\"=\" v-on:click=\"getResult\">\n\n    <input type=\"text\" v-model=\"result\">\n\n  </div>\n```\n\n2. Vue 实例代码：\n\n```\n\t// 创建 Vue 实例，得到 ViewModel\n\n    var vm = new Vue({\n\n      el: '#app',\n\n      data: {\n\n        n1: 0,\n\n        n2: 0,\n\n        result: 0,\n\n        opt: '0'\n\n      },\n\n      methods: {\n\n        getResult() {\n\n          switch (this.opt) {\n\n            case '0':\n\n              this.result = parseInt(this.n1) + parseInt(this.n2);\n\n              break;\n\n            case '1':\n\n              this.result = parseInt(this.n1) - parseInt(this.n2);\n\n              break;\n\n            case '2':\n\n              this.result = parseInt(this.n1) * parseInt(this.n2);\n\n              break;\n\n            case '3':\n\n              this.result = parseInt(this.n1) / parseInt(this.n2);\n\n              break;\n\n          }\n\n        }\n\n      }\n\n    });\n```\n\n# 在 Vue 中使用样式\n\n## 使用 class 样式\n\n1. 数组\n\n```\n<h1 :class=\"['red', 'thin']\">这是一个邪恶的H1</h1>\n```\n\n2. 数组中使用三元表达式\n\n```\n<h1 :class=\"['red', 'thin', isactive?'active':'']\">这是一个邪恶的H1</h1>\n```\n\n3. 数组中嵌套对象\n\n```\n<h1 :class=\"['red', 'thin', {'active': isactive}]\">这是一个邪恶的H1</h1>\n```\n\n4. 直接使用对象\n\n```\n<h1 :class=\"{red:true, italic:true, active:true, thin:true}\">这是一个邪恶的H1</h1>\n```\n\n## 使用内联样式\n\n1. 直接在元素上通过 `:style` 的形式，书写样式对象\n\n```\n<h1 :style=\"{color: 'red', 'font-size': '40px'}\">这是一个善良的H1</h1>\n```\n\n2. 将样式对象，定义到 `data` 中，并直接引用到 `:style` 中\n\n- 在 data 上定义样式：\n\n```\ndata: {\n        h1StyleObj: { color: 'red', 'font-size': '40px', 'font-weight': '200' }\n}\n```\n\n- 在元素中，通过属性绑定的形式，将样式对象应用到元素中：\n\n```\n<h1 :style=\"h1StyleObj\">这是一个善良的H1</h1>\n```\n\n3. 在 `:style` 中通过数组，引用多个 `data` 上的样式对象\n\n- 在 data 上定义样式：\n\n```\ndata: {\n        h1StyleObj: { color: 'red', 'font-size': '40px', 'font-weight': '200' },\n        h1StyleObj2: { fontStyle: 'italic' }\n}\n```\n\n- 在元素中，通过属性绑定的形式，将样式对象应用到元素中：\n\n```\n<h1 :style=\"[h1StyleObj, h1StyleObj2]\">这是一个善良的H1</h1>\n```\n\n# Vue 指令之`v-for`和`key`属性\n\n1. 迭代数组\n\n```\n<ul>\n  <li v-for=\"(item, i) in list\">索引：{{i}} --- 姓名：{{item.name}} --- 年龄：{{item.age}}</li>\n</ul>\n```\n\n2. 迭代对象中的属性\n\n```\n\t<!-- 循环遍历对象身上的属性 -->\n\n    <div v-for=\"(val, key, i) in userInfo\">{{val}} --- {{key}} --- {{i}}</div>\n```\n\n3. 迭代数字\n\n```\n<p v-for=\"i in 10\">这是第 {{i}} 个P标签</p>\n```\n\n> 2.2.0+ 的版本里，**当在组件中使用** v-for 时，key 现在是必须的。\n\n当 Vue.js 用 v-for 正在更新已渲染过的元素列表时，它默认用 “**就地复用**” 策略。如果数据项的顺序被改变，Vue 将**不是移动 DOM 元素来匹配数据项的顺序**， 而是**简单复用此处每个元素**，并且确保它在特定索引下显示已被渲染过的每个元素。\n\n为了给 Vue 一个提示，**以便它能跟踪每个节点的身份，从而重用和重新排序现有元素**，你需要为每项提供一个唯一 key 属性。\n\n# Vue 指令之`v-if`和`v-show`\n\n> 一般来说，v-if 有更高的切换消耗而 v-show 有更高的初始渲染消耗。因此，如果需要频繁切换 v-show 较好，如果在运行时条件不大可能改变 v-if 较好。\n\n# 品牌管理案例\n\n## 添加新品牌\n\n## 删除品牌\n\n## 根据条件筛选品牌\n\n1. 1.x 版本中的 filterBy 指令，在 2.x 中已经被废除：\n\n[filterBy - 指令](https://v1-cn.vuejs.org/api/#filterBy)\n\n```\n<tr v-for=\"item in list | filterBy searchName in 'name'\">\n\n  <td>{{item.id}}</td>\n\n  <td>{{item.name}}</td>\n\n  <td>{{item.ctime}}</td>\n\n  <td>\n\n    <a href=\"#\" @click.prevent=\"del(item.id)\">删除</a>\n\n  </td>\n\n</tr>\n```\n\n2. 在 2.x 版本中[手动实现筛选的方式](https://cn.vuejs.org/v2/guide/list.html#显示过滤-排序结果)：\n\n- 筛选框绑定到 VM 实例中的 `searchName` 属性：\n\n```\n<hr> 输入筛选名称：\n\n<input type=\"text\" v-model=\"searchName\">\n```\n\n- 在使用 `v-for` 指令循环每一行数据的时候，不再直接 `item in list`，而是 `in` 一个 过滤的 methods 方法，同时，把过滤条件`searchName`传递进去：\n\n```\n<tbody>\n\n      <tr v-for=\"item in search(searchName)\">\n\n        <td>{{item.id}}</td>\n\n        <td>{{item.name}}</td>\n\n        <td>{{item.ctime}}</td>\n\n        <td>\n\n          <a href=\"#\" @click.prevent=\"del(item.id)\">删除</a>\n\n        </td>\n\n      </tr>\n\n    </tbody>\n```\n\n- `search` 过滤方法中，使用 数组的 `filter` 方法进行过滤：\n\n```\nsearch(name) {\n\n  return this.list.filter(x => {\n\n    return x.name.indexOf(name) != -1;\n\n  });\n\n}\n```\n\n# Vue 调试工具`vue-devtools`的安装步骤和使用\n\n[Vue.js devtools - 翻墙安装方式 - 推荐](https://chrome.google.com/webstore/detail/vuejs-devtools/nhdogjmejiglipccpnnnanhbledajbpd?hl=zh-CN)\n\n# 过滤器\n\n概念：Vue.js 允许你自定义过滤器，**可被用作一些常见的文本格式化**。过滤器可以用在两个地方：**mustache 插值和 v-bind 表达式**。过滤器应该被添加在 JavaScript 表达式的尾部，由“管道”符指示；\n\n## 私有过滤器\n\n1. HTML 元素：\n\n```\n<td>{{item.ctime | dataFormat('yyyy-mm-dd')}}</td>\n```\n\n2. 私有 `filters` 定义方式：\n\n```\nfilters: { // 私有局部过滤器，只能在 当前 VM 对象所控制的 View 区域进行使用\n\n    dataFormat(input, pattern = \"\") { // 在参数列表中 通过 pattern=\"\" 来指定形参默认值，防止报错\n\n      var dt = new Date(input);\n\n      // 获取年月日\n\n      var y = dt.getFullYear();\n\n      var m = (dt.getMonth() + 1).toString().padStart(2, '0');\n\n      var d = dt.getDate().toString().padStart(2, '0');\n\n\n\n      // 如果 传递进来的字符串类型，转为小写之后，等于 yyyy-mm-dd，那么就返回 年-月-日\n\n      // 否则，就返回  年-月-日 时：分：秒\n\n      if (pattern.toLowerCase() === 'yyyy-mm-dd') {\n\n        return `${y}-${m}-${d}`;\n\n      } else {\n\n        // 获取时分秒\n\n        var hh = dt.getHours().toString().padStart(2, '0');\n\n        var mm = dt.getMinutes().toString().padStart(2, '0');\n\n        var ss = dt.getSeconds().toString().padStart(2, '0');\n\n\n\n        return `${y}-${m}-${d} ${hh}:${mm}:${ss}`;\n\n      }\n\n    }\n\n  }\n```\n\n> 使用 ES6 中的字符串新方法 String.prototype.padStart(maxLength, fillString='') 或 String.prototype.padEnd(maxLength, fillString='')来填充字符串；\n\n## 全局过滤器\n\n```\n// 定义一个全局过滤器\n\nVue.filter('dataFormat', function (input, pattern = '') {\n\n  var dt = new Date(input);\n\n  // 获取年月日\n\n  var y = dt.getFullYear();\n\n  var m = (dt.getMonth() + 1).toString().padStart(2, '0');\n\n  var d = dt.getDate().toString().padStart(2, '0');\n\n\n\n  // 如果 传递进来的字符串类型，转为小写之后，等于 yyyy-mm-dd，那么就返回 年-月-日\n\n  // 否则，就返回  年-月-日 时：分：秒\n\n  if (pattern.toLowerCase() === 'yyyy-mm-dd') {\n\n    return `${y}-${m}-${d}`;\n\n  } else {\n\n    // 获取时分秒\n\n    var hh = dt.getHours().toString().padStart(2, '0');\n\n    var mm = dt.getMinutes().toString().padStart(2, '0');\n\n    var ss = dt.getSeconds().toString().padStart(2, '0');\n\n\n\n    return `${y}-${m}-${d} ${hh}:${mm}:${ss}`;\n\n  }\n\n});\n```\n\n> 注意：当有局部和全局两个名称相同的过滤器时候，会以就近原则进行调用，即：局部过滤器优先于全局过滤器被调用！\n\n# 键盘修饰符以及自定义键盘修饰符\n\n## 1.x 中自定义键盘修饰符【了解即可】\n\n```\nVue.directive('on').keyCodes.f2 = 113;\n```\n\n## [2.x 中自定义键盘修饰符](https://cn.vuejs.org/v2/guide/events.html#键值修饰符)\n\n1. 通过`Vue.config.keyCodes.名称 = 按键值`来自定义案件修饰符的别名：\n\n```\nVue.config.keyCodes.f2 = 113;\n```\n\n2. 使用自定义的按键修饰符：\n\n```\n<input type=\"text\" v-model=\"name\" @keyup.f2=\"add\">\n```\n\n# [自定义指令](https://cn.vuejs.org/v2/guide/custom-directive.html)\n\n1. 自定义全局和局部的 自定义指令：\n\n```\n    // 自定义全局指令 v-focus，为绑定的元素自动获取焦点：\n\n    Vue.directive('focus', {\n\n      inserted: function (el) { // inserted 表示被绑定元素插入父节点时调用\n\n        el.focus();\n\n      }\n\n    });\n\n\n\n    // 自定义局部指令 v-color 和 v-font-weight，为绑定的元素设置指定的字体颜色 和 字体粗细：\n\n      directives: {\n\n        color: { // 为元素设置指定的字体颜色\n\n          bind(el, binding) {\n\n            el.style.color = binding.value;\n\n          }\n\n        },\n\n        'font-weight': function (el, binding2) { // 自定义指令的简写形式，等同于定义了 bind 和 update 两个钩子函数\n\n          el.style.fontWeight = binding2.value;\n\n        }\n\n      }\n```\n\n2. 自定义指令的使用方式：\n\n```\n<input type=\"text\" v-model=\"searchName\" v-focus v-color=\"'red'\" v-font-weight=\"900\">\n```\n\n# Vue 1.x 中 自定义元素指令【已废弃,了解即可】\n\n```\nVue.elementDirective('red-color', {\n  bind: function () {\n    this.el.style.color = 'red';\n  }\n});\n```\n\n使用方式：\n\n```\n<red-color>1232</red-color>\n```\n\n# 相关文章\n\n1. [vue.js 1.x 文档](https://v1-cn.vuejs.org/)\n2. [vue.js 2.x 文档](https://cn.vuejs.org/)\n3. [String.prototype.padStart(maxLength, fillString)](http://www.css88.com/archives/7715)\n4. [js 里面的键盘事件对应的键码](http://www.cnblogs.com/wuhua1/p/6686237.html)\n5. [Vue.js 双向绑定的实现原理](http://www.cnblogs.com/kidney/p/6052935.html)\n","tags":["Vue笔记"],"categories":["Vue"]},{"title":"nodejs 多人社区登录注册案例","url":"%2F2018%2F10%2F06%2Fnode-blog%2F","content":"\n# 案例效果\n![node-blog](/nodeblog/nodeblog1.png)\n![node-blog](/nodeblog/nodeblog2.png)\n![node-blog](/nodeblog/nodeblog3.png)\n![node-blog](/nodeblog/nodeblog4.png)\n\n# 项目地址\n[node-blog](https://github.com/YHF7/node-blog)\n\n\n# 一、目录结构\n\n1. app.js 入口\n2. controllers\n3. models 数据模型存储(数据库)\n   - user.js 数据库主体\n4. node_modules 第三方包\n5. package.json 包描述文件\n6. package-lock.json 第三方包版本锁定文件（npm 5 以后才有）\n7. public 公共静态资源\n8. README.md 项目说明文件\n9. routes 路由业务分类（如果业务比较多，代码量大，最好把路由按照业务分类存储）\n   - 未使用路由库 单独使用 router.js 简单一点把所有大路由都放在里面\n10. 页面（views 视觉存储目录）\n    - 主页 index.html\n    - 登陆页 login.html\n    - 注册页 register.html\n    - \\_partials 固定页面的存放\n      - 固定底部 footer.html\n      - 固定导航栏 settings-nav.html\n      - 固定头部 header.htms\n    - \\_layouts 模板页存放\n      - 模板布局 home.htmls\n    - settings 个人设置存放\n      - 修改密码 admin.html\n      - 个人简介 profile.html\n    - topic 博客创建与显示\n      - 创建博客 new.html\n      - 显示博客 show.html\n\n# 二、模板页面\n\n- [art-template 子模板](https://aui.github.io/art-template/zh-cn/docs/syntax.html#%E5%AD%90%E6%A8%A1%E6%9D%BF \"子模板\")\n- [art-template 模板继承](https://aui.github.io/art-template/zh-cn/docs/syntax.html#%E6%A8%A1%E6%9D%BF%E7%BB%A7%E6%89%BF \"模板继承\")\n\n# 三、路由设计\n\n| 路径      | 方法 | get 参数 | post 参数                 | 是否需要登陆权限 | 备注         |\n| --------- | ---- | -------- | ------------------------- | ---------------- | ------------ |\n| /         | GET  |          |                           |                  | 渲染首页     |\n| /register | GET  |          |                           |                  | 渲染注册页面 |\n| /register | POST |          | email、nickname、password |                  | 处理注册请求 |\n| /login    | GET  |          |                           |                  | 渲染登录页面 |\n| /login    | POST |          | email、password           |                  | 处理登录请求 |\n| /logout   | GET  |          |                           |                  | 处理退出请求 |\n\n# 四、模型设计\n\n# 五、功能实现\n\n# 六、书写步骤\n\n1. 创建目录结构\n2. 整合静态页面-模板页\n   - include\n   - block\n   - extend\n3. 设计用户登录、退出、注册的路由\n4. 用户注册\n   - 先处理好客户页面的内容（表单控件的 name、收集表单数据、发起请求）\n   - 服务端\n     - 获取客户端表单请求的数据\n     - 操作数据库\n       - 如果有错，发送 500 告诉客户端服务错了\n       - 其他的根据你的业务发送不同的响应数据\n5. 用户登录\n6. 用户退出\n7. 补充配置中间件\n    - 错误处理\n\n# 七、插件安装使用\n\n- 模块\n  - express 前端 web 模块\n  - path 路径核心模块\n  - art-template 模版引擎（express-art-template 的依赖所以必须安装）\n  - express-art-template 模版引擎 (视觉效果模板 子模板 模板继承)\n  - body-parser 中间件(解析表单 post 请求体)\n  - mongoose 数据库链接\n  - bootstrap css 页面开发场景\n  - jquery js 框架\n  - blueimp-md5 密码加密\n  - npm install express-session\n\n## 模块安装与应用\n\n### express 前端开发框架\n\n1. 安装\n\n```bash\n$ npm init -y //添加json初始化文件\n$ npm install express --save//安装express\n```\n\n2. 引包\n\n```JavaScript\nconst express = require('express');\n```\n\n3. 创建服务\n\n```JavaScript\nconst app = express();\n```\n\n4. 使用\n\n```JavaScript\napp.get('/', function (req, res) {\n  req.send('index.html')\n})\n```\n\n## art-template 模版引擎 (配置在 express 中)\n\n### js 使用\n\n1. 安装\n\n```bash\n$ npm install --save art-template//express-art-templat依赖了art-template所以可以不用记载但是要安装\n$ npm install --save express-art-template\n```\n\n2. 配置\n\n```JavaScript\napp.engine('art',require('express-art-template'))//art 可以替换成其他的标示 html 等\n```\n\n3. 使用\n\n```JavaScript\napp.get('/',function (req,res) {\n    // 在 Express 中使用模板引擎有更好的方式：res.render('文件名， {模板对象})\n  // 可以自己尝试去看 art-template 官方文档：如何让 art-template 结合 Express 来使用\n    res.render('index.html',{\n        title: 'hello world'\n    });\n});\n```\n\n4. 如果希望修改默认的 views 视图渲染存储目录， 可以如下修改\n\n```JavaScript\n// 第一个参数 views 不能写错\napp.set('views', 目录路径)\n```\n\n### 视图页面输出 views\n\n1. 安装模版引擎\n   - art-template\n   - express-art-template\n2. 编写布局页面 layout.html\n\n```Html\n<!DOCTYPE html>\n<html lang=\"en\">\n\n<head>\n    <meta charset=\"UTF-8\">\n    <meta name=\"viewport\" content=\"width=device-width, initial-scale=1.0\">\n    <meta http-equiv=\"X-UA-Compatible\" content=\"ie=edge\">\n    <title>Document</title>\n    <link rel=\"stylesheet\" href=\"/node_modules/bootstrap/dist/css/bootstrap.css\">\n    <!-- 留坑给页面添加css样式等链接 -->\n    {{ block 'head' }}{{ /block }}\n</head>\n\n<body>\n    <!-- body-固定头部-头部重用 -->\n    {{ include './header.html' }}\n\n    <!-- body-内容模块-可修改 -->\n    {{ block 'content' }}\n        <h1>默认内容</h1>\n    {{ /block }}\n\n    <!-- body-固定底部-底部重用 -->\n    {{ include './footer.html' }}\n</body>\n<script src=\"../node_modules/jquery/dist/jquery.js\"></script>\n<script src=\"../node_modules/bootstrap/dist/js/bootstrap.js\"></script>\n<!-- 留坑给页面添加js等 -->\n{{ block 'script' }}{{ /block }}\n</html>\n```\n\n3. 调用布局模块 编写页面\n\n```Html\n<!-- 继承布局模块页 -->\n{{extend './layout.html'}}\n\n<!-- 添加css样式-通过坑 head  -->\n{{block 'head'}}\n<style>\n    body {\n        background-color: skyblue;\n    }\n    h1 {\n        color: red;\n    }\n</style>\n{{/block}}\n\n<!-- 修改页面内容 -->\n{{block 'content'}}\n<div>\n    <h1>index.html填坑</h1>\n</div>\n{{/block}}\n\n<!-- 添加js 通过script -->\n{{block 'script'}}\n<script>\n    window.alert('index 页面自己的js 脚本')\n</script>\n{{/block}}\n```\n\n4. 留坑内容\n   - 中带‘’号的内容的自定义的名，最好是取一看就明白的\n   - 坑不止可以留一个，可以留很多个\n\n## body-parser 中间件(解析表单 post 请求体)\n\n1. 安装\n\n```bash\n$ npm install --save body-parser\n```\n\n2. 引包\n\n```JavaScript\nconst bodyParser = require('body-parser');\n```\n\n3. 配置\n\n```JavaScript\n// parse application/x-www-form-urlencoded 解析application\napp.use(bodyParser.urlencoded({ extended: false }));\n// parse application/json 解析\napp.use(bodyParser.json());\n```\n\n4. 使用\n\n```JavaScript\napp.post('/post',function (req,res) {\n    var myDate = new Date();\n    var year = myDate.getFullYear(); //获取完整的年份(4位,1970-????)\n    var month = myDate.getMonth() + 1; //获取当前月份(0-11,0代表1月)\n    var date = myDate.getDate(); //获取当前日(1-31)\n    let comment = req.body;\n    comment.dateTime = year + \"-\" + month + \"-\" + date;\n    comments.unshift(comment);\n    res.redirect('/');\n})\n```\n\n## mongoose （mongodb 数据库链接插件）\n\n1. 安装\n\n```bash\n$ npm i -S mongoose\n```\n\n2. 引包\n\n```JavaScript\nconst mongoose = require('mongoose');\n```\n\n3. 配置\n\n```JavaScript\n// 连接数据库\nmongoose.connect('mongodb://localhost/test');\n```\n\n4. 使用\n\n```JavaScript\n// 创建一个模型\n// 就是在设计数据库\n// MongoDB 是动态的，非常灵活，只需要在代码中设计你的数据库就可以了\n// mongoose 这个包就可以让你的设计编写过程变的非常的简单\nconst Cat = mongoose.model('Cat', {\n    name: String\n});\n\n// 实例化一个 cat\nconst kitty = new Cat({\n    name: 'yhf'\n});\n// 持久化保存 kitty 实例\nkitty.save().then(() => console.log('meow'));\n```\n\n## bootstrap css 样式前端架构\n\n1. 安装 （3 版居多）\n\n```bash\n$ npm install bootstrap@3\n```\n\n2. 使用 （在视图的布局页面引入就好）\n   css： <link rel=\"stylesheet\" href=\"/node_modules/bootstrap/dist/css/bootstrap.css\">\n   js： <script src=\"../node_modules/bootstrap/dist/js/bootstrap.js\"></script>\n\n## jquery js 框架\n\n1. 安装\n\n```bash\n$ npm i jquery\n```\n\n2. 使用 (在视图的布局页面引入就好)\n   <script src=\"../node_modules/jquery/dist/jquery.js\"></script>\n\n## blueimp-md5 密码加密\n\n1. 安装\n\n```bash\n$ npm install blueimp-md5\n```\n\n2. 引包\n\n```JavaScript\nconst md5 = require('blueimp-md5');\n```\n\n3. 调用\n\n```JavaScript\n// md() 在里面填充数据就好 多加几个是多重加密，三个为三重加密\nbody.password = md5(md5(md5(body.password)))\n```\n\n## express-session 数据存储\n\n1. 安装\n\n```bash\n$ npm install express-session\n```\n\n2. 配置\n\n```JavaScript\n// 引包\nconst session = require('express-session')\n\n// 在 Express 这个框架中，默认不支持 Session 和 Cookie\n// 但是我们可以使用第三方中间件：express-session 来解决\n// 1. npm install express-session\n// 2. 配置 (一定要在 app.use(router) 之前)\n// 3. 使用\n//    当把这个插件配置好之后，我们就可以通过 req.session 来发访问和设置 Session 成员了\n//    添加 Session 数据：req.session.foo = 'bar'\n//    访问 Session 数据：req.session.foo\n\napp.use(session({\n    // 配置加密字符串，它会在原有加密基础之上和这个字符串拼起来去加密\n    // 目的是为了增加安全性，防止客户端恶意伪造\n    secret: 'itcast',\n    resave: false,\n    saveUninitialized: false // 无论你是否使用 Session ，我都默认直接给你分配一把钥匙\n}))\n```\n\n3. 使用\n\n```JavaScript\n// 用户存在，登录成功，通过 Session 记录登录状态\nreq.session.user = user;\n\n// 用户退出，退出成功，通过 Session 清除登录状态\nreq.session.user = null;\n```\n","tags":["Nodejs案例"],"categories":["Nodejs"]},{"title":"nodejs 案例2","url":"%2F2018%2F10%2F04%2F2018-10-04%2F","content":"\n# nodejs小案例\n- YHF管理系统 升级优化\n    + 实现增删改查\n    + 模块化\n\n\n# YHF管理系统\n## 效果图\n![YHF管理系统](/yhfgl/yhfgl1.png)\n![YHF管理系统](/yhfgl/yhfgl2.png)\n![YHF管理系统](/yhfgl/yhfgl3.png)\n\n## 起步\n\n- 初始化\n- 模板处理\n- 案例说明\n\n## 路由设计\n\n| 请求方法 |     请求路径     | get 参数 |           post 参数            |       备注       |\n|----------|------------------|----------|--------------------------------|------------------|\n| GET      | /yhf         |          |                                | 渲染首页         |\n| GET      | /yhf/new    |          |                                | 渲染添加系统成员页面 |\n| POST     | /yhf/new     |          | name、age、gender、hobbies、admin     | 处理添加系统成员请求 |\n| GET      | /yhf/edit   | _id       |                                | 渲染编辑页面     |\n| POST     | /yhf/edit    |          | id、name、age、gender、hobbies、admin | 处理编辑请求     |\n| GET      | /yhf/delete | _id       |                                | 处理删除请求     |\n|          |                  |          |                                |                  |\n\n## 案例说明\n- 1.页面的数据\n    + 用 mongdb 装数据\n    + 挂载路由\n    + app.get app.post 路由\n    + app.listen 开启服务端口\n    + node_modules \\ public 页面数据共享\n- 2.页面显示\n    + router.js 和 students.js 控制路由与业务逻辑(模块化)\n    + Express 为 Response 相应对象提供了一个方法：render\n    + render 方法默认是不可以使用，但是如果配置了模板引擎就可以使用了\n    + res.render('html模板名', {模板数据})\n    + 第一个参数不能写路径，默认会去项目中的 views 目录查找该模板文件\n    + 也就是说 Express 有一个约定：开发人员把所有的视图文件都放到 views 目录中\n    + express 模版引擎 express-art-template使用 res.render('文件名， {模板对象})\n- 3.数据传输\n    + body-parser 中间件 解析表单 POST 请求体 req.body 得到数据\n- 4.使用的外部插件\n    + mongoose\n    + express\n    + express-art-template\n    + body-parse\n- 5.项目地址\n    + [项目地址](https://github.com/YHF7/Node/nodejs2/glxt)\n- 6.开发配置\n    + mac os 10.13.3\n    + npm 6.4.1\n    + node 10.10.0\n    + Bootstrap v3\n- 7.案例功能\n    + 添加成员\n    + 更新成员信息\n    + 删除成员\n    + 查看成员\n- 7.案例查看/使用\n    + sudo git clone https://github.com/YHF7/Node.git\n    + cd mypro/nodejs2/glxt\n    + node app.js\n\n\n# 插件安装配置\n## express 前端开发框架\n1.安装\n``` bash\nnpm init -y //添加json初始化文件\nnpm install express --save//安装express\n```\n2.引包\n``` Javascript\nconst express = require('express');\n```\n3.创建服务\n``` Javascript\nconst app = express();\n```\n4.使用\n``` Javascript\napp.get('/', function (req, res) {\n  req.send('index.html')\n})\n```\n## art-template 模版引擎 (配置在express中)\n### 安装使用\n1.安装\n``` bash\nnpm install --save art-template//express-art-templat依赖了art-template所以可以不用记载但是要安装\nnpm install --save express-art-template\n```\n2.配置\n``` Javascript\napp.engine('art',require('express-art-template'))//art 可以替换成其他的标示 html 等\n```\n3.使用\n``` Javascript\napp.get('/',function (req,res) {\n    // 在 Express 中使用模板引擎有更好的方式：res.render('文件名， {模板对象})\n  // 可以自己尝试去看 art-template 官方文档：如何让 art-template 结合 Express 来使用\n    res.render('index.html',{\n        title: 'hello world'\n    });\n});\n```\n4.如果希望修改默认的 views 视图渲染存储目录， 可以如下修改\n``` Javascript\n// 第一个参数 views 不能写错\napp.set('views', 目录路径)\n```\n## body-parser 中间件(解析表单 post 请求体)\n\n1.安装\n``` bash\nnpm install --save body-parse\n```\n2.引包\n``` Javascript\nconst bodyParser = require('body-parser);\n```\n3.配置\n``` Javascript\n// parse application/x-www-form-urlencoded 解析application\napp.use(bodyParser.urlencoded({ extended: false }));\n// parse application/json 解析\napp.use(bodyParser.json());\n```\n4.使用\n``` Javascript\napp.post('/post',function (req,res) {\n    var myDate = new Date();\n    var year = myDate.getFullYear(); //获取完整的年份(4位,1970-????)\n    var month = myDate.getMonth() + 1; //获取当前月份(0-11,0代表1月)\n    var date = myDate.getDate(); //获取当前日(1-31)\n    let comment = req.body;\n    comment.dateTime = year + \"-\" + month + \"-\" + date;\n    comments.unshift(comment);\n    res.redirect('/');\n})\n```\n\n# mongoose （mongodb数据库链接插件）\n1.安装\n``` bash\nnpm i -S mongoose\n```\n2.引包\n``` Javascript\nconst mongoose = require('mongoose');\n```\n3.配置\n// 连接数据库\n``` Javascript\nmongoose.connect('mongodb://localhost/test');\n```\n\n// 创建一个模型\n// 就是在设计数据库\n// MongoDB 是动态的，非常灵活，只需要在代码中设计你的数据库就可以了\n// mongoose 这个包就可以让你的设计编写过程变的非常的简单\n4.使用\n``` Javascript\nconst Cat = mongoose.model('Cat', {\n    name: String\n});\n\n// 实例化一个 cat\nconst kitty = new Cat({\n    name: 'yhf'\n});\n// 持久化保存 kitty 实例\nkitty.save().then(() => console.log('meow'));\n```\n# 数据库安装开启\n\n安装\n``` bash\nsudo brew install mongodb\n```\n\n开启\n``` bash\nsudo mongod\n```\n\n链接(默认链接本地服务)\n``` bash\nmongo\n```\n\n退出\n``` bash\nexit\n```\n\n基本命令:\n``` bash\n1. show dbs 查看显示所以数据库\n2. db 查看当前链接打数据库\n3. use 数据库名称  切换到指定打数据库（如果没有会新建）\n4. 插入数据\n5. show collections 查看数据集合 \n6. db.students.find() 查看库中所以的数据\n```","tags":["Nodejs案例"],"categories":["Nodejs"]},{"title":"nodejs 案例1","url":"%2F2018%2F10%2F02%2F2018-10-02%2F","content":"\n# nodejs小案例\n- 留言页\n    + 实现添加数据\n- 学生管理系统\n    + 实现增删改查\n    + 模块化\n\n# 留言页\n## 效果图\n![发表留言](/nodeimgs/fbly1.png)\n![发表留言](/nodeimgs/fbly2.png)\n\n## 案例说明\n- 1.页面的数据\n    + 未链接数据库所以，用comments数组代替\n    + app.get app.post 路由\n    + app.listen 开启服务端口\n- 2.页面显示\n    + Express 为 Response 相应对象提供了一个方法：render\n    + render 方法默认是不可以使用，但是如果配置了模板引擎就可以使用了\n    + res.render('html模板名', {模板数据})\n    + 第一个参数不能写路径，默认会去项目中的 views 目录查找该模板文件\n    + 也就是说 Express 有一个约定：开发人员把所有的视图文件都放到 views 目录中\n    + express 模版引擎 express-art-template使用 res.render('文件名， {模板对象})\n- 3.数据传输\n    + body-parser 中间件 解析表单 POST 请求体 req.body 得到数据\n- 4.使用的外部插件\n    + express\n    + express-art-template\n    + body-parse\n- 5.项目地址\n    + [项目地址](https://github.com/YHF7/Node/nodejs2/feedback-express)\n- 6.开发配置\n    + mac os 10.13.3\n    + npm 6.4.1\n    + node 10.10.0\n    + Bootstrap v3\n- 7.案例查看/使用\n    + sudo git clone https://github.com/YHF7/Node.git\n    + cd mypro/nodejs2/feedback-express/\n    + node app.js\n- 8.具体功能\n    + 增加数据\n    + 查看数据\n\n\n# 学生管理系统\n## 效果图\n![学生管理系统](/nodeimgs/xsgl1.png)\n![学生管理系统](/nodeimgs/xsgl2.png)\n\n## 起步\n\n- 初始化\n- 模板处理\n- 案例说明\n\n## 路由设计\n\n| 请求方法 |     请求路径     | get 参数 |           post 参数            |       备注       |\n|----------|------------------|----------|--------------------------------|------------------|\n| GET      | /studens         |          |                                | 渲染首页         |\n| GET      | /students/new    |          |                                | 渲染添加学生页面 |\n| POST     | /studens/new     |          | name、age、gender、hobbies     | 处理添加学生请求 |\n| GET      | /students/edit   | id       |                                | 渲染编辑页面     |\n| POST     | /studens/edit    |          | id、name、age、gender、hobbies | 处理编辑请求     |\n| GET      | /students/delete | id       |                                | 处理删除请求     |\n|          |                  |          |                                |                  |\n\n## 案例说明\n- 1.页面的数据\n    + 用 db.json 装数据\n    + 挂载路由\n    + app.get app.post 路由\n    + app.listen 开启服务端口\n    + node_modules \\ public 页面数据共享\n- 2.页面显示\n    + router.js 和 students.js 控制路由与业务逻辑(模块化)\n    + Express 为 Response 相应对象提供了一个方法：render\n    + render 方法默认是不可以使用，但是如果配置了模板引擎就可以使用了\n    + res.render('html模板名', {模板数据})\n    + 第一个参数不能写路径，默认会去项目中的 views 目录查找该模板文件\n    + 也就是说 Express 有一个约定：开发人员把所有的视图文件都放到 views 目录中\n    + express 模版引擎 express-art-template使用 res.render('文件名， {模板对象})\n- 3.数据传输\n    + body-parser 中间件 解析表单 POST 请求体 req.body 得到数据\n- 4.使用的外部插件\n    + express\n    + express-art-template\n    + body-parse\n- 5.项目地址\n    + [项目地址](https://github.com/YHF7/Node/nodejs2/crud-express)\n- 6.开发配置\n    + mac os 10.13.3\n    + npm 6.4.1\n    + node 10.10.0\n    + Bootstrap v3\n- 7.案例查看/使用\n    + sudo git clone https://github.com/YHF7/Node.git\n    + cd mypro/nodejs2/crud-express/\n    + node app.js\n- 8.具体功能\n    + 增加数据\n    + 修改数据\n    + 查看数据\n    + 删除数据\n\n\n# 插件安装配置\n## express 前端开发框架\n1.安装\n``` bash\nnpm init -y //添加json初始化文件\nnpm install express --save//安装express\n```\n2.引包\n``` Javascript\nconst express = require('express');\n```\n3.创建服务\n``` Javascript\nconst app = express();\n```\n4.使用\n``` Javascript\napp.get('/', function (req, res) {\n  req.send('index.html')\n})\n```\n## art-template 模版引擎 (配置在express中)\n### 安装使用\n1.安装\n``` bash\nnpm install --save art-template//express-art-templat依赖了art-template所以可以不用记载但是要安装\nnpm install --save express-art-template\n```\n2.配置\n``` Javascript\napp.engine('art',require('express-art-template'))//art 可以替换成其他的标示 html 等\n```\n3.使用\n``` Javascript\napp.get('/',function (req,res) {\n    // 在 Express 中使用模板引擎有更好的方式：res.render('文件名， {模板对象})\n  // 可以自己尝试去看 art-template 官方文档：如何让 art-template 结合 Express 来使用\n    res.render('index.html',{\n        title: 'hello world'\n    });\n});\n```\n4.如果希望修改默认的 views 视图渲染存储目录， 可以如下修改\n``` Javascript\n// 第一个参数 views 不能写错\napp.set('views', 目录路径)\n```\n## body-parser 中间件(解析表单 post 请求体)\n\n1.安装\n``` bash\nnpm install --save body-parse\n```\n2.引包\n``` Javascript\nconst bodyParser = require('body-parser);\n```\n3.配置\n``` Javascript\n// parse application/x-www-form-urlencoded 解析application\napp.use(bodyParser.urlencoded({ extended: false }));\n// parse application/json 解析\napp.use(bodyParser.json());\n```\n4.使用\n``` Javascript\napp.post('/post',function (req,res) {\n    var myDate = new Date();\n    var year = myDate.getFullYear(); //获取完整的年份(4位,1970-????)\n    var month = myDate.getMonth() + 1; //获取当前月份(0-11,0代表1月)\n    var date = myDate.getDate(); //获取当前日(1-31)\n    let comment = req.body;\n    comment.dateTime = year + \"-\" + month + \"-\" + date;\n    comments.unshift(comment);\n    res.redirect('/');\n})\n```","tags":["Nodejs案例"],"categories":["Nodejs"]},{"title":"nodejs第二套 笔记","url":"%2F2018%2F09%2F29%2Fnodejs2%2F","content":"\n# 一、day1\n## 总结\n- Node.js 是什么\n  + JavaScript 运行时\n  + 既不是语言，也不是框架，它是一个平台\n- Node.js 中的 JavaScript\n  + 没有 BOM、DOM\n  + EcmaScript 基本的 JavaScript 语言部分\n  + 在 Node 中为 JavaScript 提供了一些服务器级别的 API\n    * 文件操作的能力\n    * http 服务的能力\n\n- Node 中的 JavaScript\n  + EcmaScript\n    * 变量\n    * 方法\n    * 数据类型\n    * 内置对象\n    * Array\n    * Object\n    * Date\n    * Math\n  + 模块系统\n    * 在 Node 中没有全局作用域的概念\n    * 在 Node 中，只能通过 require 方法来加载执行多个 JavaScript 脚本文件\n    * require 加载只能是执行其中的代码，文件与文件之间由于是模块作用域，所以不会有污染的问题\n      - 模块完全是封闭的\n      - 外部无法访问内部\n      - 内部也无法访问外部\n    * 模块作用域固然带来了一些好处，可以加载执行多个文件，可以完全避免变量命名冲突污染的问题\n    * 但是某些情况下，模块与模块是需要进行通信的\n    * 在每个模块中，都提供了一个对象：`exports`\n    * 该对象默认是一个空对象\n    * 你要做的就是把需要被外部访问使用的成员手动的挂载到 `exports` 接口对象中\n    * 然后谁来 `require` 这个模块，谁就可以得到模块内部的 `exports` 接口对象\n    * 还有其它的一些规则，具体后面讲，以及如何在项目中去使用这种编程方式，会通过后面的案例来处理\n  + 核心模块\n    * 核心模块是由 Node 提供的一个个的具名的模块，它们都有自己特殊的名称标识，例如\n      - fs 文件操作模块\n      - http 网络服务构建模块\n      - os 操作系统信息模块\n      - path 路径处理模块\n      - 。。。。\n    * 所有核心模块在使用的时候都必须手动的先使用 `require` 方法来加载，然后才可以使用，例如：\n      - `var fs = require('fs')`\n- http\n  + require\n  + 端口号\n    * ip 地址定位计算机\n    * 端口号定位具体的应用程序\n  + Content-Type\n    * 服务器最好把每次响应的数据是什么内容类型都告诉客户端，而且要正确的告诉\n    * 不同的资源对应的 Content-Type 是不一样，具体参照：http://tool.oschina.net/commons\n    * 对于文本类型的数据，最好都加上编码，目的是为了防止中文解析乱码问题\n  + 通过网络发送文件\n    * 发送的并不是文件，本质上来讲发送是文件的内容\n    * 当浏览器收到服务器响应内容之后，就会根据你的 Content-Type 进行对应的解析处理\n\n- 模块系统\n- Node 中的其它的核心模块\n- 做一个小管理系统：\n  + CRUD\n- Express Web 开发框架\n  + `npm install express`\n\n\n# 二、day2\n\n## 代码风格\n\n```javascript\nvar foo = 'bar'\nvar foo ='bar'\nvar foo= 'bar'\nvar foo = \"bar\"\n\nif (true) {\n  console.log('hello') \n}\n\nif (true) {\n    console.log('hello') \n}\n\nif (true ){\n      console.log('hello') \n}\n```\n\n为了约定大家的代码风格，所以在社区中诞生了一些比较规范的代码风格规范：dnsajkndkjsabnjkdnjksandjknsajkdnjkasnjkdnjksandjknsajkdnjksajkdnas\n\n- [JavaScript Standard Style](https://standardjs.com/)\n- Airbnb JavaScript Style\n\n## 总结\n\n- 代码风格\n- 无分号\n  + `(`\n  + `[`\n  + `\n  + 最好前面补分号，避免一些问题\n  + 《编写可维护的 JavaScript》\n  + 不仅是功能，还要写的漂亮\n- 服务端渲染\n  + 说白了就是在服务端使用模板引擎\n  + 模板引擎最早诞生于服务端，后来才发展到了前端\n\n- 服务端渲染和客户端渲染的区别\n  + 客户端渲染不利于 SEO 搜索引擎优化\n  + 服务端渲染是可以被爬虫抓取到的，客户端异步渲染是很难被爬虫抓取到的\n  + 所以你会发现真正的网站既不是纯异步也不是纯服务端渲染出来的\n  + 而是两者结合来做的\n  + 例如京东的商品列表就采用的是服务端渲染，目的了为了 SEO 搜索引擎优化\n  + 而它的商品评论列表为了用户体验，而且也不需要 SEO 优化，所以采用是客户端渲染\n\n\n\n\n\n\n# 三、day3\n\n## 知识点\n\n- 增删改查\n- 登陆\n- 注册\n- 头像\n  + 服务端图片\n  + 水印\n  + 图片水印\n- 找回密码\n- 密码修改\n\n- 模块系统\n  + 核心模块\n  + 第三方模块\n  + 自己写的模块\n  + 加载规则以及加载机制\n  + 循环加载\n- npm\n- package.json\n- Express\n  + 第三方 Web 开发框架\n  + 高度封装了 http 模块\n  + 更加专注于业务，而非底层细节\n  + 知其所以然\n- 增删改查\n  + 使用文件来保存数据（锻炼异步编码）\n- MongoDB\n  + （所有方法都封装好了）\n\n## 复习\n\n- 网站开发模型\n  + 黑盒子、哑巴\n  + 写代码让它变得更智能\n  + 按照你设计好的套路供用户使用\n\n- 在 Node 中使用 art-template 模板引擎\n  + 安装\n  + 加载\n  + template.render()\n- 客户端渲染和服务端渲染的区别\n  + 最少两次请求，发起 ajax 在客户端使用模板引擎渲染\n  + 客户端拿到的就是服务端已经渲染好的\n- 处理留言本案例首页数据列表渲染展示\n- 处理留言本案例发表留言功能\n  + 路径\n  + 设计好的请求路径\n  + $GET 直接或查询字符串数据\n  + Node 中需要咱们自己动手来解析\n    * url.parse()\n  + /pinglun?name=jack&message=hello\n  + split('?')\n  + name=jack&message=hello\n  + split('&')\n  + name=jack message=hello\n  + forEach()\n  + name=jack.split('=')\n  + 0 key\n  + 1 value\n- 掌握如何解析请求路径中的查询字符串\n  + url.parse()\n- 如何在 Node 中实现服务器重定向\n  + header('location')\n    * 301 永久重定向 浏览器会记住\n      - a.com b.com\n      - a 浏览器不会请求 a 了\n      - 直接去跳到 b 了\n    * 302 临时重定向 浏览器不记忆\n      - a.com b.com\n      - a.com 还会请求 a\n      - a 告诉浏览器你往 b\n- Node 中的 Console（REPL）使用\n\n## 上午总结\n\n- jQuery 的 each 和 原生的 JavaScript 方法 forEach\n  + EcmaScript 5 提供的\n    * 不兼容 IE 8\n  + jQuery 的 each 由 jQuery 这个第三方库提供\n    * jQuery 2 以下的版本是兼容 IE 8 的\n    * 它的 each 方法主要用来遍历 jQuery 实例对象（伪数组）\n    * 同时它也可以作为低版本浏览器中 forEach 替代品\n    * jQuery 的实例对象不能使用 forEach 方法，如果想要使用必须转为数组才可以使用\n    * `[].slice.call(jQuery实例对象)`\n- 模块中导出多个成员和导出单个成员\n- 301 和 302 状态码区别\n  + 301 永久重定向，浏览器会记住\n  + 302 临时重定向\n- exports 和 module.exports 的区别\n  + 每个模块中都有一个 module 对象\n  + module 对象中有一个 exports 对象\n  + 我们可以把需要导出的成员都挂载到 module.exports 接口对象中\n  + 也就是：`moudle.exports.xxx = xxx` 的方式\n  + 但是每次都 `moudle.exports.xxx = xxx` 很麻烦，点儿的太多了\n  + 所以 Node 为了你方便，同时在每一个模块中都提供了一个成员叫：`exports`\n  + `exports === module.exports` 结果为  `true`s\n  + 所以对于：`moudle.exports.xxx = xxx` 的方式 完全可以：`expots.xxx = xxx`\n  + 当一个模块需要导出单个成员的时候，这个时候必须使用：`module.exports = xxx` 的方式\n  + 不要使用 `exports = xxx` 不管用\n  + 因为每个模块最终向外 `return` 的是 `module.exports`\n  + 而 `exports` 只是 `module.exports` 的一个引用\n  + 所以即便你为 `exports = xx` 重新赋值，也不会影响 `module.exports`\n  + 但是有一种赋值方式比较特殊：`exports = module.exports` 这个用来重新建立引用关系的\n  + 之所以让大家明白这个道理，是希望可以更灵活的去用它\n- Node 是一个比肩 Java、PHP 的一个平台\n  + JavaScript 既能写前端也能写服务端\n\n```javascript\nmoudle.exports = {\n  a: 123\n}\n\n// 重新建立 exports 和 module.exports 之间的引用关系\nexports = module.exports\n\nexports.foo = 'bar'\n```\n\n```javascript\nArray.prototype.mySlice = function () {\n  var start = 0\n  var end = this.length\n  if (arguments.length === 1) {\n    start = arguments[0]\n  } else if (arguments.length === 2) {\n    start = arguments[0]\n    end = arguments[1]\n  }\n  var tmp = []\n  for (var i = start; i < end; i++) {\n    // fakeArr[0]\n    // fakeArr[1]\n    // fakeArr[2]\n    tmp.push(this[i])\n  }\n  return tmp\n}\n\nvar fakeArr = {\n  0: 'abc',\n  1: 'efg',\n  2: 'haha',\n  length: 3\n}\n\n// 所以你就得到了真正的数组。 \n[].mySlice.call(fakeArr)\n```\n\n## 下午总结\n\n- jQuery 的 each 和 原生的 JavaScript 方法 forEach\n- 301 和 302 的区别\n- 模块中导出单个成员和导出多个成员的方式\n- module.exports 和 exports 的区别\n- require 方法加载规则\n  + 优先从缓存加载\n  + 核心模块\n  + 路径形式的模块\n  + 第三方模块\n    * node_modules\n- package.json 包描述文件\n  + dependencies 选项的作用\n- npm 常用命令\n- Express 基本使用\n\n- 使用 Express 把之前的留言本案例自己动手改造一下\n\n\n# 四、day4\n## 知识点\n\n- Express\n- 基于文件做一套 CRUD\n\n## 复习\n\n- jQuery 的 each 和 原生的 JavaScript 方法 forEach\n- 301 和 302 的区别\n- 模块中导出单个成员和导出多个成员的方式\n  + `module.exports = xxx`\n  + 通过多次：`exports.xxx = xxx`\n  + 导出多个也可以：`moudle.exports = {多个成员}`\n- module.exports 和 exports 的区别\n  + exports 只是 module.exports 的一个引用而已，目的只是为了简化写法\n  + 每个模块最终 return 的是 module.exports\n- require 方法加载规则\n  + 优先从缓存加载\n  + 核心模块\n  + 路径形式的模块\n    * `./xxx`\n    * `../xxxx`\n    * `/xxxx` / 在这里表示的是磁盘根路径\n    * `c:/xxx`\n  + 第三方模块\n    * 第三方模块的标识就是第三方模块的名称（不可能有第三方模块和核心模块的名字一致）\n    * npm\n      - 开发人员可以把写好的框架、库发布到 npm 上\n      - 使用者在使用的时候就可以很方便的通过 npm 来下载\n    * 使用方式：`var 名字 = require('npm install 的那个包名')`\n    * node_modules\n    * node_modules/express\n    * node_modules/express/package.json\n    * node_modules/express/package.json main\n    * 如果 package.json 或者 package.json main 不成立，则查找备选项：index.js\n    * 如果以上条件都不成立，则继续进入上一级目录中的 node_modules 按照上面的规则继续查找\n    * 如果直到当前文件模块所属磁盘根目录都找不到，最后报错：`can not find module xxx`\n- package.json 包描述文件\n  + 就是产品的说明书\n  + `dependencies` 属性，用来保存项目的第三方包依赖项信息\n  + 所以建议每个项目都要有且只有一个 package.json (存放在项目的根目录)\n  + 我们可以通过 `npm init [--yes]` 来生成 package.json 文件\n  + 同样的，为了保存依赖项信息，我们每次安装第三方包的时候都要加上：`--save` 选项。\n- npm 常用命令\n  + install\n  + uninstall\n- Express 基本使用\n- 使用 Express 把之前的留言本案例自己动手改造一下\n\n### 模块标识中的 `/` 和文件操作路径中的 `/`\n\n## 上午总结\n\n### 演讲\n\n> 说服\n> PPT\n> 脑图\n> markdown\n> 结构思维\n\n- 找痛点 why 为什么\n- 解决方案 what 是什么\n- 怎么去使用 how 怎么用\n- where 在哪儿用\n- when  什么时候用\n\n- 文件路径中的 `/` 和模块标识中的 `/`\n- nodemon\n- Express\n  + art-template 模板引擎的配置\n  + body-parser 解析表单 POST 请求体\n- 技术只是一种解决问题的手段、工具而已\n  + 第三方的东西，不要纠结\n  + 先以解决问题为主\n- 详解了 express 静态服务 API\n  + app.use('/public/', express.static('./public'))\n- crud\n\n## 下午总结\n\n## 目标\n\n- 文件路径中的 `/` 和模块标识中的 `/`\n- Express 中配置使用 art-template 模板引擎\n- Express 中配置使用 body-parser\n- Express 中配置处理静态资源\n- CRUD 案例中单独提取路由模块\n\n# 五、day5\n\n## 知识点\n\n- Express\n- MongoDB\n- 项目\n  + 一天半的时间\n\n## 复习\n\n- 文件路径中的 `/` 和模块标识中的 `/`\n- Express 中配置使用 art-template 模板引擎\n- Express 中配置使用 body-parser\n- Express 中配置处理静态资源\n- CRUD 案例中单独提取路由模块\n\n## 上午总结\n\n- 回调函数\n  + 异步编程\n  + 如果需要得到一个函数内部异步操作的结果，这是时候必须通过回调函数来获取\n  + 在调用的位置传递一个函数进来\n  + 在封装的函数内部调用传递进来的函数\n- find、findIndex、forEach\n  + 数组的遍历方法，都是对函数作为参数一种运用\n    + every\n  + some\n  + includes\n  + map\n  + reduce\n- package-lock.json 文件的作用\n  + 下载速度快了\n  + 锁定版本\n- JavaScript 模块化\n  + Node 中的 CommonJS\n  + 浏览器中的\n    * AMD require.js\n    * CMD sea.js\n  + EcmaScript 官方在 EcmaScript 6 中增加了官方支持\n  + EcmaScript 6\n  + 后面我们会学，编译工具\n- MongoDB 数据库\n  + MongoDB 的数据存储结构\n    * 数据库\n    * 集合（表）\n    * 文档（表记录）\n- MongoDB 官方有一个 mongodb 的包可以用来操作 MongoDB 数据库\n  + 这个确实和强大，但是比较原始，麻烦，所以咱们不使用它\n- mongoose\n  + 真正在公司进行开发，使用的是 mongoose 这个第三方包\n  + 它是基于 MongoDB 官方的 mongodb 包进一步做了封装\n  + 可以提高开发效率\n  + 让你操作 MongoDB 数据库更方便\n- 掌握使用 mongoose 对数据集合进行基本的 CRUD\n- 把之前的 crud 案例改为了 MongoDB 数据库版本\n- 使用 Node 操作 mysql 数据库\n\n# 六、day6\n# Node.js 第6天课堂笔记\n\n## 知识点\n\n- 多人社区案例\n\n## 复习\n\n- MongoDB 数据库\n  + 灵活\n  + 不用设计数据表\n  + 业务的改动不需要关心数据表结构\n  + DBA 架构师 级别的工程师都需要掌握这项技能\n    * 设计\n    * 维护\n    * 分布式计算\n- mongoose\n  + mongodb 官方包也可以操作 MongoDB 数据库\n  + 第三方包：WordPress 项目开发团队\n  + 设计 Schema\n  + 发布 Model（得到模型构造函数）\n    * 查询\n    * 增加\n    * 修改\n    * 删除\n- Promise\n  + http://es6.ruanyifeng.com/#docs/promise\n  + callback hell 回调地狱\n  + 回调函数中套了回调函数\n  + Promise(EcmaScript 6 中新增了一个语法 API)\n  + 容器\n    * 异步任务（pending）\n    * resolve\n    * reject\n  + then 方法获取容器的结果（成功的，失败的）\n  + then 方法支持链式调用\n  + 可以在 then 方法中返回一个 promise 对象，然后在后面的 then 方法中获取上一个 then 返回的 promise 对象的状态结果\n\n## 总结\n\n- path 模块\n- __dirname 和 __filename\n  + **动态的** 获取当前文件或者文件所处目录的绝对路径\n  + 用来解决文件操作路劲的相对路径问题\n  + 因为在文件操作中，相对路径相对于执行 `node` 命令所处的目录\n  + 所以为了尽量避免这个问题，都建议文件操作的相对路劲都转为：**动态的绝对路径**\n  + 方式：`path.join(__dirname, '文件名')`\n- art-template 模板引擎(include、block、extend)\n  + include\n  + extend\n  + block\n- 表单同步提交和异步提交区别\n  + 以前没有 ajax 都是这么干的，甚至有些直接就是渲染了提示信息出来了\n  + 异步提交页面不会刷新，交互方式更灵活\n- Express 中配置使用 express-session 插件\n- 概述案例中注册-登陆-退出的前后端交互实现流程\n\n","tags":["Nodejs笔记"],"categories":["Nodejs"]},{"title":"nodejs day5","url":"%2F2018%2F09%2F28%2Fnodejs(day5)%2F","content":"\n# 今日授课内容\n\n1. Buffer 类型介绍\n2. express 介绍\n\n- express 介绍\n- express 实现 hello world\n- express 脚手架\n- express 简单路由\n- express 正则表达式路由\n  - /^\\/index(\\/.+)?$/\n- express 处理静态资源\n- express 中的 res.send() 和 res.end() 区别\n- res.json()等价于 res.send(json)、res.sendFile()、res.redirect()、res.status(code).end()\n- app.use()、app.get()、app.all()区别\n- 中间件介绍\n\n3. ejs 模板引擎介绍\n\n# 一、Buffer\n\n思考：Buffer 类型产生的原因？主要用来解决什么问题？\n\n看一下什么是 Buffer? 什么是 Stream?\n\n## 一、类型介绍\n\n1. JavaScript 语言没有读取或操作二进制数据流的机制。\n2. Node.js 中引入了 Buffer 类型使我们可以操作 TCP 流 或 文件流。\n3. Buffer 类型的对象类似于整数数组，但 Buffer 的大小是固定的、且在 V8 堆外分配物理内存。 Buffer 的大小在被创建时确定，且无法调整。（ buf.length 是固定的，不允许修改 ）\n4. Buffer 是全局的，所以使用的时候无需 require() 的方式来加载\n\n## 二、如何创建一个 Buffer 对象\n\n常见的 API 介绍\n\n### 1. 创建一个 Buffer 对象\n\n```javascript\n// 1. 通过 Buffer.from() 创建一个 Buffer 对象\n\n// 1.1 通过一个字节数组来创建一个 Buffer 对象\nvar array = [\n  0x68,\n  0x65,\n  0x6c,\n  0x6c,\n  0x6f,\n  0x20,\n  0xe4,\n  0xb8,\n  0x96,\n  0xe7,\n  0x95,\n  0x8c\n];\nvar buf = Buffer.from(array);\nconsole.log(buf.toString(\"utf8\"));\n\n// 1.2 通过字符串来创建一个 Buffer 对象\n// Buffer.from(string[, encoding])\nvar buf = Buffer.from(\"你好世界！ Hello World!~\");\nconsole.log(buf);\nconsole.log(buf.toString());\n```\n\n### 2. 拼接多个 Buffer 对象为一个对象\n\n```javascript\n// Buffer.concat(list[, totalLength])\nvar bufferList = [];\nvar buf = Buffer.concat(bufferList);\n```\n\n### 3. 获取字符串对应的字节个数\n\n```javascript\n// Buffer.byteLength(string[, encoding])\n\nvar len = Buffer.byteLength(\"你好世界Hello\", \"utf8\");\nconsole.log(len);\n```\n\n### 4. 判断一个对象是否是 Buffer 类型对象\n\n```javascript\n// Buffer.isBuffer(obj)\n// obj <Object>\n// Returns: <boolean>\n// Returns true if obj is a Buffer, false otherwise.\n```\n\n### 5. 获取 Buffer 中的某个字节\n\n```javascript\n// 根据索引获取 Buffer 中的某个字节（byte、octet）\n// buf[index]\n```\n\n### 6、获取 Buffer 对象中的字节的个数\n\n```javascript\n// buf.length\n// 注意：length 属性不可修改\n```\n\n### 7. 已过时的 API\n\n```javascript\n// 以下 API 已全部过时\nnew Buffer(array)\nnew Buffer(buffer)\nnew Buffer(arrayBuffer[, byteOffset [, length]])\nnew Buffer(size)\nnew Buffer(string[, encoding])\n```\n\n## 三、Buffer 对象与编码\n\nNode.js 目前支持的编码如下：\n\n1. ascii\n2. utf8\n3. utf16le\n\n- ucs2 是 utf16le 的别名\n\n4. base64\n5. latin1\n\n- binary 是 latin1 的别名\n\n6. hex\n\n- 用两位 16 进制来表示每个字节\n\n示例代码：\n\n```javascript\nvar buf = Buffer.from(\"你好世界，Hello World！\", \"utf8\");\n\nconsole.log(buf.toString(\"hex\"));\nconsole.log(buf.toString(\"base64\"));\nconsole.log(buf.toString(\"utf8\"));\n```\n\n## 四、思考：为什么会有 Buffer 类型？\n\n1. Buffer 使用来临时存储一些数据（二进制数据）\n2. 当我们要把一大块数据从一个地方传输到另外一个地方的时候可以通过 Buffer 对象进行传输\n3. 通过 Buffer 每次可以传输小部分数据，直到所有数据都传输完毕。\n\n## 五、补充\n\n1. Stream\n\n2. Writable Stream\n\n- 允许 node.js 写数据到流中\n\n3. Readable Stream\n\n- 允许 node.js 从流中读取数据\n\n# 二、express 介绍\n\n- 什么是 express ？\n\n  - 基于 Node.js 平台开发的 \"web 开发框架\" ，就是一个 node.js 模块\n  - express 的作用：它提供一系列强大的特性，帮助你创建各种 Web 和移动设备应用。\n  - express 同时也是 Node.js 的一个模块\n\n- 为什么学习 express 框架？\n  - 为了让我们基于 Node.js 开发 web 应用程序更高效。\n\n* express 官方网站\n\n  - http://expressjs.com/\n  - http://www.expressjs.com.cn/\n\n* express 网站如何查阅？\n  - 带领同学们一起看一下\n\n## express 特点\n\n1. 实现了路由功能\n2. 中间件（函数）功能\n3. 对 req 和 res 对象的扩展\n4. 可以集成其他模板引擎\n\n## express 基本使用\n\n- 安装 express\n\n  - npm 搜索，安装。按照文档一步一步进行\n    1. 创建 package.json 文件\n    2. 安装 express 模块：`npm install express --save`\n\n- 演示 Hello World 案例\n\n  - 在 express 中，request 对象 和 response 对象一样使用，同时这两个对象还额外添加了其他的好用功能\n  - res.send() 是 res.end()的扩展\n  - 步骤总结：\n    1、加载 express 模块\n    2、创建 express 实例（一般叫 app ）\n    3、设计路由\n    4、启动监听服务\n\n- 补充知识：\n  - 路由：请求路径（URL） + 请求方法（post、get、......）\n  - http 请求方法介绍：https://en.wikipedia.org/wiki/Hypertext_Transfer_Protocol#Request_methods\n\n* 使用 express 框架模拟 Apache 服务器处理静态资源\n\n  - 主要使用到的方法`express.static('public')`\n\n    - `express.static('public')`的返回值就是一个函数，这个函数的作用就是根据请求，读取静态资源文件并响应给用户\n    - 注意：static() 方法参数路径要写 绝对路径，不要写相对路径。相对路径还是相对执行 node 命令的路径\n\n  - 主要使用到的方法 `app.use()`\n\n    - use()方法的参数 1 表示\"虚拟路径\"，参数 2 表示要开放的静态资源目录\n\n  - 如何向客户端发送单个静态文件\n\n    - res.sendFile() 方法\n\n  - 托管静态资源时的两个注意点：\n\n  ```javascript\n  // 问题一(提问、演示)、\n  app.use(express.static(\"./public\"));\n  app.use(express.static(\"./file\"));\n\n  // 问题二(提问、演示)、\n  app.use(\"/aaa\", express.static(\"./public\"));\n  app.use(\"/bbb\", express.static(\"./public\"));\n  ```\n\n## 带同学们看一下 express 文档中关于各种设置路由的方法\n\n## 介绍一下 express 中的中间件\n\n- 中间件（Middleware） 是一个函数，它可以访问请求对象（request object (req)）, 响应对象（response object (res)）, 和 web 应用中处于请求-响应循环流程中的中间件，一般被命名为 next 的变量。\n\n- 常规中间件（应用级中间件）的回调函数，一般有 3 个参数\n\n  - req, res, next\n  - 其中 next()是一个函数，通过这个函数把执行流程交给下一个中间件\n\n- 可以挂在中间件的部分方法\n\n  - app.use()\n  - app.get()、app.post()、app.put()、app.delete()、...等各种请求方法\n  - 注意：在挂载中间件时 next() 方法的重要性，不调用该方法无法执行到下一个中间件\n\n- 中间件的应用场景\n  - 利用中间件实现记录日志功能\n  - 利用中间件模拟 body-parser 功能\n\n## 介绍在 express 中如何使用模板引擎\n\n- 在 express 中, res 对象是具有 redner 方法的，但是需要自己配置一个模板引擎\n- 在 express 中渲染单个文件，使用 res.sendFile\n- res.render()要在设置好模板引擎后再使用\n\n## ejs 模板引擎介绍\n\n- 打开 npm 搜索 ejs\n- 打开 GitHub 的 ejs 地址，查看如何使用\n- ejs 模板引擎介绍\n- ejs 使用\n  - ejs.render(str, data, options);\n\n## 在 express 中配置使用 ejs 模板引擎\n\n- npm install ejs --save\n- 通过 app.set('views', '路径'); 和 app.set('view engine', '模板引擎名称');来配置模板引擎\n- 配置好后就可以通过 res.render('a.ejs', {})来渲染模板了\n\n## express 中的 request 对象的成员：\n\nhttp://www.expressjs.com.cn/4x/api.html#req\n\n## express 中的 response 对象的成员：\n\nhttp://www.expressjs.com.cn/4x/api.html#res\n\n## express 中的 '中间件' 含义。\n\n## 模板引擎后缀替换\n\n- app.engine('.ejs', require('ejs').renderFile)\n- app.set('view engine', 'ejs')\n\n## 通过使用 express 框架改造 Hacker News 网站\n\n- 把 resources、views、list.json 拷贝到该目录下，其他暂时不需要了\n- 创建 app.js\n- 创建 package.json\n- 安装 express\n- 提取 router.js 模块\n- 拷贝 handler.js 模块\n- handler.js 模块中获取 post 提交数据时，可以使用 body-parser 模块实现\n  - npm 安装 body-parser\n  - 在 express 中通过 app.use()挂载 body-parser 中间件，实现效果\n- 在 express 中无需 url 模块，直接可以通过 req.query 获取查询字符串对象\n\n# 三、其他\n\n1、ejs 模板引擎\n\n- ejs 模板引擎介绍\n- 打开 npm 搜索 ejs\n- 打开 GitHub 的 ejs 地址，查看如何使用\n- 演示 ejs 模板引擎的使用\n\n2、介绍在 express 中如何使用模板引擎\n\n- 在 express 中, res 对象是具有 redner 方法的，但是需要自己配置一个模板引擎\n- 在 express 中渲染单个文件，使用 res.sendFile\n- res.render()要在设置好模板引擎后再使用\n- npm install ejs --save\n- 通过 app.set('views', '路径'); 和 app.set('view engine', '模板引擎名称');来配置模板引擎\n- 配置好后就可以通过 res.render('a.ejs', {})来渲染模板了\n\n3、模板引擎后缀替换、\n\n- 设置后缀为 .ejs\n\n  - app.engine('.ejs', require('ejs').renderFile)\n  - app.set('view engine', 'ejs')\n\n- 设置后缀为 .html\n  - app.engine('.html', require('ejs').renderFile)\n  - app.set('view engine', 'html')\n  - 参考链接：https://cnodejs.org/topic/530318fa5366a72a2c070a5d\n  - http://www.cnblogs.com/dubaokun/p/3446206.html\n  - http://www.expressjs.com.cn/4x/api.html#app.engine\n\n4、完成 hacker news 网站使用 express 改造\n\n5、body-parser 使用\n\n- npm install\n- 在模块中 require('body-parser')\n- 在 express 中配置\n\n```javascript\n// parse application/x-www-form-urlencoded\napp.use(bodyParser.urlencoded({ extended: false }));\n\n// parse application/json\napp.use(bodyParser.json());\n```\n\n    1. res.send() 方法\n    - 参数可以是字符串、Buffer对象、数组（json对象）、普通对象\n    - 通过调用该方法进行响应的时候，会自动添加一些响应头(Content-Type、Content-Length等)\n","tags":["Nodejs笔记"],"categories":["Nodejs"]},{"title":"nodejs day4","url":"%2F2018%2F09%2F27%2Fnodejs(day4)%2F","content":"\n# 今日授课内容\n1. 复习 hackernews 实现\n2. 模块化改造 Hacker News 思路(5个模块)\n3. 项目地址:https://github.com/YHF7/HeackerNews\n\n\n\n# HackerNews 代码模块化\n## 提取模块\n1. app.js 模块\n  - 职责\n    1. 创建并启动 http 服务\n\n2. context.js 模块\n  - 职责\n    1. 在 http request 事件正式开始前，先为 request 对象 和 response 对象挂载需要的成员\n    2. 在正式开始处理请求前的准备工作\n\n3. router.js 模块\n  - 职责\n    1. 判断用户请求路径，根据不同路径调用不同的处理方法\n\n  - 其他\n    + 该模块返回一个函数，把req 和 res对象作为该函数的参数\n    + 路由一般包含两部分：1、URL路径； 2、请求方法：get 、 post 等\n\n4. config.js模块\n  - 职责：对于可能变化的地方，比如路径，单独配置起来。\n    + 服务监听的端口号\n    + viewPath路径\n    + data保存的路径等\n    + config.js模块一般放到项目根目录下，和app.js在同一级目录\n\n5. handler.js模块\n  - 职责：用来封装处理业务逻辑的代码\n    + 把router.js模块中对于不同请求的处理代码封装到不同的函数（方法）中\n    + 处理不同请求封装成不同的方法","tags":["Nodejs笔记"],"categories":["Nodejs"]},{"title":"nodejs day3","url":"%2F2018%2F09%2F26%2Fnodejs(day3)%2F","content":"\n# 复习\n\n1. try-catch 捕获异常\n2. 根据用户不同请求，读取不同HTML文件并返回（带图片、带CSS）\n3. 模拟Apache服务器，处理静态资源请求\n4. 用户请求的 url 对于服务器来说就是一个标识\n5. request对象 和 response 对象\n6. npm 安装和使用\n7. modules 和 packages区别\n8. package.json 文件作用\n9. package-lock.json 文件作用\n10. 服务器端如何获取用户 get 提交的数据\n11. 服务器端如何做重定向操作\n12. \"路由\" 由哪两部分组成？\n\n\n# 今日课程\n\n## 授课顺序\n\n1. 完成 get 方式添加新闻、post 方式添加新闻\n2. 完成新闻列表页渲染\n3. 完成新闻详情页渲染\n4. 封装读取 data.json 文件代码\n5. 封装写入 data.json 文件的代码\n6. 封装读取 post 数据的代码\n9. require() 加载模块机制\n  - 加载过程\n  - 执行原理\n11. node.js 模块化介绍\n13. module、module.exports和exports\n\n\n7. 通过设置响应报文头让浏览器实现弹框下载功能\n8. 网页中的 ./ 和 ../ 等相对路径的含义\n  + 相对于请求当前页面的url来计算，根据这个url计算出上一级url或者本级url等\n  + 最终浏览器会根据相对url（相对路径）计算出绝对路径然后再请求服务器（向服务器发起请求）\n10. Buffer 类型介绍\n12. 通过模块化的方式改造 Hacker News\n\n\n## 知识点\n\n1. node.js 模块化介绍\n2. require() 加载模块机制\n3. get 和 post 请求区别\n4. url 模块使用\n5. querystring 模块使用\n6. underscore 模块使用\n7. node.js 中如何获取 get 请求提交的数据\n8. node.js 中如何获取 post 请求提交的数据\n9. module、module.exports、exports\n10. [前端资源库](https://www.awesomes.cn/)\n\n\n\n课程总结：\n1. 通过 url 模块获取get 提交的数据\n2. 通过监听req 对象的 data 事件和 end 事件，配合 querystring模块获取用户 post 提交的数据\n3. underscore 的 template方法使用\n4. require() 加载机制\n5. module、module.exports 和 exports\n6. 封装 异步回调的方法\n7. node.js 模块的分类\n\n\n\n# node.js 模块\n\n在 node.js 开发中一个文件就可以认为是一个模块。\n\n\n## 一、node.js 模块分类\n\n### 核心模块 Core Module、内置模块、原生模块\n- fs\n- http\n- path\n- url\n- ...\n\n所有内置模块在安装node.js的时候就已经编译成 二进制文件，可以直接加载运行（速度较快）\n部分内置模块，在 node.exe 这个进程启动的时候就已经默认加载了，所以可以直接使用。\n\n\n\n\n\n### 文件模块\n#### 按文件后缀来分\n如果加载时，没有指定后缀名，那么就按照如下顺序依次加载相应模块\n1. .js\n2. .json\n3. .node（C/C++编写的模块）\n\n<!-- require('./a.node') -->\n\n\n\n\n### 自定义模块（第三方模块）\n- mime\n- cheerio\n- moment\n- mongo\n- ...\n\n\n\n\n## 二、require 加载模块顺序\n\n1. 看 require() 加载模块时传入的参数是否以 './' 或 '../' 或 '/' 等等这样的路径方式开头（相对路径或绝对路径都可以）\n\n2. 是，那么会按照传入的路径直接去查询对应的模块。\n- 传入的是否为具体的文件名\n  + require('./test.js') 是具体的文件名\n    * 直接根据给定的路径去加载模块，找到了加载成功，找不到加载失败\n\n  + require('./test'); 不是具体的文件名、\n    * 第一步：根据给定的路径，依次添加文件后缀 .js、.json、.node进行匹配，如果找不到匹配执行第二步\n    * 第二步：查找是否有 test 目录（尝试找 test 包）\n      - 找不到：加载失败\n      - 找到了：依次在 test 目录下查找 package.json 文件（找到该文件后尝试找 main 字段中的入口文件）、index.js、index.json、index.node，找不到则加载失败\n\n3. 不是，那么就认为传入的是 \"模块名称\"（比如：require('http')、require('mime')）\n- 是核心模块：直接加载核心模块\n- 不是核心模块\n  + 依次递归查找 node_modules 目录中是否有相应的包\n    - 从当前目录开始，依次递归查找所有父目录下的 node_modules 目录中是否包含相应的包\n    - 如果查找完毕磁盘根目录依然没有则加载失败\n    - 打印输入 module.paths 查看\n\n\n```javascript\n// require('http')\n// require('mime')\n\n\n// 情况一：require() 的参数是一个路径\nrequire('./index2.js')\n\n// index2.js\n// index2.json\n// index2.node\n// index2 文件夹 -> package.json -> main(入口文件 app.js -> index.js/index.json/index.node) -> 加载失败\nrequire('ndex2')\n\n// 情况二： require() 的参数不是路径，直接就是一个模块名称\n// 1. 先在核心模块中查找，是否有和给定的名字一样的模块。如果有，则直接加载该核心模块。\n// require('http')\n\n// 2. 如果核心模块中没有该模块那么就会认为这个模块是一个第三方模块（自定义模块）\n// 先会去当前js文件所在的目录下去找是否一个一个 node_modules 文件夹\n// require('mime')\n```\n\n\n\n### require 加载模块注意点\n1. 所有模块第一次加载完毕后都会有 缓存，二次加载直接读取缓存，避免了二次开销\n  - 因为有                                                                                                                                                                                                                                                                                                                      缓存，所以模块中的代码只在第一次加载的时候执行一次\n\n2. 每次加载模块的时候都优先从缓存中加载，缓存中没有的情况下才会按照 node.js 加载模块的规则去查找\n\n3. 核心模块在 Node.js 源码编译的时候，都已经编译为二进制执行文件，所以加载速度较快（核心模块加载的优先级仅次于 缓存加载）\n4. 核心模块都保存在 lib 目录下\n5. 试图加载一个和 核心模块 同名的 自定义模块（第三方模块）是不会成功的\n  + 自定义模块要么名字不要与核心模块同名\n  + 要么使用路径的方式加载\n  \n6. 核心模块 只能通过 模块名称 来加载（错误示例：require('./http'); 这样是无法加载 核心模块 http的 ）\n7. require() 加载模块使用 ./ 相对路径时，相对路径是相对当前模块，不受执行 node 命令的路径影响\n8. 建议加载文件模块的时候始终添加文件后缀名，不要省略。\n\n\n\n\n## 三、补充 CommonJS 规范\n1. [CommonJS 规范](http://www.commonjs.org/)\n2. [模块的定义](http://www.commonjs.org/specs/modules/1.0/)\n3. 总结：CommonJS 是为 JavaScript 语言制定的一种 模块规范、编程 API规范\n4. node.js 遵循了 CommonJS规范\n\n\n\n\n## 关于 node.js 中 Module 详细介绍\n- [Module](https://nodejs.org/dist/latest-v6.x/docs/api/modules.html)\n\n\n\n\n# 自己设计路由实现 Hacker News 网站部分功能\n\n参考网址：https://news.ycombinator.com/\n\n\n\n\n## 步骤\n1. 实现新闻列表页 - 首页 - index\n2. 实现新闻详情页 - 详情页 - details\n3. 实现新闻添加页 - 提交页 - submit\n4. 实现保存数据功能 - 将数据写入到 .json 文件中\n5. 实现首页数据的动态加载 - 根据.json文件来加载数据\n\n\n\n\n## 实现思路\n\n### 规划项目目录结构\n\n- HackerNews\n  + resources\n    - css\n    - images\n  + views（存放html模板页面）\n  + data（保存新闻数据 data.json 文件）\n  + app.js 文件（该文件即我们写服务器端JavaScript代码的地方，用来处理用户请求）\n  + package.json\n\n\n### 路由设计\n\n1. 注意：此处要自己设计路由，而不是像模拟 Apache 静态资源服务器一样\n\n\n#### 根据不同的请求返回相应的功能\n1. 当请求 `/` 和 `/index` 时，返回 `views/index.html` 文件内容\n2. 当请求 `/details` 时，返回 `views/details.html` 文件内容\n3. 当请求 `/submit` 时，返回 `views/submit.html` 文件内容\n4. 当请求 `/r` 时，保存用户提交的新闻数据，并将重定向到index页面。\n5. 对于其他以'/resources'开头的都当做静态资源来处理。\n\n\n\n### 知识点\n1. 封装`render()`函数，将`render()`函数挂载到`response`对象上，实现`response.render()`效果。\n2. 使用`underscore`模块中的模板引擎功能，渲染`index`页面中的新闻数据。\n3. 通过 url 模块来处理 get 请求\n\n```javascript\n// 1. 将 req.url 通过 url 模块来处理\n  var urlObj = url.parse(req.url, true);\n\n  // 1.1 获取用户请求的URL，不带查询字符串\n  // 注意：此时的reqUrl中不包含 get 的请求参数，只是pathname\n  var reqUrl = urlObj.pathname.toLowerCase();\n\n  // urlObj.query\n\n```\n4. 服务器端接收 post 提交过来的数据\n5. 通过 querystring 模块将查询字符串转换为 json 对象\n \n\n\n## JSON在线格式化\n[JSON在线格式化](http://tool.oschina.net/codeformat/json)\n\n\n\n# url模块介绍 \n\n1. 当服务器处理 get 请求时，用户请求的参数是在 request 的 url 属性中，纯字符串，使用起来并不方便\n2. url 模块可以更方便地解析用户 get 请求提交上来的参数\n\n\n\n\n## 具体使用\n\n1. 加载模块 `var url = require('url');`\n2. 调用`parse()`方法解析\n\n```javascript\n\nurl.parse(urlString[, parseQueryString[, slashesDenoteHost]]);\nvar urlObj = url.parse(reqUrl, true);\n\n// url对象的pathname属性，获取不包含查询字符串的url\n// url对象的query属性中包含的就是请求字符串的键值对对象\n```\n\n\n\n# 模块化\n\n\n\n## 什么是模块？\n- 每个.js文件就是一个模块\n- 从npm上下载的一个包（可能是由多个文件组成的一个实现特定功能的包）也是一个模块\n- 任何文件或目录只要可以被Node.js通过`require()`函数加载的都是模块\n- 每个模块就是一个独立的作用域，模块和模块之间不会互相\"污染\"\n- 我们可以通过编程的方式，指定某个模块要对外暴露的内容（其实就是指定require的返回值，通过require的返回值对外暴露指定内容）。这个对外暴露内容的过程也叫\"导出\" `module.exports`\n\n\n\n\n\n## 为什么要进行模块化\n- 方便代码管理、项目维护\n- 有助于分工协同开发\n- 模块和模块之间不会出现变量\"污染\"，一个模块就是一个作用域。\n- 模块化可以做到职责分离，每个模块实现一个独立的功能\n\n补充：面向对象编程的5（6）大原则：\n- 开放封闭原则\n- 里氏替换原则\n- 依赖倒置原则\n- 单一职责原则\n- 接口隔离原则\n\n\n\n## 什么是包？\n- 通过package.json描述的一个文件或目录（可以理解成一个实现某个功能的1个文件或多个文件，通过package.json组织起来）\n- 包不一定能被Node.js通过`require()`来加载，那么就不就叫模块。比如有些包中没有设置启动文件（package.json中的main字段），就不是模块。\n- [package 和 module 参考链接](https://docs.npmjs.com/how-npm-works/packages)\n\n\n\n\n\n## 在Node.js中模主要分为：核心模块 和 文件模块\n\n### 核心模块\n- http、fs、path、url、net、os、readline、......\n- 核心模块在Node.js自身源码编译时，已经编译成二进制文件\n- 部分核心模块在Node.js进程启动的时候已经默认加载到缓存里面了\n\n\n### 文件模块(包含独立文件模块和第三方模块)\n- 文件模块可以是：*.js 模块、*.node模块、*.json模块，这些都是文件模块\n- 无论从npm上下载的第三方模块还是我们自己编写的模块都是文件模块\n\n\n\n\n\n\n\n## module.exports 和 exports\n\n### 在每个模块中module表示当前模块对象, 里面保存了当前模块对象的各种信息\n### module.exports 其实就是 require()加载模块时的返回值\n### exports 就是module.exports的一个引用\n\n```javascript\nexports = module.exports;\n```\n### 特别注意：最终暴露给require的返回值的是：module.exports, 而不是exports\n ```javascript\n  // To illustrate（说明） the behavior, imagine this hypothetical implementation of require(), which is quite similar to what is actually done by require():\n\n  function require(...) {\n  var module = { exports: {} };\n\n\n  ((module, exports) => {\n    // Your module code here. In this example, define a function.\n    function some_func() {};\n    exports = some_func;\n    // At this point, exports is no longer a shortcut to module.exports, and\n    // this module will still export an empty default object.\n    module.exports = some_func;\n    // At this point, the module will now export some_func, instead of the\n    // default object.\n  })(module, module.exports);\n\n  \n  return module.exports;\n}\n  ```\n\n\n\n\n\n## require 加载模块时做了2件事\n1. 执行了模块中的代码\n2. 返回了模块中对外暴露的内容（可能是对象、函数等等）\n\n\n\n## 下载Node.js源码，打开看下\n\n\n\n\n## JavaScript 的严格模式—— `\"use strict\";` 或 `'use strict';`\n- 参考链接：\n  1. http://www.ruanyifeng.com/blog/2013/01/javascript_strict_mode.html\n  2. https://developer.mozilla.org/zh-CN/docs/Web/JavaScript/Reference/Strict_mode\n\n\n# art-template\n\n1. npm 搜索：art-template\n\n2. 参考链接\nhttps://www.npmjs.com/package/art-template\n[art-template文档](https://aui.github.io/art-template/ )\n","tags":["Nodejs笔记"],"categories":["Nodejs"]},{"title":"nodejs day2","url":"%2F2018%2F09%2F24%2Fnodejs(day2)%2F","content":"\n# 复习\n\n## 了解:\n\n1. 浏览器渲染引擎工作原理\n2. 浏览器访问网站过程\n3. Web开发本质：请求、处理、响应\n  - C/S 架构 和 B/S 架构\n4. node.js 是什么？\n5. node.js 有什么特点？\n6. node.js 安装\n7. node.js 开发网站 和 传统方式开发网站（PHP、JSP等）有什么区别？\n8. node.js REPL\n  - 如何进入 REPL 环境\n  - 如何退出 REPL 环境\n9. 通过创建 js 文件开发 node.js 程序\n\n\n\n## 重点:\n\n10. 通过 fs 模块实现文件读写操作\n11. path 模块使用\n12. `__dirname` 和 `__filename`\n13. node.js 中异步是如何实现的？为什么说 node.js 即是单线程又是异步非阻塞 I/O 模型？\n  - 调用栈\n  - 调用队列\n14. 编写简单的 http 服务程序，无论请求当前网站下哪个路径，都返回 hello world\n  - 乱码问题。`res.setHeader('Content-Type', 'text/plain; charset=utf-8');`\n  - 设置显示 HTML 内容。`res.setHeader('Content-Type', 'text/html; charset=utf-8');`\n\n## 补充：\n  1. 文件操作时，无需先判断文件是否存在，直接操作即可，如果文件不存在会反应在 error 对象中\n  2. try-catch 的使用\n\n\n\n\n# 今日授课内容\n\n1. 通过 node.js 编写 http 服务程序 - 通过读取静态 HTML 文件来响应用户请求(带图片和外部CSS样式)\n\n2. 通过 node.js 编写 http 服务程序 - 模拟 Apache 服务器处理静态资源\n  - mime 第三方模块使用\n\n6. 在请求服务器的时候，请求的 url 就是一个标识！\n\n\n7. request（http.IncomingMessage） 和 response（ServerResponse） 对象介绍\n  - request: 服务器解析用户提交的 http 请求报文，将结果解析到 request 对象中。凡是要获取和用户请求相关的数据都可以通过 request 对象获取\n  - response: 在服务器端用来向用户做出响应的对象。凡是需要向用户（客户端）响应的操作，都需要通过 response 对象来进行。\n\n8. NPM \n\n9. package.json、package-lock.json 文件介绍\n  - 元数据\n\n10. 自己设计路由，实现 HackerNews网站部分功能\n  - underscore 模块介绍、url 模块介绍\n  \n\n5. 在html页面中写相对路径'./' 和 绝对路径 '/'的含义 \n  - 此处 ./ 相对的是吐出当前页面的url\n6. 通过设置 http 响应报文头实现弹框下载功能\n  - 设置 `Content-Type: application/octet-stream`\n  - 设置 `Content-Disposition: attachment; filename=demo.txt`\n\n\n# 其他参考\n- 1、注意在发送不同类型的文件时，要设置好对应的`Content-Type`\n  + [Content-Type参考 OSChina](http://tool.oschina.net/commons)\n  + [Content-Type参考 MDN](https://developer.mozilla.org/en-US/docs/Web/HTTP/Basics_of_HTTP/MIME_types)\n\n- 2、HTTP状态码参考\n  + [w3org参考](https://www.w3.org/Protocols/rfc2616/rfc2616-sec10.html)\n  + [w3schools参考](https://www.w3schools.com/tags/ref_httpmessages.asp)\n\n# 在 html 网页中路径的含义 \n\n## 在 html 网页中相对路径 './' 和 绝对路径 '/'的含义 \n1. \"相对路径\" 到底 \"相对\" 的是什么？\n  - 相对当前请求的路径\n  - 相对于吐出当前网页的路径\n\n\n## 网页中的这个路径主要是告诉浏览器向哪个地址发起请求用的\n\n1. './' 表示本次请求从相对于当前页面的请求路径（即服务器返回当前页面时的请求路径）开始\n2. '/' 表示请求从根目录开始\n\n\n\n## 打开浏览器来演示，最终主要体现在了请求报文的 url 上。\n\n### 演示步骤\n1. 找到之前的静态html页面中带有外部样式表连接的网页\n2. 请求该网页，查看http请求报文中的请求路径\n\n\n# 一、通过静态html响应用户请求\n\n```JavaScript\n// 根据用户不同请求，做出不同响应（响应 现有的 HTML 文件）\n\n// 加载 http 模块\nvar http = require('http');\n// 加载 fs 模块\nvar fs = require('fs');\n// 加载 path 模块\nvar path = require('path');\n\n\n// 创建 http 服务，并启动该服务\nhttp.createServer(function (req, res) {\n\n  // 通过 req.url 获取用户请求的路径，根据不同的请求路径服务器做出不同的响应\n  if (req.url === '/' || req.url === '/index') {\n    // 读取 index.html 文件\n    fs.readFile(path.join(__dirname, 'htmls', 'index.html'),  function (err, data) {\n      if (err) {\n        throw err;\n      }\n\n      // 把读取到的 index.html 中的内容直接发送给浏览器\n      res.end(data);\n    });\n  } else if (req.url === '/login') {\n    // 读取 index.html 文件\n    fs.readFile(path.join(__dirname, 'htmls', 'login.html'),  function (err, data) {\n      if (err) {\n        throw err;\n      }\n\n      // 把读取到的 index.html 中的内容直接发送给浏览器\n      res.end(data);\n    });\n  } else if (req.url === '/list') {\n   // 读取 index.html 文件\n    fs.readFile(path.join(__dirname, 'htmls', 'list.html'),  function (err, data) {\n      if (err) {\n        throw err;\n      }\n\n      // 把读取到的 index.html 中的内容直接发送给浏览器\n      res.end(data);\n    });\n  } else if (req.url === '/register') {\n    // 读取 index.html 文件\n    fs.readFile(path.join(__dirname, 'htmls', 'register.html'),  function (err, data) {\n      if (err) {\n        throw err;\n      }\n\n      // 把读取到的 index.html 中的内容直接发送给浏览器\n      res.end(data);\n    });\n  } else if (req.url === '/images/index.png') {\n    // 表示用户要请求 images 下的 index.png 图片\n    fs.readFile(path.join(__dirname, 'images', 'index.png'),  function (err, data) {\n      if (err) {\n        throw err;\n      }\n\n      res.setHeader('Content-Type', 'image/png');\n      // 把读取到的 index.html 中的内容直接发送给浏览器\n      res.end(data);\n    });\n\n  } else if (req.url === '/css/index.css') {\n    fs.readFile(path.join(__dirname, 'css', 'index.css'),  function (err, data) {\n      if (err) {\n        throw err;\n      }\n\n      res.setHeader('Content-Type', 'text/css');\n      // 把读取到的 index.html 中的内容直接发送给浏览器\n      res.end(data);\n    });\n  } else {\n    // 读取 index.html 文件\n    fs.readFile(path.join(__dirname, 'htmls', '404.html'),  function (err, data) {\n      if (err) {\n        throw err;\n      }\n\n      // 把读取到的 index.html 中的内容直接发送给浏览器\n      res.end(data);\n    });\n  }\n  \n\n\n\n}).listen(9090, function () {\n  console.log('http://localhost:9090');\n});\n```\n\n# 二、模拟Apache\n\n## 第一步 建立public文件夹把要用的html css 图片都放进去\n## 第二步 下载安装第三方插件mime\n1. 打开 https://www.npmjs.com/package/mime\n2. 安装mime  命令：npm install mime （命令不一定是永久的还得看官网改变而改变）\n(2后面的方法均会因版本的变化而变化与官网为准)\n3. 引入外部模块 const mime = require('mime');\n4. 使用方法 mime.getType('txt');\n\n## 第三步使用\n```JavaScript\n\n\n// 加载 http 模块\nvar http = require('http');\nvar path = require('path');\nvar fs = require('fs');\nvar mime = require('mime');\n\n\n// 创建服务\nhttp.createServer(function (req, res) {\n  // 1. 获取用户请求的路径\n  // req.url\n  // /css/index.css\n  // /images/index.png\n\n\n  // 2. 获取 public 目录的完整路径\n  var publicDir = path.join(__dirname, 'public');\n\n  // 3. 根据 public 的路径 和用户请求的路径，最终计算出用户请求的静态资源的完整路径\n  var filename = path.join(publicDir, req.url);\n  // console.log(filename);\n\n  // 4. 根据文件的完整路径去读取该文件，如果读取到了，则把文件返回给用户，如果读取不到，则返回 404\n  fs.readFile(filename, function (err, data) {\n    // body...\n    if (err) {\n      res.end('文件不存在 404');\n    } else {\n\n      // 通过第三方模块 mime，来判断不同的资源对应的 Content-Type 的类型\n      res.setHeader('Content-Type', mime.getType(filename));\n      // 如果找到了用户要读取的文件，那么直接把该文件返回给用户\n      res.end(data);\n    }\n  });\n  // res.end('over');\n\n\n}).listen(9090, function () {\n  console.log('http://localhost:9090');\n});\n```\n\n# 三、url就是一个标示\n## index.html\n```\n<!DOCTYPE html>\n<html lang=\"en\">\n<head>\n  <meta charset=\"UTF-8\">\n  <title>Hello Index</title>\n</head>\n<body>\n  <h1 style=\"color: red;\">Hello Index</h1>\n  <h1>你好 首页！！！看乱码吗？</h1>\n\n  <img src=\"./haha.xxx\" alt=\"haha.xxx\">//图片路径的变化\n\n</body>\n</html>\n```\n## add.js\n```JavaScript\n\n\n// 加载 http 模块\nvar http = require('http');\nvar path = require('path');\nvar fs = require('fs');\nvar mime = require('mime');\n\n\n// 创建服务\nhttp.createServer(function (req, res) {\n\n  if (req.url === '/index.do' || req.url === '/index.html') {\n    // 读取 index.html 并返回\n\n    fs.readFile(path.join(__dirname, 'index.html'), function (err, data) {\n      if (err) {\n        throw err;\n      }\n      res.end(data);\n    });\n  } else if (req.url === '/haha.xxx') {\n     fs.readFile(path.join(__dirname, '150.jpg'), function (err, data) {\n      if (err) {\n        throw err;\n      }\n      res.setHeader('Content-Type', 'image/jpeg');\n      res.end(data);\n    });\n  }\n  \n}).listen(9090, function () {\n  console.log('http://localhost:9090');\n});\n```\n\n\n\n# 四、request 对象 和 response对象\n\n\n\n## request 对象\n\n- request 对象类型 <http.IncomingMessage>, 继承自stream.Readable\n- request 对象常用成员\n  + `request.headers`\n  + `request.rawHeaders`\n  + `request.httpVersion`\n  + `request.method`\n  + `request.url`\n\n\n\n\n## response 对象\n\n- response 对象类型 <http.ServerResponse>\n\n- response 对象常用成员\n  + `response.writeHead(statusCode[, statusMessage][, headers])`\n    1. This method must only be called once on a message and it must be called before response.end() is called.\n    - 这个方法在每次请求响应前都必须被调用（只能调用一次）。并且必须在end()方法调用前调用\n\n\n    2. If you call response.write() or response.end() before calling this, the implicit/mutable headers will be calculated and call this function for you.\n    - 如果在调用writeHead()方法之前调用了write() 或 end()方法，系统会自动帮你调用writeHead()方法，并且会生成默认的响应头\n\n\n\n    3. When headers have been set with response.setHeader(), they will be merged with any headers passed to response.writeHead(), with the headers passed to response.writeHead() given precedence.\n    - 如果通过 res.setHeader() 也设置了响应头，那么系统会将serHeader()设置的响应头和writeHead()设置的响应头合并。 并且writeHead()的设置优先\n\n```javascript\n// 示例代码：\nres.writeHead(200, 'OK', {\n  'Content-Type': 'text/html; charset=utf-8',\n  'Content-Length': Buffer.byteLength(msg)\n});\n```\n\n  + `response.write(chunk[, encoding][, callback])`\n    - 参数1：要写入的数据，可以是字符串或二进制数据，**必填**。\n    - 参数2：编码，默认是utf8，选填。\n    - 参数3：回调函数，选填。\n\n  + `response.end([data][, encoding][, callback])`\n    * 结束响应。\n    * This method signals to the server that all of the response headers and body have been sent; that server should consider this message complete. ***The method, `response.end()`, MUST be called on each response***.\n    - res.end()这个方法告诉服务器所有要发送的响应头和响应体都发送完毕了。可以人为这次响应结束了。\n    - 同时每次响应都必须调用该方法，用来结束响应\n\n\n    * 参数1：结束响应前要发送的数据，选填。\n    * 参数2：编码，选填。\n    * 参数3：回调函数，选填。\n\n  + `response.setHeader(name, value)`\n    * 设置响应报文头\n\n  + `response.statusCode`\n    * 设置或读取http响应码\n\n  + `response.statusMessage`\n    * 设置或读取http响应状态消息\n\n\n\n\n# 五、NPM - Node Package Manager - Node 包管理器\n\n\n## NPM 是什么？\n\n- npm（全称Node Package Manager，即node包管理器）是Node.js默认的、以JavaScript编写的软件包管理系统。\n- [npm 官方网站](https://www.npmjs.com/)\n- [npm 官方文档](https://docs.npmjs.com/)\n\n\n\n\n## 一般当我们说npm的时候可能指3件事\n\n1. NPM 网站：https://www.npmjs.com/\n2. NPM 包管理库，存储了大量的JavaScript代码库\n3. NPM 客户端，我们所使用的npm命令行工具。使用JavaScript开发的基于node.js的命令行工具，本身也是Node的一个包。\n\n\n\n\n## 参考图片\n\n![NPM](imgs/npm.png)\n\n![NPM](imgs/npm1.png)\n\n\n\n## NPM 官方解释：\n- npm is the package manager for JavaScript and the world’s largest software registry.\n  + npm 是一个JavaScript包管理器，并且是世界上最大的软件登记处\n\n- discover packages of reusable code — and assemble them in powerful new ways.\n  + 发现可重用代码，并集成代码包到项目中的全新的、强大方式\n\n\n- npm makes it easy for JavaScript developers to share and reuse code, and it makes it easy to update the code that you're sharing.\n  + npm 让JavaScript开发者共享和重用代码变的更容易，同时也让我们更容易地更新正在被共享的代码\n\n\n\n\n## npm与 node.js\n- npm是Node.js默认的软件包管理系统。安装完毕node后，会默认安装好npm\n- npm本身也是基于Node.js开发的包（软件）\n\n\n\n\n## 如何安装 NPM?\n- npm会随着Node.js自动安装，安装完毕node.js后会自动安装npm\n- 查看当前npm版本：`npm -v`\n- 更新npm：`npm install npm@latest -g`\n\n\n\n## NPM 使用\n\n1. 在 https://www.npmjs.com/ 网站找到需要的包\n2. 在项目的根目录下，执行`npm install 包名称`安装\n3. 在node.js代码中通过 `require('包名');` 加载该模块\n4. 注意：通过`npm install 包名`安装的包，会自动下载到当前目录下的`node_modules`目录下，如果该目录不存在，则创建，如果已存在则直接下载进去。\n5. 在代码中通过 `require('包名');` 加载该模块\n\n----- 上面说的这种方式叫做 本地安装。\n\n\n\n## NPM 全局安装介绍\n\n1. 什么是 npm 全局安装？\n  - `npm install 包名 -g` npm 全局安装指的是把包安装成了一个命令行工具。\n\n```javascript\n  // 通过npm全局安装mime\n  npm install mime -g\n\n  //安装完毕后可以在命令行中直接使用\n  mime a.txt 命令来查看对应的结果\n```\n\n2. npm 全局安装实际做了2件事：\n  1. 下载包到一个指定的目录`C:\\Users\\username\\AppData\\Roaming\\npm\\node_modules`\n\n  2. 创建一段命令行执行的代码。` C:\\Users\\username\\AppData\\Roaming\\npm\\mime -> C:\\Users\\steve xiaohu zhao\\AppData\\Roaming\\npm\\node_modules\\mime\\cli.js`\n\n\n\n## NPM 安装建议\n1. 全局安装只是为了可以当做命令行使用而已\n \n\n\n## 五、npm常用命令介绍\n1. install，安装包。`npm install 包名`\n2. uninstall，卸载包。·npm uninstall 包名`\n3. version，查看当前npm版本。`npm version` 或 `npm -v`\n\n4. init，创建一个package.json文件。`npm init`\n5. 注意：当使用 `npm init -y`  的时候，如果当前文件夹（目录）的名字比较怪（有大写、有中文等等）就会影响npm init -y 的一步生成操作，此时需要 npm init 根据向导来生成\n\n\n\n## \"模块\"（Modules）和\"包\"（Packages）的区别\n\n1. A **module** is any file or directory that can be loaded by Node.js' `require()`. \n- 模块可以是任何一个文件或目录（目录下可以有很多个文件），只要能被node.js通过require()即可。\n\n\n2. A **package** is a file or directory that is described by a `package.json`. This can happen in a bunch of different ways!\n- 包是一个文件或目录（目录下可以有多个文件）必须有一个package.json文件来描述，就可以是一个包。\n\n\n\n\nnode.js 错误调试：\n1. 当开启服务后，在浏览器中输入地址，如果出现浏览问题，首先要先看 服务器控制台是否报错。如果报错，直接根据服务器报错进行排错。\n\n2. 打开浏览器开发者工具中的 “网络” 部分，查看请求是否成功发出去了\n- 看一下请求报文是不是和我们想的一样\n- 响应状态码\n\n# 六、package.json 文件\n\n## package.json 文件的作用？\n\n1. package.json 文件是一个包说明文件（项目描述文件），用来管理组织一个包（一个项目）\n2. package.json 文件是一个 json 格式的文件\n3. 位于当前项目的根目录下\n\n元数据\n\n\n## package.json 文件中常见的项有哪些？\n+ name\n  - 包的名字\n+ version\n  - 包的版本\n+ description\n  - 包描述\n+ author\n  - 包的作者\n+ main\n  - 包的入口js文件，从main字段这里指定的那个js文件开始执行\n+ dependencies\n  - 当前包依赖的其他包\n\n\n## 如何创建一个 package.json 文件\n1. 通过 `npm init` 命令 或者 `npm init -y` 或 `npm init -yes`  命令\n2. 手动创建一个\n\n### 注意\n1. 通过 `npm init -y` 或 `npm init -yes` 创建 package.json 文件时，执行命令所在的目录接名称中不能包含大写字母\n2. package.json 文件中，项目名称本身不能包含大写字母\n3. npm 更新新版本后，项目所在的文件夹如果包含中文等特殊字符，创建的时候不会提示一步一步的输入，直接报错。\n\n## 官方介绍\n1. [package.json](https://docs.npmjs.com/files/package.json)\n2. [Using a package.json](https://docs.npmjs.com/getting-started/using-a-package.json)\n\n# 七、自己设计路由实现 Hacker News 网站部分功能\n\n参考网址：https://news.ycombinator.com/\n\n\n## 步骤\n1. 实现新闻列表页 - 首页 - /index  get \n2. 实现新闻详情页 - 详情页 - /details get\n3. 实现新闻添加页 - 提交页 - /submit get\n/add get\n/add post\n\n4. 实现保存数据功能 - 将数据写入到 data.json 文件中\n5. 实现首页数据的动态加载 - 根据.json文件来加载数据\n\n\n## 实现思路\n\n### 规划项目目录结构\n\n- HackerNews\n  + resources\n    - css\n    - images\n  + views（存放html模板页面）\n  + data（保存新闻数据 data.json 文件）\n  + app.js 文件（该文件即我们写服务器端JavaScript代码的地方，用来处理用户请求）\n  + package.json\n\n\n### 路由设计\n\n1. 注意：此处要自己设计路由，而不是像模拟 Apache 静态资源服务器一样\n \n\n#### 根据不同的请求返回相应的功能\n1. 当请求 `/` 和 `/index` 时，返回 `views/index.html` 文件内容\n2. 当请求 `/details` 时，返回 `views/details.html` 文件内容\n3. 当请求 `/submit` 时，返回 `views/submit.html` 文件内容\n4. 当请求 `/add` 时，保存用户提交的新闻数据，并将重定向到index页面。\n5. 对于其他以'/resources'开头的都当做静态资源来处理。\n\n\n\n### 知识点\n1. 封装`render()`函数，将`render()`函数挂载到`response`对象上，实现`response.render()`效果。\n2. 使用`underscore`模块中的模板引擎功能，渲染`index`页面中的新闻数据。\n3. 通过 url 模块来处理 get 请求\n\n```javascript\n// 1. 将 req.url 通过 url 模块来处理\n  var urlObj = url.parse(req.url, true);\n\n  // 1.1 获取用户请求的URL，不带查询字符串\n  // 注意：此时的reqUrl中不包含 get 的请求参数，只是pathname\n  var reqUrl = urlObj.pathname.toLowerCase();\n\n  // urlObj.query\n\n```\n4. 服务器端接收 post 提交过来的数据\n5. 通过 querystring 模块将查询字符串转换为 json 对象\n \n\n## JSON在线格式化\n[JSON在线格式化](http://tool.oschina.net/codeformat/json)\n\n","tags":["Nodejs笔记"],"categories":["Nodejs"]},{"title":"学习心路历程","url":"%2F2018%2F09%2F22%2F2018-09-22%2F","content":"\n作为一个 IT 业学者，快要从事软件技术开发类的大二学生我内心很慌，不知道自己到底准备好了没有，感觉自己准备好了但是自己的技术好像并没有那么好，有时候还是很迷茫的，不知道自己到底要做什么该做什么，做什么才是对的一直都很迷糊该走前端路线还是后台开发呢，还是做全栈什么都要学\n本来我以为前端只是很简单的页面，但是接触了后才发现虽然只是分了三个比较大一点点方向就没什么了，但是要学好并不是那么的容易的 css，html，js 掌握后还要学习各种的框架不断的去练习才可以让自己更加快速的写页面，然后学了一点点后台 php 和 java，就觉得自己很厉害了想去写一个系统\n在我开始构想写这一个系统的时候我一开始写的是登陆页面的前后台，在我还没有写完的时候我遇到了问题后台数据的传输，虽然我解决了这个问题但是我也发现了自己所用的方法是最笨嘬的方法，在那个时候慢慢的回想自己学的知识，才发现自己写前端页面用原生写是可以写的出来的但是用到框架 vue 就不太懂，很多之前的知识因为不用也开始慢慢的忘记了，在这时候我才发现自己对前端有一定的了解但是对后台的庞大我是一无所知，比小白还小吧，虽然学过java，c，php这些后台语言但是没有用过这些写过系统，java写过的项目也是很早之前的都不记得了，用php做后台来写的是可以但是用的方法实在是太笨拙了，对于后台的很多交互方式作用也并不是很了解，只是会简单的与数据库进行交互，这对于在公司工作的话远远不够，所以又要开始新的历程，php框架开始php框架学习的时候，一开始配置apache服务器的时候弄了两天找了各种的方法才配置好服务器当时的内心真的是奔溃了，然后开始写代码了才发现后台语言框架的编写是很方便的但是在这过程中也遇到了问题，框架无法渲染可视页面，也是搞了两天各种方法用遍，后来的这几天都没有看php，而是把我一直在看的js高级教程看完，然后看node，后台的庞大让我有点害怕所以暂时放弃一下后台把前端的一些知识巩固一下再去看后台，把我的项目写好，作为编程学习者来说我并不算是优秀的一个，我算是那种比较懒又不聪明的那个，所以很多时候还是坚持着每天都学习，让自己每天都可以进步一点点，可能是我比较乐观我觉得自己比昨天好那就是自己进步了，但是我并不觉得自己很努力，因为还有更多的人比我更聪明更厉害更谦虚更努力，我本来都一无所有了虽然不惧怕从头再来，但是我输不起了，没有时间可以让我再去浪费再去输了，大二了马上就是要出来实习没有再多的机会可以让我去学习和拼搏，老师说我那么拼干什么说我很努力，但是我并没有觉得我自己很努力，我是觉得我永远感觉不到自己到底又多懒，我的对手到底有多强大，别人到底付出了多少的时间精力代价，而我只是每天都学习几个小时就觉得很累很累的人，我也不知道我自己这么懒可以用什么和别人去比拼，我也不想输，所以只可以每天坚持学一点，虽然追不上比我厉害很多的人但是起码不会让自己堕落下去，起码我还可以挺起胸膛为了生活去拼搏，我也不是家里有矿的人，我的父母什么也没有留给我，以后要什么样的生活，什么都要自己去打拼回来，我的父母和我说他们那时候爷爷奶奶也是什么都没有给他们都是他们自己一手一脚熬回来的，生活真的不容易，社会也不容易，能生存下来并且养大我们也不是容易，都是点点都熬出来我们没有经历过抗战内战文化大革命闹饥荒那些，我们从出生到现在都没有熬过一日苦爸妈都能给饱饭吃没有试过饿肚子，社会都残酷无情并不是不知道，要是想站稳脚步那必须把自己武装起来，打造成不屈的钢铁才能抵御最强烈的风暴，虽然这样真的很辛苦也不一定可以做到，但是真的没时间了，累了可以歇但是歇息的时候别人也是在奋斗的根本追不上别人的脚步，那些更加厉害的人更加的努力，不知道自己凭什么闲着，大家都是一个头颅两个手两个脚，为何自己就是那么的差劲，别人就是那么的厉害，别人都是在拼命为什么自己不可以，继续加油即使输了也没有关系，生活不会亏待付出努力的人\n上学期认识了个已经毕业的师兄一直都没这么联系，是一位很厉害的师兄，这个学期突然联系我，不断的想我去参加比赛和我说了很多，从中学习到了很多也发现了很多自己的陋习，知道了很多的一些自己以前都不注意的问题也告诉了我一些方向，不断的在后面推动的我，和高手谈话每一次都可以收益非浅，不过说起引路人，还是在大一的时候认识的一个公司里面有着十几年工作经验的老大哥，一直对我比较好，每次请教都很细心的教导也不摆老大哥的架子很好人，算是我的引路人，从一开始的css，js，html，框架，php等这些知识都是看他的教程和与他交流学习，不断的指引我向前面走，感谢老大哥\n虽然学校大一开始开始c语言html但是都是很基础很基础所以每一次上课都没有什么学的只可以回去自己学，大一第二学期的时候有java和数据库，但是也是非常基础对数据库没有什么兴趣所以并不是学的很好，这个学期开设了js，h5，javaweb，ps但是除了javaweb以外我都学过了而且学校一直都是学的很基础的东西完全都没有学到很多的真本事，虽然说打好基础很重要但是全部都是基础也没什么用，没有写过项目不知道着么去写项目，要这么去布局如何写，着么才可以达到很好的效果，根本都没有，然而经常被老师危险期末不给过我也是醉了！只可以自己控制好自己不断的去学习，但愿还能坚持住，彩虹的尽头总是会有希望的！","tags":["个人"],"categories":["个人"]},{"title":"nodejs day1","url":"%2F2018%2F09%2F22%2Fnodejs(day1)%2F","content":"\n# day1十部曲\n1.课程安排\n2.授课思路\n3.浏览器工作原理\n4.web开发的本质\n5.nodejs的介绍\n6.基于nodejs编写程序\n7.nodejs学习\n8.nvm\n9.buffer\n10.总结\n\n## 一、课程安排\n### 课程总天数：7天\n### 第 01 天：\n- 浏览器工作原理\n- 浏览器访问网站全过程\n- node.js 介绍\n- 通过 node.js 编写服务端程序\n\n### 第 02 天：\n- node.js 中的 request 对象 和 response 对象\n- npm 介绍\n- HTML 页面中路径的真实含义\n- package.json 文件\n- 路由介绍、设计路由\n- 代码封装\n- 开始实现 Hacker News 网站\n- 循环中的异步\n- 封装异步函数\n- 待定：模拟 Chrome 显示文件列表\n\n### 第 03 天：\n- HackerNews 新闻列表展示\n- 添加新闻页\n- 新闻详情页\n- underscore\n- module 、 module.exports 和 exports\n- node.js 模块化\n\n### 第 04 天：\n- HackerNews 代码模块化\n- http-server\n- express 介绍\n- 中间件\n- 通过 express 完成 HackerNews 思路\n\n### 第 05 天：\n- express 实现 Hacker News\n- MongoDb 介绍\n### 第 06 天：\n- 完善 Hacker News\n- 封装 DB 模块\n### 第 07 天：\n- 实现 sms\n- ajax 实现 sms\n- node.js 抓取数据、cheerio 介绍\n- 模拟 body-parser 中间件\n\n\n## 二、授课思路\n准备知识\n\n### 浏览器工作原理\n\n1. 浏览器组成\n2. 浏览器渲染引擎工作原理\n3. 通过浏览器访问网站全过程\n\n\n### Web 开发本质\n\n1. 请求: 客户端发起请求.\n2. 处理: 服务器 处理请求.\n3. 响应: 服务器将处理结果发送给客户端.\n\n\nWeb应用程序与桌面应用程序对比（计算器案例）\n\n\n关于C/S（Client/Server） 和 B/S（Browser/Server）\n\n![Client / Server](/imgs/client-server.png)\n\n### node.js 介绍\n\n1. node.js 是什么？\n2. node.js 有哪些特点？\n3. node.js 官方网站\n4. node.js 学习资源\n5. 为什么要学习Node.js?\n6. Node.js安装和配置\n7. Node.js 开发 Web 应用程序 和 PHP、Java、ASP.Net等传统模式开发Web应用程序区别\n\n### node.js 编程\n1. node.js 编写控制台程序\n2. node.js 进行文件读写\n  - 同步 & 异步读取文件\n3. node.js 创建 http 服务程序\n解释异步是如何实现的？ eventloop\nnpm 介绍\nnode.js 实现新闻列表\n\n## 三、浏览器工作原理\n\n### 浏览器的组成\n- 人机交互部分（UI）\n- 网络请求部分（Socket）\n- JavaScript引擎部分（解析执行JavaScript）\n- 渲染引擎部分（渲染HTML、CSS等）\n- 数据存储部分（cookie、HTML5中的本地存储LocalStorage、SessionStorage）\n\nsqlite\n\n\n### 主流渲染引擎\n\n#### 介绍\n1. 渲染引擎 又叫 排版引擎 或 浏览器内核。\n\n2. 主流的 渲染引擎 有\n  - **Chrome浏览器**: Blink引擎（WebKit的一个分支）。\n  - **Safari浏览器**: WebKit引擎，windows版本2008年3月18日推出正式版，但苹果已于2012年7月25日停止开发Windows版的Safari。\n  - **FireFox浏览器**: Gecko引擎。\n  - **Opera浏览器**: Blink引擎(早期版使用Presto引擎）。\n  - **Internet Explorer浏览器**: Trident引擎。\n  - **Microsoft Edge浏览器**: EdgeHTML引擎（Trident的一个分支）。\n\n\n#### 工作原理\n1. 解析HTML构建Dom树（Document Object Model，文档对象模型），DOM 是W3C组织推荐的处理可扩展置标语言的标准编程接口。\n\n\n2. 构建*渲染树*，*渲染树*并不等同于*Dom树*，因为像`head标签 或 display: none`这样的元素就没有必要放到*渲染树*中了，但是它们在*Dom树*中。\n\n3. 对*渲染树*进行布局，定位坐标和大小、确定是否换行、确定position、overflow、z-index等等，这个过程叫`\"layout\" 或 \"reflow\"`。\n\n4. 绘制*渲染树*，调用操作系统底层API进行绘图操作。\n\n\n\n#### 渲染引擎工作原理示意图\n\n**渲染引擎工作原理示意图**\n\n![渲染引擎工作原理](/imgs/flow.png)\n\n\n**WebKit工作原理（Chrome、Safari、Opera）**\n\n![Blink渲染引擎工作原理](/imgs/webkitflow.png)\n\n\n**Gecko工作原理（FireFox）**\n\n![Gecko渲染引擎工作原理](/imgs/gecko.jpg)\n\n\n\n#### 浏览器的 reflow 或 layout 过程\n\nhttps://www.youtube.com/watch?v=ZTnIxIA5KGw\n\n\n\n\n\n#### 打开 Chrome 的 Rendering 功能\n\n第一步：\n\n![第一步](/imgs/chrome_rendering1.png)\n\n第二步：\n\n![第二步](/imgs/chrome_rendering2.png)\n\n\n\n\n\n### 浏览器访问网站过程\n\n> 1. 在浏览器地址栏中输入网址。\n\n![淘宝网址](/imgs/taobao_url.png)\n\n> 2. 浏览器通过用户在地址栏中输入的URL构建HTTP请求报文。\n\n```http\nGET / HTTP/1.1\nHost: www.taobao.com\nConnection: keep-alive\nUpgrade-Insecure-Requests: 1\nUser-Agent: Mozilla/5.0 (Windows NT 10.0; Win64; x64) AppleWebKit/537.36 (KHTML, like Gecko) Chrome/57.0.2987.133 Safari/537.36\nAccept: text/html,application/xhtml+xml,application/xml;q=0.9,image/webp,*/*;q=0.8\nAccept-Encoding: gzip, deflate, sdch, br\nAccept-Language: zh-CN,zh;q=0.8,en;q=0.6\nCookie: l=Ag0NWp9E8X4hgaGEtIBhOmKxnSOH6kG8; isg=AkZGLTL-Yr9tHDZbgd5bsn4Rlzwg5IphaK-1BzBvMmlEM-ZNmDfacSyDfdgF; thw=cn\n```\n\n> 3. 浏览器发起DNS解析请求，将域名转换为IP地址。\n\n![淘宝网址](/imgs/taobao_ip.png)\n\n> 4. 浏览器将请求报文发送给服务器。\n\n> 5. 服务器接收请求报文，并解析。\n\n> 6. 服务器处理用户请求，并将处理结果封装成HTTP响应报文。\n\n```http\nHTTP/1.1 200 OK\nServer: Tengine\nDate: Thu, 13 Apr 2017 02:24:25 GMT\nContent-Type: text/html; charset=utf-8\nTransfer-Encoding: chunked\nConnection: keep-alive\nVary: Accept-Encoding\nVary: Ali-Detector-Type, X-CIP-PT\nCache-Control: max-age=0, s-maxage=300\nVia: cache8.l2cm10-1[172,200-0,C], cache13.l2cm10-1[122,0], cache3.cn206[0,200-0,H], cache6.cn206[0,0]\nAge: 293\nX-Cache: HIT TCP_MEM_HIT dirn:-2:-2\nX-Swift-SaveTime: Thu, 13 Apr 2017 02:19:32 GMT\nX-Swift-CacheTime: 300\nTiming-Allow-Origin: *\nEagleId: 9903e7e514920502659594264e\nStrict-Transport-Security: max-age=31536000\nContent-Encoding: gzip\n\n<!DOCTYPE html>\n<html lang=\"zh-CN\">\n<head>\n<meta charset=\"utf-8\" />\n<meta http-equiv=\"X-UA-Compatible\" content=\"IE=edge,chrome=1\" />\n<meta name=\"renderer\" content=\"webkit\" />\n<title>淘宝网 - 淘！我喜欢</title>\n<meta name=\"spm-id\" content=\"a21bo\" />\n<meta name=\"description\" content=\"淘宝网 - 亚洲较大的网上交易平台，提供各类服饰、美容、家居、数码、话费/点卡充值… 数亿优质商品，同时提供担保交易(先收货后付款)等安全交易保障服务，并由商家提供退货承诺、破损补寄等消费者保障服务，让你安心享受网上购物乐趣！\" />\n<meta name=\"aplus-xplug\" content=\"NONE\">\n<meta name=\"keyword\" content=\"淘宝,掏宝,网上购物,C2C,在线交易,交易市场,网上交易,交易市场,网上买,网上卖,购物网站,团购,网上贸易,安全购物,电子商务,放心买,供应,买卖信息,网店,一口价,拍卖,网上开店,网络购物,打折,免费开店,网购,频道,店铺\" />\n</head>\n<body>\n......\n</body>\n</html>\n```\n\n> 7. 服务器将HTTP响应报文发送给浏览器。\n\n> 8. 浏览器接收服务器响应的HTTP报文，并解析。\n\n> 9. 浏览器解析 HTML 页面并展示，在解析HTML页面时遇到新的资源需要再次发起请求。\n\n> 10. 最终浏览器展示出了页面\n\n\n\n\n\n\n### HTTP请求报文和响应报文格式\n\n![http请求报文和响应报文](/imgs/HTTPMsgStructure2.png)\n\n\n\n\n### DNS 解析过程\n\n![DNS解析过程](/imgs/DNS.gif)\n\n\n#### windows 下 hosts 文件位置\n\nC:\\Windows\\System32\\drivers\\etc\\hosts\n\n\n\n\n\n### DOM 解析\n\n参考代码:\n\n```html\n<html>\n  <body>\n    <p>Hello World</p>\n    <div> <img src=\"example.png\" alt=\"example\"/></div>\n  </body>\n</html>\n```\n\n![Dom 解析工作原理](/imgs/dom.png)\n\n\n\n### Webkit CSS 解析\n\n![CSS 解析工作原理](/imgs/css_parser.png)\n\n\n\n### How Browsers work - 浏览器是如何工作的\n\n[How Browsers work](http://taligarsiel.com/Projects/howbrowserswork1.htm#The_browsers_we_will_talk_about)\nhttps://www.html5rocks.com/zh/tutorials/internals/howbrowserswork/\n\n\n\n\n## 四、Web开发本质\n### 牢记以下三点\n\n1. 请求，客户端发起请求。\n2. 处理，服务器处理请求。\n3. 响应，服务器将处理结果发送给客户端\n\n### 对比一个单机版计算器和Web版计算器\n\n### 客户端处理响应\n\n- 服务器响应完毕后，客户端继续处理：\n  + 浏览器：解析服务器返回的数据\n  + iOS、Android 客户端，解析服务器返回的数据，并且通过iOS或Android的UI技术实现界面的展示功能\n\n### 关于 C/S（Client/Server） 和 B/S（Browser/Server）\n\nC/S: 客户端服务器\n\nB/S: 浏览器服务器\n\n![Client / Server](/imgs/client-server.png)\n\n\n\n\n## 五、node.js 介绍\n\n### node.js 是什么？\n\n1. node.js 是一个开发平台，就像Java开发平台、.Net开发平台、PHP开发平台、Apple开发平台一样。\n  - 何为开发平台？有对应的编程语言、有语言运行时、有能实现特定功能的API（SDK：Software Development Kit）\n2. 该平台使用的编程语言是 JavaScript 语言。 \n3. node.js 平台是基于 Chrome V8 JavaScript 引擎构建。\n4. 基于 node.js 可以开发控制台程序（命令行程序、CLI程序）、桌面应用程序（GUI）（借助 node-webkit、electron 等框架实现）、Web 应用程序（网站）\n\n\nPHP开发技术栈: LAMP - Linux Apache MySQL PHP\n\nnode.js 全栈开发技术栈: MEAN - MongoDB Express Angular Node.js\n\n\n### node.js 有哪些特点？\n\n1. 事件驱动(当事件被触发时，执行传递过去的回调函数)\n2. 非阻塞 I/O 模型（当执行I/O操作时，不会阻塞线程）\n3. 单线程\n4. 拥有世界最大的开源库生态系统 —— npm。\n\n\n### node.js 网站\n\n1. [node.js官方网站](https://nodejs.org/)\n2. [node.js中文网](http://nodejs.cn/)\n3. [node.js 中文社区](https://cnodejs.org/)\n\n\n\n\n### 为什么要学习Node.js?\n\n1. 通过学习Node.js开发深入理解**服务器开发**、**Web请求和响应过程**、 **了解服务器端如何与客户端配合**\n2. 学习服务器端渲染\n3. 学习服务器端为客户端编写接口\n4. 现在前端工程师面试，对 Node.js 开发有要求\n5. 补充提问：\n  - 在Node.js平台开发时，能使用Dom API吗？比如：`document.getElementById('id'); window.location 等`?\n6. 复习 浏览器端 JavaScript 组成：ECMAscript、Dom、Bom\n\n\n\n### 学习目标\n\n1. 了解服务器开发过程\n2. 会使用 node.js 开发基本的 http 服务程序（Web应用程序）\n\n\n\n\n### Node.js安装和配置\n\n1. 下载地址\n  + [当前版本](https://nodejs.org/en/download/)\n  + [历史版本](https://nodejs.org/en/download/releases/)\n\n2. 官网术语解释\n  + LTS 版本：Long-term Support 版本，长期支持版，即稳定版。\n  + Current 版本：Latest Features 版本，最新版本，新特性会在该版本中最先加入。\n\n3. 注意：\n  + 安装完毕后通过命令：`node -v`来确定是否安装成功【注意：打开\"命令窗口\"的时候建议使用\"管理员方式\"打开】\n  + 如果需要则配置环境变量。\n\n![配置环境变量](/imgs/env_path.png)\n\n4. 通过 nvm-windows 管理一台计算机上的多个 node 版本\n\n\n\n### Node.js 开发 Web 应用程序 和 PHP、Java、ASP.Net等传统模式开发Web应用程序区别\n\n1. **传统模式**\n  - 有 Web 容器\n\n![有Web容器开发模型](/imgs/Web.png)\n\n\n2. **Node.js开发Web应用程序**\n  - 没有 Web 容器\n\n![Node.js无Web容器开发模型](/imgs/nodeWeb.png) \n\n3. 补充提问：\n- 什么是动态网页？什么是静态网页？\n\n\n\n\n\n## 六、基于nodejs编写程序(在 node.js 上编写程序)\n\n\n### REPL介绍\n1. REPL 全称: Read-Eval-Print-Loop（交互式解释器）\n  - R 读取 - 读取用户输入，解析输入了Javascript 数据结构并存储在内存中。\n  - E 执行 - 执行输入的数据结构\n  - P 打印 - 输出结果\n  - L 循环 - 循环操作以上步骤直到用户两次按下 ctrl-c 按钮退出。\n\n2. 在REPL中编写程序 （类似于浏览器开发人员工具中的控制台功能）\n  + 直接在控制台输入 `node` 命令进入 REPL 环境\n\n3. 按两次 Control + C 退出REPL界面 或者 输入 `.exit` 退出 REPL 界面\n  + 按住 control 键不要放开, 然后按两下 c 键\n\n\n\n\n### 创建 JavaScript 文件编写程序\n\n#### 编程注意事项\n  + 配置一下Sublime Text 的代码缩进格式为2个空格\n  + 方式一\n\n  ![@配置方式1](/imgs/sublimeconf1.png)\n  + 方式二\n\n  ![@配置方式2 - 第一步](/imgs/sublimeconf21.png)\n\n  ![配置方式2 - 第二步](/imgs/sublimeconf22.png)\n\n\n#### JavaScript 文件名命名规则\n  + 不要用中文\n  + 不要包含空格\n  + 不要出现node关键字\n  + 建议以 '-' 分割单词\n\n\n\n#### 案例\n\n1. 案例1：编写一个简单的函数, 实现数字相加\n\n```javascript\nvar n = 10;\nvar m = 100;\n\nfunction add(x, y) {\n  return x + y;\n}\n\nvar result = add(m, n);\n\nconsole.log('计算结果是：' + result);\n```\n\n\n\n2. 案例2：编写一个输出'三角形'的程序\n\n```javascript\n\n// process 对象是一个 global （全局变量），提供有关信息，控制当前 Node.js 进程。\n// 作为一个对象，它对于 Node.js 应用程序始终是可用的，故无需使用 require()。\n\nfor (var i = 0; i < 10; i++) {\n  for (var j = 0; j <= i; j++) {\n    // 注意：console.log()输出完毕后是带换行的，所以这样做不可以\n    // console.log('*');\n    process.stdout.write('* ');\n  }\n  process.stdout.write('\\n');\n}\n```\n\n\n\n\n\n3. 案例3：文件读写案例（带同学们打开官方文档查阅）\n  - 使用到的模块`var fs = require('fs');`\n  \n  - 1、写文件：`fs.writeFile(file, data[, options], callback);`\n    + 参数1：要写入的文件路径，**必填**。\n    + 参数2：要写入的数据，**必填**。\n    + 参数3：写入文件时的选项，比如：文件编码，选填。\n    + 参数4：文件写入完毕后的回调函数，**必填**。\n    + 写文件注意：\n      * 该操作采用异步执行\n      * 如果文件已经存在则替换掉\n      * 默认写入的文件编码为utf8\n      * 回调函数有1个参数：err，表示在写入文件的操作过程中是否出错了。\n        - 如果出错了`err != null`，否则 `err === null`\n  \n  - 2、读文件：`fs.readFile(file[, options], callback)`\n    + 参数1：要读取的文件路径，**必填**。\n    + 参数2：读取文件时的选项，比如：文件编码。选填。\n    + 参数3：文件读取完毕后的回调函数，**必填**。\n    + 读文件注意：\n      - 该操作采用异步执行\n      - 回调函数有两个参数，分别是err和data\n      - 如果读取文件时没有指定编码，那么返回的将是原生的二进制数据；如果指定了编码，那么会根据指定的编码返回对应的字符串数据。\n  - 注意：\n    +  文件操作中的`./`表示当前路径，相对的是执行node命令的路径，而不是当前被执行的`*.js`文件的实际路径。\n    +  `__dirname`才永远表示当前被执行的`*.js`文件的实际路径\n    +  `/`表示根目录, 读取文件或写入文件的时候写`/`目录，在Windows下相当于当前磁盘根目录（比如：c:\\ 或 d:\\ 或 e:\\  等，在Mac下相当于硬盘根目录 `/`）\n  \n```javascript\n// --------------------------------- 写文件 -----------------------------\n// 加载文件操作模块\nvar fs = require('fs');\n\n// 创建要写入的文件的字符串\nvar msg = '你好，世界！你好 Node.js.';\n// 执行文件写入操作\nfs.writeFile('./data.txt', msg, 'utf8', function (err) {\n  console.log('---' + err + '----');\n  // /判断是否写入文件出错了\n  if (err) {\n    console.log('文件写入出错了，详细错误信息：' + err);\n    // 把错误继续向上抛出\n    throw err;\n  } else {\n    console.log('文件写入成功！');\n  }\n});\n\n\n// --------------------------------- 读文件 -----------------------------\n// 加载文件操作模块\nvar fs = require('fs');\n\n// 执行文件读取操作\nfs.readFile('./data.txt', 'utf8', function (err, data) {\n  // 输出err  和 data\n  // console.log('error: ' + err);\n  // console.log('data: ' + data);\n\n  if (err) {\n    console.log('文件读取出错啦！详细信息: ' + err);\n  } else {\n    console.log('文件读取成功，以下是文件内容：');\n    console.log(data);\n  }\n});\n```\n\n\n\n\n\n4. 案例4：创建目录案例\n\n```javascript\n// 创建一个文件夹\n\n\n// 加载文件操作模块\nvar fs = require('fs');\n\n// 创建一个目录\nfs.mkdir('./test-mkdir', function (err) {\n  if (err) {\n    console.log('创建目录出错了，详细信息如下：');\n    console.log(err);\n  } else {\n    console.log('目录创建成功！');\n  }\n\n});\n\n\n\n// ----------------------------------------------------------\n\n// 加载文件操作模块\nvar fs = require('fs');\n\n// 1. 创建 '01-教学资料' 目录\nfs.mkdir('./01-教学资料', function (err) {\n\n  if (err) {\n    throw err;\n  }\n\n  // 1.1 创建 '01-笔记大纲' 目录\n  fs.mkdir('./01-教学资料/01-笔记大纲');\n\n  // 1.2 创建 '02-作业任务' 目录\n  fs.mkdir('./01-教学资料/02-作业任务');\n\n  // 1.3 创建 '03-素材资料' 目录\n  fs.mkdir('./01-教学资料/03-素材资料');\n\n  // 1.4 创建 '04-随堂笔记' 目录\n  fs.mkdir('./01-教学资料/04-随堂笔记');\n\n});\n\n\n\n// 2. 创建 '02-源代码' 目录\nfs.mkdir('./02-源代码', function (err) {\n\n  if (err) {\n    throw err;\n  }\n\n  // 2.1 创建 '预习代码'目录\n  fs.mkdir('./02-源代码/预习代码');\n\n  // 2.2 创建 '课堂代码'目录\n  fs.mkdir('./02-源代码/课堂代码');\n});\n\n\n// 3. 创建 '03-视频' 目录\nfs.mkdir('./03-视频');\n\n\n// 4. 创建 '04-其他资料' 目录\nfs.mkdir('./04-其他资料');\n\n```\n\n\n\n#### 注意：\n1. 异步操作无法通过 try-catch 来捕获异常，要通过判断 error 来判断是否出错。\n2. 同步操作可以通过 try-catch 来捕获异常。\n3. 不要使用 `fs.exists(path, callback)` 来判断文件是否存在，直接判断 error 即可\n4. 文件操作时的路径问题\n  - 在读写文件的时候 './' 表示的是当前执行node命令的那个路径，不是被执行的js文件的路径\n  - __dirname, 表示的永远是\"当前被执行的js的目录\"\n  - __filename, 表示的是\"被执行的js的文件名（含路径)\"\n5. error-first 介绍(错误优先)\n\n\n\n\n#### 案例5：通过 node.js 编写 http 服务程序 - 极简版本\n\n步骤：\n1. 加载http模块\n2. 创建http服务\n3. 为http服务对象添加 request 事件处理程序\n4. 开启http服务监听，准备接收客户端请求\n\n\n注意：\n1. 浏览器显示可能是乱码，所以可以通过 `res.setHeader('Content-Type', 'text/plain; charset=utf-8');`设置浏览器显示时所使用的编码。\n\n2. Chrome 浏览器默认无法手动设置编码，需要安装\"Set Character Encoding\"扩展。\n\n3. 演示一下设置`Content-Type=text/html` 和 `Content-Type=text/plain`的区别。\n\n\n参考代码：\n\n```javascript\n\n// 1. 加载http模块\nvar http = require('http');\n\n// 2. 创建http服务\nvar server = http.createServer();\n\n// 3. 开始监听'request'事件\n// 详细解释一下request对象和response对象\nserver.on('request', function (req, res) {\n  // body...\n  console.log('有人请求了~~');\n});\n\n// 4. 启动服务，开始监听\nserver.listen(9000, function () {\n  console.log('服务已经启动，请访问： http://localhost:9000');\n});\n\n```\n\n\n\n\n#### 案例6：通过 node.js 编写 http 服务程序 - 根据不同请求作出不同响应\n\n##### 说明：\n- 根据不同请求，显示index页面、login页面、register页面、list页面。\n- 请求 / 或 /index\n- 请求 /login\n- 请求 /register\n- 请求 /list\n\n\n##### 参考代码\n\n```javascript\n// 加载http模块\nvar http = require('http');\n\n// 创建http server\nvar server = http.createServer(function (req, res) {\n  // body...\n  console.log(req.url);\n\n\n  if (req.url === '/' || req.url === '/index') {\n    // 表示请求网站首页\n    res.end('这是 index.html');\n\n  } else if (req.url === '/login') {\n    // 表示请求登录页面\n    res.end('这是 login.html');\n\n  } else if (req.url === '/register') {\n    // 表示请求注册页面\n    res.end('这是 register.html');\n    \n  } else if (req.url === '/list') {\n    // 表示请求列表页面\n    res.end('这是 list.html');\n    \n  } else {\n    // 表示请求的页面不存在\n    res.writeHead(404, 'Not Found');\n    res.end('Sorry, page not found.');\n  }\n});\n\n// 监听端口的网络请求\nserver.listen(9000, function () {\n  console.log('http://localhost:9000');\n});\n\n```\n\n\n\n\n#### 案例7：通过 node.js 编写 http 服务程序 - 通过读取静态 HTML 文件来响应用户请求\n\n步骤：\n1. 创建index.html、login.html、register.html、list.html、404.html文件。 \n2. 演示通过读取最简单的 HTML 文件来响应用户。\n3. 演示通过读取\"具有引入外部CSS样式表\"的HTML文件来响应用户。\n4. 演示通过读取\"具有img标签\"的HTML文件来响应用户。\n\n\n注意：\n- 1、注意在发送不同类型的文件时，要设置好对应的`Content-Type`\n  + [Content-Type参考 OSChina](http://tool.oschina.net/commons)\n  + [Content-Type参考 MDN](https://developer.mozilla.org/en-US/docs/Web/HTTP/Basics_of_HTTP/MIME_types)\n\n- 2、HTTP状态码参考\n  + [w3org参考](https://www.w3.org/Protocols/rfc2616/rfc2616-sec10.html)\n  + [w3schools参考](https://www.w3schools.com/tags/ref_httpmessages.asp)\n\n- 3、在html页面中写相对路径'./' 和 绝对路径 '/'的含义 。\n  + 网页中的这个路径主要是告诉浏览器向哪个地址发起请求用的\n  + './' 表示本次请求从相对于当前页面的请求路径（即服务器返回当前页面时的请求路径）开始\n  + '/' 表示请求从根目录开始\n\n补充知识点：\n1. path 模块的 join() 方法\n\n\n参考代码：\n\n```javascript\n\n// 1. 加载 http 模块\nvar http = require('http');\n// 加载文件操作模块\nvar fs = require('fs');\n// 加载path模块，这个模块主要用来处理各种路径。\nvar path = require('path');\n\n\n\n// 2. 创建http server\nvar server = http.createServer(function (req, res) {\n  // 1. 获取用户请求的URL\n  var url = req.url.toLowerCase();\n\n  // 2. 根据用户的不同请求，做出不同响应\n  if (url === '/' || url === '/index') {\n    // 读取index.html文件，把该文件响应给用户\n    fs.readFile(path.join(__dirname, 'index.html'), function (err, data) {\n      if (err) {\n        throw err;\n      }\n      res.writeHead(200, 'OK', {\n        'Content-Type': 'text/html; charset=utf-8'\n      });\n      // res.setHeader('Content-Type', 'text/html; charset=utf-8');\n      res.end(data);\n\n    });\n  } else if (url === '/login') {\n    // 读取login.html文件，把该文件响应给用户\n    fs.readFile(path.join(__dirname, 'login.html'), function (err, data) {\n      if (err) {\n        throw err;\n      }\n      res.writeHead(200, 'OK', {\n        'Content-Type': 'text/html; charset=utf-8'\n      });\n      // res.setHeader('Content-Type', 'text/html; charset=utf-8');\n      res.end(data);\n\n    });\n  } else if (url === '/register') {\n    // 读取register.html文件，把该文件响应给用户\n    fs.readFile(path.join(__dirname, 'register.html'), function (err, data) {\n      if (err) {\n        throw err;\n      }\n      res.writeHead(200, 'OK', {\n        'Content-Type': 'text/html; charset=utf-8'\n      });\n      // res.setHeader('Content-Type', 'text/html; charset=utf-8');\n      res.end(data);\n\n    });\n  } else if (url === '/404') {\n    // 读取register.html文件，把该文件响应给用户\n    fs.readFile(path.join(__dirname, '404.html'), function (err, data) {\n      if (err) {\n        throw err;\n      }\n      res.writeHead(200, 'OK', {\n        'Content-Type': 'text/html; charset=utf-8'\n      });\n      // res.setHeader('Content-Type', 'text/html; charset=utf-8');\n      res.end(data);\n\n    });\n  }\n  \n});\n\n\n\n// 3. 启动服务\nserver.listen(9090, function () {\n  // body...\n  console.log('please visit: http://localhost:9090');\n});\n\n\n\n```\n\n\n\n#### 案例8：模拟 Apache 实现静态资源服务器\n\n步骤：\n- 单独创建一个目录来实现，比如：创建一个\"07-Apache\"的目录。\n- 在该目录下新建 `public` 目录，假设该目录为静态资源目录。\n- 根据用户请求的路径在 public 目录下寻找对应路径下的资源。\n- 如果找到了，那么将该资源返回给用户，如果没找到则返回404错误。\n- 通过 mime 模块设置不同类型资源的Content-Type\n- 实现完毕后把素材中的'An Ocean of Sky' 和 'Hacker News'分别拷贝到静态资源目录下, 测试是否成功\n\n其他：\n- 介绍 NPM\n- 介绍 mime 第三方模块\n  + `npm install mime`\n  + 在代码中直接 `var mime = require('mime')`\n\n\n参考代码：\n\n```javascript\n\n// 1. 加载对应模块\n// 1.1 加载http模块\nvar http = require('http');\n// 1.2 加载path模块，方便路径拼接\nvar path = require('path');\n// 1.3 加载文件读取模块\nvar fs = require('fs');\n// 1.4 加载判断文件MIME类型的模块\nvar mime = require('mime');\n\n\n// 2. 创建http server\nvar server = http.createServer();\n\n\n// 3. 监听用户request事件\nserver.on('request', function (req, res) {\n  // 1. 获取用户的请求路径, 并转换为小写\n  var url = req.url.toLowerCase();\n\n  // 判断如果请求的路径是 '/' 那么等价于 '/index.html'\n  url = (url === '/') ? '/index.html' : url;\n\n  // 2. 根据用户请求的url路径, 去public目录下查找对应的静态资源文件。找到后读取该文件，并将结果返回给用户\n  // 2.1 根据用户请求的url拼接本地资源文件的路径\n  var filePath = path.join(__dirname, 'public', url);\n\n  // 2.2 根据请求的文件路径设置Content-Type\n  res.setHeader('Content-Type', mime.lookup(url));\n\n  // 2.2 根据路径去读取对应的文件\n  // 【注意】读取文件前无需判断文件是否已经存在，而是在读取文件的回调函数中根据error的错误信息来判断读取文件是否成功以及发生的错误\n  fs.readFile(filePath, function (err, data) {\n    // 判断是否有错误\n    if (err) {\n\n      if (err.code === 'ENOENT') { // 判断是否是请求的文件是否不存在\n\n        res.setHeader('Content-Type', 'text/html; charset=utf8');\n        res.statusCode = 404;\n        res.statusMessage = 'Not Found';\n        res.end('<h1>请求的资源不存在！</h1>');\n\n      } else if (err.code === 'EACCES') { // 判断文件是否有访问权限\n\n        res.setHeader('Content-Type', 'text/html; charset=utf8');\n        res.statusCode = 403;\n        res.statusMessage = 'Forbidden';\n        res.end('<h1>Permission denied！</h1>');\n      } else {\n\n        throw err;  \n      }\n\n    } else {\n      \n      // 如果没有错误则将读取到的文件返回给用户\n      res.statusCode = 200;\n      res.statusMessage = 'OK';\n      res.end(data);\n    }\n  })\n});\n\n\n\n// 4. 启动服务\nserver.listen(9000, function () {\n  // body...\n  console.log('server is running, please visit: http://localhost:9000');\n});\n\n```\n\n\n\n### Common System Errors - 常见错误号\n\n- EACCES (Permission denied)\n  + An attempt was made to access a file in a way forbidden by its file access permissions.\n  + 访问被拒绝\n\n- EADDRINUSE (Address already in use)\n  + An attempt to bind a server (net, http, or https) to a local address failed due to another server on the local system already occupying that address.\n  + 地址正在被使用（比如：端口号备占用）\n\n- EEXIST (File exists)\n  + An existing file was the target of an operation that required that the target not exist.\n  + 文件已经存在\n\n- EISDIR (Is a directory)\n  + An operation expected a file, but the given pathname was a directory.\n  + 给定的路径是目录\n\n- ENOENT (No such file or directory)\n  + Commonly raised by fs operations to indicate that a component of the specified pathname does not exist -- no entity (file or directory) could be found by the given path.\n  + 文件 或 目录不存在\n\n- ENOTDIR (Not a directory)\n  + A component of the given pathname existed, but was not a directory as expected. Commonly raised by fs.readdir.\n  + 给定的路径不是目录\n\n\n\n### 同步文件操作 和 异步文件操作\n\n- `fs.readFile(file[, options], callback)`\n- `fs.readFileSync(file[, options])`\n\n\n\n\n### 通过设置 http 响应报文头实现弹框下载功能\n\n1. 设置 `Content-Type: application/octet-stream`\n2. 设置 `Content-Disposition: attachment; filename=demo.txt`\n\n\n## 七、node.js 学习资源\n\n### 1. 图书\n  + 《深入浅出Node.js》 作者：朴灵\n  + 《node.js 实战 中国程序员6》\n\n### 2. 网站资源\n  + [CNODE社区](https://cnodejs.org/) \n  + [Node.js 简易教程](http://www.runoob.com/nodejs/nodejs-tutorial.html)\n  + [Node入门](https://www.nodebeginner.org/index-zh-cn.html)\n  + [Node.js包教不包会](https://github.com/ppker/node-lessons)\n  + [CNODE-新手入门](http://cnodejs.org/getstart)\n  + 其他参考链接\n    - [Node.js 究竟是什么？](https://www.ibm.com/developerworks/cn/opensource/os-nodejs/index.html)\n    - [Node.js是用来做什么的？](https://www.zhihu.com/question/33578075)\n    - [什么是 node.js](http://www.infoq.com/cn/articles/what-is-nodejs)\n\n### 3. Node.js 使用场景 & 实战\n  - [Node.js雪球实战半年谈](http://www.undozen.com/slides/xueqiu2012a/#21.1)\n  - [雪球上的 Node.js](http://mengxy.net/slides/nodejs-at-xueqiu/)\n  - [国内有哪些网站使用了 Node.js](https://cnodejs.org/topic/50613e6601d0b8014822b6b9)\n  - [Node.js & Uber](https://www.joyent.com/blog/node-js-office-hours-curtis-chambers-uber)\n  - [Node.js 的优势和劣势](https://www.zhihu.com/question/19653241)\n  - [node.js的15个应用场景](http://www.devstore.cn/essay/essayInfo/2199.html)\n  - [How to decide when to use Node.js?](https://github.com/simongong/js-stackoverflow-highest-votes/blob/master/questions1-10/when-to-use-nodejs.md)\n  - [优缺点及适用场景讨论](http://www.cnblogs.com/sysuys/p/3460614.html)\n  - [Node.js 发展前景如何？适用于哪些场景？](https://www.zhihu.com/question/19587881)\n  - [Node.js企业开发 一应用场景](http://n.thepana.com/2014/01/06/node-yingyong-changjing/)\n  - [10个最佳Node.js企业应用案例：从Uber到LinkedIn](http://www.sohu.com/a/150175393_465223)\n  - [极速Node.js：来自LinkedIn的10个性能提升秘籍](http://blog.jobbole.com/40135/)\n  - 为分布式应用做中转\n  - 前后端团队融合，节省成本\n  - Node.js 简单高效\n  - Node.js 是给前端用的，后端复杂的业务逻辑肯定不会用 Node.js\n\n\n## 八、Node Version Manager（Node 版本管理器）\n\n\n\n### nvm (Linux、Unix、OS X)\n  + https://github.com/creationix/nvm\n  + 产用命令：\n    - nvm install node （安装最新版本的node）\n    - nvm use node （使用指定版本的node）\n\n\n### nvm-windows (Windows)\n  + https://github.com/coreybutler/nvm-windows\n  + 常用命令：\n    - nvm version\n    - nvm install latest\n    - nvm install 版本号\n    - nvm uninstall 版本号\n    - nvm list\n    - nvm use 版本号\n\n\n\n\n## 九、Buffer \n\n思考：Buffer 类型产生的原因？主要用来解决什么问题？\n\n看一下什么是 Buffer? 什么是 Stream?\n\n\n### 一、类型介绍\n\n1. JavaScript 语言没有读取或操作二进制数据流的机制。\n2. Node.js 中引入了 Buffer 类型使我们可以操作 TCP流 或 文件流。\n3. Buffer 类型的对象类似于整数数组，但 Buffer 的大小是固定的、且在 V8 堆外分配物理内存。 Buffer 的大小在被创建时确定，且无法调整。（ buf.length 是固定的，不允许修改 ）\n4. Buffer 是全局的，所以使用的时候无需 require() 的方式来加载\n\n\n### 二、如何创建一个 Buffer 对象\n\n\n常见的 API 介绍\n\n1. 创建一个 Buffer 对象\n\n```javascript\n// 1. 通过 Buffer.from() 创建一个 Buffer 对象\n\n// 1.1 通过一个字节数组来创建一个 Buffer 对象\nvar array = [0x68, 0x65, 0x6c, 0x6c, 0x6f, 0x20, 0xe4, 0xb8, 0x96, 0xe7, 0x95, 0x8c];\nvar buf = Buffer.from(array);\nconsole.log(buf.toString('utf8'));\n\n// 1.2 通过字符串来创建一个 Buffer 对象\n// Buffer.from(string[, encoding])\nvar buf = Buffer.from('你好世界！ Hello World!~');\nconsole.log(buf);\nconsole.log(buf.toString());\n\n```\n\n\n2. 拼接多个 Buffer 对象为一个对象\n\n```javascript\n// Buffer.concat(list[, totalLength])\nvar bufferList = [];\nvar buf = Buffer.concat(bufferList);\n```\n\n\n3. 获取字符串对应的字节个数\n\n```javascript\n// Buffer.byteLength(string[, encoding])\n\nvar len = Buffer.byteLength('你好世界Hello', 'utf8');\nconsole.log(len);\n```\n\n4. 判断一个对象是否是 Buffer 类型对象\n\n```javascript\n// Buffer.isBuffer(obj)\n// obj <Object>\n// Returns: <boolean>\n// Returns true if obj is a Buffer, false otherwise.\n\n```\n\n\n5. 获取 Buffer 中的某个字节\n\n```javascript\n// 根据索引获取 Buffer 中的某个字节（byte、octet）\n// buf[index]\n\n```\n\n\n6、获取 Buffer 对象中的字节的个数\n\n```javascript\n// buf.length\n// 注意：length 属性不可修改\n```\n\n\n\n7. 已过时的 API\n\n```javascript\n// 以下 API 已全部过时\nnew Buffer(array)\nnew Buffer(buffer)\nnew Buffer(arrayBuffer[, byteOffset [, length]])\nnew Buffer(size)\nnew Buffer(string[, encoding])\n\n```\n\n\n\n\n### 三、Buffer 对象与编码\n\nNode.js 目前支持的编码如下：\n\n1. ascii\n2. utf8\n3. utf16le\n  - ucs2 是 utf16le 的别名 \n4. base64\n5. latin1\n  - binary 是 latin1 的别名\n6. hex\n  - 用两位 16 进制来表示每个字节\n\n\n\n示例代码：\n\n```javascript\n\nvar buf = Buffer.from('你好世界，Hello World！', 'utf8');\n\nconsole.log(buf.toString('hex'));\nconsole.log(buf.toString('base64'));\nconsole.log(buf.toString('utf8'));\n```\n\n\n\n\n\n### 四、思考：为什么会有 Buffer 类型？\n\n1. Buffer 使用来临时存储一些数据（二进制数据）\n2. 当我们要把一大块数据从一个地方传输到另外一个地方的时候可以通过 Buffer 对象进行传输\n3. 通过 Buffer 每次可以传输小部分数据，直到所有数据都传输完毕。\n\n\n\n### 五、补充\n\n1. Stream\n\n2. Writable Stream\n  - 允许 node.js 写数据到流中\n\n3. Readable Stream\n  - 允许 node.js 从流中读取数据\n\n\n\n## 十、day1总结\n### 1、浏览器的基本概念\n- 浏览器组成部分\n- 浏览器的渲染引擎工作原理\n- 浏览器访问服务器全过程\n- dns解析过程\n\n\n### 2、node.js 介绍\n- node.js 是什么\n- node.js 特点\n- node.js 能做什么\n\n\n### 3、通过 node.js 编写代码\n- REPL\n- 通过创建 .js 文件来编写代码\n\n\n### 4、通过 fs 模块进行文件读写\n- __dirname、__filename\n- path 模块，用来对文件路径进行操作（path.join() 拼接路径）\n\n\n### 5、全局模块\n- process\n- console\n\n### 6、创建 http 服务\n- 加载 http 模块\n- 创建 http 服务\n- 监听 request 事件\n- 开启服务\n\n\n### 7、在用户的 request 事件中，必须要结束请求 。 res.end() \n\n\n### 8、服务器端通过用户不同请求（req.url），做出不同响应","tags":["Nodejs笔记"],"categories":["Nodejs"]},{"title":"闭包/沙箱/递归/深浅拷贝","url":"%2F2018%2F09%2F19%2F2018-09-19%2F","content":"\n# 重点\n闭包\n闭包的概念:函数A中,有一个函数B,函数B中可以访问函数A中定义的变量或者是数据,此时形成了闭包(这句话暂时不严谨)\n闭包的模式:函数模式的闭包,对象模式的闭包\n闭包的作用:缓存数据,延长作用域链\n闭包的优点和缺点:缓存数据\n闭包的应用\n//总结:如果想要缓存数据,就把这个数据放在外层的函数和里层的函数的中间位置\n//闭包的作用:缓存数据.优点也是缺陷,没有及时的释放\n//局部变量是在函数中,函数使用结束后,局部变量就会被自动的释放\n//闭包后,里面的局部变量的使用作用域链就会被延长\n\n\n沙箱\n沙箱:环境,黑盒,在一个虚拟的环境中模拟真实世界,做实验,实验结果和真实世界的结果是一样,但是不会影响真实世界\n\n递归\n递归:函数中调用函数自己,此时就是递归,递归一定要有结束的条件\n\n浅拷贝:拷贝就是复制,就相当于把一个对象中的所有的内容,复制一份给另一个对象,直接复制,或者说,就是把一个对象的地址给了另一个对象,他们指向相同,两个对象之间有共同的属性或者方法,都可以使用\n\n深拷贝:拷贝还是复制,深:把一个对象中所有的属性或者方法,一个一个的找到.并且在另一个对象中开辟相应的空间,一个一个的存储到另一个对象中\n\n\n案例：\n闭包\n```\n<!DOCTYPE html>\n<html lang=\"en\">\n<head>\n  <meta charset=\"UTF-8\">\n  <title>对自己狠点</title>\n  <style>\n    ul {\n      list-style-type: none;\n    }\n\n    li {\n      float: left;\n      margin-left: 10px;\n    }\n\n    img {\n      width: 200px;\n      height: 180px;\n    }\n\n    input {\n      margin-left: 30%;\n    }\n  </style>\n  <script>\n    //$永远都是24k纯帅的十八岁的杨哥$\n  </script>\n</head>\n<body>\n<ul>\n  <li><img src=\"images/ly.jpg\" alt=\"\"><br/><input type=\"button\" value=\"赞(1)\"></li>\n  <li><img src=\"images/lyml.jpg\" alt=\"\"><br/><input type=\"button\" value=\"赞(1)\"></li>\n  <li><img src=\"images/fj.jpg\" alt=\"\"><br/><input type=\"button\" value=\"赞(1)\"></li>\n  <li><img src=\"images/bd.jpg\" alt=\"\"><br/><input type=\"button\" value=\"赞(1)\"></li>\n</ul>\n<script>\n\n  //获取所有的按钮\n  //根据标签名字获取元素\n  function my$(tagName) {\n    return document.getElementsByTagName(tagName);\n  }\n  //闭包缓存数据\n  function getValue() {\n    var value=2;\n    return function () {\n      //每一次点击的时候,都应该改变当前点击按钮的value值\n      this.value=\"赞(\"+(value++)+\")\";\n    }\n  }\n  //获取所有的按钮\n  var btnObjs=my$(\"input\");\n  //循环遍历每个按钮,注册点击事件\n  for(var i=0;i<btnObjs.length;i++){\n    //注册事件\n    btnObjs[i].onclick=getValue();\n  }\n\n\n\n\n//  var btnObjs=my$(\"input\");\n//  var value=1;\n//  //循环遍历每个按钮\n//  for(var i=0;i<btnObjs.length;i++){\n//\n//    //为每个按钮注册点击事件\n//    btnObjs[i].onclick=function () {\n//      console.log(\"哈哈\");\n//      this.value=\"赞(\"+(value++)+\")\";\n//    };\n//  }\n\n\n</script>\n</body>\n</html>\n```\n\n沙箱\n```\n<!DOCTYPE html>\n<html lang=\"en\">\n<head>\n  <meta charset=\"UTF-8\">\n  <title>title</title>\n\n</head>\n<body>\n<div>这是div</div>\n<div>这是div</div>\n<div>这是div</div>\n<p>这是p</p>\n<p>这是p</p>\n<p>这是p</p>\n<script>\n  var getTag = 10;\n  var dvObjs = 20;\n  var pObjs = 30;\n  (function () {\n    //根据标签名字获取元素\n    function getTag(tagName) {\n      return document.getElementsByTagName(tagName)\n    }\n    //获取所有的div\n    var dvObjs = getTag(\"div\");\n    for (var i = 0; i < dvObjs.length; i++) {\n      dvObjs[i].style.border = \"2px solid pink\";\n    }\n    //获取所有的p\n    var pObjs = getTag(\"p\");\n    for (var i = 0; i < pObjs.length; i++) {\n      pObjs[i].style.border = \"2px solid pink\";\n    }\n  }());\n  console.log(getTag);\n  console.log(dvObjs);\n  console.log(pObjs);\n</script>\n</body>\n</html>\n```\n\n\n递归\n```\n<!DOCTYPE html>\n<html lang=\"en\">\n<head>\n  <meta charset=\"UTF-8\">\n  <title>title</title>\n  <script>\n    //求n个数字的和,5 计算1+2+3+4+5\n//    var sum=0;\n//    for(var i=1;i<=5;i++){\n//      sum+=i;\n//    }\n//    console.log(sum);\n\n\n    //递归实现:求n个数字的和   n=5--->  5+4+3+2+1\n\n    //函数的声明\n//    function getSum(x) {\n//      if(x==1){\n//        return 1;\n//      }\n//      return x+getSum(x-1);\n//    }\n//    //函数的调用\n//    console.log(getSum(5));\n\n    /*\n    *\n    * 执行过程:\n    * 代码执行getSum(5)--->进入函数,此时的x是5,执行的是5+getSum(4),此时代码等待\n    * 此时5+getSum(4),代码先不进行计算,先执行getSum(4),进入函数,执行的是4+getSum(3),等待, 先执行的是getSum(3),进入函数,执行3+getSum(2),等待,先执行getSum(2),进入函数,执行 2+getSum(1);等待, 先执行getSum(1),执行的是x==1的判断,return 1,所以,\n    * 此时getSum(1)的结果是1,开始向外走出去\n    * 2+getSum(1) 此时的结果是:2+1\n    * 执行:\n    * getSum(2)---->2+1\n    * 3+getSum(2) 此时的结果是3+2+1\n    * 4+getSum(3) 此时的结果是4+3+2+1\n    * 5+getSum(4) 此时的结果是5+4+3+2+1\n    *\n    * 结果:15\n    *\n    *\n    *\n    * */\n\n\n\n    //递归案例:求一个数字各个位数上的数字的和:  123   --->6 ---1+2+3\n    //523\n    function getEverySum(x) {\n      if(x<10){\n        return x;\n      }\n      //获取的是这个数字的个位数\n      return x%10+getEverySum(parseInt(x/10));\n    }\n   console.log(getEverySum(1364));//5\n\n\n\n    //递归案例:求斐波那契数列\n\n    function getFib(x) {\n      if(x==1||x==2){\n        return 1\n      }\n      return getFib(x-1)+getFib(x-2);\n    }\n    console.log(getFib(12));\n\n\n\n\n  </script>\n</head>\n<body>\n\n\n</body>\n</html>\n```\n\n\n浅考备\n```\nvar obj1={\n      age:10,\n      sex:\"男\",\n      car:[\"奔驰\",\"宝马\",\"特斯拉\",\"奥拓\"]\n    };\n    //另一个对象\n    var obj2={};\n    \n    //写一个函数,作用:把一个对象的属性复制到另一个对象中,浅拷贝\n    //把a对象中的所有的属性复制到对象b中\n    function extend(a,b) {\n      for(var key in a){\n        b[key]=a[key];\n      }\n    }\n    extend(obj1,obj2);\n    console.dir(obj2);//开始的时候这个对象是空对象\n    console.dir(obj1);//有属性\n```\n\n深拷贝\n```\nvar obj1={\n      age:10,\n      sex:\"男\",\n      car:[\"奔驰\",\"宝马\",\"特斯拉\",\"奥拓\"],\n      dog:{\n        name:\"大黄\",\n        age:5,\n        color:\"黑白色\"\n      }\n    };\n\n    var obj2={};//空对象\n    //通过函数实现,把对象a中的所有的数据深拷贝到对象b中\n    function extend(a,b) {\n      for(var key in a){\n        //先获取a对象中每个属性的值\n        var item=a[key];\n        //判断这个属性的值是不是数组\n        if(item instanceof Array){\n          //如果是数组,那么在b对象中添加一个新的属性,并且这个属性值也是数组\n          b[key]=[];\n          //调用这个方法，把a对象中这个数组的属性值一个一个的复制到b对象的这个数组属性中\n          extend(item,b[key]);\n        }else if(item instanceof Object){//判断这个值是不是对象类型的\n     //如果是对象类型的,那么在b对象中添加一个属性,是一个空对象\n          b[key]={};\n          //再次调用这个函数,把a对象中的属性对象的值一个一个的复制到b对象的这个属性对象中\n          extend(item,b[key]);\n        }else{\n          //如果值是普通的数据,直接复制到b对象的这个属性中\n          b[key]=item;\n        }\n      }\n    }\n\n    extend(obj1,obj2);\n    console.dir(obj1);\n    console.dir(obj2);\n```","tags":["js笔记"],"categories":["JavaScript"]},{"title":"面向对象案例表格排序--函数做返回值","url":"%2F2018%2F09%2F12%2F2018-09-12(2)%2F","content":"\n# 重点\n1.数组的创建，添加，调用，输出\n2.构造函数，原型方法添加，函数的调用\n3.函数做返回值做数组的排序\n4.元素的创建，添加，调用，获取，清除\n5.innerHtml的使用\n\n# 效果\n<img src=\"/bgpxal/bgpx1.png\">\n<img src=\"/bgpxal/bgpx2.png\">\n<img src=\"/bgpxal/bgpx3.png\">\n\n# 素材\n<img src=\"/bgpxal/bianxingjingang.jpg\">\n<img src=\"/bgpxal/qiannvyouhun.jpg\">\n<img src=\"/bgpxal/gongfu.jpg\">\n<img src=\"/bgpxal/suduyujiqing.jpg\">\n<img src=\"/bgpxal/dahuaxiyou.jpg\">\n\n# 案例代码\n### Css (外部引入) style.css\n```Css\n/*\n * @Author: yhf \n * @Date: 2018-09-12 20:43:23 \n * @Last Modified by: yhf\n * @Last Modified time: 2018-09-12 23:23:48\n */\n/* 初始化页面 */\n* {\n    padding: 0;\n    margin: 0;\n}\n/* 表格 */\ntable {\n    position: relative;\n    top: 100px;\n    left: 100px;\n    width: 800px;\n}\n/* 表头 */\nth {\n    height: 50px;\n    cursor: pointer;\n}\n/* 表格 */\ntd {\n    text-align: center;\n}\n\n```\n\n### Html\n```Html\n<table border=\"1\" cellspacing=\"0\" cellpadding=\"0\"></table>\n```\n\n### Js(外部引入) index.js\n```JavaScript\n/*\n * @Author: yhf \n * @Date: 2018-09-12 20:47:37 \n * @Last Modified by: yhf\n * @Last Modified time: 2018-09-12 23:16:19\n */\n\n// 参数数组\nlet movieArray = [{\n    img: \"bianxingjingang.jpg\",\n    movieName: \"变形金刚\",\n    star: \"希亚·拉伯夫\",\n    direct: \"迈克尔·贝\",\n    type: \"d动作\",\n    time: \"2007年07月03日\"\n},\n{\n    img: \"qiannvyouhun.jpg\",\n    movieName: \"倩女幽魂\",\n    star: \"张国荣\",\n    direct: \"程小东\",\n    type: \"j惊悚\",\n    time: \"1987年7月18日\"\n},\n{\n    img: \"gongfu.jpg\",\n    movieName: \"功夫\",\n    star: \"周星驰\",\n    direct: \"周星驰\",\n    type: \"x喜剧\",\n    time: \"2014年12月24日\"\n},\n{\n    img: \"suduyujiqing.jpg\",\n    movieName: \"速度与激情\",\n    star: \"保罗·沃克\",\n    direct: \"罗伯·科恩\",\n    type: \"d动作\",\n    time: \"2015年4月3日\"\n},\n{\n    img: \"dahuaxiyou.jpg\",\n    movieName: \"大话西游\",\n    star: \"周星驰\",\n    direct: \"刘镇伟\",\n    type: \"a爱情\",\n    time: \"2014年10月24日\"\n}\n];\n// 获取元素的函数\nfunction $my(date) {\n    return document.querySelector(date);\n};\n\n// 创建构造函数\nfunction Person(date) {\n    this.table = $my(date);\n};\n\n// 添加原型方法 初始化\nPerson.prototype.init = function (date) {\n    // 初始化表头\n    this.initThead();\n    // 初始化表格内容\n    this.initTbody(date);\n\n    this.initPx(date)\n};\n\n// 添加原型方法 添加表头\nPerson.prototype.initThead = function () {\n    //先创建一个thead标签,创建tr-th,立刻加入到table中\n    var thead = document.createElement(\"thead\");\n    // 给表头添加资料\n    thead.innerHTML = '<tr><th falg=\"img\">影片</th><th falg=\"star\">主演</th><th falg=\"direct\">导演</th><th falg=\"type\">类别</th><th falg=\"time\">上映时间</th></tr>';\n    // 添加到表格\n    this.table.appendChild(thead);\n};\n\n// 添加原型方法 添加表格内容 刷新页面\nPerson.prototype.initTbody = function (date) {\n    // 刷新页面，判断有id等于tob的时候删除\n    if ($my(\"#tob\")) {\n        this.table.removeChild($my(\"#tob\"));\n    }\n    // 创建tbody\n    let tbody = document.createElement(\"tbody\");\n    // 添加id\n    tbody.id = \"tob\";\n    // 装数据的数组\n    let arr=[];\n    for (let i = 0; i < date.length; i++) {\n        const ele = date[i];\n        // 把数组的数据拿出来添加到新的数组\n        arr.push(\"<tr><td><img src=images/\" + ele.img + \"> <br />\" + ele.movieName + \"</td><td>\" + ele.star + \"</td><td>\" + ele.direct + \"</td><td>\" + ele.type + \"</td><td>\" + ele.time + \"</td></tr>\");\n    }\n    // 把新数组中的元素拿出来添加到tbody  join是控制连接符 “”是空，表示没有链接符\n    tbody.innerHTML = arr.join(\"\");\n    // 把tbody添加到表格里面\n    this.table.appendChild(tbody);\n};\n\n// 添加原型方法 数组排序\nPerson.prototype.Szpx = function (date,attr) {\n    function fn(attr) {\n        return function (obj1,obj2) {\n            if (obj1[attr] > obj2[attr]) {\n                return 1;\n            } else if (obj1[attr] == obj2[attr]) {\n                return 0;\n            } else {\n                return -1;\n            }\n        }\n    }\n    let ff = fn(attr);\n    date.sort(ff);\n}\n\n// 添加原型方法 获取点击元素判断排序值\nPerson.prototype.initPx = function (date) {\n    // 获取每一个表头的th\n    let ths = document.querySelectorAll(\"th\");\n    // 定义this\n    let that = this;\n    // 循环添加点击事件\n    for (let i = 0; i < ths.length; i++) {\n        const ele = ths[i];\n        ele.onclick = function () {\n            // 获取定义值\n            let falg = this.getAttribute(\"falg\");\n            // 调用数组排序方法\n            that.Szpx(date,falg);\n            // 调用刷新页面\n            that.initTbody(date);\n        }\n    }\n}\n\n// new实例对象\nlet pr = new Person(\"table\");\n// 调用实例的原型方法\npr.init(movieArray);\n```","tags":["js笔记/案例"],"categories":["JavaScript"]},{"title":"apply/call/bind/函数","url":"%2F2018%2F09%2F12%2F2018-09-12%2F","content":"\n# 重点：\n\napply/call 都可以改变 this 的指向\napply 和 call 的使用方法\napply 和 call 方法中如果没有传入参数,或者是传入的是 null,那么调用该方法的函数对象中的 this 就是默认的 window\n\n- apply 的使用语法\n- 函数名字.apply(对象,[参数 1,参数 2,...]);\n- 方法名字.apply(对象,[参数 1,参数 2,...]);\n- call 的使用语法\n- 函数名字.call(对象,参数 1,参数 2,...);\n- 方法名字.call(对象,参数 1,参数 2,...);\n- 作用:改变 this 的指向\n- 不同的地方:参数传递的方式是不一样的\n- 只要是想使用别的对象的方法,并且希望这个方法是当前对象的,那么就可以使用 apply 或者是 call 的方法改变 this 的指向\n\nbind\nbind 是用来复制一份\n使用的语法:\n\n- 函数名字.bind(对象,参数 1,参数 2,...);---->返回值是复制之后的这个函数\n- 方法名字.bind(对象,参数 1,参数 2,...);---->返回值是复制之后的这个方法\n\n函数\n函数的值\n函数中有一个 name 属性----->函数的名字,name 属性是只读的,不能修改\n函数中有一个 arguments 属性--->实参的个数\n函数中有一个 length 属性---->函数定义的时候形参的个数\n函数中有一个 caller 属性---->调用(f1 函数在 f2 函数中调用的,所以,此时调用者就是 f2)\n函数作为参数的时候,如果是命名函数,那么只传入命名函数的名字,没有括号\n函数可作为返回值\n\n# 练习代码\n\n### apply/call\n\n```JavaScript\n//案例一\nfunction Person(age,sex) {\n    this.age=age;\n    this.sex=sex;\n}\n//通过原型添加方法\nPerson.prototype.sayHi=function (x,y) {\n    console.log(\"您好啊:\"+this.sex);\n    return 1000;\n};\nvar per=new Person(10,\"男\");\nper.sayHi();\n\nconsole.log(\"==============\");\nfunction Student(name,sex) {\n    this.name=name;\n    this.sex=sex;\n}\nvar stu=new Student(\"小明\",\"人妖\");\nvar r1=per.sayHi.apply(stu,[10,20]);\nvar r2=per.sayHi.call(stu,10,20);\n\nconsole.log(r1);\nconsole.log(r2);\n\n//案例二\nfunction f1() {\n    console.log(this+\":====>调用了\");\n}\n//f1是函数,f1也是对象\nconsole.dir(f1);\n//对象调用方法,说明,该对象中有这个方法\nf1.apply();\nf1.call();\nconsole.log(f1.__proto__==Function.prototype);\n//所有的函数都是Function的实例对象\nconsole.log(Function.prototype);//ƒ () { [native code] }\nconsole.dir(Function);\n//apply和call方法实际上并不在函数这个实例对象中,而是在Function的prototype中\n\n\nfunction Person() {\n    this.sayHi=function () {\n    console.log(\"您好\");\n    };\n}\nPerson.prototype.eat=function () {\n    console.log(\"吃\");\n};\n\nvar per=new Person();\nper.sayHi();\nper.eat();\nconsole.dir(per);\n```\n\n### bind\n\n```JavaScript\n//通过对象,调用方法,产生随机数\n\nfunction ShowRandom() {\n    //1-10的随机数\n    this.number=parseInt(Math.random()*10+1);\n}\n//添加原型方法\nShowRandom.prototype.show1=function () {\n    //改变了定时器中的this的指向了,本来应该是window,现在是实例对象了\n    window.setInterval(this.show2.bind(this),1000);\n};\n//添加原型方法\nShowRandom.prototype.show2=function () {\n    //显示随机数--\n    console.log(this.number);\n};\n//实例对象\nvar sr=new ShowRandom();\n//调用方法,输出随机数字\n//调用这个方法一次,可以不停的产生随机数字\nsr.show1();\n```\n\n### 函数\n\n### 函数作为参数使用\n\n```JavaScript\n//案例一\n   function f1(fn) {\n     console.log(\"f1的函数\");\n     fn();//此时fn当成是一个函数来使用的\n   }\n   //fn是参数,最后作为函数使用了,函数是可以作为参数使用\n   //传入匿名函数\n   f1(function () {\n     console.log(\"我是匿名函数\");\n   });\n   //命名函数\n   function f2() {\n     console.log(\"f2的函数\");\n   }\n   f1(f2);\n   //函数作为参数的时候,如果是命名函数,那么只传入命名函数的名字,没有括号\n\n\n//案例二\n   function f1(fn) {\n     setInterval(function () {\n       console.log(\"定时器开始\");\n       fn();\n       console.log(\"定时器结束\");\n     },1000);\n   }\n\n   f1(function () {\n     console.log(\"好困啊,好累啊,就是想睡觉\");\n   });\n\n   //案例三\n     //    var arr = [1, 100, 20, 200, 40, 50, 120, 10];\n    //    //排序\n    //    arr.sort();\n    //    console.log(arr);\n\n    var arr = [1, 100, 20, 200, 40, 50, 120, 10];\n    //排序---函数作为参数使用,匿名函数作为sort方法的参数使用,那么此时的匿名函数中有两个参数,\n    arr.sort(function (obj1,obj2) {\n      if(obj1>obj2){\n        return -1;\n      }else if(obj1==obj2){\n        return 0;\n      }else{\n        return 1;\n      }\n    });\n    console.log(arr);\n\n    var arr1=[\"acdef\",\"abcd\",\"bcedf\",\"bced\"];\n    arr1.sort(function (a,b) {\n      if(a>b){\n        return 1;\n      }else if(a==b){\n        return 0;\n      }else{\n        return -1;\n      }\n    });\n    console.log(arr1);\n```\n\n#### 函数作为返回值使用\n\n```JavaScript\n//案例一\n//判断这个对象和传入的类型是不是同一个类型\n    function getFunc(type) {\n      return function (obj) {\n        return Object.prototype.toString.call(obj) === type;\n      }\n    }\n\n    var ff = getFunc(\"[object Array]\");\n    var result = ff([10, 20, 30]);\n    console.log(result);\n\n    var ff1 = getFunc(\"[object Object]\");\n    var dt = new Date();\n    var result1 = ff1(dt);\n    console.log(result1);\n\n    //案例二\n        //排序,每个文件都有名字，大小,时间,都可以按照某个属性的值进行排序\n\n    //三部电影,电影有名字,大小,上映时间\n    function File(name, size, time) {\n      this.name = name;//电影名字\n      this.size = size;//电影大小\n      this.time = time;//电影的上映时间\n    }\n    var f1 = new File(\"jack.avi\", \"400M\", \"1997-12-12\");\n    var f2 = new File(\"tom.avi\", \"200M\", \"2017-12-12\");\n    var f3 = new File(\"xiaosu.avi\", \"800M\", \"2010-12-12\");\n    var arr = [f1, f2, f3];\n\n    function fn(attr) {\n      //函数作为返回值\n      return function getSort(obj1, obj2) {\n        if (obj1[attr] > obj2[attr]) {\n          return 1;\n        } else if (obj1[attr] == obj2[attr]) {\n          return 0;\n        } else {\n          return -1;\n        }\n      }\n    }\n\n    var ff = fn(\"name\");\n\n    //函数作为参数\n    arr.sort(ff);\n    for (var i = 0; i < arr.length; i++) {\n      console.log(arr[i].name + \"====>\" + arr[i].size + \"===>\" + arr[i].time);\n    }\n```\n","tags":["js笔记"],"categories":["JavaScript"]},{"title":"原型与继承，数组调用函数","url":"%2F2018%2F09%2F11%2F2018-09-11%2F","content":"\n### 数组的函数调用\n```JavaScript\n //数组可以存储任何类型的数据\n\n    var arr=[\n        function () {\n          console.log(\"十一假期快乐\");\n        },\n        function () {\n          console.log(\"十一假期开心\");\n        }\n        ,\n        function () {\n          console.log(\"十一假期健康\");\n        }\n        ,\n        function () {\n          console.log(\"十一假期安全\");\n        },\n        function () {\n          console.log(\"十一假期如意\");\n        }\n    ];\n    //回调函数:函数作为参数使用\n    arr.forEach(function (ele) {\n      ele();\n    });\n```\n\n\n## 继承\n    //面向对象特性:封装,继承,多态\n\n    //继承,类与类之间的关系,面向对象的语言的继承是为了多态服务的,\n    //js不是面向对象的语言,但是可以模拟面向对象.模拟继承.为了节省内存空间\n\n    //继承:\n    /*\n    * 原型作用: 数据共享 ，目的是:为了节省内存空间,\n    * 原型作用: 继承  目的是:为了节省内存空间\n    *\n    * 原型继承:改变原型的指向\n    * 借用构造函数继承:主要解决属性的问题\n    * 组合继承:原型继承+借用构造函数继承\n    * 既能解决属性问题,又能解决方法问题\n    * 拷贝继承:就是把对象中需要共享的属性或者犯法,直接遍历的方式复制到另一个对象中\n    * */\n\n### 原型与原型链\n\n实例对象中**proto**是原型,浏览器使用的\n构造函数中的 prototype 是原型,程序员使用的\n原型链:是一种关系,实例对象和原型对象之间的关系,关系是通过原型(**proto**)来联系的\n\n### 原型的指向是可以改变的\n\n实例对象中有**proto**原型\n构造函数中有 prototype 原型\nprototype 是对象\n所以,prototype 这个对象中也有**proto**,那么指向了哪里\n实例对象中的**proto**指向的是构造函数的 prototype\n所以,prototype 这个对象中**proto**指向的应该是某个构造函数的原型 prototype\n\nPerson 的 prototype 中的**proto**的指向\nconsole.log(Person.prototype.**proto**);\n\nper 实例对象的**proto**------->Person.prototype 的**proto**---->Object.prototype 的**proto**是 null\n\n```JavaScript\n //人的构造函数\n    function Person(age) {\n      this.age=10;\n    }\n    //人的原型对象方法\n    Person.prototype.eat=function () {\n      console.log(\"人的吃\");\n    };\n    //学生的构造函数\n    function Student() {\n\n    }\n    Student.prototype.sayHi=function () {\n      console.log(\"嗨,小苏你好帅哦\");\n    };\n    //学生的原型,指向了一个人的实例对象\n    Student.prototype=new Person(10);\n    var stu=new Student();\n    stu.eat();\n    stu.sayHi();\n```\n\n### 如何在原型改变了指向，中添加方法和访问\n\n如果原型指向改变了,那么就应该在原型改变指向之后添加原型方法\n\n```JavaScript\nfunction Person(age) {\n      this.age = age;\n    }\n\n    //指向改变了\n    Person.prototype = {\n      eat: function () {\n        console.log(\"吃\");\n      }\n    };\n    //先添加原型方法\n    Person.prototype.sayHi = function () {\n      console.log(\"您好\");\n    };\n    var per = new Person(10);\n    per.sayHi();\n```\n\n### 实例对象的属性和原型对象中的属性重名问题\n\n因为JS是一门动态类型的语言,对象没有什么,只要点了,那么这个对象就有了这个东西,没有这个属性,只要对象.属性名字,对象就有这个属性了,但是,该属性没有赋值,所以,结果是:undefined\n实例对象访问这个属性,应该先从实例对象中找,找到了就直接用，找不到就去指向的原型对象中找,找到了就使用,找不到呢?=====\n通过实例对象能否改变原型对象中的属性值?不能\n就想改变原型对象中属性的值,怎么办?直接通过原型对象.属性=值;可以改变\n```JavaScript\nfunction Person(age,sex) {\n      this.age=age;\n      this.sex=sex;\n    }\n    Person.prototype.sex=\"女\";\n    var per=new Person(10,\"男\");\n    console.log(per.sex);\n    //因为JS是一门动态类型的语言,对象没有什么,只要点了,那么这个对象就有了这个东西,没有这个属性,只要对象.属性名字,对象就有这个属性了,但是,该属性没有赋值,所以,结果是:undefined\n    console.log(per.fdsfdsfsdfds);\n\n\n    console.log(fsdfdsfds);\n```\n\n# 继承\n    *\n    * 面向对象编程思想:根据需求,分析对象,找到对象有什么特征和行为,通过代码的方式来实现需求,要想实现这个需求,就要创建对象,要想创建对象,就应该显示有构造函数,然后通过构造函数来创建对象.,通过对象调用属性和方法来实现相应的功能及需求,即可\n    * 首先JS不是一门面向对象的语言,JS是一门基于对象的语言,那么为什么学习js还要学习面向对象,因为面向对象的思想适合于人的想法,编程起来会更加的方便,及后期的维护....\n    * 面向对象的编程语言中有类(class)的概念(也是一种特殊的数据类型),但是JS不是面向对象的语言,所以,JS中没有类(class),但是JS可以模拟面向对象的思想编程,JS中会通过构造函数来模拟类的概念(class)\n    *\n    *\n    *\n    *\n    * 小明,小红，小丽，小白，小花 都是人\n    * 共同的特征和行为\n    * 特征--->属性\n    * 行为---方法\n    *\n    * 面向对象的特性:封装,继承,多态\n    *\n    * 封装:就是包装\n    * 一个值存储在一个变量中--封装\n    * 一坨重复代码放在一个函数中--封装\n    * 一系列的属性放在一个对象中--封装\n    * 一些功能类似的函数(方法)放在一个对象中--封装\n    * 好多相类似的对象放在一个js文件中---封装\n    *\n    * 继承: 首先继承是一种关系,类(class)与类之间的关系,JS中没有类,但是可以通过构造函数模拟类,然后通过原型来实现继承\n    * 继承也是为了数据共享,js中的继承也是为了实现数据共享\n    *\n    * 原型作用之一:数据共享,节省内存空间\n    * 原型作用之二:为了实现继承\n    *\n    * 继承是一种关系:\n    *\n    * 父类级别与类级别的关系\n    *\n    * 例子:\n    *\n    * 小杨--->人, 姓名, 有钱, 帅, 有功夫--降龙十八掌\n    * 小杨子-->人,\n    * 继承:\n    * 姓氏----继承\n    * 外表----继承\n    * 财产----继承\n    * 功夫---继承\n    *\n    *\n    * 人:  姓名, 性别, 年龄 ,吃饭, 睡觉\n    *\n    * 学生类别: 姓名, 性别, 年龄 ,吃饭, 睡觉 学习行为\n    * 老师类别: 姓名, 性别, 年龄 ,吃饭, 睡觉 工资,教学行为\n    * 程序员: 姓名, 性别, 年龄 ,吃饭, 睡觉 工资, 敲代码\n    * 司机类别: 姓名, 性别, 年龄 ,吃饭, 睡觉 工资 开车\n    *\n    *\n    * 动物类别:  体重， 颜色, 吃\n    * 狗类别:   体重,颜色, 吃, 咬人\n    * 二哈类别: 体重,颜色, 吃, 咬人 逗主人开心,汪汪,你好帅\n    *\n    *\n    *\n    *\n    *\n    *\n    * 多态:一个对象有不同的行为,或者是同一个行为针对不同的对象,产生不同的结果,要想有多态,就要先有继承,js中可以模拟多态,但是不会去使用,也不会模拟,\n    *\n    *\n    *\n    *\n    *\n    * */\n\n```JavaScript\n    //例子:\n    //人,都有姓名,性别,年龄, 吃饭, 睡觉, 玩\n    //学生,都有姓名,性别,年龄, 成绩, 吃饭, 睡觉, 玩 ,学习的行为\n\n\n    //js中通过原型来实现继承\n\n    function Person(name,age,sex) {\n      this.name=name;\n      this.sex=sex;\n      this.age=age;\n    }\n    Person.prototype.eat=function () {\n      console.log(\"人可以吃东西\");\n    };\n    Person.prototype.sleep=function () {\n      console.log(\"人在睡觉\");\n    };\n    Person.prototype.play=function () {\n      console.log(\"生活就是不一样的玩法而已\");\n    };\n\n\n    function Student(score) {\n      this.score=score;\n    }\n    //改变学生的原型的指向即可==========>学生和人已经发生关系\n    Student.prototype=new Person(\"小明\",10,\"男\");\n    Student.prototype.study=function () {\n      console.log(\"学习很累很累的哦.\");\n    };\n\n    //相同的代码太多,造成了代码的冗余(重复的代码)\n\n    var stu=new Student(100);\n    console.log(stu.name);\n    console.log(stu.age);\n    console.log(stu.sex);\n    stu.eat();\n    stu.play();\n    stu.sleep();\n    console.log(\"下面的是学生对象中自己有的\");\n    console.log(stu.score);\n    stu.study();\n\n\n    // 例子2\n    //动物有名字,有体重,有吃东西的行为\n    //小狗有名字,有体重,有毛色, 有吃东西的行为,还有咬人的行为\n    //哈士奇名字,有体重,有毛色,性别, 有吃东西的行为,还有咬人的行为,逗主人开心的行为\n\n\n    //动物的构造韩素\n    function Animal(name,weight) {\n      this.name=name;\n      this.weight=weight;\n    }\n    //动物的原型的方法\n    Animal.prototype.eat=function () {\n      console.log(\"天天吃东西,就是吃\");\n    };\n\n    //狗的构造函数\n    function Dog(color) {\n      this.color=color;\n    }\n    Dog.prototype=new Animal(\"哮天犬\",\"50kg\");\n    Dog.prototype.bitePerson=function () {\n      console.log(\"哼~汪汪~咬死你\");\n    };\n\n    //哈士奇\n    function ErHa(sex) {\n      this.sex=sex;\n    }\n    ErHa.prototype=new Dog(\"黑白色\");\n    ErHa.prototype.playHost=function () {\n      console.log(\"哈哈~要坏衣服,要坏桌子,拆家..嘎嘎...好玩,开心不,惊喜不,意外不\");\n    };\n    var erHa=new ErHa(\"雄性\");\n    console.log(erHa.name,erHa.weight,erHa.color);\n    erHa.eat();\n    erHa.bitePerson();\n    erHa.playHost();\n```\n\n\n### 借用构造函数\n//为了数据共享,改变原型指向,做到了继承---通过改变原型指向实现的继承\n//缺陷:因为改变原型指向的同时实现继承,直接初始化了属性，继承过来的属性的值都是一样的了,所以,这就是问题\n//只能重新调用对象的属性进行重新赋值,\n\n\n//解决方案:继承的时候,不用改变原型的指向,直接调用父级的构造函数的方式来为属性赋值就可以了------借用构造函数:把要继承的父级的构造函数拿过来,使用一下就可以了\n\n\n\n//借用构造函数:构造函数名字.call(当前对象,属性,属性,属性....);\n//解决了属性继承,并且值不重复的问题\n//缺陷:父级类别中的方法不能继承\n\n```JavaScript\nfunction Person(name, age, sex, weight) {\n      this.name = name;\n      this.age = age;\n      this.sex = sex;\n      this.weight = weight;\n    }\n    Person.prototype.sayHi = function () {\n      console.log(\"您好\");\n    };\n    function Student(name,age,sex,weight,score) {\n      //借用构造函数\n      Person.call(this,name,age,sex,weight);\n      this.score = score;\n    }\n    var stu1 = new Student(\"小明\",10,\"男\",\"10kg\",\"100\");\n    console.log(stu1.name, stu1.age, stu1.sex, stu1.weight, stu1.score);\n\n    var stu2 = new Student(\"小红\",20,\"女\",\"20kg\",\"120\");\n    console.log(stu2.name, stu2.age, stu2.sex, stu2.weight, stu2.score);\n\n    var stu3 = new Student(\"小丽\",30,\"妖\",\"30kg\",\"130\");\n    console.log(stu3.name, stu3.age, stu3.sex, stu3.weight, stu3.score);\n```\n\n### 组合继承\n\n```JavaScript\n//原型实现继承\n    //借用构造函数实现继承\n    //组合继承:原型继承+借用构造函数继承\n\n    function Person(name,age,sex) {\n      this.name=name;\n      this.age=age;\n      this.sex=sex;\n    }\n    Person.prototype.sayHi=function () {\n      console.log(\"阿涅哈斯诶呦\");\n    };\n    function Student(name,age,sex,score) {\n      //借用构造函数:属性值重复的问题\n      Person.call(this,name,age,sex);\n      this.score=score;\n    }\n    //改变原型指向----继承\n    Student.prototype=new Person();//不传值\n    Student.prototype.eat=function () {\n      console.log(\"吃东西\");\n    };\n    var stu=new Student(\"小黑\",20,\"男\",\"100分\");\n    console.log(stu.name,stu.age,stu.sex,stu.score);\n    stu.sayHi();\n    stu.eat();\n    var stu2=new Student(\"小黑黑\",200,\"男人\",\"1010分\");\n    console.log(stu2.name,stu2.age,stu2.sex,stu2.score);\n    stu2.sayHi();\n    stu2.eat();\n\n    //属性和方法都被继承了\n```\n\n### 拷贝继承\n拷贝继承；把一个对象中的属性或者方法直接复制到另一个对象中\n```JavaScript\nfunction Person() {\n    }\n    Person.prototype.age=10;\n    Person.prototype.sex=\"男\";\n    Person.prototype.height=100;\n    Person.prototype.play=function () {\n      console.log(\"玩的好开心\");\n    };\n    var obj2={};\n    //Person的构造中有原型prototype,prototype就是一个对象,那么里面,age,sex,height,play都是该对象中的属性或者方法\n\n    for(var key in Person.prototype){\n      obj2[key]=Person.prototype[key];\n    }\n    console.dir(obj2);\n    obj2.play();\n```\n\n","tags":["js笔记"],"categories":["JavaScript"]},{"title":"原生贪吃蛇升级版","url":"%2F2018%2F09%2F10%2F2018-09-10%2F","content":"\n# 贪吃蛇升级版\n重点：\n1.添加了开始，停止，结束按钮，改变了启动和结束的方式，修复了游戏结束后不可以再次玩游戏\n2.改变了蛇的身体颜色，变成随机颜色\n3.修改了蛇头方向都变化不可以返回\n4.添加了蛇头碰到身体结束游戏\n5.初始化游戏\n6.添加了wasd键盘控制事件，添加了鼠标拖拽改变方向\n\n# 效果\n<img src=\"/tcsal/sjtc1.png\">\n<img src=\"/tcsal/sjtc2.png\">\n\n# 案例代码\n### Css 外部引入style.css\n```Css\n* {\n    padding: 0;\n    margin: 0;\n}\n/* 蛇身体的长度和分数 */\n.df,\n.ssc {\n    position: absolute;\n    top: 0px;\n    left: 400px;\n}\n.ssc {\n    left: 250px;\n}\n/* 蛇地图的样式 */\n.wrap {\n    width: 800px;\n    height: 600px;\n    position: relative;\n    top: 20px;\n    left: 20px;\n    background-color: #ccc;\n}\n/* 游戏说明 */\n.yx {\n    position: absolute;\n    margin: 40px;\n    font-size: 20px;\n    color: pink;\n}\n```\n### Html\n```Html\n<input type=\"button\" value=\"开始游戏\">\n    <input type=\"button\" value=\"停止游戏\">\n    <input type=\"button\" value=\"结束游戏\">\n    <div class=\"ssc\">\n        蛇身的长度: 0\n    </div>\n    <div class=\"df\">\n        得分: 0\n    </div>\n    <!-- 蛇地图 -->\n    <div class=\"wrap\">\n\n    </div>\n    <div class=\"yx\">\n        <h3>游戏说明：</h3>\n        玩法：上下左右键控制，w上s下a左d右控制，鼠标上下左右拖拽<br>\n        点击开始游戏，开启游戏<br>\n        点击停止游戏，暂停游戏，点击开始游戏恢复继续玩<br>\n        点击结束游戏，停止游戏要点击开启游戏重新开始<br>\n    </div>\n```\n\n### Js\n#### 外部引入食物 Food.js\n```JavaScript\n/*\n * @Author: yhf \n * @Date: 2018-09-10 12:36:12 \n * @Last Modified by: yhf\n * @Last Modified time: 2018-09-11 09:08:11\n */\n(function () {\n    // 存放食物的数组\n    var elements = [];\n\n    // 食物方法\n    function Food(x, y, height, width, color) {\n        // 食物的横纵坐标\n        this.x = x;\n        this.y = y;\n        // 食物的宽高\n        this.height = height || 20;\n        this.width = width || 20;\n        // 食物的颜色\n        this.color = color || \"yellow\";\n    };\n\n    // 删除食物函数\n    function remove() {\n        var i = elements.length - 1;\n        for (; i >= 0; i--) {\n            var ele = elements[i];\n            // 从wrap删除\n            ele.parentNode.removeChild(ele);\n            elements.splice(i, 1);\n        }\n    };\n\n\n    // 添加原型方法--初始化食物\n    Food.prototype.init = function (wrap) {\n        // 删除食物\n        remove();\n        // 创建食物\n        var div = document.createElement(\"div\");\n        // 添加食物到地图\n        wrap.appendChild(div);\n        // 设置食物div的样式\n        // div脱离文档流\n        div.style.position = \"absolute\";\n        // div宽高\n        div.style.width = this.width + \"px\";\n        div.style.height = this.height + \"px\";\n        // div颜色\n        div.style.backgroundColor = this.color;\n\n        // 随机食物横纵坐标\n        this.x = parseInt(Math.random() * (wrap.offsetWidth / this.width)) * this.width;\n        this.y = parseInt(Math.random() * (wrap.offsetHeight / this.height)) * this.height;\n        // 设置食物横纵坐标\n        div.style.left = this.x + \"px\";\n        div.style.top = this.y + \"px\";\n        // 把新建的数组添加到食物数组中\n        elements.push(div);\n    };\n\n    // 添加原型方法清空食物\n    Food.prototype.empty = function () {\n        remove();\n        elements.splice(0, elements.length);\n    }\n\n    // 把食物暴露给window，外界可以调用\n    window.Food = Food;\n}());\n```\n#### 外部引入蛇 Snake.js\n```JavaScript\n/*\n * @Author: yhf \n * @Date: 2018-09-10 14:28:55 \n * @Last Modified by: yhf\n * @Last Modified time: 2018-09-11 08:28:31\n */\n(function () {\n    // 存放蛇数组·\n    var elements = [];\n\n    // 蛇的函数\n    function Snake(width, height, direction) {\n        // 计算得分\n        this.df = 0;\n        // 判断是否碰到身体\n        this.stfh = true;\n        // 蛇的宽高\n        this.width = width || 20;\n        this.height = height || 20;\n        // 蛇身体\n        this.body = [{\n            x: 3,\n            y: 2,\n            color: \"red\"\n        }, {\n            x: 2,\n            y: 2,\n            color: \"#00FFFF\"\n        }, {\n            x: 1,\n            y: 2,\n            color: \"pink\"\n        }];\n        // 颜色\n        this.col = [\"#F0F8FF\", \"#FAEBD7\", \"#F0F8FF\", \"#FAEBD7\", \"#00FFFF\", \"#7FFFD4\", \"#F0FFFF\", \"#F5F5DC\", \"#FFE4C4\", \"#000000\", \"#FFEBCD\", \"#0000FF\", \"#8A2BE2\", \"#A52A2A\", \"#DEB887\", \"#5F9EA0\", \"#7FFF00\", \"#D2691E\", \"#FF7F50\", \"#6495ED\", \"#FFF8DC\", \"#DC143C\", \"#00FFFF\", \"#00008B\", \"#008B8B\", \"#B8860B\", \"#A9A9A9\", \"#006400\", \"#BDB76B\", \"#8B008B\", \"#556B2F\", \"#FF8C00\", \"#9932CC\", \"#8B0000\", \"#E9967A\", \"#8FBC8F\", \"#483D8B\", \"#2F4F4F\", \"#00CED1\", \"#9400D3\", \"#FF1493\", \"#00BFFF\", \"#696969\", \"#1E90FF\", \"#D19275\", \"#B22222\", \"#FFFAF0\", \"#228B22\", \"#FF00FF\", \"#DCDCDC\", \"#F8F8FF\", \"#FFD700\", \"#DAA520\", \"#808080\", \"#008000\", \"#ADFF2F\", \"#F0FFF0\", \"#FF69B4\", \"#CD5C5C\", \"#4B0082\", \"#FFFFF0\", \"#F0E68C\", \"#E6E6FA\", \"#FFF0F5\", \"#7CFC00\", \"#FFFACD\", \"#ADD8E6\", \"#F08080\", \"#E0FFFF\", \"#FAFAD2\", \"#D3D3D3\", \"#90EE90\", \"#FFB6C1\", \"#FFA07A\", \"#20B2AA\", \"#87CEFA\", \"#8470FF\", \"#778899\", \"#B0C4DE\", \"#FFFFE0\", \"#00FF00\", \"#32CD32\", \"#FAF0E6\", \"#FF00FF\", \"#800000\", \"#66CDAA\", \"#0000CD\", \"#BA55D3\", \"#9370D8\", \"#3CB371\", \"#7B68EE\", \"#00FA9A\", \"#48D1CC\", \"#C71585\", \"#191970\", \"#F5FFFA\", \"#FFE4E1\", \"#FFE4B5\", \"#FFDEAD\", \"#000080\", \"#FDF5E6\", \"#808000\", \"#6B8E23\", \"#FFA500\", \"#FF4500\", \"#DA70D6\", \"#EEE8AA\", \"#98FB98\", \"#AFEEEE\", \"#D87093\", \"#FFEFD5\", \"#FFDAB9\", \"#CD853F\", \"#FFC0CB\", \"#DDA0DD\", \"#B0E0E6\", \"#800080\", \"#FF0000\", \"#BC8F8F\", \"#4169E1\", \"#8B4513\", \"#FA8072\", \"#F4A460\", \"#2E8B57\", \"#FFF5EE\", \"#A0522D\", \"#C0C0C0\", \"#87CEEB\", \"#6A5ACD\", \"#708090\", \"#FFFAFA\", \"#00FF7F\", \"#4682B4\", \"#D2B48C\", \"#008080\", \"#D8BFD8\", \"#FF6347\", \"#40E0D0\", \"#EE82EE\", \"#D02090\", \"#F5DEB3\", \"#FFFFFF\", \"#F5F5F5\", \"#FFFF00\", \"#9ACD32\"];\n        // 蛇的行走方向\n        this.direction = direction || \"right\";\n    };\n\n\n    // 添加原型初始化蛇\n    Snake.prototype.init = function (wrap) {\n\n        // 初始化删除蛇\n        remove();\n\n        // 循环创建蛇的身体\n        for (let i = 0; i < this.body.length; i++) {\n            // 初始化this.body[i]\n            const ele = this.body[i];\n            // 创建蛇\n            var div = document.createElement(\"div\");\n            // 添加蛇到地图\n            wrap.appendChild(div);\n            // div脱离文档流\n            div.style.position = \"absolute\";\n            // div宽高\n            div.style.width = this.width + \"px\";\n            div.style.height = this.height + \"px\";\n            // div颜色\n            div.style.backgroundColor = ele.color;\n            // div横纵坐标\n            var x = this.width * ele.x;\n            var y = this.height * ele.y;\n            // 设置横纵坐标\n            div.style.left = x + \"px\";\n            div.style.top = y + \"px\";\n            // 添加到数组\n            elements.push(div);\n        }\n    };\n\n    // 添加原型方法--蛇动起来\n    Snake.prototype.move = function (food, wrap) {\n\n        // 获取到蛇身体数据\n        var i = this.body.length - 1;\n        // 循环设置身体的变动位置，把蛇头以外，从蛇尾开始把前一位的数据获取到\n        for (; i > 0; i--) {\n            this.body[i].x = this.body[i - 1].x;\n            this.body[i].y = this.body[i - 1].y;\n        }\n        // 判断键盘到移动改变蛇头到移动方向\n        switch (this.direction) {\n            case \"right\":\n                this.body[0].x += 1;\n                break;\n            case \"left\":\n                this.body[0].x -= 1;\n                break;\n            case \"top\":\n                this.body[0].y -= 1;\n                break;\n            case \"bottom\":\n                this.body[0].y += 1;\n                break;\n        }\n\n        // 获取蛇头到横纵坐标\n        var sx = this.body[0].x * this.width;\n        var sy = this.body[0].y * this.height;\n        // 判断蛇头是否吃到了食物\n        if (sx == food.x && sy == food.y) {\n            var sjys = parseInt(Math.random() * this.col.length);\n            for (let i = 0; i < this.col.length; i++) {\n                const ele = this.col[i];\n                if (i == sjys) {\n                    this.df++;\n                    // 获取到蛇的尾巴\n                    var list = this.body[this.body.length - 1];\n                    // 再蛇身体添加多一个身体值\n                    this.body.push({\n                        x: list.x,\n                        y: list.y,\n                        color: ele\n                    });\n                    // 删除食物\n                    food.init(wrap);\n                }\n            }\n            // this.df++;\n            // // 获取到蛇的尾巴\n            // var list = this.body[this.body.length - 1];\n            // // 再蛇身体添加多一个身体值\n            // this.body.push({\n            //     x: list.x,\n            //     y: list.y,\n            //     color: list.color\n            // });\n            // // 删除食物\n            // food.init(wrap);\n        }\n\n        // 循环获取身体位置，把蛇头以外，从蛇尾开始把前一位的数据获取到，判断蛇头是否碰到身体，判断生死\n        for (var i = this.body.length - 1; i > 0; i--) {\n            if (this.body[i].x * this.width == sx && sy == this.body[i].y * this.height) {\n                this.stfh = false;\n            }\n        }\n\n    };\n\n    // 添加原型方法清空蛇\n    Snake.prototype.empty = function () {\n        remove();\n        elements.splice(0, elements.length);\n        this.body = [{\n            x: 3,\n            y: 2,\n            color: \"red\"\n        }, {\n            x: 2,\n            y: 2,\n            color: \"pink\"\n        }, {\n            x: 1,\n            y: 2,\n            color: \"pink\"\n        }];\n        this.direction = \"right\";\n    };\n\n    // 删除蛇函数\n    function remove() {\n        var i = elements.length - 1;\n        for (; i >= 0; i--) {\n            var ele = elements[i];\n            // 从wrap删除\n            ele.parentNode.removeChild(ele);\n            // 删除数组中到蛇身\n            elements.splice(i, 1);\n        }\n    };\n\n\n    // 把Snake暴露给window\n    window.Snake = Snake;\n}());\n```\n#### 外部引入初始化 Game.js\n```JavaScript\n/*\n * @Author: yhf \n * @Date: 2018-09-10 15:37:16 \n * @Last Modified by: yhf\n * @Last Modified time: 2018-09-11 08:30:40\n */\n(function () {\n    // 定义this\n    var _this = null;\n    // 键盘方向\n    var key = 39;\n    // 定时器\n    var time = null;\n\n    // 启动游戏构造函数\n    function Game() {\n        // 初始化食物\n        this.food = new Food();\n        // 初始化蛇\n        this.snake = new Snake();\n        // 定义画布\n        this.wrap = wrap;\n        // 定义this\n        _this = this;\n        // 判断是否点击开始\n        this.bol = false;\n    };\n\n    // 添加原型启动游戏函数\n    Game.prototype.init = function () {\n        // 初始化食物\n        this.food.init(this.wrap);\n        // 初始化蛇\n        this.snake.init(this.wrap);\n        // 蛇动\n        this.runSnake();\n        // 键盘事件\n        this.keyDown();\n    };\n\n    // 添加原型蛇动起来\n    Game.prototype.runSnake = function () {\n        // 添加名为time的定时器\n        time = setInterval(function () {\n            // 蛇动函数\n            this.snake.move(this.food, this.wrap);\n            // 初始化蛇\n            this.snake.init(this.wrap);\n\n            // 最大横纵坐标 --蛇最大可以移动的距离\n            var maxX = wrap.offsetWidth / this.snake.width;\n            var maxY = wrap.offsetHeight / this.snake.height;\n\n            // 获取蛇头部横纵坐标\n            var hearX = this.snake.body[0].x;\n            var hearY = this.snake.body[0].y;\n\n            // 判断是否碰到墙壁结束游戏\n            if (hearX < 0 || hearX >= maxX) {\n                // 清空函数\n                this.empty();\n            };\n            if (hearY < 0 || hearY >= maxY) {\n                // 清空函数\n                this.empty();\n            };\n            if (!this.snake.stfh) {\n                this.snake.stfh = true;\n                this.empty();\n            }\n            df.innerHTML = \"得分：\" + this.snake.df;\n            ssc.innerHTML = \"蛇身长度：\" + (this.snake.df + 2);\n\n        }.bind(_this), 150);\n    };\n\n    // 添加原型方法--键盘和鼠标事件\n    Game.prototype.keyDown = function () {\n        // document.addEventListener(\"keydown\", function (e) {\n        //     // 此时this应该是keydown的事件对象\n        //     // 所以this就是document\n        //     // 获取按键值\n        //     keyfn(this, e.keyCode);\n        // }.bind(_this), false);\n\n        // 鼠标拖动控制方向\n        var dx = 0; //鼠标点击时的位置\n        var dy = 0; //鼠标点击时的位置\n        var sx = 0; //鼠标当前位置\n        var sy = 0; //鼠标当前位置\n        // 给页面添加监听事件\n        // 监听鼠标按下\n        document.onmousedown = function (e) {\n            bol = true;\n            dx = e.clientX;\n            dy = e.clientY;\n            e.preventDefault();\n        }\n        // 鼠标移动\n        document.onmousemove = function (e) {\n            sx = e.clientX;\n            sy = e.clientY;\n        }\n        // 鼠标抬起\n        document.onmouseup = function () {\n            console.log(sx - dx)\n            if (Math.abs(sx - dx) > Math.abs(sy - dy)) {\n                if (sx - dx > 0) {\n                    keyfn(this, 39);\n                } else {\n                    keyfn(this, 37);\n                }\n            } else if (sy - dy == 0) {\n                keyfn(this, 39);\n            } else {\n                if (sy - dy > 0) {\n                    keyfn(this, 40);\n                } else {\n                    keyfn(this, 38);\n                }\n            }\n        }.bind(_this);\n\n        // 给页面添加监听事件\n        // 监听键盘按下\n        document.onkeydown = function (e) {\n            keyfn(this, e.keyCode);\n        }.bind(_this);\n    };\n    // 添加原型-停止游戏\n    Game.prototype.stop = function () {\n        clearInterval(time);\n        this.bol = false;\n    }\n\n    // 添加原型-结束游戏\n    Game.prototype.empty = function () {\n        alert(\"游戏结束\");\n        // 结束定时器\n        clearInterval(time);\n        // 删除清空蛇\n        this.snake.empty();\n        // 删除清空食物\n        this.food.empty();\n        // 结束游戏\n        this.bol = false;\n        // 清空得分\n        this.snake.df = 0;\n    }\n\n    // 键盘事件\n    function keyfn(_this, keys) {\n        switch (keys) {\n            case 37: //左\n                if (key != 39 && key != 68) {\n                    _this.snake.direction = \"left\";\n                    key = keys;\n                }\n                break;\n\n            case 38: //上\n                if (key != 40 && key != 83) {\n                    _this.snake.direction = \"top\";\n                    key = keys;\n                }\n                break;\n\n            case 39: //右\n                if (key != 37 && key != 65) {\n                    _this.snake.direction = \"right\";\n                    key = keys;\n                }\n                break;\n\n            case 40: //下\n                if (key != 38 && key != 87) {\n                    _this.snake.direction = \"bottom\";\n                    key = keys;\n                }\n                break;\n\n\n            case 65: //左\n                if (key != 39 && key != 68) {\n                    _this.snake.direction = \"left\";\n                    key = keys;\n                }\n                break;\n\n            case 87: //上\n                if (key != 40 && key != 83) {\n                    _this.snake.direction = \"top\";\n                    key = keys;\n                }\n                break;\n\n            case 68: //右\n                if (key != 37 && key != 65) {\n                    _this.snake.direction = \"right\";\n                    key = keys;\n                }\n                break;\n\n            case 83: //下\n                if (key != 38 && key != 87) {\n                    _this.snake.direction = \"bottom\";\n                    key = keys;\n                }\n                break;\n        }\n    }\n\n    // 把Game暴露给window\n    window.Game = Game;\n}());\n```\n#### 外部引入开启 index.js\n```JavaScript\n/*\n * @Author: yhf \n * @Date: 2018-09-10 23:45:57 \n * @Last Modified by: yhf\n * @Last Modified time: 2018-09-11 08:38:58\n */\n// 获取定义的蛇地图\nconst wrap = document.querySelector(\".wrap\");\nconst btn = document.querySelectorAll(\"input\");\nconst df = document.querySelector(\".df\");\nconst ssc = document.querySelector(\".ssc\");\n\n// 定义运动函数\nvar gm = new Game(wrap);\nbtn[0].onclick = function () {\n    // 判断点击了不可以再点击\n    if (gm.bol) {\n        return;\n    }\n    // 开关\n    gm.bol = \"true\";\n    // 开启游戏\n    gm.init();\n}\nbtn[1].onclick = function () {\n    // 停止游戏\n    gm.stop();\n}\nbtn[2].onclick = function () {\n    // 未点击开始不可以点击\n    if (!gm.bol) {\n        return;\n    }\n    // 结束游戏\n    gm.empty();\n}\n\n\n\n/*\n * 后期添加项目：\n * 食物颜色改变不同的颜色，加的身体值不同\n * 改关卡闯关\n * 添加其他功能\n * 未完待续。。。\n * 手机事件\n * \n */\n```","tags":["js笔记/案例"],"categories":["JavaScript"]},{"title":"贪吃蛇案例","url":"%2F2018%2F09%2F10%2F2018-09-09%2F","content":"\n# 案例分析重点\n模拟贪吃蛇游戏,做的项目\n地图: 宽，高，背景颜色，因为小蛇和食物都是相对于地图显示的,这里小蛇和食物都是地图的子元素,随机位置显示,脱离文档流的,地图也需要脱离文档流--css需要设置:宽,高,背景颜色,脱标\n\n食物---div元素\nelements--->存储div的数组(将来删除的食物div时候,先从map中删除div,再从数组中移除div)\n食物:宽,高,背景颜色,横坐标,纵坐标\n一个食物就是一个对象,这个对象有相应的属性,这个对象需要在地图上显示\n最终要创建食物的对象,先 有构造函数,并且把相应的值作为参数传入到构造函数中\n食物要想显示在地图上,食物的初始化就是一个行为\n1.食物的构造函数--->创建食物对象\n2.食物的显示的方法-->通过对象调用方法,显示食物,设置相应的样式\n2.1.1 因为食物要被小蛇吃掉,吃掉后应该再次出现食物,原来的食物就删除了\n2.1.2 每一次初始化食物的时候先删除原来的食物,然后重新的初始化食物\n2.1.3 通过一个私有的函数(外面不能调用的函数)删除地图上的食物,同时最开始的时候食物也相应的保存到一个数组中,再从这个数组中把食物删除\n最后的时候,把食物的构造函数给window下的属性,这样做,外部就可以直接使用这个食物的构造函数了\n\n小蛇\n小蛇就是一个对象\n属性: 每个身体都有宽，高，方向\n属性:身体分三个部分,每个部分都是一个对象,每个部分都有横纵坐标,背景颜色\n小蛇要想显示在地图上,先删除之前的小蛇,然后再初始化小蛇(小蛇要移动)--方法\n\n小蛇要移动---方法\n思路:把小蛇的头的坐标给小蛇第一部分的身体,第一部分的身体的坐标给下一个部分身体\n小蛇的头,需要单独的设置:方向\n\n# 案例效果\n<img src=\"/tcsal/tcs1.png\">\n<img src=\"/tcsal/tcs2.png\">\n<img src=\"/tcsal/tcs3.png\">\n\n# 案例代码\n### Css\n```Css\n* {\n    padding: 0;\n    margin: 0;\n}\n\n.wrap {\n    width: 800px;\n    height: 600px;\n    background-color: #ccc;\n    position: relative;\n    top: 20px;\n    left: 20px;\n}\n```\n### Html\n```Html\n    <!-- 贪吃蛇地图 -->\n    <div class=\"wrap\">\n\n    </div>\n```\n\n### Js (Js代码均为外部引入代码)\n### 引入代码一 food.js\n```JavaScript\n/*\n * @Author: yhf \n * @Date: 2018-09-10 00:04:58 \n * @Last Modified by: yhf\n * @Last Modified time: 2018-09-10 10:23:05\n */\n// 食物就是一个对象，有宽高颜色，横纵坐标\n// 食物自调用\n(function () {\n    var elements = [];\n    // 先有食物的对象\n    function Food(x, y, width, height, color) {\n        this.x = x;\n        this.y = y;\n        this.width = width || 20;\n        this.height = height || 20;\n        this.color = color || \"green\";\n    };\n\n    // 私有函数--删除食物\n    function remove() {\n        for (let i = 0; i < elements.length; i++) {\n            const ele = elements[i];\n            // 找到这个子元素的父级元素，删除\n            ele.parentNode.removeChild(ele);\n            // 再次吧elements中的元素也要删除\n            elements.splice(i, 1);\n        }\n    }\n\n    // 在原始添加初始化方法（作用：再页面上显示）\n    // 因为食物要在地图上显示，所以需要在地图的这个参数（wrap--就是页面上的.class = wrap 的这个div）\n    Food.prototype.init = function (wrap) {\n        // 先删除这个食物\n        // 外部无法访问\n        remove();\n\n        // 创建div\n        var div = document.createElement(\"div\");\n        // 把div添加到wrap上\n        wrap.appendChild(div);\n        // 设置div的样式\n        div.style.width = this.width + \"px\";\n        div.style.height = this.height + \"px\";\n        div.style.backgroundColor = this.color;\n        // 脱离文档流\n        div.style.position = \"absolute\";\n        // 随机横纵坐标\n        this.x = parseInt(Math.random() * (wrap.offsetWidth / this.width)) * this.width;\n        this.y = parseInt(Math.random() * (wrap.offsetHeight / this.height)) * this.height;\n        div.style.left = this.x + \"px\";\n        div.style.top = this.y + \"px\";\n        // 把div加入到数组中\n        elements.push(div);\n    };\n    // Food暴露给力windwo，外部可以使用\n    window.Food = Food;\n}());\n\n```\n\n### 引入代码二 Snake.js\n\n```JavaScript\n/*\n * @Author: yhf \n * @Date: 2018-09-10 00:08:15 \n * @Last Modified by: yhf\n * @Last Modified time: 2018-09-10 00:11:02\n */\n// 小蛇的自调函数\n(function () {\n    // 存放蛇\n    var elements = [];\n    // 小蛇的构造函数\n    function Snake(width, height, direction) {\n        // 蛇的每个部分的宽\n        this.width = width || 20;\n        this.height = height || 20;\n\n        // 蛇的身体\n        this.body = [{\n                x: 3,\n                y: 2,\n                color: \"red\"\n            }, // 头\n            {\n                x: 2,\n                y: 2,\n                color: \"orange\"\n            }, // 身体\n            {\n                x: 1,\n                y: 2,\n                color: \"orange\"\n            } // 身体\n        ];\n        // 方向\n        this.direction = direction || \"right\";\n    };\n    // 添加小蛇初始化方法\n    Snake.prototype.init = function (wrap) {\n        // 清理蛇\n        remove();\n        // 创建div\n        for (let i = 0; i < this.body.length; i++) {\n            const obj = this.body[i]\n            // 创建div\n            var div = document.createElement(\"div\");\n            // 吧div加入到wrap\n            wrap.appendChild(div);\n            // 设置div样式\n            div.style.position = \"absolute\";\n            div.style.width = this.width + \"px\";\n            div.style.height = this.height + \"px\";\n            // 横纵坐标\n            div.style.left = obj.x * this.width + \"px\";\n            div.style.top = obj.y * this.height + \"px\";\n            // 背景颜色\n            div.style.backgroundColor = obj.color;\n            // 把div加入到数组\n            elements.push(div);\n        }\n    };\n\n    // 小蛇动方法\n    Snake.prototype.move = function (food, wrap) {\n        // 改变小蛇身体坐标位置\n        var i = this.body.length - 1;\n        for (; i > 0; i--) {\n            this.body[i].x = this.body[i - 1].x;\n            this.body[i].y = this.body[i - 1].y;\n        }\n        // 判断方向--改变小蛇头位置\n        switch (this.direction) {\n            case \"right\":\n                this.body[0].x += 1;\n                break;\n            case \"left\":\n                this.body[0].x -= 1;\n                break;\n            case \"top\":\n                this.body[0].y -= 1;\n                break;\n            case \"bottom\":\n                this.body[0].y += 1;\n                break;\n        }\n        // 判断有没有吃到食物\n        // 蛇和食物的坐标一致\n        var headX = this.body[0].x * this.width;\n        var headY = this.body[0].y * this.height;\n\n        // 判断蛇的头的坐标和食物的坐标是否相同\n        if (headX == food.x && headY == food.y) {\n            // 获取蛇的尾巴\n            var last = this.body[this.body.length - 1];\n            // 复制多一个\n            this.body.push({\n                x: last.x,\n                y: last.y,\n                color: last.color\n            });\n            // 把食物删除\n            food.init(wrap);\n        }\n    };\n\n    // 删除小蛇都函数\n    function remove() {\n        // 获取数组\n        var i = elements.length - 1;\n        for (; i >= 0; i--) {\n            // 从当前元素找到父级元素删除\n            const ele = elements[i];\n            // 从wrap删除\n            ele.parentNode.removeChild(ele);\n            elements.splice(i, 1);\n        }\n    }\n\n    // 把Snake暴露给window\n    window.Snake = Snake;\n}());\n\n```\n### 引入代码三 Game.js\n\n```JavaScript\n/*\n * @Author: yhf \n * @Date: 2018-09-10 00:08:23 \n * @Last Modified by:   yhf \n * @Last Modified time: 2018-09-10 00:08:23 \n */\n// 自调用封装游戏对象\n(function () {\n    var that = null;\n    // 游戏构造函数\n    function Game() {\n        this.food = new Food(); // 食物对象\n        this.snake = new Snake(); // 蛇对象\n        this.wrap = wrap; // 地图\n        that = this;\n    };\n    Game.prototype.init = function () {\n        // 初始化游戏\n        // 食物初始化\n        this.food.init(this.wrap);\n        // 小蛇初始化\n        this.snake.init(this.wrap);\n        // 调用自动移动蛇方法\n        this.runSnake(this.food, this.wrap);\n        // 调用按键方法\n        this.bindKey();\n    };\n    // 添加原型，设小蛇跑起来\n    Game.prototype.runSnake = function (food, wrap) {\n        // 自动移动\n        var time = setInterval(function () {\n            // 此时this是window\n            // 移动蛇\n            this.snake.move(food, wrap);\n            // 初始化蛇\n            this.snake.init(wrap);\n            // 横坐标的最大值\n            var maxX = wrap.offsetWidth / this.snake.width;\n            var maxY = wrap.offsetHeight / this.snake.height;\n            // 小蛇头坐标\n            var headX = this.snake.body[0].x;\n            var headY = this.snake.body[0].y;\n            // 横坐标\n            if (headX < 0 || headX >= maxX) {\n                // 撞墙，停止定时器\n                clearInterval(time);\n                alert(\"游戏结束\");\n            }\n            // 纵坐标\n            if (headY < 0 || headY >= maxY) {\n                // 撞墙，停止定时器\n                clearInterval(time);\n                alert(\"游戏结束\");\n            }\n        }.bind(that), 150)\n    };\n\n    // 添加原型方法--设置用户按键\n    Game.prototype.bindKey = function () {\n        // 获取用户按键\n        document.addEventListener(\"keydown\", function (e) {\n            // 此时this应该是keydown的事件对象\n            // 所以this就是document\n            // 获取按键值\n            switch (e.keyCode) {\n                case 37:\n                    this.snake.direction = \"left\";\n                    break;\n                case 38:\n                    this.snake.direction = \"top\";\n                    break;\n                case 39:\n                    this.snake.direction = \"right\";\n                    break;\n                case 40:\n                    this.snake.direction = \"bottom\";\n                    break;\n            }\n        }.bind(that), false);\n    };\n\n    window.Game = Game;\n}());\n\n```\n\n### 内部调用代码 \n\n```JavaScript\n    // 方法一\n    // 获取地图\n    const wrap = document.querySelector(\".wrap\");\n    // 初始化游戏对象\n    var gm = new Game(wrap);\n    // 开始游戏\n    gm.init();\n\n\n    // 方法二\n    // 初始化游戏对象\n    var gm = new Game(document.querySelector(\".wrap\"));\n    // 开始游戏\n    gm.init();\n```","tags":["js笔记/案例"],"categories":["JavaScript"]},{"title":"自定义滚动条 两版本","url":"%2F2018%2F09%2F07%2F2018-09-07%2F","content":"\n# 重点\n### 版本一\n1.鼠标事件 （鼠标按下->鼠标移动->鼠标抬起）\n2.滚动条的高度计算\n3.滚动条的上下移动范围设置\n4.滚动条的移动设置\n5.阻止默认事件\n6.计算和设置文字的移动距离\n\n### 版本二\n1.增加了滚动等功能\n2.事件的兼容问题解决\n\n# 项目代码\n## 版本一\n### Css\n```Css\n* {\n    padding: 0;\n    margin: 0;\n}\n\n.wrap {\n    width: 200px;\n    height: 400px;\n    border: 1px solid black;\n    position: relative;\n    top: 100px;\n    left: 100px;\n    overflow: hidden;\n}\n\n.con {\n    padding: 5px 16px 5px 5px;\n    font-size: 25px;\n    position: relative;\n    font-size: 14px;\n}\n\n.gdt {\n    width: 15px;\n    height: 100%;\n    background: #ccc;\n    position: absolute;\n    right: 0;\n    top: 0;\n}\n\n.gd {\n    width: 15px;\n    background-color: red;\n    position: absolute;\n}\n```\n\n### Html\n```Html\n<div class=\"wrap\">\n        <div class=\"con\">\n            start------\n            内容内容内容内容内容内容内容内容内容内容内容内容内容内容内容内容内容内容内容内容内容内容内容内容内容内容内容内容内容内容内容内容内容内容内容内容内容内容内容内容内容内容内容内容内容内容内容内容内容内容内容内容内容内容内容内容内容内容内容内容内容内容内容内容内容内容内容内容内容内容内容内容内容内容内容内容内容内容内容内容内容内容内容内容内容内容内容内容内容内容内容内容内容内容内容内容内容内容内容内容内容内容内容内容内容内容内容内容内容内容内容内容内容内容内容内容内容内容内容内容内容内容内容内容内容内容内容内容内容内容内容内容内容内容内容内容内容内容内容内容内容内容内容内容内容内容内容内容内容内容内容内容内容内容内容内容内容内容内容内容内容内容内容内容内容内容内容内容内容内容内容内容内容内容内容内容内容内容内容内容内容内容内容内容内容内容内容内容内容内容内容内容内容内容内容内容内容内容内容内容内容内容内容内容内容内容内容内容内容内容内容内容内容内容内容内容内容内容内容内容内容内容内容内容内容内容内容内容内容内容内容内容内容内容内容内容内容内容内容内容内容内容内容内容内容内容内容内容内容内容内容内容内容内容内容内容内容内容内容内容内容内容内容内容内容内容内容内容内容内容内容内容内容内容内容内容内容内容内容内容内容内容内容内容内容内容内容内容内容内容内容内容内容内容内容内容内容内容内容内容内容内容内容内容内容内容内容内容内容内容内容内容内容内容内容内容内容内容内容内容内容内容内容内容内容内容内容内容内容内容内容内容内容内容内容内容内容内\n            内容自己增加\n            ------end\n        </div>\n        <div class=\"gdt\">\n            <div class=\"gd\"></div>\n        </div>\n    </div>\n```\n\n### Js\n```JavaScript\nwindow.onload = () => {\n        // 获取元素\n        // 外部div框架\n        let wrap = document.querySelector(\".wrap\");\n        // 文字div\n        let con = document.querySelector(\".con\");\n        // 滚动条div--容器\n        let gdt = document.querySelector(\".gdt\");\n        // 滚动条\n        let gd = document.querySelector(\".gd\");\n\n        // 设置滚动条高度\n        // 滚动条/装滚动条的高=框架的高/文字的高\n        // 滚动条=装滚动条的高*框架的高/文字的高\n        let height = gdt.offsetHeight * wrap.offsetHeight / con.offsetHeight;\n        if (height < 30) {\n            height = 30;\n        }\n        gd.style.height = height + \"px\";\n\n        // 移动滚动条\n        gd.onmousedown = (e) => {\n            let spaceY = e.clientY - gd.offsetTop;\n            document.onmousemove = (e) => {\n                let y = e.clientY - spaceY;\n                y = y < 0 ? y = 0 : y;\n                y = y > gdt.offsetHeight - gd.offsetHeight ? y = gdt.offsetHeight - gd.offsetHeight : y;\n                gd.style.top = y + \"px\";\n                //设置鼠标移动的时候,文字不被选中\n\n                window.getSelection ? window.getSelection().removeAllRanges() : document.selection.empty();\n\n                // 滚动条移动的距离/文字的距离=滚动最大的移动距离/文字最大的移动距离\n                // 文字的移动距离 = 滚动的移动距离*文字的最大移动距离/滚动条的最大移动距离\n                let moveY = y * (con.offsetHeight - wrap.offsetHeight) / (gdt.offsetHeight - gd.offsetHeight);\n                // 设置文字的div距离\n                con.style.marginTop = -moveY + \"px\";\n            }\n        }\n\n        document.onmouseup = () => {\n            document.onmousemove = null;\n        }\n\n    }\n```\n\n## 版本二\n### Css\n```Css\n.wrap{\n    width: 200px;\n    height: 300px;\n    border:5px solid black;\n    position: relative;\n    overflow: hidden;\n}\n.con{\n    /*width: 185px;*/\n    padding-right: 15px;\n    font-size: 25px;\n    position: relative;\n}\n.scroll{\n    width: 15px;\n    height: 100%;\n    background: #ccc;\n    position: absolute;\n    right: 0;\n    top: 0;\n}\n.scrollbar{\n    width: 15px;\n    background: red;\n    height: 50px;\n    position: absolute;\n}\n```\n\n### Html\n```Html\n<div class=\"wrap\">\n    <div class=\"con\">\n        start------\n        内容内容内容内容内容内容内容内容内容内容内容内容内容内容内容内容内容内容内容内容内容内容内容内容内容内容内容内容内容内容内容内容内容内容内容内容内容内容内容内容内容内容内容内容内容内容内容内容内容内容内容内容内容内容内容内容内容内容内容内容内容内容内容内容内容内容内容内容内容内容内容内容内容内容内容内容内容内容内容内容内容内容内容内容内容内容内容内容内容内容内容内容内容内容内容内容内容内容内容内容内容内容内容内容内容内容内容内容内容内容内容内容内容内容内容内容内容内容内容内容内容内容内容内容内容内容内容内容内容内容内容内容内容内容内容内容内容内容内容内容内容内容内容内容内容内容内容内容内容内容内容内容内容内容内容内容内容内容内容内容内容内容内容内容内容内容内容内容内容内容内容内容内容内容内容内容内容内容内容内容内容内容内容内容内容内容内容内容内容内容内容内容内容内容内容内容内容内容内容内容内容内容内容内容内容内容内容内容内容内容内容内容内容内容内容内容内容内容内容内容内容内容内容内容内容内容内容内容内容内容内容内容内容内容内容内容内容内容内容内容内容内容内容内容内容内容内容内容内容内容内容内容内容内容内容内容内容内容内容内容内容内容内容内容内容内容内容内容内容内容内容内容内容内容内容内容内容内容内容内容内容内容内容内容内容内容内容内容内容内容内容内容内容内容内容内容内容内容内容内容内容内容内容内容内容内容内容内容内容内容内容内容内容内容内容\n        ------end\n    </div>\n    <div class=\"scroll\">\n        <div class=\"scrollbar\"></div>\n    </div>\n</div>\n```\n\n### Js\n## 外部引入的js\n```JavaScript\nfunction mousewheel(obj,callback) {\n\t//判断是否火狐浏览器\n\tif (navigator.userAgent.indexOf(\"Firefox\")>-1) {\n\t\tobj.addEventListener(\"DOMMouseScroll\",fn);//火狐滚轮事件\n\t}else{\n\t\tobj.addEventListener(\"mousewheel\",fn);//非火狐滚轮事件\n\t}\n\tfunction fn(e) {\n\t\tvar e = e || window.event;\n\t\t//火狐 detail 上-3 下3\n\t\t//非火狐 wheelDelta 上120 下-120\n\t\t// false:下 true:上\n\t\tif (e.detail) {\n\t\t\t//e.detail<0判断往上还是往下滚动小于0是上\n\t\t\tcallback.call(obj,e,e.detail<0);\n\t\t}else{\n\t\t\t//e.wheelDelta>0判断往上还是往下滚动大于0是上\n\t\t\tcallback.call(obj,e,e.wheelDelta>0);\t\t\n\t\t}\n\t\t//阻止默认事件\n\t\te.preventDefault ? e.preventDefault() : (e.returnValue = false);\n\t}\n}\n```\n\n```JavaScript\nvar wrap=document.querySelector(\".wrap\");\nvar con=document.querySelector(\".con\");\nvar scroll=document.querySelector(\".scroll\");\nvar scrollbar=document.querySelector(\".scrollbar\");\n\n//计算滚动条的高度\nconsole.log(wrap.clientHeight);\nconsole.log(con.offsetHeight);\nvar barH = wrap.clientHeight/con.offsetHeight*scroll.offsetHeight;\nif (barH<50) {barH=50}\nscrollbar.style.height = barH + \"px\";\n\n\nvar bol=false;\nvar dy=0;\nscrollbar.onmousedown = function (e) {\n\tbol = true;//设置可以移动\n\tdy = e.clientY-offsetFn(scrollbar).top;//计算鼠标和滚动条的位置差\n\t\n\t//阻止事件冒泡\n\tevent.stopPropagation ? event.stopPropagation() : (event.cancelBubble = true);\n\t//阻止默认事件\n\tevent.preventDefault ? event.preventDefault() : (event.returnValue = false);\n}\nscroll.onmousedown = function (e) {\n\tvar y = e.clientY-scrollbar.offsetHeight/2-13;\n\tmove(y);\n}\ndocument.onmousemove = function (e) {\n\tif (bol) {//判断是否可以移动\n\t\tvar y = e.clientY-wrap.offsetTop-5-dy;\n\t\tmove(y)\n\t}\n}\ndocument.onmouseup = function () {\n\tbol = false;//设置不可以移动\n}\n\n//移动滚动条和内容的函数\nfunction move(y) {\n\t//判断不可以超过父级框\n\tif(y<0){y=0}\n\telse if (y>scroll.offsetHeight-scrollbar.offsetHeight) {\n\t\ty=scroll.offsetHeight-scrollbar.offsetHeight;\n\t}\n\tscrollbar.style.top = y + \"px\";//设置滚动条位置\n\n\t// 内容可移动距离\n\tvar conDy = con.offsetHeight-wrap.clientHeight;\n\t// 滚动条可移动距离\n\tvar scrollDy = scroll.offsetHeight-scrollbar.offsetHeight;\t\t\n\tvar scale = conDy/scrollDy;//计算比例\n\t//设置内容位置\n\tcon.style.top = -y*scale + \"px\";\n}\n\n// 滚轮事件\nmousewheel(wrap,function (e,bol) {\n\tif (bol) {//判断往上滚还是往下滚\n\t\ty = scrollbar.offsetTop-10;\n\t}else{\n\t\ty = scrollbar.offsetTop+10;\n\t}\t\n\tmove(y);//调用移动滚动条和内容的函数\n})\n//键盘控制滚动条移动\ndocument.onkeydown = function (e) {\n\t// console.log(e.keyCode)\n\tif (e.keyCode==38) {//键盘上\n\t\ty = scrollbar.offsetTop-10;\n\t}else if(e.keyCode==40){//键盘下\n\t\ty = scrollbar.offsetTop+10;\n\t}\n\tmove(y);//调用移动滚动条和内容的函数\n}\n\n\nfunction offsetFn(obj) {\n\tvar l = obj.offsetLeft;//获取自己的left\n\tvar t = obj.offsetTop;//获取自己的top\t\n\tobj = obj.offsetParent;//获取定位父级元素\n\twhile(obj){//判断有没有定位父级元素\n\t\t//加上定位父级的定位的left和top\n\t\tl += obj.offsetLeft + parseInt(getStyle(obj,\"borderLeftWidth\"));\n\t\tt += obj.offsetTop + parseInt(getStyle(obj,\"borderTopWidth\"));\t\n\t\tobj = obj.offsetParent;//继续找定位父级\n\t}\n\treturn {\"left\":l,\"top\":t};\n}\n//获取计算后的样式\nfunction getStyle(obj,attr) {\n\tif (obj.currentStyle) {\n\t\treturn obj.currentStyle[attr];//IE获取方法\n\t}else{\n\t\treturn getComputedStyle(obj,null)[attr];//非IE取方法\n\t}\n}\n```","tags":["js笔记/案例"],"categories":["JavaScript"]},{"title":"初始化css和阻止链接跳转","url":"%2F2018%2F09%2F05%2F2018-09-05(3)%2F","content":"\n## 重点\n1.初始化解决h5和兼容问题\n\n\n### 阻止跳转\n```JavaScript\nlet a = document.querySelector(\"a\");\na.onclick = (e) => {\n    // 方法一\n    // return false;\n    // 方法二\n    // 不支持ie8\n    e.preventDefault();//阻止浏览器的默认事件\n}\n```\n\n# 初始化css5.0\n```\n/*! normalize.css v5.0.0 | MIT License | github.com/necolas/normalize.css */\n/*\nhttp://necolas.github.io/normalize.css/\n*/\n/**\n * 1. Change the default font family in all browsers (opinionated).\n * 2. Correct the line height in all browsers.\n * 3. Prevent adjustments of font size after orientation changes in\n *    IE on Windows Phone and in iOS.\n */\n\n/* Document\n   ========================================================================== */\n\nhtml {\n    font-family: sans-serif; /* 1 */\n    line-height: 1.15; /* 2 */\n    -ms-text-size-adjust: 100%; /* 3 */\n    -webkit-text-size-adjust: 100%; /* 3 */\n}\n\n/* Sections\n   ========================================================================== */\n\n/**\n * Remove the margin in all browsers (opinionated).\n */\n\nbody {\n    margin: 0;\n}\n\n/**\n * Add the correct display in IE 9-.\n */\n\narticle,\naside,\nfooter,\nheader,\nnav,\nsection {\n    display: block;\n}\n\n/**\n * Correct the font size and margin on `h1` elements within `section` and\n * `article` contexts in Chrome, Firefox, and Safari.\n */\n\nh1 {\n    font-size: 2em;\n    margin: 0.67em 0;\n}\n\n/* Grouping content\n   ========================================================================== */\n\n/**\n * Add the correct display in IE 9-.\n * 1. Add the correct display in IE.\n */\n\nfigcaption,\nfigure,\nmain { /* 1 */\n    display: block;\n}\n\n/**\n * Add the correct margin in IE 8.\n */\n\nfigure {\n    margin: 1em 40px;\n}\n\n/**\n * 1. Add the correct box sizing in Firefox.\n * 2. Show the overflow in Edge and IE.\n */\n\nhr {\n    box-sizing: content-box; /* 1 */\n    height: 0; /* 1 */\n    overflow: visible; /* 2 */\n}\n\n/**\n * 1. Correct the inheritance and scaling of font size in all browsers.\n * 2. Correct the odd `em` font sizing in all browsers.\n */\n\npre {\n    font-family: monospace, monospace; /* 1 */\n    font-size: 1em; /* 2 */\n}\n\n/* Text-level semantics\n   ========================================================================== */\n\n/**\n * 1. Remove the gray background on active links in IE 10.\n * 2. Remove gaps in links underline in iOS 8+ and Safari 8+.\n */\n\na {\n    background-color: transparent; /* 1 */\n    -webkit-text-decoration-skip: objects; /* 2 */\n}\n\n/**\n * Remove the outline on focused links when they are also active or hovered\n * in all browsers (opinionated).\n */\n\na:active,\na:hover {\n    outline-width: 0;\n}\n\n/**\n * 1. Remove the bottom border in Firefox 39-.\n * 2. Add the correct text decoration in Chrome, Edge, IE, Opera, and Safari.\n */\n\nabbr[title] {\n    border-bottom: none; /* 1 */\n    text-decoration: underline; /* 2 */\n    text-decoration: underline dotted; /* 2 */\n}\n\n/**\n * Prevent the duplicate application of `bolder` by the next rule in Safari 6.\n */\n\nb,\nstrong {\n    font-weight: inherit;\n}\n\n/**\n * Add the correct font weight in Chrome, Edge, and Safari.\n */\n\nb,\nstrong {\n    font-weight: bolder;\n}\n\n/**\n * 1. Correct the inheritance and scaling of font size in all browsers.\n * 2. Correct the odd `em` font sizing in all browsers.\n */\n\ncode,\nkbd,\nsamp {\n    font-family: monospace, monospace; /* 1 */\n    font-size: 1em; /* 2 */\n}\n\n/**\n * Add the correct font style in Android 4.3-.\n */\n\ndfn {\n    font-style: italic;\n}\n\n/**\n * Add the correct background and color in IE 9-.\n */\n\nmark {\n    background-color: #ff0;\n    color: #000;\n}\n\n/**\n * Add the correct font size in all browsers.\n */\n\nsmall {\n    font-size: 80%;\n}\n\n/**\n * Prevent `sub` and `sup` elements from affecting the line height in\n * all browsers.\n */\n\nsub,\nsup {\n    font-size: 75%;\n    line-height: 0;\n    position: relative;\n    vertical-align: baseline;\n}\n\nsub {\n    bottom: -0.25em;\n}\n\nsup {\n    top: -0.5em;\n}\n\n/* Embedded content\n   ========================================================================== */\n\n/**\n * Add the correct display in IE 9-.\n */\n\naudio,\nvideo {\n    display: inline-block;\n}\n\n/**\n * Add the correct display in iOS 4-7.\n */\n\naudio:not([controls]) {\n    display: none;\n    height: 0;\n}\n\n/**\n * Remove the border on images inside links in IE 10-.\n */\n\nimg {\n    border-style: none;\n}\n\n/**\n * Hide the overflow in IE.\n */\n\nsvg:not(:root) {\n    overflow: hidden;\n}\n\n/* Forms\n   ========================================================================== */\n\n/**\n * 1. Change the font styles in all browsers (opinionated).\n * 2. Remove the margin in Firefox and Safari.\n */\n\nbutton,\ninput,\noptgroup,\nselect,\ntextarea {\n    font-family: sans-serif; /* 1 */\n    font-size: 100%; /* 1 */\n    line-height: 1.15; /* 1 */\n    margin: 0; /* 2 */\n}\n\n/**\n * Show the overflow in IE.\n * 1. Show the overflow in Edge.\n */\n\nbutton,\ninput { /* 1 */\n    overflow: visible;\n}\n\n/**\n * Remove the inheritance of text transform in Edge, Firefox, and IE.\n * 1. Remove the inheritance of text transform in Firefox.\n */\n\nbutton,\nselect { /* 1 */\n    text-transform: none;\n}\n\n/**\n * 1. Prevent a WebKit bug where (2) destroys native `audio` and `video`\n *    controls in Android 4.\n * 2. Correct the inability to style clickable types in iOS and Safari.\n */\n\nbutton,\nhtml [type=\"button\"], /* 1 */\n[type=\"reset\"],\n[type=\"submit\"] {\n    -webkit-appearance: button; /* 2 */\n}\n\n/**\n * Remove the inner border and padding in Firefox.\n */\n\nbutton::-moz-focus-inner,\n[type=\"button\"]::-moz-focus-inner,\n[type=\"reset\"]::-moz-focus-inner,\n[type=\"submit\"]::-moz-focus-inner {\n    border-style: none;\n    padding: 0;\n}\n\n/**\n * Restore the focus styles unset by the previous rule.\n */\n\nbutton:-moz-focusring,\n[type=\"button\"]:-moz-focusring,\n[type=\"reset\"]:-moz-focusring,\n[type=\"submit\"]:-moz-focusring {\n    outline: 1px dotted ButtonText;\n}\n\n/**\n * Change the border, margin, and padding in all browsers (opinionated).\n */\n\nfieldset {\n    border: 1px solid #c0c0c0;\n    margin: 0 2px;\n    padding: 0.35em 0.625em 0.75em;\n}\n\n/**\n * 1. Correct the text wrapping in Edge and IE.\n * 2. Correct the color inheritance from `fieldset` elements in IE.\n * 3. Remove the padding so developers are not caught out when they zero out\n *    `fieldset` elements in all browsers.\n */\n\nlegend {\n    box-sizing: border-box; /* 1 */\n    color: inherit; /* 2 */\n    display: table; /* 1 */\n    max-width: 100%; /* 1 */\n    padding: 0; /* 3 */\n    white-space: normal; /* 1 */\n}\n\n/**\n * 1. Add the correct display in IE 9-.\n * 2. Add the correct vertical alignment in Chrome, Firefox, and Opera.\n */\n\nprogress {\n    display: inline-block; /* 1 */\n    vertical-align: baseline; /* 2 */\n}\n\n/**\n * Remove the default vertical scrollbar in IE.\n */\n\ntextarea {\n    overflow: auto;\n}\n\n/**\n * 1. Add the correct box sizing in IE 10-.\n * 2. Remove the padding in IE 10-.\n */\n\n[type=\"checkbox\"],\n[type=\"radio\"] {\n    box-sizing: border-box; /* 1 */\n    padding: 0; /* 2 */\n}\n\n/**\n * Correct the cursor style of increment and decrement buttons in Chrome.\n */\n\n[type=\"number\"]::-webkit-inner-spin-button,\n[type=\"number\"]::-webkit-outer-spin-button {\n    height: auto;\n}\n\n/**\n * 1. Correct the odd appearance in Chrome and Safari.\n * 2. Correct the outline style in Safari.\n */\n\n[type=\"search\"] {\n    -webkit-appearance: textfield; /* 1 */\n    outline-offset: -2px; /* 2 */\n}\n\n/**\n * Remove the inner padding and cancel buttons in Chrome and Safari on macOS.\n */\n\n[type=\"search\"]::-webkit-search-cancel-button,\n[type=\"search\"]::-webkit-search-decoration {\n    -webkit-appearance: none;\n}\n\n/**\n * 1. Correct the inability to style clickable types in iOS and Safari.\n * 2. Change font properties to `inherit` in Safari.\n */\n\n::-webkit-file-upload-button {\n    -webkit-appearance: button; /* 1 */\n    font: inherit; /* 2 */\n}\n\n/* Interactive\n   ========================================================================== */\n\n/*\n * Add the correct display in IE 9-.\n * 1. Add the correct display in Edge, IE, and Firefox.\n */\n\ndetails, /* 1 */\nmenu {\n    display: block;\n}\n\n/*\n * Add the correct display in all browsers.\n */\n\nsummary {\n    display: list-item;\n}\n\n/* Scripting\n   ========================================================================== */\n\n/**\n * Add the correct display in IE 9-.\n */\n\ncanvas {\n    display: inline-block;\n}\n\n/**\n * Add the correct display in IE.\n */\n\ntemplate {\n    display: none;\n}\n\n/* Hidden\n   ========================================================================== */\n\n/**\n * Add the correct display in IE 10-.\n */\n\n[hidden] {\n    display: none;\n}\n```\n\n# Css2 8.0\n```\n/*! normalize.css v8.0.0 | MIT License | github.com/necolas/normalize.css */\n/* Document\n   ========================================================================== */\n/**\n * 1. Correct the line height in all browsers.\n * 2. Prevent adjustments of font size after orientation changes in iOS.\n */\nhtml {\n    line-height: 1.15;\n    /* 1 */\n    -webkit-text-size-adjust: 100%;\n    /* 2 */\n}\n\n/* Sections\n   ========================================================================== */\n/**\n * Remove the margin in all browsers.\n */\nbody {\n    margin: 0;\n}\n\n/**\n * Correct the font size and margin on `h1` elements within `section` and\n * `article` contexts in Chrome, Firefox, and Safari.\n */\nh1 {\n    font-size: 2em;\n    margin: 0.67em 0;\n}\n\n/* Grouping content\n   ========================================================================== */\n/**\n * 1. Add the correct box sizing in Firefox.\n * 2. Show the overflow in Edge and IE.\n */\nhr {\n    box-sizing: content-box;\n    /* 1 */\n    height: 0;\n    /* 1 */\n    overflow: visible;\n    /* 2 */\n}\n\n/**\n * 1. Correct the inheritance and scaling of font size in all browsers.\n * 2. Correct the odd `em` font sizing in all browsers.\n */\npre {\n    font-family: monospace, monospace;\n    /* 1 */\n    font-size: 1em;\n    /* 2 */\n}\n\n/* Text-level semantics\n   ========================================================================== */\n/**\n * Remove the gray background on active links in IE 10.\n */\na {\n    background-color: transparent;\n}\n\n/**\n * 1. Remove the bottom border in Chrome 57-\n * 2. Add the correct text decoration in Chrome, Edge, IE, Opera, and Safari.\n */\nabbr[title] {\n    border-bottom: none;\n    /* 1 */\n    text-decoration: underline;\n    /* 2 */\n    text-decoration: underline dotted;\n    /* 2 */\n}\n\n/**\n * Add the correct font weight in Chrome, Edge, and Safari.\n */\nb,\nstrong {\n    font-weight: bolder;\n}\n\n/**\n * 1. Correct the inheritance and scaling of font size in all browsers.\n * 2. Correct the odd `em` font sizing in all browsers.\n */\ncode,\nkbd,\nsamp {\n    font-family: monospace, monospace;\n    /* 1 */\n    font-size: 1em;\n    /* 2 */\n}\n\n/**\n * Add the correct font size in all browsers.\n */\nsmall {\n    font-size: 80%;\n}\n\n/**\n * Prevent `sub` and `sup` elements from affecting the line height in\n * all browsers.\n */\nsub,\nsup {\n    font-size: 75%;\n    line-height: 0;\n    position: relative;\n    vertical-align: baseline;\n}\n\nsub {\n    bottom: -0.25em;\n}\n\nsup {\n    top: -0.5em;\n}\n\n/* Embedded content\n   ========================================================================== */\n/**\n * Remove the border on images inside links in IE 10.\n */\nimg {\n    border-style: none;\n}\n\n/* Forms\n   ========================================================================== */\n/**\n * 1. Change the font styles in all browsers.\n * 2. Remove the margin in Firefox and Safari.\n */\nbutton,\ninput,\noptgroup,\nselect,\ntextarea {\n    font-family: inherit;\n    /* 1 */\n    font-size: 100%;\n    /* 1 */\n    line-height: 1.15;\n    /* 1 */\n    margin: 0;\n    /* 2 */\n}\n\n/**\n * Show the overflow in IE.\n * 1. Show the overflow in Edge.\n */\nbutton,\ninput {\n    /* 1 */\n    overflow: visible;\n}\n\n/**\n * Remove the inheritance of text transform in Edge, Firefox, and IE.\n * 1. Remove the inheritance of text transform in Firefox.\n */\nbutton,\nselect {\n    /* 1 */\n    text-transform: none;\n}\n\n/**\n * Correct the inability to style clickable types in iOS and Safari.\n */\nbutton,\n[type=\"button\"],\n[type=\"reset\"],\n[type=\"submit\"] {\n    -webkit-appearance: button;\n}\n\n/**\n * Remove the inner border and padding in Firefox.\n */\nbutton::-moz-focus-inner,\n[type=\"button\"]::-moz-focus-inner,\n[type=\"reset\"]::-moz-focus-inner,\n[type=\"submit\"]::-moz-focus-inner {\n    border-style: none;\n    padding: 0;\n}\n\n/**\n * Restore the focus styles unset by the previous rule.\n */\nbutton:-moz-focusring,\n[type=\"button\"]:-moz-focusring,\n[type=\"reset\"]:-moz-focusring,\n[type=\"submit\"]:-moz-focusring {\n    outline: 1px dotted ButtonText;\n}\n\n/**\n * Correct the padding in Firefox.\n */\nfieldset {\n    padding: 0.35em 0.75em 0.625em;\n}\n\n/**\n * 1. Correct the text wrapping in Edge and IE.\n * 2. Correct the color inheritance from `fieldset` elements in IE.\n * 3. Remove the padding so developers are not caught out when they zero out\n *    `fieldset` elements in all browsers.\n */\nlegend {\n    box-sizing: border-box;\n    /* 1 */\n    color: inherit;\n    /* 2 */\n    display: table;\n    /* 1 */\n    max-width: 100%;\n    /* 1 */\n    padding: 0;\n    /* 3 */\n    white-space: normal;\n    /* 1 */\n}\n\n/**\n * Add the correct vertical alignment in Chrome, Firefox, and Opera.\n */\nprogress {\n    vertical-align: baseline;\n}\n\n/**\n * Remove the default vertical scrollbar in IE 10+.\n */\ntextarea {\n    overflow: auto;\n}\n\n/**\n * 1. Add the correct box sizing in IE 10.\n * 2. Remove the padding in IE 10.\n */\n[type=\"checkbox\"],\n[type=\"radio\"] {\n    box-sizing: border-box;\n    /* 1 */\n    padding: 0;\n    /* 2 */\n}\n\n/**\n * Correct the cursor style of increment and decrement buttons in Chrome.\n */\n[type=\"number\"]::-webkit-inner-spin-button,\n[type=\"number\"]::-webkit-outer-spin-button {\n    height: auto;\n}\n\n/**\n * 1. Correct the odd appearance in Chrome and Safari.\n * 2. Correct the outline style in Safari.\n */\n[type=\"search\"] {\n    -webkit-appearance: textfield;\n    /* 1 */\n    outline-offset: -2px;\n    /* 2 */\n}\n\n/**\n * Remove the inner padding in Chrome and Safari on macOS.\n */\n[type=\"search\"]::-webkit-search-decoration {\n    -webkit-appearance: none;\n}\n\n/**\n * 1. Correct the inability to style clickable types in iOS and Safari.\n * 2. Change font properties to `inherit` in Safari.\n */\n::-webkit-file-upload-button {\n    -webkit-appearance: button;\n    /* 1 */\n    font: inherit;\n    /* 2 */\n}\n\n/* Interactive\n   ========================================================================== */\n/*\n * Add the correct display in Edge, IE 10+, and Firefox.\n */\ndetails {\n    display: block;\n}\n\n/*\n * Add the correct display in all browsers.\n */\nsummary {\n    display: list-item;\n}\n\n/* Misc\n   ========================================================================== */\n/**\n * Add the correct display in IE 10+.\n */\ntemplate {\n    display: none;\n}\n\n/**\n * Add the correct display in IE 10.\n */\n[hidden] {\n    display: none;\n}\n\n```","tags":["js笔记/案例"],"categories":["JavaScript"]},{"title":"放大镜","url":"%2F2018%2F09%2F05%2F2018-09-05(2)%2F","content":"\n# 重点\n1.鼠标事件\n2.offset系列，client系列\n3.数据\n\n## 效果\n<img src=\"/fdjal/fa1.png\">\n<img src=\"/fdjal/fa2.png\">\n\n## 素材\n<img src=\"/fdjal/small.png\">\n<img src=\"/fdjal/big.jpg\">\n\n## 案例代码\n### Css\n```Css\n*{\n    padding: 0;\n    margin: 0;\n}\n/* 框架 */\n.wrap {\n    position: relative;\n    margin: 100px;\n}\n\n/* 小图框 */\n.min {\n    position: relative;\n    width: 350px;\n}\n/* 小图图片 */\n.min img {\n    width: 100%;\n}\n/* 遮罩 */\n.min_wrap {\n    width: 175px;\n    height: 175px;\n    position: absolute;\n    top: 0;\n    left: 0;\n    cursor: move;\n    background-color: rgba(255,255,0,.4);\n    display: none;\n}\n\n/* 大图框 */\n.max_wrap {\n    border: 1px solid #000;\n    position: absolute;\n    top: 1px;\n    left: 370px;\n    width: 400px;\n    height: 400px;\n    overflow: hidden;\n    display: none;\n}\n.max_wrap img {\n    position: absolute;\n    width: 800px;\n}\n```\n\n### Html\n```Html\n    <div class=\"wrap\">\n        <div class=\"min\">\n            <img src=\"images/small.png\" alt=\"\">\n            <div class=\"min_wrap\">\n\n            </div>\n        </div>\n        <div class=\"max_wrap\">\n            <img src=\"images/big.jpg\" alt=\"\">\n        </div>\n    </div>\n```\n\n### Js\n```JavaScript\nwindow.onload = () => {\n    let wrap = document.querySelector(\".wrap\");\n    let min = document.querySelector(\".min\");\n    let min_img = document.querySelector(\".min img\");\n    let min_wrap = document.querySelector(\".min_wrap\");\n    let max_img = document.querySelector(\".max_wrap img\");\n    let max_wrap = document.querySelector(\".max_wrap\");\n\n    // 鼠标进入框架显示遮罩和大图\n    min.onmouseenter = () => {\n        min_wrap.style.display = \"block\";\n        max_wrap.style.display = \"block\";\n    }\n    // 鼠标离开框架隐藏遮罩和大图\n    min.onmouseleave = () => {\n        min_wrap.style.display = \"none\";\n        max_wrap.style.display = \"none\";\n    }\n\n    // 鼠标移动事件\n    wrap.onmousemove = e => {\n        // 兼容写法\n        var e = e || window.event;\n        // 获取鼠标的移动位置\n        let x = e.clientX - wrap.offsetLeft - min_wrap.offsetWidth / 2;\n        let y = e.clientY - wrap.offsetTop - min_wrap.offsetHeight / 2;\n\n        // 判断不要超出框架\n        if (x < 0) {\n            x = 0;\n        } else if (x > min_img.offsetWidth - min_wrap.offsetWidth) {\n            x = min_img.offsetWidth - min_wrap.offsetWidth;\n        }\n\n        if (y < 0) {\n            y = 0;\n        } else if (y > min_img.offsetHeight - min_wrap.offsetHeight) {\n            y = min_img.offsetHeight - min_wrap.offsetHeight;\n        }\n\n        // 设置遮罩移动\n        min_wrap.style.left = x + \"px\";\n        min_wrap.style.top = y + \"px\";\n\n        // 计算比例\n        let bl = (max_img.offsetWidth-max_wrap.offsetWidth) / (min.offsetWidth - min_wrap.offsetWidth);\n        \n        // 设置大图移动\n        max_img.style.left = -x * bl + \"px\";\n        max_img.style.top = -y * bl + \"px\";\n    }\n}\n```","tags":["js笔记/案例"],"categories":["JavaScript"]},{"title":"拖拽对话框案例","url":"%2F2018%2F09%2F05%2F2018-09-05(1)%2F","content":"\n# 重点\n1.点击事件\n2.样式的改变\n3.鼠标事件\n4.client系列运用\n5.offset系列\n\n## 效果图\n<img src=\"/tzjhk/tz1.png\">\n<img src=\"/tzjhk/tz2.png\">\n<img src=\"/tzjhk/tz3.png\">\n\n## 案例代码\n## Css\n```Css\n/* 点击字 */\n.top {\n    text-align: center;\n    font-size: 34px;\n    cursor: pointer\n}\n\n/* 背景遮罩层 */\n.bg {\n    width: 100%;\n    height: 100%;\n    position: fixed;\n    top: 0px;\n    left: 0px;\n    background: #000;\n    filter: alpha(opacity=30);\n    -moz-opacity: 0.3;\n    -khtml-opacity: 0.3;\n    opacity: 0.3;\n    display: none;\n}\n\n/* 登录框 */\n.dl {\n    width: 500px;\n    height: 250px;\n    background-color: #fff;\n    position: fixed;\n    top: 200px;\n    left: 50%;\n    transform: translateX(-50%);\n    display: none;\n    z-index: 999;\n    text-align: center;\n    position: relative;\n    padding: 10px;\n}\n.gb {\n    width: 35px;\n    line-height: 35px;\n    border-radius: 50%;\n    border: 1px solid #ccc;\n    background-color: #fff;\n    position: absolute;\n    top: -10px;\n    right: -10px;\n    cursor: pointer;\n}\nh3 {\n    cursor: move;\n    font-weight: normal;\n}\n.yh input {\n    display: inline-block;\n    width: 350px;\n    height: 35px;\n    margin: 10px 0;\n}\n.yh .txt {\n    margin-right: 15px;\n}\n.hy{\n    width: 200px;\n    line-height: 35px;\n    border: 1px solid #ccc;\n    margin: 10px auto;\n}\n```\n\n## Html\n```Html\n    <div class=\"wrap\">\n        <div class=\"top\">\n            点击，弹出登陆框!\n        </div>\n    </div>\n\n    <!-- 登陆框 -->\n    <div class=\"dl\">\n        <div class=\"gb\">\n            关闭\n        </div>\n        <h3>会员登陆</h3>\n        <div class=\"yh\">\n用户名：<input type=\"text\" placeholder=\"请输入用户名\"><br>\n登陆密码：<input type=\"text\" placeholder=\"请输入登陆密码\" class=\"txt\">\n        </div>\n        <div class=\"hy\">\n            登陆会员\n        </div>\n    </div>\n\n    <!-- 遮罩层 -->\n    <div class=\"bg\">\n\n    </div>\n```\n\n## Js\n```JavaScript\nwindow.onload = () => {\n  let dj = document.querySelector(\".top\");\n  let bg = document.querySelector(\".bg\");\n  let dl = document.querySelector(\".dl\");\n  let gb = document.querySelector(\".gb\");\n  let h = document.querySelector(\"h3\");\n\n  dj.onclick = e => {\n    bg.style.display = \"block\";\n    dl.style.display = \"block\";\n    // window.event.cancelBubble = true;\n    e.stopPropagation();\n  };\n\n//   document.onclick = () => {\n//     bg.style.display = \"none\";\n//     dl.style.display = \"none\";\n//   };\n\n  gb.onclick = () => {\n    bg.style.display = \"none\";\n    dl.style.display = \"none\";\n  };\n\n  h.onmousedown = e => {\n    //  获取此时可视区域的横坐标\n    let spaceX = e.clientX - dl.offsetLeft;\n    let spaceY = e.clientY - dl.offsetTop;\n    // 移动事件\n    document.onmousemove = e => {\n      let x = e.clientX - spaceX;\n      let y = e.clientY - spaceY;\n      dl.style.left = x + \"px\";\n      dl.style.top = y + \"px\";\n    };\n  };\n  \n  document.onmouseup = () => {\n    document.onmousemove = null;\n  }\n};\n\n```","tags":["js笔记/案例"],"categories":["JavaScript"]},{"title":"旋转木马案例","url":"%2F2018%2F09%2F04%2F2018-09-04%2F","content":"\n# 重点难点\n1.数组的运用\n2.事件的添加\n3.逻辑关系\n\n### 效果图\n<img src=\"/xzmm/xz1.png\">\n<img src=\"/xzmm/xz2.png\">\n<img src=\"/xzmm/xz3.png\">\n\n## 代码\n### Css\n```Css\n@charset \"UTF-8\";\n/*初始化  reset*/\nblockquote,body,button,dd,dl,dt,fieldset,form,h1,h2,h3,h4,h5,h6,hr,input,legend,li,ol,p,pre,td,textarea,th,ul{margin:0;padding:0}\nbody,button,input,select,textarea{font:12px/1.5 \"Microsoft YaHei\", \"微软雅黑\", SimSun, \"宋体\", sans-serif;color: #666;}\nol,ul{list-style:none}\na{text-decoration:none}\nfieldset,img{border:0;vertical-align:top;}\na,input,button,select,textarea{outline:none;}\na,button{cursor:pointer;}\n\n.wrap{\n    width:1200px;\n    margin:100px auto;\n}\n.slide {\n    height:500px;\n    position: relative;\n}\n.slide li{\n    position: absolute;\n    left:200px;\n    top:0;\n}\n.slide li img{\n    width:100%;\n}\n.arrow{\n    opacity: 0;\n}\n.prev,.next{\n    width:76px;\n    height:112px;\n    position: absolute;\n    top:50%;\n    margin-top:-56px;\n    background: url(../images/prev.png) no-repeat;\n    z-index: 99;\n}\n.next{\n    right:0;\n    background-image: url(../images/next.png);\n}\n```\n\n### Html\n```Html\n<div class=\"wrap\" id=\"wrap\">\n  <div class=\"slide\" id=\"slide\">\n    <ul>\n      <li><a href=\"#\"><img src=\"images/slidepic1.jpg\" alt=\"\"/></a></li>\n      <li><a href=\"#\"><img src=\"images/slidepic2.jpg\" alt=\"\"/></a></li>\n      <li><a href=\"#\"><img src=\"images/slidepic3.jpg\" alt=\"\"/></a></li>\n      <li><a href=\"#\"><img src=\"images/slidepic4.jpg\" alt=\"\"/></a></li>\n      <li><a href=\"#\"><img src=\"images/slidepic5.jpg\" alt=\"\"/></a></li>\n    </ul>\n    <div class=\"arrow\" id=\"arrow\">\n      <a href=\"javascript:;\" class=\"prev\" id=\"arrLeft\"></a>\n      <a href=\"javascript:;\" class=\"next\" id=\"arrRight\"></a>\n    </div>\n  </div>\n</div>\n```\n\n### Js\n```JavaScript\nwindow.onload = function () {\n    let slide = document.querySelector(\".slide\");\n    let li = document.querySelectorAll(\"li\");\n    let arrow = document.querySelector(\".arrow\");\n    let prev = this.document.querySelector(\".prev\");\n    let next = this.document.querySelector(\".next\");\n\n    let bol = true;\n\n    let arr = [{\n            width: 400,\n            top: 20,\n            left: 50,\n            opacity: 0.2,\n            zIndex: 2\n        }, //0\n        {\n            width: 600,\n            top: 70,\n            left: 0,\n            opacity: 0.8,\n            zIndex: 3\n        }, //1\n        {\n            width: 800,\n            top: 100,\n            left: 200,\n            opacity: 1,\n            zIndex: 4\n        }, //2\n        {\n            width: 600,\n            top: 70,\n            left: 600,\n            opacity: 0.8,\n            zIndex: 3\n        }, //3\n        {\n            width: 400,\n            top: 20,\n            left: 750,\n            opacity: 0.2,\n            zIndex: 2\n        } //4\n\n    ];\n\n    // 封装的函数\n    // 判断浏览器是否自持方法，得到css返回值\n    function getStyle(element, attr) {\n        //判断浏览器是否支持这个方法\n        return window.getComputedStyle ? window.getComputedStyle(element, null)[attr] : element.currentStyle[attr];\n    }\n\n    // 封装点击事件移动函数\n    //设置任意的一个元素,移动到指定的目标位置\n    function fn(element, json, fn1) {\n        clearInterval(element.timeId);\n        //定时器的id值存储到对象的一个属性中\n        element.timeId = setInterval(function () {\n            var flag = true; //判断目标到达\n            for (const attr in json) {\n                //判断这个属性attr中是不是opacity\n                if (attr == \"opacity\") {\n                    //获取元素的当前的透明度，放大一百倍\n                    var current = getStyle(element, attr) * 100;\n                    // 当前属性对应的目标值,放大一百倍\n                    var target = json[attr] * 100;\n                    //每次移动的距离\n                    var step = (target - current) / 10;\n                    step = step > 0 ? Math.ceil(step) : Math.floor(step); //当前移动到位置\n                    current += step;\n                    element.style[attr] = current / 100;\n                } else if (attr == \"zIndex\") { //判断这个属性attr中是不是zIndex\n                    element.style[attr] = json[attr];\n\n                } else {\n                    //获取元素的当前的位置,数字类型\n                    var current = parseInt(getStyle(element, attr));\n                    // 当前属性对应的目标值\n                    var target = json[attr];\n                    //每次移动的距离\n                    var step = (target - current) / 10;\n                    step = step > 0 ? Math.ceil(step) : Math.floor(step); //当前移动到位置\n                    current += step;\n                    element.style[attr] = current + \"px\";\n                }\n\n                if (current != target) {\n                    flag = false;\n                }\n            }\n            if (flag) {\n                //清理定时器\n                clearInterval(element.timeId);\n                // 所有属性到达目标后才能使用，并且用户有输入函数\n                if (fn1) {\n                    fn1();\n                }\n            }\n        }, 20);\n    }\n\n\n    fs = () => {\n        for (let i = 0; i < li.length; i++) {\n            fn(li[i], arr[i], () => {\n                bol = true;\n            });\n        }\n    }\n    fs();\n\n    // 左\n    prev.onclick = () => {\n        if (bol) {\n            bol = false;\n            arr.unshift(arr.pop());\n            fs();\n        }\n    }\n\n    // 右\n    next.onclick = () => {\n        if (bol) {\n            bol = false;\n            arr.push(arr.shift());\n            fs();\n        }\n    }\n\n    slide.onmouseover = () => {\n        fn(arrow, {\n            \"opacity\": 1\n        })\n    }\n    slide.onmouseout = () => {\n        fn(arrow, {\n            \"opacity\": 0\n        })\n    }\n}\n```","tags":["js笔记/案例"],"categories":["JavaScript"]},{"title":"手风琴案例","url":"%2F2018%2F09%2F03%2F2018-09-03%2F","content":"\n## 重点\n1.获取计算后样式函数\n2.封装的变速移动函数\n3.获取加载图片\n4.添加鼠标进入事件\n5.添加鼠标移出事件\n\n## 效果图\n<img src=\"/sfq/sf1.png\">\n<img src=\"/sfq/sf2.png\">\n\n## 素材\n<img src=\"/sfq/1.jpg\">\n<img src=\"/sfq/2.jpg\">\n<img src=\"/sfq/3.jpg\">\n<img src=\"/sfq/4.jpg\">\n<img src=\"/sfq/5.jpg\">\n\n## 案例代码\n### Css\n```Css\n    ul {\n      list-style: none;\n    }\n\n    * {\n      margin: 0;\n      padding: 0;\n    }\n\n    div {\n      width: 1150px;\n      height: 400px;\n      margin: 50px auto;\n      border: 1px solid red;\n      overflow: hidden;\n    }\n\n    div li {\n      width: 240px;\n      height: 400px;\n      float: left;\n    }\n\n    div ul {\n      width: 1300px;\n    }\n```\n\n### Html\n```Html\n<div id=\"box\">\n<ul>\n    <li></li>\n    <li></li>\n    <li></li>\n    <li></li>\n    <li></li>s\n</ul>\n</div>\n```\n\n### Js\n```JavaScript\n    let li = document.querySelectorAll(\"li\");\n\n  // 封装的函数\n  // 判断浏览器是否自持方法，得到css返回值\n  function getStyle(element, attr) {\n    //判断浏览器是否支持这个方法\n    return window.getComputedStyle ? window.getComputedStyle(element, null)[attr] : element.currentStyle[attr];\n  }\n\n  // 封装点击事件移动函数\n  //设置任意的一个元素,移动到指定的目标位置\n  function fn(element, json, fn1) {\n    clearInterval(element.timeId);\n    //定时器的id值存储到对象的一个属性中\n    element.timeId = setInterval(function () {\n      var flag = true; //判断目标到达\n      for (const attr in json) {\n        //判断这个属性attr中是不是opacity\n        if (attr == \"opacity\") {\n          //获取元素的当前的透明度，放大一百倍\n          var current = getStyle(element, attr) * 100;\n          // 当前属性对应的目标值,放大一百倍\n          var target = json[attr] * 100;\n          //每次移动的距离\n          var step = (target - current) / 10;\n          step = step > 0 ? Math.ceil(step) : Math.floor(step); //当前移动到位置\n          current += step;\n          element.style[attr] = current / 100;\n        } else if (attr == \"zIndex\") { //判断这个属性attr中是不是zIndex\n          element.style[attr] = json[attr];\n\n        } else {\n          //获取元素的当前的位置,数字类型\n          var current = parseInt(getStyle(element, attr));\n          // 当前属性对应的目标值\n          var target = json[attr];\n          //每次移动的距离\n          var step = (target - current) / 10;\n          step = step > 0 ? Math.ceil(step) : Math.floor(step); //当前移动到位置\n          current += step;\n          element.style[attr] = current + \"px\";\n        }\n\n        if (current != target) {\n          flag = false;\n        }\n      }\n      if (flag) {\n        //清理定时器\n        clearInterval(element.timeId);\n        // 所有属性到达目标后才能使用，并且用户有输入函数\n        if (fn1) {\n          fn1();\n        }\n      }\n    }, 20);\n  }\n\n\n  // 加载图片\n  for (let i = 0; i < li.length; i++) {\n    li[i].style.backgroundImage = \"url(images/\" + (i + 1) + \".jpg)\";\n\n    // 鼠标进入\n    li[i].onmouseover = fn1;\n\n    // 鼠标离开\n    li[i].onmouseout = fn2;\n\n    function fn1() {\n      for (let j = 0; j < li.length; j++) {\n        fn(li[j], {\n          \"width\": 100\n        }); //动画效果\n      }\n      fn(this, {\n        \"width\": 800\n      })\n    }\n\n    function fn2() {\n      for (let j = 0; j < li.length; j++) {\n        fn(li[j], {\n          \"width\": 235\n        }); //动画效果 \n        }\n      }\n    }\n```","tags":["js笔记/案例"],"categories":["JavaScript"]},{"title":"获取计算后的样式/封装变速移动函数","url":"%2F2018%2F09%2F01%2F2018-09-02%2F","content":"\n# 重点：\n\n### 获取计算后函数\n\n1.获取计算后的 css 样式（返回值为 css 的一个对象包含所有的 css 元素） \n2.封装兼容代码\n兼容：\n谷歌,火狐支持\nconsole.log(window.getComputedStyle(dv,null).left);\nIE8 支持\nconsole.log(dv.currentStyle.left);\n\n## 封装变速移动函数\n\n1.理清思路 \n2.传入元素，对象，函数 \n3.判断 opacity 和 zindex \n4.获取元素位置等数据 \n5.可以设置移动，大小，透明度，层级\n6.配合获取后样式用，未优化\n\n# 封装代码\n\n### 获取计算后样式代码\n\n```JavaScript\n    // 判断浏览器是否自持方法，得到css返回值\n    // 未设置的css样式会返回auto或者0\n    function getStyle(element, attr) {\n        //判断浏览器是否支持这个方法\n        return window.getComputedStyle ? window.getComputedStyle(element, null)[attr] : element.currentStyle[attr];\n    }\n```\n\n## 封装变速移动函数\n\n```JavaScript\n    // 判断浏览器是否自持方法，得到css返回值\n    function getStyle(element, attr) {\n        //判断浏览器是否支持这个方法\n        return window.getComputedStyle ? window.getComputedStyle(element, null)[attr] : element.currentStyle[attr];\n    }\n\n    // 封装点击事件移动函数\n    //设置任意的一个元素,移动到指定的目标位置\n    fn = (element, json, fn1) => {\n        clearInterval(element.timeId);\n        //定时器的id值存储到对象的一个属性中\n        element.timeId = setInterval(function () {\n            let flag = true; //判断目标到达\n            for (const attr in json) {\n                //判断这个属性attr中是不是opacity\n                if (attr == \"opacity\") {\n                    //获取元素的当前的透明度，放大一百倍\n                    var current = getStyle(element, attr) * 100;\n                    // 当前属性对应的目标值,放大一百倍\n                    var target = json[attr] * 100;\n                    //每次移动的距离\n                    var step = (target - current) / 10;\n                    step = step > 0 ? Math.ceil(step) : Math.floor(step); //当前移动到位置\n                    current += step;\n                    element.style[attr] = current / 100;\n                } else if (attr == \"zIndex\") { //判断这个属性attr中是不是zIndex\n                    element.style[attr] = json[attr];\n\n                } else {\n                    //获取元素的当前的位置,数字类型\n                    var current = parseInt(getStyle(element, attr));\n                    // 当前属性对应的目标值\n                    var target = json[attr];\n                    //每次移动的距离\n                    var step = (target - current) / 10;\n                    step = step > 0 ? Math.ceil(step) : Math.floor(step); //当前移动到位置\n                    current += step;\n                    element.style[attr] = current + \"px\";\n                }\n\n                if (current != target) {\n                    flag = false;\n                }\n                console.log(\"测试代码：当前元素\" + attr + \"当前位置\" + current + \" 目标值\" + target);\n            }\n            if (flag) {\n                //清理定时器\n                clearInterval(element.timeId);\n                // 所有属性到达目标后才能使用，并且用户有输入函数\n                if (fn1) {\n                    fn1();\n                }\n            }\n        }, 20);\n    }\n```\n\n# 小案例代码\n## 获取计算后样式\n### Css\n\n```Css\n.dv {\n    width: 200px;\n    height: 200px;\n    position: absolute;\n    left: 100px;\n    background-color: pink;\n}\n```\n\n### Html\n\n```Html\n    <input type=\"button\" value=\"点击\">\n    <div class=\"dv\">\n\n    </div>\n```\n\n### Js\n\n```JavaScript\n    let btn = document.querySelector(\"input\");\n    let dv = document.querySelector(\".dv\");\n\n    // //谷歌,火狐支持\n    // //console.log(window.getComputedStyle(dv,null).left);\n    //\n    // //console.log(window.getComputedStyle(dv,null)[\"left\"]);\n    // //IE8支持\n    // //console.log(dv.currentStyle.left);\n\n\n    // 判断浏览器是否自持方法，得到css返回值\n    // 未设置的css样式会返回auto或者0\n    function getStyle(element, attr) {\n        //判断浏览器是否支持这个方法\n        return window.getComputedStyle ? window.getComputedStyle(element, null)[attr] : element.currentStyle[attr];\n    }\n\n\n    btn.onclick = () => {\n        console.log(getStyle(dv,\"left\"));\n        console.log(getStyle(dv,\"backgroundColor\"));\n    }\n```\n\n\n## 封装变速移动小案例\n### Css\n```Css\n* {\n    padding: 0;\n    margin: 0;\n}\n\ndiv {\n    position: absolute;\n    top: 0;\n    left: 0;\n    width: 200px;\n    height: 200px;\n    background-color: pink;\n}\ninput {\n    z-index: 10;\n    position: absolute;\n    top: 0;\n    left: 0;\n}\n```\n\n### Html\n```Html\n<input type=\"button\" value=\"移动\">\n<div>\n\n</div>\n```\n\n### Js\n\n```JavaScript\nlet btn = document.querySelector(\"input\");\n    let dv = document.querySelector(\"div\");\n\n    // 判断浏览器是否自持方法，得到css返回值\n    function getStyle(element, attr) {\n        //判断浏览器是否支持这个方法\n        return window.getComputedStyle ? window.getComputedStyle(element, null)[attr] : element.currentStyle[attr];\n    }\n\n\n    // 封装点击事件移动函数\n    //设置任意的一个元素,移动到指定的目标位置\n    fn = (element, json, fn1) => {\n        clearInterval(element.timeId);\n        //定时器的id值存储到对象的一个属性中\n        element.timeId = setInterval(function () {\n            let flag = true; //判断目标到达\n            for (const attr in json) {\n                //判断这个属性attr中是不是opacity\n                if (attr == \"opacity\") {\n                    //获取元素的当前的透明度，放大一百倍\n                    var current = getStyle(element, attr) * 100;\n                    // 当前属性对应的目标值,放大一百倍\n                    var target = json[attr] * 100;\n                    //每次移动的距离\n                    var step = (target - current) / 10;\n                    step = step > 0 ? Math.ceil(step) : Math.floor(step); //当前移动到位置\n                    current += step;\n                    element.style[attr] = current / 100;\n                } else if (attr == \"zIndex\") { //判断这个属性attr中是不是zIndex\n                    element.style[attr] = json[attr];\n\n                } else {\n                    //获取元素的当前的位置,数字类型\n                    var current = parseInt(getStyle(element, attr));\n                    // 当前属性对应的目标值\n                    var target = json[attr];\n                    //每次移动的距离\n                    var step = (target - current) / 10;\n                    step = step > 0 ? Math.ceil(step) : Math.floor(step); //当前移动到位置\n                    current += step;\n                    element.style[attr] = current + \"px\";\n                }\n\n                if (current != target) {\n                    flag = false;\n                }\n                console.log(\"测试代码：当前元素\" + attr + \"当前位置\" + current + \" 目标值\" + target);\n            }\n            if (flag) {\n                //清理定时器\n                clearInterval(element.timeId);\n                // 所有属性到达目标后才能使用，并且用户有输入函数\n                if (fn1) {\n                    fn1();\n                }\n            }\n        }, 20);\n    }\n\n    btn.onclick = () => {\n        let json = {\n            width: 800,\n            height: 400,\n            left: 500,\n            top: 600,\n            opacity: 0.2\n        }\n        let json1 = {\n            width: 20,\n            height: 40,\n            left: 0,\n            top: 0,\n            opacity: 0.8,\n            zIndex:1000\n        }\n        // fn(dv, json)\n\n\n        // let date1 = {\n        //     \"width\": 800,\n        //     \"height\": 400,\n        //     \"left\": 500,\n        //     \"top\": 600\n        // };\n        // fn(dv, date1, () => {\n        //     let date2 = {\n        //         \"width\": 80,\n        //         \"height\": 40,\n        //         \"left\": 50,\n        //         \"top\": 60\n        //     }\n        //     fn(dv, date2, () => {\n        //         let date3 = {\n        //             \"width\": 400,\n        //             \"height\": 200,\n        //             \"left\": 300,\n        //             \"top\": 100\n        //         }\n        //         fn(dv, date3)\n        //     })\n        // });\n\n        fn(dv, json, () => {\n            fn(dv,json1)\n        })\n    }\n```","tags":["js笔记/案例"],"categories":["JavaScript"]},{"title":"固定导航栏/筋斗云案例","url":"%2F2018%2F09%2F01%2F2018-09-01%2F","content":"\n# 重点难点/功能:\n\n一、固定导航栏 \n1.获取页面向上向下卷曲的距离值 \n2.兼容性\n3.window 的滚动事件 \n4.更改样式 \n5.判断向上卷曲出去的距离和最上面的 div 的高度对比 \n6.设置后面的元素值防止有跳的效果 \n7.回值时的元素设置\n8.固定浏览器在向下滑动时标题栏还在顶部，随着浏览器的上下滑动而改变\n\n二、筋斗云 \n1.循环遍历给元素添加事件（鼠标进出，点击） \n2.调用封装的函数\n3.es6 写法与 es5 写法的小问题\n4.鼠标进入时使用变速动画快速的滑动到鼠标位置\n5.鼠标离开时自动回复到上一次的位子\n6.当鼠标点击时就会记录位子最为父级位置返回去\n\n# 效果图\n## 固定导航栏图\n<img src=\"images/gd1.png\">\n<img src=\"images/gd2.png\">\n## 筋斗云图\n<img src=\"images/jd1.png\">\n<img src=\"images/jd2.png\">\n\n# 素材\n\n## 固定导航栏\n\n<img src=\"images/top.png\">\n<img src=\"images/nav.png\">\n<img src=\"images/main.png\">\n\n## 筋斗云\n\n<img src=\"images/cloud.gif\">\n<img src=\"images/rss.png\">\n\n# 固定导航栏案例代码\n\n### Css\n\n```Css\n    * {\n      margin: 0;\n      padding: 0\n    }\n\n    img {\n      vertical-align: top;\n    }\n\n    .main {\n      margin: 0 auto;\n      width: 1000px;\n      margin-top: 10px;\n\n    }\n\n    .fixed {\n      position: fixed;\n      top: 0;\n      left: 0;\n    }\n```\n\n### Html\n\n```Html\n  <div class=\"top\" id=\"topPart\">\n    <img src=\"images/top.png\" alt=\"\" />\n  </div>\n  <div class=\"nav\" id=\"navBar\">\n    <img src=\"images/nav.png\" alt=\"\" />\n  </div>\n  <div class=\"main\" id=\"mainPart\">\n    <img src=\"images/main.png\" alt=\"\" />\n  </div>\n```\n\n### Js\n\n```JavaScript\n    let topPart = document.querySelector(\"#topPart\");\n  let navBar = document.querySelector(\"#navBar\");\n\n  //获取页面向上或者向左卷曲出去的距离的值\n  getScroll = () => {\n    return {\n      left: window.pageXOffset || document.documentElement.scrollLeft || document.body.scrollLeft || 0,\n      top: window.pageYOffset || document.documentElement.scrollTop || document.body.scrollTop || 0\n    };\n  }\n\n  // 滚动事件\n  window.onscroll = () => {\n    //向上卷曲出去的距离和最上面的div的高度对比\n    if (getScroll().top >= topPart.offsetHeight) {\n      //设置第二个div的类样式\n      navBar.className = \"nav fixed\"\n      //设置第三个div的marginTop的值\n      topPart.style.marginTop = navBar.offsetHeight + \"px\";\n    } else {\n      navBar.className = \"nav\"\n      topPart.style.marginTop = 10 + \"px\";\n    }\n  }\n```\n\n# 筋斗云案例代码\n\n### Css\n\n```Css\n    * {\n      margin: 0;\n      padding: 0\n    }\n\n    ul {\n      list-style: none\n    }\n\n    body {\n      background-color: #333;\n    }\n\n    .nav {\n      width: 800px;\n      height: 42px;\n      margin: 100px auto;\n      background: url(images/rss.png) right center no-repeat;\n      background-color: #fff;\n      border-radius: 10px;\n      position: relative;\n    }\n\n    .nav li {\n      width: 83px;\n      height: 42px;\n      text-align: center;\n      line-height: 42px;\n      float: left;\n      cursor: pointer;\n    }\n\n    .nav span {\n      position: absolute;\n      top: 0;\n      left: 0;\n      width: 83px;\n      height: 42px;\n      background: url(images/cloud.gif) no-repeat;\n    }\n\n    ul {\n      position: relative;\n    }\n```\n\n### Html\n\n```Html\n<div class=\"nav\">\n    <span id=\"cloud\"></span>\n    <ul id=\"navBar\">\n      <li>北京校区</li>\n      <li>上海校区</li>\n      <li>广州校区</li>\n      <li>深圳校区</li>\n      <li>武汉校区</li>\n      <li>关于我们</li>\n      <li>联系我们</li>\n      <li>招贤纳士</li>\n    </ul>\n  </div>\n```\n\n### Js\n\n```JavaScript\n    let cloud = document.querySelector(\"#cloud\");\n    let li = document.querySelectorAll(\"#navBar li\");\n\n    // es6 es6中的this调用的是windwo并不是调用当前的this\n    // mouseoverHandle = () => {\n    //   fn(cloud, this.offsetLeft)\n    //   console.log(this);\n    //   console.log(this.offsetLeft);\n    // }\n\n    // es5\n    function mouseoverHandle() {\n      fn(cloud, this.offsetLeft)\n    }\n\n    let last = 0;\n\n    function clickHandle() {\n      last = this.offsetLeft;\n    }\n\n    function mouseoutHandle() {\n      fn(cloud, last);\n    }\n\n    for (let i = 0; i < li.length; i++) {\n      // 鼠标移入\n      li[i].onmouseover = mouseoverHandle;\n      // 鼠标点击\n      li[i].onclick = clickHandle;\n      // 鼠标离开\n      li[i].onmouseout = mouseoutHandle;\n    }\n\n    // 封装点击事件移动函数\n    //设置任意的一个元素,移动到指定的目标位置\n    fn = (element, target) => {\n      clearInterval(element.timeId);\n      //定时器的id值存储到对象的一个属性中\n      element.timeId = setInterval(function () {\n        //获取元素的当前的位置,数字类型\n        var current = element.offsetLeft;\n        //每次移动的距离\n        var step = (target - current) / 10;\n        step = step > 0 ? Math.ceil(step) : Math.floor(step);\n        current += step;\n        if (Math.abs(current - target) > Math.abs(step)) {\n          element.style.left = current + \"px\";\n        } else {\n          //清理定时器\n          clearInterval(element.timeId);\n          //直接到达目标\n          element.style.left = target + \"px\";\n        }\n      }, 20);\n    }\n```\n","tags":["js笔记/案例"],"categories":["JavaScript"]},{"title":"自动轮播图","url":"%2F2018%2F08%2F30%2F2018-08-30%2F","content":"\n# 重点：\n1.获取相应的元素\n2.给元素添加上相应的事件\n3.给事件添加相应的功能\n4.封装函数\n5.定时器的运用\n\n# 案例效果图\n<img src=\"/images/x1.png\">\n<img src=\"/images/x2.png\">\n\n## 素材\n<img src=\"/images/1.jpg\">\n<img src=\"/images/2.jpg\">\n<img src=\"/images/3.jpg\">\n<img src=\"/images/4.jpg\">\n<img src=\"/images/5.jpg\">\n\n# 案例代码\n\n## Css\n```Css\n.wrap {\n            width: 500px;\n            height: 200px;\n            border: 5px solid black;\n            position: relative;\n            overflow: hidden;\n            margin: 0 auto;\n        }\n\n        .inner {\n            width: 600%;\n            position: relative;\n        }\n\n        img {\n            float: left;\n        }\n\n        .wrap:hover .left,\n        .wrap:hover .right {\n            opacity: 1;\n        }\n\n        .left,\n        .right {\n            position: absolute;\n            top: 50%;\n            color: pink;\n            font-size: 30px;\n            transform: translateY(-50%);\n            cursor: pointer;\n            opacity: 0;\n        }\n\n        .right {\n            right: 0;\n        }\n\n        .an {\n            position: absolute;\n            top: 170px;\n            left: 50%;\n            transform: translateX(-50%);\n        }\n\n        span {\n            width: 10px;\n            height: 10px;\n            /* display: inline; */\n            border-radius: 50%;\n            background-color: #000;\n            float: left;\n            margin-left: 5px;\n        }\n\n        .sc {\n            background-color: red;\n        }\n```\n\n## Html\n```Html\n<div class=\"wrap\">\n        <div class=\"inner\">\n            <img src=\"images/1.jpg\" alt=\"\">\n            <img src=\"images/2.jpg\" alt=\"\">\n            <img src=\"images/3.jpg\" alt=\"\">\n            <img src=\"images/4.jpg\" alt=\"\">\n            <img src=\"images/5.jpg\" alt=\"\">\n            <img src=\"images/1.jpg\" alt=\"\">\n        </div>\n        <div class=\"left\">\n            < </div> <div class=\"right\">\n                >\n        </div>\n        <div class=\"an\">\n            <span class=\"sc\"></span>\n            <span></span>\n            <span></span>\n            <span></span>\n            <span></span>\n        </div>\n    </div>\n```\n\n## JavaScript\n```JavaScript\n    // 获取左按钮\n    let l = document.querySelector(\".left\");\n    // 获取右按钮\n    let r = document.querySelector(\".right\");\n    // 图片父级\n    let inner = document.querySelector(\".inner\");\n    // 获取span按钮\n    let span = document.querySelectorAll(\"span\");\n    // 获取框架\n    let wrap = document.querySelector(\".wrap\");\n    // 记录第几个\n    let index = 0;\n\n    // 右点击事件\n    r.onclick = () => {\n        index++;\n        if (index >= 6) {\n            index = 1;\n            inner.style.left = 0 + \"px\";\n        }\n        chang()\n    }\n\n    // 左点击事件\n    l.onclick = () => {\n        index--;\n        if (index < 0) {\n            inner.style.left = -2500 + \"px\";\n            index = 4;\n        }\n        chang()\n    }\n\n    // 循环给sapn按钮添加点击事件\n    for (let i = 0; i < span.length; i++) {\n        span[i].num = i;\n        span[i].onclick = () => {\n            index = span[i].num;\n            chang();\n        }\n    }\n\n    // 每3秒自动播放\n    let zd = setInterval(r.onclick, 3000);\n\n    // 鼠标进入停止播放事件\n    wrap.onmouseover = () => {\n        clearInterval(zd);\n    }\n\n    // 鼠标离开继续开启鼠标点击事件\n    wrap.onmouseout = () => {\n        zd = setInterval(r.onclick, 3000);\n    }\n\n    // 给按钮添加遍历和调用移动函数\n    chang = () => {\n        for (let i = 0; i < span.length; i++) {\n            span[i].className = \"\";\n        }\n        let n = index == 5 ? 0 : index;\n        span[n].className = \"sc\";\n        fn(inner, -index * 500);\n\n    }\n\n    // 封装点事件移动函数\n    //设置任意的一个元素,移动到指定的目标位置\n    fn = (element, target) => {\n        clearInterval(element.timeId);\n        //定时器的id值存储到对象的一个属性中\n        element.timeId = setInterval(function () {\n            //获取元素的当前的位置,数字类型\n            var current = element.offsetLeft;\n            //每次移动的距离\n            var step = 20;\n            step = current < target ? step : -step; //当前移动到位置 \n            current += step;\n            if (Math.abs(current - target) > Math.abs(step)) {\n                element.style.left = current + \"px\";\n            } else {\n                //清理定时器\n                clearInterval(element.timeId);\n                //直接到达目标\n                element.style.left = target + \"px\";\n            }\n        }, 20);\n    }\n```\n","tags":["js笔记/案例"],"categories":["JavaScript"]},{"title":"协议按钮/定时器小案例","url":"%2F2018%2F08%2F29%2F2018-08-29%2F","content":"\n# 重点：\n\n1.协议按钮\n2.div 渐变\n3.div 变宽\n4.div 移动\n\n//div要移动,要脱离文档流---position:absolute\n//如果样式的代码是在style的标签中设置,外面是获取不到\n//如果样式的代码是在style的属性设置,外面是可以获取\n//获取div的当前位置\n//console.log(div.offsetLeft);\n\n# 协议按钮\n### Html\n```Html\n    <textarea name=\"texta\" id=\"\" cols=\"30\" rows=\"10\">\n        这个世界就是这么疯狂，你不同意我就不给你注册\n    </textarea>\n    <input type=\"button\" value=\"请仔细阅读协议(5)\" disabled>\n```\n### Js\n```JavaScript\n    let btn = document.querySelector(\"input\");\n    let time = 5;\n    let tim = setInterval(() => {\n        time--;\n        btn.value = \"请仔细阅读协议(\" + time + \")\";\n        if (time <= 0) {\n            clearInterval(tim);\n            btn.disabled = false;\n            btn.value = \"同意协议\";\n        }\n    }, 1000)\n```\n\n# 渐变\n### Css\n```Css\ndiv {\n    width: 300px;\n    height: 200px;\n    background-color: pink;\n}\n```\n### Html\n```Html\n    <div>\n\n    </div>\n    <input type=\"button\" value=\"透明\">\n```\n### Js\n```JavaScript\nlet dv = document.querySelector(\"div\");\n    let btn = document.querySelector(\"input\");\n    let opacity = 10;\n    btn.onclick = () => {\n        let time = setInterval(() => {\n            opacity--;\n            dv.style.opacity = opacity / 10;\n            if (opacity<=0) {\n                clearInterval(time);//清理定时器\n            }\n        }, 200)\n    }\n```\n\n# 变宽\n### Css\n```Css\n* {\n    margin: 0;\n    padding: 0;\n}\ndiv {\n    width: 200px;\n    height: 100px;\n    background-color: pink;\n    \n}\n```\n### Html\n```Html\n<input type=\"button\" value=\"变宽\">\n<input type=\"button\" value=\"停止变宽\">\n<input type=\"button\" value=\"变窄\">\n<hr>\n<input type=\"button\" value=\"变长\">\n<input type=\"button\" value=\"停止变长\">\n<input type=\"button\" value=\"变短\">\n<div></div>\n```\n### Js\n```JavaScript\nlet btn = document.querySelectorAll(\"input\");\nlet dv = document.querySelector(\"div\");\nlet w = 200;\nlet h = 100;\nlet time = null;\nlet time1 = null;\n\nlet bol = false;\nlet bol1 = false;\n\nbtn[0].onclick = () => {\n    if (bol) {\n        return;\n    }\n    bol = true;\n    time = setInterval(() => {\n        w++;\n        dv.style.width = w + \"px\";\n    }, 20)\n}\n\nbtn[1].onclick = () => {\n    bol = false;\n    clearInterval(time);\n}\n\nbtn[2].onclick = () => {\n    if (bol) {\n        return;\n    }\n    bol = true;\n    time = setInterval(() => {\n        w--;\n        dv.style.width = w + \"px\";\n        if (w <= 0) {\n            bol = false;\n            clearInterval(time);\n        }\n    }, 20)\n}\n\nbtn[3].onclick = () => {\n    if (bol1) {\n        return;\n    }\n    bol1 = true;\n    time1 = setInterval(() => {\n        h++;\n        dv.style.height = h + \"px\";\n    }, 20)\n}\n\nbtn[4].onclick = () => {\n    bol1 = false;\n    clearInterval(time1);\n}\n\nbtn[5].onclick = () => {\n    if (bol1) {\n        return;\n    }\n    bol1 = true;\n    time1 = setInterval(() => {\n        h--;\n        dv.style.height = h + \"px\";\n        if (h <= 0) {\n            bol1 = false;\n            clearInterval(time1);\n        }\n    }, 20)\n}\n```\n\n# 移动\n### Css\n```Css\n* {\n    margin: 0;\n    padding: 0;\n}\ndiv {\n    width: 200px;\n    height: 100px;\n    background-color: pink;\n    position: absolute;\n    top: 40px;\n    left: 0;\n}\n```\n### Html\n```Html\n<input type=\"button\" value=\"向右移动600px\">\n<input type=\"button\" value=\"向左移动600px\">\n<input type=\"button\" value=\"向上移动600px\">\n<input type=\"button\" value=\"向下移动600px\">\n<div>\n\n</div>\n```\n### Js\n```JavaScript\nlet btn = document.querySelectorAll(\"input\");\nlet dv = document.querySelector(\"div\");\n\nlet time = null;\nlet bol = false;\nlet x = \"x\";\nlet y = \"y\";\nlet d;\n\nfn = (t, h, l) => {\n    if (bol) {\n        return;\n    }\n    bol = true;\n    if (t == x) {\n        d = dv.offsetLeft;\n    } else {\n        d = dv.offsetTop;\n    }\n    time = setInterval(() => {\n        if (h == 0) {\n            d++;\n        } else if (h == 1) {\n            d--;\n        }\n        if (t == x) {\n            dv.style.left = d + \"px\";\n        } else {\n            dv.style.top = d + \"px\";\n        }\n        if (d % l == 0 || d <= 0) {\n            clearInterval(time);\n            bol = false;\n        } else if (t == y && d <= 40) {\n            clearInterval(time);\n            bol = false;\n        }\n    }, 20)\n}\n\n\nbtn[0].onclick = () => {\n    fn(x, 0, 600);\n}\nbtn[1].onclick = () => {\n    fn(x, 1, 600);\n}\nbtn[2].onclick = () => {\n    fn(y, 1, 600);\n}\nbtn[3].onclick = () => {\n    fn(y, 0, 600);\n}\n```","tags":["js笔记/案例"],"categories":["JavaScript"]},{"title":"BOM 浏览器","url":"%2F2018%2F08%2F28%2F2018-08-28%2F","content":"\n### 重点：\n\n1.location 主机\n2.history\n3.navigator 判断浏览器所在系统\n4.window.onload 页面加载完成 \n5.定时器 \n\n### history\n\n```JavaScript\n    window.onload = function () {\n        let btn = document.querySelectorAll(\"input\");\n\n        btn[0].onclick = function () {\n            window.location.href = \"9_tui.html\";\n        }\n\n        // 方法一\n        // btn[1].onclick = function () {\n        //     window.history.forward();\n        // }\n\n        // 方法二\n        btn[1].onclick = function () {\n            window.history.go(1);\n        }\n    }\n```\n\n```JavaScript\n    window.onload = function () {\n        let btn = document.querySelector(\"input\");\n        // 方法一\n        // btn.onclick = function () {\n        //     window.history.back();\n        // }\n\n        // 方法二\n        btn.onclick = function () {\n            window.history.go(-1);\n        }\n    }\n```\n\n### navigator\n\n```JavaScript\n// 通过 platform 可以判断浏览器所在打系统平台类型\nconsole.log(window.navigator.platform);\n//\nconsole.log(window.navigator.userAgent);\n```\n\n### 定时器一\n\n```JavaScript\n//定义开启定时器 setInterval\nlet time = setInterval(function () {\n    console.log(\"ss\");\n},1000)\n\n//关闭定时器 clearInterval\nbtn.onclick = function () {\n    window.clearInterval(time);\n}\n```\n\n### 定时器二 一次性定时器\n\n```JavaScript\n    let btn = document.querySelector(\"input\");\n    // 一次性定时器\n    let time = setTimeout(() => {\n        alert(\"你好\");\n    }, 1000);\n    // 清理定时器\n    btn.onclick = () => {\n        clearTimeout(time)\n    }\n```\n\n## 小案例1\n\n~~~\n<!DOCTYPE html>\n<html lang=\"en\">\n\n<head>\n    <meta charset=\"UTF-8\">\n    <meta name=\"viewport\" content=\"width=device-width, initial-scale=1.0\">\n    <meta http-equiv=\"X-UA-Compatible\" content=\"ie=edge\">\n    <title>Document</title>\n\n    <style>\n        div {\n            width: 600px;\n            height: 600px;\n            border: 2px solid pink;\n            background-color: #000;\n            position: relative;\n        }\n        span {\n            font-size: 30px;\n            color: yellow;\n            position: absolute;\n        }\n    </style>\n\n</head>\n\n<body>\n    <input type=\"button\" value=\"亮起来\">\n    <div>\n\n    </div>\n</body>\n\n<script>\n    let btn = document.querySelector(\"input\");\n    let div = document.querySelector(\"div\");\n    let time = null;\n\n    btn.onclick = function () {\n        div.innerHTML = \"<span>⭐️</span>\";\n        time = setInterval(function () {\n            let x = parseInt(Math.random() * 600 + 1);\n            let y = parseInt(Math.random() * 600 + 1);\n            div.firstElementChild.style.left = x + \"px\";\n            div.firstElementChild.style.top = y + \"px\";\n        }, 500);\n    }\n</script>\n\n</html>\n~~~\n\n## 小案例2\n~~~\n<!DOCTYPE html>\n<html lang=\"en\">\n\n<head>\n    <meta charset=\"UTF-8\">\n    <meta name=\"viewport\" content=\"width=device-width, initial-scale=1.0\">\n    <meta http-equiv=\"X-UA-Compatible\" content=\"ie=edge\">\n    <title>Document</title>\n\n    <style>\n        span {\n            font-size: 30px;\n            color: red;\n            position: absolute;\n            top: 500px\n        }\n    </style>\n\n</head>\n\n<body>\n    <img src=\"\" alt=\"\">\n    <div class=\"dv\">\n        <span></span>\n    </div>\n</body>\n\n<script>\n    f1 = () => {\n        let dv = document.querySelector(\".dv\");\n        let span = document.querySelector(\"span\");\n        let dt = new Date();\n        let img = document.querySelector(\"img\");\n\n        let nian = dt.getFullYear(); //获取完整的年份(4位,1970-????)\n        let yue = dt.getMonth() + 1; //获取当前月份(0-11,0代表1月)\n        let ri = dt.getDate(); //获取当前日(1-31)\n        let hour = dt.getHours(); //获取当前小时数(0-23)\n        let fen = dt.getMinutes(); //获取当前分钟数(0-59)\n        let second = dt.getSeconds(); //获取当前秒数(0-59)\n\n        yue = yue < 10 ? \"0\" + yue : yue;\n        ri = ri < 10 ? \"0\" + ri : ri;\n        fen = fen < 10 ? \"0\" + fen : fen;\n        hour = hour < 10 ? \"0\" + hour : hour;\n        second = second < 10 ? \"0\" + second : second;\n        img.src = \"meimei/\" + hour + \"_\" + second + \".jpg\";\n        let aa = nian + \"年\" + yue + \"月\" + ri + \"日\" + hour + \"时\" + fen + \"分\" + second + \"秒\";\n        span.innerText = aa;\n        // dv.innerHTML = \"<span>ss</span>\"\n        console.log(aa);\n    }\n\n    setInterval(f1, 1000);\n</script>\n\n</html>\n~~~","tags":["js笔记/案例"],"categories":["JavaScript"]},{"title":"模拟百度搜索","url":"%2F2018%2F08%2F27%2F2018-08-27%2F","content":"\n重点：\n1.创建元素，添加元素，移除元素 document.createElement(\"p\")   上级名.removeChild(删除的元素名);   添加到的元素名例（arr数组等）.push(追加元素)\n2.判读获取文本框内容与数组对比 indexOf()\n3.判断元素是否为空不为空删除\n4.遍历数组\n\n\n## Html\n```Html\n    <div class=\"box\">\n        <input type=\"text\" class=\"txt\">\n        <input class=\"btn\" type=\"submit\" value=\"搜索\">\n    </div>\n```\n\n## Css\n```Css\n        * {\n            padding: 0;\n            margin: 0;\n        }\n\n        .box {\n            position: relative;\n            left: 50%;\n            top: 200px;\n        }\n\n        .txt {\n            width: 300px;\n            height: 30px;\n        }\n\n        .btn {\n            width: 100px;\n            height: 35px;\n            border: 1px solid #000;\n            background-color: #fff;\n        }\n\n        p {\n            margin: 5px 0;\n        }\n```\n\n## js\n```JavaScript\n    // 获取数据\n    let box = document.querySelector(\".box\");\n    let txt = document.querySelector(\".txt\");\n    let btn = document.querySelector(\".btn\");\n\n    // 数组记录数据\n    // 本应后台获取\n    // 前端测试用数组代替\n    let keyWords = [\"我是你爸爸\", \"我是你爸爸\", \"我是你爸爸\", \"我是你爸爸\", \"我的你爸爸\", \"儿子\",\"小杨才是最纯洁的\", \"小杨才是最帅的\", \"小段是最猥琐的\", \"小超是最龌龊的\", \"传智播客是一个培训机构\", \"传说在传智有个很帅很纯洁的小杨\", \"苹果好吃\", \"苹果此次召回还是没有中国\"];\n\n    // 文本框键盘抬起函数\n    txt.onkeyup = function () {\n\n        // 判断是否有新创建id为obj的div元素，有就清除\n        if ((document.querySelector(\"#obj\"))) {\n            box.removeChild((document.querySelector(\"#obj\")));\n        }\n        \n        // 定义现在文本框的内容\n        let text = this.value;\n        // 临时数组记录数据\n        let arr = [];\n        for (let i = 0; i < keyWords.length; i++) {\n            // 是否是最开始出现\n            if (keyWords[i].indexOf(text) == 0) {\n                arr.push(keyWords[i]); //追加到临时数组\n            }\n        }\n        \n        // 判断文本框或者临时数组为空时，在判断创建id为obj的div元素，有就清除，并且停止后面的代码运行\n        if (this.value.length == 0 || arr.length == 0) {\n            if ((document.querySelector(\"#obj\"))) {\n                box.removeChild((document.querySelector(\"#obj\")));\n            }\n            return;\n        }\n\n        // 创建div，加入到box中\n        let obj = document.createElement(\"div\");\n        // 添加到类名为box的div中\n        box.appendChild(obj);\n        // 设置id为obj\n        obj.id = \"obj\";\n        // 设置样式\n        obj.style.width = \"300px\";\n        obj.style.border = \"1px solid red\";\n        \n        // 循环遍历临时数组，并创建p标签输出数组的内容\n        for (let i = 0; i < arr.length; i++) {\n            let p = document.createElement(\"p\");\n            obj.appendChild(p);\n            p.innerText = arr[i];\n            \n            // 定义p标签的鼠标进入和离开事件，改变背景颜色\n            p.onmouseover = function () {\n                this.style.backgroundColor = \"yellow\";\n            }\n            p.onmouseout = function () {\n                this.style.backgroundColor = \"\";\n            }\n        }\n    }\n```\n\n## 效果\n![“有输入数据”](/media/baidu1.png)\n![“无输入数据”](/media/baidu2.png)","tags":["js笔记/案例"],"categories":["JavaScript"]},{"title":"js 事件绑/解 阻止事件冒泡","url":"%2F2018%2F08%2F25%2F2018-08-25%2F","content":"\n## 绑/解事件\n\n### 绑定事件的区别\n\naddEventListener();\nattachEvent()\n相同点: 都可以为元素绑定事件\n不同点: 1.方法名不一样 2.参数个数不一样 addEventListener 三个参数,attachEvent 两个参数\n3.addEventListener 谷歌,火狐,IE11 支持,IE8 不支持\nattachEvent 谷歌火狐不支持,IE11 不支持,IE8 支持\n4.this 不同,addEventListener 中的 this 是当前绑定事件的对象\nattachEvent 中的 this 是 window\n5.addEventListener 中事件的类型(事件的名字)没有 on\nattachEvent 中的事件的类型(事件的名字)有 on\n\n### 解绑事件注意\n\n注意:用什么方式绑定事件,就应该用对应的方式解绑事件 1.解绑事件\n对象.on 事件名字=事件处理函数--->绑定事件\n对象.on 事件名字=null; 2.解绑事件\n对象.addEventListener(\"没有 on 的事件类型\",命名函数,false);---绑定事件\n对象.removeEventListener(\"没有 on 的事件类型\",函数名字,false); 3.解绑事件\n对象.attachEvent(\"on 事件类型\",命名函数);---绑定事件\n对象.detachEvent(\"on 事件类型\",函数名字);\n\n### 绑定事件\n\n```JavaScript\n    btn.addEventListener(\"click\",function () {\n        console.log(this);\n    },false);\n\n    btn.attachEvent(\"onclick\",function () {\n        console.log(this);\n    });\n```\n\n### 解绑事件\n\n```JavaScript\n    let btn = document.querySelectorAll(\"input\");\n    // btn[0].onclick = function () {\n    //     console.log(\"我是你爸\");\n    // }\n    // btn[1].onclick = function () {\n    //     // 1.解绑事件\n    //     btn[0].onclick = null;\n    // }\n\n\n    // 解绑2\n    function f1() {\n        console.log(\"11\");\n    }\n    function f2() {\n        console.log(\"22\");\n    }\n\n    // btn[0].addEventListener(\"click\",f1,false);\n    // btn[0].addEventListener(\"click\",f2,false);\n\n    // btn[1].onclick = function () {\n    //     // 2.解绑事件\n    //     btn[0].removeEventListener(\"click\",f1,false);\n    // }\n\n    // 解绑3\n     btn[0].attachEvent(\"onclick\",f1);\n     btn[0].attachEvent(\"onclick\",f2);\n\n     btn[1].onclick = function () {\n         btn[0].detachEvent(\"onclick\",f1);\n     }\n```\n\n### 绑/解兼容写法\n\n```JavaScript\n    // 获取按钮\n    let btn = document.querySelectorAll(\"input\");\n\n    // 事件函数\n    function f1() {\n        console.log(\"11\");\n    }\n\n    function f2() {\n        console.log(\"22\");\n    }\n\n    // 绑定\n    function addEventListener(element, type, fn) {\n        if (element.addEventListener) {\n            element.addEventListener(type, fn, false);\n        } else if (element.attachEvent) {\n            element.attachEvent(\"on\" + type, fn)\n        } else {\n            element[\"on\" + type] = fn;\n        }\n    }\n\n    // 解绑\n    function removeEventListener(element, type, fn) {\n        if (element.removeEventListener) {\n            element.removeEventListener(type, fn, false);\n        } else if (element.detachEvent) {\n            element.detachEvent(\"on\" + type, fn)\n        } else {\n            element[\"on\" + type] = fn;\n        }\n    }\n\n    // 调用\n    addEventListener(btn[0], \"click\", f1)\n    addEventListener(btn[0], \"click\", f2)\n    btn[1].onclick = function () {\n        removeEventListener(btn[0],\"click\",f1)\n    }\n```\n\n### 阻止事件冒泡\n\n```JavaScript\n    //事件冒泡:多个元素嵌套,有层次关系,这些元素都注册了相同的事件,如果里面的元素的事件触发了,外面的元素的该事件自动的触发了.\n    //事件冒泡,阻止事件冒泡,\n    //如何阻止事件冒泡: window.event.cancelBubble=true; IE特有的,谷歌支持,火狐不支持\n\n    // e.stopPropagation(); 谷歌和火狐支持\n\n    let d1 = document.querySelector(\".d1\");\n    let d2 = document.querySelector(\".d2\");\n    let d3 = document.querySelector(\".d3\");\n\n    // 事件冒泡\n    d1.onclick = function () {\n        console.log(this.className);\n    }\n    d2.onclick = function () {\n        console.log(this.className);\n\n        // window.event.cancelBubble = true;\n    }\n    // 事件处理参数对象\n    d3.onclick = function (e) {\n        console.log(this.className);\n        // 阻止事件冒泡\n        // window.event.cancelBubble = true;\n        e.stopPropagation();\n    }\n```\n","tags":["js笔记/案例"],"categories":["JavaScript"]},{"title":"hexo","url":"%2F2018%2F08%2F25%2Fhexo%2F","content":"\n## hexo使用\n\n``` bash\n$ hexo n  //创建笔记 简写\n$ hexo new\n```\n\n``` bash\n$ hexo s  //开启服务 简写\n$ hexo server\n```\n\n``` bash\n$ hexo g  //打包笔记输出到public文件中，可上传至github中 简写\n$ hexo generate\n```\n\n##在hexo中插入图片\n图片文件夹放在source下就可以了\n```\n![“图片描述”](/文件夹/图片名) //方法一\n\n<img src=\"/media/Unofficial_JavaScript_logo_2.svg.png\" width=\"400\" alt=\"\"> //方法二\n```","tags":["Hexo笔记"],"categories":["Hexo"]},{"title":"yhf","url":"%2F2018%2F08%2F24%2Fyhf%2F","content":"\n## yhf测试文章\n\n```JavaScript\n    function show(){\n        console.log('hello yhf');\n    }\n```","tags":["个人"],"categories":["个人"]},{"title":"Hello World","url":"%2F2018%2F08%2F24%2Fhello-world%2F","content":"Welcome to [Hexo](https://hexo.io/)! This is your very first post. Check [documentation](https://hexo.io/docs/) for more info. If you get any problems when using Hexo, you can find the answer in [troubleshooting](https://hexo.io/docs/troubleshooting.html) or you can ask me on [GitHub](https://github.com/hexojs/hexo/issues).\n\n## Quick Start\n\n### Create a new post\n\n``` bash\n$ hexo new \"My New Post\"\n```\n\nMore info: [Writing](https://hexo.io/docs/writing.html)\n\n### Run server\n\n``` bash\n$ hexo server\n```\n\nMore info: [Server](https://hexo.io/docs/server.html)\n\n### Generate static files\n\n``` bash\n$ hexo generate\n```\n\nMore info: [Generating](https://hexo.io/docs/generating.html)\n\n### Deploy to remote sites\n\n``` bash\n$ hexo deploy\n```\n\nMore info: [Deployment](https://hexo.io/docs/deployment.html)\n","tags":["Hexo笔记"],"categories":["Hexo"]},{"title":"js基础","url":"%2F2017%2F12%2F06%2F01-JavaScript%E5%9F%BA%E7%A1%80%2F","content":"\n---\n学习目标:\n  - 掌握编程的基本思维\n  - 掌握编程的基本语法\ntypora-copy-images-to: media\n---\n\n# JavaScript基础\n\nHTML和CSS   京东\n\n## 课前娱乐 \n**众人皆笑我疯癫,我笑尔等看不穿**\n![一盘棋而已](/media/yule-1.png)\n\n##课前说明\n目标：\u000b掌握编程的基本思想\n掌握JavaScript的基础语法,使用常见API(备注)完成相应案例及练习和作业\n培养独立解决问题能力\n遇到问题先独立调试(牛X从规范和调试开始)\n能够独立写出所有案例代码\u000b\n注意：\n1. 以大多数同学的接受能力为基准，稳准狠的前行\u000b\n2. 注重基础，以最简单的案例说明问题，并以企业项目案例进行实践\u000b\n3. 课上思考，课下提问。不需要深究的地方不要钻牛角尖。\n4. 必须完成作业,基础坚挺的同学低调,基础薄弱同学多问\n   一句话送给大家:**当你要放弃的时候想想当初为什么坚持到现在！**\n   笔记和代码是”大家的”,\n   自己写的才是自己的.\n   复制代码者,没有”男朋友”\n   不写代码者,没有”女朋友”\n\n##阶段说明\nJavaScript基础\nWeb API\nJavaScript高级\n\n##第一天重点内容\n**变量的声明及使用**\n**数据类型**\n**类型转换**\n**运算符**\n\n##课外提示\n1.敲代码用指法,指法配图，坚持一周者即可熟练\n2.码农不需要练就一阳指或者二指禅\n3.可以使用金山打字通，此处并非打广告,个人建议，天天敲代码，不停的反复的敲练习和作业，速度和基本功的快速提升\n奉劝各位:\n**保护好自己的手**\n**控制自己的右手**\n![键盘指法](/media/jianpan-2.png)\nwindows中的常用快捷键\n![快捷键](/media/kuaijiejian-3.png)\n\n##浏览器说明\n浏览器是指可以显示网页服务器或者文件系统的HTML文件内容，并让用户与这些文件交互的一种软件。\n通俗的讲:可以显示页面的一个软件,\n国内网民计算机上常见的网页浏览器有，QQ浏览器、Internet Explorer、Firefox、Safari，Opera、Google Chrome、百度浏览器、搜狗浏览器、猎豹浏览器、360浏览器、UC浏览器、傲游浏览器、世界之窗浏览器等，浏览器是最经常使用到的客户端程序。\n常用的五大浏览器：chrome，firefox，Safari，ie，opera\n我们用chrome(谷歌浏览器)\n![浏览器](/media/liulanqi-4.png)\n![代码执行](/media/liulanqiyunxing-5.png)\n\n\n## 网页、网站和应用程序\n\n网页：单独的一个页面\n网站：一些列相关的页面组成到一起\n应用程序：可以和用户产生交互，并实现某种功能。\n\n## 演示JavaScript的强大\n\nhttp://impress.github.io/impress.js/\nhttp://naotu.baidu.com/ \nhttps://codecombat.com/\nhttps://ide.codemao.cn/\n\n需要翻墙\nhttps://developers.google.com/blockly/\nblockly迷宫\nhttps://blockly-games.appspot.com\n\nblockly迷宫不需要翻墙\nhttps://blockly.uieee.com/\n\n## JavaScript介绍\n\n### JavaScript是什么\n\nHTML CSS \n\nJavaScript 编程语言   流程控制\n\nNetscape在最初将其脚本语言命名为LiveScript，后来Netscape在与Sun合作之后将其改名为JavaScript。JavaScript最初受Java启发而开始设计的，目的之一就是“看上去像Java”，因此语法上有类似之处，一些名称和命名规范也借自Java。JavaScript与Java名称上的近似，是当时Netscape为了营销考虑与Sun微系统达成协议的结果。Java和JavaScript的关系就像张雨和张雨生的关系，只是名字很像。\n\n​\tJava  服务器端的编程语言\n\n​\tJavaScript  运行在客户端(浏览器)的编程语言\n\n> JavaScript是一种运行在***客户端*** 的***脚本语言*** \n> JavaScript的解释器被称为JavaScript引擎，为浏览器的一部分，广泛用于客户端的脚本语言，最早是在HTML（标准通用标记语言下的一个应用）网页上使用，用来给HTML网页增加动态功能。\n\n![发明者](/media/bulaideng.png)\n\n### JavaScript最初的目的\n\n演示：http://baixiu.uieee.com/admin/login.php\n最初的目的是为了处理表单的验证操作。\n\n### JavaScript现在的意义(应用场景)\n\nJavaScript 发展到现在几乎无所不能。\n\n1. 网页特效\n2. 服务端开发(Node.js)\n3. 命令行工具(Node.js)\n4. 桌面程序(Electron)\n5. App(Cordova)\n6. 控制硬件-物联网(Ruff)\n7. 游戏开发(cocos2d-js)\n\n### JavaScript和HTML、CSS的区别\n\n1. HTML：提供网页的结构，提供网页中的内容\n2. CSS: 用来美化网页\n3. JavaScript: 可以用来控制网页内容，给网页增加动态的效果\n\n## JavaScript的组成\n\n![1496912475691](/media/1496912475691.png)\n\n### ECMAScript - JavaScript的核心 \n\nECMA 欧洲计算机制造联合会\n\n网景：JavaScript\n\n微软：JScript\n\n定义了JavaScript的语法规范  \n\nJavaScript的核心，描述了语言的基本语法和数据类型，ECMAScript是一套标准，定义了一种语言的标准与具体实现无关\n\n### BOM - 浏览器对象模型\n\n一套操作浏览器功能的API\n\n通过BOM可以操作浏览器窗口，比如：弹出框、控制浏览器跳转、获取分辨率等\n\n### DOM - 文档对象模型\n\n一套操作页面元素的API\n\nDOM可以把HTML看做是文档树，通过DOM提供的API可以对树上的节点进行操作\n\n## JavaScript初体验\n\nCSS：行内样式、嵌入样式、外部样式\n\n### JavaScript的书写位置 \n\n- 写在行内\n\n```html\n<input type=\"button\" value=\"按钮\" onclick=\"alert('Hello World')\" />\n```\n\n- 写在script标签中\n\n```html\n<head>\n  <script>\n    alert('Hello World!');\n  </script>\n</head>\n```\n\n- 写在外部js文件中，在页面引入\n\n```html\n<script src=\"main.js\"></script>\n```\n\n- 注意点\n\n  ***引用外部js文件的script标签中不可以写JavaScript代码***\n\n## 计算机组成\n\n### 软件\n\n- 应用软件：浏览器(Chrome/IE/Firefox)、QQ、Sublime、Word\n- 系统软件：Windows、Linux、mac OSX\n\n### 硬件\n\n- 三大件：CPU、内存、硬盘    -- 主板\n- 输入设备：鼠标、键盘、手写板、摄像头等\n- 输出设备：显示器、打印机、投影仪等\n\n![1497317567484](/media/1497317567484.png)\n\n![1496916239525](/media/1496916239525.png)\n\n## 变量\n\n### 什么是变量\n\n- 什么是变量\n\n  变量是计算机内存中存储数据的标识符，根据变量名称可以获取到内存中存储的数据\n\n- 为什么要使用变量\n\n  使用变量可以方便的获取或者修改内存中的数据\n\n### 如何使用变量\n\n- var声明变量\n\n```javascript\nvar age;\n```\n\n- 变量的赋值\n\n```javascript\nvar age;\nage = 18;\n```\n\n- 同时声明多个变量\n\n```javascript\nvar age, name, sex;\nage = 10;\nname = 'zs';\n```\n\n- 同时声明多个变量并赋值\n\n\n```javascript\nvar age = 10, name = 'zs';\n```\n\n### 变量在内存中的存储\n\n```javascript\nvar age = 18;\n```\n\n![1496981558575](/media/1496981558575.png)\n\n### 变量的命名规则和规范\n\n- 规则 - 必须遵守的，不遵守会报错\n\n  - 由字母、数字、下划线、$符号组成，不能以数字开头\n\n  - 不能是关键字和保留字，例如：for、while。\n\n  - 区分大小写\n\n- 规范 - 建议遵守的，不遵守不会报错\n\n  - 变量名必须有意义\n  - 遵守驼峰命名法。首字母小写，后面单词的首字母需要大写。例如：userName、userPassword\n\n- 下面哪些变量名不合法\n\n  ```\n  a\t    \n  1\n  age18\n  18age\n  name\n  $name\n  _sex\n  &sex\n  theworld  theWorld\n  ```\n\n### 案例\n\n1. 交换两个变量的值\n2. 不使用临时变量，交换两个数值变量的值\n\n## 数据类型\n\n### 简单数据类型\n\nNumber、String、Boolean、Undefined、Null\n\n#### Number类型\n\n- 数值字面量：数值的固定值的表示法\n\n  110 1024  60.5\n\n- 进制\n\n```\n十进制\n\tvar num = 9;\n\t进行算数计算时，八进制和十六进制表示的数值最终都将被转换成十进制数值。\n十六进制\n\tvar num = 0xA;\n\t数字序列范围：0~9以及A~F\n八进制\n    var num1 = 07;   // 对应十进制的7\n    var num2 = 019;  // 对应十进制的19\n    var num3 = 08;   // 对应十进制的8\n    数字序列范围：0~7\n    如果字面值中的数值超出了范围，那么前导零将被忽略，后面的数值将被当作十进制数值解析\n```\n\n- 浮点数\n\n  - 浮点数的精度问题\n\n```\n浮点数\n\tvar n = 5e-324;   // 科学计数法  5乘以10的-324次方  \n浮点数值的最高精度是 17 位小数，但在进行算术计算时其精确度远远不如整数\n   var result = 0.1 + 0.2;    // 结果不是 0.3，而是：0.30000000000000004\n   console.log(0.07 * 100);\n   不要判断两个浮点数是否相等\n```\n\n- 数值范围\n\n```\n最小值：Number.MIN_VALUE，这个值为： 5e-324\n最大值：Number.MAX_VALUE，这个值为： 1.7976931348623157e+308\n无穷大：Infinity\n无穷小：-Infinity\n```\n\n- 数值判断\n\n  - NaN：not a number\n    - NaN 与任何值都不相等，包括他本身\n  - isNaN: is not a number\n\n#### String类型\n\n'abc'   \"abc\"\n\n- 字符串字面量\n\n  '程序猿'，'程序媛', \"黑马程序猿\"\n\n  ​\n\n  思考：如何打印以下字符串。\n  我是一个\"正直\"的人 \n  我很喜欢\"黑马'程序猿'\"\n\n- 转义符\n\n  ![1498289626813](/media/1498289626813.png)\n\n- 字符串长度\n\n  length属性用来获取字符串的长度\n\n  ```javascript\n  var str = '黑马程序猿 Hello World';\n  console.log(str.length);\n  ```\n\n- 字符串拼接\n\n  字符串拼接使用 + 连接\n\n  ```javascript\n  console.log(11 + 11);\n  console.log('hello' + ' world');\n  console.log('100' + '100');\n  console.log('11' + 11);\n  console.log('male:' + true);\n  ```\n\n  1. 两边只要有一个是字符串，那么+就是字符串拼接功能\n  2. 两边如果都是数字，那么就是算术功能。\n\n#### Boolean类型\n\n- Boolean字面量：  true和false，区分大小写\n- 计算机内部存储：true为1，false为0\n\n#### Undefined和Null\n\n1. undefined表示一个声明了没有赋值的变量，变量只声明的时候值默认是undefined\n2. null表示一个空，变量的值如果想为null，必须手动设置\n\n### 复杂数据类型\n\n​\tObject\n\n### 获取变量的类型\n\ntypeof\n\n```javascript\nvar age = 18;\nconsole.log(typeof age);  // 'number'\n```\n\n### 字面量\n\n在源代码中一个固定值的表示法。\n\n数值字面量：8, 9, 10\n\n字符串字面量：'黑马程序员', \"大前端\"\n\n布尔字面量：true，false\n\n## 注释\n\n### 单行注释\n\n用来描述下面一个或多行代码的作用\n\n```javascript\n// 这是一个变量\nvar name = 'hm';\n```\n\n### 多行注释\n\n用来注释多条代码\n\n```javascript\n/*\nvar age = 18;\nvar name = 'zs';\nconsole.log(name, age);\n*/\n```\n\n## 数据类型转换\n\n如何使用谷歌浏览器，快速的查看数据类型？\n\n字符串的颜色是黑色的，数值类型是蓝色的，布尔类型也是蓝色的，undefined和null是灰色的\n\n### 转换成字符串类型\n\n- toString()\n\n  ```\n  var num = 5;\n  console.log(num.toString());\n  ```\n\n- String()\n\n  ```\n  String()函数存在的意义：有些值没有toString()，这个时候可以使用String()。比如：undefined和null\n  ```\n\n- 拼接字符串方式\n\n  num  +  \"\"，当 + 两边一个操作符是字符串类型，一个操作符是其它类型的时候，会先把其它类型转换成字符串再进行字符串拼接，返回字符串\n\n### 转换成数值类型\n\n- Number()\n\n  ```\n  Number()可以把任意值转换成数值，如果要转换的字符串中有一个不是数值的字符，返回NaN\n  ```\n\n- parseInt()\n\n  ```javascript\n  var num1 = parseInt(\"12.3abc\");  // 返回12，如果第一个字符是数字会解析知道遇到非数字结束\n  var num2 = parseInt(\"abc123\");   // 返回NaN，如果第一个字符不是数字或者符号就返回NaN\n  ```\n\n- parseFloat()\n\n  ```\n  parseFloat()把字符串转换成浮点数\n  parseFloat()和parseInt非常相似，不同之处在与\n  \tparseFloat会解析第一个. 遇到第二个.或者非数字结束\n  \t如果解析的内容里只有整数，解析成整数\n  ```\n\n- +，-0等运算\n\n  ```javascript\n  var str = '500';\n  console.log(+str);\t\t// 取正\n  console.log(-str);\t\t// 取负\n  console.log(str - 0);\n  ```\n\n### 转换成布尔类型\n\n- Boolean()\n\n0  ''(空字符串) null undefined NaN 会转换成false  其它都会转换成true\n\n## 操作符\n\n运算符  operator \n\n5 + 6   \n\n表达式  组成 操作数和操作符，会有一个结果\n\n### 算术运算符\n\n```\n+ - * / %  \n```\n\n### 一元运算符\n\n一元运算符：只有一个操作数的运算符\n\n5 + 6  两个操作数的运算符 二元运算符\n\n++  自身加1\n\n-- 自身减1\n\n- 前置++\n\n  ```javascript\n  var num1 = 5;\n  ++ num1; \n\n  var num2 = 6;\n  console.log(num1 + ++ num2);\n  ```\n\n- 后置++\n\n  ```javascript\n  var num1 = 5;\n  num1 ++;    \n  var num2 = 6 \n  console.log(num1 + num2 ++);\n  ```\n\n- 猜猜看\n\n  ```javascript\n  var a = 1; var b = ++a + ++a; console.log(b);    \n  var a = 1; var b = a++ + ++a; console.log(b);    \n  var a = 1; var b = a++ + a++; console.log(b);    \n  var a = 1; var b = ++a + a++; console.log(b);  \n  ```\n  **总结**\n  **前置++：先加1，后参与运算**\n  **后置++：先参与运算，后加1**\n  **上面两个理解后，下面两个自通**\n  **前置--  ：先减1，后参与运算**\n  **后置--  ：先参与运算，后减1**\n  ​\n\n### 逻辑运算符(布尔运算符)\n\t&& 与 两个操作数同时为true，结果为true，否则都是false\n\t|| 或 两个操作数有一个为true，结果为true，否则为false\n\t!  非  取反\n\n### 关系运算符(比较运算符)\n\t<  >  >=  <= == != === !==\n```javascript\n==与===的区别：==只进行值得比较，===类型和值同时相等，则相等\n\nvar result = '55' == 55;  \t// true\nvar result = '55' === 55; \t// false 值相等，类型不相等\nvar result = 55 === 55; \t// true\n```\n\n### 赋值运算符\n\n=   +=   -=   *=   /=   %=\n```javascript\n例如：\nvar num = 0;\nnum += 5;\t//相当于  num = num + 5;\n```\n\n\n### 运算符的优先级\n\t优先级从高到底\n\t\t1. ()  优先级最高\n\t\t2. 一元运算符  ++   --   !\n\t\t3. 算数运算符  先*  /  %   后 +   -\n\t\t4. 关系运算符  >   >=   <   <=\n\t\t5. 相等运算符   ==   !=    ===    !==\n\t\t6. 逻辑运算符 先&&   后||\n\t\t7. 赋值运算符\n\n```\tjavascript\n// 练习1：\n4 >= 6 || '人' != '阿凡达' && !(12 * 2 == 144) && true\n// 练习2：\nvar num = 10;\n5 == num / 2 && (2 + 2 * num).toString() === '22'\n```\n## 表达式和语句 \n\n### 表达式\n\n>一个表达式可以产生一个值，有可能是运算、函数调用、有可能是字面量。表达式可以放在任何需要值的地方。\n\n### 语句\n\n>语句可以理解为一个行为，循环语句和判断语句就是典型的语句。一个程序有很多个语句组成，一般情况下;分割一个一个的语句\n## 流程控制\n\n>程序的三种基本结构\n\n### 顺序结构\n\n 从上到下执行的代码就是顺序结构\n\n**程序默认就是由上到下顺序执行的**\n\n### 分支结构\t\n\n根据不同的情况，执行对应代码\n\n### 循环结构\n\n循环结构：重复做一件事情\n\n## 分支结构\n\n### if语句\n\n语法结构\n\n```javascript\nif (/* 条件表达式 */) {\n  // 执行语句\n}\n\nif (/* 条件表达式 */){\n  // 成立执行语句\n} else {\n  // 否则执行语句\n}\n\nif (/* 条件1 */){\n  // 成立执行语句\n} else if (/* 条件2 */){\n  // 成立执行语句\n} else if (/* 条件3 */){\n  // 成立执行语句\n} else {\n  // 最后默认执行语句\n}\n```\n案例：\n    求两个数的最大数\n    判断一个数是偶数还是奇数\n    分数转换，把百分制转换成ABCDE   <60  E  60-70 D  70-80 C  80-90 B  90 - 100 A\n作业：\n    判断一个年份是闰年还是平年\n      闰年：能被4整除，但不能被100整除的年份 或者 能被400整除的年份\n    判断一个人的年龄是否满18岁(是否成年)\n\n### 三元运算符\n\t表达式1 ? 表达式2 : 表达式3\n\t是对if……else语句的一种简化写法\n\n案例：\n\t是否年满18岁\n\t从两个数中找最大值\n\n### switch语句\n\n语法格式:\n```javascript\nswitch (expression) {\n  case 常量1:\n    语句;\n    break;\n  case 常量2:\n    语句;\n    break;\n  case 常量3:\n    语句;\n    break;\n  …\n  case 常量n:\n    语句;\n    break;\n  default:\n    语句;\n    break;\n}\n```\n\tbreak可以省略，如果省略，代码会继续执行下一个case\n\tswitch 语句在比较值时使用的是全等操作符, 因此不会发生类型转换（例如，字符串'10' 不等于数值 10）\n\n案例：\n\t显示星期几\n\t素质教育（把分数变成ABCDE）千万不要写100个case哟\n\n### 布尔类型的隐式转换\n\n流程控制语句会把后面的值隐式转换成布尔类型\n\n\t转换为true   非空字符串  非0数字  true 任何对象\n\t转换成false  空字符串  0  false  null  undefined\n\n```javascript\n// 结果是什么？\nvar a = !!'123';\n```\n\n\n\n### 案例\n\n```javascript\nvar message;\n// 会自动把message转换成false\nif (message) {     \n  // todo...\n}\n```\n\n\n\n## 循环结构\n\n> 在javascript中，循环语句有三种，while、do..while、for循环。\n\n### while语句\n\n基本语法：\n\n```javascript\n// 当循环条件为true时，执行循环体，\n// 当循环条件为false时，结束循环。\nwhile (循环条件) {\n  //循环体\n}\n```\n\n代码示例：\n\n```javascript\n// 计算1-100之间所有数的和\n// 初始化变量\nvar i = 1;\nvar sum = 0;\n// 判断条件\nwhile (i <= 100) {\n  // 循环体\n  sum += i;\n  // 自增\n  i++;\n}\nconsole.log(sum);\n```\n\n案例：\n    打印100以内 7的倍数\n    打印100以内所有偶数\n    打印100以内所有偶数的和\n作业：\n    打印100以内的奇数\n    打印100以内的奇数的和\n\n### do...while语句\n\n> do..while循环和while循环非常像，二者经常可以相互替代，但是do..while的特点是不管条件成不成立，都会执行一次。\n\n基础语法：\n\n```javascript\ndo {\n  // 循环体;\n} while (循环条件);\n```\n\n代码示例：\n\n```javascript\n// 初始化变量\nvar i = 1;\nvar sum = 0;\ndo {\n  sum += i;//循环体\n  i++;//自增\n} while (i <= 100);//循环条件\n```\n\n案例：\n\n```\n求100以内所有3的倍数的和\n使用do-while循环：输出询问“我爱你，嫁给我吧？”，选择“你喜欢我吗？(y/n):\"，如果输入为y则打印”我们形影不离“，若输入为n,则继续询问 \n```\n\n### for语句\n\n>  while和do...while一般用来解决无法确认次数的循环。for循环一般在循环次数确定的时候比较方便\n\nfor循环语法：\n\n```javascript\n// for循环的表达式之间用的是;号分隔的，千万不要写成,\nfor (初始化表达式1; 判断表达式2; 自增表达式3) {\n  // 循环体4\n}\n```\n\n执行顺序：1243  ----  243   -----243(直到循环条件变成false)\n\n1. 初始化表达式\n2. 判断表达式\n3. 自增表达式\n4. 循环体\n\n案例：\n\n```\n打印1-100之间所有数\n求1-100之间所有数的和\n求1-100之间所有数的平均值\n求1-100之间所有偶数的和\n同时求1-100之间所有偶数和奇数的和\n打印正方形\n// 使用拼字符串的方法的原因\n// console.log 输出重复内容的问题\n// console.log 默认输出内容介绍后有换行\nvar start = '';\nfor (var i = 0; i < 10; i++) {\n  for (var j = 0; j < 10; j++) {\n    start += '* ';\n  }\n  start += '\\n';\n}\nconsole.log(start);\n打印直角三角形\nvar start = '';\nfor (var i = 0; i < 10; i++) {\n  for (var j = i; j < 10; j++) {\n    start += '* ';\n  }\n  start += '\\n';\n}\nconsole.log(start);\n\n打印9*9乘法表\nvar str = '';\nfor (var i = 1; i <= 9; i++) {\n  for (var j = i; j <=9; j++) {\n    str += i + ' * ' + j + ' = ' + i * j + '\\t';\n  }\n  str += '\\n';\n}\nconsole.log(str);\n```\n\n作业：\n\n```\n求1-100之间所有数的乘积\n求1-100之间所有奇数的和\n计算1-100之间能3整除的数的和\n计算1-100之间不能被7整除的数的和\n// 讲解思路。如果不会写程序，可以先把数学公式准备好\n本金10000元存入银行，年利率是千分之三，每过1年，将本金和利息相加作为新的本金。计算5年后，获得的本金是多少？\n有个人想知道，一年之内一对兔子能繁殖多少对？于是就筑了一道围墙把一对兔子关在里面。已知一对兔子每个月可以生一对小兔子，而一对兔子从出生后第3个月起每月生一对小兔子。假如一年内没有发生死亡现象，那么，一对兔子一年内（12个月）能繁殖成多少对？（兔子的规律为数列，1，1，2，3，5，8，13，21）\n```\n\n\n### continue和break\n\n> break:立即跳出整个循环，即循环结束，开始执行循环后面的内容（直接跳到大括号）\n>\n> continue:立即跳出当前循环，继续下一次循环（跳到i++的地方）\n\n案例：\n\n```javascript\n求整数1～100的累加值，但要求碰到个位为3的数则停止累加\n求整数1～100的累加值，但要求跳过所有个位为3的数\n```\n\n作业：\n\n求1-100之间不能被7整除的整数的和（用continue）\n求200-300之间所有的奇数的和（用continue）\n求200-300之间第一个能被7整数的数（break）\n\n\n### 调试\n\n- 过去调试JavaScript的方式\n  - alert()\n  - console.log()\n- 断点调试\n\n>断点调试是指自己在程序的某一行设置一个断点，调试时，程序运行到这一行就会停住，然后你可以一步一步往下调试，调试过程中可以看各个变量当前的值，出错的话，调试到出错的代码行即显示错误，停下。\n\n- 调试步骤\n\n```javascript\n浏览器中按F12-->sources-->找到需要调试的文件-->在程序的某一行设置断点\n```\n\n- 调试中的相关操作\n\n```javascript\nWatch: 监视，通过watch可以监视变量的值的变化，非常的常用。\nF10: 程序单步执行，让程序一行一行的执行，这个时候，观察watch中变量的值的变化。\nF8：跳到下一个断点处，如果后面没有断点了，则程序执行结束。\n```\n\ntips: ***监视变量，不要监视表达式，因为监视了表达式，那么这个表达式也会执行。***\n\n1. 代码调试的能力非常重要，只有学会了代码调试，才能学会自己解决bug的能力。初学者不要觉得调试代码麻烦就不去调试，知识点花点功夫肯定学的会，但是代码调试这个东西，自己不去练，永远都学不会。\n2. 今天学的代码调试非常的简单，只要求同学们记住代码调试的这几个按钮的作用即可，后面还会学到很多的代码调试技巧。\n\n\n## 数组\n\n### 为什么要学习数组\n\n> 之前学习的数据类型，只能存储一个值(比如：Number/String。我们想存储班级中所有学生的姓名，此时该如何存储？\n\n###  数组的概念\n\n> 所谓数组，就是将多个元素（通常是同一类型）按一定顺序排列放到一个集合中，那么这个集合我们就称之为数组。\n### 数组的定义\n> 数组是一个有序的列表，可以在数组中存放任意的数据，并且数组的长度可以动态的调整。\n\n通过数组字面量创建数组\n\n```javascript\n// 创建一个空数组\nvar arr1 = []; \n// 创建一个包含3个数值的数组，多个数组项以逗号隔开\nvar arr2 = [1, 3, 4]; \n// 创建一个包含2个字符串的数组\nvar arr3 = ['a', 'c']; \n\n// 可以通过数组的length属性获取数组的长度\nconsole.log(arr3.length);\n// 可以设置length属性改变数组中元素的个数\narr3.length = 0;\n```\n\n### 获取数组元素\n\n数组的取值\n\n```javascript\n// 格式：数组名[下标]\t下标又称索引\n// 功能：获取数组对应下标的那个值，如果下标不存在，则返回undefined。\nvar arr = ['red',, 'green', 'blue'];\narr[0];\t// red\narr[2]; // blue\narr[3]; // 这个数组的最大下标为2,因此返回undefined\n```\n\n\n### 遍历数组\n> 遍历：遍及所有，对数组的每一个元素都访问一次就叫遍历。\n\n数组遍历的基本语法：\n\n```javascript\nfor(var i = 0; i < arr.length; i++) {\n\t// 数组遍历的固定结构\n}\n```\n### 数组中新增元素\n数组的赋值\n\n```javascript\n// 格式：数组名[下标/索引] = 值;\n// 如果下标有对应的值，会把原来的值覆盖，如果下标不存在，会给数组新增一个元素。\nvar arr = [\"red\", \"green\", \"blue\"];\n// 把red替换成了yellow\narr[0] = \"yellow\";\n// 给数组新增加了一个pink的值\narr[3] = \"pink\";\n```\n### 案例\n\n```\n求一组数中的所有数的和和平均值\n求一组数中的最大值和最小值，以及所在位置\n将字符串数组用|或其他符号分割\n要求将数组中的0项去掉，将不为0的值存入一个新的数组，生成新的数组\n翻转数组\n冒泡排序，从小到大\n```\n\n## 函数\n### 为什么要有函数\n\n> 如果要在多个地方求1-100之间所有数的和，应该怎么做？\n\n### 什么是函数\n\n>把一段相对独立的具有特定功能的代码块封装起来，形成一个独立实体，就是函数，起个名字（函数名），在后续开发中可以反复调用\n>\n>函数的作用就是封装一段代码，将来可以重复使用\n\n### 函数的定义\n\n- 函数声明\n\n```javascript\nfunction 函数名(){\n  // 函数体\n}\n```\n\n- 函数表达式\n\n```javascript\nvar fn = function() {\n  // 函数体\n}\n```\n\n- 特点：\n\n  函数声明的时候，函数体并不会执行，只要当函数被调用的时候才会执行。\n  函数一般都用来干一件事情，需用使用动词+名词，表示做一件事情 `tellStory` `sayHello`等\n\n### 函数的调用\n- 调用函数的语法：\n\n```javascript\n函数名();\n```\n\n- 特点：\n\n  函数体只有在调用的时候才会执行，调用需要()进行调用。\n  可以调用多次(重复使用)\n\n代码示例：\n\n```javascript\n// 声明函数\nfunction sayHi() {\n  console.log(\"吃了没？\");\n}\n// 调用函数\nsayHi();\n\n// 求1-100之间所有数的和\nfunction getSum() {\n  var sum = 0;\n  for (var  i = 0; i < 100; i++) {\n    sum += i;\n  }\n  console.log(sum);\n}\n// 调用\ngetSum();\n```\n### 函数的参数\n\n- 为什么要有参数\n\n```javascript\nfunction getSum() {\n  var sum = 0;\n  for (var i = 1; i <= 100; i++) {\n    sum += i;\n  }\n  console.log();\n}\n\n// 虽然上面代码可以重复调用，但是只能计算1-100之间的值\n// 如果想要计算n-m之间所有数的和，应该怎么办呢？\n```\n\n- 语法：\n\n```javascript\n// 函数内部是一个封闭的环境，可以通过参数的方式，把外部的值传递给函数内部\n// 带参数的函数声明\nfunction 函数名(形参1, 形参2, 形参...){\n  // 函数体\n}\n\n// 带参数的函数调用\n函数名(实参1, 实参2, 实参3);\n```\n\n- 形参和实参\n\n  > 1. 形式参数：在声明一个函数的时候，为了函数的功能更加灵活，有些值是固定不了的，对于这些固定不了的值。我们可以给函数设置参数。这个参数没有具体的值，仅仅起到一个占位置的作用，我们通常称之为形式参数，也叫形参。\n  > 2. 实际参数：如果函数在声明时，设置了形参，那么在函数调用的时候就需要传入对应的参数，我们把传入的参数叫做实际参数，也叫实参。\n\n```javascript\nvar x = 5, y = 6;\nfn(x,y); \nfunction fn(a, b) {\n  console.log(a + b);\n}\n//x,y实参，有具体的值。函数执行的时候会把x,y复制一份给函数内部的a和b，函数内部的值是复制的新值，无法修改外部的x,y\n```\n\n### 案例\n\n- 求1-n之间所有数的和\n- 求n-m之间所有数额和\n- 圆的面积\n- 求2个数中的最大值\n- 求3个数中的最大值\n- 判断一个数是否是素数\n\n### 函数的返回值\n\n>当函数执行完的时候，并不是所有时候都要把结果打印。我们期望函数给我一些反馈（比如计算的结果返回进行后续的运算），这个时候可以让函数返回一些东西。也就是返回值。函数通过return返回一个返回值\n\n返回值语法：\n\n```javascript\n//声明一个带返回值的函数\nfunction 函数名(形参1, 形参2, 形参...){\n  //函数体\n  return 返回值;\n}\n\n//可以通过变量来接收这个返回值\nvar 变量 = 函数名(实参1, 实参2, 实参3);\n```\n\n函数的调用结果就是返回值，因此我们可以直接对函数调用结果进行操作。\n\n返回值详解：\n    如果函数没有显示的使用 return语句 ，那么函数有默认的返回值：undefined\n    如果函数使用 return语句，那么跟再return后面的值，就成了函数的返回值\n    如果函数使用 return语句，但是return后面没有任何值，那么函数的返回值也是：undefined\n    函数使用return语句后，这个函数会在执行完 return 语句之后停止并立即退出，也就是说return后面的所有其他代码都不会再执行。\n    \n    推荐的做法是要么让函数始终都返回一个值，要么永远都不要返回值。\n\n### 案例\n\n- 求阶乘\n- 求1!+2!+3!+....+n!\n- 求一组数中的最大值\n- 求一组数中的最小值\n\n### arguments的使用\n\n> JavaScript中，arguments对象是比较特别的一个对象，实际上是当前函数的一个内置属性。也就是说所有函数都内置了一个arguments对象，arguments对象中存储了传递的所有的实参。arguments是一个伪数组，因此及可以进行遍历\n\n- 案例\n```javascript\n求任意个数的最大值\n求任意个数的和\n```\n\n### 案例\n\n```javascript\n求斐波那契数列Fibonacci中的第n个数是多少？      1 1 2 3 5 8 13 21...\n翻转数组，返回一个新数组\n对数组排序，从小到大\n输入一个年份，判断是否是闰年[闰年：能被4整数并且不能被100整数，或者能被400整数]\n输入某年某月某日，判断这一天是这一年的第几天？\n```\n\n## 函数其它\n\n### 匿名函数\n\n> 匿名函数：没有名字的函数\n\n匿名函数如何使用：\n\n\t将匿名函数赋值给一个变量，这样就可以通过变量进行调用\n\t匿名函数自调用\n\n关于自执行函数（匿名函数自调用）的作用：防止全局变量污染。\n### 自调用函数\n>匿名函数不能通过直接调用来执行，因此可以通过匿名函数的自调用的方式来执行\n```javascript\n(function () {\n  alert(123);\n})();\n```\n### 函数是一种数据类型\n\n```javascript\nfunction fn() {}\nconsole.log(typeof fn);\n```\n\n- 函数作为参数\n\n因为函数也是一种类型，可以把函数作为两一个函数的参数，在两一个函数中调用\n\n- 函数做为返回值\n\n因为函数是一种类型，所以可以把函数可以作为返回值从函数内部返回，这种用法在后面很常见。\n\n```javascript\nfunction fn(b) {\n  var a = 10;\n  return function () {\n    alert(a+b);\n  }\n}\nfn(15)();\n```\n\n### 代码规范\n    1.命名规范\t\n    2.变量规范   \n    \tvar name = 'zs';\t\n    3.注释规范\n    \t// 这里是注释\n    4.空格规范\n    5.换行规范\n    \tvar arr = [1, 2, 3, 4];\n    \tif (a > b) {\n          \n    \t}\n    \tfor(var i = 0; i < 10; i++) {\n          \n    \t}\n    \tfunction fn() {\n          \n    \t}\n\n\n## 作用域\n作用域：变量可以起作用的范围\n\n### 全局变量和局部变量\n\n- 全局变量\n\n  ​在任何地方都可以访问到的变量就是全局变量，对应全局作用域\n\n- 局部变量\n\n  ​只在固定的代码片段内可访问到的变量，最常见的例如函数内部。对应局部作用域(函数作用域)\n\n```\n不使用var声明的变量是全局变量，不推荐使用。\n变量退出作用域之后会销毁，全局变量关闭网页或浏览器才会销毁\n```\n\n### 块级作用域\n\n任何一对花括号（｛和｝）中的语句集都属于一个块，在这之中定义的所有变量在代码块外都是不可见的，我们称之为块级作用域。\n**在es5之前没有块级作用域的的概念,只有函数作用域**，现阶段可以认为JavaScript没有块级作用域\n\n### 词法作用域\n变量的作用域是在定义时决定而不是执行时决定，也就是说词法作用域取决于源码，通过静态分析就能确定，因此词法作用域也叫做静态作用域。\n\n**在 js 中词法作用域规则:**\n\n- 函数允许访问函数外的数据.\n- 整个代码结构中只有函数可以限定作用域.\n- 作用域规则首先使用提升规则分析\n- 如果当前作用规则中有名字了, 就不考虑外面的名字\n\n```javascript\nvar num = 123;\nfunction foo() {\n  console.log( num );\n}\nfoo();\n\nif ( false ) {\n    var num = 123;\n}\nconsole.log( num ); // undefiend\n```\n\n### 作用域链\n\t只有函数可以制造作用域结构， 那么只要是代码，就至少有一个作用域, 即全局作用域。凡是代码中有函数，那么这个函数就构成另一个作用域。如果函数中还有函数，那么在这个作用域中就又可以诞生一个作用域。\n\n\t将这样的所有的作用域列出来，可以有一个结构: 函数内指向函数外的链式结构。就称作作用域链。\n```javascript\n// 案例1：\nfunction f1() {\n    function f2() {\n    }\n}\n\nvar num = 456;\nfunction f3() {\n    function f4() {    \n    }\n}\n```\n\n![06-1](/media/06-1.png)\n\n```javascript\n// 案例2\nfunction f1() {\n    var num = 123;\n    function f2() {\n        console.log( num );\n    }\n    f2();\n}\nvar num = 456;\nf1();\n```\n\n![06-2](/media/06-2.png)\n\n## 预解析\n\n> JavaScript代码的执行是由浏览器中的JavaScript解析器来执行的。JavaScript解析器执行JavaScript代码的时候，分为两个过程：预解析过程和代码执行过程\n\n预解析过程：\n\n1. 把变量的声明提升到当前作用域的最前面，只会提升声明，不会提升赋值。\n2. 把函数的声明提升到当前作用域的最前面，只会提升声明，不会提升调用。\n3. 先提升var，在提升function\n\n\n\nJavaScript的执行过程\n\n```javascript\nvar a = 25;\nfunction abc (){\n  alert(a);//undefined\n  var a = 10;\n}\nabc();\n// 如果变量和函数同名的话，函数优先\nconsole.log(a);\nfunction a() {\n  console.log('aaaaa');\n}\nvar a = 1;\nconsole.log(a);\n```\n\n\n\n### 全局解析规则\n### 函数内部解析规则\n### 变量提升\n\n- 变量提升\n\n  定义变量的时候，变量的声明会被提升到作用域的最上面，变量的赋值不会提升。\n\n- 函数提升\n\n  JavaScript解析器首先会把当前作用域的函数声明提前到整个作用域的最前面\n\n```javascript\n// 1、-----------------------------------\nvar num = 10;\nfun();\nfunction fun() {\n  console.log(num);\n  var num = 20;\n}\n//2、-----------------------------------\nvar a = 18;\nf1();\nfunction f1() {\n  var b = 9;\n  console.log(a);\n  console.log(b);\n  var a = '123';\n}\n// 3、-----------------------------------\nf1();\nconsole.log(c);\nconsole.log(b);\nconsole.log(a);\nfunction f1() {\n  var a = b = c = 9;\n  console.log(a);\n  console.log(b);\n  console.log(c);\n}\n```\n\n## 对象\n\n### 为什么要有对象\n\n```javascript\nfunction printPerson(name, age, sex....) {\n}\n// 函数的参数如果特别多的话，可以使用对象简化\nfunction printPerson(person) {\n  console.log(person.name);\n  ……\n}\n```\n\n### 什么是对象\n\n```\n现实生活中：万物皆对象，对象是一个具体的事物，一个具体的事物就会有行为和特征。\n举例： 一部车，一个手机\n车是一类事物，门口停的那辆车才是对象\n\t特征：红色、四个轮子\n\t行为：驾驶、刹车\n```\n\n### JavaScript中的对象\n```\nJavaScript中的对象其实就是生活中对象的一个抽象\nJavaScript的对象是无序属性的集合。\n\t其属性可以包含基本值、对象或函数。对象就是一组没有顺序的值。我们可以把JavaScript中的对象想象成键值对，其中值可以是数据和函数。\n对象的行为和特征\n\t特征---属性\n\t行为---方法\n```\n\n+ 事物的特征在对象中用属性来表示。\n+ 事物的行为在对象中用方法来表示。\n\n### 对象字面量\n> 字面量：11 'abc'  true  [] {}等\n\n```javascript\nvar o = {\n  name: 'zs,\n  age: 18,\n  sex: true,\n  sayHi: function () {\n    console.log(this.name);\n  }\n};\n```\n\n思考：\n\n```javascript\n如何把学生对象、老师对象、英雄对象改写成字面量的方式\n```\n### 对象创建方式\n\n- 对象字面量\n\n```javascript\nvar o = {\n  name: 'zs',\n  age: 18,\n  sex: true,\n  sayHi: function () {\n    console.log(this.name);\n  }\n};   \n```\n\n- new Object()创建对象\n\n```javascript\nvar person = new Object();\n  person.name = 'lisi';\n  person.age = 35;\n  person.job = 'actor';\n  person.sayHi = function(){\n  console.log('Hello,everyBody');\n}\n```\n- 工厂函数创建对象\n```javascript\nfunction createPerson(name, age, job) {\n  var person = new Object();\n  person.name = name;\n  person.age = age;\n  person.job = job;\n  person.sayHi = function(){\n    console.log('Hello,everyBody');\n  }\n  return person;\n}\nvar p1 = createPerson('张三', 22, 'actor');\n```\n- 自定义构造函数\n```javascript\nfunction Person(name,age,job){\n  this.name = name;\n  this.age = age;\n  this.job = job;\n  this.sayHi = function(){\n  \tconsole.log('Hello,everyBody');\n  }\n}\nvar p1 = new Person('张三', 22, 'actor');\n```\n### 属性和方法\n\t如果一个变量属于一个对象所有，那么该变量就可以称之为该对象的一个属性，属性一般是名词，用来描述事物的特征\n\t如果一个函数属于一个对象所有，那么该函数就可以称之为该对象的一个方法，方法是动词，描述事物的行为和功能\n### new关键字\n> 构造函数 ，是一种特殊的函数。主要用来在创建对象时初始化对象， 即为对象成员变量赋初始值，总与new运算符一起使用在创建对象的语句中。\n\n1. 构造函数用于创建一类对象，首字母要大写。\n2. 构造函数要和new一起使用才有意义。\n\nnew在执行时会做四件事情\n\n```\nnew会在内存中创建一个新的空对象\nnew 会让this指向这个新的对象\n执行构造函数  目的：给这个新对象加属性和方法\nnew会返回这个新对象\n```\n### this详解\n\tJavaScript中的this指向问题，有时候会让人难以捉摸，随着学习的深入，我们可以逐渐了解\n\t现在我们需要掌握函数内部的this几个特点\n\t\t1. 函数在定义的时候this是不确定的，只有在调用的时候才可以确定\n\t\t2. 一般函数直接执行，内部this指向全局window\n\t\t3. 函数作为一个对象的方法，被该对象所调用，那么this指向的是该对象\n\t\t4. 构造函数中的this其实是一个隐式对象，类似一个初始化的模型，所有方法和属性都挂载到了这个隐式对象身上，后续通过new关键字来调用，从而实现实例化\n## 对象的使用\n\n### 遍历对象的属性\n> 通过for..in语法可以遍历一个对象\n\n```javascript\nvar obj = {};\nfor (var i = 0; i < 10; i++) {\n  obj[i] = i * 2;\n}\nfor(var key in obj) {\n  console.log(key + \"==\" + obj[key]);\n}\n```\n### 删除对象的属性\n```javascript\nfunction fun() { \n  this.name = 'mm';\n}\nvar obj = new fun(); \nconsole.log(obj.name); // mm \ndelete obj.name;\nconsole.log(obj.name); // undefined\n```\n\n### 简单类型和复杂类型的区别\n>基本类型又叫做值类型，复杂类型又叫做引用类型\n>\n>值类型：简单数据类型，基本数据类型，在存储时，变量中存储的是值本身，因此叫做值类型。\n>\n>引用类型：复杂数据类型，在存储是，变量中存储的仅仅是地址（引用），因此叫做引用数据类型。\n\n- 堆和栈\n\n  ```\n  堆栈空间分配区别：\n  　　1、栈（操作系统）：由操作系统自动分配释放 ，存放函数的参数值，局部变量的值等。其操作方式类似于数据结构中的栈；\n  　　2、堆（操作系统）： 存储复杂类型(对象)，一般由程序员分配释放， 若程序员不释放，由垃圾回收机制回收，分配方式倒是类似于链表。\n  ```\n\n- 注意：JavaScript中没有堆和栈的概念，此处我们用堆和栈来讲解，目的方便理解和方便以后的学习。\n\n\n\n#### 基本类型在内存中的存储\n\n![1498288494687](/media/1498288494687.png)\n\n#### 复杂类型在内存中的存储\n\n![1498700592589](/media/1498700592589.png)\n\n#### 基本类型作为函数的参数\n\n![1497497605587](/media/1497497605587-8288640195.png)\n\n#### 复杂类型作为函数的参数\n\n![1497497865969](/media/1497497865969.png)\n\n```javascript\n// 下面代码输出的结果\nfunction Person(name,age,salary) {\n  this.name = name;\n  this.age = age;\n  this.salary = salary;\n}\nfunction f1(person) {\n  person.name = \"ls\";\n  person = new Person(\"aa\",18,10);\n}\n\nvar p = new Person(\"zs\",18,1000);\nconsole.log(p.name);\nf1(p);\nconsole.log(p.name);\n```\n\n思考：\n\n```javascript\n//1. \nvar num1 = 10;\nvar num2 = num1;\nnum1 = 20;\nconsole.log(num1);\nconsole.log(num2);\n\n//2. \nvar num = 50;\nfunction f1(num) {\n    num = 60;\n    console.log(num);\n}\nf1(num);\nconsole.log(num);\n\n//3. \nvar num1 = 55;\nvar num2 = 66;\nfunction f1(num, num1) {\n  num = 100;\n  num1 = 100;\n  num2 = 100;\n  console.log(num);\n  console.log(num1);\n  console.log(num2);\n}\n\nf1(num1, num2);\nconsole.log(num1);\nconsole.log(num2);\nconsole.log(num);\n```\n## 内置对象\n\nJavaScript中的对象分为3种：内置对象、浏览器对象、自定义对象\n\nJavaScript 提供多个内置对象：Math/Array/Number/String/Boolean...\n\n对象只是带有**属性**和**方法**的特殊数据类型。\n\n学习一个内置对象的使用，只要学会其常用的成员的使用（通过查文档学习）\n\n可以通过MDN/W3C来查询\n\n内置对象的方法很多，我们只需要知道内置对象提供的常用方法，使用的时候查询文档。\n\n### MDN\n\nMozilla 开发者网络（MDN）提供有关开放网络技术（Open Web）的信息，包括 HTML、CSS 和万维网及 HTML5 应用的 API。\n\n- [MDN](https://developer.mozilla.org/zh-CN/)\n- 通过查询MDN学习Math对象的random()方法的使用\n\n\n### 如何学习一个方法？\n\n1. 方法的功能\n2. 参数的意义和**类型**\n3. 返回值意义和**类型**\n4. demo进行测试\n\n### Math对象\n\nMath对象不是构造函数，它具有数学常数和函数的属性和方法，都是以静态成员的方式提供\n\n跟数学相关的运算来找Math中的成员（求绝对值，取整）\n\n[Math](https://developer.mozilla.org/zh-CN/docs/Web/JavaScript/Reference/Global_Objects/Math)\n\n演示：Math.PI、Math.random()、Math.floor()/Math.ceil()、Math.round()、Math.abs()\t、Math.max()\n\n```javascript\nMath.PI\t\t\t\t\t\t// 圆周率\nMath.random()\t\t\t\t// 生成随机数\nMath.floor()/Math.ceil()\t // 向下取整/向上取整\nMath.round()\t\t\t\t// 取整，四舍五入\nMath.abs()\t\t\t\t\t// 绝对值\nMath.max()/Math.min()\t\t // 求最大和最小值\n\nMath.sin()/Math.cos()\t\t // 正弦/余弦\nMath.power()/Math.sqrt()\t // 求指数次幂/求平方根\n```\n\n#### 案例\n\n- 求10-20之间的随机数\n- 随机生成颜色RGB\n- 模拟实现max()/min()\n\n### Date对象\n\n创建 `Date` 实例用来处理日期和时间。Date 对象基于1970年1月1日（世界标准时间）起的毫秒数。\n\n~~~javascript\n// 获取当前时间，UTC世界时间，距1970年1月1日（世界标准时间）起的毫秒数\nvar now = new Date();\nconsole.log(now.valueOf());\t// 获取距1970年1月1日（世界标准时间）起的毫秒数\n\nDate构造函数的参数\n1. 毫秒数 1498099000356\t\tnew Date(1498099000356)\n2. 日期格式字符串  '2015-5-1'\t new Date('2015-5-1')\n3. 年、月、日……\t\t\t\t  new Date(2015, 4, 1)   // 月份从0开始\n~~~\n\n- 获取日期的毫秒形式\n\n```javascript\nvar now = new Date();\n// valueOf用于获取对象的原始值\nconsole.log(date.valueOf())\t\n\n// HTML5中提供的方法，有兼容性问题\nvar now = Date.now();\t\n\n// 不支持HTML5的浏览器，可以用下面这种方式\nvar now = + new Date();\t\t\t// 调用 Date对象的valueOf() \n```\n\n- 日期格式化方法\n\n```javascript\ntoString()\t\t// 转换成字符串\nvalueOf()\t\t// 获取毫秒值\n// 下面格式化日期的方法，在不同浏览器可能表现不一致，一般不用\ntoDateString()\ntoTimeString()\ntoLocaleDateString()\ntoLocaleTimeString()\n```\n\n- 获取日期指定部分\n\n```javascript\ngetTime()  \t  // 返回毫秒数和valueOf()结果一样，valueOf()内部调用的getTime()\ngetMilliseconds() \ngetSeconds()  // 返回0-59\ngetMinutes()  // 返回0-59\ngetHours()    // 返回0-23\ngetDay()      // 返回星期几 0周日   6周6\ngetDate()     // 返回当前月的第几天\ngetMonth()    // 返回月份，***从0开始***\ngetFullYear() //返回4位的年份  如 2016\n```\n\n#### 案例\n\n- 写一个函数，格式化日期对象，返回yyyy-MM-dd HH:mm:ss的形式\n\n```javascript\nfunction formatDate(d) {\n  //如果date不是日期对象，返回\n  if (!date instanceof Date) {\n    return;\n  }\n  var year = d.getFullYear(),\n      month = d.getMonth() + 1, \n      date = d.getDate(), \n      hour = d.getHours(), \n      minute = d.getMinutes(), \n      second = d.getSeconds();\n  month = month < 10 ? '0' + month : month;\n  date = date < 10 ? '0' + date : date;\n  hour = hour < 10 ? '0' + hour : hour;\n  minute = minute < 10 ? '0' + minute:minute;\n  second = second < 10 ? '0' + second:second;\n  return year + '-' + month + '-' + date + ' ' + hour + ':' + minute + ':' + second;\n}\n```\n\n- 计算时间差，返回相差的天/时/分/秒\n\n```javascript\nfunction getInterval(start, end) {\n  var day, hour, minute, second, interval;\n  interval = end - start;\n  interval /= 1000;\n  day = Math.round(interval / 60 /60 / 24);\n  hour = Math.round(interval / 60 /60 % 24);\n  minute = Math.round(interval / 60 % 60);\n  second = Math.round(interval % 60);\n  return {\n    day: day,\n    hour: hour,\n    minute: minute,\n    second: second\n  }\n}\n```\n\n### Array对象\n\n- 创建数组对象的两种方式\n  - 字面量方式\n  - new Array()\n\n```javascript\n// 1. 使用构造函数创建数组对象\n// 创建了一个空数组\nvar arr = new Array();\n// 创建了一个数组，里面存放了3个字符串\nvar arr = new Array('zs', 'ls', 'ww');\n// 创建了一个数组，里面存放了4个数字\nvar arr = new Array(1, 2, 3, 4);\n\n\n// 2. 使用字面量创建数组对象\nvar arr = [1, 2, 3];\n\n// 获取数组中元素的个数\nconsole.log(arr.length);\n```\n\n- 检测一个对象是否是数组\n\n  - instanceof\n  - Array.isArray()     HTML5中提供的方法，有兼容性问题\n\n  函数的参数，如果要求是一个数组的话，可以用这种方式来进行判断\n\n- toString()/valueOf()\n\n  - toString()\t\t把数组转换成字符串，逗号分隔每一项\n  - valueOf()         返回数组对象本身\n\n- 数组常用方法\n\n  演示：push()、shift()、unshift()、reverse()、sort()、splice()、indexOf()\n\n```javascript\n// 1 栈操作(先进后出)\npush()\npop() \t\t//取出数组中的最后一项，修改length属性\n// 2 队列操作(先进先出)\npush()\nshift()\t\t//取出数组中的第一个元素，修改length属性\nunshift() \t//在数组最前面插入项，返回数组的长度\n// 3 排序方法\nreverse()\t//翻转数组\nsort(); \t//即使是数组sort也是根据字符，从小到大排序\n// 带参数的sort是如何实现的？\n// 4 操作方法\nconcat()  \t//把参数拼接到当前数组\nslice() \t//从当前数组中截取一个新的数组，不影响原来的数组，参数start从0开始,end从1开始\nsplice()\t//删除或替换当前数组的某些项目，参数start, deleteCount, options(要替换的项目)\n// 5 位置方法\nindexOf()、lastIndexOf()   //如果没找到返回-1\n// 6 迭代方法 不会修改原数组(可选)\nevery()、filter()、forEach()、map()、some()\n// 7 方法将数组的所有元素连接到一个字符串中。\njoin()\n```\n\n- 清空数组\n\n```javascript\n// 方式1 推荐 \narr = [];\n// 方式2 \narr.length = 0;\n// 方式3\narr.splice(0, arr.length);\n```\n\n#### 案例\n\n- 将一个字符串数组输出为|分割的形式，比如“刘备|张飞|关羽”。使用两种方式实现\n\n```javascript\nfunction myJoin(array, seperator) {\n  seperator = seperator || ',';\n  array = array || [];\n  if (array.length == 0){\n    return '';\n  }\n  var str = array[0];\n  for (var i = 1; i < array.length; i++) {\n    str += seperator + array[i];\n  }\n  return str;\n}\nvar array = [6, 3, 5, 6, 7, 8, 0];\nconsole.log(myJoin(array, '-'));\n\nconsole.log(array.join('-'))\n```\n\n- 将一个字符串数组的元素的顺序进行反转。[\"a\", \"b\", \"c\", \"d\"] -> [ \"d\",\"c\",\"b\",\"a\"]。使用两种种方式实现。提示：第i个和第length-i-1个进行交换\n\n```javascript\nfunction myReverse(arr) {\n  if (!arr || arr.length == 0) {\n    return [];\n  }\n  for (var i = 0; i < arr.length / 2; i++) {\n    var tmp = arr[i];\n    arr[i] = arr[this.length - i - 1];\n    arr[arr.length - i - 1] = tmp;\n  }\n  return arr;\n}\n\nvar array = ['a', 'b', 'c'];\nconsole.log(myReverse(array));\n\nconsole.log(array.reverse());\n```\n\n- 工资的数组[1500, 1200, 2000, 2100, 1800],把工资超过2000的删除\n\n```javascript\n// 方式1\nvar array =  [1500,1200,2000,2100,1800];\nvar tmpArray = [];\nfor (var i = 0; i < array.length; i++) {\n  if(array[i] < 2000) {\n    tmpArray.push(array[i]);\n  }\n}\nconsole.log(tmpArray);\n// 方式2\nvar array =  [1500, 1200, 2000, 2100, 1800];\narray = array.filter(function (item, index) {\n  if (item < 2000) {\n    return true;\n  }\n  return false;\n});\nconsole.log(array);\n```\n\n- [\"c\", \"a\", \"z\", \"a\", \"x\", \"a\"]找到数组中每一个a出现的位置\n\n```javascript\nvar array =  ['c', 'a', 'z', 'a', 'x', 'a'];\ndo {\n  var index = array.indexOf('a',index + 1);\n  if (index != -1){\n    console.log(index);\n  }\n} while (index > 0);\n```\n\n- 编写一个方法去掉一个数组的重复元素\n\n```javascript\nvar array =  ['c', 'a', 'z', 'a', 'x', 'a'];\nfunction clear() {\n  var o = {};\n  for (var i = 0; i < array.length; i++) {\n    var item = array[i];\n    if (o[item]) {\n      o[item]++;\n    }else{\n      o[item] = 1;\n    }\n  }\n  var tmpArray = [];\n  for(var key in o) {\n    if (o[key] == 1) {\n      tmpArray.push(key);\n    }else{\n      if(tmpArray.indexOf(key) == -1){\n        tmpArray.push(key);\n      }\n    }\n  }\n  returm tmpArray;\n}\n\nconsole.log(clear(array));\n```\n\n\n\n### 基本包装类型\n\n为了方便操作基本数据类型，JavaScript还提供了三个特殊的引用类型：String/Number/Boolean\n\n```javascript\n// 下面代码的问题？\n// s1是基本类型，基本类型是没有方法的\nvar s1 = 'zhangsan';\nvar s2 = s1.substring(5);\n\n// 当调用s1.substring(5)的时候，先把s1包装成String类型的临时对象，再调用substring方法，最后销毁临时对象, 相当于：\nvar s1 = new String('zhangsan');\nvar s2 = s1.substring(5);\ns1 = null;\n```\n\n```javascript\n// 创建基本包装类型的对象\nvar num = 18;  \t\t\t\t//数值，基本类型\nvar num = Number('18'); \t//类型转换\nvar num = new Number(18); \t//基本包装类型，对象\n// Number和Boolean基本包装类型基本不用，使用的话可能会引起歧义。例如：\nvar b1 = new Boolean(false);\nvar b2 = b1 && true;\t\t// 结果是什么\n```\n\n### String对象\n\n- 字符串的不可变\n\n```javascript\nvar str = 'abc';\nstr = 'hello';\n// 当重新给str赋值的时候，常量'abc'不会被修改，依然在内存中\n// 重新给字符串赋值，会重新在内存中开辟空间，这个特点就是字符串的不可变\n// 由于字符串的不可变，在大量拼接字符串的时候会有效率问题\n```\n\n- 创建字符串对象\n\n```javascript\nvar str = new String('Hello World');\n\n// 获取字符串中字符的个数\nconsole.log(str.length);\n```\n\n- 字符串对象的常用方法\n\n  字符串所有的方法，都不会修改字符串本身(字符串是不可变的)，操作完成会返回一个新的字符串\n\n```javascript\n// 1 字符方法\ncharAt()    \t//获取指定位置处字符\ncharCodeAt()  \t//获取指定位置处字符的ASCII码\nstr[0]   \t\t//HTML5，IE8+支持 和charAt()等效\n// 2 字符串操作方法\nconcat()   \t\t//拼接字符串，等效于+，+更常用\nslice()    \t\t//从start位置开始，截取到end位置，end取不到\nsubstring() \t//从start位置开始，截取到end位置，end取不到\nsubstr()   \t\t//从start位置开始，截取length个字符\n// 3 位置方法\nindexOf()   \t//返回指定内容在元字符串中的位置\nlastIndexOf() \t//从后往前找，只找第一个匹配的\n// 4 去除空白   \ntrim()  \t\t//只能去除字符串前后的空白\n// 5 大小写转换方法\nto(Locale)UpperCase() \t//转换大写\nto(Locale)LowerCase() \t//转换小写\n// 6 其它\nsearch()\nreplace()\nsplit()\nfromCharCode()\n// String.fromCharCode(101, 102, 103);\t //把ASCII码转换成字符串\n```\n\n#### 案例\n\n- 截取字符串\"我爱中华人民共和国\"，中的\"中华\"\n\n```javascript\nvar s = \"我爱中华人民共和国\";\ns = s.substr(2,2);\nconsole.log(s);\n```\n\n- \"abcoefoxyozzopp\"查找字符串中所有o出现的位置\n\n```javascript\nvar s = 'abcoefoxyozzopp';\nvar array = [];\ndo {\n  var index = s.indexOf('o', index + 1);\n  if (index != -1) {\n    array.push(index);\n  }\n} while (index > -1);\nconsole.log(array);\n```\n\n- 把字符串中所有的o替换成!\n\n```javascript\nvar s = 'abcoefoxyozzopp';\ndo {\n  s = s.replace('o', '');\n} while (s.indexOf('o') > -1);\nconsole.log(s);\n\nconsole.log(s.replace(/o/ig, ''));\n```\n\n- 判断一个字符串中出现次数最多的字符，统计这个次数\n\n```javascript\nvar s = 'abcoefoxyozzopp';\nvar o = {};\n\nfor (var i = 0; i < s.length; i++) {\n  var item = s.charAt(i);\n  if (o[item]) {\n    o[item] ++;\n  }else{\n    o[item] = 1;\n  }\n}\n\nvar max = 0;\nvar char ;\nfor(var key in o) {\n  if (max < o[key]) {\n    max = o[key];\n    char = key;\n  }\n}\n\nconsole.log(max);\nconsole.log(char);\n```\n\n\n\n#### 作业\n\n```\n给定一个字符串如：“abaasdffggghhjjkkgfddsssss3444343”问题如下： \n1、 字符串的长度 \n2、 取出指定位置的字符，如：0,3,5,9等 \n3、 查找指定字符是否在以上字符串中存在，如：i，c ，b等 \n4、 替换指定的字符，如：g替换为22,ss替换为b等操作方法 \n5、 截取指定开始位置到结束位置的字符串，如：取得1-5的字符串\n6、 找出以上字符串中出现次数最多的字符和出现的次数 \n7、 遍历字符串，并将遍历出的字符两头添加符号“@”输出至当前的文档页面。 \n```\n\n","tags":["js笔记"],"categories":["JavaScript"]},{"title":"js api","url":"%2F2017%2F12%2F06%2F02-Web%20API%2F","content":"\n---\n学习目标:\n  - 掌握API和Web API的概念\n  - 掌握常见的浏览器提供的API的调用方式\n  - 能通过API开发常见的页面交互功能\n  - 能够利用搜索引擎解决问题\ntypora-copy-images-to: media\n---\n\n# Web API\n\n## Web API介绍\n\n### API的概念\n\nAPI（Application Programming Interface,应用程序编程接口）是一些预先定义的函数，目的是提供应用程序与开发人员基于某软件或硬件得以访问一组例程的能力，而又无需访问源码，或理解内部工作机制的细节。\n\n- 任何开发语言都有自己的API\n- API的特征输入和输出(I/O)\n- API的使用方法(console.log())\n\n### Web API的概念\n\n浏览器提供的一套操作浏览器功能和页面元素的API(BOM和DOM)\n\n此处的Web API特指浏览器提供的API(一组方法)，Web API在后面的课程中有其它含义\n\n\n### 掌握常见的浏览器提供的API的调用方式\n[MDN-Web API](https://developer.mozilla.org/zh-CN/docs/Web/API)\n\n\n### JavaScript的组成\n\n![1496912475691](/media/1496912475691.png)\n\n#### ECMAScript - JavaScript的核心 \n\n定义了javascript的语法规范\n\nJavaScript的核心，描述了语言的基本语法和数据类型，ECMAScript是一套标准，定义了一种语言的标准与具体实现无关\n\n#### BOM - 浏览器对象模型\n\n一套操作浏览器功能的API\n\n通过BOM可以操作浏览器窗口，比如：弹出框、控制浏览器跳转、获取分辨率等\n\n#### DOM - 文档对象模型\n\n一套操作页面元素的API\n\nDOM可以把HTML看做是文档树，通过DOM提供的API可以对树上的节点进行操作\n\n## BOM\n\n### BOM的概念\n\nBOM(Browser Object Model) 是指浏览器对象模型，浏览器对象模型提供了独立于内容的、可以与浏览器窗口进行互动的对象结构。BOM由多个对象组成，其中代表浏览器窗口的Window对象是BOM的顶层对象，其他对象都是该对象的子对象。\n\n我们在浏览器中的一些操作都可以使用BOM的方式进行编程处理，\n\n比如：刷新浏览器、后退、前进、在浏览器中输入URL等\n\n### BOM的顶级对象window\n\nwindow是浏览器的顶级对象，当调用window下的属性和方法时，可以省略window\n注意：window下一个特殊的属性 window.name\n\n### 对话框\n\n- alert()\n- prompt()\n- confirm()\n\n\n### 页面加载事件\n\n- onload\n\n```javascript\nwindow.onload = function () {\n  // 当页面加载完成执行\n  // 当页面完全加载所有内容（包括图像、脚本文件、CSS 文件等）执行\n}\n```\n\n- onunload\n\n```javascript\nwindow.onunload = function () {\n  // 当用户退出页面时执行\n}\n```\n\n### 定时器\n\n#### setTimeout()和clearTimeout()\n\n在指定的毫秒数到达之后执行指定的函数，只执行一次\n\n```javascript\n// 创建一个定时器，1000毫秒后执行，返回定时器的标示\nvar timerId = setTimeout(function () {\n  console.log('Hello World');\n}, 1000);\n\n// 取消定时器的执行\nclearTimeout(timerId);\n```\n\n#### setInterval()和clearInterval()\n\n定时调用的函数，可以按照给定的时间(单位毫秒)周期调用函数\n\n```javascript\n// 创建一个定时器，每隔1秒调用一次\nvar timerId = setInterval(function () {\n  var date = new Date();\n  console.log(date.toLocaleTimeString());\n}, 1000);\n\n// 取消定时器的执行\nclearInterval(timerId);\n```\n\n### location对象\n\nlocation对象是window对象下的一个属性，时候的时候可以省略window对象\n\nlocation可以获取或者设置浏览器地址栏的URL\n\n#### URL\n\n统一资源定位符 (Uniform Resource Locator, URL)\n\n- URL的组成\n\n```\nscheme://host:port/path?query#fragment\nscheme:通信协议\n\t常用的http,ftp,maito等\nhost:主机\n\t服务器(计算机)域名系统 (DNS) 主机名或 IP 地址。\nport:端口号\n\t整数，可选，省略时使用方案的默认端口，如http的默认端口为80。\npath:路径\n\t由零或多个'/'符号隔开的字符串，一般用来表示主机上的一个目录或文件地址。\nquery:查询\n\t可选，用于给动态网页传递参数，可有多个参数，用'&'符号隔开，每个参数的名和值用'='符号隔开。例如：name=zs\nfragment:信息片断\n\t字符串，锚点.\n```\n\n#### location有哪些成员？\n\n- 使用chrome的控制台查看\n\n- 查MDN\n\n  [MDN](https://developer.mozilla.org/zh-CN/)\n\n- 成员\n\n  - assign()/reload()/replace()\n  - hash/host/hostname/search/href……\n\n#### 案例\n\n解析URL中的query，并返回对象的形式\n\n```javascript\nfunction getQuery(queryStr) {\n  var query = {};\n  if (queryStr.indexOf('?') > -1) {\n    var index = queryStr.indexOf('?');\n    queryStr = queryStr.substr(index + 1);\n    var array = queryStr.split('&');\n    for (var i = 0; i < array.length; i++) {\n      var tmpArr = array[i].split('=');\n      if (tmpArr.length === 2) {\n        query[tmpArr[0]] = tmpArr[1];\n      }\n    }\n  }\n  return query;\n}\nconsole.log(getQuery(location.search));\nconsole.log(getQuery(location.href));\n```\n\n### history对象\n\n- back()\n- forward()\n- go()\n\n### navigator对象\n\n- userAgent\n\n通过userAgent可以判断用户浏览器的类型\n\n- platform\n\n通过platform可以判断浏览器所在的系统平台类型.\n\n## DOM\n\n### DOM的概念\n\n文档对象模型（Document Object Model，简称DOM），是[W3C](http://baike.baidu.com/item/W3C)组织推荐的处理可扩展标志语言的标准编程接口。在网页上，组织页面（或文档）的对象被组织在一个树形结构中，用来表示文档中对象的标准模型就称为DOM。Document Object Model的历史可以追溯至1990年代后期微软与[Netscape](http://baike.baidu.com/item/Netscape)的“浏览器大战”，双方为了在[JavaScript](http://baike.baidu.com/item/JavaScript)与[JScript](http://baike.baidu.com/item/JScript)一决生死，于是大规模的赋予浏览器强大的功能。微软在网页技术上加入了不少专属事物，既有[VBScript](http://baike.baidu.com/item/VBScript)、[ActiveX](http://baike.baidu.com/item/ActiveX)、以及微软自家的[DHTML](http://baike.baidu.com/item/DHTML)格式等，使不少网页使用非微软平台及浏览器无法正常显示。DOM即是当时蕴酿出来的杰作。\n\nDOM又称为文档树模型\n\n![1497154623955](/media/1497154623955.png)\n\n- 文档：一个网页可以称为文档\n- 节点：网页中的所有内容都是节点（标签、属性、文本、注释等）\n- 元素：网页中的标签\n- 属性：标签的属性\n\n### 模拟文档树结构\n\n![1497165666684](/media/1497165666684.png)\n\n```javascript\nfunction Element(option) {\n  this.id = option.id || '';\n  this.nodeName = option.nodeName || '';\n  this.nodeValue = option.nodeValue || '';\n  this.nodeType = 1;\n  this.children = option.children || [];\n}\n\nvar doc = new Element({\n  nodeName: 'html'\n});\nvar head = new Element({\n  nodeName: 'head'\n});\nvar body = new Element({\n  nodeName: 'body'\n})\ndoc.children.push(head);\ndoc.children.push(body);\n\nvar div = new Element({\n  nodeName: 'div',\n  nodeValue: 'haha',\n});\n\nvar p = new Element({\n  nodeName: 'p',\n  nodeValue: '段落'\n})\nbody.children.push(div);\nbody.children.push(p);\n\nfunction getChildren(ele) {\n  for(var i = 0; i < ele.children.length; i++) {\n    var child = ele.children[i];\n    console.log(child.nodeName);\n    getChildren(child);\n  }\n}\ngetChildren(doc);\n```\n\n### DOM经常进行的操作\n\n- 获取元素\n- 动态创建元素\n- 对元素进行操作(设置其属性或调用其方法)\n- 事件(什么时机做相应的操作)\n\n## 获取页面元素\n\n##案例\n1.点击按钮弹出对话框\n2.点击按钮修改超链接的地址和热点文字\n3.点击(每个)图片弹出对话框\n4.点击图片设置自身宽和高\n5.点击按钮修改每个图片的title属性\n6.点击按钮显示哈哈(排他功能)\n7.点击按钮显示和隐藏div\n8.显示和隐藏二维码\n9.点击按钮修改所有p标签内容\n10.点击按钮修改所有文本框内容\n11.点击按钮切换图片\n12.点击超链接停止跳转页面\n13.点击小图显示大图\n14.美女相册\n15点击按钮选中性别和兴趣\n\n\n### 为什么要获取页面元素\n\n例如：我们想要操作页面上的某部分(显示/隐藏，动画)，需要先获取到该部分对应的元素，才进行后续操作\n\n### 根据id获取元素\n\n```javascript\nvar div = document.getElementById('main');\nconsole.log(div);\n\n// 获取到的数据类型 HTMLDivElement，对象都是有类型的\n// HTMLDivElement <-- HTMLElement <-- Element  <-- Node  <-- EventTarget\n```\n\n注意：由于id名具有唯一性，部分浏览器支持直接使用id名访问元素，但不是标准方式，不推荐使用。\n\n### 根据标签名获取元素\n\n```javascript\nvar divs = document.getElementsByTagName('div');\nfor (var i = 0; i < divs.length; i++) {\n  var div = divs[i];\n  console.log(div);\n}\n```\n\n### 根据name获取元素*\n\n```javascript\nvar inputs = document.getElementsByName('hobby');\nfor (var i = 0; i < inputs.length; i++) {\n  var input = inputs[i];\n  console.log(input);\n}\n```\n\n### 根据类名获取元素\n\n```javascript\nvar mains = document.getElementsByClassName('main');\nfor (var i = 0; i < mains.length; i++) {\n  var main = mains[i];\n  console.log(main);\n}\n```\n\n### 根据选择器获取元素\n\n```javascript\nvar text = document.querySelector('#text');\nconsole.log(text);\n\nvar boxes = document.querySelectorAll('.box');\nfor (var i = 0; i < boxes.length; i++) {\n  var box = boxes[i];\n  console.log(box);\n}\n```\n\n- 总结\n\n```\n掌握\n\tgetElementById()\n\tgetElementsByTagName()\n了解\n\tgetElementsByName()\n\tgetElementsByClassName()\n\tquerySelector()\n\tquerySelectorAll()\n```\n\n## 事件\n\n事件：触发-响应机制\n\nEvent接口表示在DOM中发生的任何事件，一些是用户生成的（例如鼠标或键盘事件），而其他由API生成。\n\n### 事件三要素\n\n- 事件源:触发(被)事件的元素\n- 事件类型:事件的触发方式(例如鼠标点击或键盘点击)\n- 事件处理程序:事件触发后要执行的代码(函数形式)\n\n### 事件的基本使用\n\n```javascript\nvar box = document.getElementById('box');\nbox.onclick = function() {\n  console.log('代码会在box被点击后执行');  \n};\n```\n\n### 案例\n- 点击按钮弹出提示框\n- 点击按钮修改元素的样式\n\n## 属性操作\n\n### 非表单元素的属性\n\nhref、title、id、src、className\n\n```javascript\nvar link = document.getElementById('link');\nconsole.log(link.href);\nconsole.log(link.title);\n\nvar pic = document.getElementById('pic');\nconsole.log(pic.src);\n```\n\n案例：\n\n​\t点击按钮，切换img标签里的图片\n\n​\t点击按钮显示隐藏div\n\n- innerHTML和innerText\n\n```javascript\nvar box = document.getElementById('box');\nbox.innerHTML = '我是文本<p>我会生成为标签</p>';\nconsole.log(box.innerHTML);\nbox.innerText = '我是文本<p>我不会生成为标签</p>';\nconsole.log(box.innerText);\n```\n- HTML转义符\n\n```\n\"\t\t&quot;\n‘\t\t&apos;\n&\t\t&amp;\n<\t\t&lt;    //less than  小于\n>\t\t&gt;   // greater than  大于\n空格\t   &nbsp;\n©\t\t&copy;\n```\n\n- innerHTML和innerText的区别\n\n- innerText的兼容性处理\n\n\n### 表单元素属性\n\n- value 用于大部分表单元素的内容获取(option除外)\n- type 可以获取input标签的类型(输入框或复选框等)\n- disabled 禁用属性\n- checked 复选框选中属性\n- selected 下拉菜单选中属性\n\n### 案例\n\n- 给文本框赋值，获取文本框的值\n- 点击按钮禁用文本框\n- 搜索文本框\n- 检测用户名是否是3-6位，密码是否是6-8位，如果不满足要求高亮显示文本框\n- 设置下拉框中的选中项\n- 全选反选\n\n### 自定义属性操作\n\n- getAttribute() 获取标签行内属性\n- setAttribute() 设置标签行内属性\n- removeAttribute() 移除标签行内属性\n- 与element.属性的区别: 上述三个方法用于获取任意的行内属性。\n\n### 样式操作\n\n- 使用style方式设置的样式显示在标签行内\n```javascript\nvar box = document.getElementById('box');\nbox.style.width = '100px';\nbox.style.height = '100px';\nbox.style.backgroundColor = 'red';\n```\n\n- 注意\n\n  通过样式属性设置宽高、位置的属性类型是字符串，需要加上px\n\n### 类名操作\n\n- 修改标签的className属性相当于直接修改标签的类名\n```javascript\nvar box = document.getElementById('box');\nbox.className = 'clearfix';\n```\n\n### 案例\n\n- 开关灯\n- 点击按钮变色\n- 图片切换二维码案例\n- 当前输入的文本框高亮显示\n- 点击按钮改变div的大小和位置\n- 列表隔行变色、高亮显示\n- 京东商品展示\n- tab选项卡切换\n\n\n## 创建元素的三种方式\n\n### document.write()\n\n```javascript\ndocument.write('新设置的内容<p>标签也可以生成</p>');\n```\n\n### innerHTML\n\n```javascript\nvar box = document.getElementById('box');\nbox.innerHTML = '新内容<p>新标签</p>';\n```\n\n### document.createElement()\n\n```javascript\nvar div = document.createElement('div');\ndocument.body.appendChild(div);\n```\n\n### 性能问题\n\n- innerHTML方法由于会对字符串进行解析，需要避免在循环内多次使用。\n- 可以借助字符串或数组的方式进行替换，再设置给innerHTML\n- 优化后与document.createElement性能相近\n\n\n### 案例\n\n- 动态创建列表，高亮显示\n- 根据数据动态创建表格\n- 模拟百度搜索文本框\n\n## 节点操作\n\n```javascript\nvar body = document.body;\nvar div = document.createElement('div');\nbody.appendChild(div);\n\nvar firstEle = body.children[0];\nbody.insertBefore(div,firstEle);\n\nbody.removeChild(firstEle);\n\nvar text = document.createElement('p');\nbody.replaceChild(text, div);\n```\n\n案例：\n\n​\t权限选择\n\n### 节点层级\n\n重点讲父子属性，兄弟属性画图讲解\n\n```javascript\nvar box = document.getElementById('box');\nconsole.log(box.parentNode);\nconsole.log(box.childNodes);\nconsole.log(box.children);\nconsole.log(box.nextSibling);\nconsole.log(box.previousSibling);\nconsole.log(box.firstChild);\nconsole.log(box.lastChild);\n```\n\n- 注意\n\n  childNodes和children的区别，childNodes获取的是子节点，children获取的是子元素\n\n  nextSibling和previousSibling获取的是节点，获取元素对应的属性是nextElementSibling和previousElementSibling获取的是元素\n\n  ​\tnextElementSibling和previousElementSibling有兼容性问题，IE9以后才支持\n\n- 总结\n\n```\n节点操作，方法\n\tappendChild()\n\tinsertBefore()\n\tremoveChild()\n\treplaceChild()\n节点层次，属性\n\tparentNode\n\tchildNodes\n\tchildren\n\tnextSibling/previousSibling\n\tfirstChild/lastChild\n```\n\n## 事件详解\n\n\n\n### 注册/移除事件的三种方式\n\n```javascript\nvar box = document.getElementById('box');\nbox.onclick = function () {\n  console.log('点击后执行');\n};\nbox.onclick = null;\n\nbox.addEventListener('click', eventCode, false);\nbox.removeEventListener('click', eventCode, false);\n\nbox.attachEvent('onclick', eventCode);\nbox.detachEvent('onclick', eventCode);\n\nfunction eventCode() {\n  console.log('点击后执行');\n}\n```\n\n### 兼容代码\n\n```javascript\nfunction addEventListener(element, type, fn) {\n  if (element.addEventListener) {\n    element.addEventListener(type, fn, false);\n  } else if (element.attachEvent){\n    element.attachEvent('on' + type,fn);\n  } else {\n    element['on'+type] = fn;\n  }\n}\n\nfunction removeEventListener(element, type, fn) {\n  if (element.removeEventListener) {\n    element.removeEventListener(type, fn, false);\n  } else if (element.detachEvent) {\n    element.detachEvent('on' + type, fn);\n  } else {\n    element['on'+type] = null;\n  }\n}\n```\n\n### 事件的三个阶段\n\n1. 捕获阶段\n\n2. 当前目标阶段\n\n3. 冒泡阶段\n\n   事件对象.eventPhase属性可以查看事件触发时所处的阶段\n\n### 事件对象的属性和方法\n\n- event.type 获取事件类型\n- clientX/clientY     所有浏览器都支持，窗口位置\n- pageX/pageY       IE8以前不支持，页面位置\n- event.target || event.srcElement 用于获取触发事件的元素\n- event.preventDefault() 取消默认行为\n\n#### 案例\n\n- 跟着鼠标飞的天使\n- 鼠标点哪图片飞到哪里\n- 获取鼠标在div内的坐标\n\n### 阻止事件传播的方式\n\n- 标准方式 event.stopPropagation();\n- IE低版本 event.cancelBubble = true; 标准中已废弃\n\n### 常用的鼠标和键盘事件\n\n- onmouseup 鼠标按键放开时触发\n- onmousedown 鼠标按键按下触发\n- onmousemove 鼠标移动触发\n- onkeyup 键盘按键按下触发\n- onkeydown 键盘按键抬起触发\n\n\n## 特效\n\n### 偏移量\n\n- offsetParent用于获取定位的父级元素\n- offsetParent和parentNode的区别\n\n```javascript\nvar box = document.getElementById('box');\nconsole.log(box.offsetParent);\nconsole.log(box.offsetLeft);\nconsole.log(box.offsetTop);\nconsole.log(box.offsetWidth);\nconsole.log(box.offsetHeight);\n```\n\n![1498743216279](/media/1498743216279.png)\n\n### 客户区大小\n\n```javascript\nvar box = document.getElementById('box');\nconsole.log(box.clientLeft);\nconsole.log(box.clientTop);\nconsole.log(box.clientWidth);\nconsole.log(box.clientHeight);\n```\n\n![1498743269100](/media/1498743269100.png)\n\n### 滚动偏移\n\n```javascript\nvar box = document.getElementById('box');\nconsole.log(box.scrollLeft)\nconsole.log(box.scrollTop)\nconsole.log(box.scrollWidth)\nconsole.log(box.scrollHeight)\n```\n\n![1498743288621](/media/1498743288621.png)\n\n### 案例 \n\n- 匀速动画函数\n- 变速动画函数\n- 回到顶部\n- 无缝轮播图\n- 模拟滚动条\n- 拖拽案例\n- 放大镜案例\n\n\n## 附录\n\n### 元素的类型\n\n![1497169919418](/media/1497169919418.png)","tags":["js笔记"],"categories":["JavaScript"]},{"title":"js高级","url":"%2F2017%2F12%2F06%2F03-JavaScript%E9%AB%98%E7%BA%A7%2F","content":"---\n学习目标:\n  - 理解面向对象开发思想\n  - 掌握 JavaScript 面向对象开发相关模式\n  - 掌握在 JavaScript 中使用正则表达式\n  - \ntypora-copy-images-to: media\n---\n\n# JavaScript 高级\n\n<img src=\"/media/Unofficial_JavaScript_logo_2.svg.png\" width=\"400\" alt=\"\">\n\n## 课程介绍\n\n### 课程大纲\n\n在线地址：[JavaScript 高级](http://naotu.baidu.com/file/5bcd79bc4f1eaf83f96d1ad23baab345?token=d22135c63546f5ee)\n\n![课程大纲](/media/课程大纲.png)\n\n### 目标\n\n- 理解面向对象开发思想\n- 掌握 JavaScript 面向对象开发相关模式\n- 掌握在 JavaScript 中使用正则表达式\n\n### 案例演示\n\n- [贪吃蛇](https://lipengzhou.github.io/new-snake/)\n\n---\n\n## 基本概念复习\n\n> 由于 JavaScript 高级还是针对 JavaScript 语言本身的一个进阶学习，所以在开始之前我们先对以前所学过的 JavaScript 相关知识点做一个快速复习总结。\n\n### 重新介绍 JavaScript\n\n#### JavaScript 是什么\n\n- 解析执行：轻量级解释型的，或是 JIT 编译型的程序设计语言\n- 语言特点：动态，头等函数 (First-class Function)\n  + 又称函数是 JavaScript 中的一等公民\n- 执行环境：在宿主环境（host environment）下运行，浏览器是最常见的 JavaScript 宿主环境\n  + 但是在很多非浏览器环境中也使用 JavaScript ，例如 node.js\n- 编程范式：基于原型、多范式的动态脚本语言，并且支持面向对象、命令式和声明式（如：函数式编程）编程风格\n\n#### JavaScript 与浏览器的关系\n\n<img src=\"/media/browser-js.png\" alt=\"\">\n\n#### JavaScript 的组成\n\n| 组成部分       | 说明                |\n| ---------- | ----------------- |\n| Ecmascript | 描述了该语言的语法和基本对象    |\n| DOM        | 描述了处理网页内容的方法和接口   |\n| BOM        | 描述了与浏览器进行交互的方法和接口 |\n\n#### JavaScript 可以做什么\n\n> Any application that can be written in JavaScript, will eventually be written in JavaScript.  \n> 凡是能用 JavaScript 写出来的，最终都会用 JavaScript 写出来\n\n- [知乎 - JavaScript 能做什么，该做什么？](https://www.zhihu.com/question/20796866)\n- [最流行的编程语言 JavaScript 能做什么？](https://github.com/phodal/articles/issues/1)\n\n#### JavaScript 发展历史\n\n> [JavaScript 标准参考教程 - JavaScript 语言的历史](http://javascript.ruanyifeng.com/introduction/history.html)\n\n- JavaScript 的诞生\n- JavaScript 与 Ecmascript 的关系\n- JavaScript 与 Java 的关系\n- JavaScript 的版本\n- JavaScript 周边大事记\n\n#### 小结\n\n### 基本概念\n\n> 本小节快速过即可，主要是对学过的内容做知识点梳理。\n\n- 语法\n  + 区分大小写\n  + 标识符\n  + 注释\n  + 严格模式\n  + 语句\n- 关键字和保留字\n- 变量\n- 数据类型\n  + typeof 操作符\n  + Undefined\n  + Null\n  + Boolean\n  + Number\n  + String\n  + Object\n- 操作符\n- 流程控制语句\n- 函数\n\n### JavaScript 中的数据类型\n\nJavaScript 有 5 种简单数据类型：`Undefined、Null、Boolean、Number、String` 和 1 种复杂数据类型 `Object` 。\n\n#### 基本类型（值类型）\n\n- Undefined\n- Null\n- Boolean\n- Number\n- String\n\n#### 复杂类型（引用类型）\n\n- Object\n- Array\n- Date\n- RegExp\n- Function\n- 基本包装类型\n  + Boolean\n  + Number\n  + String\n- 单体内置对象\n  + Global\n  + Math\n\n#### 类型检测\n\n- `typeof`\n- `instanceof`\n- `Object.prototype.toString.call()`\n\n#### 值类型和引用类型在内存中的存储方式（画图说明）\n\n- 值类型按值存储\n- 引用类型按引用存储\n\n#### 值类型复制和引用类型复制（画图说明）\n\n- 值类型按值复制\n- 引用类型按引用复制\n\n#### 值类型和引用类型参数传递（画图说明）\n\n- 值类型按值传递\n- 引用类型按引用传递\n\n#### 值类型与引用类型的差别\n\n- 基本类型在内存中占据固定大小的空间，因此被保存在栈内存中\n- 从一个变量向另一个变量复制基本类型的值，复制的是值的副本\n- 引用类型的值是对象，保存在堆内存\n- 包含引用类型值的变量实际上包含的并不是对象本身，而是一个指向该对象的指针\n- 从一个变量向另一个变量复制引用类型的值的时候，复制是引用指针，因此两个变量最终都指向同一个对象\n\n#### 小结\n\n- 类型检测方式\n- 值类型和引用类型的存储方式\n- 值类型复制和引用类型复制\n- 方法参数中 值类型数据传递 和 引用类型数据传递\n\n### JavaScript 执行过程\n\nJavaScript 运行分为两个阶段：\n\n- 预解析\n  + 全局预解析（所有变量和函数声明都会提前；同名的函数和变量函数的优先级高）\n  + 函数内部预解析（所有的变量、函数和形参都会参与预解析）\n    * 函数\n    * 形参\n    * 普通变量\n- 执行\n\n先预解析全局作用域，然后执行全局作用域中的代码，\n在执行全局代码的过程中遇到函数调用就会先进行函数预解析，然后再执行函数内代码。\n\n---\n\n## JavaScript 面向对象编程\n\n<img src=\"/media/mxdxkf.png\" width=\"400\" alt=\"\">\n\n### 面向对象介绍\n\n#### 什么是对象\n\n> Everything is object （万物皆对象）\n\n<img src=\"/media/20160823024542444.jpg\" alt=\"\">\n\n对象到底是什么，我们可以从两次层次来理解。\n\n**(1) 对象是单个事物的抽象。**\n\n一本书、一辆汽车、一个人都可以是对象，一个数据库、一张网页、一个与远程服务器的连接也可以是对象。当实物被抽象成对象，实物之间的关系就变成了对象之间的关系，从而就可以模拟现实情况，针对对象进行编程。\n\n**(2) 对象是一个容器，封装了属性（property）和方法（method）。**\n\n属性是对象的状态，方法是对象的行为（完成某种任务）。比如，我们可以把动物抽象为animal对象，使用“属性”记录具体是那一种动物，使用“方法”表示动物的某种行为（奔跑、捕猎、休息等等）。\n\n在实际开发中，对象是一个抽象的概念，可以将其简单理解为：**数据集或功能集**。\n\nECMAScript-262 把对象定义为：**无序属性的集合，其属性可以包含基本值、对象或者函数**。\n严格来讲，这就相当于说对象是一组没有特定顺序的值。对象的每个属性或方法都有一个名字，而每个名字都\n映射到一个值。\n\n<p class=\"tip\">\n  提示：每个对象都是基于一个引用类型创建的，这些类型可以是系统内置的原生类型，也可以是开发人员自定义的类型。\n</p>\n\n#### 什么是面向对象\n\n> 面向对象不是新的东西，它只是过程式代码的一种高度封装，目的在于提高代码的开发效率和可维护性。\n\n<img src=\"/media/664ba37eeee9f4623c06c066867f1d38_r.jpg\" width=\"400\" alt=\"\">\n\n面向对象编程 —— Object Oriented Programming，简称 OOP ，是一种编程开发思想。\n它将真实世界各种复杂的关系，抽象为一个个对象，然后由对象之间的分工与合作，完成对真实世界的模拟。\n\n在面向对象程序开发思想中，每一个对象都是功能中心，具有明确分工，可以完成接受信息、处理数据、发出信息等任务。\n因此，面向对象编程具有灵活、代码可复用、高度模块化等特点，容易维护和开发，比起由一系列函数或指令组成的传统的过程式编程（procedural programming），更适合多人合作的大型软件项目。\n\n面向对象与面向过程：\n\n- 面向过程就是亲力亲为，事无巨细，面面俱到，步步紧跟，有条不紊\n- 面向对象就是找一个对象，指挥得结果\n- 面向对象将执行者转变成指挥者\n- 面向对象不是面向过程的替代，而是面向过程的封装\n\n面向对象的特性：\n\n- 封装性\n- 继承性\n- [多态性]\n\n扩展阅读：\n\n- [维基百科 - 面向对象程序设计](https://zh.wikipedia.org/wiki/%E9%9D%A2%E5%90%91%E5%AF%B9%E8%B1%A1%E7%A8%8B%E5%BA%8F%E8%AE%BE%E8%AE%A1)\n- [知乎：如何用一句话说明什么是面向对象思想？](https://www.zhihu.com/question/19854505)\n- [知乎：什么是面向对象编程思想？](https://www.zhihu.com/question/31021366)\n\n#### 程序中面向对象的基本体现\n\n在 JavaScript 中，所有数据类型都可以视为对象，当然也可以自定义对象。\n自定义的对象数据类型就是面向对象中的类（ Class ）的概念。\n\n我们以一个例子来说明面向过程和面向对象在程序流程上的不同之处。\n\n假设我们要处理学生的成绩表，为了表示一个学生的成绩，面向过程的程序可以用一个对象表示：\n\n```javascript\nvar std1 = { name: 'Michael', score: 98 }\nvar std2 = { name: 'Bob', score: 81 }\n```\n\n而处理学生成绩可以通过函数实现，比如打印学生的成绩：\n\n```javascript\nfunction printScore (student) {\n  console.log('姓名：' + student.name + '  ' + '成绩：' + student.score)\n}\n```\n\n如果采用面向对象的程序设计思想，我们首选思考的不是程序的执行流程，\n而是 `Student` 这种数据类型应该被视为一个对象，这个对象拥有 `name` 和 `score` 这两个属性（Property）。\n如果要打印一个学生的成绩，首先必须创建出这个学生对应的对象，然后，给对象发一个 `printScore` 消息，让对象自己把自己的数据打印出来。\n\n抽象数据行为模板（Class）：\n\n```javascript\nfunction Student (name, score) {\n  this.name = name\n  this.score = score\n}\n\nStudent.prototype.printScore = function () {\n  console.log('姓名：' + this.name + '  ' + '成绩：' + this.score)\n}\n```\n\n根据模板创建具体实例对象（Instance）：\n\n```javascript\nvar std1 = new Student('Michael', 98)\nvar std2 = new Student('Bob', 81)\n```\n\n实例对象具有自己的具体行为（给对象发消息）：\n\n```javascript\nstd1.printScore() // => 姓名：Michael  成绩：98\nstd2.printScore() // => 姓名：Bob  成绩 81\n```\n\n面向对象的设计思想是从自然界中来的，因为在自然界中，类（Class）和实例（Instance）的概念是很自然的。\nClass 是一种抽象概念，比如我们定义的 Class——Student ，是指学生这个概念，\n而实例（Instance）则是一个个具体的 Student ，比如， Michael 和 Bob 是两个具体的 Student 。\n\n所以，面向对象的设计思想是：\n\n- 抽象出 Class\n- 根据 Class 创建 Instance\n- 指挥 Instance 得结果\n\n面向对象的抽象程度又比函数要高，因为一个 Class 既包含数据，又包含操作数据的方法。\n\n### 创建对象\n\n#### 简单方式\n\n我们可以直接通过 `new Object()` 创建：\n\n```javascript\nvar person = new Object()\nperson.name = 'Jack'\nperson.age = 18\n\nperson.sayName = function () {\n  console.log(this.name)\n}\n```\n\n每次创建通过 `new Object()` 比较麻烦，所以可以通过它的简写形式对象字面量来创建：\n\n```javascript\nvar person = {\n  name: 'Jack',\n  age: 18,\n  sayName: function () {\n    console.log(this.name)\n  }\n}\n```\n\n对于上面的写法固然没有问题，但是假如我们要生成两个 `person` 实例对象呢？\n\n```javascript\nvar person1 = {\n  name: 'Jack',\n  age: 18,\n  sayName: function () {\n    console.log(this.name)\n  }\n}\n\nvar person2 = {\n  name: 'Mike',\n  age: 16,\n  sayName: function () {\n    console.log(this.name)\n  }\n}\n```\n\n通过上面的代码我们不难看出，这样写的代码太过冗余，重复性太高。\n\n#### 简单方式的改进：工厂函数\n\n我们可以写一个函数，解决代码重复问题：\n\n```javascript\nfunction createPerson (name, age) {\n  return {\n    name: name,\n    age: age,\n    sayName: function () {\n      console.log(this.name)\n    }\n  }\n}\n```\n\n然后生成实例对象：\n\n```javascript\nvar p1 = createPerson('Jack', 18)\nvar p2 = createPerson('Mike', 18)\n```\n\n这样封装确实爽多了，通过工厂模式我们解决了创建多个相似对象代码冗余的问题，\n但却没有解决对象识别的问题（即怎样知道一个对象的类型）。\n\n### 构造函数\n\n内容引导：\n\n- 构造函数语法\n- 分析构造函数\n- 构造函数和实例对象的关系\n  + 实例的 constructor 属性\n  + instanceof 操作符\n- 普通函数调用和构造函数调用的区别\n- 构造函数的返回值\n- 构造函数的静态成员和实例成员\n  + 函数也是对象\n  + 实例成员\n  + 静态成员\n- 构造函数的问题\n\n#### 更优雅的工厂函数：构造函数\n\n一种更优雅的工厂函数就是下面这样，构造函数：\n\n```javascript\nfunction Person (name, age) {\n  this.name = name\n  this.age = age\n  this.sayName = function () {\n    console.log(this.name)\n  }\n}\n\nvar p1 = new Person('Jack', 18)\np1.sayName() // => Jack\n\nvar p2 = new Person('Mike', 23)\np2.sayName() // => Mike\n```\n\n#### 解析构造函数代码的执行\n\n在上面的示例中，`Person()` 函数取代了 `createPerson()` 函数，但是实现效果是一样的。\n这是为什么呢？\n\n我们注意到，`Person()` 中的代码与 `createPerson()` 有以下几点不同之处：\n\n- 没有显示的创建对象\n- 直接将属性和方法赋给了 `this` 对象\n- 没有 `return` 语句\n- 函数名使用的是大写的 `Person`\n\n而要创建 `Person` 实例，则必须使用 `new` 操作符。\n以这种方式调用构造函数会经历以下 4 个步骤：\n\n1. 创建一个新对象\n2. 将构造函数的作用域赋给新对象（因此 this 就指向了这个新对象）\n3. 执行构造函数中的代码\n4. 返回新对象\n\n下面是具体的伪代码：\n\n```javascript\nfunction Person (name, age) {\n  // 当使用 new 操作符调用 Person() 的时候，实际上这里会先创建一个对象\n  // var instance = {}\n  // 然后让内部的 this 指向 instance 对象\n  // this = instance\n  // 接下来所有针对 this 的操作实际上操作的就是 instance\n\n  this.name = name\n  this.age = age\n  this.sayName = function () {\n    console.log(this.name)\n  }\n\n  // 在函数的结尾处会将 this 返回，也就是 instance\n  // return this\n}\n```\n\n#### 构造函数和实例对象的关系\n\n使用构造函数的好处不仅仅在于代码的简洁性，更重要的是我们可以识别对象的具体类型了。\n在每一个实例对象中的\\__proto\\__中同时有一个 `constructor` 属性，该属性指向创建该实例的构造函数：\n\n```javascript\nconsole.log(p1.constructor === Person) // => true\nconsole.log(p2.constructor === Person) // => true\nconsole.log(p1.constructor === p2.constructor) // => true\n```\n\n对象的 `constructor` 属性最初是用来标识对象类型的，\n但是，如果要检测对象的类型，还是使用 `instanceof` 操作符更可靠一些：\n\n```javascript\nconsole.log(p1 instanceof Person) // => true\nconsole.log(p2 instanceof Person) // => true\n```\n\n总结：\n\n- 构造函数是根据具体的事物抽象出来的抽象模板\n- 实例对象是根据抽象的构造函数模板得到的具体实例对象\n- 每一个实例对象都具有一个 `constructor` 属性，指向创建该实例的构造函数\n  + 注意： `constructor` 是实例的属性的说法不严谨，具体后面的原型会讲到\n- 可以通过实例的 `constructor` 属性判断实例和构造函数之间的关系\n  + 注意：这种方式不严谨，推荐使用 `instanceof` 操作符，后面学原型会解释为什么\n\n#### 构造函数的问题\n\n使用构造函数带来的最大的好处就是创建对象更方便了，但是其本身也存在一个浪费内存的问题：\n\n```javascript\nfunction Person (name, age) {\n  this.name = name\n  this.age = age\n  this.type = 'human'\n  this.sayHello = function () {\n    console.log('hello ' + this.name)\n  }\n}\n\nvar p1 = new Person('lpz', 18)\nvar p2 = new Person('Jack', 16)\n```\n\n在该示例中，从表面上好像没什么问题，但是实际上这样做，有一个很大的弊端。\n那就是对于每一个实例对象，`type` 和 `sayHello` 都是一模一样的内容，\n每一次生成一个实例，都必须为重复的内容，多占用一些内存，如果实例对象很多，会造成极大的内存浪费。\n\n```javascript\nconsole.log(p1.sayHello === p2.sayHello) // => false\n```\n\n对于这种问题我们可以把需要共享的函数定义到构造函数外部：\n\n```javascript\nfunction sayHello = function () {\n  console.log('hello ' + this.name)\n}\n\nfunction Person (name, age) {\n  this.name = name\n  this.age = age\n  this.type = 'human'\n  this.sayHello = sayHello\n}\n\nvar p1 = new Person('lpz', 18)\nvar p2 = new Person('Jack', 16)\n\nconsole.log(p1.sayHello === p2.sayHello) // => true\n```\n\n这样确实可以了，但是如果有多个需要共享的函数的话就会造成全局命名空间冲突的问题。\n\n你肯定想到了可以把多个函数放到一个对象中用来避免全局命名空间冲突的问题：\n\n```javascript\nvar fns = {\n  sayHello: function () {\n    console.log('hello ' + this.name)\n  },\n  sayAge: function () {\n    console.log(this.age)\n  }\n}\n\nfunction Person (name, age) {\n  this.name = name\n  this.age = age\n  this.type = 'human'\n  this.sayHello = fns.sayHello\n  this.sayAge = fns.sayAge\n}\n\nvar p1 = new Person('lpz', 18)\nvar p2 = new Person('Jack', 16)\n\nconsole.log(p1.sayHello === p2.sayHello) // => true\nconsole.log(p1.sayAge === p2.sayAge) // => true\n```\n\n至此，我们利用自己的方式基本上解决了构造函数的内存浪费问题。\n但是代码看起来还是那么的格格不入，那有没有更好的方式呢？\n\n#### 小结\n\n- 构造函数语法\n- 分析构造函数\n- 构造函数和实例对象的关系\n  + 实例的 constructor 属性\n  + instanceof 操作符\n- 构造函数的问题\n\n### 原型\n\n内容引导：\n\n- 使用 prototype 原型对象解决构造函数的问题\n- 分析 构造函数、prototype 原型对象、实例对象 三者之间的关系\n- 属性成员搜索原则：原型链\n- 实例对象读写原型对象中的成员\n- 原型对象的简写形式\n- 原生对象的原型\n  + Object\n  + Array\n  + String\n  + ...\n- 原型对象的问题\n- 构造的函数和原型对象使用建议\n\n#### 更好的解决方案： `prototype`\n\nJavascript 规定，每一个构造函数都有一个 `prototype` 属性，指向另一个对象。\n这个对象的所有属性和方法，都会被构造函数的实例继承。\n\n这也就意味着，我们可以把所有对象实例需要共享的属性和方法直接定义在 `prototype` 对象上。\n\n```javascript\nfunction Person (name, age) {\n  this.name = name\n  this.age = age\n}\n\nconsole.log(Person.prototype)\n\nPerson.prototype.type = 'human'\n\nPerson.prototype.sayName = function () {\n  console.log(this.name)\n}\n\nvar p1 = new Person(...)\nvar p2 = new Person(...)\n\nconsole.log(p1.sayName === p2.sayName) // => true\n```\n\n这时所有实例的 `type` 属性和 `sayName()` 方法，\n其实都是同一个内存地址，指向 `prototype` 对象，因此就提高了运行效率。\n\n#### 构造函数、实例、原型三者之间的关系\n\n<img src=\"/media/构造函数-实例-原型之间的关系.png\" alt=\"\">\n\n任何函数都具有一个 `prototype` 属性，该属性是一个对象。\n\n```javascript\nfunction F () {}\nconsole.log(F.prototype) // => object\n\nF.prototype.sayHi = function () {\n  console.log('hi!')\n}\n```\n\n构造函数的 `prototype` 对象默认都有一个 `constructor` 属性，指向 `prototype` 对象所在函数。\n\n```javascript\nconsole.log(F.constructor === F) // => true\n```\n\n通过构造函数得到的实例对象内部会包含一个指向构造函数的 `prototype` 对象的指针 `__proto__`。\n\n```javascript\nvar instance = new F()\nconsole.log(instance.__proto__ === F.prototype) // => true\n```\n\n<p class=\"tip\">\n  `__proto__` 是非标准属性。\n</p>\n\n实例对象可以直接访问原型对象成员。\n\n```javascript\ninstance.sayHi() // => hi!\n```\n\n总结：\n\n- 任何函数都具有一个 `prototype` 属性，该属性是一个对象\n- 构造函数的 `prototype` 对象默认都有一个 `constructor` 属性，指向 `prototype` 对象所在函数\n- 通过构造函数得到的实例对象内部会包含一个指向构造函数的 `prototype` 对象的指针 `__proto__`\n- 所有实例都直接或间接继承了原型对象的成员\n\n#### 属性成员的搜索原则：原型链\n\n了解了 **构造函数-实例-原型对象** 三者之间的关系后，接下来我们来解释一下为什么实例对象可以访问原型对象中的成员。\n\n每当代码读取某个对象的某个属性时，都会执行一次搜索，目标是具有给定名字的属性\n\n- 搜索首先从对象实例本身开始\n- 如果在实例中找到了具有给定名字的属性，则返回该属性的值\n- 如果没有找到，则继续搜索指针指向的原型对象，在原型对象中查找具有给定名字的属性\n- 如果在原型对象中找到了这个属性，则返回该属性的值\n\n也就是说，在我们调用 `person1.sayName()` 的时候，会先后执行两次搜索：\n\n- 首先，解析器会问：“实例 person1 有 sayName 属性吗？”答：“没有。\n- ”然后，它继续搜索，再问：“ person1 的原型有 sayName 属性吗？”答：“有。\n- ”于是，它就读取那个保存在原型对象中的函数。\n- 当我们调用 person2.sayName() 时，将会重现相同的搜索过程，得到相同的结果。\n\n而这正是多个对象实例共享原型所保存的属性和方法的基本原理。\n\n总结：\n\n- 先在自己身上找，找到即返回\n- 自己身上找不到，则沿着原型链向上查找，找到即返回\n- 如果一直到原型链的末端还没有找到，则返回 `undefined`\n\n#### 实例对象读写原型对象成员\n\n读取：\n\n- 先在自己身上找，找到即返回\n- 自己身上找不到，则沿着原型链向上查找，找到即返回\n- 如果一直到原型链的末端还没有找到，则返回 `undefined`\n\n值类型成员写入（`实例对象.值类型成员 = xx`）：\n\n- 当实例期望重写原型对象中的某个普通数据成员时实际上会把该成员添加到自己身上\n- 也就是说该行为实际上会屏蔽掉对原型对象成员的访问\n\n引用类型成员写入（`实例对象.引用类型成员 = xx`）：\n\n- 同上\n\n复杂类型修改（`实例对象.成员.xx = xx`）：\n\n- 同样会先在自己身上找该成员，如果自己身上找到则直接修改\n- 如果自己身上找不到，则沿着原型链继续查找，如果找到则修改\n- 如果一直到原型链的末端还没有找到该成员，则报错（`实例对象.undefined.xx = xx`）\n\n#### 更简单的原型语法\n\n我们注意到，前面例子中每添加一个属性和方法就要敲一遍 `Person.prototype` 。\n为减少不必要的输入，更常见的做法是用一个包含所有属性和方法的对象字面量来重写整个原型对象：\n\n```javascript\nfunction Person (name, age) {\n  this.name = name\n  this.age = age\n}\n\nPerson.prototype = {\n  type: 'human',\n  sayHello: function () {\n    console.log('我叫' + this.name + '，我今年' + this.age + '岁了')\n  }\n}\n```\n\n在该示例中，我们将 `Person.prototype` 重置到了一个新的对象。\n这样做的好处就是为 `Person.prototype` 添加成员简单了，但是也会带来一个问题，那就是原型对象丢失了 `constructor` 成员。\n\n所以，我们为了保持 `constructor` 的指向正确，建议的写法是：\n\n```javascript\nfunction Person (name, age) {\n  this.name = name\n  this.age = age\n}\n\nPerson.prototype = {\n  constructor: Person, // => 手动将 constructor 指向正确的构造函数\n  type: 'human',\n  sayHello: function () {\n    console.log('我叫' + this.name + '，我今年' + this.age + '岁了')\n  }\n}\n```\n\n#### 原生对象的原型\n\n<p class=\"tip\">\n  所有函数都有 prototype 属性对象。\n</p>\n\n- Object.prototype\n- Function.prototype\n- Array.prototype\n- String.prototype\n- Number.prototype\n- Date.prototype\n- ...\n\n练习：为数组对象和字符串对象扩展原型方法。\n\n#### 原型对象的问题\n\n- 共享数组\n- 共享对象\n\n如果真的希望可以被实例对象之间共享和修改这些共享数据那就不是问题。但是如果不希望实例之间共享和修改这些共享数据则就是问题。\n\n一个更好的建议是，最好不要让实例之间互相共享这些数组或者对象成员，一旦修改的话会导致数据的走向很不明确而且难以维护。\n\n#### 原型对象使用建议\n\n- 私有成员（一般就是非函数成员）放到构造函数中\n- 共享成员（一般就是函数）放到原型对象中\n- 如果重置了 `prototype` 记得修正 `constructor` 的指向\n\n### 案例：随机方块\n\n---\n\n## 面向对象游戏案例：贪吃蛇\n\n案例相关源码以上传到 GitHub ：https://github.com/lipengzhou/new-snake\n\n### 案例介绍\n\n#### 游戏演示\n\n在线演示地址：[贪吃蛇](https://lipengzhou.github.io/new-snake/)\n\n#### 案例目标\n\n游戏的目的是用来体会js高级语法的使用 不需要具备抽象对象的能力，使用面向对象的方式分析问题，需要一个漫长的过程。\n\n### 功能实现\n\n#### 搭建页面\n\n放一个容器盛放游戏场景 div#map，设置样式\n\n```css\n#map {\n  width: 800px;\n  height: 600px;\n  background-color: #ccc;\n  position: relative;\n}\n```\n\n#### 分析对象\n\n- 游戏对象\n- 蛇对象\n- 食物对象\n\n#### 创建食物对象\n\n- Food\n\n  - 属性\n\n    - x       \n    - y\n    - width\n    - height\n    - color       \n\n  - 方法\n\n    - render       随机创建一个食物对象，并输出到map上\n\n- 创建Food的构造函数，并设置属性\n\n```js\nvar position = 'absolute';\nvar elements = [];\nfunction Food(x, y, width, height, color) {\n  this.x = x || 0;\n  this.y = y || 0;\n  // 食物的宽度和高度(像素)\n  this.width = width || 20;\n  this.height = height || 20;\n  // 食物的颜色\n  this.color = color || 'green';\n}\n```\n\n- 通过原型设置render方法，实现随机产生食物对象，并渲染到map上\n\n```js\nFood.prototype.render = function (map) {\n  // 随机食物的位置，map.宽度/food.宽度，总共有多少分food的宽度，随机一下。然后再乘以food的宽度\n  this.x = parseInt(Math.random() * map.offsetWidth / this.width) * this.width;\n  this.y = parseInt(Math.random() * map.offsetHeight / this.height) * this.height;\n\n  // 动态创建食物对应的div\n  var div = document.createElement('div');\n  map.appendChild(div);\n  div.style.position = position;\n  div.style.left = this.x + 'px';\n  div.style.top = this.y + 'px';\n  div.style.width = this.width + 'px';\n  div.style.height = this.height + 'px';\n  div.style.backgroundColor = this.color;\n  elements.push(div);\n}\n```\n\n- 通过自调用函数，进行封装，通过window暴露Food对象\n\n```js\nwindow.Food = Food;\n```\n\n#### 创建蛇对象\n\n\n- Snake\n\n- 属性\n\n  - width    蛇节的宽度 默认20\n  - height   蛇节的高度 默认20\n  - body     数组，蛇的头部和身体，第一个位置是蛇头\n  - direction    蛇运动的方向  默认right  可以是 left  top bottom\n\n- 方法\n\n  - render  把蛇渲染到map上\n\n- Snake构造函数\n\n```js\nvar position = 'absolute';\nvar elements = [];\nfunction Snake(width, height, direction) {\n  // 设置每一个蛇节的宽度\n  this.width = width || 20;\n  this.height = height || 20;\n  // 蛇的每一部分, 第一部分是蛇头\n  this.body = [\n    {x: 3, y: 2, color: 'red'},\n    {x: 2, y: 2, color: 'red'},\n    {x: 1, y: 2, color: 'red'}\n  ];\n  this.direction = direction || 'right';\n}\n```\n\n- render方法\n\n```js\nSnake.prototype.render = function(map) {\n  for(var i = 0; i < this.body.length; i++) {\n    var obj = this.body[i];\n    var div = document.createElement('div');\n    map.appendChild(div);\n    div.style.left = obj.x * this.width + 'px';\n    div.style.top = obj.y * this.height + 'px';\n    div.style.position = position;\n    div.style.backgroundColor = obj.color;\n    div.style.width = this.width + 'px';\n    div.style.height = this.height + 'px';\n  }\n}\n```\n\n- 在自调用函数中暴露Snake对象\n\n```js\nwindow.Snake = Snake;\n```\n\n#### 创建游戏对象\n\n游戏对象，用来管理游戏中的所有对象和开始游戏\n\n- Game\n\n  - 属性\n\n    - food\n\n    - snake\n\n    - map\n\n  - 方法\n\n    - start            开始游戏（绘制所有游戏对象）\n\n\n\n- 构造函数\n\n```js\nfunction Game(map) {\n  this.food = new Food();\n  this.snake = new Snake();\n  this.map = map;\n}\n```\n\n- 开始游戏，渲染食物对象和蛇对象\n\n```js\nGame.prototype.start = function () {\n  this.food.render(this.map);\n  this.snake.render(this.map);\n}\n```\n\n### 游戏的逻辑\n\n#### 写蛇的move方法\n\n- 在蛇对象(snake.js)中，在Snake的原型上新增move方法\n\n1. 让蛇移动起来，把蛇身体的每一部分往前移动一下\n2. 蛇头部分根据不同的方向决定 往哪里移动\n\n```js\nSnake.prototype.move = function (food, map) {\n  // 让蛇身体的每一部分往前移动一下\n  var i = this.body.length - 1;\n  for(; i > 0; i--) {\n    this.body[i].x = this.body[i - 1].x;\n    this.body[i].y = this.body[i - 1].y;\n  }\n  // 根据移动的方向，决定蛇头如何处理\n  switch(this.direction) {\n    case 'left': \n      this.body[0].x -= 1;\n      break;\n    case 'right':\n      this.body[0].x += 1;\n      break;\n    case 'top':\n      this.body[0].y -= 1;\n      break;\n    case 'bottom':\n      this.body[0].y += 1;\n      break;\n  }\n}\n```\n\n- 在game中测试\n\n```js\nthis.snake.move(this.food, this.map);\nthis.snake.render(this.map);\n```\n\n#### 让蛇自己动起来\n\n- 私有方法\n\n    ```\n    什么是私有方法？\n      不能被外部访问的方法\n    如何创建私有方法？\n      使用自调用函数包裹\n    ```\n\n- 在game.js中 添加runSnake的私有方法，开启定时器调用蛇的move和render方法，让蛇动起来\n- 判断蛇是否撞墙\n\n```js\nfunction runSnake() {\n  var timerId = setInterval(function() {\n    this.snake.move(this.food, this.map);\n    // 在渲染前，删除之前的蛇\n    this.snake.render(this.map);\n\n    // 判断蛇是否撞墙\n    var maxX = this.map.offsetWidth / this.snake.width;\n    var maxY = this.map.offsetHeight / this.snake.height;\n    var headX = this.snake.body[0].x;\n    var headY = this.snake.body[0].y;\n    if (headX < 0 || headX >= maxX) {\n      clearInterval(timerId);\n      alert('Game Over');\n    }\n\n    if (headY < 0 || headY >= maxY) {\n      clearInterval(timerId);\n      alert('Game Over');\n    }\n\n  }.bind(that), 150);\n}\n```\n\n- 在snake中添加删除蛇的私有方法，在render中调用\n\n```js\nfunction remove() {\n  // 删除渲染的蛇\n  var i = elements.length - 1;\n  for(; i >= 0; i--) {\n    // 删除页面上渲染的蛇\n    elements[i].parentNode.removeChild(elements[i]);\n    // 删除elements数组中的元素\n    elements.splice(i, 1);\n  }\n}\n```\n\n- 在game中通过键盘控制蛇的移动方向\n\n```js\nfunction bindKey() {\n  document.addEventListener('keydown', function(e) {\n    switch (e.keyCode) {\n      case 37:\n        // left\n        this.snake.direction = 'left';\n        break;\n      case 38:\n        // top\n        this.snake.direction = 'top';\n        break;\n      case 39:\n        // right\n        this.snake.direction = 'right';\n        break;\n      case 40:\n        // bottom\n        this.snake.direction = 'bottom';\n        break;\n    }\n  }.bind(that), false);\n}\n```\n\n- 在start方法中调用\n\n```js\nbindKey();\n```\n\n#### 判断蛇是否吃到食物\n\n```js\n// 在Snake的move方法中\n\n// 在移动的过程中判断蛇是否吃到食物\n// 如果蛇头和食物的位置重合代表吃到食物\n// 食物的坐标是像素，蛇的坐标是几个宽度，进行转换\nvar headX = this.body[0].x * this.width;\nvar headY = this.body[0].y * this.height;\nif (headX === food.x && headY === food.y) {\n  // 吃到食物，往蛇节的最后加一节\n  var last = this.body[this.body.length - 1];\n  this.body.push({\n    x: last.x,\n    y: last.y,\n    color: last.color\n  })\n  // 把现在的食物对象删除，并重新随机渲染一个食物对象\n  food.render(map);\n}\n```\n\n### 其它处理\n\n#### 把html中的js代码放到index.js中\n\n避免html中出现js代码\n\n#### 自调用函数的参数\n\n```js\n(function (window, undefined) {\n  var document = window.document;\n\n}(window, undefined))\n```\n\n- 传入window对象\n\n将来代码压缩的时候，可以吧 function (window)  压缩成 function (w)\n\n- 传入undefined\n\n在将来会看到别人写的代码中会把undefined作为函数的参数(当前案例没有使用)\n因为在有的老版本的浏览器中 undefined可以被重新赋值，防止undefined 被重新赋值\n\n#### 整理代码\n\n现在的代码结构清晰，谁出问题就找到对应的js文件即可。\n通过自调用函数，已经防止了变量命名污染的问题\n\n但是，由于js文件数较多，需要在页面上引用，会产生文件依赖的问题(先引入那个js，再引入哪个js)\n将来通过工具把js文件合并并压缩。现在手工合并js文件演示\n\n- 问题1\n\n```js\n// 如果存在多个自调用函数要用分号分割，否则语法错误\n// 下面代码会报错\n(function () {\n}())\n\n(function () {\n}())\n// 所以代码规范中会建议在自调用函数之前加上分号\n// 下面代码没有问题\n;(function () {\n}())\n\n;(function () {\n}())\n```\n\n- 问题2 \n\n```js\n// 当自调用函数 前面有函数声明时，会把自调用函数作为参数\n// 所以建议自调用函数前，加上;\nvar a = function () {\n  alert('11');\n}\n    \n(function () {\n  alert('22');\n}())\n```\n\n---\n\n## 继承\n\n### 什么是继承\n\n- 现实生活中的继承\n- 程序中的继承\n\n### 构造函数的属性继承：借用构造函数\n\n```javascript\nfunction Person (name, age) {\n  this.type = 'human'\n  this.name = name\n  this.age = age\n}\n\nfunction Student (name, age) {\n  // 借用构造函数继承属性成员\n  Person.call(this, name, age)\n}\n\nvar s1 = Student('张三', 18)\nconsole.log(s1.type, s1.name, s1.age) // => human 张三 18\n```\n\n### 构造函数的原型方法继承：拷贝继承（for-in）\n\n```javascript\nfunction Person (name, age) {\n  this.type = 'human'\n  this.name = name\n  this.age = age\n}\n\nPerson.prototype.sayName = function () {\n  console.log('hello ' + this.name)\n}\n\nfunction Student (name, age) {\n  Person.call(this, name, age)\n}\n\n// 原型对象拷贝继承原型对象成员\nfor(var key in Person.prototype) {\n  Student.prototype[key] = Person.prototype[key]\n}\n\nvar s1 = Student('张三', 18)\n\ns1.sayName() // => hello 张三\n```\n\n### 另一种继承方式：原型继承\n\n```javascript\nfunction Person (name, age) {\n  this.type = 'human'\n  this.name = name\n  this.age = age\n}\n\nPerson.prototype.sayName = function () {\n  console.log('hello ' + this.name)\n}\n\nfunction Student (name, age) {\n  Person.call(this, name, age)\n}\n\n// 利用原型的特性实现继承\nStudent.prototype = new Person()\n\nvar s1 = Student('张三', 18)\n\nconsole.log(s1.type) // => human\n\ns1.sayName() // => hello 张三\n```\n\n---\n\n## 函数进阶\n\n### 函数的定义方式\n\n- 函数声明\n- 函数表达式\n- `new Function`\n\n#### 函数声明\n\n```javascript\nfunction foo () {\n\n}\n```\n\n#### 函数表达式\n\n```javascript\nvar foo = function () {\n\n}\n```\n\n#### 函数声明与函数表达式的区别\n\n- 函数声明必须有名字\n- 函数声明会函数提升，在预解析阶段就已创建，声明前后都可以调用\n- 函数表达式类似于变量赋值\n- 函数表达式可以没有名字，例如匿名函数\n- 函数表达式没有变量提升，在执行阶段创建，必须在表达式执行之后才可以调用\n\n下面是一个根据条件定义函数的例子：\n\n```javascript\nif (true) {\n  function f () {\n    console.log(1)\n  }\n} else {\n  function f () {\n    console.log(2)\n  }\n}\n```\n\n以上代码执行结果在不同浏览器中结果不一致。\n\n不过我们可以使用函数表达式解决上面的问题：\n\n```javascript\nvar f\n\nif (true) {\n  f = function () {\n    console.log(1)\n  }\n} else {\n  f = function () {\n    console.log(2)\n  }\n}\n```\n\n### 函数的调用方式\n\n- 普通函数\n- 构造函数\n- 对象方法\n\n### 函数内 `this` 指向的不同场景\n\n函数的调用方式决定了 `this` 指向的不同：\n\n| 调用方式   | 非严格模式   | 备注                |\n| ------ | ------- | ----------------- |\n| 普通函数调用 | window  | 严格模式下是 undefined  |\n| 构造函数调用 | 实例对象    | 原型方法中 this 也是实例对象 |\n| 对象方法调用 | 该方法所属对象 | 紧挨着的对象            |\n| 事件绑定方法 | 绑定事件对象  |                   |\n| 定时器函数  | window  |                   |\n\n这就是对函数内部 this 指向的基本整理，写代码写多了自然而然就熟悉了。\n\n### 函数也是对象\n\n- 所有函数都是 `Function` 的实例\n\n### call、apply、bind\n\n那了解了函数 this 指向的不同场景之后，我们知道有些情况下我们为了使用某种特定环境的 this 引用，\n这时候时候我们就需要采用一些特殊手段来处理了，例如我们经常在定时器外部备份 this 引用，然后在定时器函数内部使用外部 this 的引用。\n然而实际上对于这种做法我们的 JavaScript 为我们专门提供了一些函数方法用来帮我们更优雅的处理函数内部 this 指向问题。\n这就是接下来我们要学习的 call、apply、bind 三个函数方法。\n\n#### call\n\n`call()` 方法调用一个函数, 其具有一个指定的 `this` 值和分别地提供的参数(参数的列表)。\n\n<p class=\"danger\">\n  注意：该方法的作用和 `apply()` 方法类似，只有一个区别，就是 `call()` 方法接受的是若干个参数的列表，而 `apply()` 方法接受的是一个包含多个参数的数组。\n</p>\n\n语法：\n\n```javascript\nfun.call(thisArg[, arg1[, arg2[, ...]]])\n```\n\n参数：\n\n- `thisArg`\n  + 在 fun 函数运行时指定的 this 值\n  + 如果指定了 null 或者 undefined 则内部 this 指向 window\n\n- `arg1, arg2, ...`\n  + 指定的参数列表\n\n#### apply\n\n`apply()` 方法调用一个函数, 其具有一个指定的 `this` 值，以及作为一个数组（或类似数组的对象）提供的参数。\n\n<p class=\"danger\">\n  注意：该方法的作用和 `call()` 方法类似，只有一个区别，就是 `call()` 方法接受的是若干个参数的列表，而 `apply()` 方法接受的是一个包含多个参数的数组。\n</p>\n\n语法：\n\n```javascript\nfun.apply(thisArg, [argsArray])\n```\n\n参数：\n\n- `thisArg`\n- `argsArray`\n\n`apply()` 与 `call()` 非常相似，不同之处在于提供参数的方式。\n`apply()` 使用参数数组而不是一组参数列表。例如：\n\n```javascript\nfun.apply(this, ['eat', 'bananas'])\n```\n\n#### bind\n\nbind() 函数会创建一个新函数（称为绑定函数），新函数与被调函数（绑定函数的目标函数）具有相同的函数体（在 ECMAScript 5 规范中内置的call属性）。\n当目标函数被调用时 this 值绑定到 bind() 的第一个参数，该参数不能被重写。绑定函数被调用时，bind() 也接受预设的参数提供给原函数。\n一个绑定函数也能使用new操作符创建对象：这种行为就像把原函数当成构造器。提供的 this 值被忽略，同时调用时的参数被提供给模拟函数。\n\n语法：\n\n```javascript\nfun.bind(thisArg[, arg1[, arg2[, ...]]])\n```\n\n参数：\n\n- thisArg\n  + 当绑定函数被调用时，该参数会作为原函数运行时的 this 指向。当使用new 操作符调用绑定函数时，该参数无效。\n\n- arg1, arg2, ...\n  + 当绑定函数被调用时，这些参数将置于实参之前传递给被绑定的方法。\n\n返回值：\n\n返回由指定的this值和初始化参数改造的原函数拷贝。\n\n示例1：\n\n```javascript\nthis.x = 9; \nvar module = {\n  x: 81,\n  getX: function() { return this.x; }\n};\n\nmodule.getX(); // 返回 81\n\nvar retrieveX = module.getX;\nretrieveX(); // 返回 9, 在这种情况下，\"this\"指向全局作用域\n\n// 创建一个新函数，将\"this\"绑定到module对象\n// 新手可能会被全局的x变量和module里的属性x所迷惑\nvar boundGetX = retrieveX.bind(module);\nboundGetX(); // 返回 81\n```\n\n示例2：\n\n```javascript\nfunction LateBloomer() {\n  this.petalCount = Math.ceil(Math.random() * 12) + 1;\n}\n\n// Declare bloom after a delay of 1 second\nLateBloomer.prototype.bloom = function() {\n  window.setTimeout(this.declare.bind(this), 1000);\n};\n\nLateBloomer.prototype.declare = function() {\n  console.log('I am a beautiful flower with ' +\n    this.petalCount + ' petals!');\n};\n\nvar flower = new LateBloomer();\nflower.bloom();  // 一秒钟后, 调用'declare'方法\n```\n\n#### 小结\n\n- call 和 apply 特性一样\n  + 都是用来调用函数，而且是立即调用\n  + 但是可以在调用函数的同时，通过第一个参数指定函数内部 `this` 的指向\n  + call 调用的时候，参数必须以参数列表的形式进行传递，也就是以逗号分隔的方式依次传递即可\n  + apply 调用的时候，参数必须是一个数组，然后在执行的时候，会将数组内部的元素一个一个拿出来，与形参一一对应进行传递\n  + 如果第一个参数指定了 `null` 或者 `undefined` 则内部 this 指向 window\n\n- bind\n  + 可以用来指定内部 this 的指向，然后生成一个改变了 this 指向的新的函数\n  + 它和 call、apply 最大的区别是：bind 不会调用\n  + bind 支持传递参数，它的传参方式比较特殊，一共有两个位置可以传递\n    * 1. 在 bind 的同时，以参数列表的形式进行传递\n    * 2. 在调用的时候，以参数列表的形式进行传递\n    * 那到底以谁 bind 的时候传递的参数为准呢还是以调用的时候传递的参数为准\n    * 两者合并：bind 的时候传递的参数和调用的时候传递的参数会合并到一起，传递到函数内部\n\n### 函数的其它成员\n\n- arguments\n  + 实参集合\n- caller\n  + 函数的调用者\n- length\n  + 形参的个数\n- name\n  + 函数的名称\n\n```javascript\nfunction fn(x, y, z) {\n  console.log(fn.length) // => 形参的个数\n  console.log(arguments) // 伪数组实参参数集合\n  console.log(arguments.callee === fn) // 函数本身\n  console.log(fn.caller) // 函数的调用者\n  console.log(fn.name) // => 函数的名字\n}\n\nfunction f() {\n  fn(10, 20, 30)\n}\n\nf()\n```\n\n### 高阶函数\n\n- 函数可以作为参数\n- 函数可以作为返回值\n\n#### 作为参数\n\n```javascript\nfunction eat (callback) {\n  setTimeout(function () {\n    console.log('吃完了')\n    callback()\n  }, 1000)\n}\n\neat(function () {\n  console.log('去唱歌')\n})\n```\n\n#### 作为返回值\n\n```javascript\nfunction genFun (type) {\n  return function (obj) {\n    return Object.prototype.toString.call(obj) === type\n  }\n}\n\nvar isArray = genFun('[object Array]')\nvar isObject = genFun('[object Object]')\n\nconsole.log(isArray([])) // => true\nconsole.log(isArray({})) // => true\n```\n\n### 函数闭包\n\n```javascript\nfunction fn () {\n  var count = 0\n  return {\n    getCount: function () {\n      console.log(count)\n    },\n    setCount: function () {\n      count++\n    }\n  }\n}\n\nvar fns = fn()\n\nfns.getCount() // => 0\nfns.setCount()\nfns.getCount() // => 1\n```\n\n#### 作用域、作用域链、预解析\n\n- 全局作用域\n- 函数作用域\n- **没有块级作用域**\n\n```javascript\n{\n  var foo = 'bar'\n}\n\nconsole.log(foo)\n\nif (true) {\n  var a = 123\n}\nconsole.log(a)\n```\n\n作用域链示例代码：\n\n```javascript\nvar a = 10\n\nfunction fn () {\n  var b = 20\n\n  function fn1 () {\n    var c = 30\n    console.log(a + b + c)\n  }\n\n  function fn2 () {\n    var d = 40\n    console.log(c + d)\n  }\n\n  fn1()\n  fn2()\n}\n```\n\n- 内层作用域可以访问外层作用域，反之不行\n\n#### 什么是闭包\n\n闭包就是能够读取其他函数内部变量的函数，\n由于在 Javascript 语言中，只有函数内部的子函数才能读取局部变量，\n因此可以把闭包简单理解成 “定义在一个函数内部的函数”。\n所以，在本质上，闭包就是将函数内部和函数外部连接起来的一座桥梁。\n\n闭包的用途：\n\n- 可以在函数外部读取函数内部成员\n- 让函数内成员始终存活在内存中\n\n#### 一些关于闭包的例子\n\n示例1：\n\n```javascript\nvar arr = [10, 20, 30]\nfor(var i = 0; i < arr.length; i++) {\n  arr[i] = function () {\n    console.log(i)\n  }\n}\n```\n\n示例2：\n\n```javascript\nconsole.log(111)\n\nfor(var i = 0; i < 3; i++) {\n  setTimeout(function () {\n    console.log(i)\n  }, 0)\n}\nconsole.log(222)\n```\n\n示例3：投票\n\n示例4：判断类型\n\n示例5：沙箱模式\n\n#### 闭包的思考题\n\n思考题 1：\n\n```javascript\nvar name = \"The Window\";\nvar object = {\n  name: \"My Object\",\n  getNameFunc: function () {\n    return function () {\n      return this.name;\n    };\n  }\n};\n\nconsole.log(object.getNameFunc()())\n```\n\n思考题 2：\n\n```javascript\nvar name = \"The Window\";　　\nvar object = {　　　　\n  name: \"My Object\",\n  getNameFunc: function () {\n    var that = this;\n    return function () {\n      return that.name;\n    };\n  }\n};\nconsole.log(object.getNameFunc()())\n```\n\n#### 小结\n\n### 函数递归\n\n#### 递归执行模型\n\n```javascript\nfunction fn1 () {\n  console.log(111)\n  fn2()\n  console.log('fn1')\n}\n\nfunction fn2 () {\n  console.log(222)\n  fn3()\n  console.log('fn2')\n}\n\nfunction fn3 () {\n  console.log(333)\n  fn4()\n  console.log('fn3')\n}\n\nfunction fn4 () {\n  console.log(444)\n  console.log('fn4')\n}\n\nfn1()\n```\n\n#### 举个栗子：计算阶乘的递归函数\n\n```javascript\nfunction factorial (num) {\n  if (num <= 1) {\n    return 1\n  } else {\n    return num * factorial(num - 1)\n  }\n}\n```\n\n#### 递归应用场景\n\n- 深拷贝\n- 菜单树\n- 遍历 DOM 树\n\n---\n\n## 正则表达式\n\n- 了解正则表达式基本语法\n- 能够使用JavaScript的正则对象\n\n### 正则表达式简介\n\n#### 什么是正则表达式\n\n正则表达式：用于匹配规律规则的表达式，正则表达式最初是科学家对人类神经系统的工作原理的早期研究，现在在编程语言中有广泛的应用。正则表通常被用来检索、替换那些符合某个模式(规则)的文本。\n正则表达式是对字符串操作的一种逻辑公式，就是用事先定义好的一些特定字符、及这些特定字符的组合，组成一个“规则字符串”，这个“规则字符串”用来表达对字符串的一种过滤逻辑。\n\n#### 正则表达式的作用\n\n1. 给定的字符串是否符合正则表达式的过滤逻辑(匹配)\n2. 可以通过正则表达式，从字符串中获取我们想要的特定部分(提取)\n3. 强大的字符串替换能力(替换)\n\n#### 正则表达式的特点\n\n1. 灵活性、逻辑性和功能性非常的强\n2. 可以迅速地用极简单的方式达到字符串的复杂控制\n3. 对于刚接触的人来说，比较晦涩难懂\n\n### 正则表达式的测试\n\n- [在线测试正则](https://c.runoob.com/front-end/854)\n- 工具中使用正则表达式\n  + sublime/vscode/word\n  + 演示替换所有的数字\n\n### 正则表达式的组成\n\n- 普通字符\n- 特殊字符(元字符)：正则表达式中有特殊意义的字符\n\n示例演示：\n\n- `\\d` 匹配数字\n- `ab\\d` 匹配 ab1、ab2\n\n### 元字符串\n\n通过测试工具演示下面元字符的使用\n\n#### 常用元字符串\n\n| 元字符  | 说明              |\n| ---- | --------------- |\n| \\d   | 匹配数字            |\n| \\D   | 匹配任意非数字的字符      |\n| \\w   | 匹配字母或数字或下划线     |\n| \\W   | 匹配任意不是字母，数字，下划线 |\n| \\s   | 匹配任意的空白符        |\n| \\S   | 匹配任意不是空白符的字符    |\n| .    | 匹配除换行符以外的任意单个字符 |\n| ^    | 表示匹配行首的文本(以谁开始) |\n| $    | 表示匹配行尾的文本(以谁结束) |\n\n#### 限定符\n\n| 限定符   | 说明       |\n| ----- | -------- |\n| *     | 重复零次或更多次 |\n| +     | 重复一次或更多次 |\n| ?     | 重复零次或一次  |\n| {n}   | 重复n次     |\n| {n,}  | 重复n次或更多次 |\n| {n,m} | 重复n到m次   |\n\n#### 其它\n\n```\n[] 字符串用中括号括起来，表示匹配其中的任一字符，相当于或的意思\n[^]  匹配除中括号以内的内容\n\\ 转义符\n| 或者，选择两者中的一个。注意|将左右两边分为两部分，而不管左右两边有多长多乱\n() 从两个直接量中选择一个，分组\n   eg：gr(a|e)y匹配gray和grey\n[\\u4e00-\\u9fa5]  匹配汉字\n```\n\n### 案例\n\n验证手机号：\n\n```javascript\n^\\d{11}$\n```\n\n验证邮编：\n\n```javascript\n^\\d{6}$\n```\n\n验证日期 2012-5-01\n\n```javascript\n^\\d{4}-\\d{1,2}-\\d{1,2}$\n```\n\n验证邮箱 xxx@itcast.cn：\n\n```javascript\n^\\w+@\\w+\\.\\w+$\n```\n\n验证IP地址 192.168.1.10\n\n```javascript\n^\\d{1,3}\\(.\\d{1,3}){3}$\n```\n\n## JavaScript 中使用正则表达式\n\n### 创建正则对象\n\n方式1：\n\n```javascript\nvar reg = new Regex('\\d', 'i');\nvar reg = new Regex('\\d', 'gi');\n```\n\n方式2：\n\n```javascript\nvar reg = /\\d/i;\nvar reg = /\\d/gi;\n```\n\n#### 参数\n\n| 标志   | 说明         |\n| ---- | ---------- |\n| i    | 忽略大小写      |\n| g    | 全局匹配       |\n| gi   | 全局匹配+忽略大小写 |\n\n### 正则匹配\n\n```javascript\n// 匹配日期\nvar dateStr = '2015-10-10';\nvar reg = /^\\d{4}-\\d{1,2}-\\d{1,2}$/\nconsole.log(reg.test(dateStr));\n```\n###匹配正则表达式\n//        console.log(/./.test(\"除了回车换行以为的任意字符\"));//true\n//        console.log(/.*/.test(\"0个到多个\"));//true\n//        console.log(/.+/.test(\"1个到多个\"));//true\n//        console.log(/.?/.test(\"哈哈\"));//true\n//        console.log(/[0-9]/.test(\"9527\"));//true\n//        console.log(/[a-z]/.test(\"what\"));//true\n//        console.log(/[A-Z]/.test(\"Are\"));//true\n//        console.log(/[a-zA-Z]/.test(\"干啥子\"));//false\n//        console.log(/[0-9a-zA-Z]/.test(\"9ebg\"));//true\n//        console.log(/b|(ara)/.test(\"abra\"));//true\n//        console.log(/[a-z]{2,3}/.test(\"arfsf\"));//true\n\n\n        console.log(/\\d/.test(\"998\"));//true\n        console.log(/\\d*/.test(\"998\"));//true\n        console.log(/\\d+/.test(\"998\"));//true\n        console.log(/\\d{0,}/.test(\"998\"));//true\n        console.log(/\\d{2,3}/.test(\"998\"));//true\n        console.log(/\\D/.test(\"eat\"));//true\n        console.log(/\\s/.test(\"  \"));//true\n        console.log(/\\S/.test(\"嘎嘎\"));//true\n        console.log(/\\w/.test(\"_\"));//true\n        console.log(/\\W/.test(\"_\"));//true\n\n###正则表达式案例\n1.验证密码强弱\n2.验证邮箱：[0-9a-zA-Z_.-]+[@][0-9a-zA-Z._-]+([.][a-zA-Z]+){1,2}\n3.验证中文名字[\\u4e00-\\u9fa5]\n\n### 正则提取\n\n```javascript\n// 1. 提取工资\nvar str = \"张三：1000，李四：5000，王五：8000。\";\nvar array = str.match(/\\d+/g);\nconsole.log(array);\n\n// 2. 提取email地址\nvar str = \"123123@xx.com,fangfang@valuedopinions.cn 286669312@qq.com 2、emailenglish@emailenglish.englishtown.com 286669312@qq.com...\";\nvar array = str.match(/\\w+@\\w+\\.\\w+(\\.\\w+)?/g);\nconsole.log(array);\n\n// 3. 分组提取  \n// 3. 提取日期中的年部分  2015-5-10\nvar dateStr = '2016-1-5';\n// 正则表达式中的()作为分组来使用，获取分组匹配到的结果用Regex.$1 $2 $3....来获取\nvar reg = /(\\d{4})-\\d{1,2}-\\d{1,2}/;\nif (reg.test(dateStr)) {\n  console.log(RegExp.$1);\n}\n\n// 4. 提取邮件中的每一部分\nvar reg = /(\\w+)@(\\w+)\\.(\\w+)(\\.\\w+)?/;\nvar str = \"123123@xx.com\";\nif (reg.test(str)) {\n  console.log(RegExp.$1);\n  console.log(RegExp.$2);\n  console.log(RegExp.$3);\n}\n```\n\n### 正则替换\n\n```javascript\n// 1. 替换所有空白\nvar str = \"   123AD  asadf   asadfasf  adf \";\nstr = str.replace(/\\s/g,\"xx\");\nconsole.log(str);\n\n// 2. 替换所有,|，\nvar str = \"abc,efg,123，abc,123，a\";\nstr = str.replace(/,|，/g, \".\");\nconsole.log(str);\n```\n\n### 案例：表单验证\n\n```html\nQQ号：<input type=\"text\" id=\"txtQQ\"><span></span><br>\n邮箱：<input type=\"text\" id=\"txtEMail\"><span></span><br>\n手机：<input type=\"text\" id=\"txtPhone\"><span></span><br>\n生日：<input type=\"text\" id=\"txtBirthday\"><span></span><br>\n姓名：<input type=\"text\" id=\"txtName\"><span></span><br>\n```\n\n```javascript\n//获取文本框\nvar txtQQ = document.getElementById(\"txtQQ\");\nvar txtEMail = document.getElementById(\"txtEMail\");\nvar txtPhone = document.getElementById(\"txtPhone\");\nvar txtBirthday = document.getElementById(\"txtBirthday\");\nvar txtName = document.getElementById(\"txtName\");\n\n//\ntxtQQ.onblur = function () {\n  //获取当前文本框对应的span\n  var span = this.nextElementSibling;\n  var reg = /^\\d{5,12}$/;\n  //判断验证是否成功\n  if(!reg.test(this.value) ){\n    //验证不成功\n    span.innerText = \"请输入正确的QQ号\";\n    span.style.color = \"red\";\n  }else{\n    //验证成功\n    span.innerText = \"\";\n    span.style.color = \"\";\n  }\n};\n\n//txtEMail\ntxtEMail.onblur = function () {\n  //获取当前文本框对应的span\n  var span = this.nextElementSibling;\n  var reg = /^\\w+@\\w+\\.\\w+(\\.\\w+)?$/;\n  //判断验证是否成功\n  if(!reg.test(this.value) ){\n    //验证不成功\n    span.innerText = \"请输入正确的EMail地址\";\n    span.style.color = \"red\";\n  }else{\n    //验证成功\n    span.innerText = \"\";\n    span.style.color = \"\";\n  }\n};\n```\n\n表单验证部分，封装成函数：\n\n```javascript\nvar regBirthday = /^\\d{4}-\\d{1,2}-\\d{1,2}$/;\naddCheck(txtBirthday, regBirthday, \"请输入正确的出生日期\");\n//给文本框添加验证\nfunction addCheck(element, reg, tip) {\n  element.onblur = function () {\n    //获取当前文本框对应的span\n    var span = this.nextElementSibling;\n    //判断验证是否成功\n    if(!reg.test(this.value) ){\n      //验证不成功\n      span.innerText = tip;\n      span.style.color = \"red\";\n    }else{\n      //验证成功\n      span.innerText = \"\";\n      span.style.color = \"\";\n    }\n  };\n}\n```\n\n通过给元素增加自定义验证属性对表单进行验证：\n\n```html\n<form id=\"frm\">\n  QQ号：<input type=\"text\" name=\"txtQQ\" data-rule=\"qq\"><span></span><br>\n  邮箱：<input type=\"text\" name=\"txtEMail\" data-rule=\"email\"><span></span><br>\n  手机：<input type=\"text\" name=\"txtPhone\" data-rule=\"phone\"><span></span><br>\n  生日：<input type=\"text\" name=\"txtBirthday\" data-rule=\"date\"><span></span><br>\n  姓名：<input type=\"text\" name=\"txtName\" data-rule=\"cn\"><span></span><br>\n</form>\n```\n\n```javascript\n// 所有的验证规则\nvar rules = [\n  {\n    name: 'qq',\n    reg: /^\\d{5,12}$/,\n    tip: \"请输入正确的QQ\"\n  },\n  {\n    name: 'email',\n    reg: /^\\w+@\\w+\\.\\w+(\\.\\w+)?$/,\n    tip: \"请输入正确的邮箱地址\"\n  },\n  {\n    name: 'phone',\n    reg: /^\\d{11}$/,\n    tip: \"请输入正确的手机号码\"\n  },\n  {\n    name: 'date',\n    reg: /^\\d{4}-\\d{1,2}-\\d{1,2}$/,\n    tip: \"请输入正确的出生日期\"\n  },\n  {\n    name: 'cn',\n    reg: /^[\\u4e00-\\u9fa5]{2,4}$/,\n    tip: \"请输入正确的姓名\"\n  }];\n\naddCheck('frm');\n\n\n//给文本框添加验证\nfunction addCheck(formId) {\n  var i = 0,\n      len = 0,\n      frm =document.getElementById(formId);\n  len = frm.children.length;\n  for (; i < len; i++) {\n    var element = frm.children[i];\n    // 表单元素中有name属性的元素添加验证\n    if (element.name) {\n      element.onblur = function () {\n        // 使用dataset获取data-自定义属性的值\n        var ruleName = this.dataset.rule;\n        var rule =getRuleByRuleName(rules, ruleName);\n\n        var span = this.nextElementSibling;\n        //判断验证是否成功\n        if(!rule.reg.test(this.value) ){\n          //验证不成功\n          span.innerText = rule.tip;\n          span.style.color = \"red\";\n        }else{\n          //验证成功\n          span.innerText = \"\";\n          span.style.color = \"\";\n        }\n      }\n    }\n  }\n}\n\n// 根据规则的名称获取规则对象\nfunction getRuleByRuleName(rules, ruleName) {\n  var i = 0,\n      len = rules.length;\n  var rule = null;\n  for (; i < len; i++) {\n    if (rules[i].name == ruleName) {\n      rule = rules[i];\n      break;\n    }\n  }\n  return rule;\n}\n```\n\n## 补充\n\n### 伪数组和数组\n\n在JavaScript中，除了5种原始数据类型之外，其他所有的都是对象，包括函数（Function）。\n\n#### 对象与数组的关系\n\n在说区别之前，需要先提到另外一个知识，就是 JavaScript 的原型继承。\n所有 JavaScript 的内置构造函数都是继承自 `Object.prototype` 。\n在这个前提下，可以理解为使用 `new Array()` 或 `[]` 创建出来的数组对象，都会拥有 `Object.prototype` 的属性值。\n\n```javascript\nvar obj = {};// 拥有 Object.prototype 的属性值\nvar arr = [];\n//使用数组直接量创建的数组，由于 Array.prototype 的属性继承自 Object.prototype，\n//那么，它将同时拥有 Array.prototype 和 Object.prototype 的属性值\n```\n\n可以得到对象和数组的第一个区别：对象没有数组 Array.prototype 的属性值。\n\n#### 什么是数组\n\n数组具有一个最基本特征：索引，这是对象所没有的，下面来看一段代码：\n\n```javascript\nvar obj = {};\nvar arr = [];\n \nobj[2] = 'a';\narr[2] = 'a';\n \nconsole.log(obj[2]); // => a\nconsole.log(arr[2]); // => a\nconsole.log(obj.length); // => undefined\nconsole.log(arr.length); // => 3\n```\n\n- obj[2]输出'a'，是因为对象就是普通的键值对存取数据\n- 而arr[2]输出'a' 则不同，数组是通过索引来存取数据，arr[2]之所以输出'a'，是因为数组arr索引2的位置已经存储了数据\n- obj.length并不具有数组的特性，并且obj没有保存属性length，那么自然就会输出undefined\n- 而对于数组来说，length是数组的一个内置属性，数组会根据索引长度来更改length的值\n- 为什么arr.length输出3，而不是1\n  + 在给数组添加元素时，并没有按照连续的索引添加，所以导致数组的索引不连续，那么就导致索引长度大于元素个数\n\n#### 什么是伪数组\n\n1. 拥有 length 属性，其它属性（索引）为非负整数(对象中的索引会被当做字符串来处理，这里你可以当做是个非负整数串来理解)\n2. 不具有数组所具有的方法\n\n伪数组，就是像数组一样有 `length` 属性，也有 `0、1、2、3` 等属性的对象，看起来就像数组一样，但不是数组，比如:\n\n```javascript\nvar fakeArray = {\n  \"0\": \"first\",\n  \"1\": \"second\",\n  \"2\": \"third\",\n  length: 3\n};\n \nfor (var i = 0; i < fakeArray.length; i++) {\n  console.log(fakeArray[i]);\n}\n \nArray.prototype.join.call(fakeArray,'+');\n```\n\n常见的伪数组有：\n\n- 函数内部的 `arguments`\n- DOM 对象列表（比如通过 `document.getElementsByTags` 得到的列表）\n- jQuery 对象（比如 `$(\"div\")` ）\n\n伪数组是一个 Object，而真实的数组是一个 Array。\n\n伪数组存在的意义，是可以让普通的对象也能正常使用数组的很多方法，比如：\n\n```javascript\nvar arr = Array.prototype.slice.call(arguments);\n \nArray.prototype.forEach.call(arguments, function(v) {\n  // 循环arguments对象\n});\n\n// push\n// some\n// every\n// filter\n// map\n// ...\n```\n\n以上在借用数组的原型方法的时候都可以通过数组直接量来简化使用：\n\n```javascript\nvar obj = {\n  0: 'a',\n  1: 'b',\n  2: 'c',\n  length: 3\n}\n\n;[].push.call(obj, 'd')\n\nconsole.log([].slice.call(obj))\n\n;[].forEach.call(obj, function (num, index) {\n  console.log(num)\n})\n```\n\n#### 小结\n\n- 对象没有数组 Array.prototype 的属性值，类型是 Object ，而数组类型是 Array\n- 数组是基于索引的实现， length 会自动更新，而对象是键值对\n- 使用对象可以创建伪数组，伪数组可以正常使用数组的大部分方法\n\n### JavaScript 垃圾回收机制\n\n### JavaScript 运行机制：Event Loop\n\n### Object\n\n#### 静态成员\n\n- Object.assign()\n- Object.create()\n- Object.keys()\n- Object.defineProperty()\n\n#### 实例成员\n\n- constructor\n- hasOwnProperty()\n- isPrototypeOf\n- propertyIsEnumerable()\n- toString()\n- valueOf()\n\n---\n\n## 附录\n\n### A 代码规范\n\n#### 代码风格\n\n- [JavaScript Standard Style ](https://github.com/feross/standard)\n- [Airbnb JavaScript Style Guide() {](https://github.com/airbnb/javascript)\n\n#### 校验工具\n\n- [JSLint](https://github.com/douglascrockford/JSLint)\n- [JSHint](https://github.com/jshint/jshint)\n- [ESLint](https://github.com/eslint/eslint)\n\n### B Chrome 开发者工具\n\n### C 文档相关工具\n\n- 电子文档制作工具: [docute](https://github.com/egoist/docute)\n- 流程图工具：[DiagramDesigner](http://logicnet.dk/DiagramDesigner/)\n","tags":["js笔记"],"categories":["JavaScript"]},{"title":"JD案例","url":"%2F2017%2F08%2F07%2Fjd%2F","content":"---\n学习目标:\n\n  - 掌握京东项目流程体系\n  - 掌握网站三大标签优化\n  - 掌握京东头部和尾部制作\n  - 掌握京导航栏制作\n  - 掌握京东焦点图制作\n  - 了解网站三大标签优化\n  - 理解BFC\n  - 了解渐进增强和优雅降级\n\n  typora-copy-images-to: media\n---\n  ----------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------\n\n# 京东项目(一)\n\n## 京东项目介绍\n\n项目名称：京东网\n项目描述：京东首页公共部分的头部和尾部制作，京东首页中间部分。\n\n\n\n<img src=\"/media/jd.png\" />\n##  项目背景\n\n现阶段电商类网站很流行，很多同学毕业之后会进入电商类企业工作，同时电商类网站需要的技术也是较为复杂的，这里用京东电商网站复习、总结、提高前面所学布局技术。其实，最主要的原因还是，为啥写京东？  因为刘强东，赚了我们的钱，抢了我们的女神， 我们也要学刘强东，赚别人的钱，抢别人..额，自己的女神。。。\n\n## 设计目标\n\n- 保证浏览器 ie7及以上, 火狐, 360, safari，chrome等。谁让我再测ie6，就跟谁急。。\n\n- 熟悉CSS+DIV布局，页面的搭建工作\n\n- 了解常用电商类网站的布局模式\n\n- 为后期京东移动端做铺垫\n\n## 几点思考\n\n\n(1). 开发工具  sublime  、fireworks（ps）、各种浏览器(ie6.7 要测看心情)\n\n\n\n(2). CSS Rest 类库,为跨浏览器兼容做准备(也可以直接运用jd网站的初始化)\n\n\n```\nnormalize.css   只是一个很小的CSS文件，但它在默认的HTML元素样式上提供了跨浏览器的高度一致性。相比于传统的CSS reset，Normalize.css是一种现代的、为HTML5准备的优质替代方案。Normalize.css现在已经被用于Twitter Bootstrap、HTML5 Boilerplate、GOV.UK、Rdio、CSS Tricks 以及许许多多其他框架、工具和网站上。 你值得拥有。。 \n\n- 保护有用的浏览器默认样式而不是完全去掉它们\n\n- 一般化的样式：为大部分HTML元素提供\n\n- 修复浏览器自身的bug并保证各浏览器的一致性\n\n- 优化CSS可用性：用一些小技巧\n\n- 解释代码：用注释和详细的文档来\n```\n\n(3). 技术栈\n\n~~~\nHTML5 结构 + CSS3  布局 (因为我们就会这些。。。嘻嘻)\n~~~\n\n\n\n(4). 低版本浏览器 单独制作一个跳转页面 (都是孩子，也舍不得打，舍不得扔)\n\nhttps://h5.m.jd.com/dev/3dm8aE4LDBNMkDfcCaRxLnVQ7rqo/index.html\n\n<img src=\"/media/di.png\" width=\"600\" />\n\n## 目录说明\n\n\n要实现结构和样式相分离的设计思想。 根目录下有这4个文件（目录）。\n\n| 名称     | 说明                 |\n| ------ | ------------------ |\n| css    | 用于存放CSS文件          |\n| images | 用于存放图片             |\n| index  | 京东首页 HTML          |\n| js     | 用于后期存放javascript文件 |\n\n\n\n## 运用知识点\n\n###  引入ico图标\n\n<img src=\"/media/ico.png\"  style=\"border: 1px dashed #ccc; padding:3px;\" />  \n\n\n    代码：  <link rel=\"shortcut icon\" href=\"favicon.ico\"  type=\"image/x-icon\"/>     \n注意： \n\n1. 她(它)不是iconfont字体哦。\n\n2. 位置是放到 head 标签中间。\n\n3. 后面的type=\"image/x-icon\"  属性可以省略。（我相信你也愿意省略。）\n\n4. 为了兼容性，请将favicon.ico 这个图标放到根目录下。（我们就不要任性了，听话放位置，省很多麻烦。。你好，我也好）\n\n   <img src=\"/media/icotu.png\" />\n\n\n### 转换ico图标\n\n我们可以自己做的图片，转换为 ico图标，以便放到我们站点里面。 http://www.bitbug.net/\n\n###  网站优化三大标签\n\nSEO是由英文Search Engine Optimization缩写而来， 中文意译为“搜索引擎优化”！SEO是指通过对网站进行站内优化、网站结构调整、网站内容建设、网站代码优化等)和站外优化，从而提高网站的关键词排名以及公司产品的曝光度。 简单的说就是，把产品做好，搜索引擎就会介绍客户来。  \n\n 我们现在阶段主要进行站内优化。网站优化，我们应该要懂。。。\n\n<img src=\"/media/san.png\" />\n\n\n####  网页title 标题\ntitle具有不可替代性，是我们的内页第一个重要标签，是搜索引擎了解网页的入口，和对网页主题归属的最佳判断点。\n\n<img src=\"/media/title.png\" width=\"500\" />\n\n建议：\n\n首页标题：网站名（产品名）- 网站的介绍    \n\n例如：\n\n京东(JD.COM)-综合网购首选-正品低价、品质保障、配送及时、轻松购物！\n\n\n小米商城 - 小米5s、红米Note 4、小米MIX、小米笔记本官方网站\n\n####  Description  网站说明\n\n对于关键词的作用明显降低，但由于很多搜索引擎，仍然大量采用网页的MATA标签中描述部分作为搜索结果的“内容摘要”。 就是简要说明我们网站的主要做什么的。\n我们提倡，Description作为网站的总体业务和主题概括，多采用“我们是…”“我们提供…”“×××网作为…”“电话：010…”之类语句。\n\n京东网：\n\n    <meta name=\"description\" content=\"京东JD.COM-专业的综合网上购物商城,销售家电、数码通讯、电脑、家居百货、服装服饰、母婴、图书、食品等数万个品牌优质商品.便捷、诚信的服务，为您提供愉悦的网上购物体验!\" />\n注意点：\n\n1.  描述中出现关键词，与正文内容相关，这部分内容是给人看的，所以要写的很详细，让人感兴趣， 吸引用户点击。\n2.  同样遵循简短原则，字符数含空格在内不要超过 120  个汉字。\n3.  补充在 title  和 keywords  中未能充分表述的说明.\n4.  用英文逗号 关键词1,关键词2\n\n~~~\n<meta name=\"description\" content=\"小米商城直营小米公司旗下所有产品，囊括小米手机系列小米MIX、小米Note 2，红米手机系列红米Note 4、红米4，智能硬件，配件及小米生活周边，同时提供小米客户服务及售后支持。\" />\n~~~\n####  Keywords 关键字\n\nKeywords是页面关键词，是搜索引擎关注点之一。Keywords应该限制在6～8个关键词左右，电商类网站可以多 少许。\n\n京东网：\n\n\n    <meta name=\"Keywords\" content=\"网上购物,网上商城,手机,笔记本,电脑,MP3,CD,VCD,DV,相机,数码,配件,手表,存储卡,京东\" />\n小米网：\n\n\n    <meta name=\"keywords\" content=\"小米,小米6,红米Note4,小米MIX,小米商城\" />\n\n## 顶部（快捷菜单）所用知识点\n\n| 知识点                 | 说明                                       |\n| ------------------- | ---------------------------------------- |\n| 通栏的盒子               | 不用给宽度  默认为 100% &nbsp;但是加了浮动和定位的盒子需要 添加 100% |\n| 盒子居中对齐              | margin: auto;  注意必须有宽度的块级元素，文字水平居中对齐是 text-align:center; |\n| 行高会继承               | 文字性质的，比如 颜色、文字大小、字体、行高等会继承父级元素           |\n| 浮动元素、固定定位，绝对定位会模式转换 | 具有行内块特性，比如一行放多个，有高度和宽度，如果没有指定宽度，则会根据内容多少撑开。 |\n\n##  logo 和搜索 header 区域所用知识点\n\n### 网页布局稳定性 \n\n<img src=\"/media/x.png\" />\n\n\n### 宽度剩余法：\n\n<img src=\"/media/w.png\" />\n\n\n| 知识点    | 说明                                       |\n| ------ | ---------------------------------------- |\n| 浮动元素特性 | 1. 浮动可以让多个元素同一行显示 2. 浮动的元素是顶部对齐          |\n| logo优化 | text-indent: -20000px; 隐藏文字， 背景图片        |\n| 清除浮动   | 清除浮动的目的就是为了解决父亲高度为0的问题                   |\n| 鼠标样式   | cursor: pointer;           小手      cursor: move;            四角箭头     cursor: text;  插入光标     cursor: default;  小白 |\n| 不允许换行  | white-space: nowrap;                     |\n\n## nav导航栏所用知识点\n\n| 名称      | 说明                                       |\n| ------- | ---------------------------------------- |\n| 边框底侧    | border-bottom: 2px solid #ccc;           |\n| 定位重点    | 绝对定位不占位置  相对定位占有位置                       |\n| 标签语义化dl | dl也是块级元素 dt 是 定义标题  dd 是定义描述，dd是围绕这dt来描述的，也就是说，dd算是dt 的解释说明详细分解。 |\n| 标题标签h   | 尽量少用h1，可以多用h2和h3等标签                      |\n\n## 页面底部所用知识点\n\n| 名称          | 说明                                       |\n| ----------- | ---------------------------------------- |\n| 绝对定位的盒子居中对齐 | 盒子 left 50%  然后通过 margin 负值自己的宽度一半（固定定位也是如此） |\n\n\n\n###  固定定位的盒子靠近版心右侧对齐\n\n跟绝对定位的盒子居中对齐原理差不多。\n\nleft 50%   然后 margin-left  版心宽度一半。\n\n<img src=\"/media/guding.png\" width=\"500\" />\n\n学习目标:\n\n- 掌握京东中间部分制作\n- 理解BFC使用\n- 了解优雅降级和渐进增强\n- 了解CSS压缩和验证工具\n\n  typora-copy-images-to: /media\n\n------\n\n# 京东项目(二)\n\n## nav导航栏所用知识点\n\n| 名称      | 说明                                       |\n| ------- | ---------------------------------------- |\n| 边框底侧    | border-bottom: 2px solid #ccc;           |\n| 定位重点    | 绝对定位不占位置  相对定位占有位置                       |\n| 标签语义化dl | dl也是块级元素 dt 是 定义标题  dd 是定义描述，dd是围绕这dt来描述的，也就是说，dd算是dt 的解释说明详细分解。 |\n| 标题标签h   | 尽量少用h1，可以多用h2和h3等标签                      |\n\n### 固定定位的盒子靠近版心右侧对齐\n\n跟绝对定位的盒子居中对齐原理差不多。\n\nleft 50%   然后 margin-left  版心宽度一半。\n\n<img src=\"/media/guding.png\" width=\"500\" />\n\n## 焦点图部分所用知识点\n\n| 名称   | 说明                               |\n| ---- | -------------------------------- |\n| 圆角矩形 | border-radius: 左上角 右上角 右下角  左下角。 |\n\n负值自己的宽度一半（固定定位也是如此）\n\n## 背景半透明\n\n1.强烈推荐：  background: rgba(r,g,b,alpha);\n\n​     r,g,b 是红绿蓝的颜色，  alpha 是透明度的意思，取值范围是 0~1 之间。\n\n2.了解ie低版本浏览器 半透明\n\nfilter:Alpha(opacity=50) ；   // opacity值为0 到 100\n\n但是 此属性是盒子半透明，不是背景半透明哦，因为里面的内容也一起半透明了\n\n因此，低版本的 ie6.7浏览器，我们不需要透明了，直接采用优雅降级的做法。\n\nbackground: gary;\n\nbackground: rgba(0,0,0,.2);\n\n写上两句 背景， 低版本ie只执行gray， 其他浏览器执行 半透明下面这一句。\n\n## BFC(块级格式化上下文)\n\nBFC(Block formatting context)\n\n直译为\"块级格式化上下文\"。\n\n### 元素的显示模式\n\n我们前面讲过 元素的显示模式 display。 \n\n分为 块级元素   行内元素  行内块元素 ，其实，它还有很多其他显示模式。\n\n<img src=\"/media/dis.png\"  style=\"border: 1px dashed #ccc; padding: 5px;\" />\n\n### 那些元素会具有BFC的条件\n\n不是所有的元素模式都能产生BFC，w3c 规范： \n\ndisplay 属性为 block, list-item, table 的元素，会产生BFC.\n\n大家有么有发现这个三个都是用来布局最为合理的元素，因为他们就是用来可视化布局。\n\n注意其他的，display属性，比如 line 等等，他们创建的是 IFC ，我们暂且不研究。\n\n这个BFC 有着具体的布局特性： \n\n<img src=\"/media/box.gif\" />\n\n有宽度和高度 ， 有 外边距margin  有内边距padding 有边框 border。\n\n就好比，你有了练习武术的体格了。 有潜力，有资质。\n\n<img src=\"/media/gu.jpeg\" width=\"400\" />\n\n### 什么情况下可以让元素产生BFC\n\n以上盒子具有BFC条件了，就是说有资质了，但是怎样触发才会产生BFC，从而创造这个封闭的环境呢？ \n\n在好比，你光有资质还不行，你需要一定额外效果才能出发的武学潜力，要么你掉到悬崖下面，捡到了一本九阴真经，要么你学习葵花宝典，欲练此功必先....\n\n<img src=\"/media/kuihua.png\" />\n同样，要给这些元素添加如下属性就可以触发BFC。\n\n-float属性不为none\n\n-position为absolute或fixed\n\n-display为inline-block, table-cell, table-caption, flex, inline-flex\n\n-overflow不为visible。\n\n### BFC元素所具有的特性\n\nBFC布局规则特性：\n\n1.在BFC中，盒子从顶端开始垂直地一个接一个地排列.\n\n2.盒子垂直方向的距离由margin决定。属于同一个BFC的两个相邻盒子的margin会发生重叠\n\n3.在BFC中，每一个盒子的左外边缘（margin-left）会触碰到容器的左边缘(border-left)（对于从右到左的格式来说，则触碰到右边缘）。\n\n1. BFC的区域不会与浮动盒子产生交集，而是紧贴浮动边缘。\n2. 计算BFC的高度时，自然也会检测浮动或者定位的盒子高度。\n\n它是一个独立的渲染区域，只有Block-level box参与， 它规定了内部的Block-level Box如何布局，并且与这个区域外部毫不相干。\n\n白话文： 孩子在家里愿意怎么折腾都行，但是出了家门口，你就的乖乖的，不能影响外面的任何人。\n\n<img src=\"/media/xiong.jpeg\" width=\"400\" />\n\n### BFC的主要用途\n\nBFC能用来做什么？\n\n(1) 清除元素内部浮动\n\n只要把父元素设为BFC就可以清理子元素的浮动了，最常见的用法就是在父元素上设置overflow: hidden样式，对于IE6加上zoom:1就可以了。\n\n主要用到 \n\n```\n计算BFC的高度时，自然也会检测浮动或者定位的盒子高度。\n```\n\n<img src=\"/media/fu.jpg\" />\n(2) 解决外边距合并问题\n\n外边距合并的问题。\n\n主要用到 \n\n```\n盒子垂直方向的距离由margin决定。属于同一个BFC的两个相邻盒子的margin会发生重叠\n```\n\n属于同一个BFC的两个相邻盒子的margin会发生重叠，那么我们创建不属于同一个BFC，就不会发生margin重叠了。\n\n<img src=\"/media/ma.png\" />\n\n(3) 制作右侧自适应的盒子问题\n\n主要用到 \n\n```\n普通流体元素BFC后，为了和浮动元素不产生任何交集，顺着浮动边缘形成自己的封闭上下文\n```\n\n<img src=\"/media/you.png\" />\n\n### BFC 总结\n\nBFC就是页面上的一个隔离的独立容器，容器里面的子元素不会影响到外面的元素。反之也如此。包括浮动，和外边距合并等等，因此，有了这个特性，我们布局的时候就不会出现意外情况了。\n\n## 优雅降级和渐进增强\n\n什么是渐进增强（progressive enhancement）、优雅降级（graceful degradation）呢？\n\n渐进增强 progressive enhancement：\n\n针对低版本浏览器进行构建页面，保证最基本的功能，然后再针对高级浏览器进行效果、交互等改进和追加功能达到更好的用户体验。\n\n 类似 爬山，由低出往高处爬\n\n  <img src=\"/media/pa.png\" width=\"400\" />\n\n  <b>优雅降级 graceful degradation：</b>\n\n一开始就构建完整的功能，然后再针对低版本浏览器进行兼容。\n\n类似蹦极，由高处往低处下落\n\n<img src=\"/media/xia.jpg\" />\n\n　　区别：渐进增强是向上兼容，优雅降级是向下兼容。\n\n个人建议： 现在互联网发展很快， 连微软公司都抛弃了ie浏览器，转而支持 edge这样的高版本浏览器，我们很多情况下没有必要再时刻想着低版本浏览器了，而是一开始就构建完整的效果，根据实际情况，修补低版本浏览器问题。\n\n## 浏览器前缀\n\n| 浏览器前缀    | 浏览器                                    |\n| -------- | -------------------------------------- |\n| -webkit- | Google Chrome, Safari, Android Browser |\n| -moz-    | Firefox                                |\n| -o-      | Opera                                  |\n| -ms-     | Internet Explorer, Edge                |\n| -khtml-  | Konqueror                              |\n\n\n\n后面我们会有 常用的解决H5和C3 的兼容解决文件， 我们这里暂且不涉及。\n\n## 背景渐变\n\n在线性渐变过程中，颜色沿着一条直线过渡：从左侧到右侧、从右侧到左侧、从顶部到底部、从底部到顶部或着沿任何任意轴。如果你曾使用过制作图件，比如说Photoshop，你对线性渐变并不会陌生。\n\n兼容性问题很严重，我们这里之讲解线性渐变\n\n语法格式： \n\n~~~css\nbackground:-webkit-linear-gradient(渐变的起始位置， 起始颜色， 结束颜色)；\n~~~\n\n~~~css\nbackground:-webkit-linear-gradient(渐变的起始位置， 颜色 位置， 颜色位置....)；\n~~~\n\n\n\n## CSS W3C 统一验证工具\n\nCssStats 是一个在线的 CSS 代码分析工具\n\n```\n网址是：  http://www.cssstats.com/\n```\n\n\n\n如果你想要更全面的，这个神奇，你值得拥有：\n\nW3C 统一验证工具：    http://validator.w3.org/unicorn/  ☆☆☆☆☆\n\n因为它可以检测本地文件哦！！\n\n## CSS 压缩\n\n通过上面的检测没有错误，为了提高加载速度和节约空间（相对来说，css量很少的情况下，几乎没啥区别），可以通过css压缩工具把css进行压缩。\n\n w3c css压缩   http://tool.chinaz.com/Tools/CssFormat.aspx   网速比较慢\n\n 还可以去站长之家进行快速压缩。\n\n http://tool.chinaz.com/Tools/CssFormat.aspx  \n\n## 旋转轮播图\n\n<img src=\"/media/rotate.png\"/>\n\n这个效果我们需要用到  透视  过渡还有 子元素  preserve-3d\n\n### transform-style\n\n`transform-style`属性是3D空间一个重要属性，指定嵌套元素如何在3D空间中呈现。他主要有两个属性值：`flat`和`preserve-3d`。\n\n其中`flat`值为默认值，表示所有子元素在2D平面呈现。`preserve-3d`表示所有子元素在3D空间中呈现。\n\n~~~css\n body {\n        \tperspective: 1000px;\n        }\n\t\tsection {\n\t\t\twidth: 300px;\n\t\t\theight: 200px;\n\t\t\tmargin: 100px auto;\n\t\t\tbackground: url(images/img-1.jpg) no-repeat;\n\t\t\tbackground-size: cover;\n\t\t\tposition: relative;\n\t\t\ttransform-style: preserve-3d;  /* 让父盒子里面的子盒子以3d效果显示 */\n\t\t\ttransition:  5s linear;  /* 匀速  all 是可以省略的， 省略默认的all*/\n\t\t}\n\t\tsection:hover {\n\t\t\ttransform: rotateY(360deg);\n\t\t}\n\t\tsection div {\n\t\t\twidth: 100%;\n\t\t\theight: 100%;\n\t\t\tbackground: url(images/dog.gif) no-repeat;\n\t\t\tbackground-size: cover;\n\t\t\tposition: absolute;\n\t\t\ttop: 0;\n\t\t\tleft: 0;\n\t\t}\n\t\tsection div:nth-child(1) {\n\t\t\ttransform: rotateY(0deg)  translateZ(400px);\n\t\t}\n\t\tsection div:nth-child(2) {\n\t\t\ttransform: rotateY(60deg)  translateZ(400px);\n\t\t}\n\t\tsection div:nth-child(3) {\n\t\t\ttransform: rotateY(120deg)  translateZ(400px);\n\t\t}\n\t\tsection div:nth-child(4) {\n\t\t\ttransform: rotateY(180deg)  translateZ(400px);\n\t\t}\n\t\tsection div:nth-child(5) {\n\t\t\ttransform: rotateY(240deg)  translateZ(400px);\n\t\t}\n\t\tsection div:nth-child(6) {\n\t\t\ttransform: rotateY(300deg)  translateZ(400px);\n\t\t}\n~~~\n\n","tags":["Css笔记/案例"],"categories":["Css"]},{"title":"Css1","url":"%2F2017%2F08%2F07%2FCSS(1)%2F","content":"\n---\n## 课程目标:\n> 1. 学会使用CSS选择器\n> 2. 熟记CSS样式和外观属性\n> 3. 熟练掌握CSS各种选择器\n> 4. 熟练掌握CSS各种选择器\n> 5. 熟练掌握CSS三种显示模式\n> 6. 熟练掌握CSS背景属性\n> 7. 熟练掌握CSS三大特性\n> 8. 熟练掌握CSS盒子模型\n> 9. 熟练掌握CSS浮动\n> 10.熟练掌握CSS定位\n> 11.熟练掌握CSS高级技巧强化CSS\ntypora-copy-images-to: media\n---\n\n# CSS的发展历程\n\n从HTML被发明开始，样式就以各种形式存在。不同的浏览器结合它们各自的样式语言为用户提供页面效果的控制。最初的HTML只包含很少的显示属性。\n随着HTML的成长，为了满足页面设计者的要求，HTML添加了很多显示功能。但是随着这些功能的增加，HTML变的越来越杂乱，而且HTML页面也越来越臃肿。于是CSS便诞生了。\n\n# CSS 网页的美容师\n\nCSS的出现，拯救了混乱的HTML，当让更加拯救了我们web开发者。 让我们的网页更加丰富多彩。   \n\nCSS的最大贡献就是：  让 HTML 从样式中解脱苦海，  实现了 HTML 专注去做 结构呈现。 而样式交给 CSS 后，你完全可以放心的早点洗洗睡了！\n\n<img src=\"/media/x.jpg\" width=\"250\" />\n\n而且。。。。。 CSS 做的很出色，如果JavaScript是网页的魔法师，那么CSS它是我们网页的美容师，不信，你看:\n\n<img src=\"/media/baby.jpeg\" />\n\nps:  你跟Angelababy只差了一个妆容的距离\n\n来个更直观的认识吧： \n\n<img src=\"/media/db.png\" />\n\n有人说， 没有不漂亮的女人，只有不会打扮的女人。\n\n我想说， 没有不好看的网页，只有不会CSS的前端。\n\n\n\n网页添加 CSS和不添加CSS 的对比：\n\n带有CSS的页面\n\n<img src=\"/media/Cc.png\" />\n\n没有CSS的页面\n\n<img src=\"/media/fff.png\" />\n\n# CSS初识\n\nCSS(Cascading Style Sheets)\n\nCSS通常称为CSS样式表或层叠样式表（级联样式表），主要用于设置HTML页面中的文本内容（字体、大小、对齐方式等）、图片的外形（宽高、边框样式、边距等）以及版面的布局等外观显示样式。\n\nCSS以HTML为基础，提供了丰富的功能，如字体、颜色、背景的控制及整体排版等，而且还可以针对不同的浏览器设置不同的样式。\n\n# CSS样式规则\n\n使用HTML时，需要遵从一定的规范。CSS亦如此，要想熟练地使用CSS对网页进行修饰，首先需要了解CSS样式规则，具体格式如下：                                          \n\n<img src=\"/media/gz.png\" />\n\n~~~\n在上面的样式规则中:\n\n1.选择器用于指定CSS样式作用的HTML对象，花括号内是对该对象设置的具体样式。\n2.属性和属性值以“键值对”的形式出现。\n3.属性是对指定的对象设置的样式属性，例如字体大小、文本颜色等。\n4.属性和属性值之间用英文“:”连接。\n5.多个“键值对”之间用英文“;”进行区分。\n可以用段落 和 表格的对齐的演示。\n~~~\n\n# CSS字体样式属性\n\n## font-size:字号大小\n\nfont-size属性用于设置字号，该属性的值可以使用相对长度单位，也可以使用绝对长度单位。其中，相对长度单位比较常用，推荐使用像素单位px，绝对长度单位使用较少。具体如下：\n\n<img src=\"/media/dd.png\" />\n\n## font-family:字体\n\nfont-family属性用于设置字体。网页中常用的字体有宋体、微软雅黑、黑体等，例如将网页中所有段落文本的字体设置为微软雅黑，可以使用如下CSS样式代码：\n\np{ font-family:\"微软雅黑\";}\n\n可以同时指定多个字体，中间以逗号隔开，表示如果浏览器不支持第一个字体，则会尝试下一个，直到找到合适的字体。\n\n> <img src=\"/media/good.png\" />常用技巧：\n\n~~~\n1. 现在网页中普遍使用14px+。\n2. 尽量使用偶数的数字字号。ie6等老式浏览器支持奇数会有bug。\n3. 各种字体之间必须使用英文状态下的逗号隔开。\n4. 中文字体需要加英文状态下的引号，英文字体一般不需要加引号。当需要设置英文字体时，英文字体名必须位于中文字体名之前。\n5. 如果字体名中包含空格、#、$等符号，则该字体必须加英文状态下的单引号或双引号，例如font-family: \"Times New Roman\";。\n6. 尽量使用系统默认字体，保证在任何用户的浏览器中都能正确显示。\n~~~\n\n\n\n## CSS Unicode字体\n\n在 CSS 中设置字体名称，直接写中文是可以的。但是在文件编码（GB2312、UTF-8 等）不匹配时会产生乱码的错误。xp 系统不支持 类似微软雅黑的中文。\n\n方案一： 你可以使用英文来替代。 比如 font-family:\"Microsoft Yahei\"。\n\n方案二： 在 CSS 直接使用 Unicode 编码来写字体名称可以避免这些错误。使用 Unicode 写中文字体名称，浏览器是可以正确的解析的。\nfont-family: \"\\5FAE\\8F6F\\96C5\\9ED1\"，表示设置字体为“微软雅黑”。\n\n<img src=\"/media/shs.png\" />\n\n可以通过escape()  来测试属于什么字体。\n\n| 字体名称      | 英文名称            | Unicode 编码           |\n| --------- | --------------- | -------------------- |\n| 宋体        | SimSun          | \\5B8B\\4F53           |\n| 新宋体       | NSimSun         | \\65B0\\5B8B\\4F53      |\n| 黑体        | SimHei          | \\9ED1\\4F53           |\n| 微软雅黑      | Microsoft YaHei | \\5FAE\\8F6F\\96C5\\9ED1 |\n| 楷体_GB2312 | KaiTi_GB2312    | \\6977\\4F53_GB2312    |\n| 隶书        | LiSu            | \\96B6\\4E66           |\n| 幼园        | YouYuan         | \\5E7C\\5706           |\n| 华文细黑      | STXihei         | \\534E\\6587\\7EC6\\9ED1 |\n| 细明体       | MingLiU         | \\7EC6\\660E\\4F53      |\n| 新细明体      | PMingLiU        | \\65B0\\7EC6\\660E\\4F53 |\n\n为了照顾不同电脑的字体安装问题，我们尽量只使用宋体和微软雅黑中文字体\n\n## font-weight:字体粗细\n\n字体加粗除了用 b  和 strong 标签之外，可以使用CSS 来实现，但是CSS 是没有语义的。\n\n~~~html\nfont-weight属性用于定义字体的粗细，其可用属性值：normal、bold、bolder、lighter、100~900（100的整数倍）。\n~~~\n\n\n\n<img src=\"/media/good.png\" />小技巧： \n\n ~~~css\n数字 400 等价于 normal，而 700 等价于 bold。  但是我们更喜欢用数字来表示。  \n ~~~\n\n\n\n## font-style:字体风格\n\n字体倾斜除了用 i  和 em 标签之外，可以使用CSS 来实现，但是CSS 是没有语义的。\n\nfont-style属性用于定义字体风格，如设置斜体、倾斜或正常字体，其可用属性值如下：\n\nnormal：默认值，浏览器会显示标准的字体样式。\n\nitalic：浏览器会显示斜体的字体样式。\n\noblique：浏览器会显示倾斜的字体样式。\n\n<img src=\"/media/good.png\" />小技巧： \n\n ~~~\n平时我们很少给文字加斜体，反而喜欢给斜体标签（em，i）改为普通模式。\n ~~~\n\n\n\n## font:综合设置字体样式 (重点)\n\nfont属性用于对字体样式进行综合设置，其基本语法格式如下：\n\n```css\n选择器{font: font-style  font-weight  font-size/line-height  font-family;}\n```\n\n\n\n~~~\n使用font属性时，必须按上面语法格式中的顺序书写，不能更换顺序，各个属性以空格隔开。\n\n注意：其中不需要设置的属性可以省略（取默认值），但必须保留font-size和font-family属性，否则font属性将不起作用。\n\n~~~\n\n\n\n# 开发者工具（chrome）\n\n此工具是我们的必备工具，以后代码出了问题，我们首先第一反应就是：\n\n“按F12”或者是 “shift+ctrl+i”   打开 开发者工具。\n\n菜单：   右击网页空白出---查看 \n\n<img src=\"/media/chrome.png\" />\n\n<img src=\"/media/good.png\" />小技巧：\n\n1. ctrl+滚轮 可以 放大开发者工具代码大小。\n2. 左边是HTML元素结构   右边是CSS样式。\n3. 右边CSS样式可以改动数值和颜色查看更改后效果。\n\n# 选择器（重点）\n\n要想将CSS样式应用于特定的HTML元素，首先需要找到该目标元素。在CSS中，执行这一任务的样式规则部分被称为选择器（选择符）。\n\n<img src=\"/media/ax.png\" />\n\n如上图所以，要把里面的小黄人分为2组，最快的方法怎办？  \n\n很多， 比如 一只眼睛的一组，剩下的一组  \n\n这就用到基础选择器组：\n\n## 标签选择器（元素选择器）\n\n标签选择器是指用HTML标签名称作为选择器，按标签名称分类，为页面中某一类标签指定统一的CSS样式。其基本语法格式如下：\n\n```\n标签名{属性1:属性值1; 属性2:属性值2; 属性3:属性值3; }  或者\n元素名{属性1:属性值1; 属性2:属性值2; 属性3:属性值3; }\n```\n\n标签选择器最大的优点是能快速为页面中同类型的标签统一样式，同时这也是他的缺点，不能设计差异化样式。\n\n课堂案例：\n\n 传智简介\n\n## 类选择器\n\n类选择器使用“.”（英文点号）进行标识，后面紧跟类名，其基本语法格式如下：\n\n```\n.类名{属性1:属性值1; 属性2:属性值2; 属性3:属性值3; }\n```\n\n```\n 标签调用的时候用 class=“类名”  即可。\n```\n\n类选择器最大的优势是可以为元素对象定义单独或相同的样式。\n\n<img src=\"/media/good.png\" />小技巧：\n\n~~~\n1.长名称或词组可以使用中横线来为选择器命名。\n2.不建议使用“_”下划线来命名CSS选择器。\n~~~\n\n​    输入的时候少按一个shift键;\n　浏览器兼容问题 (比如使用_tips的选择器命名，在IE6是无效的)\n　能良好区分JavaScript变量命名(JS变量命名是用“_”)\n\n~~~\n3.不要纯数字、中文等命名， 尽量使用英文字母来表示。\n~~~\n\n猜谜底游戏：\n\n<img src=\"/media/midi.png\" width=\"450\" />   你猜？\n\n\n\n命名规范：  见附件（Web前端开发规范手册.doc）\n\n命名是我们通俗约定的，但是没有规定必须用这些常用的命名。\n\n课堂案例：\n\n <img src=\"/media/go.png\" />\n\n\n\n~~~html\n<head>\n        <meta charset=\"utf-8\">\n        <style>\n        span {\n        \tfont-size: 100px;\n        }\n        .blue {\n        \tcolor: blue;\n        }\n        .red {\n        \tcolor: red;\n        }\n        .orange {\n\t\t\tcolor: orange;\n        }\n\t\t.green {\n\t\t\tcolor: green;\n\t\t}\n        </style>\n    </head>\n    <body>\n    \t<span class=\"blue\">G</span>\n    \t<span class=\"red\">o</span>\n    \t<span class=\"orange\">o</span>\n    \t<span class=\"blue\">g</span>\n    \t<span class=\"green\">l</span>\n    \t<span class=\"red\">e</span>\n    </body>\n~~~\n\n\n\n## 多类名选择器\n\n我们可以给标签指定多个类名，从而达到更多的选择目的。\n\n<img src=\"/media/lei.png\" />\n\n注意：\n\n~~~\n1. 样式显示效果跟HTML元素中的类名先后顺序没有关系,受CSS样式书写的上下顺序有关。\n2. 各个类名中间用空格隔开。\n~~~\n\n多类名选择器在后期布局比较复杂的情况下，还是较多使用的。\n\n~~~html\n<div class=\"pink fontWeight font20\">亚瑟</div>\n<div class=\"font20\">刘备</div>\n<div class=\"font14 pink\">安其拉</div>\n<div class=\"font14\">貂蝉</div>\n~~~\n\n\n\n## id选择器\n\nid选择器使用“#”进行标识，后面紧跟id名，其基本语法格式如下：\n\n```\n#id名{属性1:属性值1; 属性2:属性值2; 属性3:属性值3; }\n```\n\n该语法中，id名即为HTML元素的id属性值，大多数HTML元素都可以定义id属性，元素的id值是唯一的，只能对应于文档中某一个具体的元素。\n\n用法基本和类选择器相同。\n\n## id选择器和类选择器区别\n\nW3C标准规定，在同一个页面内，不允许有相同名字的id对象出现，但是允许相同名字的class。\n\n类选择器（class） 好比人的名字，  是可以多次重复使用的， 比如  张伟  王伟  李伟  李娜\n\nid选择器     好比人的身份证号码，  全中国是唯一的， 不得重复。 只能使用一次。\n\n***id选择器和类选择器最大的不同在于 使用次数上。***\n\n<img src=\"/media/zfb.jpg\" />\n\n## 通配符选择器\n\n通配符选择器用“*”号表示，他是所有选择器中作用范围最广的，能匹配页面中所有的元素。其基本语法格式如下：\n\n```\n* { 属性1:属性值1; 属性2:属性值2; 属性3:属性值3; }\n```\n\n\n\n例如下面的代码，使用通配符选择器定义CSS样式，清除所有HTML标记的默认边距。\n\n~~~css\n* {\n  margin: 0;                    /* 定义外边距*/\n  padding: 0;                   /* 定义内边距*/\n}\n~~~\n\n注意：\n\n  这个通配符选择器，就像我们的电影明星中的梦中情人， 想想它就好了，但是它不会和你过日子。 \n\n## 伪类选择器\n\n  伪类选择器用于向某些选择器添加特殊的效果。比如给链接添加特殊效果， 比如可以选择 第1个，第n个元素。\n\n~~~css\n为了和我们刚才学的类选择器相区别，  类选择器是一个点 比如 .demo {}   而我们的伪类 用 2个点 就是 冒号  比如  :link{}\n~~~\n\n### 链接伪类选择器\n\n- :link      /* 未访问的链接 */\n- :visited   /* 已访问的链接 */\n- :hover     /* 鼠标移动到链接上 */\n- :active    /* 选定的链接 */\n\n\n   注意写的时候，他们的顺序尽量不要颠倒  按照  lvha 的顺序。   love   hate  爱上了讨厌 记忆法    或者   lv 包包 非常 hao \n\n~~~css\na {   /* a是标签选择器  所有的链接 */\n\t\t\tfont-weight: 700;\n\t\t\tfont-size: 16px;\n\t\t\tcolor: gray;\n\t\t}\na:hover {   /* :hover 是链接伪类选择器 鼠标经过 */\n\t\t\tcolor: red; /*  鼠标经过的时候，由原来的 灰色 变成了红色 */\n}\n~~~\n\n\n\n### 结构(位置)伪类选择器（CSS3)\n\n- :first-child :选取属于其父元素的首个子元素的指定选择器\n- :last-child :选取属于其父元素的最后一个子元素的指定选择器\n- :nth-child(n) ： 匹配属于其父元素的第 N 个子元素，不论元素的类型\n- :nth-last-child(n) ：选择器匹配属于其元素的第 N 个子元素的每个元素，不论元素的类型，从最后一个子元素开始计数。\n  n 可以是数字、关键词或公式\n- ​\n\n~~~css\nli:first-child { /*  选择第一个孩子 */\n        \t\tcolor: pink; \n        \t}\nli:last-child {   /* 最后一个孩子 */\n        \t\tcolor: purple;\n        \t}\nli:nth-child(4) {   /* 选择第4个孩子  n  代表 第几个的意思 */ \n\t\t\t\tcolor: skyblue;\n        \t}\n~~~\n\n\n\n### 目标伪类选择器(CSS3)\n\n :target目标伪类选择器 :选择器可用于选取当前活动的目标元素\n\n~~~css\n:target {\n\t\tcolor: red;\n\t\tfont-size: 30px;\n}\n~~~\n\n\n\n# CSS注释\n\n```\nCSS规则是使用     /*  需要注释的内容  */  进行注释的，即在需要注释的内容前使用 “/*” 标记开始注释，在内容的结尾使用 “*/”结束。\n```\n\n   例如：\n\n~~~css\np {\n  font-size: 14px;                 /* 所有的字体是14像素大小*/\n}\n~~~\n\n# CSS外观属性\n\n## color:文本颜色\n\ncolor属性用于定义文本的颜色，其取值方式有如下3种：\n\n1.预定义的颜色值，如red，green，blue等。\n\n2.十六进制，如#FF0000，#FF6600，#29D794等。实际工作中，十六进制是最常用的定义颜色的方式。\n\n3.RGB代码，如红色可以表示为rgb(255,0,0)或rgb(100%,0%,0%)。\n\n需要注意的是，如果使用RGB代码的百分比颜色值，取值为0时也不能省略百分号，必须写为0%。\n\n##  line-height:行间距\n\nine-height属性用于设置行间距，就是行与行之间的距离，即字符的垂直间距，一般称为行高。line-height常用的属性值单位有三种，分别为像素px，相对值em和百分比%，实际工作中使用最多的是像素px\n\n一般情况下，行距比字号大7.8像素左右就可以了。\n\n## text-align:水平对齐方式\n\n~~~\ntext-align属性用于设置文本内容的水平对齐，相当于html中的align对齐属性。其可用属性值如下：\n~~~\n\nleft：左对齐（默认值）\n\nright：右对齐\n\ncenter：居中对齐\n\n## text-indent:首行缩进\n\ntext-indent属性用于设置首行文本的缩进，其属性值可为不同单位的数值、em字符宽度的倍数、或相对于浏览器窗口宽度的百分比%，允许使用负值, 建议使用em作为设置单位。\n\n1em 就是一个字的宽度   如果是汉字的段落， 1em 就是一个汉字的宽度\n\n## letter-spacing:字间距\n\nletter-spacing属性用于定义字间距，所谓字间距就是字符与字符之间的空白。其属性值可为不同单位的数值，允许使用负值，默认为normal。\n\n## word-spacing:单词间距\n\nword-spacing属性用于定义英文单词之间的间距，对中文字符无效。和letter-spacing一样，其属性值可为不同单位的数值，允许使用负值，默认为normal。\n\nword-spacing和letter-spacing均可对英文进行设置。不同的是letter-spacing定义的为字母之间的间距，而word-spacing定义的为英文单词之间的间距。\n\n## 颜色半透明(css3)\n\n文字颜色到了CSS3我们可以采取半透明的格式了语法格式如下：\n\n~~~css\n    color: rgba(r,g,b,a)  a 是alpha  透明的意思  取值范围 0~1之间    color: rgba(0,0,0,0.3)  \n~~~\n\n\n\n## 文字阴影(CSS3)\n\n以后我们可以给我们的文字添加阴影效果了  Shadow  影子  \n\n~~~css\ntext-shadow:水平位置 垂直位置 模糊距离 阴影颜色;\n~~~\n\n![1498467502625](/media/1498467502625.png) \n\n1. 前两项是必须写的。  后两项可以选写。\n\n![1498467519665](/media/1498467519665.png)    \n\n# sublime快捷方式\n\nsublime可以快速提高我们代码的书写方式\n\n1. 生成标签 直接输入标签名 按tab键即可   比如  div   然后tab 键， 就可以生成 <div></div>\n\n2. 如果想要生成多个相同标签  加上 * 就可以了 比如   div*3  就可以快速生成3个div\n\n3. 如果有父子级关系的标签，可以用 >  比如   ul > li就可以了\n\n4. 如果有兄弟关系的标签，用  +  就可以了 比如 div+p  \n\n5. 如果生成带有类名或者id名字的，  直接写  .demo  或者  #two   tab 键就可以了\n\n   ​\n\n# 引入CSS样式表（书写位置）\n\nCSS可以写到那个位置？ 是不是一定写到html文件里面呢？\n\n## 内部样式表\n\n内嵌式是将CSS代码集中写在HTML文档的head头部标签中，并且用style标签定义，其基本语法格式如下：\n\n```html\n<head>\n<style type=\"text/CSS\">\n    选择器 {属性1:属性值1; 属性2:属性值2; 属性3:属性值3;}\n</style>\n</head>\n```\n\n语法中，style标签一般位于head标签中title标签之后，也可以把他放在HTML文档的任何地方。\n\ntype=\"text/CSS\"  在html5中可以省略， 写上也比较符合规范， 所以这个地方可以写也可以省略。\n\n## 行内式（内联样式）\n\n内联样式，又有人称行内样式、行间样式、内嵌样式。是通过标签的style属性来设置元素的样式，其基本语法格式如下：\n\n```html\n<标签名 style=\"属性1:属性值1; 属性2:属性值2; 属性3:属性值3;\"> 内容 </标签名>\n```\n\n语法中style是标签的属性，实际上任何HTML标签都拥有style属性，用来设置行内式。其中属性和值的书写规范与CSS样式规则相同，行内式只对其所在的标签及嵌套在其中的子标签起作用。\n\n\n\n## 外部样式表（外链式）\n\n链入式是将所有的样式放在一个或多个以.CSS为扩展名的外部样式表文件中，通过link标签将外部样式表文件链接到HTML文档中，其基本语法格式如下：\n\n```html\n<head>\n  <link href=\"CSS文件的路径\" type=\"text/CSS\" rel=\"stylesheet\" />\n</head>\n```\n\n注意：  link 是个单标签哦!!!\n\n该语法中，link标签需要放在head头部标签中，并且必须指定link标签的三个属性，具体如下：\n\n~~~\nhref：定义所链接外部样式表文件的URL，可以是相对路径，也可以是绝对路径。\ntype：定义所链接文档的类型，在这里需要指定为“text/CSS”，表示链接的外部文件为CSS样式表。\nrel：定义当前文档与被链接文档之间的关系，在这里需要指定为“stylesheet”，表示被链接的文档是一个样式表文件。\n~~~\n\n## 三种样式表总结\n\n| 样式表   | 优点           | 缺点           | 使用情况    | 控制范围      |\n| ----- | ------------ | ------------ | ------- | --------- |\n| 行内样式表 | 书写方便，权重高     | 没有实现样式和结构相分离 | 较少      | 控制一个标签（少） |\n| 内部样式表 | 部分结构和样式相分离   | 没有彻底分离       | 较多      | 控制一个页面（中） |\n| 外部样式表 | 完全实现结构和样式相分离 | 需要引入         | 最多，强烈推荐 | 控制整个站点（多） |\n\n# 标签显示模式（display）\n\n<img src=\"/media/people.png\" />\n\n非洲黑人：  皮肤内黑色素含量高，以吸收阳光中的紫外线，保护皮肤内部结构免遭损害，头发象羊毛一样卷曲，使每根卷发周围都有许多空隙，空隙充满空气，卷发有隔热作用。\n\n欧洲白人： 生活寒带或着是说常年温度较低的地缘,加上年日照时间少，身体的黑色素沉淀比较少``所以出现皮肤、发色、瞳晕都呈现浅色\n\n传智黄人：  我中间的。。。  <img src=\"/media/h.jpg\" alt=\"\" />\n\n最重要的总结：  是为了更好的适应环境而完成的自然选择。 \n\n同理，我们网页的标签非常多，再不同地方会用到不同类型的标签，以便更好的完成我们的网页。\n\n标签的类型(显示模式)\n\nHTML标签一般分为块标签和行内标签两种类型，它们也称块元素和行内元素。具体如下：\n\n## 块级元素(block-level)\n\n每个块元素通常都会独自占据一整行或多整行，可以对其设置宽度、高度、对齐等属性，常用于网页布局和网页结构的搭建。\n\n```\n常见的块元素有<h1>~<h6>、<p>、<div>、<ul>、<ol>、<li>等，其中<div>标签是最典型的块元素。\n```\n\n  <img src=\"/media/xtf.jpg\" />\n\n块级元素的特点：\n\n（1）总是从新行开始\n\n（2）高度，行高、外边距以及内边距都可以控制。\n\n（3）宽度默认是容器的100%\n\n（4）可以容纳内联元素和其他块元素。\n\n## 行内元素(inline-level)\n\n行内元素（内联元素）不占有独立的区域，仅仅靠自身的字体大小和图像尺寸来支撑结构，一般不可以设置宽度、高度、对齐等属性，常用于控制页面中文本的样式。\n\n```\n常见的行内元素有<a>、<strong>、<b>、<em>、<i>、<del>、<s>、<ins>、<u>、<span>等，其中<span>标签最典型的行内元素。\n```\n\n  <img src=\"/media/wf.jpg\" />  我一样重要\n\n行内元素的特点：\n\n（1）和相邻行内元素在一行上。\n\n（2）高、宽无效，但水平方向的padding和margin可以设置，垂直方向的无效。\n\n（3）默认宽度就是它本身内容的宽度。\n\n（4）行内元素只能容纳文本或则其他行内元素。（a特殊）\n\n  <img src=\"/media/w.jpg\" />    注意：\n\n1. 只有 文字才 能组成段落  因此 p  里面不能放块级元素，同理还有这些标签h1,h2,h3,h4,h5,h6,dt，他们都是文字类块级标签，里面不能放其他块级元素。\n2. 链接里面不能再放链接。\n\n\n\n## 块级元素和行内元素区别\n\n~~~\n块级元素的特点：\n（1）总是从新行开始\n（2）高度，行高、外边距以及内边距都可以控制。\n（3）宽度默认是容器的100%\n（4）可以容纳内联元素和其他块元素。\n~~~\n\n~~~\n行内元素的特点：\n（1）和相邻行内元素在一行上。\n（2）高、宽无效，但水平方向的padding和margin可以设置，垂直方向的无效。\n（3）默认宽度就是它本身内容的宽度。\n（4）行内元素只能容纳文本或则其他行内元素。\n~~~\n\n## 行内块元素（inline-block）\n\n```\n在行内元素中有几个特殊的标签——<img />、<input />、<td>，可以对它们设置宽高和对齐属性，有些资料可能会称它们为行内块元素。\n\n行内块元素的特点：\n（1）和相邻行内元素（行内块）在一行上,但是之间会有空白缝隙。\n（2）默认宽度就是它本身内容的宽度。\n（3）高度，行高、外边距以及内边距都可以控制。\n```\n\n<img src=\"/media/lyc.jpg\" width=\"400\" />\n\n## 标签显示模式转换 display\n\n块转行内：display:inline;\n\n行内转块：display:block;\n\n块、行内元素转换为行内块： display: inline-block;\n\n此阶段，我们只需关心这三个，其他的是我们后面的工作。\n\n# CSS复合选择器\n\n复合选择器是由两个或多个基础选择器，通过不同的方式组合而成的,目的是为了可以选择更准确更精细的目标元素标签。\n\n## 交集选择器\n\n交集选择器由两个选择器构成，其中第一个为标签选择器，第二个为class选择器，两个选择器之间不能有空格，如h3.special。\n\n<img src=\"/media/jiao.png\" />\n\n**记忆技巧：**\n\n交集选择器 是 并且的意思。  即...又...的意思\n\n~~~\n比如：   p.one   选择的是： 类名为 .one  的 段落标签。  \n~~~\n\n用的相对来说比较少，不太建议使用。\n\n## 并集选择器\n\n并集选择器（CSS选择器分组）是各个选择器通过<strong style=\"color:#f00\">逗号</strong>连接而成的，任何形式的选择器（包括标签选择器、class类选择器id选择器等），都可以作为并集选择器的一部分。如果某些选择器定义的样式完全相同，或部分相同，就可以利用并集选择器为它们定义相同的CSS样式。\n\n<img src=\"/media/bing.png\" />\n\n记忆技巧：\n\n并集选择器  和 的意思，  就是说，只要逗号隔开的，所有选择器都会执行后面样式。\n\n~~~\n比如  .one, p , #test {color: #F00;}  表示   .one 和 p  和 #test 这三个选择器都会执行颜色为红色。  通常用于集体声明。\n~~~\n\n<img src=\"/media/hu.gif\" />  他和他，在一起， 在一起    一起的意思\n\n\n\n## 后代选择器\n\n后代选择器又称为包含选择器，用来选择元素或元素组的后代，其写法就是把外层标签写在前面，内层标签写在后面，中间用空格分隔。当标签发生嵌套时，内层标签就成为外层标签的后代。\n\n<img src=\"/media/hou.png\" />\n\n子孙后代都可以这么选择。 或者说，它能选择任何包含在内 的标签。 \n\n<img src=\"/media/li.png\" />\n\n\n\n## 子元素选择器\n\n子元素选择器只能选择作为某元素子元素的元素。其写法就是把父级标签写在前面，子级标签写在后面，中间跟一个 &gt; 进行连接，注意，符号左右两侧各保留一个空格。\n\n<img src=\"/media/zi1.png\" />\n\n白话：  这里的子 指的是 亲儿子  不包含孙子 重孙子之类。\n\n~~~\n 比如：  .demo > h3 {color: red;}   说明  h3 一定是demo 亲儿子。  demo 元素包含着h3。\n~~~\n\n<img src=\"/media/san.jpg\" />\n\n\n\n## 测试题\n\n```html\n<div class=\"nav\">    <!-- 主导航栏 -->\n  <ul>\n    <li><a href=\"#\">公司首页</a></li>\n\t<li><a href=\"#\">公司简介</a></li>\n\t<li><a href=\"#\">公司产品</a></li>\n\t<li>\n         <a href=\"#\">联系我们</a>\n\t\t <ul>\n\t\t    \t\t<li><a href=\"#\">公司邮箱</a></li>\n\t\t    \t\t<li><a href=\"#\">公司电话</a></li>\n\t\t </ul>\n\t</li>\n  </ul>\n</div>\n<div class=\"sitenav\">    <!-- 侧导航栏 -->\n  <div class=\"site-l\">左侧侧导航栏</div>\n  <div class=\"site-r\"><a href=\"#\">登录</a></div>\n</div>\n```\n\n在不修改以上代码的前提下，完成以下任务：\n\n1. 链接 登录 的颜色为红色,同时主导航栏里面的所有的链接改为蓝色     (简单)\n\n2. 主导航栏和侧导航栏里面文字都是14像素并且是微软雅黑。（中等)\n\n3. 主导航栏里面的一级菜单链接文字颜色为绿色。（难)\n\n   ​\n\n## 属性选择器\n\n选取标签带有某些特殊属性的选择器 我们成为属性选择器\n\n~~~css\n/* 获取到 拥有 该属性的元素 */\ndiv[class^=font] { /*  class^=font 表示 font 开始位置就行了 */\n\t\t\tcolor: pink;\n\t\t}\ndiv[class$=footer] { /*  class$=footer 表示 footer 结束位置就行了 */\n\t\t\tcolor: skyblue;\n\t\t}\ndiv[class*=tao] { /* class*=tao  *=  表示tao 在任意位置都可以 */\n\t\t\tcolor: green;\n\t\t}\n~~~\n\n~~~html\n<div class=\"font12\">属性选择器</div>\n    <div class=\"font12\">属性选择器</div>\n    <div class=\"font24\">属性选择器</div>\n    <div class=\"font24\">属性选择器</div>\n    <div class=\"font24\">属性选择器</div>\n    <div class=\"24font\">属性选择器123</div>\n    <div class=\"sub-footer\">属性选择器footer</div>\n    <div class=\"jd-footer\">属性选择器footer</div>\n    <div class=\"news-tao-nav\">属性选择器</div>\n    <div class=\"news-tao-header\">属性选择器</div>\n    <div class=\"tao-header\">属性选择器</div>\n~~~\n\n## 伪元素选择器（CSS3)\n\n1. E::first-letter文本的第一个单词或字（如中文、日文、韩文等）\n2. E::first-line 文本第一行；\n3. E::selection 可改变选中文本的样式；\n\n~~~css\np::first-letter {\n  font-size: 20px;\n  color: hotpink;\n}\n\n/* 首行特殊样式 */\np::first-line {\n  color: skyblue;\n}\n\np::selection {\n  /* font-size: 50px; */\n  color: orange;\n}\n~~~\n\n\n\n4、E::before和E::after\n\n在E元素内部的开始位置和结束位创建一个元素，该元素为行内元素，且必须要结合content属性使用。\n\n~~~css\ndiv::befor {\n  content:\"开始\";\n}\ndiv::after {\n  content:\"结束\";\n}\n~~~\n\n\n\nE:after、E:before 在旧版本里是伪元素，CSS3的规范里“:”用来表示伪类，“::”用来表示伪元素，但是在高版本浏览器下E:after、E:before会被自动识别为E::after、E::before，这样做的目的是用来做兼容处理。\n\nE:after、E:before后面的练习中会反复用到，目前只需要有个大致了解\n\n\":\" 与 \"::\" 区别在于区分伪类和伪元素\n\n# CSS书写规范\n\n开始就形成良好的书写规范，是你专业化的开始。\n\n## 空格规范\n\n【强制】 选择器 与 { 之间必须包含空格。\n\n示例： .selector { }\n\n【强制】 属性名 与之后的 : 之间不允许包含空格， : 与 属性值 之间必须包含空格。\n\n示例：\n\nfont-size: 12px;\n\n## 选择器规范\n\n【强制】 当一个 rule 包含多个 selector 时，每个选择器声明必须独占一行。\n\n示例：\n\n```\n/* good */\n.post,\n.page,\n.comment {\n    line-height: 1.5;\n}\n\n\n/* bad */\n.post, .page, .comment {\n    line-height: 1.5;\n}\n```\n\n【建议】 选择器的嵌套层级应不大于 3 级，位置靠后的限定条件应尽可能精确。\n\n示例：\n\n```\n/* good */\n#username input {}\n.comment .avatar {}\n\n/* bad */\n.page .header .login #username input {}\n.comment div * {}\n```\n\n## 属性规范\n\n【强制】 属性定义必须另起一行。\n\n示例：\n\n```\n/* good */\n.selector {\n    margin: 0;\n    padding: 0;\n}\n\n/* bad */\n.selector { margin: 0; padding: 0; }\n```\n\n【强制】 属性定义后必须以分号结尾。\n\n示例：\n\n```\n/* good */\n.selector {\n    margin: 0;\n}\n\n/* bad */\n.selector {\n    margin: 0\n}\n```\n\n# CSS 背景(background)\n\nCSS 可以添加背景颜色和背景图片，以及来进行图片设置。\n\n| background-color                      | 背景颜色     |\n| ------------------------------------- | -------- |\n| background-image                      | 背景图片地址   |\n| background-repeat                     | 是否平铺     |\n| background-position                   | 背景位置     |\n| background-attachment                 | 背景固定还是滚动 |\n| 背景的合写（复合属性）                           |          |\n| background:背景颜色 背景图片地址 背景平铺 背景滚动 背景位置 |          |\n\n## 背景图片(image)\n\n语法： \n\n~~~css\nbackground-image : none | url (url) \n~~~\n\n参数： \n\nnone : 　无背景图（默认的）\nurl : 　使用绝对或相对地址指定背景图像 \n\nbackground-image 属性允许指定一个图片展示在背景中（只有CSS3才可以多背景）可以和 background-color 连用。 如果图片不重复地话，图片覆盖不到地地方都会被背景色填充。 如果有背景图片平铺，则会覆盖背景颜色。\n\n小技巧：  我们提倡 背景图片后面的地址，url不要加引号。\n\n## 背景平铺（repeat）\n\n语法： \n\n~~~css\nbackground-repeat : repeat | no-repeat | repeat-x | repeat-y \n~~~\n\n参数： \n\nrepeat : 　背景图像在纵向和横向上平铺（默认的）\n\nno-repeat : 　背景图像不平铺\n\nrepeat-x : 　背景图像在横向上平铺\n\nrepeat-y : 　背景图像在纵向平铺 \n\n设置背景图片时，默认把图片在水平和垂直方向平铺以铺满整个元素。\n\nrepeat-x : 　背景图像在横向上平铺  \n\n\n\nrepeat-y : 　背景图像在纵向平铺 \n\n<img src=\"/media/y.png\" width=\"600\"/>\n\n设置背景图片时，默认把图片在水平和垂直方向平铺以铺满整个元素。\n\n<img src=\"/media/q.png\" width=\"600\"/>\n\n## 背景位置(position)\n\n语法： \n\n~~~css\nbackground-position : length || length\n\nbackground-position : position || position \n~~~\n\n参数： \n\nlength : 　百分数 | 由浮点数字和单位标识符组成的长度值。请参阅长度单位 \nposition : 　top | center | bottom | left | center | right \n\n说明： \n\n设置或检索对象的背景图像位置。必须先指定background-image属性。默认值为：(0% 0%)。\n如果只指定了一个值，该值将用于横坐标。纵坐标将默认为50%。第二个值将用于纵坐标。\n\n注意：\n\n1. position 后面是x坐标和y坐标。 可以使用方位名词或者 精确单位。\n2. 如果和精确单位和方位名字混合使用，则必须是x坐标在前，y坐标后面。比如 background-position: 15px top;   则 15px 一定是  x坐标   top是 y坐标。\n\n实际工作用的最多的，就是背景图片居中对齐了。\n\n## 背景附着\n\n语法： \n\n~~~css\nbackground-attachment : scroll | fixed \n~~~\n\n参数： \n\nscroll : 　背景图像是随对象内容滚动\nfixed : 　背景图像固定 \n\n说明： \n\n设置或检索背景图像是随对象内容滚动还是固定的。\n\n\n\n## 背景简写\n\nbackground属性的值的书写顺序官方并没有强制标准的。为了可读性，建议大家如下写：\n\nbackground:背景颜色 背景图片地址 背景平铺 背景滚动 背景位置\n\n~~~css\nbackground: transparent url(image.jpg) repeat-y  scroll 50% 0 ;\n~~~\n\n## 背景透明(CSS3)\n\nCSS3支持背景半透明的写法语法格式是:\n\n~~~css\nbackground: rgba(0,0,0,0.3);\n~~~\n\n 最后一个参数是alpha 透明度  取值范围 0~1之间\n\n 注意：  背景半透明是指盒子背景半透明， 盒子里面的内容不收影响。\n\n\n\n\n\n\n\n## 背景缩放(CSS3)\n\n通过background-size设置背景图片的尺寸，就像我们设置img的尺寸一样，在移动Web开发中做屏幕适配应用非常广泛。\n\n其参数设置如下：\n\na) 可以设置长度单位(px)或百分比（设置百分比时，参照盒子的宽高）\n\nb) 设置为cover时，会自动调整缩放比例，保证图片始终填充满背景区域，如有溢出部分则会被隐藏。我们平时用的cover 最多\n\nc) 设置为contain会自动调整缩放比例，保证图片始终完整显示在背景区域。\n\n~~~css\nbackground-image: url('images/gyt.jpg');\n\t\t\tbackground-size: 300px 100px;\n\t\t\t/* background-size: contain; */\n\t\t\t/* background-size: cover; */\n~~~\n\n## 多背景(CSS3)\n\n以逗号分隔可以设置多背景，可用于自适应布局  做法就是 用逗号隔开就好了。\n\n- 一个元素可以设置多重背景图像。 \n- 每组属性间使用逗号分隔。 \n- 如果设置的多重背景图之间存在着交集（即存在着重叠关系），前面的背景图会覆盖在后面的背景图之上。\n- 为了避免背景色将图像盖住，背景色通常都定义在最后一组上，\n\n~~~css\nbackground:url(test1.jpg) no-repeat scroll 10px 20px/50px 60px  ,\n\t   url(test1.jpg) no-repeat scroll 10px 20px/70px 90px ,\n\t   url(test1.jpg) no-repeat scroll 10px 20px/110px 130px c #aaa;\n~~~\n\n- ​\n\n## 凹凸文字\n\n~~~css\n<head>\n        <meta charset=\"utf-8\">\n        <style>\n        body {\n        \tbackground-color: #ccc;\n        }\n\t\tdiv {\n\t\t\tcolor: #ccc;\n\t\t\tfont: 700 80px \"微软雅黑\";\n\t\t}\n\t\tdiv:first-child {\n\t\t\t/* text-shadow: 水平位置  垂直位置  模糊距离 阴影颜色; */\n\t\t\ttext-shadow: 1px 1px 1px #000, -1px -1px 1px #fff;\n\t\t}\n\t\tdiv:last-child {\n\t\t\t/* text-shadow: 水平位置  垂直位置  模糊距离 阴影颜色; */\n\t\t\ttext-shadow: -1px -1px 1px #000, 1px 1px 1px #fff;\n\t\t}\n\n        </style>\n    </head>\n    <body>\n    <div>我是凸起的文字</div>\n    <div>我是凹下的文字</div>\n    </body>\n~~~\n\n![1498467533412](/media/1498467533412.png)\n\n\n\n## 导航栏案例\n\n### 文本的装饰\n\ntext-decoration   通常我们用于给链接修改装饰效果\n\n| 值            | 描述                      |\n| ------------ | ----------------------- |\n| none         | 默认。定义标准的文本。             |\n| underline    | 定义文本下的一条线。下划线 也是我们链接自带的 |\n| overline     | 定义文本上的一条线。              |\n| line-through | 定义穿过文本下的一条线。            |\n|              |                         |\n|              |                         |\n\n**使用技巧**：在一行内的盒子内，我们设定行高等于盒子的高度，就可以使文字垂直居中。\n\n~~~html\n<head>\n        <meta charset=\"utf-8\">\n        <style>\n\t\tbody {\n\t\t\tbackground-color: #000;\n\t\t}\n\t\ta {\n\t\t\twidth: 200px;\n\t\t\theight: 50px;\n\t\t\t/* background-color: orange; */\n\t\t\tdisplay: inline-block;  /* 把a 行内元素转换为行内块元素 */\n\t\t\ttext-align: center;  /* 文字水平居中 */\n\t\t\tline-height: 50px;  /* 我们设定行高等于盒子的高度，就可以使文字垂直居中 */\n\t\t\tcolor: #fff;\n\t\t\tfont-size: 22px;\n\t\t\ttext-decoration: none;  /* 取消下划线 文本装饰 */\n\t\t}\n\t\ta:hover {  /* 鼠标经过 给我们的链接添加背景图片*/\n\t\t\tbackground: url(images/h.png) no-repeat; \n\t\t}\n        </style>\n    </head>\n    <body>\n    <a href=\"#\">专区说明</a>\n    <a href=\"#\">申请资格</a>\n    <a href=\"#\">兑换奖励</a>\n    <a href=\"#\">下载游戏</a>\n    </body>\n~~~\n\n\n\n# CSS 三大特性\n\n层叠 继承  优先级 是我们学习CSS 必须掌握的三个特性。\n\n## CSS层叠性\n\n所谓层叠性是指多种CSS样式的叠加。\n\n是浏览器处理冲突的一个能力,如果一个属性通过两个相同选择器设置到同一个元素上，那么这个时候一个属性就会将另一个属性层叠掉\n\n比如先给某个标签指定了内部文字颜色为红色，接着又指定了颜色为蓝色，此时出现一个标签指定了相同样式不同值的情况，这就是样式冲突。\n\n一般情况下，如果出现样式冲突，则会按照CSS书写的顺序，以最后的样式为准。\n\n1. 样式冲突，遵循的原则是就近原则。 那个样式离着结构近，就执行那个样式。\n2. 样式不冲突，不会层叠\n\n~~~\nCSS最后的执行口诀：  长江后浪推前浪，前浪死在沙滩上。\n~~~\n\n<img src=\"/media/hai.gif\"  width=\"600\" height=\"400\" />\n\n##  CSS继承性\n\n所谓继承性是指书写CSS样式表时，子标签会继承父标签的某些样式，如文本颜色和字号。想要设置一个可继承的属性，只需将它应用于父元素即可。\n\n简单的理解就是：  子承父业。\n\n~~~\nCSS最后的执行口诀：  龙生龙，凤生凤，老鼠生的孩子会打洞。\n~~~\n\n<img src=\"/media/shu.gif\" />\n\n注意：\n\n~~~\n恰当地使用继承可以简化代码，降低CSS样式的复杂性。子元素可以继承父元素的样式（text-，font-，line-这些元素开头的都可以继承，以及color属性）\n~~~\n\n## CSS优先级\n\n定义CSS样式时，经常出现两个或更多规则应用在同一元素上，这时就会出现优先级的问题。\n\n在考虑权重时，初学者还需要注意一些特殊的情况，具体如下：\n\n~~~\n继承样式的权重为0。即在嵌套结构中，不管父元素样式的权重多大，被子元素继承时，他的权重都为0，也就是说子元素定义的样式会覆盖继承来的样式。\n\n行内样式优先。应用style属性的元素，其行内样式的权重非常高，可以理解为远大于100。总之，他拥有比上面提高的选择器都大的优先级。\n\n权重相同时，CSS遵循就近原则。也就是说靠近元素的样式具有最大的优先级，或者说排在最后的样式优先级最大。\n\nCSS定义了一个!important命令，该命令被赋予最大的优先级。也就是说不管权重如何以及样式位置的远近，!important都具有最大优先级。\n~~~\n\n\n\n### CSS特殊性（Specificity）\n\n关于CSS权重，我们需要一套计算公式来去计算，这个就是 CSS Specificity，我们称为CSS 特性或称非凡性，它是一个衡量CSS值优先级的一个标准 具体规范入如下：\n\nspecificity用一个四位的数 字串(CSS2是三位)来表示，更像四个级别，值从左到右，左面的最大，一级大于一级，数位之间没有进制，级别之间不可超越。 \n\n| 继承或者* 的贡献值      | 0,0,0,0 |\n| --------------- | ------- |\n| 每个元素（标签）贡献值为    | 0,0,0,1 |\n| 每个类，伪类贡献值为      | 0,0,1,0 |\n| 每个ID贡献值为        | 0,1,0,0 |\n| 每个行内样式贡献值       | 1,0,0,0 |\n| 每个!important贡献值 | ∞ 无穷大   |\n\n\n\n权重是可以叠加的\n\n 比如的例子：\n\n ~~~\ndiv ul  li   ------>      0,0,0,3\n\n.nav ul li   ------>      0,0,1,2\n\na:hover      -----—>      0,0,1,1\n\n.nav a       ------>      0,0,1,1   \n\n#nav p       ----->       0,1,0,1\n ~~~\n\n​   \n\n​      \n\n <img src=\"/media/w.jpg\" /> 注意： \n\n1.数位之间没有进制 比如说： 0,0,0,5 + 0,0,0,5 =0,0,0,10 而不是 0,0, 1, 0， 所以不会存在10个div能赶上一个类选择器的情况。\n\n2. 继承的 权重是 0\n\n总结优先级：\n\n1. 使用了 !important声明的规则。\n2. 内嵌在 HTML 元素的 style属性里面的声明。\n3. 使用了 ID 选择器的规则。\n4. 使用了类选择器、属性选择器、伪元素和伪类选择器的规则。\n5. 使用了元素选择器的规则。\n6. 只包含一个通用选择器的规则。\n7. 同一类选择器则遵循就近原则。\n\n~~~\n总结：权重是优先级的算法，层叠是优先级的表现\n~~~\n\n# 盒子模型（CSS重点）\n\n其实，CSS就三个大模块：  盒子模型 、 浮动 、 定位，其余的都是细节。要求这三部分，无论如何也要学的非常精通。  \n\n所谓盒子模型就是把HTML页面中的元素看作是一个矩形的盒子，也就是一个盛装内容的容器。每个矩形都由元素的内容、内边距（padding）、边框（border）和外边距（margin）组成。\n\n## 看透网页布局的本质\n\n网页布局中，我们是如何把里面的文字，图片，按照美工给我们的效果图排列的整齐有序呢？\n\n<img src=\"/media/t.png\" />\n\n\n\n牛奶是怎样运输，让消费者购买的呢？\n\n<img src=\"/media/m.jpg\" />\n\n\n\n我们说过，行内元素比如 文字 类似牛奶，也需要一个盒子把他们装起来，我们前面学过的双标签都是一个盒子。有了盒子，我们就可以随意的，自由的，摆放位置了。\n\n看透网页布局的本质：  把网页元素比如文字图片等等，放入盒子里面，然后利用CSS摆放盒子的过程，就是网页布局。\n\n\n\n<img src=\"/media/t1.png\" />\n\n\n\nCSS 其实没有太多逻辑可言 ， 类似我们小时候玩的积木,我们可以自由的，随意的摆放出我们想要的效果。\n\n<img src=\"/media/j.jpg\" width=\"300\" />\n\n## 盒子模型（Box Model）\n\n这里略过 老旧的ie盒子模型（IE6以下），对不起，我都没见过IE5的浏览器。 \n\n<img src=\"/media/d.jpg\" />\n\n。首先，我们来看一张图，来体会下什么是盒子模型。\n\n<img src=\"/media/box.png\"  width=\"700\" />\n\n所有的文档元素（标签）都会生成一个矩形框，我们成为元素框（element box），它描述了一个文档元素再网页布局汇总所占的位置大小。因此，<strong style=\"color: #f00;\">每个盒子除了有自己大小和位置外，还影响着其他盒子的大小和位置。</strong>\n\n<img src=\"/media/boxs.png\"  width=\"700\" />\n\n## 盒子边框（border）\n\n边框就是那层皮。  橘子皮。。柚子皮。。橙子皮。。。\n\n语法： \n\n~~~css\nborder : border-width || border-style || border-color \n~~~\n\n边框属性—设置边框样式（border-style）\n\n边框样式用于定义页面中边框的风格，常用属性值如下：\n\n~~~\nnone：没有边框即忽略所有边框的宽度（默认值）\n\nsolid：边框为单实线(最为常用的)\n\ndashed：边框为虚线  \n\ndotted：边框为点线\n\ndouble：边框为双实线\n~~~\n\n\n\n### 盒子边框写法总结表\n\n|        |                                          |                                          |\n| ------ | ---------------------------------------- | ---------------------------------------- |\n| 设置内容   | 样式属性                                     | 常用属性值                                    |\n| 上边框    | border-top-style:样式; border-top-width:宽度;border-top-color:颜色;border-top:宽度 样式 颜色; |                                          |\n| 下边框    | border-bottom-style:样式;border- bottom-width:宽度;border- bottom-color:颜色;border-bottom:宽度 样式 颜色; |                                          |\n| 左边框    | border-left-style:样式; border-left-width:宽度;border-left-color:颜色;border-left:宽度 样式 颜色; |                                          |\n| 右边框    | border-right-style:样式;border-right-width:宽度;border-right-color:颜色;border-right:宽度 样式 颜色; |                                          |\n| 样式综合设置 | border-style:上边 [右边 下边 左边];              | none无（默认）、solid单实线、dashed虚线、dotted点线、double双实线 |\n| 宽度综合设置 | border-width:上边 [右边 下边 左边];              | 像素值                                      |\n| 颜色综合设置 | border-color:上边 [右边 下边 左边];              | 颜色值、#十六进制、rgb(r,g,b)、rgb(r%,g%,b%)       |\n| 边框综合设置 | border:四边宽度 四边样式 四边颜色;                   |                                          |\n\n### 表格的细线边框\n\n以前学过的html表格边框很粗，这里只需要CSS一句话就可以美观起来。 让我们真的相信，CSS就是我们的白马王子（白雪公主）。\n\ntable{ border-collapse:collapse; }  collapse 单词是合并的意思\n\nborder-collapse:collapse; 表示边框合并在一起。\n\n### 圆角边框(CSS3)\n\n从此以后，我们的世界不只有矩形。radius 半径（距离）\n\n语法格式：\n\n~~~css\nborder-radius: 左上角  右上角  右下角  左下角;\n~~~\n\n课堂案例:\n\n~~~html\n<style>\n\t\tdiv {\n\t\t\twidth: 200px;\n\t\t\theight: 200px;\n\t\t\tborder: 1px solid red;\n\t\t}\n\t\tdiv:first-child {  /* 结构伪类选择器 选亲兄弟 */\n\t\t\tborder-radius: 10px;  /*  一个数值表示4个角都是相同的 10px 的弧度 */ \n\t\t}\n\n\t\tdiv:nth-child(2) {\n\t\t\t/*border-radius: 100px;    取宽度和高度 一半  则会变成一个圆形 */\n\t\t\tborder-radius: 50%;   /*  100px   50% 取宽度和高度 一半  则会变成一个圆形 */\n\t\t}\n\n\t\tdiv:nth-child(3) {\n\t\t\tborder-radius: 10px 40px;  /* 左上角  和 右下角  是 10px  右上角 左下角 40 对角线 */\n\t\t}\n\t\t\n\t\tdiv:nth-child(4) {\n\t\t\tborder-radius: 10px 40px  80px;   /* 左上角 10    右上角  左下角 40   右下角80 */\n\t\t}\n\t\tdiv:nth-child(5) {\n\t\t\tborder-radius: 10px 40px  80px  100px;   /* 左上角 10    右上角 40  右下角 80   左下角   右下角100 */\n\t\t}\n\t\tdiv:nth-child(6) {\n\t\t\tborder-radius: 100px;  \n\t\t\theight: 100px; \n\t\t}\n\t\tdiv:nth-child(7) {\n\t\t\tborder-radius: 100px 0;  \n\t\t}\t\n        </style>\n~~~\n\n\n\n## 内边距（padding）\n\npadding属性用于设置内边距。  是指 边框与内容之间的距离。\n\n\n\npadding-top:上内边距\n\npadding-right:右内边距\n\npadding-bottom:下内边距\n\npadding-left:左内边距\n\n <img src=\"/media/w.jpg\"/>注意：  后面跟几个数值表示的意思是不一样的。\n\n| 值的个数 | 表达意思                                     |\n| ---- | ---------------------------------------- |\n| 1个值  | padding：上下左右边距 比如padding: 3px; 表示上下左右都是3像素 |\n| 2个值  | padding: 上下边距 左右边距 比如 padding: 3px 5px; 表示 上下3像素 左右 5像素 |\n| 3个值  | padding：上边距 左右边距 下边距 比如 padding: 3px 5px 10px; 表示 上是3像素 左右是5像素 下是10像素 |\n| 4个值  | padding:上内边距 右内边距 下内边距 左内边距 比如: padding: 3px 5px 10px 15px; 表示 上3px 右是5px 下 10px 左15px 顺时针 |\n\n课堂案例：  新浪导航\n\n<img src=\"/media/al.gif\" />\n\n## 外边距（margin）\n\nmargin属性用于设置外边距。  设置外边距会在元素之间创建“空白”， 这段空白通常不能放置其他内容。\n\nmargin-top:上外边距\n\nmargin-right:右外边距\n\nmargin-bottom:下外边距\n\nmargin-left:上外边距\n\nmargin:上外边距 右外边距  下外边距  左外边\n\n取值顺序跟内边距相同。\n\n### 外边距实现盒子居中\n\n可以让一个盒子实现水平居中，需要满足一下两个条件：\n\n1. 必须是块级元素。     \n2. 盒子必须指定了宽度（width）\n\n然后就给**左右的外边距都设置为auto**，就可使块级元素水平居中。\n\n实际工作中常用这种方式进行网页布局，示例代码如下：\n\n~~~css\n.header{ width:960px; margin:0 auto;}\n~~~\n\n### 文字盒子居中图片和背景区别\n\n1.  文字水平居中是  text-align: center\n2.  盒子水平居中  左右margin 改为 auto \n\n~~~css\ntext-align: center; /*  文字居中水平 */\nmargin: 10px auto;  /* 盒子水平居中  左右margin 改为 auto 就阔以了 */\n~~~\n\n3. 插入图片 我们用的最多 比如产品展示类\n4. 背景图片我们一般用于小图标背景 或者 超大背景图片\n\n~~~css\nsection img {  \n\t\twidth: 200px;/* 插入图片更改大小 width 和 height */\n\t\theight: 210px;\n\t\tmargin-top: 30px;  /* 插入图片更改位置 可以用margin 或padding  盒模型 */\n\t\tmargin-left: 50px; /* 插入当图片也是一个盒子 */\n\t}\n\naside {\n\t\twidth: 400px;\n\t\theight: 400px;\n\t\tborder: 1px solid purple;\n\t\tbackground: #fff url(images/sun.jpg) no-repeat;\n\t\n\t\tbackground-size: 200px 210px; /*  背景图片更改大小只能用 background-size */\n\t\tbackground-position: 30px 50px; /* 背景图片更该位置 我用 background-position */\n\t}\n~~~\n\n\n\n### 清除元素的默认内外边距\n\n为了更方便地控制网页中的元素，制作网页时，可使用如下代码清除元素的默认内外边距： \n\n~~~css\n* {\n   padding:0;         /* 清除内边距 */\n   margin:0;          /* 清除外边距 */\n}\n~~~\n\n注意：  行内元素是只有左右外边距的，是没有上下外边距的。 内边距，在ie6等低版本浏览器也会有问题。\n\n我们尽量不要给行内元素指定上下的内外边距就好了。\n\n## 外边距合并\n\n使用margin定义块元素的垂直外边距时，可能会出现外边距的合并。\n\n### 相邻块元素垂直外边距的合并\n\n当上下相邻的两个块元素相遇时，如果上面的元素有下外边距margin-bottom，下面的元素有上外边距margin-top，则他们之间的垂直间距不是margin-bottom与margin-top之和，而是两者中的较大者。这种现象被称为相邻块元素垂直外边距的合并（也称外边距塌陷）。\n\n<img src=\"/media/www.png\" />\n\n解决方案：  避免就好了。\n\n### 嵌套块元素垂直外边距的合并\n\n对于两个嵌套关系的块元素，如果父元素没有上内边距及边框，则父元素的上外边距会与子元素的上外边距发生合并，合并后的外边距为两者中的较大者，即使父元素的上外边距为0，也会发生合并。\n\n<img src=\"/media/n.png\" />\n\n解决方案：\n\n1. 可以为父元素定义1像素的上边框或上内边距。\n2. 可以为父元素添加overflow:hidden。\n\n待续。。。。\n\n## content宽度和高度\n\n使用宽度属性width和高度属性height可以对盒子的大小进行控制。\n\nwidth和height的属性值可以为不同单位的数值或相对于父元素的百分比%，实际工作中最常用的是像素值。\n\n大多数浏览器，如Firefox、IE6及以上版本都采用了W3C规范，符合CSS规范的盒子模型的总宽度和总高度的计算原则是：\n\n```\n  /*外盒尺寸计算（元素空间尺寸）*/\n  Element空间高度 = content height + padding + border + margin\n  Element 空间宽度 = content width + padding + border + margin\n  /*内盒尺寸计算（元素实际大小）*/\n  Element Height = content height + padding + border （Height为内容高度）\n  Element Width = content width + padding + border （Width为内容宽度）\n```\n\n注意：\n\n1、宽度属性width和高度属性height仅适用于块级元素，对行内元素无效（ img 标签和 input除外）。\n\n2、计算盒子模型的总高度时，还应考虑上下两个盒子垂直外边距合并的情况。\n\n3、**如果一个盒子没有给定宽度/高度或者继承父亲的宽度/高度，则padding 不会影响本盒子大小**。\n\n## 盒子模型布局稳定性\n\n开始学习盒子模型，同学们最大的困惑就是， 分不清内外边距的使用，什么情况下使用内边距，什么情况下使用外边距？\n\n答案是：  其实他们大部分情况下是可以混用的。  就是说，你用内边距也可以，用外边距也可以。 你觉得哪个方便，就用哪个。\n\n但是，总有一个最好用的吧，我们根据稳定性来分，建议如下：\n\n按照 优先使用  宽度 （width）  其次 使用内边距（padding）    再次  外边距（margin）。   \n\n```\n  width >  padding  >   margin   \n```\n\n原因：\n\n1. margin 会有外边距合并 还有 ie6下面margin 加倍的bug（讨厌）所以最后使用。\n\n2. padding  会影响盒子大小， 需要进行加减计算（麻烦） 其次使用。\n\n3. width   没有问题（嗨皮）我们经常使用宽度剩余法 高度剩余法来做。\n\n   ​\n\n\n## CSS3盒模型\n\nCSS3中可以通过box-sizing 来指定盒模型，即可指定为content-box、border-box，这样我们计算盒子大小的方式就发生了改变。\n\n可以分成两种情况：\n\n1、box-sizing: content-box  盒子大小为 width + padding + border   content-box:此值为其默认值，其让元素维持W3C的标准Box Mode\n\n2、box-sizing: border-box  盒子大小为 width    就是说  padding 和 border 是包含到width里面的\n\n注：上面的标注的width指的是CSS属性里设置的width: length，content的值是会自动调整的。\n\n~~~css\ndiv:first-child {\n\t\t\twidth: 200px;\n\t\t\theight: 200px;\n\t\t\tbackground-color: pink; \n\t\t\tbox-sizing: content-box;  /*  就是以前的标准盒模型  w3c */\n\t\t\tpadding: 10px;\n\t\t\tborder: 15px solid red;\n\t\t\t/* 盒子大小为 width + padding + border   content-box:此值为其默认值，其让元素维持W3C的标准Box Mode */\n\t\t}\n\t\tdiv:last-child {\n\t\t\twidth: 200px;\n\t\t\theight: 200px;\n\t\t\tbackground-color: purple;\n\t\t\tpadding: 10px;\n\t\t\tbox-sizing: border-box;   /* padding border  不撑开盒子 */\n\t\t\tborder: 15px solid red;\n\t\t\t/* margin: 10px; */\n\t\t\t/* 盒子大小为 width    就是说  padding 和 border 是包含到width里面的 */\n}\n~~~\n\n## 盒子阴影\n\n语法格式：\n\n~~~css\nbox-shadow:水平阴影 垂直阴影 模糊距离 阴影尺寸 阴影颜色  内/外阴影；\n~~~\n\n![1498467567011](/media/1498467567011.png)\n\n1. 前两个属性是必须写的。其余的可以省略。\n2. 外阴影 (outset) 但是不能写    默认      想要内阴影  inset \n\n~~~css\ndiv {\n\t\t\twidth: 200px;\n\t\t\theight: 200px;\n\t\t\tborder: 10px solid red;\n\t\t\t/* box-shadow: 5px 5px 3px 4px rgba(0, 0, 0, .4);  */\n\t\t\t/* box-shadow:水平位置 垂直位置 模糊距离 阴影尺寸（影子大小） 阴影颜色  内/外阴影； */\n\t\t\tbox-shadow: 0 15px 30px  rgba(0, 0, 0, .4);\n\t\t\t\n}\n~~~\n\n# 浮动(float)\n\n## 普通流(normal flow)\n\n这个单词很多人翻译为 文档流 ， 字面翻译  普通流 或者标准流都可以。\n\n前面我们说过，网页布局的核心，就是用CSS来摆放盒子位置。如何把盒子摆放到合适的位置？  \n\nCSS的定位机制有3种：普通流（标准流）、浮动和定位。\n\nhtml语言当中另外一个相当重要的概念----------标准流！或者普通流。普通流实际上就是一个网页内标签元素正常从上到下，从左到右排列顺序的意思，比如块级元素会独占一行，行内元素会按顺序依次前后排列；按照这种大前提的布局排列之下绝对不会出现例外的情况叫做普通流布局。\n\n<img src=\"/media/t.jpg\" />\n\n## 浮动(float)\n\n浮动最早是用来控制图片，以便达到其他元素（特别是文字）实现“环绕”图片的效果。\n\n<img src=\"/media/l.png\" style=\"width: 600px; border: 2px solid #000;\"/>\n\n后来，我们发现浮动有个很有意思的事情：就是让任何盒子可以一行排列,因此我们就慢慢的偏离主题，用浮动的特性来布局了。（CSS3已经我们真正意义上的网页布局，具体CSS3我们会详细解释）\n\n<img src=\"/media/d.png\" />\n\n## 什么是浮动？\n\n元素的浮动是指设置了浮动属性的元素会脱离标准普通流的控制，移动到其父元素中指定位置的过程。\n\n在CSS中，通过float属性来定义浮动，其基本语法格式如下：\n\n~~~\n选择器{float:属性值;}\n~~~\n\n| 属性值   | 描述         |\n| ----- | ---------- |\n| left  | 元素向左浮动     |\n| right | 元素向右浮动     |\n| none  | 元素不浮动（默认值） |\n\n## 浮动详细内幕特性\n\n浮动脱离标准流，不占位置，会影响标准流。浮动只有左右浮动。\n\n```\n浮动首先创建包含块的概念（包裹）。就是说， 浮动的元素总是找理它最近的父级元素对齐。但是不会超出内边距的范围。 \n```\n\n\n   <img src=\"/media/one.jpg\" width=\"500\" /> \n\n\n```\n浮动的元素排列位置，跟上一个元素（块级）有关系。如果上一个元素有浮动，则A元素顶部会和上一个元素的顶部对齐；如果上一个元素是标准流，则A元素的顶部会和上一个元素的底部对齐。\n```\n\n\n  <img src=\"/media/two.jpg\" width=\"400\" />\n\n\n```\n由2可以推断出，一个父盒子里面的子盒子，如果其中一个子级有浮动的，则其他子级都需要浮动。这样才能一行对齐显示。\n```\n\n```\n元素添加浮动后，元素会具有行内块元素的特性。元素的大小完全取决于定义的大小或者默认的内容多少浮动根据元素书写的位置来显示相应的浮动。\n```\n\n总结：  浮动 --->    \n\n浮动的目的就是为了让多个块级元素同一行上显示。\n\nfloat      浮 漏 特   \n\n浮：    加了浮动的元素盒子是浮起来的，漂浮在其他的标准流盒子上面。\n漏：    加了浮动的盒子，不占位置的，它浮起来了，它原来的位置漏 给了标准流的盒子。\n特：    特别注意，首先浮动的盒子需要和标准流的父级搭配使用， 其次 特别的注意浮动可以使元素显示模式体现为行内块特性。\n\n# 版心和布局流程\n\n阅读报纸时容易发现，虽然报纸中的内容很多，但是经过合理地排版，版面依然清晰、易读。同样，在制作网页时，要想使页面结构清晰、有条理，也需要对网页进行“排版”。\n\n“版心”(可视区) 是指网页中主体内容所在的区域。一般在浏览器窗口中水平居中显示，常见的宽度值为960px、980px、1000px、1200px等。\n\n## 布局流程\n\n为了提高网页制作的效率，布局时通常需要遵守一定的布局流程，具体如下：\n\n1、确定页面的版心（可视区）。\n\n2、分析页面中的行模块，以及每个行模块中的列模块。\n\n3、制作HTML结构 。\n\n4、CSS初始化，然后开始运用盒子模型的原理，通过DIV+CSS布局来控制网页的各个模块。\n\n## 一列固定宽度且居中\n\n<img src=\"/media/yl.jpg\" width=\"400\" />\n\n最普通的，最为常用的结构\n\n## 两列左窄右宽型\n\n<img src=\"/media/ll.jpg\" width=\"400\" />\n\n比如小米    <a href=\"http://www.mi.com\" target=\"_blank\"> 小米官网 </a>\n\n## 通栏平均分布型\n\n<img src=\"/media/tl.jpg\" width=\"600\" />\n\n比如锤子    <a href=\"http://www.smartisan.com/\" target=\"_blank\"> 锤子官网 </a>\n\n# 清除浮动\n\n人生就像乘坐北京地铁一号线：\n\n途经国贸，羡慕繁华；\n\n途经天安门，幻想权力；\n\n途经金融街，梦想发财；\n\n经过公主坟，遥想华丽家族；\n\n经过玉泉路，依然雄心勃勃…\n\n这时，有个声音飘然入耳:乘客你好,八宝山马上就要到了！\n\n顿时醒悟：人生苦短，有始有终。 \n\n好比我们的浮动，有浮动开始，则就应该有浮动结束。\n\n## 为什么要清除浮动\n\n我们前面说过，浮动本质是用来做一些文字混排效果的，但是被我们拿来做布局用，则会有很多的问题出现， 但是，你不能说浮动不好 <img src=\"/media/wq.jpg\" height=\"100\" />。  \n\n由于浮动元素不再占用原文档流的位置，所以它会对后面的元素排版产生影响，为了解决这些问题，此时就需要在该元素中清除浮动。\n\n准确地说，并不是清除浮动，而是**清除浮动后造成的影响**\n\n如果浮动一开始就是一个美丽的错误，那么请用正确的方法挽救它。\n\n\n\n## 清除浮动本质\n\n清除浮动主要为了解决父级元素因为子级浮动引起内部高度为0 的问题。\n\n<img src=\"/media/n.jpg\" />\n\n<img src=\"/media/no.jpg\" />\n\n<img src=\"/media/kc.jpg\" />\n\n## 清除浮动的方法\n\n其实本质叫做闭合浮动更好一些, 记住，清除浮动就是把浮动的盒子圈到里面，让父盒子闭合出口和入口不让他们出来影响其他元素。\n\n在CSS中，clear属性用于清除浮动，其基本语法格式如下：\n\n```\n选择器{clear:属性值;}\n```\n\n| 属性值   | 描述                    |\n| ----- | --------------------- |\n| left  | 不允许左侧有浮动元素（清除左侧浮动的影响） |\n| right | 不允许右侧有浮动元素（清除右侧浮动的影响） |\n| both  | 同时清除左右两侧浮动的影响         |\n\n### 额外标签法\n\n```html\n是W3C推荐的做法是通过在浮动元素末尾添加一个空的标签例如 <div style=”clear:both”></div>，或则其他标签br等亦可。\n```\n\n优点： 通俗易懂，书写方便\n\n缺点： 添加许多无意义的标签，结构化较差。  我只能说，w3c你推荐的方法我不接受，你不值得拥有。。。\n\n### 父级添加overflow属性方法\n\n可以通过触发BFC的方式，可以实现清除浮动效果。（BFC后面讲解）\n\n~~~css\n可以给父级添加： overflow为 hidden|auto|scroll  都可以实现。\n~~~\n优点：  代码简洁\n\n缺点：  内容增多时候容易造成不会自动换行导致内容被隐藏掉，无法显示需要溢出的元素。\n\n### 使用after伪元素清除浮动\n\n**:after 方式为空元素的升级版，好处是不用单独加标签了** \n\n使用方法：\n\n```css\n .clearfix:after {  content: \".\"; display: block; height: 0; clear: both; visibility: hidden;  }   \n\n .clearfix {*zoom: 1;}   /* IE6、7 专有 */\n```\n\n优点： 符合闭合浮动思想  结构语义化正确\n\n缺点： 由于IE6-7不支持:after，使用 zoom:1触发 hasLayout。\n\n代表网站： 百度、淘宝网、网易等\n\n<img src=\"/media/163.png\" style=\"border: 1px dashed #3c3c3c;\"/>\n\n\n\n注意： content:\".\"  里面尽量跟一个小点，或者其他，尽量不要为空，否则再firefox 7.0前的版本会有生成空格。\n\n\n### 使用before和after双伪元素清除浮动\n\n使用方法：\n\n```css\n.clearfix:before,.clearfix:after { \n  content:\"\";\n  display:table;  /* 这句话可以出发BFC BFC可以清除浮动,BFC我们后面讲 */\n}\n.clearfix:after {\n clear:both;\n}\n.clearfix {\n  *zoom:1;\n}\n```\n\n优点：  代码更简洁\n\n缺点：  由于IE6-7不支持:after，使用 zoom:1触发 hasLayout。\n\n代表网站： 小米、腾讯等\n\n \n\n\n\n# Photoshop图像处理专家\n\n![1498465020015](/media/1498465020015.png)\n\nPS 工具是我们使用频率比较高的软件之一， 我们学习PS目的不是为了设计海报做电商和UI的，而是要求：\n\n1. 会简单的抠图\n2. 会简单的修改PSD效果图\n3. **熟练的切图**\n4. 能和网站美工美眉有共同话题。。。。。\n\n## Photoshop基本使用\n\n## PS界面组成：\n\n菜单栏、选项栏、工具栏、浮动面板（拖拽名称，可单独操作面板）、绘图窗口\n​    窗口菜单，可显示隐藏所有面板\n\n工作区：（新建）\n\n调整浮动面板\n\n<img src=\"/media/jiemian.png\"/>\n\n## 基本操作\n\n文件下拉菜单：\n​    1、新建      新建文档      CTRL+N\n\n单位：像素   厘米   毫米\n\n屏幕显示： 单位  像素      72像素/英寸    RGB颜色模式\n\n<img src=\"/media/huabu.png\"/>\n\n2、关闭文档     CTRL+W \n\n3、存储    CTRL+S    （替存）\n\n4、存储为  CTRL+SHIFT+S    另存一份文件\n\n<img src=\"/media/baocun.png\"/>\n\n5、格式：\n​      .psd     PS源文件格式   图层、文字、样式等，可再次编辑\n​      （给自己）\n​      .jpg     有损压缩格式   （给客户）  品质  最高12\n\n6、文件打开：\n​      1）文件下拉菜单-打开（CTRL+O欧）\n\n​      2）双击软件空白处也能打开\n​    \n\n\n\n## 移动工具 V   \n\n1、不同文件之间拖拽图像。\n\n\n\n## 自由变形\n\nctrl + T 可以改变图像的大小\n\n<img src=\"/media/bianhuan.png\" />\n\n按下enter 回车确认操作。\n\n## 图层操作(重点)\n\n 图层面板快捷键   F7  其实图层就是一张张透明的纸  可以实现叠加问题。\n\n<img src=\"/media/tuceng.png\" />\n\n 图层选择： 使用移动工具V \n\n 1、图层缩览图判断\n\n 2、按住CTRL,在目标图像上单击\n\n 3、将光标放置在目标图像上右键，选择图层名称\n\n图层面板中加选图层：\n\n1、按SHIFT，单击另一目标图层     中间所有图层被选中\n\n2、按CTRL，单击另一目标图层     只选中目标图层\n\n复制图层：选中目标图层后（移动工具状态下）\n\n   1、按ALT拖拽图像\n\n   2、CTRL+J      （重合）\n\n案例： 摆放一个自行车\n\n<img src=\"/media/bike.jpg\" />\n\n## 图层编组\n\n选中目标图层，CTRL+G   \n\n取消编组：CTRL+SHIFT+G\n\n双击图层名称可重新命名\n\n双击组名称，可命名组\n\n  移动工具V选择组或图层时，需设置选项栏\n\n![1498465862231](/media/1498465862231.png)\n\n## 图层上下位置移动\n\n1、选中目标图层，在图层面拖拽\n\n2、CTRL+]    向上移动图层\n​       CTRL+[    向下移动图层\n\n3、CTRL+SHIFT+]   图层置顶\n​       CTRL+SHIFT+[   图层置底\n\n移动选区或图像时：\n\n移动过程中，没释放鼠标，按住SHIFT，可同一水平线、同一垂线、45度移动。\n\nps中的撤销操作是：\n\nctrl+z  撤销一步\n\nctrl+alt+z  撤销多步\n\n## 图层合并\n\nctrl+e 可以合并图层\n\n<img src=\"/media/hebing.png\" />\n\n## 图层透明度\n\n不透明度：设置图层的不透明程度    0%完全透明，不可见\n\n​                                  100%完全不透明，真实可见\n\n填充：与不透明度效果类似\n\n![1498465905203](/media/1498465905203.png))\n\n键盘数字键，可快速设置透明度数值     \n\n## 矩形选区工具 M\n\n用来选择某部分区域  我们成为选区工具 \n\n<img src=\"/media/gongjuxiang.png\" />\n\n\n\n取消选区：  ctrl+d \n\n\n\n## 颜色填充\n\n<img src=\"/media/yanse1.png\" />\n\n<img src=\"/media/yanse2.png\" />\n\n\n\n<img src=\"/media/miqi.jpg\"/>\n\n## 套索工具 L\n\n1、套索工具      L  在屏幕上拖拽鼠标左键，释放后生成选区\n\n2、多边形套索    L  连续单击绘制多边形选区\n\n​                  闭合方法：1、单击起始点  2、双击任意位置\n\n​                  DELETE删除当前点\n\n<img src=\"/media/shiboguan.jpg\" />\n\n## 磁性套索 L  \n\nL   在颜色交界的位置单击后拖动。单击起始点后，生成选区。      \n\n<img src=\"/media/cixing.jpg\" />\n\n## 魔棒工具   W\n\n以单击位置为选择色，选择相似颜色生成选区。\n\n![1498465928343](/media/1498465928343.png) \n\n容差：选择颜色的范围     容差小，颜色选择精确。    0-255\n\n连续：勾选连续时，相连颜色生成选区。\n\n​     不勾选，画面中所有相似颜色被选中生成选区。\n\n按SHIFT在未生成选区位置单击，可选区相加。\n\n选区反选：CTRL+SHIFT+I \n\n\n\n## 选区布尔运算\n\n![1498465944087](/media/1498465944087.png)\n\n选区面积大小的变化。\n\n新选区：保持选中状态\n\n添加到选区：相加运算（按住SHIFT再绘制选区）\n\n从选区减去：相减（按住ALT再绘制选区）\n\n与选区交叉：重合部分保留。（按住ALT+SHIFT再绘制选区）\n\n梦幻星球\n\n<img src=\"/media/chengshi.jpg\" />\n\n## 钢笔工具：   P\n\n作用：绘制路径，生成选区，抠图。\n\n组成;路径线和锚点\n\n绘制路径后，CTRL+回车，生成选区。\n\n路径类型：\n\n直线型路径：连续单击\n\n曲线型路径：第一点单击，第二点拖动鼠标。\n\n<img src=\"/media/jiu.png\"/>\n\n\n\n\n\n## 文字工具\n\nT  可以直接输入文字\n\n##  Photoshop 切图\n\nPS切图 可以 分为 手动 利用切片切图 以及 利用PS的插件快速切图\n\n### 切片工具\n\n\n\n![1498466173246](/media/1498466173246.png)\n\n\n\n\n\n\n\n1. 利用切片工具手动划出\n\n2. 图层菜单---新建基于图层的切片\n\n3. 利用标尺   基于参考线的切片 （选择切片工具）\n\n   ​\n\n   ![1498466734205](/media/1498466734205.png)\n\n4. 先选个一个整个的切片，  切片选择工具-- 属性面板中有 “划分”   --可以等分数平分切图\n\n\n导出切片： 文件-- 存储为web设备所用格式\n\n### 辅助线和切片使用及清除\n\n视图菜单-- 清除 辅助线/ 清除切片\n\n### 切图插件\n\nCutterman是一款运行在photoshop中的插件，能够自动将你需要的图层进行输出， 以替代传统的手工 \"导出web所用格式\" 以及使用切片工具进行挨个切图的繁琐流程。 它支持各种各样的图片尺寸、格式、形态输出，方便你在pc、ios、Android等端上使用。 它不需要你记住一堆的语法、规则，纯点击操作，方便、快捷，易于上手。\n\n官网: http://www.cutterman.cn/zh/cutterman\n\n注意： cutterman插件要求你的ps 必须是完整版，不能是绿色版，所以大家需要从新安装完整版本。\n\n<img src=\"/media/sample1.gif\" />\n\n# 项目案例： 学成网\n\n案例练习目的是总结以前的css和html\n\n还有ps的使用。\n\n制作步骤：\n\n1. 准备相关文件。（内部样式表) html文件(index.html)   图片文件\n2. 准备CSS 初始化。 书写结构和样式\n3. 确定版心（是1200像素)和各个模块。\n\n\n# 定位(position)\n\n如果，说浮动， 关键在一个 “浮” 字上面， 那么 我们的定位，关键在于一个 “位” 上。\n\nPS: 定位是我们CSS算是数一数二难点的了，但是，你务必要学好它，我们CSS离不开定位，特别是后面的js特效，天天和定位打交道。不要抵触它，反而要爱上它，它可以让我们工作更加轻松哦！\n\n## 为什么要用定位？\n\n那么定位，最长运用的场景再那里呢？   来看几幅图片，你一定会有感悟！\n\n第一幅图， 小黄色块可以再图片上移动：\n\n<img src=\"/media/1.gif\" style=\"border: 1px dashed #3c3c3c;\"/>\n\n第二幅图， 左右箭头压住图片：\n\n<img src=\"/media/2.gif\" style=\"border: 1px dashed #3c3c3c;\"/>\n\n第三幅图,  hot 再盒子外面多出一块，更加突出：\n\n<img src=\"/media/it.png\" style=\"border: 1px dashed #3c3c3c;\"/>\n\n以上三个小地方，如果用标准流或者浮动，实现会比较复杂或者难以实现，此时我们用定位来做，just soso！\n\n## 元素的定位属性\n\n元素的定位属性主要包括定位模式和边偏移两部分。\n\n1、边偏移\n\n| 边偏移属性  | 描述                      |\n| ------ | ----------------------- |\n| top    | 顶端偏移量，定义元素相对于其父元素上边线的距离 |\n| bottom | 底部偏移量，定义元素相对于其父元素下边线的距离 |\n| left   | 左侧偏移量，定义元素相对于其父元素左边线的距离 |\n| right  | 右侧偏移量，定义元素相对于其父元素右边线的距离 |\n\n也就说，以后定位要和这边偏移搭配使用了， 比如 top: 100px;  left: 30px; 等等\n\n2、定位模式(定位的分类)\n\n在CSS中，position属性用于定义元素的定位模式，其基本语法格式如下：\n\n选择器{position:属性值;}\n\nposition属性的常用值\n\n| 值        | 描述                       |\n| -------- | ------------------------ |\n| static   | 自动定位（默认定位方式）             |\n| relative | 相对定位，相对于其原文档流的位置进行定位     |\n| absolute | 绝对定位，相对于其上一个已经定位的父元素进行定位 |\n| fixed    | 固定定位，相对于浏览器窗口进行定位        |\n\n## 静态定位(static)\n\n静态定位是所有元素的默认定位方式，当position属性的取值为static时，可以将元素定位于静态位置。 所谓静态位置就是各个元素在HTML文档流中默认的位置。\n\n上面的话翻译成白话：  就是网页中所有元素都默认的是静态定位哦！ 其实就是标准流的特性。\n\n在静态定位状态下，无法通过边偏移属性（top、bottom、left或right）来改变元素的位置。\n\nPS： 静态定位其实没啥可说的。\n\n## 相对定位relative(自恋型)\n\n~~~\n小笑话： \n刚刚看到一个超级超级帅的帅哥，看得我都忍不住想和他搞基了。世间怎会有如此之完美的男人。我和他就这样一动不动的对视着，就仿佛一见钟情。时间也在这一瞬间停止了。直到我的手麻了。才恋恋不舍的放下镜子。。。。\n~~~\n\n<img src=\"/media/smail.gif\" width=\"100\"/>\n\n相对定位是将元素相对于它在标准流中的位置进行定位，当position属性的取值为relative时，可以将元素定位于相对位置。\n\n对元素设置相对定位后，可以通过边偏移属性改变元素的位置，但是它在文档流中的位置仍然保留。如下图所示，即是一个相对定位的效果展示：\n\n<img src=\"/media/r.png\"  />\n\n注意：   \n\n1. 相对定位最重要的一点是，它可以通过边偏移移动位置，但是原来的所占的位置，继续占有。\n2. 其次，每次移动的位置，是以自己的左上角为基点移动（相对于自己来移动位置）\n\n就是说，相对定位的盒子仍在标准流中，它后面的盒子仍以标准流方式对待它。（相对定位不脱标）\n\n如果说浮动的主要目的是 让多个块级元素一行显示，那么定位的主要价值就是 移动位置， 让盒子到我们想要的位置上去。\n\n## 绝对定位absolute (拼爹型)\n\n~~~\n小笑话：\n\n吃早饭时，老婆往儿子碗里放了两个煎蛋，儿子全给了我，还一本正经地说：“爸爸，多吃点，男人养家不容易。” <br/>\n\n我一阵感动，刚想夸他两句。 \n\n儿子接着说：“以后全靠你让我拼爹了！”\n~~~\n\n<img src=\"/media/smail.gif\" width=\"100\"/>\n\n　[注意] 如果文档可滚动，绝对定位元素会随着它滚动，因为元素最终会相对于正常流的某一部分定位。\n\n当position属性的取值为absolute时，可以将元素的定位模式设置为绝对定位。\n\n注意：    绝对定位最重要的一点是，它可以通过边偏移移动位置，但是它完全脱标，完全不占位置。\n\n### 父级没有定位\n\n若所有父元素都没有定位，以浏览器为准对齐(document文档)。\n\n<img src=\"/media/ab.png\" />\n\n### 父级有定位\n\n绝对定位是将元素依据最近的已经定位（绝对、固定或相对定位）的父元素（祖先）进行定位。 \n\n<img src=\"/media/ab1.png\" />\n\n\n\n### 子绝父相\n\n这个“子绝父相”太重要了，是我们学习定位的口诀，时时刻刻记住的。\n\n这句话的意思是 子级是绝对定位的话， 父级要用相对定位。\n\n首先， 我们说下， 绝对定位是将元素依据最近的已经定位绝对、固定或相对定位）的父元素（祖先）进行定位。\n\n就是说， 子级是绝对定位，父亲只要是定位即可（不管父亲是绝对定位还是相对定位，甚至是固定定位都可以），就是说， 子绝父绝，子绝父相都是正确的。\n\n但是，在我们网页布局的时候， 最常说的 子绝父相是怎么来的呢？ 请看如下图：\n\n<img src=\"/media/zi.png\"  style=\"border: 1px dashed #3c3c3c;\"/>\n\n\n\n所以，我们可以得出如下结论：\n\n因为子级是绝对定位，不会占有位置， 可以放到父盒子里面的任何一个地方。\n\n父盒子布局时，需要占有位置，因此父亲只能是 相对定位. \n\n这就是子绝父相的由来。\n\n## 绝对定位的盒子水平/垂直居中\n\n普通的盒子是左右margin 改为 auto就可， 但是对于绝对定位就无效了\n\n定位的盒子也可以水平或者垂直居中，有一个算法。\n\n1. 首先left 50%   父盒子的一半大小\n\n2. 然后走自己外边距负的一半值就可以了 margin-left。\n\n   ​\n\n## 固定定位fixed(认死理型)\n\n固定定位是绝对定位的一种特殊形式，类似于 正方形是一个特殊的 矩形。它以浏览器窗口作为参照物来定义网页元素。当position属性的取值为fixed时，即可将元素的定位模式设置为固定定位。\n\n当对元素设置固定定位后，它将脱离标准文档流的控制，始终依据浏览器窗口来定义自己的显示位置。不管浏览器滚动条如何滚动也不管浏览器窗口的大小如何变化，该元素都会始终显示在浏览器窗口的固定位置。\n\n固定定位有两点：\n\n1. 固定定位的元素跟父亲没有任何关系，只认浏览器。\n2. 固定定位完全脱标，不占有位置，不随着滚动条滚动。\n\n\n\n记忆法：  就类似于孙猴子， 无父无母，好不容易找到一个可靠的师傅（浏览器），就听的师傅的，别的都不听。\n\n<img src=\"/media/sun.jpg\" width=\"100\">\n\nie6等低版本浏览器不支持固定定位。\n\n## 叠放次序（z-index）\n\n当对多个元素同时设置定位时，定位元素之间有可能会发生重叠。\n\n<img src=\"/media/zzz.png\" />\n\n在CSS中，要想调整重叠定位元素的堆叠顺序，可以对定位元素应用z-index层叠等级属性，其取值可为正整数、负整数和0。\n\n比如：  z-index: 2;\n\n注意：\n\n1. z-index的默认属性值是0，取值越大，定位元素在层叠元素中越居上。\n\n2. 如果取值相同，则根据书写顺序，后来居上。\n\n3. 后面数字一定不能加单位。\n\n4. 只有相对定位，绝对定位，固定定位有此属性，其余标准流，浮动，静态定位都无此属性，亦不可指定此属性。\n\n\n\n# 四种定位总结\n\n| 定位模式         | 是否脱标占有位置   | 是否可以使用边偏移 | 移动位置基准           |\n| ------------ | ---------- | --------- | ---------------- |\n| 静态static     | 不脱标，正常模式   | 不可以       | 正常模式             |\n| 相对定位relative | 不脱标，占有位置   | 可以        | 相对自身位置移动（自恋型）    |\n| 绝对定位absolute | 完全脱标，不占有位置 | 可以        | 相对于定位父级移动位置（拼爹型） |\n| 固定定位fixed    | 完全脱标，不占有位置 | 可以        | 相对于浏览器移动位置（认死理型） |\n\n# 定位模式转换\n\n跟 浮动一样， 元素添加了 绝对定位和固定定位之后， 元素模式也会发生转换， 都转换为 行内块模式，\n\n** 因此 比如 行内元素 如果添加了 绝对定位或者 固定定位后 浮动后，可以不用转换模式，直接给高度和宽度就可以了。**\n\n# 元素的显示与隐藏\n\n在CSS中有三个显示和隐藏的单词比较常见，我们要区分开，他们分别是 display visibility 和 overflow。\n\n他们的主要目的是让一个元素在页面中消失，但是不在文档源码中删除。 最常见的是网站广告，当我们点击类似关闭不见了，但是我们重新刷新页面，它们又会出现和你玩躲猫猫！！\n\n## display 显示\n\ndisplay 设置或检索对象是否及如何显示。\n\ndisplay : none 隐藏对象 与它相反的是 display:block 除了转换为块级元素之外，同时还有显示元素的意思。\n\n特点： 隐藏之后，不再保留位置。\n\n## visibility 可见性\n\n设置或检索是否显示对象。\n\nvisible : 　对象可视\n\nhidden : 　对象隐藏\n\n特点： 隐藏之后，继续保留原有位置。（停职留薪）\n\n## overflow 溢出\n\n检索或设置当对象的内容超过其指定高度及宽度时如何管理内容。\n\nvisible : 　不剪切内容也不添加滚动条。\n\nauto : 　 超出自动显示滚动条，不超出不显示滚动条\n\nhidden : 　不显示超过对象尺寸的内容，超出的部分隐藏掉\n\nscroll : 　不管超出内容否，总是显示滚动条\n\n# CSS高级技巧\n\n## CSS用户界面样式\n\n 所谓的界面样式， 就是更改一些用户操作样式， 比如 更改用户的鼠标样式， 表单轮廓等。但是比如滚动条的样式改动受到了很多浏览器的抵制，因此我们就放弃了。 防止表单域拖拽\n\n### 鼠标样式cursor\n\n 设置或检索在对象上移动的鼠标指针采用何种系统预定义的光标形状。 \n\n```html\ncursor :  default  小白 | pointer  小手  | move  移动  |  text  文本\n```\n\n 鼠标放我身上查看效果哦：\n\n```html\n<ul>\n  <li style=\"cursor:default\">我是小白</li>\n  <li style=\"cursor:pointer\">我是小手</li>\n  <li style=\"cursor:move\">我是移动</li>\n  <li style=\"cursor:text\">我是文本</li>\n</ul>\n```\n\n 尽量不要用hand  因为 火狐不支持     pointer ie6以上都支持的尽量用\n\n### 轮廓 outline\n\n 是绘制于元素周围的一条线，位于边框边缘的外围，可起到突出元素的作用。\n\n~~~css\n outline : outline-color ||outline-style || outline-width \n~~~\n\n 但是我们都不关心可以设置多少，我们平时都是去掉的。\n\n最直接的写法是 ：  outline: 0;   或者  outline: none;\n\n```html\n <input  type=\"text\"  style=\"outline: 0;\"/>\n```\n\n### 防止拖拽文本域resize\n\nresize：none    这个单词可以防止 火狐 谷歌等浏览器随意的拖动 文本域。\n\n右下角可以拖拽： \n\n<textarea></textarea>\n\n右下角不可以拖拽： \n\n```html\n<textarea  style=\"resize: none;\"></textarea>\n```\n\n## vertical-align 垂直对齐\n\n以前我们讲过让带有宽度的块级元素居中对齐，是margin: 0 auto;\n\n以前我们还讲过让文字居中对齐，是 text-align: center;\n\n但是我们从来没有讲过有垂直居中的属性， 我们的妈妈一直很担心我们的垂直居中怎么做。\n\nvertical-align 垂直对齐， 这个看上去很美好的一个属性， 实际有着不可捉摸的脾气，否则我们也不会这么晚来讲解。\n\n<img src=\"/media/xian.jpg\" />\n\n~~~css\nvertical-align : baseline |top |middle |bottom \n~~~\n\n设置或检索对象内容的垂直对其方式。 \n\nvertical-align 不影响块级元素中的内容对齐，它只针对于 行内元素或者行内块元素，特别是行内块元素， **通常用来控制图片/表单与文字的对齐**。\n\n![1498467742995](/media/1498467742995.png)\n\n\n\n### 图片、表单和文字对齐\n\n所以我们知道，我们可以通过vertical-align 控制图片和文字的垂直关系了。 默认的图片会和文字基线对齐。\n\n### 去除图片底侧空白缝隙\n\n有个很重要特性你要记住： 图片或者表单等行内块元素，他的底线会和父级盒子的基线对齐。这样会造成一个问题，就是图片底侧会有一个空白缝隙。\n\n<img src=\"/media/3.jpg\" />\n\n解决的方法就是：  \n\n1. 给img vertical-align:middle | top等等。  让图片不要和基线对齐。<img src=\"/media/1633.png\"  width=\"500\"  style=\"border: 1px dashed #ccc;\" />\n\n\n1. 给img 添加 display：block; 转换为块级元素就不会存在问题了。<img src=\"/media/sina1.png\" width=\"500\" style=\"border: 1px dashed #ccc;\"/>\n\n# 溢出的文字隐藏\n\n## word-break:自动换行\n\nnormal   使用浏览器默认的换行规则。\n\nbreak-all   允许在单词内换行。\n\nkeep-all    只能在半角空格或连字符处换行。\n\n主要处理英文单词\n\n## white-space\n\nwhite-space设置或检索对象内文本显示方式。通常我们使用于强制一行显示内容 \n\nnormal : 　默认处理方式\nnowrap : 　强制在同一行内显示所有文本，直到文本结束或者遭遇br标签对象才换行。\n\n可以处理中文\n\n## text-overflow 文字溢出\n\ntext-overflow : clip | ellipsis\n\n设置或检索是否使用一个省略标记（...）标示对象内文本的溢出\n\nclip : 　不显示省略标记（...），而是简单的裁切 \n\nellipsis : 　当对象内文本溢出时显示省略标记（...）\n\n注意一定要首先强制一行内显示，再次和overflow属性  搭配使用\n\n## CSS精灵技术（sprite） 小妖精  雪碧\n\n### 精灵技术产生的背景\n\n<img src=\"/media/sss.png\" />\n\n图所示为网页的请求原理图，当用户访问一个网站时，需要向服务器发送请求，网页上的每张图像都要经过一次请求才能展现给用户。\n\n然而，一个网页中往往会应用很多小的背景图像作为修饰，当网页中的图像过多时，服务器就会频繁地接受和发送请求，这将大大降低页面的加载速度。为了有效地减少服务器接受和发送请求的次数，提高页面的加载速度，出现了CSS精灵技术（也称CSS Sprites、CSS雪碧）。\n\n### 精灵技术本质\n\n简单地说，CSS精灵是一种处理网页背景图像的方式。它将一个页面涉及到的所有零星背景图像都集中到一张大图中去，然后将大图应用于网页，这样，当用户访问该页面时，只需向服务发送一次请求，网页中的背景图像即可全部展示出来。通常情况下，这个由很多小的背景图像合成的大图被称为精灵图（雪碧图），如下图所示为京东网站中的一个精灵图。\n\n<img src=\"/media/jds.png\"  style=\"border: 1px dashed #ccc;\" />\n\n### 精灵技术的使用\n\nCSS 精灵其实是将网页中的一些背景图像整合到一张大图中（精灵图），然而，各个网页元素通常只需要精灵图中不同位置的某个小图，要想精确定位到精灵图中的某个小图，就需要使用CSS的background-image、background-repeat和background-position属性进行背景定位，其中最关键的是使用background-position属性精确地定位。\n\n### 制作精灵图\n\nCSS 精灵其实是将网页中的一些背景图像整合到一张大图中（精灵图），那我们要做的，就是把小图拼合成一张大图。\n\n大部分情况下，精灵图都是网页美工做。\n\n~~~\n我们精灵图上放的都是小的装饰性质的背景图片。 插入图片不能往上放。\n我们精灵图的宽度取决于最宽的那个背景。 \n我们可以横向摆放也可以纵向摆放，但是每个图片之间，间隔至少隔开偶数像素合适。\n在我们精灵图的最低端，留一片空隙，方便我们以后添加其他精灵图。\n~~~\n\n结束语：   小公司，背景图片很少的情况，没有必要使用精灵技术，维护成本太高。 如果是背景图片比较多，可以建议使用精灵技术。\n\n## 字体图标\n\n图片是有诸多优点的，但是缺点很明显，比如图片不但增加了总文件的大小，还增加了很多额外的\"http请求\"，这都会大大降低网页的性能的。更重要的是图片不能很好的进行“缩放”，因为图片放大和缩小会失真。 我们后面会学习移动端响应式，很多情况下希望我们的图标是可以缩放的。此时，一个非常重要的技术出现了，额不是出现了，是以前就有，是被从新\"宠幸\"啦。。 这就是字体图标（iconfont).\n\n### 字体图标优点\n\n```\n可以做出跟图片一样可以做的事情,改变透明度、旋转度，等..\n但是本质其实是文字，可以很随意的改变颜色、产生阴影、透明效果等等...\n本身体积更小，但携带的信息并没有削减。\n几乎支持所有的浏览器\n移动端设备必备良药...\n```\n\n### 字体图标使用流程\n\n总体来说，字体图标按照如下流程：\n\n<img src=\"/media/fontt.png\" />\n\n#### 设计字体图标\n\n假如图标是我们公司单独设计，那就需要第一步了，这个属于UI设计人员的工作， 他们在 illustrator 或 Sketch 这类矢量图形软件里创建 icon图标， 比如下图：\n\n<img src=\"/media/03.jpg\" />\n\n  之后保存为svg格式，然后给我们前端人员就好了。 \n\n  其实第一步，我们不需要关心，只需要给我们这些图标就可以了，如果图标是大众的，网上本来就有的，可以直接跳过第一步，进入第三步。\n\n#### 上传生成字体包\n\n   当UI设计人员给我们svg文件的时候，我们需要转换成我们页面能使用的字体文件， 而且需要生成的是兼容性的适合各个浏览器的。\n\n​    推荐网站： http://icomoon.io\n\n**icomoon字库**\n\nIcoMoon成立于2011年，推出的第一个自定义图标字体生成器，它允许用户选择他们所需要的图标，使它们成一字型。 内容种类繁多，非常全面，唯一的遗憾是国外服务器，打开网速较慢。\n\n   推荐网站： http://www.iconfont.cn/\n\n**阿里icon font字库**\n\nhttp://www.iconfont.cn/\n\n这个是阿里妈妈M2UX的一个icon font字体图标字库，包含了淘宝图标库和阿里妈妈图标库。可以使用AI制作图标上传生成。 一个字，免费，免费！！\n\n**fontello**\n\n[http://fontello.com/](http://fontello.com/)\n\n在线定制你自己的icon font字体图标字库，也可以直接从GitHub下载整个图标集，该项目也是开源的。\n\n**Font-Awesome**\n\n[http://fortawesome.github.io/Font-Awesome/](http://fortawesome.github.io/Font-Awesome/)\n\n这是我最喜欢的字库之一了，更新比较快。目前已经有369个图标了。\n\n**Glyphicon Halflings**\n\n[http://glyphicons.com/](http://glyphicons.com/)\n\n这个字体图标可以在Bootstrap下免费使用。自带了200多个图标。\n\n**Icons8**\n\n[https://icons8.com/](https://icons8.com/)\n\n提供PNG免费下载，像素大能到500PX\n\n#### 下载兼容字体包\n\n刚才上传完毕， 网站会给我们把UI做的svg图片转换为我们的字体格式， 然后下载下来就好了\n\n当然，我们不需要自己专门的图标，是想网上找几个图标使用，以上2步可以直接省略了， 直接到刚才的网站上找喜欢的下载使用吧。\n\n\n\n<img src=\"/media/fontt1.png\" />\n\n<img src=\"/media/fontt2.png\" />\n\n#### 字体引入到HTML\n\n得到压缩包之后，最后一步，是最重要的一步了， 就是字体文件已经有了，我们需要引入到我们页面中。\n\n1. 首先把 以下4个文件放入到 fonts文件夹里面。 通俗的做法\n\n   ![1498032122244](/media/1498032122244.png)\n\n   ##### 第一步：在样式里面声明字体： 告诉别人我们自己定义的字体\n\n   ```css\n   @font-face {\n     font-family: 'icomoon';\n     src:  url('fonts/icomoon.eot?7kkyc2');\n     src:  url('fonts/icomoon.eot?7kkyc2#iefix') format('embedded-opentype'),\n       url('fonts/icomoon.ttf?7kkyc2') format('truetype'),\n       url('fonts/icomoon.woff?7kkyc2') format('woff'),\n       url('fonts/icomoon.svg?7kkyc2#icomoon') format('svg');\n     font-weight: normal;\n     font-style: normal;\n   }\n   ```\n\n   ##### 第二步：给盒子使用字体\n\n   ```css\n   span {\n   \t\tfont-family: \"icomoon\";\n   \t}\n   ```\n\n   ##### 第三步：盒子里面添加结构\n\n   ~~~css\n   span::before {\n   \t\t content: \"\\e900\";\n   \t}\n   或者  \n   <span></span>  \n   ~~~\n\n   ###  追加新图标到原来库里面\n\n   如果工作中，原来的字体图标不够用了，我们需要添加新的字体图标，但是原来的不能删除，继续使用，此时我们需要这样做\n\n   把压缩包里面的selection.json 从新上传，然后，选中自己想要新的图标，从新下载压缩包，替换原来文件即可。\n\n   <img src=\"/media/fontt5.png\" />\n\n## 滑动门\n\n先来体会下现实中的滑动门,或者你可以叫做推拉门：\n\n<img src=\"/media/h.gif\" />\n\n### 滑动门出现的背景\n\n制作网页时，为了美观，常常需要为网页元素设置特殊形状的背景，比如微信导航栏，有凸起和凹下去的感觉，最大的问题是里面的字数不一样多，咋办？\n\n<img src=\"/media/wxx.jpg\" />\n\n为了使各种特殊形状的背景能够自适应元素中文本内容的多少，出现了CSS滑动门技术。它从新的角度构建页面，使各种特殊形状的背景能够自由拉伸滑动，以适应元素内部的文本内容，可用性更强。 最常见于各种导航栏的滑动门。\n\n### 核心技术\n\n核心技术就是利用CSS精灵（主要是背景位置）和盒子padding撑开宽度, 以便能适应不同字数的导航栏。\n\n一般的经典布局都是这样的：\n\n```html\n<li>\n  <a href=\"#\">\n    <span>导航栏内容</span>\n  </a>\n</li>\n```\n\n总结： \n\n1. a 设置 背景左侧，padding撑开合适宽度。    \n2. span 设置背景右侧， padding撑开合适宽度 剩下由文字继续撑开宽度。\n3. 之所以a包含span就是因为 整个导航都是可以点击的。\n\n\n## before和after伪元素(详解)\n\n之所以被称为伪元素，是因为他们不是真正的页面元素，html没有对应的元素，但是其所有用法和表现行为与真正的页面元素一样，可以对其使用诸如页面元素一样的css样式，表面上看上去貌似是页面的某些元素来展现，实际上是css样式展现的行为，因此被称为伪元素。是伪元素在html代码机构中的展现，可以看出无法伪元素的结构无法审查\n\n\n\n**注意**\n\n伪元素:before和:after添加的内容默认是inline元素**；这个两个伪元素的`content`属性，表示伪元素的内容,设置:before和:after时必须设置其`content`属性，否则伪元素就不起作用。\n\n\n\n\n\n\n\n## 过渡(CSS3)\n\n过渡（transition)是CSS3中具有颠覆性的特征之一，我们可以在不使用 Flash 动画或 JavaScript 的情况下，当元素从一种样式变换为另一种样式时为元素添加效果。\n\n帧动画：通过一帧一帧的画面按照固定顺序和速度播放。如电影胶片\n\n![1498445034712](/media/1498445034712.png)\n\n\n\n<img src=\"/media/zhen.gif\" />\n\n在CSS3里使用transition可以实现补间动画（过渡效果），并且当前元素只要有“属性”发生变化时即存在两种状态(我们用A和B代指），就可以实现平滑的过渡，为了方便演示采用hover切换两种状态，但是并不仅仅局限于hover状态来实现过渡。\n\n语法格式:\n\n~~~\ntransition: 要过渡的属性  花费时间  运动曲线  何时开始;\n如果有多组属性变化，还是用逗号隔开。\n~~~\n\n| 属性                         | 描述                      | CSS  |\n| -------------------------- | ----------------------- | ---- |\n| transition                 | 简写属性，用于在一个属性中设置四个过渡属性。  | 3    |\n| transition-property        | 规定应用过渡的 CSS 属性的名称。      | 3    |\n| transition-duration        | 定义过渡效果花费的时间。默认是 0。      | 3    |\n| transition-timing-function | 规定过渡效果的时间曲线。默认是 \"ease\"。 | 3    |\n| transition-delay           | 规定过渡效果何时开始。默认是 0。       | 3    |\n\n如果想要所有的属性都变化过渡， 写一个all 就可以\n\ntransition-duration  花费时间  单位是  秒     s    比如 0.5s    这个s单位必须写      ms 毫秒\n\n运动曲线   默认是 ease\n\n 何时开始  默认是 0s  立马开始\n\n运动曲线示意图：\n\n![1498445454760](/media/1498445454760.png)\n\n~~~css\ndiv {\n\t\t\twidth: 200px;\n\t\t\theight: 100px;\n\t\t\tbackground-color: pink;\n\t\t\t/* transition: 要过渡的属性  花费时间  运动曲线  何时开始; */\n\t\t\ttransition: width 0.6s ease 0s, height 0.3s ease-in 1s;\n\t\t\t/* transtion 过渡的意思  这句话写到div里面而不是 hover里面 */\n  \n\t\t\t\n}\ndiv:hover {  /* 鼠标经过盒子，我们的宽度变为400 */\n\n\t\t\twidth: 600px;\n\t\t\theight: 300px\n}\n\ntransition: all 0.6s;  /* 所有属性都变化用all 就可以了  后面俩个属性可以省略 */\n~~~\n\n## 2D变形(CSS3) transform\n\ntransform是CSS3中具有颠覆性的特征之一，可以实现元素的位移、旋转、倾斜、缩放，甚至支持矩阵方式，配合过渡和即将学习的动画知识，可以取代大量之前只能靠Flash才可以实现的效果。\n\n变形转换 transform    transform  变换 变形的意思             《 transformers 变形金刚》\n\n###  移动 translate(x, y)    \n\ntranslate 移动平移的意思\n\n![1498443715586](/media/1498443715586.png)\n\n```css\ntranslate(50px,50px);\n```\n\n使用translate方法来将文字或图像在水平方向和垂直方向上分别垂直移动50像素。\n\n可以改变元素的位置，x、y可为负值；\n\n~~~\n translate(x,y)水平方向和垂直方向同时移动（也就是X轴和Y轴同时移动）\n translateX(x)仅水平方向移动（X轴移动）\n translateY(Y)仅垂直方向移动（Y轴移动）\n~~~\n\n~~~css\n.box {\n  width: 499.9999px;\n  height: 400px;\n  background: pink;\n  position: absolute;\n  left:50%;\n  top:50%;\n  transform:translate(-50%,-50%);  /* 走的自己的一半 */\n}\n~~~\n\n 让定位的盒子水平居中\n\n### 缩放 scale(x, y) \n\n![1498444645795](/media/1498444645795.png)\n\n```css\ntransform:scale(0.8,1);\n```\n\n可以对元素进行水平和垂直方向的缩放。该语句使用scale方法使该元素在水平方向上缩小了20%，垂直方向上不缩放。\n\n~~~\nscale(X,Y)使元素水平方向和垂直方向同时缩放（也就是X轴和Y轴同时缩放）\nscaleX(x)元素仅水平方向缩放（X轴缩放）\nscaleY(y)元素仅垂直方向缩放（Y轴缩放）\n~~~\n\n scale()的取值默认的值为1，当值设置为0.01到0.99之间的任何值，作用使一个元素缩小；而任何大于或等于1.01的值，作用是让元素放大\n\n### 旋转 rotate(deg) \n\n可以对元素进行旋转，正值为顺时针，负值为逆时针；\n\n![1498443651293](/media/1498443651293.png)\n\n~~~css\ntransform:rotate(45deg);\n~~~\n\n 注意单位是 deg 度数  \t\n\n### transform-origin可以调整元素转换变形的原点\n\n![1498443912530](/media/1498443912530.png)\n\n```css\n div{transform-origin: left top;transform: rotate(45deg); }  /* 改变元素原点到左上角，然后进行顺时旋转45度 */    \n```\n\n 如果是4个角，可以用 left top这些，如果想要精确的位置， 可以用  px 像素。\n\n~~~css\n div{transform-origin: 10px 10px;transform: rotate(45deg); }  /* 改变元素原点到x 为10  y 为10，然后进行顺时旋转45度 */ \n~~~\n\n\n\n案例旋转楚乔传\n\n~~~css\ndiv {\n\t\t\twidth: 250px;\n\t\t\theight: 170px;\n\t\t\tborder: 1px solid pink;\n\t\t\tmargin: 200px auto;\n\t\t\tposition: relative;\n\n\t\t}\n\t\tdiv img {\n\t\t\twidth: 100%;\n\t\t\theight: 100%;\n\t\t\tposition: absolute;\n\t\t\ttop: 0;\n\t\t\tleft: 0;\n\t\t\ttransition: all 0.6s;\n\t\t\ttransform-origin: top right;\n\t\t\n\t\t}\n\t\tdiv:hover img:nth-child(1) {  /* 鼠标经过div  第一张图片旋转 */\n\t\t\ttransform: rotate(60deg);\n\t\t}\n\t\tdiv:hover img:nth-child(2) {  \n\t\t\ttransform: rotate(120deg);\n\t\t}\n\t\tdiv:hover img:nth-child(3) {  \n\t\t\ttransform: rotate(180deg);\n\t\t}\n\t\tdiv:hover img:nth-child(4) {  \n\t\t\ttransform: rotate(240deg);\n\t\t}\n\t\tdiv:hover img:nth-child(5) {  \n\t\t\ttransform: rotate(300deg);\n\t\t}\n\t\tdiv:hover img:nth-child(6) {  \n\t\t\ttransform: rotate(360deg);\n\t\t}\n~~~\n\n### 倾斜 skew(deg, deg) \n\n![1498443827389](/media/1498443827389.png)\n\n```css\ntransform:skew(30deg,0deg);\n```\n\n该实例通过skew方法把元素水平方向上倾斜30度，处置方向保持不变。\n\n可以使元素按一定的角度进行倾斜，可为负值，第二个参数不写默认为0。\n\n\n\n## 3D变形(CSS3) transform\n\n2d    x  y  \n\n3d  x  y  z\n\n 左手坐标系\n\n伸出左手，让拇指和食指成“L”形，大拇指向右，食指向上，中指指向前方。这样我们就建立了一个左手坐标系，拇指、食指和中指分别代表X、Y、Z轴的正方向。如下图\n\n![1498445587576](/media/1498445587576.png)\n\n\n\nCSS3中的3D坐标系与上述的3D坐标系是有一定区别的，相当于其绕着X轴旋转了180度，如下图\n\n![1498459001951](/media/1498459001951.png)\n\n简单记住他们的坐标：\n\n x左边是负的，右边是正的\n\ny 上面是负的， 下面是正的\n\nz 里面是负的， 外面是正的\n\n###  rotateX() \n\n 就是沿着 x 立体旋转.\n\n![1498445756802](/media/1498445756802.png)\n\n~~~css\nimg {\n  transition:all 0.5s ease 0s;\n}\nimg:hove {\n\n  transform:rotateX(180deg);\n}\n~~~\n\n### rotateY()\n\n沿着y轴进行旋转\n\n![1498446043198](/media/1498446043198.png)\n\n~~~css\nimg {\n  transition:all 0.5s ease 0s;\n}\nimg:hove {\n\n  transform:rotateX(180deg);\n}\n~~~\n\n### rotateZ()\n\n沿着z轴进行旋转\n\n~~~css\nimg {\n  transition:all .25s ease-in 0s;\n}\nimg:hover {\n  /* transform:rotateX(180deg); */\n  /* transform:rotateY(180deg); */\n  /* transform:rotateZ(180deg); */\n  /* transform:rotateX(45deg) rotateY(180deg) rotateZ(90deg) skew(0,10deg); */\n}\n~~~\n\n### 透视(perspective)\n\n电脑显示屏是一个2D平面，图像之所以具有立体感（3D效果），其实只是一种视觉呈现，通过透视可以实现此目的。\n\n透视可以将一个2D平面，在转换的过程当中，呈现3D效果。\n\n- 透视原理： 近大远小 。\n- 浏览器透视：把近大远小的所有图像，透视在屏幕上。\n- perspective：视距，表示视点距离屏幕的长短。视点，用于模拟透视效果时人眼的位置\n\n注：并非任何情况下需要透视效果，根据开发需要进行设置。\n\nperspective 一般作为一个属性，设置给父元素，作用于所有3D转换的子元素\n\n理解透视距离原理：\n\n![1498446715314](/media/1498446715314.png)\n\n### translateX(x)\n\n仅水平方向移动**（X轴移动）\n\n![1498459697576](/media/1498459697576.png)\n\n主要目的实现移动效果\n\n### translateY(y)\n\n仅垂直方向移动（Y轴移动）\n\n![1498459770252](/media/1498459770252.png)\n\n### translateZ(z)\n\ntransformZ的直观表现形式就是大小变化，实质是XY平面相对于视点的远近变化（说远近就一定会说到离什么参照物远或近，在这里参照物就是perspective属性）。比如设置了perspective为200px;那么transformZ的值越接近200，就是离的越近，看上去也就越大，超过200就看不到了，因为相当于跑到后脑勺去了，我相信你正常情况下，是看不到自己的后脑勺的。\n\n### translate3d(x,y,z)\n\n[注意]其中，x和y可以是长度值，也可以是百分比，百分比是相对于其本身元素水平方向的宽度和垂直方向的高度和；z只能设置长度值\n\n###  开门案例\n\n~~~css\nbody {\n}\n.door {\n  width: 300px;\n  height: 300px;\n  margin: 100px auto;\n  border: 1px solid gray;\n  perspective: 1000px;\n  background: url('images/dog.gif') no-repeat cover;\n  position: relative;\n}\n.door > div {\n  box-sizing: border-box;\n  border: 1px solid black;\n}\n.left {\n  float: left;\n  width: 50%;\n  height: 100%;\n  background-color: brown;\n  transform-origin: left center;\n  transition: 1s;\n  position: relative;\n}\n.left::before {\n  content: '';\n  position: absolute;\n  width: 20px;\n  height: 20px;\n  border-radius: 50%;\n  top: 50%;\n  right: 0px;\n  transform: translateY(-10px);\n  border: 1px solid whitesmoke;\n}\n.right {\n  width: 50%;\n  height: 100%;\n  float: left;\n  background-color: brown;\n  transform-origin: right center;\n  transition: 1s;\n  position: relative;\n}\n.right::before {\n  content: '';\n  position: absolute;\n  width: 20px;\n  height: 20px;\n  border-radius: 50%;\n  top: 50%;\n  left: 0px;\n  transform: translateY(-10px);\n  border: 1px solid whitesmoke;\n}\n.door:hover .left {\n  transform: rotateY(-130deg);\n}\n.door:hover .right {\n  transform: rotateY(130deg);\n}\n~~~\n\n\n\n###  backface-visibility \n\nbackface-visibility 属性定义当元素不面向屏幕时是否可见。\n\n\n\n### 翻转盒子案例\n\n~~~css\ndiv {\n\t\t\twidth: 224px;\n\t\t\theight: 224px;\n\t\t\tmargin: 100px auto;\n\t\t\tposition: relative;\n\t\t}\n\t\tdiv img {\n\t\t\tposition: absolute;\n\t\t\ttop: 0;\n\t\t\tleft: 0;\n\t\t\ttransition: all 1s; \n\t\t}\n\t\tdiv img:first-child {\n\t\t\tz-index: 1;\n\t\t\tbackface-visibility: hidden; /* 不是正面对象屏幕，就隐藏 */\n\t\t}\n\t\tdiv:hover img {\n\t\t\ttransform: rotateY(180deg);\n}\n~~~\n\n\n\n## 动画(CSS3) animation\n\n动画是CSS3中具有颠覆性的特征之一，可通过设置多个节点来精确控制一个或一组动画，常用来实现复杂的动画效果。\n\n语法格式：\n\n~~~css\nanimation:动画名称 动画时间 运动曲线  何时开始  播放次数  是否反方向;\n~~~\n\n![1498461096243](/media/1498461096243.png)\n\n关于几个值，除了名字，动画时间，延时有严格顺序要求其它随意r\n\n~~~css\n@keyframes 动画名称 {\n  from{ 开始位置 }  0%\n  to{  结束  }  100%\n}\n~~~\n\n~~~\nanimation-iteration-count:infinite;  无限循环播放\nanimation-play-state:paused;   暂停动画\"\n~~~\n\n### 小汽车案例\n\n~~~css\nbody {\n  background: white;\n}\nimg {\n  width: 200px;\n}\n.animation {\n  animation-name: goback;\n  animation-duration: 5s;\n  animation-timing-function: ease;\n  animation-iteration-count: infinite;\n}\n@keyframes goback {\n  0%{}\n  49%{\n    transform: translateX(1000px);\n  }\n  55%{\n    transform: translateX(1000px) rotateY(180deg);\n  }\n  95%{\n    transform: translateX(0) rotateY(180deg);\n  }\n  100%{\n    transform: translateX(0) rotateY(0deg);\n  }\n}\n~~~\n\n## 伸缩布局(CSS3)\n\nCSS3在布局方面做了非常大的改进，使得我们对块级元素的布局排列变得十分灵活，适应性非常强，其强大的伸缩性，在响应式开中可以发挥极大的作用。\n\n主轴：Flex容器的主轴主要用来配置Flex项目，默认是水平方向\n\n侧轴：与主轴垂直的轴称作侧轴，默认是垂直方向的\n\n方向：默认主轴从左向右，侧轴默认从上到下\n\n主轴和侧轴并不是固定不变的，通过flex-direction可以互换。\n\n![1498441839910](/media/1498441839910.png)\n\n\n\nFlex布局的语法规范经过几年发生了很大的变化，也给Flexbox的使用带来一定的局限性，因为语法规范版本众多，浏览器支持不一致，致使Flexbox布局使用不多\n\n**2、各属性详解******\n\n1.flex子项目在主轴的缩放比例，不指定flex属性，则不参与伸缩分配\n\nmin-width  最小值      min-width: 280px  最小宽度  不能小于 280\n\nmax-width: 1280px  最大宽度  不能大于 1280\n\n2.flex-direction调整主轴方向（默认为水平方向）\n\nflex-direction: column 垂直排列\n\nflex-direction: row  水平排列\n\nhttp://m.ctrip.com/html5/   携程网手机端地址\n\n3、justify-content调整主轴对齐（水平对齐）\n\n子盒子如何在父盒子里面水平对齐\n\n| 值             | 描述                       | 白话文                     |\n| ------------- | ------------------------ | ----------------------- |\n| flex-start    | 默认值。项目位于容器的开头。           | 让子元素从父容器的开头开始排序但是盒子顺序不变 |\n| flex-end      | 项目位于容器的结尾。               | 让子元素从父容器的后面开始排序但是盒子顺序不变 |\n| center        | 项目位于容器的中心。               | 让子元素在父容器中间显示            |\n| space-between | 项目位于各行之间留有空白的容器内。        | 左右的盒子贴近父盒子，中间的平均分布空白间距  |\n| space-around  | 项目位于各行之前、之间、之后都留有空白的容器内。 | 相当于给每个盒子添加了左右margin外边距  |\n\n4、align-items调整侧轴对齐（垂直对齐）\n\n子盒子如何在父盒子里面垂直对齐（单行）\n\n| 值          | 描述              | 白话文                         |\n| ---------- | --------------- | --------------------------- |\n| stretch    | 默认值。项目被拉伸以适应容器。 | 让子元素的高度拉伸适用父容器（子元素不给高度的前提下) |\n| center     | 项目位于容器的中心。      | 垂直居中                        |\n| flex-start | 项目位于容器的开头。      | 垂直对齐开始位置 上对齐                |\n| flex-end   | 项目位于容器的结尾。      | 垂直对齐结束位置 底对齐                |\n|            |                 |                             |\n\n5、flex-wrap控制是否换行\n\n当我们子盒子内容宽度多于父盒子的时候如何处理\n\n| 值            | 描述                                       |\n| ------------ | ---------------------------------------- |\n| nowrap       | 默认值。规定灵活的项目不拆行或不拆列。  不换行，则 收缩（压缩） 显示  强制一行内显示 |\n| wrap         | 规定灵活的项目在必要的时候拆行或拆列。                      |\n| wrap-reverse | 规定灵活的项目在必要的时候拆行或拆列，但是以相反的顺序。             |\n|              |                                          |\n|              |                                          |\n\n6、flex-flow是flex-direction、flex-wrap的简写形式\n\n~~~css\nflex-flow: flex-direction  flex-wrap;  \n~~~\n\n\n\n白话记：    flex-flow: 排列方向   换不换行; \n\n两个中间用空格\n\n例如：\n\n~~~css\ndisplay: flex;\n/* flex-direction: row;\nflex-wrap: wrap;   这两句话等价于下面的这句话*/\nflex-flow: column wrap;  /* 两者的综合 */\n~~~\n\n\n\n7、align-content堆栈（由flex-wrap产生的独立行）多行垂直对齐方式齐\n\nalign-content是针对flex容器里面多轴(多行)的情况,align-items是针对一行的情况进行排列。\n\n必须对父元素设置自由盒属性display:flex;，并且设置排列方式为横向排列flex-direction:row;并且设置换行，flex-wrap:wrap;这样这个属性的设置才会起作用。\n\n| 值             | 描述                       | 测试   |\n| ------------- | ------------------------ | ---- |\n| stretch       | 默认值。项目被拉伸以适应容器。          |      |\n| center        | 项目位于容器的中心。               |      |\n| flex-start    | 项目位于容器的开头。               |      |\n| flex-end      | 项目位于容器的结尾。               |      |\n| space-between | 项目位于各行之间留有空白的容器内。        |      |\n| space-around  | 项目位于各行之前、之间、之后都留有空白的容器内。 |      |\n\n8、order控制子项目的排列顺序，正序方式排序，从小到大\n\n用css 来控制盒子的前后顺序。  用order 就可以\n\n用整数值来定义排列顺序，数值小的排在前面。可以为负值。 默认值是 0\n\n~~~css\norder: 1;\n~~~\n\n\n\n\n\n此知识点重在理解，要明确找出主轴、侧轴、方向，各属性对应的属性值\n\n\n\n\n\n\n\n","tags":["Css笔记"],"categories":["Css"]},{"title":"Css2","url":"%2F2017%2F08%2F07%2F02-CSS%2F","content":"\n---\n## 课程目标:\n1. 学会使用CSS选择器\n2. 熟记CSS样式和外观属性\n3. 熟练掌握CSS各种选择器\n4. 熟练掌握CSS各种选择器\n5. 熟练掌握CSS三种显示模式\n6. 熟练掌握CSS背景属性\n7. 熟练掌握CSS三大特性\n8. 熟练掌握CSS盒子模型\n9. 熟练掌握CSS浮动\n10.熟练掌握CSS定位\n11.熟练掌握CSS高级技巧强化CSS\ntypora-copy-images-to: media\n---\n\n\n# CSS的发展历程\n\n从HTML被发明开始，样式就以各种形式存在。不同的浏览器结合它们各自的样式语言为用户提供页面效果的控制。最初的HTML只包含很少的显示属性。\n随着HTML的成长，为了满足页面设计者的要求，HTML添加了很多显示功能。但是随着这些功能的增加，HTML变的越来越杂乱，而且HTML页面也越来越臃肿。于是CSS便诞生了。\n\n# CSS 网页的美容师\n\nCSS的出现，拯救了混乱的HTML，当让更加拯救了我们web开发者。 让我们的网页更加丰富多彩。   \n\nCSS的最大贡献就是：  让 HTML 从样式中解脱苦海，  实现了 HTML 专注去做 结构呈现。 而样式交给 CSS 后，你完全可以放心的早点洗洗睡了！\n\n<img src=\"/media/x.jpg\" width=\"250\" />\n\n而且。。。。。 CSS 做的很出色，如果JavaScript是网页的魔法师，那么CSS它是我们网页的美容师，不信，你看:\n\n<img src=\"/media/baby.jpeg\" />\n\nps:  你跟Angelababy只差了一个妆容的距离\n\n来个更直观的认识吧： \n\n<img src=\"/media/db.png\" />\n\n有人说， 没有不漂亮的女人，只有不会打扮的女人。\n\n我想说， 没有不好看的网页，只有不会CSS的前端。\n\n\n\n网页添加 CSS和不添加CSS 的对比：\n\n带有CSS的页面\n\n<img src=\"/media/Cc.png\" />\n\n没有CSS的页面\n\n<img src=\"/media/fff.png\" />\n\n# CSS初识\n\nCSS(Cascading Style Sheets)\n\nCSS通常称为CSS样式表或层叠样式表（级联样式表），主要用于设置HTML页面中的文本内容（字体、大小、对齐方式等）、图片的外形（宽高、边框样式、边距等）以及版面的布局等外观显示样式。\n\nCSS以HTML为基础，提供了丰富的功能，如字体、颜色、背景的控制及整体排版等，而且还可以针对不同的浏览器设置不同的样式。\n\n# CSS样式规则\n\n使用HTML时，需要遵从一定的规范。CSS亦如此，要想熟练地使用CSS对网页进行修饰，首先需要了解CSS样式规则，具体格式如下：                                          \n\n<img src=\"/media/gz.png\" />\n\n~~~\n在上面的样式规则中:\n\n1.选择器用于指定CSS样式作用的HTML对象，花括号内是对该对象设置的具体样式。\n2.属性和属性值以“键值对”的形式出现。\n3.属性是对指定的对象设置的样式属性，例如字体大小、文本颜色等。\n4.属性和属性值之间用英文“:”连接。\n5.多个“键值对”之间用英文“;”进行区分。\n可以用段落 和 表格的对齐的演示。\n~~~\n\n# CSS字体样式属性\n\n## font-size:字号大小\n\nfont-size属性用于设置字号，该属性的值可以使用相对长度单位，也可以使用绝对长度单位。其中，相对长度单位比较常用，推荐使用像素单位px，绝对长度单位使用较少。具体如下：\n\n<img src=\"/media/dd.png\" />\n\n## font-family:字体\n\nfont-family属性用于设置字体。网页中常用的字体有宋体、微软雅黑、黑体等，例如将网页中所有段落文本的字体设置为微软雅黑，可以使用如下CSS样式代码：\n\np{ font-family:\"微软雅黑\";}\n\n可以同时指定多个字体，中间以逗号隔开，表示如果浏览器不支持第一个字体，则会尝试下一个，直到找到合适的字体。\n\n> <img src=\"/media/good.png\" />常用技巧：\n\n~~~\n1. 现在网页中普遍使用14px+。\n2. 尽量使用偶数的数字字号。ie6等老式浏览器支持奇数会有bug。\n3. 各种字体之间必须使用英文状态下的逗号隔开。\n4. 中文字体需要加英文状态下的引号，英文字体一般不需要加引号。当需要设置英文字体时，英文字体名必须位于中文字体名之前。\n5. 如果字体名中包含空格、#、$等符号，则该字体必须加英文状态下的单引号或双引号，例如font-family: \"Times New Roman\";。\n6. 尽量使用系统默认字体，保证在任何用户的浏览器中都能正确显示。\n~~~\n\n\n\n## CSS Unicode字体\n\n在 CSS 中设置字体名称，直接写中文是可以的。但是在文件编码（GB2312、UTF-8 等）不匹配时会产生乱码的错误。xp 系统不支持 类似微软雅黑的中文。\n\n方案一： 你可以使用英文来替代。 比如 font-family:\"Microsoft Yahei\"。\n\n方案二： 在 CSS 直接使用 Unicode 编码来写字体名称可以避免这些错误。使用 Unicode 写中文字体名称，浏览器是可以正确的解析的。\nfont-family: \"\\5FAE\\8F6F\\96C5\\9ED1\"，表示设置字体为“微软雅黑”。\n\n<img src=\"/media/shs.png\" />\n\n可以通过escape()  来测试属于什么字体。\n\n| 字体名称      | 英文名称            | Unicode 编码           |\n| --------- | --------------- | -------------------- |\n| 宋体        | SimSun          | \\5B8B\\4F53           |\n| 新宋体       | NSimSun         | \\65B0\\5B8B\\4F53      |\n| 黑体        | SimHei          | \\9ED1\\4F53           |\n| 微软雅黑      | Microsoft YaHei | \\5FAE\\8F6F\\96C5\\9ED1 |\n| 楷体_GB2312 | KaiTi_GB2312    | \\6977\\4F53_GB2312    |\n| 隶书        | LiSu            | \\96B6\\4E66           |\n| 幼园        | YouYuan         | \\5E7C\\5706           |\n| 华文细黑      | STXihei         | \\534E\\6587\\7EC6\\9ED1 |\n| 细明体       | MingLiU         | \\7EC6\\660E\\4F53      |\n| 新细明体      | PMingLiU        | \\65B0\\7EC6\\660E\\4F53 |\n\n为了照顾不同电脑的字体安装问题，我们尽量只使用宋体和微软雅黑中文字体\n\n## font-weight:字体粗细\n\n字体加粗除了用 b  和 strong 标签之外，可以使用CSS 来实现，但是CSS 是没有语义的。\n\n~~~html\nfont-weight属性用于定义字体的粗细，其可用属性值：normal、bold、bolder、lighter、100~900（100的整数倍）。\n~~~\n\n\n\n<img src=\"/media/good.png\" />小技巧： \n\n ~~~css\n数字 400 等价于 normal，而 700 等价于 bold。  但是我们更喜欢用数字来表示。  \n ~~~\n\n\n\n## font-style:字体风格\n\n字体倾斜除了用 i  和 em 标签之外，可以使用CSS 来实现，但是CSS 是没有语义的。\n\nfont-style属性用于定义字体风格，如设置斜体、倾斜或正常字体，其可用属性值如下：\n\nnormal：默认值，浏览器会显示标准的字体样式。\n\nitalic：浏览器会显示斜体的字体样式。\n\noblique：浏览器会显示倾斜的字体样式。\n\n<img src=\"/media/good.png\" />小技巧： \n\n ~~~\n平时我们很少给文字加斜体，反而喜欢给斜体标签（em，i）改为普通模式。\n ~~~\n\n\n\n## font:综合设置字体样式 (重点)\n\nfont属性用于对字体样式进行综合设置，其基本语法格式如下：\n\n```css\n选择器{font: font-style  font-weight  font-size/line-height  font-family;}\n```\n\n\n\n~~~\n使用font属性时，必须按上面语法格式中的顺序书写，不能更换顺序，各个属性以空格隔开。\n\n注意：其中不需要设置的属性可以省略（取默认值），但必须保留font-size和font-family属性，否则font属性将不起作用。\n\n~~~\n\n\n\n# 开发者工具（chrome）\n\n此工具是我们的必备工具，以后代码出了问题，我们首先第一反应就是：\n\n“按F12”或者是 “shift+ctrl+i”   打开 开发者工具。\n\n菜单：   右击网页空白出---查看 \n\n<img src=\"/media/chrome.png\" />\n\n<img src=\"/media/good.png\" />小技巧：\n\n1. ctrl+滚轮 可以 放大开发者工具代码大小。\n2. 左边是HTML元素结构   右边是CSS样式。\n3. 右边CSS样式可以改动数值和颜色查看更改后效果。\n\n# 选择器（重点）\n\n要想将CSS样式应用于特定的HTML元素，首先需要找到该目标元素。在CSS中，执行这一任务的样式规则部分被称为选择器（选择符）。\n\n<img src=\"/media/ax.png\" />\n\n如上图所以，要把里面的小黄人分为2组，最快的方法怎办？  \n\n很多， 比如 一只眼睛的一组，剩下的一组  \n\n这就用到基础选择器组：\n\n## 标签选择器（元素选择器）\n\n标签选择器是指用HTML标签名称作为选择器，按标签名称分类，为页面中某一类标签指定统一的CSS样式。其基本语法格式如下：\n\n```\n标签名{属性1:属性值1; 属性2:属性值2; 属性3:属性值3; }  或者\n元素名{属性1:属性值1; 属性2:属性值2; 属性3:属性值3; }\n```\n\n标签选择器最大的优点是能快速为页面中同类型的标签统一样式，同时这也是他的缺点，不能设计差异化样式。\n\n课堂案例：\n\n 传智简介\n\n## 类选择器\n\n类选择器使用“.”（英文点号）进行标识，后面紧跟类名，其基本语法格式如下：\n\n```\n.类名{属性1:属性值1; 属性2:属性值2; 属性3:属性值3; }\n```\n\n```\n 标签调用的时候用 class=“类名”  即可。\n```\n\n类选择器最大的优势是可以为元素对象定义单独或相同的样式。\n\n<img src=\"/media/good.png\" />小技巧：\n\n~~~\n1.长名称或词组可以使用中横线来为选择器命名。\n2.不建议使用“_”下划线来命名CSS选择器。\n~~~\n\n​    输入的时候少按一个shift键;\n　浏览器兼容问题 (比如使用_tips的选择器命名，在IE6是无效的)\n　能良好区分JavaScript变量命名(JS变量命名是用“_”)\n\n~~~\n3.不要纯数字、中文等命名， 尽量使用英文字母来表示。\n~~~\n\n猜谜底游戏：\n\n<img src=\"/media/midi.png\" width=\"450\" />   你猜？\n\n\n\n命名规范：  见附件（Web前端开发规范手册.doc）\n\n命名是我们通俗约定的，但是没有规定必须用这些常用的命名。\n\n课堂案例：\n\n <img src=\"/media/go.png\" />\n\n\n\n~~~html\n<head>\n        <meta charset=\"utf-8\">\n        <style>\n        span {\n        \tfont-size: 100px;\n        }\n        .blue {\n        \tcolor: blue;\n        }\n        .red {\n        \tcolor: red;\n        }\n        .orange {\n\t\t\tcolor: orange;\n        }\n\t\t.green {\n\t\t\tcolor: green;\n\t\t}\n        </style>\n    </head>\n    <body>\n    \t<span class=\"blue\">G</span>\n    \t<span class=\"red\">o</span>\n    \t<span class=\"orange\">o</span>\n    \t<span class=\"blue\">g</span>\n    \t<span class=\"green\">l</span>\n    \t<span class=\"red\">e</span>\n    </body>\n~~~\n\n\n\n## 多类名选择器\n\n我们可以给标签指定多个类名，从而达到更多的选择目的。\n\n<img src=\"/media/lei.png\" />\n\n注意：\n\n~~~\n1. 样式显示效果跟HTML元素中的类名先后顺序没有关系,受CSS样式书写的上下顺序有关。\n2. 各个类名中间用空格隔开。\n~~~\n\n多类名选择器在后期布局比较复杂的情况下，还是较多使用的。\n\n~~~html\n<div class=\"pink fontWeight font20\">亚瑟</div>\n<div class=\"font20\">刘备</div>\n<div class=\"font14 pink\">安其拉</div>\n<div class=\"font14\">貂蝉</div>\n~~~\n\n\n\n## id选择器\n\nid选择器使用“#”进行标识，后面紧跟id名，其基本语法格式如下：\n\n```\n#id名{属性1:属性值1; 属性2:属性值2; 属性3:属性值3; }\n```\n\n该语法中，id名即为HTML元素的id属性值，大多数HTML元素都可以定义id属性，元素的id值是唯一的，只能对应于文档中某一个具体的元素。\n\n用法基本和类选择器相同。\n\n## id选择器和类选择器区别\n\nW3C标准规定，在同一个页面内，不允许有相同名字的id对象出现，但是允许相同名字的class。\n\n类选择器（class） 好比人的名字，  是可以多次重复使用的， 比如  张伟  王伟  李伟  李娜\n\nid选择器     好比人的身份证号码，  全中国是唯一的， 不得重复。 只能使用一次。\n\n***id选择器和类选择器最大的不同在于 使用次数上。***\n\n<img src=\"/media/zfb.jpg\" />\n\n## 通配符选择器\n\n通配符选择器用“*”号表示，他是所有选择器中作用范围最广的，能匹配页面中所有的元素。其基本语法格式如下：\n\n```\n* { 属性1:属性值1; 属性2:属性值2; 属性3:属性值3; }\n```\n\n\n\n例如下面的代码，使用通配符选择器定义CSS样式，清除所有HTML标记的默认边距。\n\n~~~css\n* {\n  margin: 0;                    /* 定义外边距*/\n  padding: 0;                   /* 定义内边距*/\n}\n~~~\n\n注意：\n\n  这个通配符选择器，就像我们的电影明星中的梦中情人， 想想它就好了，但是它不会和你过日子。 \n\n## 伪类选择器\n\n  伪类选择器用于向某些选择器添加特殊的效果。比如给链接添加特殊效果， 比如可以选择 第1个，第n个元素。\n\n~~~css\n为了和我们刚才学的类选择器相区别，  类选择器是一个点 比如 .demo {}   而我们的伪类 用 2个点 就是 冒号  比如  :link{}\n~~~\n\n### 链接伪类选择器\n\n- :link      /* 未访问的链接 */\n- :visited   /* 已访问的链接 */\n- :hover     /* 鼠标移动到链接上 */\n- :active    /* 选定的链接 */\n\n\n   注意写的时候，他们的顺序尽量不要颠倒  按照  lvha 的顺序。   love   hate  爱上了讨厌 记忆法    或者   lv 包包 非常 hao \n\n~~~css\na {   /* a是标签选择器  所有的链接 */\n\t\t\tfont-weight: 700;\n\t\t\tfont-size: 16px;\n\t\t\tcolor: gray;\n\t\t}\na:hover {   /* :hover 是链接伪类选择器 鼠标经过 */\n\t\t\tcolor: red; /*  鼠标经过的时候，由原来的 灰色 变成了红色 */\n}\n~~~\n\n\n\n### 结构(位置)伪类选择器（CSS3)\n\n- :first-child :选取属于其父元素的首个子元素的指定选择器\n- :last-child :选取属于其父元素的最后一个子元素的指定选择器\n- :nth-child(n) ： 匹配属于其父元素的第 N 个子元素，不论元素的类型\n- :nth-last-child(n) ：选择器匹配属于其元素的第 N 个子元素的每个元素，不论元素的类型，从最后一个子元素开始计数。\n  n 可以是数字、关键词或公式\n- ​\n\n~~~css\nli:first-child { /*  选择第一个孩子 */\n        \t\tcolor: pink; \n        \t}\nli:last-child {   /* 最后一个孩子 */\n        \t\tcolor: purple;\n        \t}\nli:nth-child(4) {   /* 选择第4个孩子  n  代表 第几个的意思 */ \n\t\t\t\tcolor: skyblue;\n        \t}\n~~~\n\n\n\n### 目标伪类选择器(CSS3)\n\n :target目标伪类选择器 :选择器可用于选取当前活动的目标元素\n\n~~~css\n:target {\n\t\tcolor: red;\n\t\tfont-size: 30px;\n}\n~~~\n\n\n\n# CSS注释\n\n```\nCSS规则是使用     /*  需要注释的内容  */  进行注释的，即在需要注释的内容前使用 “/*” 标记开始注释，在内容的结尾使用 “*/”结束。\n```\n\n   例如：\n\n~~~css\np {\n  font-size: 14px;                 /* 所有的字体是14像素大小*/\n}\n~~~\n\n# CSS外观属性\n\n## color:文本颜色\n\ncolor属性用于定义文本的颜色，其取值方式有如下3种：\n\n1.预定义的颜色值，如red，green，blue等。\n\n2.十六进制，如#FF0000，#FF6600，#29D794等。实际工作中，十六进制是最常用的定义颜色的方式。\n\n3.RGB代码，如红色可以表示为rgb(255,0,0)或rgb(100%,0%,0%)。\n\n需要注意的是，如果使用RGB代码的百分比颜色值，取值为0时也不能省略百分号，必须写为0%。\n\n##  line-height:行间距\n\nine-height属性用于设置行间距，就是行与行之间的距离，即字符的垂直间距，一般称为行高。line-height常用的属性值单位有三种，分别为像素px，相对值em和百分比%，实际工作中使用最多的是像素px\n\n一般情况下，行距比字号大7.8像素左右就可以了。\n\n## text-align:水平对齐方式\n\n~~~\ntext-align属性用于设置文本内容的水平对齐，相当于html中的align对齐属性。其可用属性值如下：\n~~~\n\nleft：左对齐（默认值）\n\nright：右对齐\n\ncenter：居中对齐\n\n## text-indent:首行缩进\n\ntext-indent属性用于设置首行文本的缩进，其属性值可为不同单位的数值、em字符宽度的倍数、或相对于浏览器窗口宽度的百分比%，允许使用负值, 建议使用em作为设置单位。\n\n1em 就是一个字的宽度   如果是汉字的段落， 1em 就是一个汉字的宽度\n\n## letter-spacing:字间距\n\nletter-spacing属性用于定义字间距，所谓字间距就是字符与字符之间的空白。其属性值可为不同单位的数值，允许使用负值，默认为normal。\n\n## word-spacing:单词间距\n\nword-spacing属性用于定义英文单词之间的间距，对中文字符无效。和letter-spacing一样，其属性值可为不同单位的数值，允许使用负值，默认为normal。\n\nword-spacing和letter-spacing均可对英文进行设置。不同的是letter-spacing定义的为字母之间的间距，而word-spacing定义的为英文单词之间的间距。\n\n## 颜色半透明(css3)\n\n文字颜色到了CSS3我们可以采取半透明的格式了语法格式如下：\n\n~~~css\n    color: rgba(r,g,b,a)  a 是alpha  透明的意思  取值范围 0~1之间    color: rgba(0,0,0,0.3)  \n~~~\n\n\n\n## 文字阴影(CSS3)\n\n以后我们可以给我们的文字添加阴影效果了  Shadow  影子  \n\n~~~css\ntext-shadow:水平位置 垂直位置 模糊距离 阴影颜色;\n~~~\n\n![1498467502625](/media/1498467502625.png) \n\n1. 前两项是必须写的。  后两项可以选写。\n\n![1498467519665](/media/1498467519665.png)    \n\n# sublime快捷方式\n\nsublime可以快速提高我们代码的书写方式\n\n1. 生成标签 直接输入标签名 按tab键即可   比如  div   然后tab 键， 就可以生成 <div></div>\n\n2. 如果想要生成多个相同标签  加上 * 就可以了 比如   div*3  就可以快速生成3个div\n\n3. 如果有父子级关系的标签，可以用 >  比如   ul > li就可以了\n\n4. 如果有兄弟关系的标签，用  +  就可以了 比如 div+p  \n\n5. 如果生成带有类名或者id名字的，  直接写  .demo  或者  #two   tab 键就可以了\n\n   ​\n\n# 引入CSS样式表（书写位置）\n\nCSS可以写到那个位置？ 是不是一定写到html文件里面呢？\n\n## 内部样式表\n\n内嵌式是将CSS代码集中写在HTML文档的head头部标签中，并且用style标签定义，其基本语法格式如下：\n\n```html\n<head>\n<style type=\"text/CSS\">\n    选择器 {属性1:属性值1; 属性2:属性值2; 属性3:属性值3;}\n</style>\n</head>\n```\n\n语法中，style标签一般位于head标签中title标签之后，也可以把他放在HTML文档的任何地方。\n\ntype=\"text/CSS\"  在html5中可以省略， 写上也比较符合规范， 所以这个地方可以写也可以省略。\n\n## 行内式（内联样式）\n\n内联样式，又有人称行内样式、行间样式、内嵌样式。是通过标签的style属性来设置元素的样式，其基本语法格式如下：\n\n```html\n<标签名 style=\"属性1:属性值1; 属性2:属性值2; 属性3:属性值3;\"> 内容 </标签名>\n```\n\n语法中style是标签的属性，实际上任何HTML标签都拥有style属性，用来设置行内式。其中属性和值的书写规范与CSS样式规则相同，行内式只对其所在的标签及嵌套在其中的子标签起作用。\n\n\n\n## 外部样式表（外链式）\n\n链入式是将所有的样式放在一个或多个以.CSS为扩展名的外部样式表文件中，通过link标签将外部样式表文件链接到HTML文档中，其基本语法格式如下：\n\n```html\n<head>\n  <link href=\"CSS文件的路径\" type=\"text/CSS\" rel=\"stylesheet\" />\n</head>\n```\n\n注意：  link 是个单标签哦!!!\n\n该语法中，link标签需要放在head头部标签中，并且必须指定link标签的三个属性，具体如下：\n\n~~~\nhref：定义所链接外部样式表文件的URL，可以是相对路径，也可以是绝对路径。\ntype：定义所链接文档的类型，在这里需要指定为“text/CSS”，表示链接的外部文件为CSS样式表。\nrel：定义当前文档与被链接文档之间的关系，在这里需要指定为“stylesheet”，表示被链接的文档是一个样式表文件。\n~~~\n\n## 三种样式表总结\n\n| 样式表   | 优点           | 缺点           | 使用情况    | 控制范围      |\n| ----- | ------------ | ------------ | ------- | --------- |\n| 行内样式表 | 书写方便，权重高     | 没有实现样式和结构相分离 | 较少      | 控制一个标签（少） |\n| 内部样式表 | 部分结构和样式相分离   | 没有彻底分离       | 较多      | 控制一个页面（中） |\n| 外部样式表 | 完全实现结构和样式相分离 | 需要引入         | 最多，强烈推荐 | 控制整个站点（多） |\n\n# 标签显示模式（display）\n\n<img src=\"/media/people.png\" />\n\n非洲黑人：  皮肤内黑色素含量高，以吸收阳光中的紫外线，保护皮肤内部结构免遭损害，头发象羊毛一样卷曲，使每根卷发周围都有许多空隙，空隙充满空气，卷发有隔热作用。\n\n欧洲白人： 生活寒带或着是说常年温度较低的地缘,加上年日照时间少，身体的黑色素沉淀比较少``所以出现皮肤、发色、瞳晕都呈现浅色\n\n传智黄人：  我中间的。。。  <img src=\"/media/h.jpg\" alt=\"\" />\n\n最重要的总结：  是为了更好的适应环境而完成的自然选择。 \n\n同理，我们网页的标签非常多，再不同地方会用到不同类型的标签，以便更好的完成我们的网页。\n\n标签的类型(显示模式)\n\nHTML标签一般分为块标签和行内标签两种类型，它们也称块元素和行内元素。具体如下：\n\n## 块级元素(block-level)\n\n每个块元素通常都会独自占据一整行或多整行，可以对其设置宽度、高度、对齐等属性，常用于网页布局和网页结构的搭建。\n\n```\n常见的块元素有<h1>~<h6>、<p>、<div>、<ul>、<ol>、<li>等，其中<div>标签是最典型的块元素。\n```\n\n  <img src=\"/media/xtf.jpg\" />\n\n块级元素的特点：\n\n（1）总是从新行开始\n\n（2）高度，行高、外边距以及内边距都可以控制。\n\n（3）宽度默认是容器的100%\n\n（4）可以容纳内联元素和其他块元素。\n\n## 行内元素(inline-level)\n\n行内元素（内联元素）不占有独立的区域，仅仅靠自身的字体大小和图像尺寸来支撑结构，一般不可以设置宽度、高度、对齐等属性，常用于控制页面中文本的样式。\n\n```\n常见的行内元素有<a>、<strong>、<b>、<em>、<i>、<del>、<s>、<ins>、<u>、<span>等，其中<span>标签最典型的行内元素。\n```\n\n  <img src=\"/media/wf.jpg\" />  我一样重要\n\n行内元素的特点：\n\n（1）和相邻行内元素在一行上。\n\n（2）高、宽无效，但水平方向的padding和margin可以设置，垂直方向的无效。\n\n（3）默认宽度就是它本身内容的宽度。\n\n（4）行内元素只能容纳文本或则其他行内元素。（a特殊）\n\n  <img src=\"/media/w.jpg\" />    注意：\n\n1. 只有 文字才 能组成段落  因此 p  里面不能放块级元素，同理还有这些标签h1,h2,h3,h4,h5,h6,dt，他们都是文字类块级标签，里面不能放其他块级元素。\n2. 链接里面不能再放链接。\n\n\n\n## 块级元素和行内元素区别\n\n~~~\n块级元素的特点：\n（1）总是从新行开始\n（2）高度，行高、外边距以及内边距都可以控制。\n（3）宽度默认是容器的100%\n（4）可以容纳内联元素和其他块元素。\n~~~\n\n~~~\n行内元素的特点：\n（1）和相邻行内元素在一行上。\n（2）高、宽无效，但水平方向的padding和margin可以设置，垂直方向的无效。\n（3）默认宽度就是它本身内容的宽度。\n（4）行内元素只能容纳文本或则其他行内元素。\n~~~\n\n## 行内块元素（inline-block）\n\n```\n在行内元素中有几个特殊的标签——<img />、<input />、<td>，可以对它们设置宽高和对齐属性，有些资料可能会称它们为行内块元素。\n\n行内块元素的特点：\n（1）和相邻行内元素（行内块）在一行上,但是之间会有空白缝隙。\n（2）默认宽度就是它本身内容的宽度。\n（3）高度，行高、外边距以及内边距都可以控制。\n```\n\n<img src=\"/media/lyc.jpg\" width=\"400\" />\n\n## 标签显示模式转换 display\n\n块转行内：display:inline;\n\n行内转块：display:block;\n\n块、行内元素转换为行内块： display: inline-block;\n\n此阶段，我们只需关心这三个，其他的是我们后面的工作。\n\n# CSS复合选择器\n\n复合选择器是由两个或多个基础选择器，通过不同的方式组合而成的,目的是为了可以选择更准确更精细的目标元素标签。\n\n## 交集选择器\n\n交集选择器由两个选择器构成，其中第一个为标签选择器，第二个为class选择器，两个选择器之间不能有空格，如h3.special。\n\n<img src=\"/media/jiao.png\" />\n\n**记忆技巧：**\n\n交集选择器 是 并且的意思。  即...又...的意思\n\n~~~\n比如：   p.one   选择的是： 类名为 .one  的 段落标签。  \n~~~\n\n用的相对来说比较少，不太建议使用。\n\n## 并集选择器\n\n并集选择器（CSS选择器分组）是各个选择器通过<strong style=\"color:#f00\">逗号</strong>连接而成的，任何形式的选择器（包括标签选择器、class类选择器id选择器等），都可以作为并集选择器的一部分。如果某些选择器定义的样式完全相同，或部分相同，就可以利用并集选择器为它们定义相同的CSS样式。\n\n<img src=\"/media/bing.png\" />\n\n记忆技巧：\n\n并集选择器  和 的意思，  就是说，只要逗号隔开的，所有选择器都会执行后面样式。\n\n~~~\n比如  .one, p , #test {color: #F00;}  表示   .one 和 p  和 #test 这三个选择器都会执行颜色为红色。  通常用于集体声明。\n~~~\n\n<img src=\"/media/hu.gif\" />  他和他，在一起， 在一起    一起的意思\n\n\n\n## 后代选择器\n\n后代选择器又称为包含选择器，用来选择元素或元素组的后代，其写法就是把外层标签写在前面，内层标签写在后面，中间用空格分隔。当标签发生嵌套时，内层标签就成为外层标签的后代。\n\n<img src=\"/media/hou.png\" />\n\n子孙后代都可以这么选择。 或者说，它能选择任何包含在内 的标签。 \n\n<img src=\"/media/li.png\" />\n\n\n\n## 子元素选择器\n\n子元素选择器只能选择作为某元素子元素的元素。其写法就是把父级标签写在前面，子级标签写在后面，中间跟一个 &gt; 进行连接，注意，符号左右两侧各保留一个空格。\n\n<img src=\"/media/zi1.png\" />\n\n白话：  这里的子 指的是 亲儿子  不包含孙子 重孙子之类。\n\n~~~\n 比如：  .demo > h3 {color: red;}   说明  h3 一定是demo 亲儿子。  demo 元素包含着h3。\n~~~\n\n<img src=\"/media/san.jpg\" />\n\n\n\n## 测试题\n\n```html\n<div class=\"nav\">    <!-- 主导航栏 -->\n  <ul>\n    <li><a href=\"#\">公司首页</a></li>\n\t<li><a href=\"#\">公司简介</a></li>\n\t<li><a href=\"#\">公司产品</a></li>\n\t<li>\n         <a href=\"#\">联系我们</a>\n\t\t <ul>\n\t\t    \t\t<li><a href=\"#\">公司邮箱</a></li>\n\t\t    \t\t<li><a href=\"#\">公司电话</a></li>\n\t\t </ul>\n\t</li>\n  </ul>\n</div>\n<div class=\"sitenav\">    <!-- 侧导航栏 -->\n  <div class=\"site-l\">左侧侧导航栏</div>\n  <div class=\"site-r\"><a href=\"#\">登录</a></div>\n</div>\n```\n\n在不修改以上代码的前提下，完成以下任务：\n\n1. 链接 登录 的颜色为红色,同时主导航栏里面的所有的链接改为蓝色     (简单)\n\n2. 主导航栏和侧导航栏里面文字都是14像素并且是微软雅黑。（中等)\n\n3. 主导航栏里面的一级菜单链接文字颜色为绿色。（难)\n\n   ​\n\n## 属性选择器\n\n选取标签带有某些特殊属性的选择器 我们成为属性选择器\n\n~~~css\n/* 获取到 拥有 该属性的元素 */\ndiv[class^=font] { /*  class^=font 表示 font 开始位置就行了 */\n\t\t\tcolor: pink;\n\t\t}\ndiv[class$=footer] { /*  class$=footer 表示 footer 结束位置就行了 */\n\t\t\tcolor: skyblue;\n\t\t}\ndiv[class*=tao] { /* class*=tao  *=  表示tao 在任意位置都可以 */\n\t\t\tcolor: green;\n\t\t}\n~~~\n\n~~~html\n<div class=\"font12\">属性选择器</div>\n    <div class=\"font12\">属性选择器</div>\n    <div class=\"font24\">属性选择器</div>\n    <div class=\"font24\">属性选择器</div>\n    <div class=\"font24\">属性选择器</div>\n    <div class=\"24font\">属性选择器123</div>\n    <div class=\"sub-footer\">属性选择器footer</div>\n    <div class=\"jd-footer\">属性选择器footer</div>\n    <div class=\"news-tao-nav\">属性选择器</div>\n    <div class=\"news-tao-header\">属性选择器</div>\n    <div class=\"tao-header\">属性选择器</div>\n~~~\n\n## 伪元素选择器（CSS3)\n\n1. E::first-letter文本的第一个单词或字（如中文、日文、韩文等）\n2. E::first-line 文本第一行；\n3. E::selection 可改变选中文本的样式；\n\n~~~css\np::first-letter {\n  font-size: 20px;\n  color: hotpink;\n}\n\n/* 首行特殊样式 */\np::first-line {\n  color: skyblue;\n}\n\np::selection {\n  /* font-size: 50px; */\n  color: orange;\n}\n~~~\n\n\n\n4、E::before和E::after\n\n在E元素内部的开始位置和结束位创建一个元素，该元素为行内元素，且必须要结合content属性使用。\n\n~~~css\ndiv::befor {\n  content:\"开始\";\n}\ndiv::after {\n  content:\"结束\";\n}\n~~~\n\n\n\nE:after、E:before 在旧版本里是伪元素，CSS3的规范里“:”用来表示伪类，“::”用来表示伪元素，但是在高版本浏览器下E:after、E:before会被自动识别为E::after、E::before，这样做的目的是用来做兼容处理。\n\nE:after、E:before后面的练习中会反复用到，目前只需要有个大致了解\n\n\":\" 与 \"::\" 区别在于区分伪类和伪元素\n\n# CSS书写规范\n\n开始就形成良好的书写规范，是你专业化的开始。\n\n## 空格规范\n\n【强制】 选择器 与 { 之间必须包含空格。\n\n示例： .selector { }\n\n【强制】 属性名 与之后的 : 之间不允许包含空格， : 与 属性值 之间必须包含空格。\n\n示例：\n\nfont-size: 12px;\n\n## 选择器规范\n\n【强制】 当一个 rule 包含多个 selector 时，每个选择器声明必须独占一行。\n\n示例：\n\n```\n/* good */\n.post,\n.page,\n.comment {\n    line-height: 1.5;\n}\n\n\n/* bad */\n.post, .page, .comment {\n    line-height: 1.5;\n}\n```\n\n【建议】 选择器的嵌套层级应不大于 3 级，位置靠后的限定条件应尽可能精确。\n\n示例：\n\n```\n/* good */\n#username input {}\n.comment .avatar {}\n\n/* bad */\n.page .header .login #username input {}\n.comment div * {}\n```\n\n## 属性规范\n\n【强制】 属性定义必须另起一行。\n\n示例：\n\n```\n/* good */\n.selector {\n    margin: 0;\n    padding: 0;\n}\n\n/* bad */\n.selector { margin: 0; padding: 0; }\n```\n\n【强制】 属性定义后必须以分号结尾。\n\n示例：\n\n```\n/* good */\n.selector {\n    margin: 0;\n}\n\n/* bad */\n.selector {\n    margin: 0\n}\n```\n\n# CSS 背景(background)\n\nCSS 可以添加背景颜色和背景图片，以及来进行图片设置。\n\n| background-color                      | 背景颜色     |\n| ------------------------------------- | -------- |\n| background-image                      | 背景图片地址   |\n| background-repeat                     | 是否平铺     |\n| background-position                   | 背景位置     |\n| background-attachment                 | 背景固定还是滚动 |\n| 背景的合写（复合属性）                           |          |\n| background:背景颜色 背景图片地址 背景平铺 背景滚动 背景位置 |          |\n\n## 背景图片(image)\n\n语法： \n\n~~~css\nbackground-image : none | url (url) \n~~~\n\n参数： \n\nnone : 　无背景图（默认的）\nurl : 　使用绝对或相对地址指定背景图像 \n\nbackground-image 属性允许指定一个图片展示在背景中（只有CSS3才可以多背景）可以和 background-color 连用。 如果图片不重复地话，图片覆盖不到地地方都会被背景色填充。 如果有背景图片平铺，则会覆盖背景颜色。\n\n小技巧：  我们提倡 背景图片后面的地址，url不要加引号。\n\n## 背景平铺（repeat）\n\n语法： \n\n~~~css\nbackground-repeat : repeat | no-repeat | repeat-x | repeat-y \n~~~\n\n参数： \n\nrepeat : 　背景图像在纵向和横向上平铺（默认的）\n\nno-repeat : 　背景图像不平铺\n\nrepeat-x : 　背景图像在横向上平铺\n\nrepeat-y : 　背景图像在纵向平铺 \n\n设置背景图片时，默认把图片在水平和垂直方向平铺以铺满整个元素。\n\nrepeat-x : 　背景图像在横向上平铺  \n\n\n\nrepeat-y : 　背景图像在纵向平铺 \n\n<img src=\"/media/y.png\" width=\"600\"/>\n\n设置背景图片时，默认把图片在水平和垂直方向平铺以铺满整个元素。\n\n<img src=\"/media/q.png\" width=\"600\"/>\n\n## 背景位置(position)\n\n语法： \n\n~~~css\nbackground-position : length || length\n\nbackground-position : position || position \n~~~\n\n参数： \n\nlength : 　百分数 | 由浮点数字和单位标识符组成的长度值。请参阅长度单位 \nposition : 　top | center | bottom | left | center | right \n\n说明： \n\n设置或检索对象的背景图像位置。必须先指定background-image属性。默认值为：(0% 0%)。\n如果只指定了一个值，该值将用于横坐标。纵坐标将默认为50%。第二个值将用于纵坐标。\n\n注意：\n\n1. position 后面是x坐标和y坐标。 可以使用方位名词或者 精确单位。\n2. 如果和精确单位和方位名字混合使用，则必须是x坐标在前，y坐标后面。比如 background-position: 15px top;   则 15px 一定是  x坐标   top是 y坐标。\n\n实际工作用的最多的，就是背景图片居中对齐了。\n\n## 背景附着\n\n语法： \n\n~~~css\nbackground-attachment : scroll | fixed \n~~~\n\n参数： \n\nscroll : 　背景图像是随对象内容滚动\nfixed : 　背景图像固定 \n\n说明： \n\n设置或检索背景图像是随对象内容滚动还是固定的。\n\n\n\n## 背景简写\n\nbackground属性的值的书写顺序官方并没有强制标准的。为了可读性，建议大家如下写：\n\nbackground:背景颜色 背景图片地址 背景平铺 背景滚动 背景位置\n\n~~~css\nbackground: transparent url(image.jpg) repeat-y  scroll 50% 0 ;\n~~~\n\n## 背景透明(CSS3)\n\nCSS3支持背景半透明的写法语法格式是:\n\n~~~css\nbackground: rgba(0,0,0,0.3);\n~~~\n\n 最后一个参数是alpha 透明度  取值范围 0~1之间\n\n 注意：  背景半透明是指盒子背景半透明， 盒子里面的内容不收影响。\n\n\n\n\n\n\n\n## 背景缩放(CSS3)\n\n通过background-size设置背景图片的尺寸，就像我们设置img的尺寸一样，在移动Web开发中做屏幕适配应用非常广泛。\n\n其参数设置如下：\n\na) 可以设置长度单位(px)或百分比（设置百分比时，参照盒子的宽高）\n\nb) 设置为cover时，会自动调整缩放比例，保证图片始终填充满背景区域，如有溢出部分则会被隐藏。我们平时用的cover 最多\n\nc) 设置为contain会自动调整缩放比例，保证图片始终完整显示在背景区域。\n\n~~~css\nbackground-image: url('images/gyt.jpg');\n\t\t\tbackground-size: 300px 100px;\n\t\t\t/* background-size: contain; */\n\t\t\t/* background-size: cover; */\n~~~\n\n## 多背景(CSS3)\n\n以逗号分隔可以设置多背景，可用于自适应布局  做法就是 用逗号隔开就好了。\n\n- 一个元素可以设置多重背景图像。 \n- 每组属性间使用逗号分隔。 \n- 如果设置的多重背景图之间存在着交集（即存在着重叠关系），前面的背景图会覆盖在后面的背景图之上。\n- 为了避免背景色将图像盖住，背景色通常都定义在最后一组上，\n\n~~~css\nbackground:url(test1.jpg) no-repeat scroll 10px 20px/50px 60px  ,\n\t   url(test1.jpg) no-repeat scroll 10px 20px/70px 90px ,\n\t   url(test1.jpg) no-repeat scroll 10px 20px/110px 130px c #aaa;\n~~~\n\n- ​\n\n## 凹凸文字\n\n~~~css\n<head>\n        <meta charset=\"utf-8\">\n        <style>\n        body {\n        \tbackground-color: #ccc;\n        }\n\t\tdiv {\n\t\t\tcolor: #ccc;\n\t\t\tfont: 700 80px \"微软雅黑\";\n\t\t}\n\t\tdiv:first-child {\n\t\t\t/* text-shadow: 水平位置  垂直位置  模糊距离 阴影颜色; */\n\t\t\ttext-shadow: 1px 1px 1px #000, -1px -1px 1px #fff;\n\t\t}\n\t\tdiv:last-child {\n\t\t\t/* text-shadow: 水平位置  垂直位置  模糊距离 阴影颜色; */\n\t\t\ttext-shadow: -1px -1px 1px #000, 1px 1px 1px #fff;\n\t\t}\n\n        </style>\n    </head>\n    <body>\n    <div>我是凸起的文字</div>\n    <div>我是凹下的文字</div>\n    </body>\n~~~\n\n![1498467533412](/media/1498467533412.png)\n\n\n\n## 导航栏案例\n\n### 文本的装饰\n\ntext-decoration   通常我们用于给链接修改装饰效果\n\n| 值            | 描述                      |\n| ------------ | ----------------------- |\n| none         | 默认。定义标准的文本。             |\n| underline    | 定义文本下的一条线。下划线 也是我们链接自带的 |\n| overline     | 定义文本上的一条线。              |\n| line-through | 定义穿过文本下的一条线。            |\n|              |                         |\n|              |                         |\n\n**使用技巧**：在一行内的盒子内，我们设定行高等于盒子的高度，就可以使文字垂直居中。\n\n~~~html\n<head>\n        <meta charset=\"utf-8\">\n        <style>\n\t\tbody {\n\t\t\tbackground-color: #000;\n\t\t}\n\t\ta {\n\t\t\twidth: 200px;\n\t\t\theight: 50px;\n\t\t\t/* background-color: orange; */\n\t\t\tdisplay: inline-block;  /* 把a 行内元素转换为行内块元素 */\n\t\t\ttext-align: center;  /* 文字水平居中 */\n\t\t\tline-height: 50px;  /* 我们设定行高等于盒子的高度，就可以使文字垂直居中 */\n\t\t\tcolor: #fff;\n\t\t\tfont-size: 22px;\n\t\t\ttext-decoration: none;  /* 取消下划线 文本装饰 */\n\t\t}\n\t\ta:hover {  /* 鼠标经过 给我们的链接添加背景图片*/\n\t\t\tbackground: url(images/h.png) no-repeat; \n\t\t}\n        </style>\n    </head>\n    <body>\n    <a href=\"#\">专区说明</a>\n    <a href=\"#\">申请资格</a>\n    <a href=\"#\">兑换奖励</a>\n    <a href=\"#\">下载游戏</a>\n    </body>\n~~~\n\n\n\n# CSS 三大特性\n\n层叠 继承  优先级 是我们学习CSS 必须掌握的三个特性。\n\n## CSS层叠性\n\n所谓层叠性是指多种CSS样式的叠加。\n\n是浏览器处理冲突的一个能力,如果一个属性通过两个相同选择器设置到同一个元素上，那么这个时候一个属性就会将另一个属性层叠掉\n\n比如先给某个标签指定了内部文字颜色为红色，接着又指定了颜色为蓝色，此时出现一个标签指定了相同样式不同值的情况，这就是样式冲突。\n\n一般情况下，如果出现样式冲突，则会按照CSS书写的顺序，以最后的样式为准。\n\n1. 样式冲突，遵循的原则是就近原则。 那个样式离着结构近，就执行那个样式。\n2. 样式不冲突，不会层叠\n\n~~~\nCSS最后的执行口诀：  长江后浪推前浪，前浪死在沙滩上。\n~~~\n\n<img src=\"/media/hai.gif\"  width=\"600\" height=\"400\" />\n\n##  CSS继承性\n\n所谓继承性是指书写CSS样式表时，子标签会继承父标签的某些样式，如文本颜色和字号。想要设置一个可继承的属性，只需将它应用于父元素即可。\n\n简单的理解就是：  子承父业。\n\n~~~\nCSS最后的执行口诀：  龙生龙，凤生凤，老鼠生的孩子会打洞。\n~~~\n\n<img src=\"/media/shu.gif\" />\n\n注意：\n\n~~~\n恰当地使用继承可以简化代码，降低CSS样式的复杂性。子元素可以继承父元素的样式（text-，font-，line-这些元素开头的都可以继承，以及color属性）\n~~~\n\n## CSS优先级\n\n定义CSS样式时，经常出现两个或更多规则应用在同一元素上，这时就会出现优先级的问题。\n\n在考虑权重时，初学者还需要注意一些特殊的情况，具体如下：\n\n~~~\n继承样式的权重为0。即在嵌套结构中，不管父元素样式的权重多大，被子元素继承时，他的权重都为0，也就是说子元素定义的样式会覆盖继承来的样式。\n\n行内样式优先。应用style属性的元素，其行内样式的权重非常高，可以理解为远大于100。总之，他拥有比上面提高的选择器都大的优先级。\n\n权重相同时，CSS遵循就近原则。也就是说靠近元素的样式具有最大的优先级，或者说排在最后的样式优先级最大。\n\nCSS定义了一个!important命令，该命令被赋予最大的优先级。也就是说不管权重如何以及样式位置的远近，!important都具有最大优先级。\n~~~\n\n\n\n### CSS特殊性（Specificity）\n\n关于CSS权重，我们需要一套计算公式来去计算，这个就是 CSS Specificity，我们称为CSS 特性或称非凡性，它是一个衡量CSS值优先级的一个标准 具体规范入如下：\n\nspecificity用一个四位的数 字串(CSS2是三位)来表示，更像四个级别，值从左到右，左面的最大，一级大于一级，数位之间没有进制，级别之间不可超越。 \n\n| 继承或者* 的贡献值      | 0,0,0,0 |\n| --------------- | ------- |\n| 每个元素（标签）贡献值为    | 0,0,0,1 |\n| 每个类，伪类贡献值为      | 0,0,1,0 |\n| 每个ID贡献值为        | 0,1,0,0 |\n| 每个行内样式贡献值       | 1,0,0,0 |\n| 每个!important贡献值 | ∞ 无穷大   |\n\n\n\n权重是可以叠加的\n\n 比如的例子：\n\n ~~~\ndiv ul  li   ------>      0,0,0,3\n\n.nav ul li   ------>      0,0,1,2\n\na:hover      -----—>      0,0,1,1\n\n.nav a       ------>      0,0,1,1   \n\n#nav p       ----->       0,1,0,1\n ~~~\n\n​   \n\n​      \n\n <img src=\"/media/w.jpg\" /> 注意： \n\n1.数位之间没有进制 比如说： 0,0,0,5 + 0,0,0,5 =0,0,0,10 而不是 0,0, 1, 0， 所以不会存在10个div能赶上一个类选择器的情况。\n\n2. 继承的 权重是 0\n\n总结优先级：\n\n1. 使用了 !important声明的规则。\n2. 内嵌在 HTML 元素的 style属性里面的声明。\n3. 使用了 ID 选择器的规则。\n4. 使用了类选择器、属性选择器、伪元素和伪类选择器的规则。\n5. 使用了元素选择器的规则。\n6. 只包含一个通用选择器的规则。\n7. 同一类选择器则遵循就近原则。\n\n~~~\n总结：权重是优先级的算法，层叠是优先级的表现\n~~~\n\n# 盒子模型（CSS重点）\n\n其实，CSS就三个大模块：  盒子模型 、 浮动 、 定位，其余的都是细节。要求这三部分，无论如何也要学的非常精通。  \n\n所谓盒子模型就是把HTML页面中的元素看作是一个矩形的盒子，也就是一个盛装内容的容器。每个矩形都由元素的内容、内边距（padding）、边框（border）和外边距（margin）组成。\n\n## 看透网页布局的本质\n\n网页布局中，我们是如何把里面的文字，图片，按照美工给我们的效果图排列的整齐有序呢？\n\n<img src=\"/media/t.png\" />\n\n\n\n牛奶是怎样运输，让消费者购买的呢？\n\n<img src=\"/media/m.jpg\" />\n\n\n\n我们说过，行内元素比如 文字 类似牛奶，也需要一个盒子把他们装起来，我们前面学过的双标签都是一个盒子。有了盒子，我们就可以随意的，自由的，摆放位置了。\n\n看透网页布局的本质：  把网页元素比如文字图片等等，放入盒子里面，然后利用CSS摆放盒子的过程，就是网页布局。\n\n\n\n<img src=\"/media/t1.png\" />\n\n\n\nCSS 其实没有太多逻辑可言 ， 类似我们小时候玩的积木,我们可以自由的，随意的摆放出我们想要的效果。\n\n<img src=\"/media/j.jpg\" width=\"300\" />\n\n## 盒子模型（Box Model）\n\n这里略过 老旧的ie盒子模型（IE6以下），对不起，我都没见过IE5的浏览器。 \n\n<img src=\"/media/d.jpg\" />\n\n。首先，我们来看一张图，来体会下什么是盒子模型。\n\n<img src=\"/media/box.png\"  width=\"700\" />\n\n所有的文档元素（标签）都会生成一个矩形框，我们成为元素框（element box），它描述了一个文档元素再网页布局汇总所占的位置大小。因此，<strong style=\"color: #f00;\">每个盒子除了有自己大小和位置外，还影响着其他盒子的大小和位置。</strong>\n\n<img src=\"/media/boxs.png\"  width=\"700\" />\n\n## 盒子边框（border）\n\n边框就是那层皮。  橘子皮。。柚子皮。。橙子皮。。。\n\n语法： \n\n~~~css\nborder : border-width || border-style || border-color \n~~~\n\n边框属性—设置边框样式（border-style）\n\n边框样式用于定义页面中边框的风格，常用属性值如下：\n\n~~~\nnone：没有边框即忽略所有边框的宽度（默认值）\n\nsolid：边框为单实线(最为常用的)\n\ndashed：边框为虚线  \n\ndotted：边框为点线\n\ndouble：边框为双实线\n~~~\n\n\n\n### 盒子边框写法总结表\n\n|        |                                          |                                          |\n| ------ | ---------------------------------------- | ---------------------------------------- |\n| 设置内容   | 样式属性                                     | 常用属性值                                    |\n| 上边框    | border-top-style:样式; border-top-width:宽度;border-top-color:颜色;border-top:宽度 样式 颜色; |                                          |\n| 下边框    | border-bottom-style:样式;border- bottom-width:宽度;border- bottom-color:颜色;border-bottom:宽度 样式 颜色; |                                          |\n| 左边框    | border-left-style:样式; border-left-width:宽度;border-left-color:颜色;border-left:宽度 样式 颜色; |                                          |\n| 右边框    | border-right-style:样式;border-right-width:宽度;border-right-color:颜色;border-right:宽度 样式 颜色; |                                          |\n| 样式综合设置 | border-style:上边 [右边 下边 左边];              | none无（默认）、solid单实线、dashed虚线、dotted点线、double双实线 |\n| 宽度综合设置 | border-width:上边 [右边 下边 左边];              | 像素值                                      |\n| 颜色综合设置 | border-color:上边 [右边 下边 左边];              | 颜色值、#十六进制、rgb(r,g,b)、rgb(r%,g%,b%)       |\n| 边框综合设置 | border:四边宽度 四边样式 四边颜色;                   |                                          |\n\n### 表格的细线边框\n\n以前学过的html表格边框很粗，这里只需要CSS一句话就可以美观起来。 让我们真的相信，CSS就是我们的白马王子（白雪公主）。\n\ntable{ border-collapse:collapse; }  collapse 单词是合并的意思\n\nborder-collapse:collapse; 表示边框合并在一起。\n\n### 圆角边框(CSS3)\n\n从此以后，我们的世界不只有矩形。radius 半径（距离）\n\n语法格式：\n\n~~~css\nborder-radius: 左上角  右上角  右下角  左下角;\n~~~\n\n课堂案例:\n\n~~~html\n<style>\n\t\tdiv {\n\t\t\twidth: 200px;\n\t\t\theight: 200px;\n\t\t\tborder: 1px solid red;\n\t\t}\n\t\tdiv:first-child {  /* 结构伪类选择器 选亲兄弟 */\n\t\t\tborder-radius: 10px;  /*  一个数值表示4个角都是相同的 10px 的弧度 */ \n\t\t}\n\n\t\tdiv:nth-child(2) {\n\t\t\t/*border-radius: 100px;    取宽度和高度 一半  则会变成一个圆形 */\n\t\t\tborder-radius: 50%;   /*  100px   50% 取宽度和高度 一半  则会变成一个圆形 */\n\t\t}\n\n\t\tdiv:nth-child(3) {\n\t\t\tborder-radius: 10px 40px;  /* 左上角  和 右下角  是 10px  右上角 左下角 40 对角线 */\n\t\t}\n\t\t\n\t\tdiv:nth-child(4) {\n\t\t\tborder-radius: 10px 40px  80px;   /* 左上角 10    右上角  左下角 40   右下角80 */\n\t\t}\n\t\tdiv:nth-child(5) {\n\t\t\tborder-radius: 10px 40px  80px  100px;   /* 左上角 10    右上角 40  右下角 80   左下角   右下角100 */\n\t\t}\n\t\tdiv:nth-child(6) {\n\t\t\tborder-radius: 100px;  \n\t\t\theight: 100px; \n\t\t}\n\t\tdiv:nth-child(7) {\n\t\t\tborder-radius: 100px 0;  \n\t\t}\t\n        </style>\n~~~\n\n\n\n## 内边距（padding）\n\npadding属性用于设置内边距。  是指 边框与内容之间的距离。\n\n\n\npadding-top:上内边距\n\npadding-right:右内边距\n\npadding-bottom:下内边距\n\npadding-left:左内边距\n\n <img src=\"/media/w.jpg\"/>注意：  后面跟几个数值表示的意思是不一样的。\n\n| 值的个数 | 表达意思                                     |\n| ---- | ---------------------------------------- |\n| 1个值  | padding：上下左右边距 比如padding: 3px; 表示上下左右都是3像素 |\n| 2个值  | padding: 上下边距 左右边距 比如 padding: 3px 5px; 表示 上下3像素 左右 5像素 |\n| 3个值  | padding：上边距 左右边距 下边距 比如 padding: 3px 5px 10px; 表示 上是3像素 左右是5像素 下是10像素 |\n| 4个值  | padding:上内边距 右内边距 下内边距 左内边距 比如: padding: 3px 5px 10px 15px; 表示 上3px 右是5px 下 10px 左15px 顺时针 |\n\n课堂案例：  新浪导航\n\n<img src=\"/media/al.gif\" />\n\n## 外边距（margin）\n\nmargin属性用于设置外边距。  设置外边距会在元素之间创建“空白”， 这段空白通常不能放置其他内容。\n\nmargin-top:上外边距\n\nmargin-right:右外边距\n\nmargin-bottom:下外边距\n\nmargin-left:上外边距\n\nmargin:上外边距 右外边距  下外边距  左外边\n\n取值顺序跟内边距相同。\n\n### 外边距实现盒子居中\n\n可以让一个盒子实现水平居中，需要满足一下两个条件：\n\n1. 必须是块级元素。     \n2. 盒子必须指定了宽度（width）\n\n然后就给**左右的外边距都设置为auto**，就可使块级元素水平居中。\n\n实际工作中常用这种方式进行网页布局，示例代码如下：\n\n~~~css\n.header{ width:960px; margin:0 auto;}\n~~~\n\n### 文字盒子居中图片和背景区别\n\n1.  文字水平居中是  text-align: center\n2.  盒子水平居中  左右margin 改为 auto \n\n~~~css\ntext-align: center; /*  文字居中水平 */\nmargin: 10px auto;  /* 盒子水平居中  左右margin 改为 auto 就阔以了 */\n~~~\n\n3. 插入图片 我们用的最多 比如产品展示类\n4. 背景图片我们一般用于小图标背景 或者 超大背景图片\n\n~~~css\nsection img {  \n\t\twidth: 200px;/* 插入图片更改大小 width 和 height */\n\t\theight: 210px;\n\t\tmargin-top: 30px;  /* 插入图片更改位置 可以用margin 或padding  盒模型 */\n\t\tmargin-left: 50px; /* 插入当图片也是一个盒子 */\n\t}\n\naside {\n\t\twidth: 400px;\n\t\theight: 400px;\n\t\tborder: 1px solid purple;\n\t\tbackground: #fff url(images/sun.jpg) no-repeat;\n\t\n\t\tbackground-size: 200px 210px; /*  背景图片更改大小只能用 background-size */\n\t\tbackground-position: 30px 50px; /* 背景图片更该位置 我用 background-position */\n\t}\n~~~\n\n\n\n### 清除元素的默认内外边距\n\n为了更方便地控制网页中的元素，制作网页时，可使用如下代码清除元素的默认内外边距： \n\n~~~css\n* {\n   padding:0;         /* 清除内边距 */\n   margin:0;          /* 清除外边距 */\n}\n~~~\n\n注意：  行内元素是只有左右外边距的，是没有上下外边距的。 内边距，在ie6等低版本浏览器也会有问题。\n\n我们尽量不要给行内元素指定上下的内外边距就好了。\n\n## 外边距合并\n\n使用margin定义块元素的垂直外边距时，可能会出现外边距的合并。\n\n### 相邻块元素垂直外边距的合并\n\n当上下相邻的两个块元素相遇时，如果上面的元素有下外边距margin-bottom，下面的元素有上外边距margin-top，则他们之间的垂直间距不是margin-bottom与margin-top之和，而是两者中的较大者。这种现象被称为相邻块元素垂直外边距的合并（也称外边距塌陷）。\n\n<img src=\"/media/www.png\" />\n\n解决方案：  避免就好了。\n\n### 嵌套块元素垂直外边距的合并\n\n对于两个嵌套关系的块元素，如果父元素没有上内边距及边框，则父元素的上外边距会与子元素的上外边距发生合并，合并后的外边距为两者中的较大者，即使父元素的上外边距为0，也会发生合并。\n\n<img src=\"/media/n.png\" />\n\n解决方案：\n\n1. 可以为父元素定义1像素的上边框或上内边距。\n2. 可以为父元素添加overflow:hidden。\n\n待续。。。。\n\n## content宽度和高度\n\n使用宽度属性width和高度属性height可以对盒子的大小进行控制。\n\nwidth和height的属性值可以为不同单位的数值或相对于父元素的百分比%，实际工作中最常用的是像素值。\n\n大多数浏览器，如Firefox、IE6及以上版本都采用了W3C规范，符合CSS规范的盒子模型的总宽度和总高度的计算原则是：\n\n```\n  /*外盒尺寸计算（元素空间尺寸）*/\n  Element空间高度 = content height + padding + border + margin\n  Element 空间宽度 = content width + padding + border + margin\n  /*内盒尺寸计算（元素实际大小）*/\n  Element Height = content height + padding + border （Height为内容高度）\n  Element Width = content width + padding + border （Width为内容宽度）\n```\n\n注意：\n\n1、宽度属性width和高度属性height仅适用于块级元素，对行内元素无效（ img 标签和 input除外）。\n\n2、计算盒子模型的总高度时，还应考虑上下两个盒子垂直外边距合并的情况。\n\n3、**如果一个盒子没有给定宽度/高度或者继承父亲的宽度/高度，则padding 不会影响本盒子大小**。\n\n## 盒子模型布局稳定性\n\n开始学习盒子模型，同学们最大的困惑就是， 分不清内外边距的使用，什么情况下使用内边距，什么情况下使用外边距？\n\n答案是：  其实他们大部分情况下是可以混用的。  就是说，你用内边距也可以，用外边距也可以。 你觉得哪个方便，就用哪个。\n\n但是，总有一个最好用的吧，我们根据稳定性来分，建议如下：\n\n按照 优先使用  宽度 （width）  其次 使用内边距（padding）    再次  外边距（margin）。   \n\n```\n  width >  padding  >   margin   \n```\n\n原因：\n\n1. margin 会有外边距合并 还有 ie6下面margin 加倍的bug（讨厌）所以最后使用。\n\n2. padding  会影响盒子大小， 需要进行加减计算（麻烦） 其次使用。\n\n3. width   没有问题（嗨皮）我们经常使用宽度剩余法 高度剩余法来做。\n\n   ​\n\n\n## CSS3盒模型\n\nCSS3中可以通过box-sizing 来指定盒模型，即可指定为content-box、border-box，这样我们计算盒子大小的方式就发生了改变。\n\n可以分成两种情况：\n\n1、box-sizing: content-box  盒子大小为 width + padding + border   content-box:此值为其默认值，其让元素维持W3C的标准Box Mode\n\n2、box-sizing: border-box  盒子大小为 width    就是说  padding 和 border 是包含到width里面的\n\n注：上面的标注的width指的是CSS属性里设置的width: length，content的值是会自动调整的。\n\n~~~css\ndiv:first-child {\n\t\t\twidth: 200px;\n\t\t\theight: 200px;\n\t\t\tbackground-color: pink; \n\t\t\tbox-sizing: content-box;  /*  就是以前的标准盒模型  w3c */\n\t\t\tpadding: 10px;\n\t\t\tborder: 15px solid red;\n\t\t\t/* 盒子大小为 width + padding + border   content-box:此值为其默认值，其让元素维持W3C的标准Box Mode */\n\t\t}\n\t\tdiv:last-child {\n\t\t\twidth: 200px;\n\t\t\theight: 200px;\n\t\t\tbackground-color: purple;\n\t\t\tpadding: 10px;\n\t\t\tbox-sizing: border-box;   /* padding border  不撑开盒子 */\n\t\t\tborder: 15px solid red;\n\t\t\t/* margin: 10px; */\n\t\t\t/* 盒子大小为 width    就是说  padding 和 border 是包含到width里面的 */\n}\n~~~\n\n## 盒子阴影\n\n语法格式：\n\n~~~css\nbox-shadow:水平阴影 垂直阴影 模糊距离 阴影尺寸 阴影颜色  内/外阴影；\n~~~\n\n![1498467567011](/media/1498467567011.png)\n\n1. 前两个属性是必须写的。其余的可以省略。\n2. 外阴影 (outset) 但是不能写    默认      想要内阴影  inset \n\n~~~css\ndiv {\n\t\t\twidth: 200px;\n\t\t\theight: 200px;\n\t\t\tborder: 10px solid red;\n\t\t\t/* box-shadow: 5px 5px 3px 4px rgba(0, 0, 0, .4);  */\n\t\t\t/* box-shadow:水平位置 垂直位置 模糊距离 阴影尺寸（影子大小） 阴影颜色  内/外阴影； */\n\t\t\tbox-shadow: 0 15px 30px  rgba(0, 0, 0, .4);\n\t\t\t\n}\n~~~\n\n# 浮动(float)\n\n## 普通流(normal flow)\n\n这个单词很多人翻译为 文档流 ， 字面翻译  普通流 或者标准流都可以。\n\n前面我们说过，网页布局的核心，就是用CSS来摆放盒子位置。如何把盒子摆放到合适的位置？  \n\nCSS的定位机制有3种：普通流（标准流）、浮动和定位。\n\nhtml语言当中另外一个相当重要的概念----------标准流！或者普通流。普通流实际上就是一个网页内标签元素正常从上到下，从左到右排列顺序的意思，比如块级元素会独占一行，行内元素会按顺序依次前后排列；按照这种大前提的布局排列之下绝对不会出现例外的情况叫做普通流布局。\n\n<img src=\"/media/t.jpg\" />\n\n## 浮动(float)\n\n浮动最早是用来控制图片，以便达到其他元素（特别是文字）实现“环绕”图片的效果。\n\n<img src=\"/media/l.png\" style=\"width: 600px; border: 2px solid #000;\"/>\n\n后来，我们发现浮动有个很有意思的事情：就是让任何盒子可以一行排列,因此我们就慢慢的偏离主题，用浮动的特性来布局了。（CSS3已经我们真正意义上的网页布局，具体CSS3我们会详细解释）\n\n<img src=\"/media/d.png\" />\n\n## 什么是浮动？\n\n元素的浮动是指设置了浮动属性的元素会脱离标准普通流的控制，移动到其父元素中指定位置的过程。\n\n在CSS中，通过float属性来定义浮动，其基本语法格式如下：\n\n~~~\n选择器{float:属性值;}\n~~~\n\n| 属性值   | 描述         |\n| ----- | ---------- |\n| left  | 元素向左浮动     |\n| right | 元素向右浮动     |\n| none  | 元素不浮动（默认值） |\n\n## 浮动详细内幕特性\n\n浮动脱离标准流，不占位置，会影响标准流。浮动只有左右浮动。\n\n```\n浮动首先创建包含块的概念（包裹）。就是说， 浮动的元素总是找理它最近的父级元素对齐。但是不会超出内边距的范围。 \n```\n\n\n   <img src=\"/media/one.jpg\" width=\"500\" /> \n\n\n```\n浮动的元素排列位置，跟上一个元素（块级）有关系。如果上一个元素有浮动，则A元素顶部会和上一个元素的顶部对齐；如果上一个元素是标准流，则A元素的顶部会和上一个元素的底部对齐。\n```\n\n\n  <img src=\"/media/two.jpg\" width=\"400\" />\n\n\n```\n由2可以推断出，一个父盒子里面的子盒子，如果其中一个子级有浮动的，则其他子级都需要浮动。这样才能一行对齐显示。\n```\n\n```\n元素添加浮动后，元素会具有行内块元素的特性。元素的大小完全取决于定义的大小或者默认的内容多少浮动根据元素书写的位置来显示相应的浮动。\n```\n\n总结：  浮动 --->    \n\n浮动的目的就是为了让多个块级元素同一行上显示。\n\nfloat      浮 漏 特   \n\n浮：    加了浮动的元素盒子是浮起来的，漂浮在其他的标准流盒子上面。\n漏：    加了浮动的盒子，不占位置的，它浮起来了，它原来的位置漏 给了标准流的盒子。\n特：    特别注意，首先浮动的盒子需要和标准流的父级搭配使用， 其次 特别的注意浮动可以使元素显示模式体现为行内块特性。\n\n# 版心和布局流程\n\n阅读报纸时容易发现，虽然报纸中的内容很多，但是经过合理地排版，版面依然清晰、易读。同样，在制作网页时，要想使页面结构清晰、有条理，也需要对网页进行“排版”。\n\n“版心”(可视区) 是指网页中主体内容所在的区域。一般在浏览器窗口中水平居中显示，常见的宽度值为960px、980px、1000px、1200px等。\n\n## 布局流程\n\n为了提高网页制作的效率，布局时通常需要遵守一定的布局流程，具体如下：\n\n1、确定页面的版心（可视区）。\n\n2、分析页面中的行模块，以及每个行模块中的列模块。\n\n3、制作HTML结构 。\n\n4、CSS初始化，然后开始运用盒子模型的原理，通过DIV+CSS布局来控制网页的各个模块。\n\n## 一列固定宽度且居中\n\n<img src=\"/media/yl.jpg\" width=\"400\" />\n\n最普通的，最为常用的结构\n\n## 两列左窄右宽型\n\n<img src=\"/media/ll.jpg\" width=\"400\" />\n\n比如小米    <a href=\"http://www.mi.com\" target=\"_blank\"> 小米官网 </a>\n\n## 通栏平均分布型\n\n<img src=\"/media/tl.jpg\" width=\"600\" />\n\n比如锤子    <a href=\"http://www.smartisan.com/\" target=\"_blank\"> 锤子官网 </a>\n\n# 清除浮动\n\n人生就像乘坐北京地铁一号线：\n\n途经国贸，羡慕繁华；\n\n途经天安门，幻想权力；\n\n途经金融街，梦想发财；\n\n经过公主坟，遥想华丽家族；\n\n经过玉泉路，依然雄心勃勃…\n\n这时，有个声音飘然入耳:乘客你好,八宝山马上就要到了！\n\n顿时醒悟：人生苦短，有始有终。 \n\n好比我们的浮动，有浮动开始，则就应该有浮动结束。\n\n## 为什么要清除浮动\n\n我们前面说过，浮动本质是用来做一些文字混排效果的，但是被我们拿来做布局用，则会有很多的问题出现， 但是，你不能说浮动不好 <img src=\"/media/wq.jpg\" height=\"100\" />。  \n\n由于浮动元素不再占用原文档流的位置，所以它会对后面的元素排版产生影响，为了解决这些问题，此时就需要在该元素中清除浮动。\n\n准确地说，并不是清除浮动，而是**清除浮动后造成的影响**\n\n如果浮动一开始就是一个美丽的错误，那么请用正确的方法挽救它。\n\n\n\n## 清除浮动本质\n\n清除浮动主要为了解决父级元素因为子级浮动引起内部高度为0 的问题。\n\n<img src=\"/media/n.jpg\" />\n\n<img src=\"/media/no.jpg\" />\n\n<img src=\"/media/kc.jpg\" />\n\n## 清除浮动的方法\n\n其实本质叫做闭合浮动更好一些, 记住，清除浮动就是把浮动的盒子圈到里面，让父盒子闭合出口和入口不让他们出来影响其他元素。\n\n在CSS中，clear属性用于清除浮动，其基本语法格式如下：\n\n```\n选择器{clear:属性值;}\n```\n\n| 属性值   | 描述                    |\n| ----- | --------------------- |\n| left  | 不允许左侧有浮动元素（清除左侧浮动的影响） |\n| right | 不允许右侧有浮动元素（清除右侧浮动的影响） |\n| both  | 同时清除左右两侧浮动的影响         |\n\n### 额外标签法\n\n```html\n是W3C推荐的做法是通过在浮动元素末尾添加一个空的标签例如 <div style=”clear:both”></div>，或则其他标签br等亦可。\n```\n\n优点： 通俗易懂，书写方便\n\n缺点： 添加许多无意义的标签，结构化较差。  我只能说，w3c你推荐的方法我不接受，你不值得拥有。。。\n\n### 父级添加overflow属性方法\n\n可以通过触发BFC的方式，可以实现清除浮动效果。（BFC后面讲解）\n\n~~~css\n可以给父级添加： overflow为 hidden|auto|scroll  都可以实现。\n~~~\n优点：  代码简洁\n\n缺点：  内容增多时候容易造成不会自动换行导致内容被隐藏掉，无法显示需要溢出的元素。\n\n### 使用after伪元素清除浮动\n\n**:after 方式为空元素的升级版，好处是不用单独加标签了** \n\n使用方法：\n\n```css\n .clearfix:after {  content: \".\"; display: block; height: 0; clear: both; visibility: hidden;  }   \n\n .clearfix {*zoom: 1;}   /* IE6、7 专有 */\n```\n\n优点： 符合闭合浮动思想  结构语义化正确\n\n缺点： 由于IE6-7不支持:after，使用 zoom:1触发 hasLayout。\n\n代表网站： 百度、淘宝网、网易等\n\n<img src=\"/media/163.png\" style=\"border: 1px dashed #3c3c3c;\"/>\n\n\n\n注意： content:\".\"  里面尽量跟一个小点，或者其他，尽量不要为空，否则再firefox 7.0前的版本会有生成空格。\n\n\n### 使用before和after双伪元素清除浮动\n\n使用方法：\n\n```css\n.clearfix:before,.clearfix:after { \n  content:\"\";\n  display:table;  /* 这句话可以出发BFC BFC可以清除浮动,BFC我们后面讲 */\n}\n.clearfix:after {\n clear:both;\n}\n.clearfix {\n  *zoom:1;\n}\n```\n\n优点：  代码更简洁\n\n缺点：  由于IE6-7不支持:after，使用 zoom:1触发 hasLayout。\n\n代表网站： 小米、腾讯等\n\n \n\n\n\n# Photoshop图像处理专家\n\n![1498465020015](/media/1498465020015.png)\n\nPS 工具是我们使用频率比较高的软件之一， 我们学习PS目的不是为了设计海报做电商和UI的，而是要求：\n\n1. 会简单的抠图\n2. 会简单的修改PSD效果图\n3. **熟练的切图**\n4. 能和网站美工美眉有共同话题。。。。。\n\n## Photoshop基本使用\n\n## PS界面组成：\n\n菜单栏、选项栏、工具栏、浮动面板（拖拽名称，可单独操作面板）、绘图窗口\n​    窗口菜单，可显示隐藏所有面板\n\n工作区：（新建）\n\n调整浮动面板\n\n<img src=\"/media/jiemian.png\"/>\n\n## 基本操作\n\n文件下拉菜单：\n​    1、新建      新建文档      CTRL+N\n\n单位：像素   厘米   毫米\n\n屏幕显示： 单位  像素      72像素/英寸    RGB颜色模式\n\n<img src=\"/media/huabu.png\"/>\n\n2、关闭文档     CTRL+W \n\n3、存储    CTRL+S    （替存）\n\n4、存储为  CTRL+SHIFT+S    另存一份文件\n\n<img src=\"/media/baocun.png\"/>\n\n5、格式：\n​      .psd     PS源文件格式   图层、文字、样式等，可再次编辑\n​      （给自己）\n​      .jpg     有损压缩格式   （给客户）  品质  最高12\n\n6、文件打开：\n​      1）文件下拉菜单-打开（CTRL+O欧）\n\n​      2）双击软件空白处也能打开\n​    \n\n\n\n## 移动工具 V   \n\n1、不同文件之间拖拽图像。\n\n\n\n## 自由变形\n\nctrl + T 可以改变图像的大小\n\n<img src=\"/media/bianhuan.png\" />\n\n按下enter 回车确认操作。\n\n## 图层操作(重点)\n\n 图层面板快捷键   F7  其实图层就是一张张透明的纸  可以实现叠加问题。\n\n<img src=\"/media/tuceng.png\" />\n\n 图层选择： 使用移动工具V \n\n 1、图层缩览图判断\n\n 2、按住CTRL,在目标图像上单击\n\n 3、将光标放置在目标图像上右键，选择图层名称\n\n图层面板中加选图层：\n\n1、按SHIFT，单击另一目标图层     中间所有图层被选中\n\n2、按CTRL，单击另一目标图层     只选中目标图层\n\n复制图层：选中目标图层后（移动工具状态下）\n\n   1、按ALT拖拽图像\n\n   2、CTRL+J      （重合）\n\n案例： 摆放一个自行车\n\n<img src=\"/media/bike.jpg\" />\n\n## 图层编组\n\n选中目标图层，CTRL+G   \n\n取消编组：CTRL+SHIFT+G\n\n双击图层名称可重新命名\n\n双击组名称，可命名组\n\n  移动工具V选择组或图层时，需设置选项栏\n\n![1498465862231](/media/1498465862231.png)\n\n## 图层上下位置移动\n\n1、选中目标图层，在图层面拖拽\n\n2、CTRL+]    向上移动图层\n​       CTRL+[    向下移动图层\n\n3、CTRL+SHIFT+]   图层置顶\n​       CTRL+SHIFT+[   图层置底\n\n移动选区或图像时：\n\n移动过程中，没释放鼠标，按住SHIFT，可同一水平线、同一垂线、45度移动。\n\nps中的撤销操作是：\n\nctrl+z  撤销一步\n\nctrl+alt+z  撤销多步\n\n## 图层合并\n\nctrl+e 可以合并图层\n\n<img src=\"/media/hebing.png\" />\n\n## 图层透明度\n\n不透明度：设置图层的不透明程度    0%完全透明，不可见\n\n​                                  100%完全不透明，真实可见\n\n填充：与不透明度效果类似\n\n![1498465905203](/media/1498465905203.png))\n\n键盘数字键，可快速设置透明度数值     \n\n## 矩形选区工具 M\n\n用来选择某部分区域  我们成为选区工具 \n\n<img src=\"/media/gongjuxiang.png\" />\n\n\n\n取消选区：  ctrl+d \n\n\n\n## 颜色填充\n\n<img src=\"/media/yanse1.png\" />\n\n<img src=\"/media/yanse2.png\" />\n\n\n\n<img src=\"/media/miqi.jpg\"/>\n\n## 套索工具 L\n\n1、套索工具      L  在屏幕上拖拽鼠标左键，释放后生成选区\n\n2、多边形套索    L  连续单击绘制多边形选区\n\n​                  闭合方法：1、单击起始点  2、双击任意位置\n\n​                  DELETE删除当前点\n\n<img src=\"/media/shiboguan.jpg\" />\n\n## 磁性套索 L  \n\nL   在颜色交界的位置单击后拖动。单击起始点后，生成选区。      \n\n<img src=\"/media/cixing.jpg\" />\n\n## 魔棒工具   W\n\n以单击位置为选择色，选择相似颜色生成选区。\n\n![1498465928343](/media/1498465928343.png) \n\n容差：选择颜色的范围     容差小，颜色选择精确。    0-255\n\n连续：勾选连续时，相连颜色生成选区。\n\n​     不勾选，画面中所有相似颜色被选中生成选区。\n\n按SHIFT在未生成选区位置单击，可选区相加。\n\n选区反选：CTRL+SHIFT+I \n\n\n\n## 选区布尔运算\n\n![1498465944087](/media/1498465944087.png)\n\n选区面积大小的变化。\n\n新选区：保持选中状态\n\n添加到选区：相加运算（按住SHIFT再绘制选区）\n\n从选区减去：相减（按住ALT再绘制选区）\n\n与选区交叉：重合部分保留。（按住ALT+SHIFT再绘制选区）\n\n梦幻星球\n\n<img src=\"/media/chengshi.jpg\" />\n\n## 钢笔工具：   P\n\n作用：绘制路径，生成选区，抠图。\n\n组成;路径线和锚点\n\n绘制路径后，CTRL+回车，生成选区。\n\n路径类型：\n\n直线型路径：连续单击\n\n曲线型路径：第一点单击，第二点拖动鼠标。\n\n<img src=\"/media/jiu.png\"/>\n\n\n\n\n\n## 文字工具\n\nT  可以直接输入文字\n\n##  Photoshop 切图\n\nPS切图 可以 分为 手动 利用切片切图 以及 利用PS的插件快速切图\n\n### 切片工具\n\n\n\n![1498466173246](/media/1498466173246.png)\n\n\n\n\n\n\n\n1. 利用切片工具手动划出\n\n2. 图层菜单---新建基于图层的切片\n\n3. 利用标尺   基于参考线的切片 （选择切片工具）\n\n   ​\n\n   ![1498466734205](/media/1498466734205.png)\n\n4. 先选个一个整个的切片，  切片选择工具-- 属性面板中有 “划分”   --可以等分数平分切图\n\n\n导出切片： 文件-- 存储为web设备所用格式\n\n### 辅助线和切片使用及清除\n\n视图菜单-- 清除 辅助线/ 清除切片\n\n### 切图插件\n\nCutterman是一款运行在photoshop中的插件，能够自动将你需要的图层进行输出， 以替代传统的手工 \"导出web所用格式\" 以及使用切片工具进行挨个切图的繁琐流程。 它支持各种各样的图片尺寸、格式、形态输出，方便你在pc、ios、Android等端上使用。 它不需要你记住一堆的语法、规则，纯点击操作，方便、快捷，易于上手。\n\n官网: http://www.cutterman.cn/zh/cutterman\n\n注意： cutterman插件要求你的ps 必须是完整版，不能是绿色版，所以大家需要从新安装完整版本。\n\n<img src=\"/media/sample1.gif\" />\n\n# 项目案例： 学成网\n\n案例练习目的是总结以前的css和html\n\n还有ps的使用。\n\n制作步骤：\n\n1. 准备相关文件。（内部样式表) html文件(index.html)   图片文件\n2. 准备CSS 初始化。 书写结构和样式\n3. 确定版心（是1200像素)和各个模块。\n\n\n# 定位(position)\n\n如果，说浮动， 关键在一个 “浮” 字上面， 那么 我们的定位，关键在于一个 “位” 上。\n\nPS: 定位是我们CSS算是数一数二难点的了，但是，你务必要学好它，我们CSS离不开定位，特别是后面的js特效，天天和定位打交道。不要抵触它，反而要爱上它，它可以让我们工作更加轻松哦！\n\n## 为什么要用定位？\n\n那么定位，最长运用的场景再那里呢？   来看几幅图片，你一定会有感悟！\n\n第一幅图， 小黄色块可以再图片上移动：\n\n<img src=\"/media/1.gif\" style=\"border: 1px dashed #3c3c3c;\"/>\n\n第二幅图， 左右箭头压住图片：\n\n<img src=\"/media/2.gif\" style=\"border: 1px dashed #3c3c3c;\"/>\n\n第三幅图,  hot 再盒子外面多出一块，更加突出：\n\n<img src=\"/media/it.png\" style=\"border: 1px dashed #3c3c3c;\"/>\n\n以上三个小地方，如果用标准流或者浮动，实现会比较复杂或者难以实现，此时我们用定位来做，just soso！\n\n## 元素的定位属性\n\n元素的定位属性主要包括定位模式和边偏移两部分。\n\n1、边偏移\n\n| 边偏移属性  | 描述                      |\n| ------ | ----------------------- |\n| top    | 顶端偏移量，定义元素相对于其父元素上边线的距离 |\n| bottom | 底部偏移量，定义元素相对于其父元素下边线的距离 |\n| left   | 左侧偏移量，定义元素相对于其父元素左边线的距离 |\n| right  | 右侧偏移量，定义元素相对于其父元素右边线的距离 |\n\n也就说，以后定位要和这边偏移搭配使用了， 比如 top: 100px;  left: 30px; 等等\n\n2、定位模式(定位的分类)\n\n在CSS中，position属性用于定义元素的定位模式，其基本语法格式如下：\n\n选择器{position:属性值;}\n\nposition属性的常用值\n\n| 值        | 描述                       |\n| -------- | ------------------------ |\n| static   | 自动定位（默认定位方式）             |\n| relative | 相对定位，相对于其原文档流的位置进行定位     |\n| absolute | 绝对定位，相对于其上一个已经定位的父元素进行定位 |\n| fixed    | 固定定位，相对于浏览器窗口进行定位        |\n\n## 静态定位(static)\n\n静态定位是所有元素的默认定位方式，当position属性的取值为static时，可以将元素定位于静态位置。 所谓静态位置就是各个元素在HTML文档流中默认的位置。\n\n上面的话翻译成白话：  就是网页中所有元素都默认的是静态定位哦！ 其实就是标准流的特性。\n\n在静态定位状态下，无法通过边偏移属性（top、bottom、left或right）来改变元素的位置。\n\nPS： 静态定位其实没啥可说的。\n\n## 相对定位relative(自恋型)\n\n~~~\n小笑话： \n刚刚看到一个超级超级帅的帅哥，看得我都忍不住想和他搞基了。世间怎会有如此之完美的男人。我和他就这样一动不动的对视着，就仿佛一见钟情。时间也在这一瞬间停止了。直到我的手麻了。才恋恋不舍的放下镜子。。。。\n~~~\n\n<img src=\"/media/smail.gif\" width=\"100\"/>\n\n相对定位是将元素相对于它在标准流中的位置进行定位，当position属性的取值为relative时，可以将元素定位于相对位置。\n\n对元素设置相对定位后，可以通过边偏移属性改变元素的位置，但是它在文档流中的位置仍然保留。如下图所示，即是一个相对定位的效果展示：\n\n<img src=\"/media/r.png\"  />\n\n注意：   \n\n1. 相对定位最重要的一点是，它可以通过边偏移移动位置，但是原来的所占的位置，继续占有。\n2. 其次，每次移动的位置，是以自己的左上角为基点移动（相对于自己来移动位置）\n\n就是说，相对定位的盒子仍在标准流中，它后面的盒子仍以标准流方式对待它。（相对定位不脱标）\n\n如果说浮动的主要目的是 让多个块级元素一行显示，那么定位的主要价值就是 移动位置， 让盒子到我们想要的位置上去。\n\n## 绝对定位absolute (拼爹型)\n\n~~~\n小笑话：\n\n吃早饭时，老婆往儿子碗里放了两个煎蛋，儿子全给了我，还一本正经地说：“爸爸，多吃点，男人养家不容易。” <br/>\n\n我一阵感动，刚想夸他两句。 \n\n儿子接着说：“以后全靠你让我拼爹了！”\n~~~\n\n<img src=\"/media/smail.gif\" width=\"100\"/>\n\n　[注意] 如果文档可滚动，绝对定位元素会随着它滚动，因为元素最终会相对于正常流的某一部分定位。\n\n当position属性的取值为absolute时，可以将元素的定位模式设置为绝对定位。\n\n注意：    绝对定位最重要的一点是，它可以通过边偏移移动位置，但是它完全脱标，完全不占位置。\n\n### 父级没有定位\n\n若所有父元素都没有定位，以浏览器为准对齐(document文档)。\n\n<img src=\"/media/ab.png\" />\n\n### 父级有定位\n\n绝对定位是将元素依据最近的已经定位（绝对、固定或相对定位）的父元素（祖先）进行定位。 \n\n<img src=\"/media/ab1.png\" />\n\n\n\n### 子绝父相\n\n这个“子绝父相”太重要了，是我们学习定位的口诀，时时刻刻记住的。\n\n这句话的意思是 子级是绝对定位的话， 父级要用相对定位。\n\n首先， 我们说下， 绝对定位是将元素依据最近的已经定位绝对、固定或相对定位）的父元素（祖先）进行定位。\n\n就是说， 子级是绝对定位，父亲只要是定位即可（不管父亲是绝对定位还是相对定位，甚至是固定定位都可以），就是说， 子绝父绝，子绝父相都是正确的。\n\n但是，在我们网页布局的时候， 最常说的 子绝父相是怎么来的呢？ 请看如下图：\n\n<img src=\"/media/zi.png\"  style=\"border: 1px dashed #3c3c3c;\"/>\n\n\n\n所以，我们可以得出如下结论：\n\n因为子级是绝对定位，不会占有位置， 可以放到父盒子里面的任何一个地方。\n\n父盒子布局时，需要占有位置，因此父亲只能是 相对定位. \n\n这就是子绝父相的由来。\n\n## 绝对定位的盒子水平/垂直居中\n\n普通的盒子是左右margin 改为 auto就可， 但是对于绝对定位就无效了\n\n定位的盒子也可以水平或者垂直居中，有一个算法。\n\n1. 首先left 50%   父盒子的一半大小\n\n2. 然后走自己外边距负的一半值就可以了 margin-left。\n\n   ​\n\n## 固定定位fixed(认死理型)\n\n固定定位是绝对定位的一种特殊形式，类似于 正方形是一个特殊的 矩形。它以浏览器窗口作为参照物来定义网页元素。当position属性的取值为fixed时，即可将元素的定位模式设置为固定定位。\n\n当对元素设置固定定位后，它将脱离标准文档流的控制，始终依据浏览器窗口来定义自己的显示位置。不管浏览器滚动条如何滚动也不管浏览器窗口的大小如何变化，该元素都会始终显示在浏览器窗口的固定位置。\n\n固定定位有两点：\n\n1. 固定定位的元素跟父亲没有任何关系，只认浏览器。\n2. 固定定位完全脱标，不占有位置，不随着滚动条滚动。\n\n\n\n记忆法：  就类似于孙猴子， 无父无母，好不容易找到一个可靠的师傅（浏览器），就听的师傅的，别的都不听。\n\n<img src=\"/media/sun.jpg\" width=\"100\">\n\nie6等低版本浏览器不支持固定定位。\n\n## 叠放次序（z-index）\n\n当对多个元素同时设置定位时，定位元素之间有可能会发生重叠。\n\n<img src=\"/media/zzz.png\" />\n\n在CSS中，要想调整重叠定位元素的堆叠顺序，可以对定位元素应用z-index层叠等级属性，其取值可为正整数、负整数和0。\n\n比如：  z-index: 2;\n\n注意：\n\n1. z-index的默认属性值是0，取值越大，定位元素在层叠元素中越居上。\n\n2. 如果取值相同，则根据书写顺序，后来居上。\n\n3. 后面数字一定不能加单位。\n\n4. 只有相对定位，绝对定位，固定定位有此属性，其余标准流，浮动，静态定位都无此属性，亦不可指定此属性。\n\n\n\n# 四种定位总结\n\n| 定位模式         | 是否脱标占有位置   | 是否可以使用边偏移 | 移动位置基准           |\n| ------------ | ---------- | --------- | ---------------- |\n| 静态static     | 不脱标，正常模式   | 不可以       | 正常模式             |\n| 相对定位relative | 不脱标，占有位置   | 可以        | 相对自身位置移动（自恋型）    |\n| 绝对定位absolute | 完全脱标，不占有位置 | 可以        | 相对于定位父级移动位置（拼爹型） |\n| 固定定位fixed    | 完全脱标，不占有位置 | 可以        | 相对于浏览器移动位置（认死理型） |\n\n# 定位模式转换\n\n跟 浮动一样， 元素添加了 绝对定位和固定定位之后， 元素模式也会发生转换， 都转换为 行内块模式，\n\n** 因此 比如 行内元素 如果添加了 绝对定位或者 固定定位后 浮动后，可以不用转换模式，直接给高度和宽度就可以了。**\n\n# 元素的显示与隐藏\n\n在CSS中有三个显示和隐藏的单词比较常见，我们要区分开，他们分别是 display visibility 和 overflow。\n\n他们的主要目的是让一个元素在页面中消失，但是不在文档源码中删除。 最常见的是网站广告，当我们点击类似关闭不见了，但是我们重新刷新页面，它们又会出现和你玩躲猫猫！！\n\n## display 显示\n\ndisplay 设置或检索对象是否及如何显示。\n\ndisplay : none 隐藏对象 与它相反的是 display:block 除了转换为块级元素之外，同时还有显示元素的意思。\n\n特点： 隐藏之后，不再保留位置。\n\n## visibility 可见性\n\n设置或检索是否显示对象。\n\nvisible : 　对象可视\n\nhidden : 　对象隐藏\n\n特点： 隐藏之后，继续保留原有位置。（停职留薪）\n\n## overflow 溢出\n\n检索或设置当对象的内容超过其指定高度及宽度时如何管理内容。\n\nvisible : 　不剪切内容也不添加滚动条。\n\nauto : 　 超出自动显示滚动条，不超出不显示滚动条\n\nhidden : 　不显示超过对象尺寸的内容，超出的部分隐藏掉\n\nscroll : 　不管超出内容否，总是显示滚动条\n\n# CSS高级技巧\n\n## CSS用户界面样式\n\n 所谓的界面样式， 就是更改一些用户操作样式， 比如 更改用户的鼠标样式， 表单轮廓等。但是比如滚动条的样式改动受到了很多浏览器的抵制，因此我们就放弃了。 防止表单域拖拽\n\n### 鼠标样式cursor\n\n 设置或检索在对象上移动的鼠标指针采用何种系统预定义的光标形状。 \n\n```html\ncursor :  default  小白 | pointer  小手  | move  移动  |  text  文本\n```\n\n 鼠标放我身上查看效果哦：\n\n```html\n<ul>\n  <li style=\"cursor:default\">我是小白</li>\n  <li style=\"cursor:pointer\">我是小手</li>\n  <li style=\"cursor:move\">我是移动</li>\n  <li style=\"cursor:text\">我是文本</li>\n</ul>\n```\n\n 尽量不要用hand  因为 火狐不支持     pointer ie6以上都支持的尽量用\n\n### 轮廓 outline\n\n 是绘制于元素周围的一条线，位于边框边缘的外围，可起到突出元素的作用。\n\n~~~css\n outline : outline-color ||outline-style || outline-width \n~~~\n\n 但是我们都不关心可以设置多少，我们平时都是去掉的。\n\n最直接的写法是 ：  outline: 0; \n\n```html\n <input  type=\"text\"  style=\"outline: 0;\"/>\n```\n\n### 防止拖拽文本域resize\n\nresize：none    这个单词可以防止 火狐 谷歌等浏览器随意的拖动 文本域。\n\n右下角可以拖拽： \n\n<textarea></textarea>\n\n右下角不可以拖拽： \n\n```html\n<textarea  style=\"resize: none;\"></textarea>\n```\n\n## vertical-align 垂直对齐\n\n以前我们讲过让带有宽度的块级元素居中对齐，是margin: 0 auto;\n\n以前我们还讲过让文字居中对齐，是 text-align: center;\n\n但是我们从来没有讲过有垂直居中的属性， 我们的妈妈一直很担心我们的垂直居中怎么做。\n\nvertical-align 垂直对齐， 这个看上去很美好的一个属性， 实际有着不可捉摸的脾气，否则我们也不会这么晚来讲解。\n\n<img src=\"/media/1.jpg\" />\n\n~~~css\nvertical-align : baseline |top |middle |bottom \n~~~\n\n设置或检索对象内容的垂直对其方式。 \n\n![1498467742995](/media/1498467742995.png)\n\nvertical-align 不影响块级元素中的内容对齐，它只针对于 行内元素或者行内块元素，特别是行内块元素， 通常用来控制图片和表单等。\n\n### 图片和文字对齐\n\n所以我们知道，我们可以通过vertical-align 控制图片和文字的垂直关系了。 默认的图片会和文字基线对齐。\n\n### 去除图片底侧空白缝隙\n\n有个很重要特性你要记住： 如果一个元素没有基线，比如图片或者表单等行内块元素，则他的底线会和父级盒子的基线对齐。</strong> 这样会造成一个问题，就是图片底侧会有一个空白缝隙。\n\n<img src=\"/media/3.jpg\" />\n\n解决的方法就是：  \n\n1. 给img vertical-align:middle | top等等。  让图片不要和基线对齐。<img src=\"/media/1633.png\"  width=\"500\"  style=\"border: 1px dashed #ccc;\" />\n\n\n1. 给img 添加 display：block; 转换为块级元素就不会存在问题了。<img src=\"/media/sina1.png\" width=\"500\" style=\"border: 1px dashed #ccc;\"/>\n\n# 溢出的文字隐藏\n\n## word-break:自动换行\n\nnormal   使用浏览器默认的换行规则。\n\nbreak-all   允许在单词内换行。\n\nkeep-all    只能在半角空格或连字符处换行。\n\n## text-overflow 文字溢出\n\ntext-overflow : clip | ellipsis\n\n设置或检索是否使用一个省略标记（...）标示对象内文本的溢出\n\nclip : 　不显示省略标记（...），而是简单的裁切 \n\nellipsis : 　当对象内文本溢出时显示省略标记（...）\n\n## CSS精灵技术（sprite）\n\n### 精灵技术产生的背景\n\n<img src=\"/media/s.png\" />\n\n图所示为网页的请求原理图，当用户访问一个网站时，需要向服务器发送请求，网页上的每张图像都要经过一次请求才能展现给用户。\n\n然而，一个网页中往往会应用很多小的背景图像作为修饰，当网页中的图像过多时，服务器就会频繁地接受和发送请求，这将大大降低页面的加载速度。为了有效地减少服务器接受和发送请求的次数，提高页面的加载速度，出现了CSS精灵技术（也称CSS Sprites、CSS雪碧）。\n\n### 精灵技术本质\n\n简单地说，CSS精灵是一种处理网页背景图像的方式。它将一个页面涉及到的所有零星背景图像都集中到一张大图中去，然后将大图应用于网页，这样，当用户访问该页面时，只需向服务发送一次请求，网页中的背景图像即可全部展示出来。通常情况下，这个由很多小的背景图像合成的大图被称为精灵图，如下图所示为京东网站中的一个精灵图。\n\n<img src=\"/media/jd.png\"  style=\"border: 1px dashed #ccc;\" />\n\n### 精灵技术的使用\n\nCSS 精灵其实是将网页中的一些背景图像整合到一张大图中（精灵图），然而，各个网页元素通常只需要精灵图中不同位置的某个小图，要想精确定位到精灵图中的某个小图，就需要使用CSS的background-image、background-repeat和background-position属性进行背景定位，其中最关键的是使用background-position属性精确地定位。\n\n### 制作精灵图\n\nCSS 精灵其实是将网页中的一些背景图像整合到一张大图中（精灵图），那我们要做的，就是把小图拼合成一张大图。\n\n大部分情况下，精灵图都是网页美工做。\n\n~~~\n我们精灵图上放的都是小的装饰性质的背景图片。 插入图片不能往上放。\n我们精灵图的宽度取决于最宽的那个背景。 \n我们可以横向摆放也可以纵向摆放，但是每个图片之间，间隔至少隔开偶数像素合适。\n在我们精灵图的最低端，留一片空隙，方便我们以后添加其他精灵图。\n~~~\n\n结束语：   小公司，背景图片很少的情况，没有必要使用精灵技术，维护成本太高。 如果是背景图片比较多，可以建议使用精灵技术。\n\n## 字体图标\n\n图片是有诸多优点的，但是缺点很明显，比如图片不但增加了总文件的大小，还增加了很多额外的\"http请求\"，这都会大大降低网页的性能的。更重要的是图片不能很好的进行“缩放”，因为图片放大和缩小会失真。 我们后面会学习移动端响应式，很多情况下希望我们的图标是可以缩放的。此时，一个非常重要的技术出现了，额不是出现了，是以前就有，是被从新\"宠幸\"啦。。 这就是字体图标（iconfont).\n\n### 字体图标优点\n\n```\n可以做出跟图片一样可以做的事情,改变透明度、旋转度，等..\n但是本质其实是文字，可以很随意的改变颜色、产生阴影、透明效果等等...\n本身体积更小，但携带的信息并没有削减。\n几乎支持所有的浏览器\n移动端设备必备良药...\n```\n\n### 字体图标使用流程\n\n总体来说，字体图标按照如下流程：\n\n<img src=\"/media/fontt.png\" />\n\n#### 设计字体图标\n\n假如图标是我们公司单独设计，那就需要第一步了，这个属于UI设计人员的工作， 他们在 illustrator 或 Sketch 这类矢量图形软件里创建 icon图标， 比如下图：\n\n<img src=\"/media/03.jpg\" />\n\n  之后保存为svg格式，然后给我们前端人员就好了。 \n\n  其实第一步，我们不需要关心，只需要给我们这些图标就可以了，如果图标是大众的，网上本来就有的，可以直接跳过第一步，进入第三步。\n\n#### 上传生成字体包\n\n   当UI设计人员给我们svg文件的时候，我们需要转换成我们页面能使用的字体文件， 而且需要生成的是兼容性的适合各个浏览器的。\n\n​    推荐网站： http://icomoon.io\n\n**icomoon字库**\n\nIcoMoon成立于2011年，推出的第一个自定义图标字体生成器，它允许用户选择他们所需要的图标，使它们成一字型。 内容种类繁多，非常全面，唯一的遗憾是国外服务器，打开网速较慢。\n\n   推荐网站： http://www.iconfont.cn/\n\n**阿里icon font字库**\n\nhttp://www.iconfont.cn/\n\n这个是阿里妈妈M2UX的一个icon font字体图标字库，包含了淘宝图标库和阿里妈妈图标库。可以使用AI制作图标上传生成。 一个字，免费，免费！！\n\n**fontello**\n\n[http://fontello.com/](http://fontello.com/)\n\n在线定制你自己的icon font字体图标字库，也可以直接从GitHub下载整个图标集，该项目也是开源的。\n\n**Font-Awesome**\n\n[http://fortawesome.github.io/Font-Awesome/](http://fortawesome.github.io/Font-Awesome/)\n\n这是我最喜欢的字库之一了，更新比较快。目前已经有369个图标了。\n\n**Glyphicon Halflings**\n\n[http://glyphicons.com/](http://glyphicons.com/)\n\n这个字体图标可以在Bootstrap下免费使用。自带了200多个图标。\n\n**Icons8**\n\n[https://icons8.com/](https://icons8.com/)\n\n提供PNG免费下载，像素大能到500PX\n\n#### 下载兼容字体包\n\n刚才上传完毕， 网站会给我们把UI做的svg图片转换为我们的字体格式， 然后下载下来就好了\n\n当然，我们不需要自己专门的图标，是想网上找几个图标使用，以上2步可以直接省略了， 直接到刚才的网站上找喜欢的下载使用吧。\n\n<img src=\"/media/fontt1.png\" />\n\n<img src=\"/media/fontt2.png\" />\n\n#### 字体引入到HTML\n\n最后一步，是最重要的一步了， 就是字体文件已经有了，我们需要引入到我们页面中。\n\n1. 首先把 以下4个文件放入到 fonts文件夹里面。 通俗的做法\n\n   ![1498032122244](/media/1498032122244.png)\n\n   ### 第一步：引入项目下面生成的fontclass代码：\n\n   ```html\n   <link rel=\"stylesheet\" type=\"text/CSS\" href=\"./iconfont.CSS\">\n   ```\n\n   ### 第二步：挑选相应图标并获取类名，应用于页面：\n\n   ```html\n   <i class=\"iconfont icon-xxx\"></i>\n   ```\n\n## 滑动门\n\n先来体会下现实中的滑动门,或者你可以叫做推拉门：\n\n<img src=\"/media/h.gif\" />\n\n### 滑动门出现的背景\n\n制作网页时，为了美观，常常需要为网页元素设置特殊形状的背景，比如微信导航栏，有凸起和凹下去的感觉，最大的问题是里面的字数不一样多，咋办？\n\n<img src=\"/media/wxx.jpg\" />\n\n为了使各种特殊形状的背景能够自适应元素中文本内容的多少，出现了CSS滑动门技术。它从新的角度构建页面，使各种特殊形状的背景能够自由拉伸滑动，以适应元素内部的文本内容，可用性更强。 最常见于各种导航栏的滑动门。\n\n### 核心技术\n\n核心技术就是利用CSS精灵（主要是背景位置）和盒子padding撑开宽度, 以便能适应不同字数的导航栏。\n\n一般的经典布局都是这样的：\n\n```html\n<li>\n  <a href=\"#\">\n    <span>导航栏内容</span>\n  </a>\n</li>\n```\n\n总结： \n\n1. a 设置 背景左侧，padding撑开合适宽度。    \n2. span 设置背景右侧， padding撑开合适宽度 剩下由文字继续撑开宽度。\n3. 之所以a包含span就是因为 整个导航都是可以点击的。\n\n\n\n\n## 伸缩布局(CSS3)\n\nCSS3在布局方面做了非常大的改进，使得我们对块级元素的布局排列变得十分灵活，适应性非常强，其强大的伸缩性，在响应式开中可以发挥极大的作用。\n\n主轴：Flex容器的主轴主要用来配置Flex项目，默认是水平方向\n\n侧轴：与主轴垂直的轴称作侧轴，默认是垂直方向的\n\n方向：默认主轴从左向右，侧轴默认从上到下\n\n主轴和侧轴并不是固定不变的，通过flex-direction可以互换。\n\n![1498441839910](/media/1498441839910.png)\n\n\n\nFlex布局的语法规范经过几年发生了很大的变化，也给Flexbox的使用带来一定的局限性，因为语法规范版本众多，浏览器支持不一致，致使Flexbox布局使用不多\n\n**2、各属性详解******\n\na、flex-direction调整主轴方向（默认为水平方向）\n\nb、justify-content调整主轴对齐\n\nc、align-items调整侧轴对齐\n\nd、flex-wrap控制是否换行\n\ne、align-content堆栈（由flex-wrap产生的独立行）对齐\n\nf、flex-flow是flex-direction、flex-wrap的简写形式\n\ng、flex子项目在主轴的缩放比例，不指定flex属性，则不参与伸缩分配\n\nh、order控制子项目的排列顺序，正序方式排序，从小到大\n\n此知识点重在理解，要明确找出主轴、侧轴、方向，各属性对应的属性值\n\n# before和after伪元素\n\n\n\n## 过渡(CSS3)\n\n过渡（transition)是CSS3中具有颠覆性的特征之一，我们可以在不使用 Flash 动画或 JavaScript 的情况下，当元素从一种样式变换为另一种样式时为元素添加效果。\n\n帧动画：通过一帧一帧的画面按照固定顺序和速度播放。如电影胶片\n\n![1498445034712](/media/1498445034712.png)\n\n\n\n<img src=\"/media/zhen.gif\" />\n\n在CSS3里使用transition可以实现补间动画（过渡效果），并且当前元素只要有“属性”发生变化时即存在两种状态(我们用A和B代指），就可以实现平滑的过渡，为了方便演示采用hover切换两种状态，但是并不仅仅局限于hover状态来实现过渡。\n\n语法格式:\n\n~~~\ntransition: 要过渡的属性  花费时间  运动曲线  何时开始;\n~~~\n\n| 属性                         | 描述                      | CSS  |\n| -------------------------- | ----------------------- | ---- |\n| transition                 | 简写属性，用于在一个属性中设置四个过渡属性。  | 3    |\n| transition-property        | 规定应用过渡的 CSS 属性的名称。      | 3    |\n| transition-duration        | 定义过渡效果花费的时间。默认是 0。      | 3    |\n| transition-timing-function | 规定过渡效果的时间曲线。默认是 \"ease\"。 | 3    |\n| transition-delay           | 规定过渡效果何时开始。默认是 0。       | 3    |\n\n运动曲线示意图：\n\n![1498445454760](/media/1498445454760.png)\n\n~~~css\nimg {\n  width:80px; height: 80px; border:8px solid #ccc; border-radius: 50%;\n  transition:transform 0.5s ease-in 0s;\n}\nimg:hover {\n  transform:rotate(180deg);\n}\n~~~\n\n## 2D变形(CSS3)\n\n转换是CSS3中具有颠覆性的特征之一，可以实现元素的位移、旋转、变形、缩放，甚至支持矩阵方式，配合过渡和即将学习的动画知识，可以取代大量之前只能靠Flash才可以实现的效果。\n\n变形转换 transform  \n\n- 移动 translate(x, y) \n\n![1498443715586](/media/1498443715586.png)\n\n```css\ntranslate(50px,50px);\n```\n\n使用translate方法来将文字或图像在水平方向和垂直方向上分别垂直移动50像素。\n\n可以改变元素的位置，x、y可为负值；\n\n~~~\n translate(x,y)水平方向和垂直方向同时移动（也就是X轴和Y轴同时移动）\n translateX(x)仅水平方向移动（X轴移动）\n translateY(Y)仅垂直方向移动（Y轴移动）\n~~~\n\n~~~css\n.box {\n  width: 499.9999px;\n  height: 400px;\n  background: pink;\n  position: absolute;\n  left:50%;\n  top:50%;\n  transform:translate(-50%,-50%);  /* 走的自己的一半 */\n}\n~~~\n\n 让定位的盒子水平居中\n\n- 缩放 scale(x, y) \n\n![1498444645795](/media/1498444645795.png)\n\n```css\ntransform:scale(0.8,1);\n```\n\n可以对元素进行水平和垂直方向的缩放。该语句使用scale方法使该元素在水平方向上缩小了20%，垂直方向上不缩放。\n\n~~~\nscale(X,Y)使元素水平方向和垂直方向同时缩放（也就是X轴和Y轴同时缩放）\nscaleX(x)元素仅水平方向缩放（X轴缩放）\nscaleY(y)元素仅垂直方向缩放（Y轴缩放）\n~~~\n\n scale()的取值默认的值为1，当值设置为0.01到0.99之间的任何值，作用使一个元素缩小；而任何大于或等于1.01的值，作用是让元素放大\n\n- 旋转 rotate(deg) \n\n可以对元素进行旋转，正值为顺时针，负值为逆时针；\n\n![1498443651293](/media/1498443651293.png)\n\n~~~css\ntransform:rotate(45deg);\n~~~\n\n1. 当元素旋转以后，坐标轴也跟着发生的转变\n2. 调整顺序可以解决，把旋转放到最后\n3. 注意单位是 deg 度数\n\n案例旋转扑克牌\n\n~~~css\nbody {\n  background-color: skyblue;\n}\n.container {\n  width: 100px;\n  height: 150px;\n  border: 1px solid gray;\n  margin: 300px auto;\n  position: relative;\n}\n.container > img {\n  display: block;\n  width: 100%;\n  height: 100%;\n  position: absolute;\n  transform-origin: top right;\n  /* 添加过渡 */\n  transition: all 1s;\n}\n.container:hover img:nth-child(1) {\n  transform: rotate(60deg);\n}\n.container:hover img:nth-child(2) {\n  transform: rotate(120deg);\n}\n.container:hover img:nth-child(3) {\n  transform: rotate(180deg);\n}\n.container:hover img:nth-child(4) {\n  transform: rotate(240deg);\n}\n.container:hover img:nth-child(5) {\n  transform: rotate(300deg);\n}\n.container:hover img:nth-child(6) {\n  transform: rotate(360deg);\n}\n~~~\n\n- 倾斜 skew(deg, deg) \n\n![1498443827389](/media/1498443827389.png)\n\n```css\ntransform:skew(30deg,0deg);\n```\n\n该实例通过skew方法把元素水平方向上倾斜30度，处置方向保持不变。\n\n可以使元素按一定的角度进行倾斜，可为负值，第二个参数不写默认为0。\n\n5.transform-origin可以调整元素转换的原点\n\n![1498443912530](/media/1498443912530.png)\n\n```css\n div{transform-origin: left top;transform: rotate(45deg); }  /* 改变元素原点到左上角，然后进行顺时旋转45度 */    \n```\n\n案例：  菱形照片        三角盒子  \n\n## 3D变形\n\n左手坐标系\n\n伸出左手，让拇指和食指成“L”形，大拇指向右，食指向上，中指指向前方。这样我们就建立了一个左手坐标系，拇指、食指和中指分别代表X、Y、Z轴的正方向。如下图\n\n![1498445587576](/media/1498445587576.png)\n\n\n\nCSS3中的3D坐标系与上述的3D坐标系是有一定区别的，相当于其绕着X轴旋转了180度，如下图\n\n![1498459001951](/media/1498459001951.png)\n\n###  rotateX() \n\n 就是沿着 x 立体旋转.\n\n![1498445756802](/media/1498445756802.png)\n\n~~~css\nimg {\n  transition:all 0.5s ease 0s;\n}\nimg:hove {\n\n  transform:rotateX(180deg);\n}\n~~~\n\n### rotateY()\n\n沿着y轴进行旋转\n\n![1498446043198](/media/1498446043198.png)\n\n~~~css\nimg {\n  transition:all 0.5s ease 0s;\n}\nimg:hove {\n\n  transform:rotateX(180deg);\n}\n~~~\n\n### rotateZ()\n\n沿着z轴进行旋转\n\n~~~css\nimg {\n  transition:all .25s ease-in 0s;\n}\nimg:hover {\n  /* transform:rotateX(180deg); */\n  /* transform:rotateY(180deg); */\n  /* transform:rotateZ(180deg); */\n  /* transform:rotateX(45deg) rotateY(180deg) rotateZ(90deg) skew(0,10deg); */\n}\n~~~\n\n### 透视(perspective)\n\n电脑显示屏是一个2D平面，图像之所以具有立体感（3D效果），其实只是一种视觉呈现，通过透视可以实现此目的。\n\n透视可以将一个2D平面，在转换的过程当中，呈现3D效果。\n\n注：并非任何情况下需要透视效果，根据开发需要进行设置。\n\nperspective有两种写法\n\n1. 作为一个属性，设置给父元素，作用于所有3D转换的子元素\n2. 作为transform属性的一个值，做用于元素自身\n\n理解透视距离原理：\n\n![1498446715314](/media/1498446715314.png)\n\n###  开门案例\n\n~~~css\nbody {\n}\n.door {\n  width: 300px;\n  height: 300px;\n  margin: 100px auto;\n  border: 1px solid gray;\n  perspective: 1000px;\n  background: url('images/dog.gif') no-repeat center/cover;\n  position: relative;\n}\n.door > div {\n  box-sizing: border-box;\n  border: 1px solid black;\n}\n.left {\n  float: left;\n  width: 50%;\n  height: 100%;\n  background-color: brown;\n  transform-origin: left center;\n  transition: 1s;\n  position: relative;\n}\n.left::before {\n  content: '';\n  position: absolute;\n  width: 20px;\n  height: 20px;\n  border-radius: 50%;\n  top: 50%;\n  right: 0px;\n  transform: translateY(-10px);\n  border: 1px solid whitesmoke;\n}\n.right {\n  width: 50%;\n  height: 100%;\n  float: left;\n  background-color: brown;\n  transform-origin: right center;\n  transition: 1s;\n  position: relative;\n}\n.right::before {\n  content: '';\n  position: absolute;\n  width: 20px;\n  height: 20px;\n  border-radius: 50%;\n  top: 50%;\n  left: 0px;\n  transform: translateY(-10px);\n  border: 1px solid whitesmoke;\n}\n.door:hover .left {\n  transform: rotateY(-130deg);\n}\n.door:hover .right {\n  transform: rotateY(130deg);\n}\n~~~\n\n### translateX(x)\n\n仅水平方向移动**（X轴移动）\n\n![1498459697576](/media/1498459697576.png)\n\n主要目的实现移动效果\n\n### translateY(y)\n\n仅垂直方向移动（Y轴移动）\n\n![1498459770252](/media/1498459770252.png)\n\n### translateZ(z)\n\ntransformZ的直观表现形式就是大小变化，实质是XY平面相对于视点的远近变化（说远近就一定会说到离什么参照物远或近，在这里参照物就是perspective属性）。比如设置了perspective为200px;那么transformZ的值越接近200，就是离的越近，看上去也就越大，超过200就看不到了，因为相当于跑到后脑勺去了，我相信你正常情况下，是看不到自己的后脑勺的。\n\n###  3D呈现（transform-style）\n\n设置内嵌的元素在 3D 空间如何呈现，这些子元素必须为转换原素。\n\nflat：所有子元素在 2D 平面呈现\n\npreserve-3d：保留3D空间\n\n3D元素构建是指某个图形是由多个元素构成的，可以给这些元素的父元素设置transform-style: preserve-3d来使其变成一个真正的3D图形。\n\n一般而言，该声明应用在3D变换的兄弟元素们的父元素上。\n\n### 翻转盒子案例(百度钱包)\n\n~~~css\nbody {\n  margin: 0;\n  padding: 0;\n  background-color: #B3C04C;\n\n}\n\n.wallet {\n  width: 300px;\n  height: 300px;\n  margin: 50px auto;\n  position: relative;\n  transform-style: preserve-3d;\n  transition: all 0.5s;\n}\n\n.wallet::before, .wallet::after {\n  content: '';\n  position: absolute;\n  left: 0;\n  top: 0;\n  display: block;\n  width: 100%;\n  height: 100%;\n  background-image: url(./images/bg.png);\n  background-repeat: no-repeat;\n}\n\n.wallet::before {\n  background-position: right top;\n  transform: rotateY(180deg);\n}\n\n.wallet::after {\n  background-position: left top;\n  transform: translateZ(2px);\n}\n\n.wallet:hover {\n  transform: rotateY(180deg);\n}\n~~~\n\n\n\n## 动画(CSS3)\n\n动画是CSS3中具有颠覆性的特征之一，可通过设置多个节点来精确控制一个或一组动画，常用来实现复杂的动画效果。\n\n语法格式：\n\n~~~css\nanimation:动画名称 动画时间 运动曲线  何时开始  播放次数  是否反方向;\n~~~\n\n![1498461096243](/media/1498461096243.png)\n\n关于几个值，除了名字，动画时间，延时有严格顺序要求其它随意r\n\n~~~css\n@keyframes 动画名称 {\n  from{ 开始位置 }  0%\n  to{  结束  }  100%\n}\n~~~\n\n~~~\nanimation-iteration-count:infinite;  无限循环播放\nanimation-play-state:paused;   暂停动画\"\n~~~\n\n### 小汽车案例\n\n~~~css\nbody {\n  background: white;\n}\nimg {\n  width: 200px;\n}\n.animation {\n  animation-name: goback;\n  animation-duration: 5s;\n  animation-timing-function: ease;\n  animation-iteration-count: infinite;\n}\n@keyframes goback {\n  0%{}\n  49%{\n    transform: translateX(1000px);\n  }\n  55%{\n    transform: translateX(1000px) rotateY(180deg);\n  }\n  95%{\n    transform: translateX(0) rotateY(180deg);\n  }\n  100%{\n    transform: translateX(0) rotateY(0deg);\n  }\n}\n~~~\n","tags":["Css笔记"],"categories":["Css"]},{"title":"HTML","url":"%2F2017%2F07%2F05%2F01-HTML%2F","content":"\n---\n 学习目标:\n\n  - 了解常用浏览器\n  - 掌握WEB标准\n  - 理解标签语义化\n  - 掌握常用的排版标签\n  - 掌握常用的文本格式化图像链接等标签\n  - 掌握三种列表标签\n  - 掌握表格标签\n  - 掌握表格标签\n  - 掌握表单标签\n  - 掌握H5新增表单和表单属性\ntypora-copy-images-to: media\n---\n\n\n\n# 认识网页\n\n```\n网页主要由文字、图像和超链接等元素构成。当然，除了这些元素，网页中还可以包含音频、视频以及Flash等。\n```\n\n<img src=\"/media/mi.png\">\n\n```\n思考：  网页是如何形成的呢?\n```\n\n<img src=\"/media/web.png\" />\n\n# 常见浏览器介绍\n\n```\n浏览器是网页运行的平台，常用的浏览器有IE、火狐（Firefox）、谷歌（Chrome）、Safari和Opera等。我们平时称为五大浏览器。\n```\n\n<img src=\"/media/b.png\" />\n\n## 查看浏览器占有的市场份额（知晓）\n\n查看网站： <a href=\"http://tongji.baidu.com/data/browser\" target=\"_blank\">http://tongji.baidu.com/data/browser</a>\n\n<img src=\"/media/count.png\" />\n\n## 浏览器内核（理解）             \n\n```\n浏览器内核又可以分成两部分：渲染引擎(layout engineer 或者 Rendering Engine)和 JS 引擎。\n渲染引擎 它负责取得网页的内容（HTML、XML、图像等等）、整理讯息（例如加入 CSS 等），以及计算网页的显示方式，然后会输出至显示器或打印机。浏览器的内核的不同对于网页的语法解释会有不同，所以渲染的效果也不相同。\nJS 引擎 则是解析 Javascript 语言，执行 javascript语言来实现网页的动态效果。\n\n最开始渲染引擎和 JS 引擎并没有区分的很明确，后来 JS 引擎越来越独立，内核就倾向于只指渲染引擎。有一个网页标准计划小组制作了一个 ACID 来测试引擎的兼容性和性能。内核的种类很多，如加上没什么人使用的非商业的免费内核，可能会有10多种，但是常见的浏览器内核可以分这四种：Trident、Gecko、Blink、Webkit。\n```\n\n（1）Trident(IE内核) \n\n国内很多的双核浏览器的其中一核便是 Trident，美其名曰 \"兼容模式\"。\n\n代表： IE、傲游、世界之窗浏览器、Avant、腾讯TT、猎豹安全浏览器、360极速浏览器、百度浏览器等。\n\nWindow10 发布后，IE 将其内置浏览器命名为 Edge，Edge 最显著的特点就是新内核 EdgeHTML。\n\n（2）Gecko(firefox) \n\nGecko(Firefox 内核)： Mozilla FireFox(火狐浏览器) 采用该内核，Gecko 的特点是代码完全公开，因此，其可开发程度很高，全世界的程序员都可以为其编写代码，增加功能。 可惜这几年已经没落了， 比如 打开速度慢、升级频繁、猪一样的队友flash、神一样的对手chrome。\n\n（3） webkit(Safari)  \n\n Safari 是苹果公司开发的浏览器，所用浏览器内核的名称是大名鼎鼎的 WebKit。\n\n 现在很多人错误地把 webkit 叫做 chrome内核（即使 chrome内核已经是 blink 了），苹果感觉像被别人抢了媳妇，都哭晕再厕所里面了。\n\n 代表浏览器：傲游浏览器3、 Apple Safari (Win/Mac/iPhone/iPad)、Symbian手机浏览器、Android 默认浏览器，\n\n（4） Chromium/Bink(chrome) \n\n   在 Chromium 项目中研发 Blink 渲染引擎（即浏览器核心），内置于 Chrome 浏览器之中。Blink 其实是 WebKit 的分支。 \n\n​     大部分国产浏览器最新版都采用Blink内核。\n\n（5） Presto(Opera) \n\n  Presto 是挪威产浏览器 opera 的 \"前任\" 内核，为何说是 \"前任\"，因为最新的 opera 浏览器早已将之抛弃从而投入到了谷歌怀抱了。\n\n  <img src=\"/media/s.jpg\" />\n\n```\n了解一点：\n```\n\n移动端的浏览器内核主要说的是系统内置浏览器的内核。\n\n目前移动设备浏览器上常用的内核有 Webkit，Blink，Trident，Gecko 等，其中 iPhone 和 iPad 等苹果 iOS 平台主要是 WebKit，Android 4.4 之前的 Android 系统浏览器内核是 WebKit，Android4.4 系统浏览器切换到了Chromium，内核是 Webkit 的分支 Blink，Windows Phone 8 系统浏览器内核是 Trident。\n\n# Web标准（重点）\n\n通过以上浏览器的内核不同，我们知道他们工作原理、解析肯定不同，显示就会有差别。\n\n```\n问：  哪个语言再全国基本都可以听得懂？ \n```\n\n<img src=\"/media/bz.png\" />\n\n## Web 标准的好处\n\n*1*、让Web的发展前景更广阔 \n*2*、内容能被更广泛的设备访问\n*3*、更容易被搜寻引擎搜索\n*4*、降低网站流量费用\n*5*、使网站更易于维护\n*6*、提高页面浏览速度\n\n##  Web 标准构成\n\n Web标准不是某一个标准，而是由W3C和其他标准化组织制定的一系列标准的集合。主要包括结构（Structure）、表现（Presentation）和行为（Behavior）三个方面。\n\n~~~\n结构标准：结构用于对网页元素进行整理和分类，主要包括XML和XHTML两个部分。\n样式标准：表现用于设置网页元素的版式、颜色、大小等外观样式，主要指的是CSS。\n行为标准：行为是指网页模型的定义及交互的编写，主要包括DOM和ECMAScript两个部分\n~~~\n\n理想状态我们的源码： .HTML    .css   .js \n\n```\n专业的人，写专业的代码\n```\n\n<img src=\"/media/wk.png\" />\n\n直观感受：\n\n<img src=\"/media/gx.png\" />\n\n总结WEB标准：\n\n结构标准：   <img src=\"/media/hb1.png\" />  决定你是否有个好天然身体 \n\n\n\n样式标准：   <img src=\"/media/hb2.png\" />  决定你是否打扮的美丽外观\n\n\n\n行为标准：   <img src=\"/media/hb3.jpg\"  width=\"420\"   />  决定你是否有吸引人的行为\n\n# HTML 初识\n\n一般先学习HTML+CSS， 这里我们先定一个小目标，先学HTML,后学习CSS。\n\nHTML（英文Hyper Text Markup Language的缩写）中文译为“超文本标签语言”，主要是通过HTML标签对网页中的文本、图片、声音等内容进行描述。\n\n```html\n<strong> 我是加粗的字体 </strong>\n```\n\n   注意：   体会 文本    标签    语言   几个词语  \n\n## HTML骨架格式\n\n日常生活的书信，我们要遵循共同的约定。 \n\n<img src=\"/media/mess.png\" alt=\"\">\n\n同理：HTML 有自己的语言语法骨架格式：\n\n```html\n<HTML>   \n    <head>     \n        <title></title>\n    </head>\n    <body>\n    </body>\n</HTML>\n```\n\n课堂练习1：    书写我们的第一个HTML 页面！\n\n1. 新建一个demo 的 TXT 文件。\n2. 里面写入刚才的HTML 骨架。\n3. 把后缀名改为 .HTML。\n4. 右击--谷歌浏览器打开。\n\n~~~\n1 HTML标签：\n\n作用所有HTML中标签的一个根节点。\n\n2 head标签：\n\n作用：用于存放：\n\ntitle,meta,base,style,script,link\n\n注意在head标签中我们必须要设置的标签是title\n\n3.title标签：\n\n作用：让页面拥有一个属于自己的标题。\n\n4.body标签：\n\n作用：页面在的主体部分，用于存放所有的HTML标签：\n\np,h,a,b,u,i,s,em,del,ins,strong,img\n\n~~~\n\n\n\n为了便于记忆，我们请出刚才要辞职回家养猪的二师兄来帮忙， 我称之为  猪八戒记忆法\n\n<img src=\"/media/pig.png\" />\n\n\n\n\n\n## HTML标签分类\n\n  在HTML页面中，带有“< >”符号的元素被称为HTML标签，如上面提到的 &lt;HTML&gt;、&lt;head&gt;、&lt;body&gt;都是HTML标签。所谓标签就是放在“< >” 标签符中表示某个功能的编码命令，也称为HTML标签或 HTML元素\n\n1.双标签\n\n~~~html\n<标签名> 内容 </标签名>\n~~~\n\n该语法中“<标签名>”表示该标签的作用开始，一般称为“开始标签（start tag）”，“</标签名>” 表示该标签的作用结束，一般称为“结束标签（end tag）”。和开始标签相比，结束标签只是在前面加了一个关闭符“/”。\n\n> ~~~html\n> 比如 <body>我是文字  </body>\n> ~~~\n\n2.单标签\n\n~~~html\n<标签名 />\n~~~\n\n  单标签也称空标签，是指用一个标签符号即可完整地描述某个功能的标签。\n\n> ~~~html\n> 比如  <br />\n> ~~~\n\n## HTML标签关系\n\n标签的相互关系就分为两种：\n\n1.嵌套关系\n\n```html\n<head>  <title> </title>  </head>\n```\n\n<img src=\"/media/father.jpg\">\n\n2.并列关系\n\n```html\n<head></head>\n<body></body>\n```\n\n<img src=\"/media/xiong.jpg\">\n\n测试题：\n\n```\n请问下列哪个标签是错误的？\n```\n\n```\nA  <head></head><body></body>\n```\n\n```\nB  <strong><div></div></strong>\n```\n\n```\nC  <head><title></head></title>\n```\n\n```\nD  <body><div></div></body>\n```\n\n\n\n 倡议： 如果两个标签之间的关系是嵌套关系，子元素最好缩进一个tab键的身位。如果是并列关系，最好上下对齐。\n\n# 开发工具\n\n 这些工具你认识几个？\n\n <img src=\"/media/s.png\" />\n\n  普通青年    Dreamweaver\n\n  文艺青年    sublime\n\n  高手和傻子  用记事本\n\n  其实。。。。\n\n  <img src=\"/media/node.png\" />\n\n  <a href=\"key.HTML\" target=\"_blank\">sublime 一些常用快捷键  点我查看 </a>\n\n\n\n~~~\n再页面中输入 以下2个单词\n1.  html: 5   \n2.  !\n   在sublime里面然后按下tab键盘即可生成HTML骨架\n\n~~~\n\n\n\n# 文档类型<!DOCTYPE>\n\n~~~html\n<!DOCTYPE html>\n~~~\n\n这句话就是告诉我们使用哪个html版本？  我们使用的是 html 5 的版本。  html有很多版本，那我们应该告诉用户和浏览器我们使用的版本号。\n\n<!DOCTYPE> 标签位于文档的最前面，用于向浏览器说明当前文档使用哪种 HTML 或 XHTML 标准规范，必需在开头处使用<!DOCTYPE>标签为所有的XHTML文档指定XHTML版本和类型，只有这样浏览器才能按指定的文档类型进行解析。\n\n注意：  一些老网站可能用的还是老版本的文档类型比如 XHTML之类的，但是我们学的是HTML5,而且HTML5的文档类型兼容很好(向下兼容的原则)，所以大家放心的使用HTML5的文档类型就好了。\n\n# 字符集\n\n<meta charset=\"UTF-8\">\n\nutf-8是目前最常用的字符集编码方式，常用的字符集编码方式还有gbk和gb2312。\n\ngb2312 简单中文  包括6763个汉字\n\nBIG5   繁体中文 港澳台等用\n\nGBK包含全部中文字符    是GB2312的扩展，加入对繁体字的支持，兼容GB2312\n\nUTF-8则包含全世界所有国家需要用到的字符\n\n```\n记住一点，以后我们统统使用UTF-8 字符集, 这样就避免出现字符集不统一而引起乱码的情况了。\n```\n\n# HTML标签的语义化\n\n白话： 所谓标签语义化，就是指标签的含义。\n\n## 为什么要有语义化标签\n\n1. 方便代码的阅读和维护\n\n2. 同时让浏览器或是网络爬虫可以很好地解析，从而更好分析其中的内容 \n\n3. 使用语义化标签会具有更好地搜索引擎优化 \n\n\n核心：合适的地方给一个最为合理的标签。\n\n语义是否良好： 当我们去掉CSS之后，网页结构依然组织有序，并且有良好的可读性。\n\n不管是谁都能看懂这块内容是什么。\n\n遵循的原则：先确定语义的HTML ，再选合适的CSS。\n\n# HTML标签\n\n 首先 HTML和CSS是两种完全不同的语言，我们学的是结构，就只写HTML标签，认识标签就可以了。 不会再给结构标签指定样式了。\n\n HTML标签有很多，这里我们学习最为常用的，后面有些较少用的，我们可以查下手册就可以了。 \n\n## 排版标签\n\n排版标签主要和css搭配使用，显示网页结构的标签，是网页布局最常用的标签。\n\n### 标题标签 (熟记)\n\n 单词缩写：  head   头部. 标题 \n\n为了使网页更具有语义化，我们经常会在页面中用到标题标签，HTML提供了6个等级的标题，即\n\n <h1>、<h2>、<h3>、<h4>、<h5>和<h6>\n\n~~~\n标题标签语义：  作为标题使用，并且依据重要性递减\n~~~\n\n其基本语法格式如下：\n\n```html\n<hn>   标题文本   </hn>\n```\n\n\n\n> 注意：  h1 标签因为重要，尽量少用，不要动不动就向你扔了一个h1。 一般h1 都是给logo使用。\n\n  <img src=\"/media/dog.gif\" />\n\n### 段落标签( 熟记)\n\n单词缩写：  paragraph  段落\n\n 在网页中要把文字有条理地显示出来，离不开段落标签，就如同我们平常写文章一样，整个网页也可以分为若干个段落，而段落的标签就是\n\n~~~html\n<p>  文本内容  </p>\n~~~\n\n是HTML文档中最常见的标签，默认情况下，文本在一个段落中会根据浏览器窗口的大小自动换行。\n\n### 水平线标签(认识)\n\n单词缩写：  horizontal  横线\n\n在网页中常常看到一些水平线将段落与段落之间隔开，使得文档结构清晰，层次分明。这些水平线可以通过插入图片实现，也可以简单地通过标签来完成，<hr />就是创建横跨网页水平线的标签。其基本语法格式如下：\n\n```html\n<hr />是单标签\n```\n\n 在网页中显示默认样式的水平线。\n\n课堂练习2：    新闻页面\n\n<img src=\"/media/sh.png\" /> \n\n\n\n### 换行标签(熟记)\n\n单词缩写：  break   打断 ,换行\n\n在HTML中，一个段落中的文字会从左到右依次排列，直到浏览器窗口的右端，然后自动换行。如果希望某段文本强制换行显示，就需要使用换行标签\n\n```html\n<br />\n```\n\n这时如果还像在word中直接敲回车键换行就不起作用了。\n\n### div span标签(重点)\n\ndiv  span    是没有语义的     是我们网页布局主要的2个盒子\n\ndiv 就是  division  的缩写   分割， 分区的意思  其实有很多div 来组合网页。\n\nspan, 跨度，跨距；范围    \n\n语法格式：\n\n~~~html\n<div> 这是头部 </div>    <span>今日价格</span>\n~~~\n\n\n\n## 文本格式化标签(熟记)\n\n在网页中，有时需要为文字设置粗体、斜体或下划线效果，这时就需要用到HTML中的文本格式化标签，使文字以特殊的方式显示。\n\n<img src=\"/media/tab.png\" />\n\n  b  i  s  u   只有使用 没有 强调的意思       strong   em  del   ins  语义更强烈\n\n\n\n## 标签属性\n\n<img src=\"/media/ttt.jpg\" width=\"300\"  />\n\n属性就是特性 比如 手机的颜色 手机的尺寸 ，总结就是手机的。。\n\n使用HTML制作网页时，如果想让HTML标签提供更多的信息，可以使用HTML标签的属性加以设置。其基本语法格式如下：\n\n```html\n<标签名 属性1=\"属性值1\" 属性2=\"属性值2\" …> 内容 </标签名>\n```\n\n\n\n在上面的语法中，\n\n1.标签可以拥有多个属性，必须写在开始标签中，位于标签名后面。\n\n2.属性之间不分先后顺序，标签名与属性、属性与属性之间均以空格分开。\n\n3.任何标签的属性都有默认值，省略该属性则取默认值。\n\n采取  键值对 的格式   key=\"value\"  的格式  \n\n比如:  \n\n```html\n<hr width=\"400\" />\n```\n\n属性  是 宽度  \n\n值    是 400 \n\n提倡：   尽量不使用 样式属性。   <img src=\"/media/sm.jpg\" /> \n\n## 图像标签img (重点)\n\n单词缩写：   image  图像\n\nHTML网页中任何元素的实现都要依靠HTML标签，要想在网页中显示图像就需要使用图像标签，接下来将详细介绍图像标签<img />以及和他相关的属性。其基本语法格式如下：\n\n该语法中src属性用于指定图像文件的路径和文件名，他是img标签的必需属性。\n\n```html\n<img src=\"图像URL\" />\n```\n\n\n\n<img src=\"/media/img.png\" />\n\n## 链接标签(重点)\n\n单词缩写：  anchor 的缩写 。基本解释 锚, 铁锚 的\n\n在HTML中创建超链接非常简单，只需用标签环绕需要被链接的对象即可，其基本语法格式如下：\n\n```html\n<a href=\"跳转目标\" target=\"目标窗口的弹出方式\">文本或图像</a>\n```\n\nhref：用于指定链接目标的url地址，当为标签应用href属性时，它就具有了超链接的功能。  Hypertext Reference的缩写。意思是超文本引用\n\ntarget：用于指定链接页面的打开方式，其取值有_self和_blank两种，其中_self为默认值，_blank为在新窗口中打开方式。\n\n注意：\n\n1.外部链接 需要添加 http:// www.baidu.com\n\n2.内部链接 直接链接内部页面名称即可 比如 < a href=\"index.html\"> 首页 </a >\n\n3.如果当时没有确定链接目标时，通常将链接标签的href属性值定义为“#”(即href=\"#\")，表示该链接暂时为一个空链接。\n\n4.不仅可以创建文本超链接，在网页中各种网页元素，如图像、表格、音频、视频等都可以添加超链接。\n\n### 锚点定位 （难点）\n\n通过创建锚点链接，用户能够快速定位到目标内容。\n创建锚点链接分为两步：\n\n~~~html\n1.使用“a href=”#id名>“链接文本\"</a>创建链接文本。\n\n2.使用相应的id名标注跳转目标的位置。\n~~~\n\n### base 标签\n\nbase 可以设置整体链接的打开状态   \n\nbase 写到  <head>  </head>  之间\n\n <img src=\"/media/base.png\" />\n\n\n\n##  特殊字符标签 （理解）\n\n <img src=\"/media/zifu.png\" />\n\n## 注释标签\n\n在HTML中还有一种特殊的标签——注释标签。如果需要在HTML文档中添加一些便于阅读和理解但又不需要显示在页面中的注释文字，就需要使用注释标签。其基本语法格式如下：\n​        \n\n```html\n    <!-- 注释语句 -->\n```\n\n注释内容不会显示在浏览器窗口中，但是作为HTML文档内容的一部分，也会被下载到用户的计算机上，查看源代码时就可以看到。\n\n注释重要性：\n\n<img src=\"/media/zs.png\" />\n\n# 路径(重点、难点)\n\n<img src=\"/media/dt.png\" />\n\n<img src=\"/media/lj.png\" />\n\n实际工作中，通常新建一个文件夹专门用于存放图像文件，这时再插入图像，就需要采用“路径”的方式来指定图像文件的位置。\n\n路径可以分为： 相对路径和绝对路径\n\n\n\n## 相对路径\n\n1. 图像文件和HTML文件位于同一文件夹：只需输入图像文件的名称即可，如&lt;img src=\"logo.gif\" /&gt;。\n2. 图像文件位于HTML文件的下一级文件夹：输入文件夹名和文件名，之间用“/”隔开，如&lt;img src=\"img/img01/logo.gif\" /&gt;。\n3. 图像文件位于HTML文件的上一级文件夹：在文件名之前加入“../” ，如果是上两级，则需要使用 “../ ../”，以此类推，如&lt;img src=\"../logo.gif\" /&gt;。\n\n## 绝对路径\n\n绝对路径\n\n“D:\\web\\img\\logo.gif”，或完整的网络地址，例如“http://www.itcast.cn/images/logo.gif”。\n\n\n\n\n\n# 列表标签\n\n什么是列表？\n\n<img src=\"/media/list.png\" />\n\n把…制成表,以表显示\n\n容器里面装载着文字或图表的一种形式，叫列表。\n\n列表最大的特点就是  整齐 、整洁、 有序\n\n## 无序列表 ul （重点）\n\n无序列表的各个列表项之间没有顺序级别之分，是并列的。其基本语法格式如下：\n\n```html\n<ul>\n  <li>列表项1</li>\n  <li>列表项2</li>\n  <li>列表项3</li>\n  ......\n</ul>\n```\n\n比如下面这些，新闻是没有顺序的，不用排队，先到先得，后发布先显示。\n\n<img src=\"/media/ul.png\" />\n\n脚下留心：\n\n```\n 1. <ul></ul>中只能嵌套<li></li>，直接在<ul></ul>标签中输入其他标签或者文字的做法是不被允许的。\n 2. <li>与</li>之间相当于一个容器，可以容纳所有元素。\n 3. 无序列表会带有自己样式属性，放下那个样式，一会让CSS来！\n```\n\n## 有序列表 ol （了解）\n<img src=\"/media/gold.png\" />\n\n\n有序列表即为有排列顺序的列表，其各个列表项按照一定的顺序排列定义，有序列表的基本语法格式如下：\n\n```html\n<ol>\n  <li>列表项1</li>\n  <li>列表项2</li>\n  <li>列表项3</li>\n  ......\n</ol>\n```\n\n  所有特性基本与ul 一致。  \n\n  但是实际工作中， 较少用 ol ，因此我们用一句话来总结下 ol： \n\n  <img src=\"/media/1.jpg\" />\n\n\n\n## 自定义列表（理解）\n\n定义列表常用于对术语或名词进行解释和描述，定义列表的列表项前没有任何项目符号。其基本语法如下：\n\n```html\n<dl>\n  <dt>名词1</dt>\n  <dd>名词1解释1</dd>\n  <dd>名词1解释2</dd>\n  ...\n  <dt>名词2</dt>\n  <dd>名词2解释1</dd>\n  <dd>名词2解释2</dd>\n  ...\n</dl>\n```\n\n <img src=\"/media/2.jpg\" /> \n\n\n\n用的还可以：\n\n<img src=\"/media/mix.png\" />\n\n# 总结\n\n  每一天都有一个主题 我们HTML第一天的主题就是 <认识标签>\n\n学HTML 之前 觉得 很神秘  \n\n<img src=\"/media/z.png\" />\n\n等你学完之后忽然发现\n\n<img src=\"/media/rh.jpg\" width=\"615\" />\n\n\n\n总结今天的思路贯穿线：\n\n<img src=\"/media/a.png\" width=\"1000\" />\n\n# 表格 table(会使用)\n\n存在即是合理的。  表格的现在还是较为常用的一种标签，但不是用来布局，常见处理表格式数据。\n\n<img src=\"/media/table.png\" />\n\nps:  这些地方用表格，你会觉得生活还是那么美好。。。。忍不住想说  PPAP i hava a pen  \n\n\n\n## 创建表格\n\n在HTML网页中，要想创建表格，就需要使用表格相关的标签。创建表格的基本语法格式如下：\n\n```html\n<table>\n  <tr>\n    <td>单元格内的文字</td>\n    ...\n  </tr>\n  ...\n</table>\n```\n\n在上面的语法中包含三对HTML标签，分别为 &lt;table&gt;&lt;/table&gt;、&lt;tr&gt;&lt;/tr&gt;、&lt;td&gt;&lt;/td&gt;，他们是创建表格的基本标签，缺一不可，下面对他们进行具体地解释。\n\n~~~\n1.table用于定义一个表格。\n\n2.tr 用于定义表格中的一行，必须嵌套在 table /table标签中，在 table /table中包含几对 tr /tr，就有几行表格。\n\n3.td /td：用于定义表格中的单元格，必须嵌套在<tr></tr>标签中，一对 <tr> </tr>中包含几对<td></td>，就表示该行中有多少列（或多少个单元格）。\n~~~\n\n注意：\n\n```\n1. <tr></tr>中只能嵌套<td></td>\n```\n\n```\n2. <td></td>标签，他就像一个容器，可以容纳所有的元素\n```\n\n\n\n## 表格属性\n\n<img src=\"/media/tt.png\" />\n\n## 表头标签\n\n表头一般位于表格的第一行或第一列，其文本加粗居中，如下图所示，即为设置了表头的表格。设置表头非常简单，只需用表头标签&lt;th&gt;&lt;/th&gt;替代相应的单元格标签&lt;td&gt;&lt;/td&gt;即可。\n\n <img src=\"/media/th.png\" />\n\n## 表格结构（了解）\n\n```\n在使用表格进行布局时，可以将表格划分为头部、主体和页脚（页脚因为有兼容性问题，我们不在赘述），具体 如下所示：\n\n<thead></thead>：用于定义表格的头部。\n\n必须位于<table></table> 标签中，一般包含网页的logo和导航等头部信息。\n\n\n<tbody></tbody>：用于定义表格的主体。\n\n位于<table></table>标签中，一般包含网页中除头部和底部之外的其他内容。\n```\n\n\n\n\n\n<img src=\"/media/thead.png\" />\n\n## 合并单元格\n\n跨行合并：rowspan    跨列合并：colspan\n\n合并单元格的思想：\n\n​     将多个内容合并的时候，就会有多余的东西，把它删除。    例如 把 3个 td 合并成一个， 那就多余了2个，需要删除。\n\n​     公式：  删除的个数  =  合并的个数  - 1   \n\n## 总结表格\n\n1. 表格提供了HTML 中定义表格式数据的方法。\n2. 表格中由行中的单元格组成。\n3. 表格中没有列元素，列的个数取决于行的单元格个数。\n4. 表格不要纠结于外观，那是CSS 的作用。\n\n# 表单标签(掌握)\n\n现实中的表单，类似我们去银行办理信用卡填写的单子。 如下图\n\n<img src=\"/media/car.jpg\"  width=\"500\" />\n\n目的是为了收集用户信息。\n\n在我们网页中， 我们也需要跟用户进行交互，收集用户资料，此时也需要表单。\n\n在HTML中，一个完整的表单通常由表单控件（也称为表单元素）、提示信息和表单域3个部分构成。\n\n<img src=\"/media/bd.png\" />\n\n  表单控件：\n\n​       包含了具体的表单功能项，如单行文本输入框、密码输入框、复选框、提交按钮、重置按钮等。\n\n  提示信息：\n\n​        一个表单中通常还需要包含一些说明性的文字，提示用户进行填写和操作。\n\n  表单域：  \n\n​      他相当于一个容器，用来容纳所有的表单控件和提示信息，可以通过他定义处理表单数据所用程序的url地址，以及数据提交到服务器的方法。如果不定义表单域，表单中的数据就无法传送到后台服务器。\n\n## input 控件(重点)\n\n在上面的语法中，&lt;input /&gt;标签为单标签，type属性为其最基本的属性，其取值有多种，用于指定不同的控件类型。除了type属性之外，&lt;input /&gt;标签还可以定义很多其他的属性，其常用属性如下表所示。\n\n<img src=\"/media/input.png\" />\n\n##  label标签(理解)\n\nlabel 标签为 input 元素定义标注（标签）。\n\n作用：  用于绑定一个表单元素, 当点击label标签的时候, 被绑定的表单元素就会获得输入焦点\n\n如何绑定元素呢？\n\nfor 属性规定 label 与哪个表单元素绑定。\n\n```html\n<label for=\"male\">Male</label>\n<input type=\"radio\" name=\"sex\" id=\"male\" value=\"male\">\n```\n\n## textarea控件(文本域)\n\n如果需要输入大量的信息，就需要用到&lt;textarea&gt;&lt;/textarea&gt;标签。通过textarea控件可以轻松地创建多行文本输入框，其基本语法格式如下：\n\n```html\n<textarea cols=\"每行中的字符数\" rows=\"显示的行数\">\n  文本内容\n</textarea>\n```\n\n<img src=\"/media/textarea.png\" />\n\n## 下拉菜单\n\n使用select控件定义下拉菜单的基本语法格式如下\n\n```html\n<select>\n  <option>选项1</option>\n  <option>选项2</option>\n  <option>选项3</option>\n  ...\n</select>\n```\n\n注意：\n\n1. &lt;select&gt;</select&gt;中至少应包含一对&lt;option></option&gt;。\n2. 在option 中定义selected =\" selected \"时，当前项即为默认选中项。\n\n## 表单域\n\n在HTML中，form标签被用于定义表单域，即创建一个表单，以实现用户信息的收集和传递，form中的所有内容都会被提交给服务器。创建表单的基本语法格式如下：\n\n```html\n<form action=\"url地址\" method=\"提交方式\" name=\"表单名称\">\n  各种表单控件\n</form>\n```\n\n常用属性：\n\n1. Action\n   在表单收集到信息后，需要将信息传递给服务器进行处理，action属性用于指定接收并处理表单数据的服务器程序的url地址。\n2. method\n   用于设置表单数据的提交方式，其取值为get或post。\n3. name\n   用于指定表单的名称，以区分同一个页面中的多个表单。\n\n注意：  每个表单都应该有自己表单域。\n\n# HTML5新标签与特性\n\n## 文档类型设定\n\n- document\n  - HTML:\n  - XHTML:\n  - HTML5\n\n## 字符设定\n\n- <meta http-equiv=\"charset\" content=\"utf-8\">：HTML与XHTML中建议这样去写\n- <meta charset=\"utf-8\">：HTML5的标签中建议这样去写\n\n## 常用新标签\n\n- header：定义文档的页眉\n- nav：定义导航链接的部分\n- footer：定义文档或节的页脚\n- article：标签规定独立的自包含内容\n- section：定义文档中的节（section、区段）\n- aside：定义其所处内容之外的内容\n\n## 常用新属性\n\n| **属性******           | **用法******                               | **含义******                |\n| -------------------- | ---------------------------------------- | ------------------------- |\n| **placeholder******  | <input type=\"text\" placeholder=\"请输入用户名\"> | 占位符提供可描述输入字段预期值的提示信息      |\n| **autofocus******    | <input type=\"text\" autofocus>            | 规定当页面加载时 input 元素应该自动获得焦点 |\n| **multiple******     | <input type=\"file\" multiple>             | 多文件上传                     |\n| **autocomplete****** | <input type=\"text\" autocomplete=\"off\">   | 规定表单是否应该启用自动完成功能          |\n| **required******     | <input type=\"text\" required>             | 必填项                       |\n| **accesskey******    | <input type=\"text\" accesskey=\"s\">        | 规定激活（使元素获得焦点）元素的快捷键       |\n\n\n\n## 新增的type属性值：\n\n| **类型******       | **使用示例******            | **含义****** |\n| ---------------- | ----------------------- | ---------- |\n| **email******    | <input type=\"email\">    | 输入邮箱格式     |\n| **tel******      | <input type=\"tel\">      | 输入手机号码格式   |\n| **url******      | <input type=\"url\">      | 输入url格式    |\n| **number******   | <input type=\"number\">   | 输入数字格式     |\n| **search******   | <input type=\"search\">   | 搜索框（体现语义化） |\n| **range******    | <input type=\"range\">    | 自由拖动滑块     |\n| **time******     | <input type=\"time\">     |            |\n| **date******     | <input type=\"date\">     |            |\n| **datetime****** | <input type=\"datetime\"> |            |\n| **month******    | <input type=\"month\">    |            |\n| **week******     | <input type=\"week\">     |            |\n\n## 综合案例\n\n~~~html\n<form action=\"\">\n  <fieldset>\n    <legend>学生档案</legend>\n    <label for=\"userName\">姓名:</label>\n    <input type=\"text\" name=\"userName\" id=\"userName\" placeholder=\"请输入用户名\"> <br>\n    <label for=\"userPhone\">手机号码:</label>\n    <input type=\"tel\" name=\"userPhone\" id=\"userPhone\" pattern=\"^1\\d{10}$\"><br>\n    <label for=\"email\">邮箱地址:</label>\n    <input type=\"email\" required name=\"email\" id=\"email\"><br>\n    <label for=\"collage\">所属学院:</label>\n    <input type=\"text\" name=\"collage\" id=\"collage\" list=\"cList\" placeholder=\"请选择\"><br>\n    <datalist id=\"cList\">\n      <option value=\"前端与移动开发学院\"></option>\n      <option value=\"java学院\"></option>\n      <option value=\"c++学院\"></option>\n    </datalist><br>\n    <label for=\"score\">入学成绩:</label>\n    <input type=\"number\" max=\"100\" min=\"0\" value=\"0\" id=\"score\"><br>\n    <label for=\"level\">基础水平:</label>\n    <meter id=\"level\" max=\"100\" min=\"0\" low=\"59\" high=\"90\"></meter><br>\n    <label for=\"inTime\">入学日期:</label>\n    <input type=\"date\" id=\"inTime\" name=\"inTime\"><br>\n    <label for=\"leaveTime\">毕业日期:</label>\n    <input type=\"date\" id=\"leaveTime\" name=\"leaveTime\"><br>\n    <input type=\"submit\">\n  </fieldset>\n</form>\n~~~\n\n\n\n## 多媒体标签\n\n- embed：标签定义嵌入的内容\n\n- audio：播放音频\n\n- video：播放视频\n\n\n### 多媒体 embed（会使用）\n\nembed可以用来插入各种多媒体，格式可以是 Midi、Wav、AIFF、AU、MP3等等。url为音频或视频文件及其路径，可以是相对路径或绝对路径。\n\n因为兼容性问题，我们这里只讲解 插入网络视频， 后面H5会讲解 audio 和video 视频多媒体。 \n\n```html\n<embed src=\"http://player.youku.com/player.php/sid/XMTI4MzM2MDIwOA==/v.swf\" allowFullScreen=\"true\" quality=\"high\" width=\"480\" height=\"400\" align=\"middle\" allowScriptAccess=\"always\" type=\"application/x-shockwave-flash\"></embed>\n```\n\n​\n\n <img src=\"/media/embed.png\" />\n\n 优酷，土豆，爱奇艺，腾讯、乐视等等\n\n1. 先上传   \n2. 在分享\n\n### 多媒体 audio\n\nHTML5通过<audio>标签来解决音频播放的问题。\n\n使用相当简单，如下图所示\n\n![1498468026526](/media/1498468026526.png) \n\n并且可以通过附加属性可以更友好控制音频的播放，如：\n\nautoplay 自动播放\n\ncontrols 是否显不默认播放控件\n\nloop 循环播放\n\n由于版权等原因，不同的浏览器可支持播放的格式是不一样的，如下图供参考\n\n![1498468041058](/media/1498468041058.png) \n\n多浏览器支持的方案，如下图\n\n![1498468052965](/media/1498468052965.png) \n\n\n\n### 多媒体 video\n\n#HTML5通过video标签来解决音频播放的问题。\n\n#同音频播放一样，video使用也相当简单，如下图\n\n![1498468072194](/media/1498468072194.png) \n\n同样，通过附加属性可以更友好的控制视频的播放\n\nautoplay 自动播放\n\ncontrols 是否显示默认播放控件\n\nloop 循环播放\n\nwidth 设置播放窗口宽度\n\nheight 设置播放窗口的高度\n\n由于版权等原因，不同的浏览器可支持播放的格式是不一样的，如下图供参考\n\n![1498468086199](/media/1498468086199.png) \n\n**多浏览器支持的方案，如下图******\n\n![1498468097509](/media/1498468097509.png)\n\n\n# 总结\n\n HTML 第二天的主题：\n\n  熟悉列表---  会使用表格  ---  掌握常用表单 \n\n\n\n","tags":["Html笔记"],"categories":["HTML"]}]